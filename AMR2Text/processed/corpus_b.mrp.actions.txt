# ::id 0
# ::tok How do I remove mildew from a tent ?
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / mildew) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / tent) :manner (MRPNode-4 / amr-unknown))
# ::action CONFIRM	How	amr-unknown
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	I	i
# ::action SHIFT
# ::action CONFIRM	remove	remove-01
# ::action LEFT	ARG0
# ::action REDUCE
# ::action LEFT	manner
# ::action REDUCE
# ::action SHIFT
# ::action CONFIRM	mildew	mildew
# ::action RIGHT	ARG1
# ::action SHIFT
# ::action DROP
# ::action DROP
# ::action REDUCE
# ::action CONFIRM	tent	tent
# ::action RIGHT	ARG2
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 1
# ::tok What could be wrong with my A / C unit ?
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / wrong-02 :ARG1 (MRPNode-2 / amr-unknown) :ARG2 (MRPNode-3 / unit :mod (MRPNode-4 / i) :mod (MRPNode-5 / air-conditioning))))
# ::action CONFIRM	What	amr-unknown
# ::action SHIFT
# ::action CONFIRM	could	possible-01
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	wrong	wrong-02
# ::action RIGHT	ARG1
# ::action CACHE
# ::action LEFT	ARG1
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	my	i
# ::action SHIFT
# ::action DROP
# ::action DROP
# ::action DROP
# ::action CONFIRM	unit	unit
# ::action LEFT	mod
# ::action REDUCE
# ::action RIGHT	ARG2
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 2
# ::tok Senate approves Obama nominee to key appeals court
(MRPNode-0 / approve-01 :ARG1 (MRPNode-1 / government-organization :name (MRPNode-2 / name :op1 senate)) :ARG1 (MRPNode-3 / nominate-01 :ARG1 (MRPNode-4 / person :name (MRPNode-5 / name :op1 obama)) :ARG2 (MRPNode-6 / court :mod (MRPNode-7 / appeal-01) :ARG1-of (MRPNode-8 / key-02))))
# ::action ENTITY	government-organization
# ::action SHIFT
# ::action CONFIRM	approves	approve-01
# ::action LEFT	ARG1
# ::action REDUCE
# ::action SHIFT
# ::action ENTITY	person
# ::action SHIFT
# ::action CONFIRM	nominee	nominate-01
# ::action LEFT	ARG1
# ::action REDUCE
# ::action RIGHT	ARG1
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	key	key-02
# ::action SHIFT
# ::action CONFIRM	appeals	appeal-01
# ::action SHIFT
# ::action CONFIRM	court	court
# ::action LEFT	mod
# ::action REDUCE
# ::action LEFT	ARG1-of
# ::action REDUCE
# ::action RIGHT	ARG2
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 3
# ::tok What can I realistically do to raise my credit score ?
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / amr-unknown) :ARG0 (MRPNode-3 / i :poss-of (MRPNode-4 / score :mod (MRPNode-5 / credit))) :ARG2 (MRPNode-6 / realistic-03) :ARG2 (MRPNode-7 / raise-01 :ARG0 MRPNode-3 :ARG1 MRPNode-4)))
# ::action CONFIRM	What	amr-unknown
# ::action SHIFT
# ::action CONFIRM	can	possible-01
# ::action SHIFT
# ::action CONFIRM	I	i
# ::action SHIFT
# ::action CONFIRM	realistically	realistic-03
# ::action SHIFT
# ::action CONFIRM	do	do-02
# ::action LEFT	ARG2
# ::action REDUCE
# ::action LEFT	ARG0
# ::action CACHE
# ::action RIGHT	ARG1
# ::action CACHE
# ::action LEFT	ARG1
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	raise	raise-01
# ::action RIGHT	ARG2
# ::action REDUCE
# ::action LEFT	ARG0
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	credit	credit
# ::action SHIFT
# ::action CONFIRM	score	score
# ::action LEFT	mod
# ::action REDUCE
# ::action RIGHT	ARG1
# ::action REDUCE
# ::action RIGHT	poss-of
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 4
# ::tok China lands robot rover on moon
(MRPNode-0 / land-01 :ARG1 (MRPNode-1 / rover) :ARG0 (MRPNode-2 / country :name (MRPNode-3 / name :op1 china)) :location (MRPNode-4 / moon))
# ::action ENTITY	country
# ::action SHIFT
# ::action CONFIRM	lands	land-01
# ::action LEFT	ARG0
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	rover	rover
# ::action RIGHT	ARG1
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action CONFIRM	moon	moon
# ::action RIGHT	location
# ::action SHIFT
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 5
# ::tok How can I boost the water pressure in my shower ?
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / boost-01 :ARG1 (MRPNode-2 / pressure :mod (MRPNode-3 / water) :location (MRPNode-4 / shower :poss (MRPNode-5 / i))) :ARG0 MRPNode-5 :manner (MRPNode-6 / amr-unknown)))
# ::action CONFIRM	How	amr-unknown
# ::action SHIFT
# ::action CONFIRM	can	possible-01
# ::action SHIFT
# ::action CONFIRM	I	i
# ::action SHIFT
# ::action CONFIRM	boost	boost-01
# ::action LEFT	ARG0
# ::action CACHE
# ::action RIGHT	ARG1
# ::action CACHE
# ::action LEFT	manner
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	water	water
# ::action SHIFT
# ::action CONFIRM	pressure	pressure
# ::action LEFT	mod
# ::action REDUCE
# ::action RIGHT	ARG1
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action DROP
# ::action CONFIRM	shower	shower
# ::action RIGHT	location
# ::action REDUCE
# ::action LEFT	poss
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 6
# ::tok How can I locate and repair a break in a circuit ?
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / locate-01 :ARG1 (MRPNode-3 / break-01 :ARG1 (MRPNode-4 / circuit)) :ARG0 (MRPNode-5 / i)) :op2 (MRPNode-6 / repair-01 :ARG0 MRPNode-3 :ARG0 MRPNode-5)) :manner (MRPNode-7 / amr-unknown))
# ::action CONFIRM	How	amr-unknown
# ::action SHIFT
# ::action CONFIRM	can	possible-01
# ::action LEFT	manner
# ::action REDUCE
# ::action SHIFT
# ::action CONFIRM	I	i
# ::action SHIFT
# ::action CONFIRM	locate	locate-01
# ::action LEFT	ARG0
# ::action SHIFT
# ::action CONFIRM	and	and
# ::action LEFT	op1
# ::action CACHE
# ::action CACHE
# ::action RIGHT	ARG1
# ::action SHIFT
# ::action CONFIRM	repair	repair-01
# ::action RIGHT	op2
# ::action REDUCE
# ::action CACHE
# ::action LEFT	ARG0
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	break	break-01
# ::action RIGHT	ARG0
# ::action REDUCE
# ::action RIGHT	ARG1
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action DROP
# ::action CONFIRM	circuit	circuit
# ::action RIGHT	ARG1
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 7
# ::tok The definition of term is dependent on the application .
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / apply-02) :ARG0 (MRPNode-2 / define-01 :ARG1 (MRPNode-3 / term)))
# ::action DROP
# ::action CONFIRM	definition	define-01
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	term	term
# ::action RIGHT	ARG1
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action CONFIRM	dependent	depend-01
# ::action LEFT	ARG0
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action DROP
# ::action CONFIRM	application	apply-02
# ::action RIGHT	ARG1
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 8
# ::tok This is a much quicker method than other more naive methods .
(MRPNode-0 / have-degree-91 :ARG1 (MRPNode-1 / method :mod (MRPNode-2 / this)) :ARG2 (MRPNode-3 / quick-02 :ARG1 MRPNode-1) :ARG3 (MRPNode-4 / more :quant (MRPNode-5 / much)) :ARG4 (MRPNode-6 / method :mod (MRPNode-7 / other) :ARG1-of (MRPNode-8 / have-degree-91 :ARG2 (MRPNode-9 / naive) :ARG3 (MRPNode-10 / more :quant (MRPNode-11 / much)))))
# ::action CONFIRM	This	this
# ::action SHIFT
# ::action DROP
# ::action DROP
# ::action CONFIRM	much	much
# ::action NEWNODE	more
# ::action NEWNODE	much
# ::action NEWNODE	more
# ::action SHIFT
# ::action RIGHT	quant
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE
# ::action SHIFT
# ::action RIGHT	quant
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE
# ::action CONFIRM	quicker	quick-02
# ::action SHIFT
# ::action CONFIRM	method	method
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	other	other
# ::action RIGHT	mod
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action CONFIRM	naive	naive
# ::action SHIFT
# ::action REDUCE
# ::action CONFIRM	methods	method
# ::action RIGHT	ARG1
# ::action REDUCE
# ::action LEFT	mod
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 9
# ::tok A link to a page is seen as a vote of support .
(MRPNode-0 / see-01 :ARG1 (MRPNode-1 / thing :ARG3-of (MRPNode-2 / link-01 :ARG1 (MRPNode-3 / page))) :ARG2 (MRPNode-4 / vote-01 :ARG1 (MRPNode-5 / support-01)))
# ::action DROP
# ::action CONFIRM	link	link-01
# ::action NEWNODE	thing
# ::action SHIFT
# ::action RIGHT	ARG3-of
# ::action SHIFT
# ::action DROP
# ::action DROP
# ::action CONFIRM	page	page
# ::action RIGHT	ARG1
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action CONFIRM	seen	see-01
# ::action LEFT	ARG1
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action DROP
# ::action CONFIRM	vote	vote-01
# ::action RIGHT	ARG2
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	support	support-01
# ::action RIGHT	ARG1
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 10
# ::tok Russian Opposition Leader Placed Under House Arrest
(MRPNode-0 / place-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / country :name (MRPNode-3 / name :op1 russia)) :ARG0-of (MRPNode-4 / lead-02 :ARG1 (MRPNode-5 / oppose-01))) :ARG2 (MRPNode-6 / under :op1 (MRPNode-7 / strike-01 :ARG0 (MRPNode-8 / government-organization :name (MRPNode-9 / name :op1 house :op2 house)))))
# ::action ENTITY	country
# ::action NEWNODE	person
# ::action SHIFT
# ::action RIGHT	ARG0-of
# ::action SHIFT
# ::action REDUCE
# ::action CONFIRM	Opposition	oppose-01
# ::action SHIFT
# ::action CONFIRM	Leader	lead-02
# ::action LEFT	ARG1
# ::action REDUCE
# ::action RIGHT	ARG0-of
# ::action SHIFT
# ::action REDUCE
# ::action CONFIRM	Placed	place-01
# ::action LEFT	ARG1
# ::action REDUCE
# ::action SHIFT
# ::action CONFIRM	Under	under
# ::action RIGHT	ARG2
# ::action SHIFT
# ::action REDUCE
# ::action ENTITY	government-organization
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 11
# ::tok You do n't have to worry .
(MRPNode-0 / obligate-01 :polarity - :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / worry-02 :ARG0 MRPNode-1))
# ::action CONFIRM	You	you
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	n't	-
# ::action SHIFT
# ::action CONFIRM	have	obligate-01
# ::action LEFT	polarity
# ::action REDUCE
# ::action LEFT	ARG1
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	worry	worry-02
# ::action RIGHT	ARG2
# ::action CACHE
# ::action LEFT	ARG0
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 12
# ::tok I had a similar situation .
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / situation :ARG1-of (MRPNode-2 / resemble-01)) :ARG0 (MRPNode-3 / i))
# ::action CONFIRM	I	i
# ::action SHIFT
# ::action CONFIRM	had	have-03
# ::action LEFT	ARG0
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	similar	resemble-01
# ::action SHIFT
# ::action CONFIRM	situation	situation
# ::action LEFT	ARG1-of
# ::action REDUCE
# ::action RIGHT	ARG1
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 13
# ::tok They made a decision to protect and polish what remained
(MRPNode-0 / decide-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / protect-01 :ARG1 (MRPNode-3 / thing :ARG1-of (MRPNode-4 / remain-01)) :ARG0 (MRPNode-6 / they)) :op2 (MRPNode-5 / meddle-01 :ARG1 MRPNode-3 :ARG0 MRPNode-6)) :ARG0 MRPNode-6)
# ::action CONFIRM	They	they
# ::action SHIFT
# ::action DROP
# ::action DROP
# ::action CONFIRM	decision	decide-01
# ::action LEFT	ARG0
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	protect	protect-01
# ::action CACHE
# ::action LEFT	ARG0
# ::action REDUCE
# ::action SHIFT
# ::action CONFIRM	and	and
# ::action LEFT	op1
# ::action CACHE
# ::action RIGHT	ARG1
# ::action SHIFT
# ::action DROP
# ::action DROP
# ::action REDUCE
# ::action CONFIRM	remained	remain-01
# ::action NEWNODE	thing
# ::action RIGHT	ARG1
# ::action REDUCE
# ::action SHIFT
# ::action RIGHT	ARG1-of
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 14
# ::tok The third and final film , " The Matrix Revolutions , " will be released in November .
(MRPNode-0 / release-01 :ARG1 (MRPNode-1 / film :mod (MRPNode-2 / ordinal-entity :value 3) :name (MRPNode-3 / name :op1 the :op2 matrix :op3 revolutions)) :time (MRPNode-4 / date-entity :month 11))
# ::action DROP
# ::action DROP
# ::action DROP
# ::action DROP
# ::action CONFIRM	film	film
# ::action SHIFT
# ::action DROP
# ::action DROP
# ::action MERGE
# ::action MERGE
# ::action ENTITY	name
# ::action RIGHT	name
# ::action SHIFT
# ::action DROP
# ::action DROP
# ::action DROP
# ::action DROP
# ::action REDUCE
# ::action CONFIRM	released	release-01
# ::action LEFT	ARG1
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action ENTITY	date-entity
# ::action RIGHT	time
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 15
# ::tok The stock had risen 44 cents in the past four trading sessions .
(MRPNode-0 / rise-01 :ARG1 (MRPNode-1 / stock) :ARG2 (MRPNode-2 / session :mod (MRPNode-3 / trade-01) :time (MRPNode-4 / before :op1 (MRPNode-5 / now))) :ARG2 (MRPNode-6 / monetary-quantity :quant 4 :unit (MRPNode-7 / cent)))
# ::action DROP
# ::action CONFIRM	stock	stock
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	risen	rise-01
# ::action LEFT	ARG1
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	cents	cent
# ::action NEWNODE	monetary-quantity
# ::action RIGHT	ARG2
# ::action SHIFT
# ::action RIGHT	unit
# ::action SHIFT
# ::action DROP
# ::action DROP
# ::action DROP
# ::action REDUCE
# ::action CONFIRM	four	4
# ::action RIGHT	quant
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE
# ::action CONFIRM	trading	trade-01
# ::action SHIFT
# ::action CONFIRM	sessions	session
# ::action LEFT	mod
# ::action REDUCE
# ::action RIGHT	ARG2
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 16
# ::tok He married Casals ' widow , Marta , after Casals ' death .
(MRPNode-0 / marry-01 :ARG1 (MRPNode-1 / he) :ARG2 (MRPNode-2 / person :ARG1-of (MRPNode-3 / die-01) :ARG0-of (MRPNode-4 / have-rel-role-91 :ARG0 (MRPNode-5 / person :name (MRPNode-6 / name :op1 casals)) :ARG2 (MRPNode-7 / widow)) :name (MRPNode-8 / name :op1 marta)) :time (MRPNode-9 / after))
# ::action CONFIRM	He	he
# ::action SHIFT
# ::action CONFIRM	married	marry-01
# ::action LEFT	ARG1
# ::action REDUCE
# ::action SHIFT
# ::action ENTITY	person
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	widow	widow
# ::action NEWNODE	have-rel-role-91
# ::action LEFT	ARG0
# ::action REDUCE
# ::action SHIFT
# ::action RIGHT	ARG2
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action ENTITY	person
# ::action LEFT	ARG0-of
# ::action REDUCE
# ::action RIGHT	ARG2
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	after	after
# ::action CACHE
# ::action RIGHT	time
# ::action SHIFT
# ::action DROP
# ::action DROP
# ::action REDUCE
# ::action CONFIRM	death	die-01
# ::action RIGHT	ARG1-of
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 17
# ::tok A kitten runs fast .
(MRPNode-0 / run-02 :ARG0 (MRPNode-1 / kitten) :ARG1-of (MRPNode-2 / fast-02))
# ::action DROP
# ::action CONFIRM	kitten	kitten
# ::action SHIFT
# ::action CONFIRM	runs	run-02
# ::action LEFT	ARG0
# ::action REDUCE
# ::action SHIFT
# ::action CONFIRM	fast	fast-02
# ::action RIGHT	ARG1-of
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 18
# ::tok A kitten runs .
(MRPNode-0 / run-02 :ARG0 (MRPNode-1 / kitten))
# ::action DROP
# ::action CONFIRM	kitten	kitten
# ::action SHIFT
# ::action CONFIRM	runs	run-02
# ::action LEFT	ARG0
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 19
# ::tok He took skipping work into consideration .
(MRPNode-0 / consider-02 :ARG1 (MRPNode-1 / skip-01 :ARG1 (MRPNode-2 / work-01)) :ARG0 (MRPNode-3 / he))
# ::action CONFIRM	He	he
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	skipping	skip-01
# ::action SHIFT
# ::action CONFIRM	work	work-01
# ::action RIGHT	ARG1
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action CONFIRM	consideration	consider-02
# ::action LEFT	ARG1
# ::action REDUCE
# ::action LEFT	ARG0
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 20
# ::tok It affected the outcome .
(MRPNode-0 / affect-01 :ARG1 (MRPNode-1 / outcome) :ARG0 (MRPNode-2 / it))
# ::action CONFIRM	It	it
# ::action SHIFT
# ::action CONFIRM	affected	affect-01
# ::action LEFT	ARG0
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	outcome	outcome
# ::action RIGHT	ARG1
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 21
# ::tok It got out of control .
(MRPNode-0 / get-03 :ARG1 (MRPNode-1 / it :ARG1-of (MRPNode-2 / control-01)) :ARG2 (MRPNode-3 / out-06 :ARG1 MRPNode-1 :ARG2 MRPNode-2))
# ::action CONFIRM	It	it
# ::action SHIFT
# ::action CONFIRM	got	get-03
# ::action LEFT	ARG1
# ::action SHIFT
# ::action CONFIRM	out	out-06
# ::action RIGHT	ARG2
# ::action CACHE
# ::action LEFT	ARG1
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	control	control-01
# ::action RIGHT	ARG2
# ::action REDUCE
# ::action CACHE
# ::action RIGHT	ARG1-of
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 22
# ::tok We eat chips .
(MRPNode-0 / eat-01 :ARG1 (MRPNode-1 / chip) :ARG0 (MRPNode-2 / we))
# ::action CONFIRM	We	we
# ::action SHIFT
# ::action CONFIRM	eat	eat-01
# ::action LEFT	ARG0
# ::action REDUCE
# ::action SHIFT
# ::action CONFIRM	chips	chip
# ::action RIGHT	ARG1
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 23
# ::tok They split .
(MRPNode-0 / split-01 :ARG0 (MRPNode-1 / they))
# ::action CONFIRM	They	they
# ::action SHIFT
# ::action CONFIRM	split	split-01
# ::action LEFT	ARG0
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 24
# ::tok Have a good time .
(MRPNode-0 / have-03 :mode imperative :ARG1 (MRPNode-1 / time :ARG1-of (MRPNode-2 / good-02)) :ARG0 (MRPNode-3 / you))
# ::action CONFIRM	Have	you
# ::action NEWNODE	imperative
# ::action NEWNODE	have-03
# ::action SHIFT
# ::action RIGHT	mode
# ::action SHIFT
# ::action REDUCE
# ::action RIGHT	ARG0
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action CONFIRM	good	good-02
# ::action SHIFT
# ::action CONFIRM	time	time
# ::action LEFT	ARG1-of
# ::action REDUCE
# ::action RIGHT	ARG1
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 25
# ::tok You should rest .
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / rest-01 :ARG0 (MRPNode-2 / you)))
# ::action CONFIRM	You	you
# ::action SHIFT
# ::action CONFIRM	should	recommend-01
# ::action SHIFT
# ::action CONFIRM	rest	rest-01
# ::action RIGHT	ARG1
# ::action CACHE
# ::action LEFT	ARG0
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 26
# ::tok He died .
(MRPNode-0 / die-01 :ARG1 (MRPNode-1 / he))
# ::action CONFIRM	He	he
# ::action SHIFT
# ::action CONFIRM	died	die-01
# ::action LEFT	ARG1
# ::action REDUCE
# ::action SHIFT
# ::action DROP
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 27
# ::tok Do n't give up .
(MRPNode-0 / give-up-07 :polarity - :mode imperative :ARG0 (MRPNode-1 / you))
# ::action DROP
# ::action CONFIRM	n't	-
# ::action SHIFT
# ::action CONFIRM	give	you
# ::action NEWNODE	imperative
# ::action NEWNODE	give-up-07
# ::action LEFT	polarity
# ::action REDUCE
# ::action SHIFT
# ::action RIGHT	mode
# ::action SHIFT
# ::action REDUCE
# ::action RIGHT	ARG0
# ::action SHIFT
# ::action DROP
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

# ::id 28
# ::tok Go to sleep .
(MRPNode-0 / go-05 :mode imperative :ARG1 (MRPNode-1 / sleep-01 :ARG0 (MRPNode-2 / you)) :ARG0 MRPNode-2)
# ::action CONFIRM	Go	you
# ::action NEWNODE	imperative
# ::action NEWNODE	go-05
# ::action SHIFT
# ::action RIGHT	mode
# ::action SHIFT
# ::action REDUCE
# ::action RIGHT	ARG0
# ::action SHIFT
# ::action DROP
# ::action CONFIRM	sleep	sleep-01
# ::action LEFT	ARG0
# ::action REDUCE
# ::action RIGHT	ARG1
# ::action SHIFT
# ::action DROP
# ::action REDUCE
# ::action LEFT	_ROOT_
# ::action REDUCE
# ::action SHIFT
# ::action REDUCE

