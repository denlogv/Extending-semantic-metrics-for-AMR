# ::id 0
# ::snt Should I cash out my IRA to pay my student loans?
# ::tok Should I cash out my IRA to pay my student loans ?
# ::alignments 0-1|0 1-2|0.0.0.1 5-6|0.0.0+0.0.0.0+0.0.0.0.0 7-8|0.0.1 9-10|0.0.0.1.0.0+0.0.0.1.0.0.0 10-11|0.0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.077468 ::parser eager_oracle ::smatch 0.7906976744186046 ::n_actions 36
# ::node	0	recommend-01	0-1
# ::node	0.0	lose-out-06	
# ::node	0.0.0	product	5-6
# ::node	0.0.0.0	name	5-6
# ::node	0.0.0.0.0	ira	5-6
# ::node	0.0.0.1	i	1-2
# ::node	0.0.0.1.0	loan-01	10-11
# ::node	0.0.0.1.0.0	person	9-10
# ::node	0.0.0.1.0.0.0	study-01	9-10
# ::node	0.0.1	pay-01	7-8
# ::node	0.1	amr-unknown	
# ::root	0	recommend-01
# ::edge	i	ARG2-of	loan-01	0.0.0.1	0.0.0.1.0
# ::edge	loan-01	ARG2	person	0.0.0.1.0	0.0.0.1.0.0
# ::edge	lose-out-06	ARG0	i	0.0	0.0.0.1
# ::edge	lose-out-06	ARG1	product	0.0	0.0.0
# ::edge	lose-out-06	purpose	pay-01	0.0	0.0.1
# ::edge	name	op1	ira	0.0.0.0	0.0.0.0.0
# ::edge	pay-01	ARG0	i	0.0.1	0.0.0.1
# ::edge	pay-01	ARG3	loan-01	0.0.1	0.0.0.1.0
# ::edge	person	ARG0-of	study-01	0.0.0.1.0.0	0.0.0.1.0.0.0
# ::edge	product	name	name	0.0.0	0.0.0.0
# ::edge	product	poss	i	0.0.0	0.0.0.1
# ::edge	recommend-01	ARG1	lose-out-06	0	0.0
# ::edge	recommend-01	ARG2	amr-unknown	0	0.1
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / lose-out-06 :ARG1 (MRPNode-2 / product :name (MRPNode-3 / name :op1 ira) :poss (MRPNode-4 / i :ARG2-of (MRPNode-5 / loan-01 :ARG2 (MRPNode-6 / person :ARG0-of (MRPNode-7 / study-01))))) :ARG0 MRPNode-4 :purpose (MRPNode-8 / pay-01 :ARG0 MRPNode-4 :ARG3 MRPNode-5)) :ARG2 (MRPNode-9 / amr-unknown))

# ::id 1
# ::snt How do I prevent an egg cracking while hard boiling it?
# ::tok How do I prevent an egg cracking while hard boiling it ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0.0 6-7|0.0 8-9|0.0.1.0 9-10|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.083409 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	prevent-01	3-4
# ::node	0.0	crack-02	6-7
# ::node	0.0.0	egg	5-6
# ::node	0.0.1	boil-01	9-10
# ::node	0.0.1.0	hard-02	8-9
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	prevent-01
# ::edge	boil-01	ARG1	egg	0.0.1	0.0.0
# ::edge	boil-01	ARG1-of	hard-02	0.0.1	0.0.1.0
# ::edge	crack-02	ARG1	egg	0.0	0.0.0
# ::edge	crack-02	time	boil-01	0.0	0.0.1
# ::edge	prevent-01	ARG0	i	0	0.1
# ::edge	prevent-01	ARG1	crack-02	0	0.0
# ::edge	prevent-01	manner	amr-unknown	0	0.2
(MRPNode-0 / prevent-01 :ARG1 (MRPNode-1 / crack-02 :ARG1 (MRPNode-2 / egg) :time (MRPNode-3 / boil-01 :ARG1 MRPNode-2 :ARG1-of (MRPNode-4 / hard-02))) :ARG0 (MRPNode-5 / i) :manner (MRPNode-6 / amr-unknown))

# ::id 2
# ::snt How do I remove mildew from a tent?
# ::tok How do I remove mildew from a tent ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0 7-8|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:24.086032 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	remove-01	3-4
# ::node	0.0	mildew	4-5
# ::node	0.1	i	2-3
# ::node	0.2	tent	7-8
# ::node	0.3	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	remove-01	ARG0	i	0	0.1
# ::edge	remove-01	ARG1	mildew	0	0.0
# ::edge	remove-01	ARG2	tent	0	0.2
# ::edge	remove-01	manner	amr-unknown	0	0.3
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / mildew) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / tent) :manner (MRPNode-4 / amr-unknown))

# ::id 3
# ::snt What could be wrong with my A/C unit?
# ::tok What could be wrong with my A / C unit ?
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 5-6|0.0.1.0 9-10|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.089749 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 29
# ::node	0	possible-01	1-2
# ::node	0.0	wrong-02	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	unit	9-10
# ::node	0.0.1.0	i	5-6
# ::node	0.0.1.1	air-conditioning	
# ::root	0	possible-01
# ::edge	possible-01	ARG1	wrong-02	0	0.0
# ::edge	unit	mod	air-conditioning	0.0.1	0.0.1.1
# ::edge	unit	mod	i	0.0.1	0.0.1.0
# ::edge	wrong-02	ARG1	amr-unknown	0.0	0.0.0
# ::edge	wrong-02	ARG2	unit	0.0	0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / wrong-02 :ARG1 (MRPNode-2 / amr-unknown) :ARG2 (MRPNode-3 / unit :mod (MRPNode-4 / i) :mod (MRPNode-5 / air-conditioning))))

# ::id 4
# ::snt What is this language?
# ::tok What is this language ?
# ::alignments 0-1|0.1 2-3|0.0 3-4|0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.091079 ::parser eager_oracle ::smatch 1.0 ::n_actions 16
# ::node	0	language	3-4
# ::node	0.0	this	2-3
# ::node	0.1	amr-unknown	0-1
# ::root	0	language
# ::edge	language	domain	amr-unknown	0	0.1
# ::edge	language	mod	this	0	0.0
(MRPNode-0 / language :mod (MRPNode-1 / this) :domain (MRPNode-2 / amr-unknown))

# ::id 5
# ::snt What can I realistically do to raise my credit score?
# ::tok What can I realistically do to raise my credit score ?
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.0.1 3-4|0.0.2 4-5|0.0 6-7|0.0.3 8-9|0.0.1.0.0 9-10|0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.100165 ::parser eager_oracle ::smatch 1.0 ::n_actions 41
# ::node	0	possible-01	1-2
# ::node	0.0	do-02	4-5
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	i	2-3
# ::node	0.0.1.0	score	9-10
# ::node	0.0.1.0.0	credit	8-9
# ::node	0.0.2	realistic-03	3-4
# ::node	0.0.3	raise-01	6-7
# ::root	0	possible-01
# ::edge	do-02	ARG0	i	0.0	0.0.1
# ::edge	do-02	ARG1	amr-unknown	0.0	0.0.0
# ::edge	do-02	ARG2	raise-01	0.0	0.0.3
# ::edge	do-02	ARG2	realistic-03	0.0	0.0.2
# ::edge	i	poss-of	score	0.0.1	0.0.1.0
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	raise-01	ARG0	i	0.0.3	0.0.1
# ::edge	raise-01	ARG1	score	0.0.3	0.0.1.0
# ::edge	score	mod	credit	0.0.1.0	0.0.1.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / amr-unknown) :ARG0 (MRPNode-3 / i :poss-of (MRPNode-4 / score :mod (MRPNode-5 / credit))) :ARG2 (MRPNode-6 / realistic-03) :ARG2 (MRPNode-7 / raise-01 :ARG0 MRPNode-3 :ARG1 MRPNode-4)))

# ::id 6
# ::snt How to remove a tick on a dog?
# ::tok How to remove a tick on a dog ?
# ::alignments 0-1|0.1 2-3|0.0 4-5|0.0.0 7-8|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.102814 ::parser eager_oracle ::smatch 0.625 ::n_actions 22
# ::node	0	have-manner-91	
# ::node	0.0	remove-01	2-3
# ::node	0.0.0	tick	4-5
# ::node	0.0.0.0	dog	7-8
# ::node	0.1	amr-unknown	0-1
# ::root	0	have-manner-91
# ::edge	have-manner-91	ARG1	remove-01	0	0.0
# ::edge	have-manner-91	ARG2	amr-unknown	0	0.1
# ::edge	remove-01	ARG1	tick	0.0	0.0.0
# ::edge	tick	location	dog	0.0.0	0.0.0.0
(MRPNode-0 / have-manner-91 :ARG1 (MRPNode-1 / remove-01 :ARG1 (MRPNode-2 / tick :location (MRPNode-3 / dog))) :ARG2 (MRPNode-4 / amr-unknown))

# ::id 7
# ::snt How can I improve the water pressure in my shower?
# ::tok How can I improve the water pressure in my shower ?
# ::alignments 0-1|0.0.1 1-2|0 2-3|0.0.0.1.0 3-4|0.0 5-6|0.0.0.0 6-7|0.0.0 9-10|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.108952 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	possible-01	1-2
# ::node	0.0	improve-01	3-4
# ::node	0.0.0	pressure	6-7
# ::node	0.0.0.0	water	5-6
# ::node	0.0.0.1	shower	9-10
# ::node	0.0.0.1.0	i	2-3
# ::node	0.0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	improve-01	ARG0	i	0.0	0.0.0.1.0
# ::edge	improve-01	ARG1	pressure	0.0	0.0.0
# ::edge	improve-01	manner	amr-unknown	0.0	0.0.1
# ::edge	possible-01	ARG1	improve-01	0	0.0
# ::edge	pressure	location	shower	0.0.0	0.0.0.1
# ::edge	pressure	mod	water	0.0.0	0.0.0.0
# ::edge	shower	poss	i	0.0.0.1	0.0.0.1.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / improve-01 :ARG1 (MRPNode-2 / pressure :mod (MRPNode-3 / water) :location (MRPNode-4 / shower :poss (MRPNode-5 / i))) :ARG0 MRPNode-5 :manner (MRPNode-6 / amr-unknown)))

# ::id 8
# ::snt Can I get a Master's in Economics with a Bachelor's in Mathematics?
# ::tok Can I get a Master 's in Economics with a Bachelor 's in Mathematics ?
# ::alignments 0-1|0 1-2|0.0.1 2-3|0.0 7-8|0.0.0.0 10-11|0.0.2+0.0.2.0+0.0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.116980 ::parser eager_oracle ::smatch 0.7333333333333334 ::n_actions 31
# ::node	0	possible-01	0-1
# ::node	0.0	get-01	2-3
# ::node	0.0.0	thing	
# ::node	0.0.0.0	economics	7-8
# ::node	0.0.0.1	philosophy	
# ::node	0.0.1	i	1-2
# ::node	0.0.2	award	10-11
# ::node	0.0.2.0	name	10-11
# ::node	0.0.2.0.0	bachelor	10-11
# ::node	0.1	amr-unknown	
# ::root	0	possible-01
# ::edge	award	name	name	0.0.2	0.0.2.0
# ::edge	get-01	ARG0	i	0.0	0.0.1
# ::edge	get-01	ARG1	thing	0.0	0.0.0
# ::edge	get-01	accompanier	award	0.0	0.0.2
# ::edge	name	op1	bachelor	0.0.2.0	0.0.2.0.0
# ::edge	possible-01	ARG1	amr-unknown	0	0.1
# ::edge	possible-01	ARG1	get-01	0	0.0
# ::edge	thing	mod	economics	0.0.0	0.0.0.0
# ::edge	thing	mod	philosophy	0.0.0	0.0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / get-01 :ARG1 (MRPNode-2 / thing :mod (MRPNode-3 / economics) :mod (MRPNode-4 / philosophy)) :ARG0 (MRPNode-5 / i) :accompanier (MRPNode-6 / award :name (MRPNode-7 / name :op1 bachelor))) :ARG1 (MRPNode-8 / amr-unknown))

# ::id 9
# ::snt How do I help my dog adjust after moving?
# ::tok How do I help my dog adjust after moving ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 5-6|0.0.0 6-7|0.0 7-8|0.2 8-9|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.122380 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	help-01	3-4
# ::node	0.0	adjust-01	6-7
# ::node	0.0.0	dog	5-6
# ::node	0.1	i	2-3
# ::node	0.1.0	move-01	8-9
# ::node	0.2	after	7-8
# ::node	0.3	amr-unknown	0-1
# ::root	0	help-01
# ::edge	adjust-01	ARG0	dog	0.0	0.0.0
# ::edge	after	op1	move-01	0.2	0.1.0
# ::edge	help-01	ARG0	i	0	0.1
# ::edge	help-01	ARG1	adjust-01	0	0.0
# ::edge	help-01	ARG2	dog	0	0.0.0
# ::edge	help-01	manner	amr-unknown	0	0.3
# ::edge	help-01	time	after	0	0.2
# ::edge	i	ARG0-of	move-01	0.1	0.1.0
(MRPNode-0 / help-01 :ARG1 (MRPNode-1 / adjust-01 :ARG0 (MRPNode-4 / dog)) :ARG0 (MRPNode-2 / i :ARG0-of (MRPNode-3 / move-01)) :ARG2 MRPNode-4 :time (MRPNode-5 / after :op1 MRPNode-3) :manner (MRPNode-6 / amr-unknown))

# ::id 10
# ::snt How can I boost the water pressure in my shower?
# ::tok How can I boost the water pressure in my shower ?
# ::alignments 0-1|0.0.1 1-2|0 2-3|0.0.0.1.0 3-4|0.0 5-6|0.0.0.0 6-7|0.0.0 9-10|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.128200 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	possible-01	1-2
# ::node	0.0	boost-01	3-4
# ::node	0.0.0	pressure	6-7
# ::node	0.0.0.0	water	5-6
# ::node	0.0.0.1	shower	9-10
# ::node	0.0.0.1.0	i	2-3
# ::node	0.0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	boost-01	ARG0	i	0.0	0.0.0.1.0
# ::edge	boost-01	ARG1	pressure	0.0	0.0.0
# ::edge	boost-01	manner	amr-unknown	0.0	0.0.1
# ::edge	possible-01	ARG1	boost-01	0	0.0
# ::edge	pressure	location	shower	0.0.0	0.0.0.1
# ::edge	pressure	mod	water	0.0.0	0.0.0.0
# ::edge	shower	poss	i	0.0.0.1	0.0.0.1.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / boost-01 :ARG1 (MRPNode-2 / pressure :mod (MRPNode-3 / water) :location (MRPNode-4 / shower :poss (MRPNode-5 / i))) :ARG0 MRPNode-5 :manner (MRPNode-6 / amr-unknown)))

# ::id 11
# ::snt How can I build a wall mounted adjustable height desk?
# ::tok How can I build a wall mounted adjustable height desk ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0.0.0.0 9-10|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.134417 ::parser eager_oracle ::smatch 0.7142857142857143 ::n_actions 31
# ::node	0	possible-01	1-2
# ::node	0.0	build-01	3-4
# ::node	0.0.0	desk	9-10
# ::node	0.0.0.0	high-02	
# ::node	0.0.0.0.0	inhabit-01	
# ::node	0.0.0.0.0.0	wall	5-6
# ::node	0.0.0.0.0.1	possible-01	
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	build-01	ARG0	i	0.0	0.0.1
# ::edge	build-01	ARG1	desk	0.0	0.0.0
# ::edge	build-01	manner	amr-unknown	0.0	0.0.2
# ::edge	desk	ARG1-of	high-02	0.0.0	0.0.0.0
# ::edge	high-02	ARG1-of	inhabit-01	0.0.0.0	0.0.0.0.0
# ::edge	inhabit-01	ARG1-of	possible-01	0.0.0.0.0	0.0.0.0.0.1
# ::edge	inhabit-01	ARG1-of	wall	0.0.0.0.0	0.0.0.0.0.0
# ::edge	possible-01	ARG1	build-01	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / build-01 :ARG1 (MRPNode-2 / desk :ARG1-of (MRPNode-3 / high-02 :ARG1-of (MRPNode-4 / inhabit-01 :ARG1-of (MRPNode-5 / wall) :ARG1-of (MRPNode-6 / possible-01)))) :ARG0 (MRPNode-7 / i) :manner (MRPNode-8 / amr-unknown)))

# ::id 12
# ::snt How can I figure out why my washing machine is tripping the GFCI receptacle?
# ::tok How can I figure out why my washing machine is tripping the GFCI receptacle ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.0+0.0.0.0 3-4|0.0 6-7|0.0.1 7-8|0.0.0.0.0.1.0 8-9|0.0.0.0.0.1 10-11|0.0.0.0.0 13-14|0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.174968 ::parser eager_oracle ::smatch 0.8936170212765957 ::n_actions 51
# ::node	0	possible-01	1-2
# ::node	0.0	figure-out-05	3-4
# ::node	0.0.0	thing	2-3
# ::node	0.0.0.0	cause-01	2-3
# ::node	0.0.0.0.0	trip-03	10-11
# ::node	0.0.0.0.0.0	receptacle	13-14
# ::node	0.0.0.0.0.0.0	product	12-13
# ::node	0.0.0.0.0.0.0.0	name	12-13
# ::node	0.0.0.0.0.0.0.0.0	gfci	12-13
# ::node	0.0.0.0.0.1	machine	8-9
# ::node	0.0.0.0.0.1.0	wash-01	7-8
# ::node	0.0.1	i	6-7
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	cause-01	ARG1	trip-03	0.0.0.0	0.0.0.0.0
# ::edge	figure-out-05	ARG0	i	0.0	0.0.1
# ::edge	figure-out-05	ARG1	thing	0.0	0.0.0
# ::edge	figure-out-05	manner	amr-unknown	0.0	0.0.2
# ::edge	i	poss-of	machine	0.0.1	0.0.0.0.0.1
# ::edge	machine	ARG0-of	wash-01	0.0.0.0.0.1	0.0.0.0.0.1.0
# ::edge	name	op1	gfci	0.0.0.0.0.0.0.0	0.0.0.0.0.0.0.0.0
# ::edge	possible-01	ARG1	figure-out-05	0	0.0
# ::edge	product	name	name	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0
# ::edge	receptacle	mod	product	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	thing	ARG0-of	cause-01	0.0.0	0.0.0.0
# ::edge	trip-03	ARG0	machine	0.0.0.0.0	0.0.0.0.0.1
# ::edge	trip-03	ARG1	receptacle	0.0.0.0.0	0.0.0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / figure-out-05 :ARG1 (MRPNode-2 / thing :ARG0-of (MRPNode-3 / cause-01 :ARG1 (MRPNode-4 / trip-03 :ARG1 (MRPNode-5 / receptacle :mod (MRPNode-6 / product :name (MRPNode-7 / name :op1 gfci))) :ARG0 (MRPNode-9 / machine :ARG0-of (MRPNode-10 / wash-01))))) :ARG0 (MRPNode-8 / i :poss-of MRPNode-9) :manner (MRPNode-11 / amr-unknown)))

# ::id 13
# ::snt Is there a bus from Tbilisi, Georgia to Thessaloniki, Greece?
# ::tok Is there a bus from Tbilisi , Georgia to Thessaloniki , Greece ?
# ::alignments 3-4|0 5-6|0.1+0.1.0+0.1.0.0 7-8|0.1.1+0.1.1.0+0.1.1.0.0 9-10|0.2+0.2.0+0.2.0.0 11-12|0.2.1+0.2.1.0+0.2.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.184407 ::parser eager_oracle ::smatch 0.9565217391304348 ::n_actions 30
# ::node	0	bus	3-4
# ::node	0.0	amr-unknown	
# ::node	0.1	city	5-6
# ::node	0.1.0	name	5-6
# ::node	0.1.0.0	tbilisi	5-6
# ::node	0.1.1	country	7-8
# ::node	0.1.1.0	name	7-8
# ::node	0.1.1.0.0	georgia	7-8
# ::node	0.2	city	9-10
# ::node	0.2.0	name	9-10
# ::node	0.2.0.0	thessaloniki	9-10
# ::node	0.2.1	country	11-12
# ::node	0.2.1.0	name	11-12
# ::node	0.2.1.0.0	greece	11-12
# ::root	0	bus
# ::edge	bus	destination	city	0	0.2
# ::edge	bus	source	amr-unknown	0	0.0
# ::edge	bus	source	city	0	0.1
# ::edge	city	location	country	0.1	0.1.1
# ::edge	city	location	country	0.2	0.2.1
# ::edge	city	name	name	0.1	0.1.0
# ::edge	city	name	name	0.2	0.2.0
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	country	name	name	0.2.1	0.2.1.0
# ::edge	name	op1	georgia	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	greece	0.2.1.0	0.2.1.0.0
# ::edge	name	op1	tbilisi	0.1.0	0.1.0.0
# ::edge	name	op1	thessaloniki	0.2.0	0.2.0.0
(MRPNode-0 / bus :source (MRPNode-1 / amr-unknown) :source (MRPNode-2 / city :name (MRPNode-3 / name :op1 tbilisi) :location (MRPNode-4 / country :name (MRPNode-5 / name :op1 georgia))) :destination (MRPNode-6 / city :name (MRPNode-7 / name :op1 thessaloniki) :location (MRPNode-8 / country :name (MRPNode-9 / name :op1 greece))))

# ::id 14
# ::snt How do I track 401k rollovers in Quicken?
# ::tok How do I track 401k rollovers in Quicken ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0 7-8|0.0.0+0.0.0.0+0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.188819 ::parser eager_oracle ::smatch 0.8387096774193548 ::n_actions 26
# ::node	0	track-01	3-4
# ::node	0.0	rollover	5-6
# ::node	0.0.0	city	7-8
# ::node	0.0.0.0	name	7-8
# ::node	0.0.0.0.0	quicken	7-8
# ::node	0.0.1	monetary-quantity	
# ::node	0.0.1.0	1500	
# ::node	0.0.1.1	pound	
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	track-01
# ::edge	city	name	name	0.0.0	0.0.0.0
# ::edge	monetary-quantity	quant	1500	0.0.1	0.0.1.0
# ::edge	monetary-quantity	unit	pound	0.0.1	0.0.1.1
# ::edge	name	op1	quicken	0.0.0.0	0.0.0.0.0
# ::edge	rollover	location	city	0.0	0.0.0
# ::edge	rollover	mod	monetary-quantity	0.0	0.0.1
# ::edge	track-01	ARG0	i	0	0.1
# ::edge	track-01	ARG1	rollover	0	0.0
# ::edge	track-01	ARG3	amr-unknown	0	0.2
(MRPNode-0 / track-01 :ARG1 (MRPNode-1 / rollover :location (MRPNode-2 / city :name (MRPNode-3 / name :op1 quicken)) :mod (MRPNode-4 / monetary-quantity :quant 1500 :unit (MRPNode-5 / pound))) :ARG0 (MRPNode-6 / i) :ARG3 (MRPNode-7 / amr-unknown))

# ::id 15
# ::snt Do I need a UK airside transit visa, if I already have a UK visitor visa?
# ::tok Do I need a UK airside transit visa , if I already have a UK visitor visa ?
# ::alignments 2-3|0.0 6-7|0.0.0.1 7-8|0.0.0 8-9|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 10-11|0.0.1 11-12|0.1+0.1.1 12-13|0 15-16|0.1.0.0+0.1.0.0.0 16-17|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.301797 ::parser eager_oracle ::smatch 0.8771929824561403 ::n_actions 60
# ::node	0	have-condition-91	12-13
# ::node	0.0	need-01	2-3
# ::node	0.0.0	visa	7-8
# ::node	0.0.0.0	country	8-9
# ::node	0.0.0.0.0	name	8-9
# ::node	0.0.0.0.0.0	uk	8-9
# ::node	0.0.0.1	transit	6-7
# ::node	0.0.1	i	10-11
# ::node	0.1	have-03	11-12
# ::node	0.1.0	visa	16-17
# ::node	0.1.0.0	person	15-16
# ::node	0.1.0.0.0	visit-01	15-16
# ::node	0.1.1	already	11-12
# ::node	0.2	amr-unknown	
# ::root	0	have-condition-91
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	have-03	ARG0	i	0.1	0.0.1
# ::edge	have-03	ARG1	visa	0.1	0.1.0
# ::edge	have-03	time	already	0.1	0.1.1
# ::edge	have-condition-91	ARG1	need-01	0	0.0
# ::edge	have-condition-91	ARG2	amr-unknown	0	0.2
# ::edge	have-condition-91	ARG2	have-03	0	0.1
# ::edge	name	op1	uk	0.0.0.0.0	0.0.0.0.0.0
# ::edge	need-01	ARG0	i	0.0	0.0.1
# ::edge	need-01	ARG1	visa	0.0	0.0.0
# ::edge	person	ARG0-of	visit-01	0.1.0.0	0.1.0.0.0
# ::edge	visa	mod	country	0.0.0	0.0.0.0
# ::edge	visa	mod	country	0.1.0	0.0.0.0
# ::edge	visa	mod	person	0.1.0	0.1.0.0
# ::edge	visa	mod	transit	0.0.0	0.0.0.1
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / need-01 :ARG1 (MRPNode-2 / visa :mod (MRPNode-3 / country :name (MRPNode-4 / name :op1 uk)) :mod (MRPNode-5 / transit)) :ARG0 (MRPNode-6 / i)) :ARG2 (MRPNode-7 / have-03 :ARG0 MRPNode-6 :ARG1 (MRPNode-8 / visa :mod MRPNode-3 :mod (MRPNode-9 / person :ARG0-of (MRPNode-10 / visit-01))) :time (MRPNode-11 / already)) :ARG2 (MRPNode-12 / amr-unknown))

# ::id 16
# ::snt Layover at Narita, Japan. Do I need a transit visa?
# ::tok Layover at Narita , Japan . Do I need a transit visa ?
# ::alignments 0-1|0.0 2-3|0.0.0+0.0.0.0+0.0.0.0.0 4-5|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 7-8|0.1.1 8-9|0.1 10-11|0.1.0.0 11-12|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.309959 ::parser eager_oracle ::smatch 0.8181818181818182 ::n_actions 35
# ::node	0	multi-sentence	
# ::node	0.0	Layover	0-1
# ::node	0.0.0	city	2-3
# ::node	0.0.0.0	name	2-3
# ::node	0.0.0.0.0	narita	2-3
# ::node	0.0.0.1	country	4-5
# ::node	0.0.0.1.0	name	4-5
# ::node	0.0.0.1.0.0	japan	4-5
# ::node	0.1	need-01	8-9
# ::node	0.1.0	visa	11-12
# ::node	0.1.0.0	transit	10-11
# ::node	0.1.1	i	7-8
# ::node	0.1.2	amr-unknown	
# ::root	0	multi-sentence
# ::edge	Layover	location	city	0.0	0.0.0
# ::edge	city	location	country	0.0.0	0.0.0.1
# ::edge	city	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	multi-sentence	snt1	Layover	0	0.0
# ::edge	multi-sentence	snt2	need-01	0	0.1
# ::edge	name	op1	japan	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op1	narita	0.0.0.0	0.0.0.0.0
# ::edge	need-01	ARG0	amr-unknown	0.1	0.1.2
# ::edge	need-01	ARG0	i	0.1	0.1.1
# ::edge	need-01	ARG1	visa	0.1	0.1.0
# ::edge	visa	mod	transit	0.1.0	0.1.0.0
(MRPNode-0 / multi-sentence :snt1 (MRPNode-1 / Layover :location (MRPNode-2 / city :name (MRPNode-3 / name :op1 narita) :location (MRPNode-4 / country :name (MRPNode-5 / name :op1 japan)))) :snt2 (MRPNode-6 / need-01 :ARG1 (MRPNode-7 / visa :mod (MRPNode-8 / transit)) :ARG0 (MRPNode-9 / i) :ARG0 (MRPNode-10 / amr-unknown)))

# ::id 17
# ::snt Is it advisable to apply to more than one PhD program?
# ::tok Is it advisable to apply to more than one PhD program ?
# ::alignments 2-3|0 4-5|0.0 6-7|0.0.0.1 8-9|0.0.0.1.0 9-10|0.0.0.0 10-11|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.314847 ::parser eager_oracle ::smatch 0.9166666666666666 ::n_actions 32
# ::node	0	advise-01	2-3
# ::node	0.0	apply-01	4-5
# ::node	0.0.0	program	10-11
# ::node	0.0.0.0	PhD	9-10
# ::node	0.0.0.1	more-than	6-7
# ::node	0.0.0.1.0	1	8-9
# ::node	0.1	amr-unknown	
# ::root	0	advise-01
# ::edge	advise-01	ARG0	amr-unknown	0	0.1
# ::edge	advise-01	ARG2	apply-01	0	0.0
# ::edge	apply-01	ARG1	program	0.0	0.0.0
# ::edge	more-than	op1	1	0.0.0.1	0.0.0.1.0
# ::edge	program	mod	PhD	0.0.0	0.0.0.0
# ::edge	program	quant	more-than	0.0.0	0.0.0.1
(MRPNode-0 / advise-01 :ARG2 (MRPNode-1 / apply-01 :ARG1 (MRPNode-2 / program :mod (MRPNode-3 / PhD) :quant (MRPNode-4 / more-than :op1 1))) :ARG0 (MRPNode-5 / amr-unknown))

# ::id 18
# ::snt How can I remove small paint specks from a wooden floor?
# ::tok How can I remove small paint specks from a wooden floor ?
# ::alignments 0-1|0.0.3 1-2|0 2-3|0.0.1 3-4|0.0 4-5|0.0.0.0 5-6|0.0.0.1 6-7|0.0.0 9-10|0.0.2.0 10-11|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:24.321709 ::parser eager_oracle ::smatch 1.0 ::n_actions 42
# ::node	0	possible-01	1-2
# ::node	0.0	remove-01	3-4
# ::node	0.0.0	speck	6-7
# ::node	0.0.0.0	small	4-5
# ::node	0.0.0.1	paint	5-6
# ::node	0.0.1	i	2-3
# ::node	0.0.2	floor	10-11
# ::node	0.0.2.0	wooden	9-10
# ::node	0.0.3	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	floor	mod	wooden	0.0.2	0.0.2.0
# ::edge	possible-01	ARG1	remove-01	0	0.0
# ::edge	remove-01	ARG0	i	0.0	0.0.1
# ::edge	remove-01	ARG1	speck	0.0	0.0.0
# ::edge	remove-01	ARG2	floor	0.0	0.0.2
# ::edge	remove-01	manner	amr-unknown	0.0	0.0.3
# ::edge	speck	consist-of	paint	0.0.0	0.0.0.1
# ::edge	speck	mod	small	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / remove-01 :ARG1 (MRPNode-2 / speck :mod (MRPNode-3 / small) :consist-of (MRPNode-4 / paint)) :ARG0 (MRPNode-5 / i) :ARG2 (MRPNode-6 / floor :mod (MRPNode-7 / wooden)) :manner (MRPNode-8 / amr-unknown)))

# ::id 19
# ::snt Does my story beginning hook the reader? (dialogue + narration)?
# ::tok Does my story beginning hook the reader ? ( dialogue + narration ) ?
# ::alignments 1-2|0.0.1.0 2-3|0.0.1 3-4|0.1 4-5|0.0 6-7|0.0.0+0.0.0.0 9-10|0.1.0.0 11-12|0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.328434 ::parser eager_oracle ::smatch 0.5625000000000001 ::n_actions 38
# ::node	0	multi-sentence	
# ::node	0.0	hook-01	4-5
# ::node	0.0.0	person	6-7
# ::node	0.0.0.0	read-01	6-7
# ::node	0.0.1	story	2-3
# ::node	0.0.1.0	i	1-2
# ::node	0.0.2	amr-unknown	
# ::node	0.1	begin-01	3-4
# ::node	0.1.0	and	
# ::node	0.1.0.0	dialogue-01	9-10
# ::node	0.1.0.1	narrate-01	11-12
# ::root	0	multi-sentence
# ::edge	and	op1	dialogue-01	0.1.0	0.1.0.0
# ::edge	and	op2	narrate-01	0.1.0	0.1.0.1
# ::edge	begin-01	ARG1	and	0.1	0.1.0
# ::edge	hook-01	ARG0	story	0.0	0.0.1
# ::edge	hook-01	ARG1	person	0.0	0.0.0
# ::edge	hook-01	ARG2	amr-unknown	0.0	0.0.2
# ::edge	multi-sentence	snt1	hook-01	0	0.0
# ::edge	multi-sentence	snt2	begin-01	0	0.1
# ::edge	person	ARG0-of	read-01	0.0.0	0.0.0.0
# ::edge	story	poss	i	0.0.1	0.0.1.0
(MRPNode-0 / multi-sentence :snt1 (MRPNode-1 / hook-01 :ARG1 (MRPNode-2 / person :ARG0-of (MRPNode-3 / read-01)) :ARG0 (MRPNode-4 / story :poss (MRPNode-5 / i)) :ARG2 (MRPNode-6 / amr-unknown)) :snt2 (MRPNode-7 / begin-01 :ARG1 (MRPNode-8 / and :op1 (MRPNode-9 / dialogue-01) :op2 (MRPNode-10 / narrate-01))))

# ::id 20
# ::snt How can I remove this screw?
# ::tok How can I remove this screw ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.1 3-4|0.0 4-5|0.0.0.0 5-6|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.331458 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	possible-01	1-2
# ::node	0.0	remove-01	3-4
# ::node	0.0.0	screw	5-6
# ::node	0.0.0.0	this	4-5
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	possible-01	ARG1	remove-01	0	0.0
# ::edge	remove-01	ARG0	i	0.0	0.0.1
# ::edge	remove-01	ARG1	screw	0.0	0.0.0
# ::edge	remove-01	manner	amr-unknown	0.0	0.0.2
# ::edge	screw	mod	this	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / remove-01 :ARG1 (MRPNode-2 / screw :mod (MRPNode-3 / this)) :ARG0 (MRPNode-4 / i) :manner (MRPNode-5 / amr-unknown)))

# ::id 21
# ::snt What could be causing GFCI breakers and receptacles to trip?
# ::tok What could be causing GFCI breakers and receptacles to trip ?
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 4-5|0.0.1.0.0.0+0.0.1.0.0.0.0+0.0.1.0.0.0.0.0 5-6|0.0.1.0.0 6-7|0.0.1.0 7-8|0.0.1.0.1 9-10|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.338720 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	possible-01	1-2
# ::node	0.0	cause-01	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	trip-03	9-10
# ::node	0.0.1.0	and	6-7
# ::node	0.0.1.0.0	break-01	5-6
# ::node	0.0.1.0.0.0	product	4-5
# ::node	0.0.1.0.0.0.0	name	4-5
# ::node	0.0.1.0.0.0.0.0	gfci	4-5
# ::node	0.0.1.0.1	receptacle	7-8
# ::root	0	possible-01
# ::edge	and	op1	break-01	0.0.1.0	0.0.1.0.0
# ::edge	and	op2	receptacle	0.0.1.0	0.0.1.0.1
# ::edge	break-01	ARG1	product	0.0.1.0.0	0.0.1.0.0.0
# ::edge	cause-01	ARG1	amr-unknown	0.0	0.0.0
# ::edge	cause-01	ARG1	trip-03	0.0	0.0.1
# ::edge	name	op1	gfci	0.0.1.0.0.0.0	0.0.1.0.0.0.0.0
# ::edge	possible-01	ARG1	cause-01	0	0.0
# ::edge	product	name	name	0.0.1.0.0.0	0.0.1.0.0.0.0
# ::edge	trip-03	ARG0	and	0.0.1	0.0.1.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / cause-01 :ARG1 (MRPNode-2 / amr-unknown) :ARG1 (MRPNode-3 / trip-03 :ARG0 (MRPNode-4 / and :op1 (MRPNode-5 / break-01 :ARG1 (MRPNode-6 / product :name (MRPNode-7 / name :op1 gfci))) :op2 (MRPNode-8 / receptacle)))))

# ::id 22
# ::snt How can I get my colleague to stop calling me over to his desk when he wants my help?
# ::tok How can I get my colleague to stop calling me over to his desk when he wants my help ?
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.0.1.0 3-4|0.0 5-6|0.0.0.1.0.1+0.0.0.1.0.1.0 7-8|0.0.0 8-9|0.0.0.0 10-11|0.0.0.0.0 13-14|0.0.0.0.1+0.0.0.0.1.0 16-17|0.0.0.1 18-19|0.0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.459259 ::parser eager_oracle ::smatch 1.0 ::n_actions 76
# ::node	0	possible-01	1-2
# ::node	0.0	get-04	3-4
# ::node	0.0.0	stop-01	7-8
# ::node	0.0.0.0	call-02	8-9
# ::node	0.0.0.0.0	over	10-11
# ::node	0.0.0.0.1	person	13-14
# ::node	0.0.0.0.1.0	desk	13-14
# ::node	0.0.0.1	want-01	16-17
# ::node	0.0.0.1.0	i	2-3
# ::node	0.0.0.1.0.0	help-01	18-19
# ::node	0.0.0.1.0.1	have-rel-role-91	5-6
# ::node	0.0.0.1.0.1.0	colleague	5-6
# ::node	0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	call-02	ARG0	person	0.0.0.0	0.0.0.0.1
# ::edge	call-02	ARG2	desk	0.0.0.0	0.0.0.0.1.0
# ::edge	call-02	mod	over	0.0.0.0	0.0.0.0.0
# ::edge	get-04	ARG0	i	0.0	0.0.0.1.0
# ::edge	get-04	ARG1	stop-01	0.0	0.0.0
# ::edge	get-04	time	person	0.0	0.0.0.0.1
# ::edge	have-rel-role-91	ARG0	person	0.0.0.1.0.1	0.0.0.0.1
# ::edge	have-rel-role-91	ARG2	colleague	0.0.0.1.0.1	0.0.0.1.0.1.0
# ::edge	help-01	ARG0	person	0.0.0.1.0.0	0.0.0.0.1
# ::edge	i	ARG1-of	have-rel-role-91	0.0.0.1.0	0.0.0.1.0.1
# ::edge	i	ARG1-of	help-01	0.0.0.1.0	0.0.0.1.0.0
# ::edge	person	poss-of	desk	0.0.0.0.1	0.0.0.0.1.0
# ::edge	possible-01	ARG1	get-04	0	0.0
# ::edge	possible-01	manner	amr-unknown	0	0.1
# ::edge	stop-01	ARG1	call-02	0.0.0	0.0.0.0
# ::edge	stop-01	time	want-01	0.0.0	0.0.0.1
# ::edge	want-01	ARG0	i	0.0.0.1	0.0.0.1.0
# ::edge	want-01	ARG0	person	0.0.0.1	0.0.0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / get-04 :ARG1 (MRPNode-2 / stop-01 :ARG1 (MRPNode-3 / call-02 :mod (MRPNode-4 / over) :ARG0 (MRPNode-10 / person :poss-of (MRPNode-11 / desk)) :ARG2 MRPNode-11) :time (MRPNode-5 / want-01 :ARG0 (MRPNode-6 / i :ARG1-of (MRPNode-7 / help-01 :ARG0 MRPNode-10) :ARG1-of (MRPNode-8 / have-rel-role-91 :ARG2 (MRPNode-9 / colleague) :ARG0 MRPNode-10)) :ARG0 MRPNode-10)) :ARG0 MRPNode-6 :time MRPNode-10) :manner (MRPNode-12 / amr-unknown))

# ::id 23
# ::snt How can I thoroughly blackout a bedroom window on a budget?
# ::tok How can I thoroughly blackout a bedroom window on a budget ?
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1 3-4|0.0.3 6-7|0.0.0.0 7-8|0.0.0 8-9|0.0.2 10-11|0.0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.464831 ::parser eager_oracle ::smatch 0.6666666666666667 ::n_actions 34
# ::node	0	possible-01	1-2
# ::node	0.0	block-01	
# ::node	0.0.0	window	7-8
# ::node	0.0.0.0	bedroom	6-7
# ::node	0.0.1	i	2-3
# ::node	0.0.2	cause-01	8-9
# ::node	0.0.2.0	budget-01	10-11
# ::node	0.0.3	thorough	3-4
# ::node	0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	block-01	ARG0	i	0.0	0.0.1
# ::edge	block-01	ARG1	window	0.0	0.0.0
# ::edge	block-01	ARG1-of	cause-01	0.0	0.0.2
# ::edge	block-01	manner	thorough	0.0	0.0.3
# ::edge	cause-01	ARG0	budget-01	0.0.2	0.0.2.0
# ::edge	possible-01	ARG1	block-01	0	0.0
# ::edge	possible-01	manner	amr-unknown	0	0.1
# ::edge	window	mod	bedroom	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / block-01 :ARG1 (MRPNode-2 / window :mod (MRPNode-3 / bedroom)) :ARG0 (MRPNode-4 / i) :ARG1-of (MRPNode-5 / cause-01 :ARG0 (MRPNode-6 / budget-01)) :manner (MRPNode-7 / thorough)) :manner (MRPNode-8 / amr-unknown))

# ::id 24
# ::snt What is good workout attire for weight lifting?
# ::tok What is good workout attire for weight lifting ?
# ::alignments 0-1|0.1 2-3|0.0 4-5|0 6-7|0.2.0 7-8|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:24.467790 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	attire	4-5
# ::node	0.0	good-02	2-3
# ::node	0.1	amr-unknown	0-1
# ::node	0.2	lift-01	7-8
# ::node	0.2.0	weight	6-7
# ::root	0	attire
# ::edge	attire	ARG1-of	good-02	0	0.0
# ::edge	attire	purpose	amr-unknown	0	0.1
# ::edge	attire	purpose	lift-01	0	0.2
# ::edge	lift-01	ARG1	weight	0.2	0.2.0
(MRPNode-0 / attire :ARG1-of (MRPNode-1 / good-02) :purpose (MRPNode-2 / amr-unknown) :purpose (MRPNode-3 / lift-01 :ARG1 (MRPNode-4 / weight)))

# ::id 25
# ::snt "What are the differences between a ""traditional"" IRA and a Roth IRA?"
# ::tok " What are the differences between a " " traditional " " IRA and a Roth IRA ? "
# ::alignments 1-2|0.0 4-5|0 9-10|0.1.0 12-13|0.1+0.1.1+0.1.1.0 15-17|0.2+0.2.0+0.2.0.0+0.2.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.474579 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	differ-02	4-5
# ::node	0.0	amr-unknown	1-2
# ::node	0.1	military	12-13
# ::node	0.1.0	tradition	9-10
# ::node	0.1.1	name	12-13
# ::node	0.1.1.0	ira	12-13
# ::node	0.2	military	15-17
# ::node	0.2.0	name	15-17
# ::node	0.2.0.0	roth	15-17
# ::node	0.2.0.1	ira	15-17
# ::root	0	differ-02
# ::edge	differ-02	ARG1	amr-unknown	0	0.0
# ::edge	differ-02	ARG1	military	0	0.1
# ::edge	differ-02	ARG2	military	0	0.2
# ::edge	military	mod	tradition	0.1	0.1.0
# ::edge	military	name	name	0.1	0.1.1
# ::edge	military	name	name	0.2	0.2.0
# ::edge	name	op1	ira	0.1.1	0.1.1.0
# ::edge	name	op1	roth	0.2.0	0.2.0.0
# ::edge	name	op2	ira	0.2.0	0.2.0.1
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / amr-unknown) :ARG1 (MRPNode-2 / military :mod (MRPNode-3 / tradition) :name (MRPNode-4 / name :op1 ira)) :ARG2 (MRPNode-5 / military :name (MRPNode-6 / name :op1 roth :op2 ira)))

# ::id 26
# ::snt How to deal with the toddler when me and my partner are not on the same page?
# ::tok How to deal with the toddler when me and my partner are not on the same page ?
# ::alignments 0-1|0 2-3|0.0 5-6|0.0.0 8-9|0.0.2.1 9-10|0.0.1 10-11|0.0.1.0+0.0.1.0.1 12-13|0.0.2.0 13-14|0.0.2 15-16|0.0.2.2.0 16-17|0.0.2.2 ::annotator aligner3.py ::date 2021-03-12 14:31:24.490745 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 55
# ::node	0	amr-unknown	0-1
# ::node	0.0	deal-01	2-3
# ::node	0.0.0	toddler	5-6
# ::node	0.0.1	i	9-10
# ::node	0.0.1.0	have-rel-role-91	10-11
# ::node	0.0.1.0.0	person	
# ::node	0.0.1.0.1	partner	10-11
# ::node	0.0.2	be-located-at-91	13-14
# ::node	0.0.2.0	-	12-13
# ::node	0.0.2.1	and	8-9
# ::node	0.0.2.2	page	16-17
# ::node	0.0.2.2.0	same-01	15-16
# ::root	0	amr-unknown
# ::edge	amr-unknown	manner-of	deal-01	0	0.0
# ::edge	and	op2	person	0.0.2.1	0.0.1.0.0
# ::edge	be-located-at-91	ARG1	and	0.0.2	0.0.2.1
# ::edge	be-located-at-91	ARG2	page	0.0.2	0.0.2.2
# ::edge	be-located-at-91	polarity	-	0.0.2	0.0.2.0
# ::edge	deal-01	ARG0	i	0.0	0.0.1
# ::edge	deal-01	ARG1	toddler	0.0	0.0.0
# ::edge	deal-01	time	be-located-at-91	0.0	0.0.2
# ::edge	have-rel-role-91	ARG0	person	0.0.1.0	0.0.1.0.0
# ::edge	have-rel-role-91	ARG2	partner	0.0.1.0	0.0.1.0.1
# ::edge	i	ARG1-of	have-rel-role-91	0.0.1	0.0.1.0
# ::edge	page	ARG1-of	same-01	0.0.2.2	0.0.2.2.0
(MRPNode-0 / amr-unknown :manner-of (MRPNode-1 / deal-01 :ARG1 (MRPNode-2 / toddler) :ARG0 (MRPNode-3 / i :ARG1-of (MRPNode-4 / have-rel-role-91 :ARG0 (MRPNode-5 / person) :ARG2 (MRPNode-6 / partner))) :time (MRPNode-7 / be-located-at-91 :polarity - :ARG1 (MRPNode-8 / and :op2 MRPNode-5) :ARG2 (MRPNode-9 / page :ARG1-of (MRPNode-10 / same-01)))))

# ::id 27
# ::snt How can I fix low water pressure in one shower?
# ::tok How can I fix low water pressure in one shower ?
# ::alignments 0-1|0.0.3 1-2|0 2-3|0.0.1 3-4|0.0 4-5|0.0.0.0 5-6|0.0.0.1 6-7|0.0.0 8-9|0.0.2.0 9-10|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:24.497033 ::parser eager_oracle ::smatch 1.0 ::n_actions 41
# ::node	0	possible-01	1-2
# ::node	0.0	fix-02	3-4
# ::node	0.0.0	pressure	6-7
# ::node	0.0.0.0	low-04	4-5
# ::node	0.0.0.1	water	5-6
# ::node	0.0.1	i	2-3
# ::node	0.0.2	shower	9-10
# ::node	0.0.2.0	1	8-9
# ::node	0.0.3	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	fix-02	ARG0	i	0.0	0.0.1
# ::edge	fix-02	ARG1	pressure	0.0	0.0.0
# ::edge	fix-02	location	shower	0.0	0.0.2
# ::edge	fix-02	manner	amr-unknown	0.0	0.0.3
# ::edge	possible-01	ARG1	fix-02	0	0.0
# ::edge	pressure	ARG1-of	low-04	0.0.0	0.0.0.0
# ::edge	pressure	mod	water	0.0.0	0.0.0.1
# ::edge	shower	quant	1	0.0.2	0.0.2.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / fix-02 :ARG1 (MRPNode-2 / pressure :ARG1-of (MRPNode-3 / low-04) :mod (MRPNode-4 / water)) :ARG0 (MRPNode-5 / i) :location (MRPNode-6 / shower :quant 1) :manner (MRPNode-7 / amr-unknown)))

# ::id 28
# ::snt Can I go to visit Schengen countries with visa type D-mult?
# ::tok Can I go to visit Schengen countries with visa type D - mult ?
# ::alignments 0-1|0 1-2|0.0.0 2-3|0.0 4-5|0.0.1 5-6|0.0.1.1.0+0.0.1.1.0.0+0.0.1.1.0.0.0 6-7|0.0.1.1 8-9|0.0.1.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.506684 ::parser eager_oracle ::smatch 0.8571428571428571 ::n_actions 39
# ::node	0	possible-01	0-1
# ::node	0.0	go-02	2-3
# ::node	0.0.0	i	1-2
# ::node	0.0.1	visit-01	4-5
# ::node	0.0.1.0	country	
# ::node	0.0.1.0.0	resemble-01	
# ::node	0.0.1.1	country	6-7
# ::node	0.0.1.1.0	organization	5-6
# ::node	0.0.1.1.0.0	name	5-6
# ::node	0.0.1.1.0.0.0	schengen	5-6
# ::node	0.0.1.1.1	visa	8-9
# ::node	0.1	amr-unknown	
# ::root	0	possible-01
# ::edge	country	mod	organization	0.0.1.1	0.0.1.1.0
# ::edge	country	mod	resemble-01	0.0.1.0	0.0.1.0.0
# ::edge	country	mod	visa	0.0.1.1	0.0.1.1.1
# ::edge	go-02	ARG0	i	0.0	0.0.0
# ::edge	go-02	ARG4	visit-01	0.0	0.0.1
# ::edge	name	op1	schengen	0.0.1.1.0.0	0.0.1.1.0.0.0
# ::edge	organization	name	name	0.0.1.1.0	0.0.1.1.0.0
# ::edge	possible-01	ARG1	amr-unknown	0	0.1
# ::edge	possible-01	ARG1	go-02	0	0.0
# ::edge	visit-01	ARG0	i	0.0.1	0.0.0
# ::edge	visit-01	ARG1	country	0.0.1	0.0.1.0
# ::edge	visit-01	ARG1	country	0.0.1	0.0.1.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / go-02 :ARG0 (MRPNode-2 / i) :ARG4 (MRPNode-3 / visit-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-4 / country :mod (MRPNode-5 / resemble-01)) :ARG1 (MRPNode-6 / country :mod (MRPNode-7 / organization :name (MRPNode-8 / name :op1 schengen)) :mod (MRPNode-9 / visa)))) :ARG1 (MRPNode-10 / amr-unknown))

# ::id 29
# ::snt What can I do about a Rough opening that is REALLY out of square?
# ::tok What can I do about a Rough opening that is REALLY out of square ?
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.0.1 3-4|0.0 6-7|0.0.2.0.0 7-8|0.0.2.0 10-11|0.0.2+0.0.2.1.1 11-12|0.0.2.1 13-14|0.0.2.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.528406 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	possible-01	1-2
# ::node	0.0	do-02	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	i	2-3
# ::node	0.0.2	thing	10-11
# ::node	0.0.2.0	open-01	7-8
# ::node	0.0.2.0.0	rough-04	6-7
# ::node	0.0.2.1	out-06	11-12
# ::node	0.0.2.1.0	square	13-14
# ::node	0.0.2.1.1	really	10-11
# ::root	0	possible-01
# ::edge	do-02	ARG0	i	0.0	0.0.1
# ::edge	do-02	ARG1	amr-unknown	0.0	0.0.0
# ::edge	do-02	ARG2	thing	0.0	0.0.2
# ::edge	open-01	ARG1-of	rough-04	0.0.2.0	0.0.2.0.0
# ::edge	out-06	ARG2	square	0.0.2.1	0.0.2.1.0
# ::edge	out-06	degree	really	0.0.2.1	0.0.2.1.1
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	thing	ARG1-of	open-01	0.0.2	0.0.2.0
# ::edge	thing	ARG1-of	out-06	0.0.2	0.0.2.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / amr-unknown) :ARG0 (MRPNode-3 / i) :ARG2 (MRPNode-4 / thing :ARG1-of (MRPNode-5 / open-01 :ARG1-of (MRPNode-6 / rough-04)) :ARG1-of (MRPNode-7 / out-06 :ARG2 (MRPNode-8 / square) :degree (MRPNode-9 / really)))))

# ::id 30
# ::snt How do I remove adhesive from outdoor concrete deck that is textured?
# ::tok How do I remove adhesive from outdoor concrete deck that is textured ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0 6-7|0.2.0 7-8|0.2.1.0 8-9|0.2 11-12|0.2.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.533302 ::parser eager_oracle ::smatch 1.0 ::n_actions 40
# ::node	0	remove-01	3-4
# ::node	0.0	adhesive	4-5
# ::node	0.1	i	2-3
# ::node	0.2	deck	8-9
# ::node	0.2.0	outdoor	6-7
# ::node	0.2.1	texture	11-12
# ::node	0.2.1.0	concrete	7-8
# ::node	0.3	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	deck	ARG1-of	texture	0.2	0.2.1
# ::edge	deck	mod	outdoor	0.2	0.2.0
# ::edge	remove-01	ARG0	i	0	0.1
# ::edge	remove-01	ARG1	adhesive	0	0.0
# ::edge	remove-01	ARG2	deck	0	0.2
# ::edge	remove-01	manner	amr-unknown	0	0.3
# ::edge	texture	consist-of	concrete	0.2.1	0.2.1.0
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / adhesive) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / deck :mod (MRPNode-4 / outdoor) :ARG1-of (MRPNode-5 / texture :consist-of (MRPNode-6 / concrete))) :manner (MRPNode-7 / amr-unknown))

# ::id 31
# ::snt If I have Schengen visa, can I enter Schengen area from different country?
# ::tok If I have Schengen visa , can I enter Schengen area from different country ?
# ::alignments 1-2|0.0.0 2-3|0.2 3-4|0.0.1.1+0.0.1.1.0+0.0.1.1.0.0 4-5|0.2.0 6-7|0 8-9|0.0 10-11|0.0.1 12-13|0.0.1.0.0 13-14|0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.547643 ::parser eager_oracle ::smatch 0.9565217391304348 ::n_actions 50
# ::node	0	possible-01	6-7
# ::node	0.0	enter-01	8-9
# ::node	0.0.0	i	1-2
# ::node	0.0.1	area	10-11
# ::node	0.0.1.0	country	13-14
# ::node	0.0.1.0.0	differ-02	12-13
# ::node	0.0.1.1	city	3-4
# ::node	0.0.1.1.0	name	3-4
# ::node	0.0.1.1.0.0	schengen	3-4
# ::node	0.1	amr-unknown	
# ::node	0.2	have-03	2-3
# ::node	0.2.0	visa	4-5
# ::root	0	possible-01
# ::edge	area	mod	city	0.0.1	0.0.1.1
# ::edge	area	mod	country	0.0.1	0.0.1.0
# ::edge	city	name	name	0.0.1.1	0.0.1.1.0
# ::edge	country	ARG1-of	differ-02	0.0.1.0	0.0.1.0.0
# ::edge	enter-01	ARG1	area	0.0	0.0.1
# ::edge	enter-01	ARG1	i	0.0	0.0.0
# ::edge	have-03	ARG1	visa	0.2	0.2.0
# ::edge	name	op1	schengen	0.0.1.1.0	0.0.1.1.0.0
# ::edge	possible-01	ARG1	enter-01	0	0.0
# ::edge	possible-01	condition	amr-unknown	0	0.1
# ::edge	possible-01	condition	have-03	0	0.2
# ::edge	visa	mod	city	0.2.0	0.0.1.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / enter-01 :ARG1 (MRPNode-2 / i) :ARG1 (MRPNode-3 / area :mod (MRPNode-4 / country :ARG1-of (MRPNode-5 / differ-02)) :mod (MRPNode-6 / city :name (MRPNode-7 / name :op1 schengen)))) :condition (MRPNode-8 / amr-unknown) :condition (MRPNode-9 / have-03 :ARG1 (MRPNode-10 / visa :mod MRPNode-6)))

# ::id 32
# ::snt What could be causing my bathroom drains to back up?
# ::tok What could be causing my bathroom drains to back up ?
# ::alignments 0-1|0.0 1-2|0 3-4|0.0.0 4-5|0.0.0.0.0.0.0 5-6|0.0.0.0.0.0 6-7|0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.553768 ::parser eager_oracle ::smatch 0.8461538461538461 ::n_actions 31
# ::node	0	possible-01	1-2
# ::node	0.0	amr-unknown	0-1
# ::node	0.0.0	cause-01	3-4
# ::node	0.0.0.0	catch-up-04	
# ::node	0.0.0.0.0	drain-01	6-7
# ::node	0.0.0.0.0.0	bathroom	5-6
# ::node	0.0.0.0.0.0.0	i	4-5
# ::root	0	possible-01
# ::edge	amr-unknown	ARG0-of	cause-01	0.0	0.0.0
# ::edge	bathroom	poss	i	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	catch-up-04	ARG1	drain-01	0.0.0.0	0.0.0.0.0
# ::edge	cause-01	ARG1	catch-up-04	0.0.0	0.0.0.0
# ::edge	drain-01	ARG1	bathroom	0.0.0.0.0	0.0.0.0.0.0
# ::edge	possible-01	ARG1	amr-unknown	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / amr-unknown :ARG0-of (MRPNode-2 / cause-01 :ARG1 (MRPNode-3 / catch-up-04 :ARG1 (MRPNode-4 / drain-01 :ARG1 (MRPNode-5 / bathroom :poss (MRPNode-6 / i)))))))

# ::id 33
# ::snt Why does it take my dryer 3 hours to dry a load of clothes?
# ::tok Why does it take my dryer 3 hours to dry a load of clothes ?
# ::alignments 3-4|0 4-5|0.2.1.0.0 6-7|0.0.0 7-8|0.0+0.0.1 9-10|0.2 11-12|0.2.0 13-14|0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.564108 ::parser eager_oracle ::smatch 0.7027027027027027 ::n_actions 41
# ::node	0	take-10	3-4
# ::node	0.0	temporal-quantity	7-8
# ::node	0.0.0	3	6-7
# ::node	0.0.1	hour	7-8
# ::node	0.1	cause-01	
# ::node	0.1.0	amr-unknown	
# ::node	0.2	dry-08	9-10
# ::node	0.2.0	load	11-12
# ::node	0.2.0.0	clothes	13-14
# ::node	0.2.1	person	
# ::node	0.2.1.0	wash-01	
# ::node	0.2.1.0.0	i	4-5
# ::root	0	take-10
# ::edge	cause-01	ARG0	amr-unknown	0.1	0.1.0
# ::edge	dry-08	ARG0	person	0.2	0.2.1
# ::edge	dry-08	ARG1	load	0.2	0.2.0
# ::edge	load	consist-of	clothes	0.2.0	0.2.0.0
# ::edge	person	ARG0-of	wash-01	0.2.1	0.2.1.0
# ::edge	take-10	ARG0	cause-01	0	0.1
# ::edge	take-10	ARG0	dry-08	0	0.2
# ::edge	take-10	ARG1	temporal-quantity	0	0.0
# ::edge	take-10	ARG2	person	0	0.2.1
# ::edge	temporal-quantity	quant	3	0.0	0.0.0
# ::edge	temporal-quantity	unit	hour	0.0	0.0.1
# ::edge	wash-01	ARG1	i	0.2.1.0	0.2.1.0.0
(MRPNode-0 / take-10 :ARG1 (MRPNode-1 / temporal-quantity :quant 3 :unit (MRPNode-2 / hour)) :ARG0 (MRPNode-3 / cause-01 :ARG0 (MRPNode-4 / amr-unknown)) :ARG0 (MRPNode-5 / dry-08 :ARG1 (MRPNode-6 / load :consist-of (MRPNode-7 / clothes)) :ARG0 (MRPNode-8 / person :ARG0-of (MRPNode-9 / wash-01 :ARG1 (MRPNode-10 / i)))) :ARG2 MRPNode-8)

# ::id 34
# ::snt What are some good strength training routines for runners?
# ::tok What are some good strength training routines for runners ?
# ::alignments 0-1|0.2 3-4|0.0 5-6|0.1 6-7|0 8-9|0.3+0.3.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.567727 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	routine	6-7
# ::node	0.0	good-02	3-4
# ::node	0.1	train-01	5-6
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	person	8-9
# ::node	0.3.0	run-02	8-9
# ::root	0	routine
# ::edge	person	ARG0-of	run-02	0.3	0.3.0
# ::edge	routine	ARG1-of	good-02	0	0.0
# ::edge	routine	beneficiary	amr-unknown	0	0.2
# ::edge	routine	beneficiary	person	0	0.3
# ::edge	routine	domain	train-01	0	0.1
(MRPNode-0 / routine :ARG1-of (MRPNode-1 / good-02) :domain (MRPNode-2 / train-01) :beneficiary (MRPNode-3 / amr-unknown) :beneficiary (MRPNode-4 / person :ARG0-of (MRPNode-5 / run-02)))

# ::id 35
# ::snt Which way does air flow into a furnace?
# ::tok Which way does air flow into a furnace ?
# ::alignments 3-4|0.0 4-5|0 7-8|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:24.569871 ::parser eager_oracle ::smatch 0.8571428571428571 ::n_actions 20
# ::node	0	flow-01	4-5
# ::node	0.0	air	3-4
# ::node	0.1	amr-unknown	
# ::node	0.2	furnace	7-8
# ::root	0	flow-01
# ::edge	flow-01	ARG1	air	0	0.0
# ::edge	flow-01	ARG2	amr-unknown	0	0.1
# ::edge	flow-01	destination	furnace	0	0.2
(MRPNode-0 / flow-01 :ARG1 (MRPNode-1 / air) :ARG2 (MRPNode-2 / amr-unknown) :destination (MRPNode-3 / furnace))

# ::id 36
# ::snt What is this sound from my washing machine?
# ::tok What is this sound from my washing machine ?
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 5-6|0.1.1 6-7|0.1.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.573020 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	sound-02	3-4
# ::node	0.0	this	2-3
# ::node	0.1	machine	7-8
# ::node	0.1.0	wash-01	6-7
# ::node	0.1.1	i	5-6
# ::node	0.2	amr-unknown	0-1
# ::root	0	sound-02
# ::edge	machine	ARG0-of	wash-01	0.1	0.1.0
# ::edge	machine	poss	i	0.1	0.1.1
# ::edge	sound-02	ARG1	this	0	0.0
# ::edge	sound-02	ARG3	amr-unknown	0	0.2
# ::edge	sound-02	source	machine	0	0.1
(MRPNode-0 / sound-02 :ARG1 (MRPNode-1 / this) :source (MRPNode-2 / machine :ARG0-of (MRPNode-3 / wash-01) :poss (MRPNode-4 / i)) :ARG3 (MRPNode-5 / amr-unknown))

# ::id 37
# ::snt How can I add a new light fixture off of a ceiling fan wired to two switches?
# ::tok How can I add a new light fixture off of a ceiling fan wired to two switches ?
# ::alignments 0-1|0.0.3 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0.0 6-7|0.0.0.1 7-8|0.0.0 11-12|0.0.2.0 12-13|0.0.2 13-14|0.0.2.1 15-16|0.0.2.1.0.0 16-17|0.0.2.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.585685 ::parser eager_oracle ::smatch 1.0 ::n_actions 57
# ::node	0	possible-01	1-2
# ::node	0.0	add-02	3-4
# ::node	0.0.0	fixture	7-8
# ::node	0.0.0.0	new-01	5-6
# ::node	0.0.0.1	light	6-7
# ::node	0.0.1	i	2-3
# ::node	0.0.2	fan	12-13
# ::node	0.0.2.0	ceiling	11-12
# ::node	0.0.2.1	wire-01	13-14
# ::node	0.0.2.1.0	switch	16-17
# ::node	0.0.2.1.0.0	2	15-16
# ::node	0.0.3	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	add-02	ARG0	i	0.0	0.0.1
# ::edge	add-02	ARG1	fixture	0.0	0.0.0
# ::edge	add-02	ARG2	fan	0.0	0.0.2
# ::edge	add-02	manner	amr-unknown	0.0	0.0.3
# ::edge	fan	ARG1-of	wire-01	0.0.2	0.0.2.1
# ::edge	fan	mod	ceiling	0.0.2	0.0.2.0
# ::edge	fixture	ARG0-of	light	0.0.0	0.0.0.1
# ::edge	fixture	ARG1-of	new-01	0.0.0	0.0.0.0
# ::edge	possible-01	ARG1	add-02	0	0.0
# ::edge	switch	quant	2	0.0.2.1.0	0.0.2.1.0.0
# ::edge	wire-01	ARG2	switch	0.0.2.1	0.0.2.1.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / add-02 :ARG1 (MRPNode-2 / fixture :ARG1-of (MRPNode-3 / new-01) :ARG0-of (MRPNode-4 / light)) :ARG0 (MRPNode-5 / i) :ARG2 (MRPNode-6 / fan :mod (MRPNode-7 / ceiling) :ARG1-of (MRPNode-8 / wire-01 :ARG2 (MRPNode-9 / switch :quant 2))) :manner (MRPNode-10 / amr-unknown)))

# ::id 38
# ::snt How can I repair a towel rack that was ripped out of the wall?
# ::tok How can I repair a towel rack that was ripped out of the wall ?
# ::alignments 0-1|0.0.0.0 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0.1 6-7|0.0.0 9-10|0.0.0.2 13-14|0.0.0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.592302 ::parser eager_oracle ::smatch 1.0 ::n_actions 42
# ::node	0	possible-01	1-2
# ::node	0.0	repair-01	3-4
# ::node	0.0.0	rack	6-7
# ::node	0.0.0.0	amr-unknown	0-1
# ::node	0.0.0.1	towel	5-6
# ::node	0.0.0.2	rip-01	9-10
# ::node	0.0.0.2.0	wall	13-14
# ::node	0.0.1	i	2-3
# ::root	0	possible-01
# ::edge	possible-01	ARG1	repair-01	0	0.0
# ::edge	rack	ARG1-of	rip-01	0.0.0	0.0.0.2
# ::edge	rack	ARG1-of	towel	0.0.0	0.0.0.1
# ::edge	rack	mod	amr-unknown	0.0.0	0.0.0.0
# ::edge	repair-01	ARG0	i	0.0	0.0.1
# ::edge	repair-01	ARG1	rack	0.0	0.0.0
# ::edge	rip-01	ARG2	wall	0.0.0.2	0.0.0.2.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / repair-01 :ARG1 (MRPNode-2 / rack :mod (MRPNode-3 / amr-unknown) :ARG1-of (MRPNode-4 / towel) :ARG1-of (MRPNode-5 / rip-01 :ARG2 (MRPNode-6 / wall))) :ARG0 (MRPNode-7 / i)))

# ::id 39
# ::snt How can I remove a stuck screw that will still turn?
# ::tok How can I remove a stuck screw that will still turn ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0.0 6-7|0.0.0 9-10|0.0.0.1.0 10-11|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.598152 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	possible-01	1-2
# ::node	0.0	remove-01	3-4
# ::node	0.0.0	screw	6-7
# ::node	0.0.0.0	stick-01	5-6
# ::node	0.0.0.1	turn-02	10-11
# ::node	0.0.0.1.0	still	9-10
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	possible-01	ARG1	remove-01	0	0.0
# ::edge	remove-01	ARG0	i	0.0	0.0.1
# ::edge	remove-01	ARG1	screw	0.0	0.0.0
# ::edge	remove-01	manner	amr-unknown	0.0	0.0.2
# ::edge	screw	ARG0-of	turn-02	0.0.0	0.0.0.1
# ::edge	screw	ARG1-of	stick-01	0.0.0	0.0.0.0
# ::edge	turn-02	mod	still	0.0.0.1	0.0.0.1.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / remove-01 :ARG1 (MRPNode-2 / screw :ARG1-of (MRPNode-3 / stick-01) :ARG0-of (MRPNode-4 / turn-02 :mod (MRPNode-5 / still))) :ARG0 (MRPNode-6 / i) :manner (MRPNode-7 / amr-unknown)))

# ::id 40
# ::snt What are the differences between Peer Reviewed Journals and Refereed Journals?
# ::tok What are the differences between Peer Reviewed Journals and Refereed Journals ?
# ::alignments 0-1|0.2 3-4|0 5-8|0.1+0.1.0+0.1.0.0+0.1.0.1+0.1.0.2 10-11|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.606002 ::parser eager_oracle ::smatch 0.8666666666666666 ::n_actions 26
# ::node	0	differ-02	3-4
# ::node	0.0	journal	10-11
# ::node	0.0.0	review-01	
# ::node	0.0.0.0	Peer	
# ::node	0.1	journal	5-8
# ::node	0.1.0	name	5-8
# ::node	0.1.0.0	peer	5-8
# ::node	0.1.0.1	reviewed	5-8
# ::node	0.1.0.2	journals	5-8
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	journal	0	0.0
# ::edge	differ-02	ARG2	journal	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
# ::edge	journal	ARG1-of	review-01	0.0	0.0.0
# ::edge	journal	name	name	0.1	0.1.0
# ::edge	name	op1	peer	0.1.0	0.1.0.0
# ::edge	name	op2	reviewed	0.1.0	0.1.0.1
# ::edge	name	op3	journals	0.1.0	0.1.0.2
# ::edge	review-01	ARG0	Peer	0.0.0	0.0.0.0
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / journal :ARG1-of (MRPNode-2 / review-01 :ARG0 (MRPNode-3 / Peer))) :ARG2 (MRPNode-4 / journal :name (MRPNode-5 / name :op1 peer :op2 reviewed :op3 journals)) :ARG3 (MRPNode-6 / amr-unknown))

# ::id 41
# ::snt How do I prepare this exterior concrete wall for paint?
# ::tok How do I prepare this exterior concrete wall for paint ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0.1 5-6|0.0.0 6-7|0.0.2 7-8|0.0 9-10|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:24.610811 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	prepare-02	3-4
# ::node	0.0	wall	7-8
# ::node	0.0.0	exterior	5-6
# ::node	0.0.1	this	4-5
# ::node	0.0.2	concrete	6-7
# ::node	0.1	i	2-3
# ::node	0.2	paint	9-10
# ::node	0.3	amr-unknown	0-1
# ::root	0	prepare-02
# ::edge	prepare-02	ARG0	i	0	0.1
# ::edge	prepare-02	ARG1	wall	0	0.0
# ::edge	prepare-02	ARG2	paint	0	0.2
# ::edge	prepare-02	manner	amr-unknown	0	0.3
# ::edge	wall	consist-of	concrete	0.0	0.0.2
# ::edge	wall	mod	exterior	0.0	0.0.0
# ::edge	wall	mod	this	0.0	0.0.1
(MRPNode-0 / prepare-02 :ARG1 (MRPNode-1 / wall :mod (MRPNode-2 / exterior) :mod (MRPNode-3 / this) :consist-of (MRPNode-4 / concrete)) :ARG0 (MRPNode-5 / i) :ARG2 (MRPNode-6 / paint) :manner (MRPNode-7 / amr-unknown))

# ::id 42
# ::snt How do I make mayonnaise split?
# ::tok How do I make mayonnaise split ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 4-5|0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.613720 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	make-02	3-4
# ::node	0.0	split-01	5-6
# ::node	0.0.0	mayonnaise	4-5
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	make-02
# ::edge	make-02	ARG0	i	0	0.1
# ::edge	make-02	ARG1	split-01	0	0.0
# ::edge	make-02	manner	amr-unknown	0	0.2
# ::edge	split-01	ARG1	mayonnaise	0.0	0.0.0
(MRPNode-0 / make-02 :ARG1 (MRPNode-1 / split-01 :ARG1 (MRPNode-2 / mayonnaise)) :ARG0 (MRPNode-3 / i) :manner (MRPNode-4 / amr-unknown))

# ::id 43
# ::snt I was offered the minimum salary I requested, should I ask for more?
# ::tok I was offered the minimum salary I requested , should I ask for more ?
# ::alignments 2-3|0.0 4-5|0.0.0.0 5-6|0.0.0 7-8|0.0.0.1 9-10|0.1 10-11|0.0.0.1.0 11-12|0.1.0 13-14|0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.626584 ::parser eager_oracle ::smatch 0.7999999999999999 ::n_actions 43
# ::node	0	and	
# ::node	0.0	offer-01	2-3
# ::node	0.0.0	salary	5-6
# ::node	0.0.0.0	minimum	4-5
# ::node	0.0.0.1	request-01	7-8
# ::node	0.0.0.1.0	i	10-11
# ::node	0.1	recommend-01	9-10
# ::node	0.1.0	ask-02	11-12
# ::node	0.1.0.0	more	13-14
# ::node	0.1.1	amr-unknown	
# ::root	0	and
# ::edge	and	op1	offer-01	0	0.0
# ::edge	and	op2	recommend-01	0	0.1
# ::edge	ask-02	ARG0	i	0.1.0	0.0.0.1.0
# ::edge	ask-02	ARG1	more	0.1.0	0.1.0.0
# ::edge	offer-01	ARG1	salary	0.0	0.0.0
# ::edge	offer-01	ARG2	i	0.0	0.0.0.1.0
# ::edge	recommend-01	ARG1	ask-02	0.1	0.1.0
# ::edge	recommend-01	ARG1-of	amr-unknown	0.1	0.1.1
# ::edge	request-01	ARG0	i	0.0.0.1	0.0.0.1.0
# ::edge	salary	ARG1-of	request-01	0.0.0	0.0.0.1
# ::edge	salary	mod	minimum	0.0.0	0.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / offer-01 :ARG1 (MRPNode-2 / salary :mod (MRPNode-3 / minimum) :ARG1-of (MRPNode-4 / request-01 :ARG0 (MRPNode-5 / i))) :ARG2 MRPNode-5) :op2 (MRPNode-6 / recommend-01 :ARG1 (MRPNode-7 / ask-02 :ARG0 MRPNode-5 :ARG1 (MRPNode-8 / more)) :ARG1-of (MRPNode-9 / amr-unknown)))

# ::id 44
# ::snt What does this notation mean?
# ::tok What does this notation mean ?
# ::alignments 0-1|0.0 2-3|0.1.0 3-4|0.1 4-5|0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.628514 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	mean-01	4-5
# ::node	0.0	amr-unknown	0-1
# ::node	0.1	notation	3-4
# ::node	0.1.0	this	2-3
# ::root	0	mean-01
# ::edge	mean-01	ARG1	amr-unknown	0	0.0
# ::edge	mean-01	ARG1	notation	0	0.1
# ::edge	notation	mod	this	0.1	0.1.0
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / amr-unknown) :ARG1 (MRPNode-2 / notation :mod (MRPNode-3 / this)))

# ::id 45
# ::snt Why does my ceiling fan turn off when I turn on the lights?
# ::tok Why does my ceiling fan turn off when I turn on the lights ?
# ::alignments 2-3|0.0.0.1 3-4|0.0.0.0 4-5|0.0.0 5-6|0.0 9-10|0.0.1 10-11|0 12-13|0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.653012 ::parser eager_oracle ::smatch 0.8484848484848485 ::n_actions 40
# ::node	0	cause-01	10-11
# ::node	0.0	turn-on-13	5-6
# ::node	0.0.0	fan	4-5
# ::node	0.0.0.0	ceiling	3-4
# ::node	0.0.0.1	i	2-3
# ::node	0.0.1	turn-on-13	9-10
# ::node	0.0.1.0	light	12-13
# ::node	0.1	amr-unknown	
# ::root	0	cause-01
# ::edge	cause-01	ARG0	amr-unknown	0	0.1
# ::edge	cause-01	ARG1	turn-on-13	0	0.0
# ::edge	fan	mod	ceiling	0.0.0	0.0.0.0
# ::edge	fan	poss	i	0.0.0	0.0.0.1
# ::edge	turn-on-13	ARG0	i	0.0.1	0.0.0.1
# ::edge	turn-on-13	ARG1	fan	0.0	0.0.0
# ::edge	turn-on-13	ARG1	light	0.0.1	0.0.1.0
# ::edge	turn-on-13	time	turn-on-13	0.0	0.0.1
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / turn-on-13 :ARG1 (MRPNode-2 / fan :mod (MRPNode-3 / ceiling) :poss (MRPNode-4 / i)) :time (MRPNode-5 / turn-on-13 :ARG0 MRPNode-4 :ARG1 (MRPNode-6 / light))) :ARG0 (MRPNode-7 / amr-unknown))

# ::id 46
# ::snt How to make more than one good cup of coffee with a moka pot?
# ::tok How to make more than one good cup of coffee with a moka pot ?
# ::alignments 0-1|0.1 2-3|0.0 3-4|0.0.0.0 5-6|0.0.0.0.0 6-7|0.0.1.0 7-8|0.0.0.0.1 8-9|0 9-10|0.0.0 12-13|0.0.1.1 13-14|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.661613 ::parser eager_oracle ::smatch 1.0 ::n_actions 54
# ::node	0	have-manner-91	8-9
# ::node	0.0	make-01	2-3
# ::node	0.0.0	coffee	9-10
# ::node	0.0.0.0	more-than	3-4
# ::node	0.0.0.0.0	1	5-6
# ::node	0.0.0.0.1	cup	7-8
# ::node	0.0.1	pot	13-14
# ::node	0.0.1.0	good-02	6-7
# ::node	0.0.1.1	moka	12-13
# ::node	0.1	amr-unknown	0-1
# ::root	0	have-manner-91
# ::edge	coffee	quant	more-than	0.0.0	0.0.0.0
# ::edge	have-manner-91	ARG1	make-01	0	0.0
# ::edge	have-manner-91	ARG2	amr-unknown	0	0.1
# ::edge	make-01	ARG1	coffee	0.0	0.0.0
# ::edge	make-01	instrument	pot	0.0	0.0.1
# ::edge	more-than	op1	1	0.0.0.0	0.0.0.0.0
# ::edge	more-than	op1	cup	0.0.0.0	0.0.0.0.1
# ::edge	pot	ARG1-of	good-02	0.0.1	0.0.1.0
# ::edge	pot	consist-of	moka	0.0.1	0.0.1.1
(MRPNode-0 / have-manner-91 :ARG1 (MRPNode-1 / make-01 :ARG1 (MRPNode-2 / coffee :quant (MRPNode-3 / more-than :op1 1 :op1 (MRPNode-4 / cup))) :instrument (MRPNode-5 / pot :ARG1-of (MRPNode-6 / good-02) :consist-of (MRPNode-7 / moka))) :ARG2 (MRPNode-8 / amr-unknown))

# ::id 47
# ::snt What could be causing my GFCI outlet to trip?
# ::tok What could be causing my GFCI outlet to trip ?
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 4-5|0.0.1.0.1 5-6|0.0.1.0.0+0.0.1.0.0.0+0.0.1.0.0.0.0 6-7|0.0.1.0 8-9|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.667039 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	possible-01	1-2
# ::node	0.0	cause-01	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	trip-03	8-9
# ::node	0.0.1.0	outlet	6-7
# ::node	0.0.1.0.0	company	5-6
# ::node	0.0.1.0.0.0	name	5-6
# ::node	0.0.1.0.0.0.0	gfci	5-6
# ::node	0.0.1.0.1	i	4-5
# ::root	0	possible-01
# ::edge	cause-01	ARG1	amr-unknown	0.0	0.0.0
# ::edge	cause-01	ARG1	trip-03	0.0	0.0.1
# ::edge	company	name	name	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	gfci	0.0.1.0.0.0	0.0.1.0.0.0.0
# ::edge	outlet	mod	company	0.0.1.0	0.0.1.0.0
# ::edge	outlet	poss	i	0.0.1.0	0.0.1.0.1
# ::edge	possible-01	ARG1	cause-01	0	0.0
# ::edge	trip-03	ARG0	outlet	0.0.1	0.0.1.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / cause-01 :ARG1 (MRPNode-2 / amr-unknown) :ARG1 (MRPNode-3 / trip-03 :ARG0 (MRPNode-4 / outlet :mod (MRPNode-5 / company :name (MRPNode-6 / name :op1 gfci)) :poss (MRPNode-7 / i)))))

# ::id 48
# ::snt What is wrong with my gas furnace?
# ::tok What is wrong with my gas furnace ?
# ::alignments 0-1|0.0 2-3|0 4-5|0.1.1 5-6|0.1.0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.669460 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	wrong-02	2-3
# ::node	0.0	amr-unknown	0-1
# ::node	0.1	furnace	6-7
# ::node	0.1.0	gas	5-6
# ::node	0.1.1	i	4-5
# ::root	0	wrong-02
# ::edge	furnace	mod	gas	0.1	0.1.0
# ::edge	furnace	poss	i	0.1	0.1.1
# ::edge	wrong-02	ARG1	amr-unknown	0	0.0
# ::edge	wrong-02	ARG2	furnace	0	0.1
(MRPNode-0 / wrong-02 :ARG1 (MRPNode-1 / amr-unknown) :ARG2 (MRPNode-2 / furnace :mod (MRPNode-3 / gas) :poss (MRPNode-4 / i)))

# ::id 49
# ::snt How do I connect the wires to this USB receptacle?
# ::tok How do I connect the wires to this USB receptacle ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 5-6|0.0 7-8|0.2.0 8-9|0.2.1+0.2.1.0+0.2.1.0.0 9-10|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:24.674228 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	connect-01	3-4
# ::node	0.0	wire	5-6
# ::node	0.1	i	2-3
# ::node	0.2	receptacle	9-10
# ::node	0.2.0	this	7-8
# ::node	0.2.1	product	8-9
# ::node	0.2.1.0	name	8-9
# ::node	0.2.1.0.0	usb	8-9
# ::node	0.3	amr-unknown	0-1
# ::root	0	connect-01
# ::edge	connect-01	ARG0	i	0	0.1
# ::edge	connect-01	ARG1	wire	0	0.0
# ::edge	connect-01	ARG2	receptacle	0	0.2
# ::edge	connect-01	manner	amr-unknown	0	0.3
# ::edge	name	op1	usb	0.2.1.0	0.2.1.0.0
# ::edge	product	name	name	0.2.1	0.2.1.0
# ::edge	receptacle	mod	product	0.2	0.2.1
# ::edge	receptacle	mod	this	0.2	0.2.0
(MRPNode-0 / connect-01 :ARG1 (MRPNode-1 / wire) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / receptacle :mod (MRPNode-4 / this) :mod (MRPNode-5 / product :name (MRPNode-6 / name :op1 usb))) :manner (MRPNode-7 / amr-unknown))

# ::id 50
# ::snt How do I prepare this porous interior wall for paint?
# ::tok How do I prepare this porous interior wall for paint ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0.1 5-6|0.0.0 6-7|0.0.2 7-8|0.0 9-10|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:24.680420 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	prepare-02	3-4
# ::node	0.0	wall	7-8
# ::node	0.0.0	porous	5-6
# ::node	0.0.1	this	4-5
# ::node	0.0.2	interior	6-7
# ::node	0.1	i	2-3
# ::node	0.2	paint	9-10
# ::node	0.3	amr-unknown	0-1
# ::root	0	prepare-02
# ::edge	prepare-02	ARG0	i	0	0.1
# ::edge	prepare-02	ARG1	wall	0	0.0
# ::edge	prepare-02	ARG2	paint	0	0.2
# ::edge	prepare-02	manner	amr-unknown	0	0.3
# ::edge	wall	mod	interior	0.0	0.0.2
# ::edge	wall	mod	porous	0.0	0.0.0
# ::edge	wall	mod	this	0.0	0.0.1
(MRPNode-0 / prepare-02 :ARG1 (MRPNode-1 / wall :mod (MRPNode-2 / porous) :mod (MRPNode-3 / this) :mod (MRPNode-4 / interior)) :ARG0 (MRPNode-5 / i) :ARG2 (MRPNode-6 / paint) :manner (MRPNode-7 / amr-unknown))

# ::id 51
# ::snt Why is there no hot water in the kitchen?
# ::tok Why is there no hot water in the kitchen ?
# ::alignments 3-4|0.0.0 4-5|0.0.1.0 5-6|0.0.1 6-7|0+0.0 8-9|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:24.683553 ::parser eager_oracle ::smatch 0.6923076923076923 ::n_actions 31
# ::node	0	cause-01	6-7
# ::node	0.0	be-located-at-91	6-7
# ::node	0.0.0	-	3-4
# ::node	0.0.1	water	5-6
# ::node	0.0.1.0	hot-05	4-5
# ::node	0.0.2	kitchen	8-9
# ::node	0.1	amr-unknown	
# ::root	0	cause-01
# ::edge	be-located-at-91	ARG1	water	0.0	0.0.1
# ::edge	be-located-at-91	ARG2	kitchen	0.0	0.0.2
# ::edge	be-located-at-91	polarity	-	0.0	0.0.0
# ::edge	cause-01	ARG0	amr-unknown	0	0.1
# ::edge	cause-01	ARG1	be-located-at-91	0	0.0
# ::edge	water	ARG1-of	hot-05	0.0.1	0.0.1.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / be-located-at-91 :polarity - :ARG1 (MRPNode-2 / water :ARG1-of (MRPNode-3 / hot-05)) :ARG2 (MRPNode-4 / kitchen)) :ARG0 (MRPNode-5 / amr-unknown))

# ::id 52
# ::snt Can I pay a collection agency in a way that will improve my credit score?
# ::tok Can I pay a collection agency in a way that will improve my credit score ?
# ::alignments 0-1|0 1-2|0.0.1 2-3|0.0 4-5|0.0.0.0 5-6|0.0.0 8-9|0.0.2 11-12|0.0.2.0 13-14|0.0.1.0.0 14-15|0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.695238 ::parser eager_oracle ::smatch 0.9500000000000001 ::n_actions 47
# ::node	0	possible-01	0-1
# ::node	0.0	pay-01	2-3
# ::node	0.0.0	agency	5-6
# ::node	0.0.0.0	collect-01	4-5
# ::node	0.0.1	i	1-2
# ::node	0.0.1.0	score	14-15
# ::node	0.0.1.0.0	credit	13-14
# ::node	0.0.2	way	8-9
# ::node	0.0.2.0	improve-01	11-12
# ::node	0.1	amr-unknown	
# ::root	0	possible-01
# ::edge	agency	ARG0-of	collect-01	0.0.0	0.0.0.0
# ::edge	i	poss-of	score	0.0.1	0.0.1.0
# ::edge	improve-01	ARG1	score	0.0.2.0	0.0.1.0
# ::edge	pay-01	ARG0	i	0.0	0.0.1
# ::edge	pay-01	ARG1	agency	0.0	0.0.0
# ::edge	pay-01	manner	way	0.0	0.0.2
# ::edge	possible-01	ARG1	pay-01	0	0.0
# ::edge	possible-01	manner	amr-unknown	0	0.1
# ::edge	score	mod	credit	0.0.1.0	0.0.1.0.0
# ::edge	way	ARG0-of	improve-01	0.0.2	0.0.2.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / pay-01 :ARG1 (MRPNode-2 / agency :ARG0-of (MRPNode-3 / collect-01)) :ARG0 (MRPNode-4 / i :poss-of (MRPNode-5 / score :mod (MRPNode-6 / credit))) :manner (MRPNode-7 / way :ARG0-of (MRPNode-8 / improve-01 :ARG1 MRPNode-5))) :manner (MRPNode-9 / amr-unknown))

# ::id 53
# ::snt What kind of glass is this?
# ::tok What kind of glass is this ?
# ::alignments 0-1|0.0.0 1-2|0.0 3-4|0 5-6|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.697418 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	glass	3-4
# ::node	0.0	kind	1-2
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	this	5-6
# ::root	0	glass
# ::edge	glass	mod	kind	0	0.0
# ::edge	kind	mod	amr-unknown	0.0	0.0.0
# ::edge	kind	mod	this	0.0	0.0.1
(MRPNode-0 / glass :mod (MRPNode-1 / kind :mod (MRPNode-2 / amr-unknown) :mod (MRPNode-3 / this)))

# ::id 54
# ::snt Do I need to install a sump pump?
# ::tok Do I need to install a sump pump ?
# ::alignments 1-2|0.0.1 2-3|0 4-5|0.0 6-7|0.0.0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.700818 ::parser eager_oracle ::smatch 0.9166666666666666 ::n_actions 28
# ::node	0	need-01	2-3
# ::node	0.0	install-01	4-5
# ::node	0.0.0	pump	7-8
# ::node	0.0.0.0	sump	6-7
# ::node	0.0.1	i	1-2
# ::node	0.1	amr-unknown	
# ::root	0	need-01
# ::edge	install-01	ARG0	i	0.0	0.0.1
# ::edge	install-01	ARG1	pump	0.0	0.0.0
# ::edge	need-01	ARG0	amr-unknown	0	0.1
# ::edge	need-01	ARG0	i	0	0.0.1
# ::edge	need-01	ARG1	install-01	0	0.0
# ::edge	pump	mod	sump	0.0.0	0.0.0.0
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / install-01 :ARG1 (MRPNode-2 / pump :mod (MRPNode-3 / sump)) :ARG0 (MRPNode-4 / i)) :ARG0 MRPNode-4 :ARG0 (MRPNode-5 / amr-unknown))

# ::id 55
# ::snt How can I convince my boss I am the right person to lead a future team?
# ::tok How can I convince my boss I am the right person to lead a future team ?
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 4-5|0.0.1 5-6|0.0.1.0+0.0.1.0.1 9-10|0.0.2.0 10-11|0.0.1.0.0+0.0.2 12-13|0.0.2.1 14-15|0.0.2.1.0.0 15-16|0.0.2.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.734627 ::parser eager_oracle ::smatch 1.0 ::n_actions 59
# ::node	0	possible-01	1-2
# ::node	0.0	convince-01	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	i	4-5
# ::node	0.0.1.0	have-rel-role-91	5-6
# ::node	0.0.1.0.0	person	10-11
# ::node	0.0.1.0.1	boss	5-6
# ::node	0.0.2	person	10-11
# ::node	0.0.2.0	right-06	9-10
# ::node	0.0.2.1	lead-02	12-13
# ::node	0.0.2.1.0	team	15-16
# ::node	0.0.2.1.0.0	future	14-15
# ::root	0	possible-01
# ::edge	convince-01	ARG1	amr-unknown	0.0	0.0.0
# ::edge	convince-01	ARG1	i	0.0	0.0.1
# ::edge	convince-01	ARG2	person	0.0	0.0.2
# ::edge	have-rel-role-91	ARG0	person	0.0.1.0	0.0.1.0.0
# ::edge	have-rel-role-91	ARG2	boss	0.0.1.0	0.0.1.0.1
# ::edge	i	ARG1-of	have-rel-role-91	0.0.1	0.0.1.0
# ::edge	lead-02	ARG1	team	0.0.2.1	0.0.2.1.0
# ::edge	person	ARG0-of	lead-02	0.0.2	0.0.2.1
# ::edge	person	ARG1-of	right-06	0.0.2	0.0.2.0
# ::edge	possible-01	ARG1	convince-01	0	0.0
# ::edge	team	time	future	0.0.2.1.0	0.0.2.1.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / convince-01 :ARG1 (MRPNode-2 / amr-unknown) :ARG1 (MRPNode-3 / i :ARG1-of (MRPNode-4 / have-rel-role-91 :ARG0 (MRPNode-5 / person) :ARG2 (MRPNode-6 / boss))) :ARG2 (MRPNode-7 / person :ARG1-of (MRPNode-8 / right-06) :ARG0-of (MRPNode-9 / lead-02 :ARG1 (MRPNode-10 / team :time (MRPNode-11 / future))))))

# ::id 56
# ::snt Flying from California to Texas: do I need ESTA?
# ::tok Flying from California to Texas : do I need ESTA ?
# ::alignments 0-1|0.3 2-3|0.3.0+0.3.0.0+0.3.0.0.0 4-5|0.3.1+0.3.1.0+0.3.1.0.0 7-8|0.1 8-9|0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.741632 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 29
# ::node	0	need-01	8-9
# ::node	0.0	entertain-01	
# ::node	0.1	i	7-8
# ::node	0.2	amr-unknown	
# ::node	0.3	fly-01	0-1
# ::node	0.3.0	state	2-3
# ::node	0.3.0.0	name	2-3
# ::node	0.3.0.0.0	california	2-3
# ::node	0.3.1	state	4-5
# ::node	0.3.1.0	name	4-5
# ::node	0.3.1.0.0	texas	4-5
# ::root	0	need-01
# ::edge	fly-01	ARG1	i	0.3	0.1
# ::edge	fly-01	destination	state	0.3	0.3.0
# ::edge	fly-01	destination	state	0.3	0.3.1
# ::edge	name	op1	california	0.3.0.0	0.3.0.0.0
# ::edge	name	op1	texas	0.3.1.0	0.3.1.0.0
# ::edge	need-01	ARG0	i	0	0.1
# ::edge	need-01	ARG1	entertain-01	0	0.0
# ::edge	need-01	ARG1-of	amr-unknown	0	0.2
# ::edge	need-01	condition	fly-01	0	0.3
# ::edge	state	name	name	0.3.0	0.3.0.0
# ::edge	state	name	name	0.3.1	0.3.1.0
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / entertain-01) :ARG0 (MRPNode-2 / i) :ARG1-of (MRPNode-3 / amr-unknown) :condition (MRPNode-4 / fly-01 :ARG1 MRPNode-2 :destination (MRPNode-5 / state :name (MRPNode-6 / name :op1 california)) :destination (MRPNode-7 / state :name (MRPNode-8 / name :op1 texas))))

# ::id 57
# ::snt Should I tell my boss I have a full time job offer?
# ::tok Should I tell my boss I have a full time job offer ?
# ::alignments 0-1|0 2-3|0.0 3-4|0.0.0.1.0 4-5|0.0.0.1.0.0+0.0.0.1.0.0.0 8-10|0.0.0.1 10-11|0.0.0.0 11-12|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.762085 ::parser eager_oracle ::smatch 0.8292682926829268 ::n_actions 41
# ::node	0	recommend-01	0-1
# ::node	0.0	tell-01	2-3
# ::node	0.0.0	offer-01	11-12
# ::node	0.0.0.0	job	10-11
# ::node	0.0.0.1	full-time	8-10
# ::node	0.0.0.1.0	i	3-4
# ::node	0.0.0.1.0.0	have-rel-role-91	4-5
# ::node	0.0.0.1.0.0.0	boss	4-5
# ::node	0.0.0.1.0.0.1	person	
# ::node	0.1	amr-unknown	
# ::root	0	recommend-01
# ::edge	full-time	ARG0	person	0.0.0.1	0.0.0.1.0.0.1
# ::edge	full-time	ARG1	i	0.0.0.1	0.0.0.1.0
# ::edge	have-rel-role-91	ARG0	person	0.0.0.1.0.0	0.0.0.1.0.0.1
# ::edge	have-rel-role-91	ARG2	boss	0.0.0.1.0.0	0.0.0.1.0.0.0
# ::edge	i	ARG1-of	have-rel-role-91	0.0.0.1.0	0.0.0.1.0.0
# ::edge	offer-01	ARG0	person	0.0.0	0.0.0.1.0.0.1
# ::edge	offer-01	ARG1	job	0.0.0	0.0.0.0
# ::edge	offer-01	mod	full-time	0.0.0	0.0.0.1
# ::edge	recommend-01	ARG1	tell-01	0	0.0
# ::edge	recommend-01	ARG2	amr-unknown	0	0.1
# ::edge	tell-01	ARG0	i	0.0	0.0.0.1.0
# ::edge	tell-01	ARG1	offer-01	0.0	0.0.0
# ::edge	tell-01	ARG2	person	0.0	0.0.0.1.0.0.1
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / tell-01 :ARG1 (MRPNode-2 / offer-01 :ARG1 (MRPNode-3 / job) :mod (MRPNode-4 / full-time :ARG1 (MRPNode-5 / i :ARG1-of (MRPNode-6 / have-rel-role-91 :ARG2 (MRPNode-7 / boss) :ARG0 (MRPNode-8 / person))) :ARG0 MRPNode-8) :ARG0 MRPNode-8) :ARG0 MRPNode-5 :ARG2 MRPNode-8) :ARG2 (MRPNode-9 / amr-unknown))

# ::id 58
# ::snt How can I repair my floors' finish?
# ::tok How can I repair my floors ' finish ?
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 4-5|0.0.1.0.0 5-6|0.0.1.0 7-8|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.767244 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	possible-01	1-2
# ::node	0.0	repair-01	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	finish-01	7-8
# ::node	0.0.1.0	floor	5-6
# ::node	0.0.1.0.0	i	4-5
# ::root	0	possible-01
# ::edge	finish-01	ARG1	floor	0.0.1	0.0.1.0
# ::edge	floor	poss	i	0.0.1.0	0.0.1.0.0
# ::edge	possible-01	ARG1	repair-01	0	0.0
# ::edge	repair-01	ARG0	i	0.0	0.0.1.0.0
# ::edge	repair-01	ARG1	amr-unknown	0.0	0.0.0
# ::edge	repair-01	ARG1	finish-01	0.0	0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / repair-01 :ARG1 (MRPNode-2 / amr-unknown) :ARG1 (MRPNode-3 / finish-01 :ARG1 (MRPNode-4 / floor :poss (MRPNode-5 / i))) :ARG0 MRPNode-5))

# ::id 59
# ::snt How long should it take concrete to fully cure?
# ::tok How long should it take concrete to fully cure ?
# ::alignments 0-1|0.0.0.0 2-3|0 4-5|0.0 5-6|0.0.1.1 7-8|0.0.1.0 8-9|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.771045 ::parser eager_oracle ::smatch 0.8333333333333333 ::n_actions 29
# ::node	0	recommend-01	2-3
# ::node	0.0	take-10	4-5
# ::node	0.0.0	temporal-quantity	
# ::node	0.0.0.0	amr-unknown	0-1
# ::node	0.0.1	cure-01	8-9
# ::node	0.0.1.0	full	7-8
# ::node	0.0.1.1	concrete	5-6
# ::root	0	recommend-01
# ::edge	cure-01	ARG1-of	full	0.0.1	0.0.1.0
# ::edge	cure-01	ARG2	concrete	0.0.1	0.0.1.1
# ::edge	recommend-01	ARG1	take-10	0	0.0
# ::edge	take-10	ARG0	cure-01	0.0	0.0.1
# ::edge	take-10	ARG1	temporal-quantity	0.0	0.0.0
# ::edge	temporal-quantity	quant	amr-unknown	0.0.0	0.0.0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / take-10 :ARG1 (MRPNode-2 / temporal-quantity :quant (MRPNode-3 / amr-unknown)) :ARG0 (MRPNode-4 / cure-01 :ARG1-of (MRPNode-5 / full) :ARG2 (MRPNode-6 / concrete))))

# ::id 60
# ::snt Is it appropriate to ask a professor via e-mail for a letter of recommendation?
# ::tok Is it appropriate to ask a professor via e-mail for a letter of recommendation ?
# ::alignments 2-3|0 4-5|0.0 6-7|0.0.1+0.0.1.0+0.0.1.0.0 8-9|0.0.2 11-12|0.0.0 13-14|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.778324 ::parser eager_oracle ::smatch 0.9411764705882353 ::n_actions 43
# ::node	0	appropriate-02	2-3
# ::node	0.0	ask-02	4-5
# ::node	0.0.0	letter	11-12
# ::node	0.0.0.0	recommend-01	13-14
# ::node	0.0.1	person	6-7
# ::node	0.0.1.0	have-org-role-91	6-7
# ::node	0.0.1.0.0	professor	6-7
# ::node	0.0.2	email-01	8-9
# ::node	0.1	amr-unknown	
# ::root	0	appropriate-02
# ::edge	appropriate-02	ARG1	ask-02	0	0.0
# ::edge	appropriate-02	ARG2	amr-unknown	0	0.1
# ::edge	ask-02	ARG0	person	0.0	0.0.1
# ::edge	ask-02	ARG1	letter	0.0	0.0.0
# ::edge	ask-02	medium	email-01	0.0	0.0.2
# ::edge	have-org-role-91	ARG2	professor	0.0.1.0	0.0.1.0.0
# ::edge	letter	mod	recommend-01	0.0.0	0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0.1	0.0.1.0
(MRPNode-0 / appropriate-02 :ARG1 (MRPNode-1 / ask-02 :ARG1 (MRPNode-2 / letter :mod (MRPNode-3 / recommend-01)) :ARG0 (MRPNode-4 / person :ARG0-of (MRPNode-5 / have-org-role-91 :ARG2 (MRPNode-6 / professor))) :medium (MRPNode-7 / email-01)) :ARG2 (MRPNode-8 / amr-unknown))

# ::id 61
# ::snt Can I travel to the UK if my Schengen visa expired?
# ::tok Can I travel to the UK if my Schengen visa expired ?
# ::alignments 0-1|0 1-2|0.0.0 2-3|0.0 5-6|0.0.1+0.0.1.0+0.0.1.0.0 8-9|0.2.0.0+0.2.0.0.0+0.2.0.0.0.0 9-10|0.2.0 10-11|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:24.787206 ::parser eager_oracle ::smatch 0.9545454545454545 ::n_actions 37
# ::node	0	possible-01	0-1
# ::node	0.0	travel-01	2-3
# ::node	0.0.0	i	1-2
# ::node	0.0.1	country	5-6
# ::node	0.0.1.0	name	5-6
# ::node	0.0.1.0.0	uk	5-6
# ::node	0.1	amr-unknown	
# ::node	0.2	expire-01	10-11
# ::node	0.2.0	visa	9-10
# ::node	0.2.0.0	company	8-9
# ::node	0.2.0.0.0	name	8-9
# ::node	0.2.0.0.0.0	schengen	8-9
# ::root	0	possible-01
# ::edge	company	name	name	0.2.0.0	0.2.0.0.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	expire-01	ARG1	visa	0.2	0.2.0
# ::edge	name	op1	schengen	0.2.0.0.0	0.2.0.0.0.0
# ::edge	name	op1	uk	0.0.1.0	0.0.1.0.0
# ::edge	possible-01	ARG1	travel-01	0	0.0
# ::edge	possible-01	condition	amr-unknown	0	0.1
# ::edge	possible-01	condition	expire-01	0	0.2
# ::edge	travel-01	ARG0	i	0.0	0.0.0
# ::edge	travel-01	ARG4	country	0.0	0.0.1
# ::edge	visa	mod	company	0.2.0	0.2.0.0
# ::edge	visa	poss	i	0.2.0	0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / travel-01 :ARG0 (MRPNode-2 / i) :ARG4 (MRPNode-3 / country :name (MRPNode-4 / name :op1 uk))) :condition (MRPNode-5 / amr-unknown) :condition (MRPNode-6 / expire-01 :ARG1 (MRPNode-7 / visa :poss MRPNode-2 :mod (MRPNode-8 / company :name (MRPNode-9 / name :op1 schengen)))))

# ::id 62
# ::snt How can I remove paint from a deck?
# ::tok How can I remove paint from a deck ?
# ::alignments 0-1|0.0.3 1-2|0 2-3|0.0.1 3-4|0.0 4-5|0.0.0 7-8|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:24.790531 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	possible-01	1-2
# ::node	0.0	remove-01	3-4
# ::node	0.0.0	paint	4-5
# ::node	0.0.1	i	2-3
# ::node	0.0.2	deck	7-8
# ::node	0.0.3	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	possible-01	ARG1	remove-01	0	0.0
# ::edge	remove-01	ARG0	i	0.0	0.0.1
# ::edge	remove-01	ARG1	paint	0.0	0.0.0
# ::edge	remove-01	ARG2	deck	0.0	0.0.2
# ::edge	remove-01	manner	amr-unknown	0.0	0.0.3
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / remove-01 :ARG1 (MRPNode-2 / paint) :ARG0 (MRPNode-3 / i) :ARG2 (MRPNode-4 / deck) :manner (MRPNode-5 / amr-unknown)))

# ::id 63
# ::snt How should I apply for a Schengen visa from the UK?
# ::tok How should I apply for a Schengen visa from the UK ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.1 3-4|0.0 6-7|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 7-8|0.0.0 10-11|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.797488 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	recommend-01	1-2
# ::node	0.0	apply-01	3-4
# ::node	0.0.0	visa	7-8
# ::node	0.0.0.0	country	10-11
# ::node	0.0.0.0.0	name	10-11
# ::node	0.0.0.0.0.0	uk	10-11
# ::node	0.0.0.1	organization	6-7
# ::node	0.0.0.1.0	name	6-7
# ::node	0.0.0.1.0.0	schengen	6-7
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	recommend-01
# ::edge	apply-01	ARG0	i	0.0	0.0.1
# ::edge	apply-01	ARG1	visa	0.0	0.0.0
# ::edge	apply-01	ARG2	amr-unknown	0.0	0.0.2
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	schengen	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op1	uk	0.0.0.0.0	0.0.0.0.0.0
# ::edge	organization	name	name	0.0.0.1	0.0.0.1.0
# ::edge	recommend-01	ARG1	apply-01	0	0.0
# ::edge	visa	mod	organization	0.0.0	0.0.0.1
# ::edge	visa	source	country	0.0.0	0.0.0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / apply-01 :ARG1 (MRPNode-2 / visa :source (MRPNode-3 / country :name (MRPNode-4 / name :op1 uk)) :mod (MRPNode-5 / organization :name (MRPNode-6 / name :op1 schengen))) :ARG0 (MRPNode-7 / i) :ARG2 (MRPNode-8 / amr-unknown)))

# ::id 64
# ::snt Why is my furnace blowing hot air outside?
# ::tok Why is my furnace blowing hot air outside ?
# ::alignments 2-3|0.1.0 3-4|0.1 4-5|0+0.2 5-6|0.0.0 6-7|0.0 7-8|0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:24.801815 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 33
# ::node	0	blow-01	4-5
# ::node	0.0	air	6-7
# ::node	0.0.0	hot-05	5-6
# ::node	0.1	furnace	3-4
# ::node	0.1.0	i	2-3
# ::node	0.2	cause-01	4-5
# ::node	0.2.0	amr-unknown	
# ::node	0.3	outside	7-8
# ::root	0	blow-01
# ::edge	air	ARG1-of	hot-05	0.0	0.0.0
# ::edge	blow-01	ARG0	furnace	0	0.1
# ::edge	blow-01	ARG1	air	0	0.0
# ::edge	blow-01	ARG1-of	cause-01	0	0.2
# ::edge	blow-01	location	outside	0	0.3
# ::edge	cause-01	ARG0	amr-unknown	0.2	0.2.0
# ::edge	furnace	poss	i	0.1	0.1.0
(MRPNode-0 / blow-01 :ARG1 (MRPNode-1 / air :ARG1-of (MRPNode-2 / hot-05)) :ARG0 (MRPNode-3 / furnace :poss (MRPNode-4 / i)) :ARG1-of (MRPNode-5 / cause-01 :ARG0 (MRPNode-6 / amr-unknown)) :location (MRPNode-7 / outside))

# ::id 65
# ::snt Do I need to replace this water pressure valve?
# ::tok Do I need to replace this water pressure valve ?
# ::alignments 1-2|0.0.1 2-3|0 4-5|0.0 5-6|0.0.0.0 6-7|0.0.0.1.0 7-8|0.0.0.1 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.807209 ::parser eager_oracle ::smatch 0.9375 ::n_actions 35
# ::node	0	need-01	2-3
# ::node	0.0	replace-01	4-5
# ::node	0.0.0	valve	8-9
# ::node	0.0.0.0	this	5-6
# ::node	0.0.0.1	pressure	7-8
# ::node	0.0.0.1.0	water	6-7
# ::node	0.0.1	i	1-2
# ::node	0.1	amr-unknown	
# ::root	0	need-01
# ::edge	need-01	ARG0	amr-unknown	0	0.1
# ::edge	need-01	ARG0	i	0	0.0.1
# ::edge	need-01	ARG1	replace-01	0	0.0
# ::edge	pressure	source	water	0.0.0.1	0.0.0.1.0
# ::edge	replace-01	ARG0	i	0.0	0.0.1
# ::edge	replace-01	ARG1	valve	0.0	0.0.0
# ::edge	valve	mod	pressure	0.0.0	0.0.0.1
# ::edge	valve	mod	this	0.0.0	0.0.0.0
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / replace-01 :ARG1 (MRPNode-2 / valve :mod (MRPNode-3 / this) :mod (MRPNode-4 / pressure :source (MRPNode-5 / water))) :ARG0 (MRPNode-6 / i)) :ARG0 MRPNode-6 :ARG0 (MRPNode-7 / amr-unknown))

# ::id 66
# ::snt Is my cat's aggressive behavior playful or mean, and how do I stop it?
# ::tok Is my cat 's aggressive behavior playful or mean , and how do I stop it ?
# ::alignments 2-3|0.0.2.1 4-5|0.0.2.0 5-6|0.0.2 6-7|0.0.0 7-8|0.0 8-9|0.0.1 10-11|0 11-12|0.1.1 13-14|0.1.0 14-15|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.818436 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	and	10-11
# ::node	0.0	or	7-8
# ::node	0.0.0	playful	6-7
# ::node	0.0.1	mean-04	8-9
# ::node	0.0.2	behave-01	5-6
# ::node	0.0.2.0	aggressive	4-5
# ::node	0.0.2.1	cat	2-3
# ::node	0.1	stop-01	14-15
# ::node	0.1.0	i	13-14
# ::node	0.1.1	amr-unknown	11-12
# ::root	0	and
# ::edge	and	op1	or	0	0.0
# ::edge	and	op2	stop-01	0	0.1
# ::edge	behave-01	ARG0	aggressive	0.0.2	0.0.2.0
# ::edge	behave-01	ARG0	cat	0.0.2	0.0.2.1
# ::edge	or	domain	behave-01	0.0	0.0.2
# ::edge	or	op1	playful	0.0	0.0.0
# ::edge	or	op2	mean-04	0.0	0.0.1
# ::edge	stop-01	ARG0	i	0.1	0.1.0
# ::edge	stop-01	manner	amr-unknown	0.1	0.1.1
(MRPNode-0 / and :op1 (MRPNode-1 / or :op1 (MRPNode-2 / playful) :op2 (MRPNode-3 / mean-04) :domain (MRPNode-4 / behave-01 :ARG0 (MRPNode-5 / aggressive) :ARG0 (MRPNode-6 / cat))) :op2 (MRPNode-7 / stop-01 :ARG0 (MRPNode-8 / i) :manner (MRPNode-9 / amr-unknown)))

# ::id 67
# ::snt Which reward/benefits card is the best value for money in Australia?
# ::tok Which reward / benefits card is the best value for money in Australia ?
# ::alignments 1-2|0.0.0 2-3|0.0 3-4|0.0.1 7-8|0.1 8-9|0 10-11|0.3 12-13|0.2.1+0.2.1.0+0.2.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.825888 ::parser eager_oracle ::smatch 0.7804878048780487 ::n_actions 36
# ::node	0	value-01	8-9
# ::node	0.0	slash	2-3
# ::node	0.0.0	reward-01	1-2
# ::node	0.0.1	benefit	3-4
# ::node	0.1	good-02	7-8
# ::node	0.2	have-degree-91	
# ::node	0.2.0	most	
# ::node	0.2.1	country	12-13
# ::node	0.2.1.0	name	12-13
# ::node	0.2.1.0.0	australia	12-13
# ::node	0.3	money	10-11
# ::node	0.4	amr-unknown	
# ::root	0	value-01
# ::edge	country	name	name	0.2.1	0.2.1.0
# ::edge	have-degree-91	ARG2	good-02	0.2	0.1
# ::edge	have-degree-91	ARG3	most	0.2	0.2.0
# ::edge	have-degree-91	ARG5	country	0.2	0.2.1
# ::edge	name	op1	australia	0.2.1.0	0.2.1.0.0
# ::edge	slash	op1	reward-01	0.0	0.0.0
# ::edge	slash	op2	benefit	0.0	0.0.1
# ::edge	value-01	ARG1	slash	0	0.0
# ::edge	value-01	ARG1-of	have-degree-91	0	0.2
# ::edge	value-01	ARG2	amr-unknown	0	0.4
# ::edge	value-01	ARG2	good-02	0	0.1
# ::edge	value-01	ARG2	money	0	0.3
(MRPNode-0 / value-01 :ARG1 (MRPNode-1 / slash :op1 (MRPNode-2 / reward-01) :op2 (MRPNode-3 / benefit)) :ARG2 (MRPNode-4 / good-02) :ARG1-of (MRPNode-5 / have-degree-91 :ARG2 MRPNode-4 :ARG3 (MRPNode-6 / most) :ARG5 (MRPNode-7 / country :name (MRPNode-8 / name :op1 australia))) :ARG2 (MRPNode-9 / money) :ARG2 (MRPNode-10 / amr-unknown))

# ::id 68
# ::snt What is this technique called?
# ::tok What is this technique called ?
# ::alignments 0-1|0.1 2-3|0.0.0 3-4|0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.827755 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	call-01	4-5
# ::node	0.0	technique	3-4
# ::node	0.0.0	this	2-3
# ::node	0.1	amr-unknown	0-1
# ::root	0	call-01
# ::edge	call-01	ARG1	technique	0	0.0
# ::edge	call-01	ARG2	amr-unknown	0	0.1
# ::edge	technique	mod	this	0.0	0.0.0
(MRPNode-0 / call-01 :ARG1 (MRPNode-1 / technique :mod (MRPNode-2 / this)) :ARG2 (MRPNode-3 / amr-unknown))

# ::id 69
# ::snt What is the significance of the missing elevator car?
# ::tok What is the significance of the missing elevator car ?
# ::alignments 0-1|0.1 3-4|0 6-7|0.0.0 7-8|0.0.1 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.830716 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	significant-02	3-4
# ::node	0.0	car	8-9
# ::node	0.0.0	miss-01	6-7
# ::node	0.0.1	elevator	7-8
# ::node	0.1	amr-unknown	0-1
# ::root	0	significant-02
# ::edge	car	ARG1-of	miss-01	0.0	0.0.0
# ::edge	car	mod	elevator	0.0	0.0.1
# ::edge	significant-02	ARG1	car	0	0.0
# ::edge	significant-02	ARG3	amr-unknown	0	0.1
(MRPNode-0 / significant-02 :ARG1 (MRPNode-1 / car :ARG1-of (MRPNode-2 / miss-01) :mod (MRPNode-3 / elevator)) :ARG3 (MRPNode-4 / amr-unknown))

# ::id 70
# ::snt What is the optimal length of time for pulling a shot of espresso?
# ::tok What is the optimal length of time for pulling a shot of espresso ?
# ::alignments 0-1|0.1 3-4|0.0 6-7|0 8-9|0.2 10-11|0.2.0 12-13|0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.835348 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	time	6-7
# ::node	0.0	optimal	3-4
# ::node	0.1	amr-unknown	0-1
# ::node	0.2	pull-01	8-9
# ::node	0.2.0	shoot-01	10-11
# ::node	0.2.0.0	espresso	12-13
# ::root	0	time
# ::edge	pull-01	ARG1	shoot-01	0.2	0.2.0
# ::edge	shoot-01	ARG1	espresso	0.2.0	0.2.0.0
# ::edge	time	domain	amr-unknown	0	0.1
# ::edge	time	mod	optimal	0	0.0
# ::edge	time	time-of	pull-01	0	0.2
(MRPNode-0 / time :mod (MRPNode-1 / optimal) :domain (MRPNode-2 / amr-unknown) :time-of (MRPNode-3 / pull-01 :ARG1 (MRPNode-4 / shoot-01 :ARG1 (MRPNode-5 / espresso))))

# ::id 71
# ::snt How can I get rid of fleas in my crawlspace forever?
# ::tok How can I get rid of fleas in my crawlspace forever ?
# ::alignments 0-1|0.0.4 1-2|0 2-3|0.0.1 4-5|0.0 6-7|0.0.0 9-10|0.0.2 10-11|0.0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:24.841188 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	possible-01	1-2
# ::node	0.0	rid-01	4-5
# ::node	0.0.0	flea	6-7
# ::node	0.0.1	i	2-3
# ::node	0.0.2	crawlspace	9-10
# ::node	0.0.3	forever	10-11
# ::node	0.0.4	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	possible-01	ARG1	rid-01	0	0.0
# ::edge	rid-01	ARG0	i	0.0	0.0.1
# ::edge	rid-01	ARG1	flea	0.0	0.0.0
# ::edge	rid-01	duration	forever	0.0	0.0.3
# ::edge	rid-01	location	crawlspace	0.0	0.0.2
# ::edge	rid-01	manner	amr-unknown	0.0	0.0.4
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / rid-01 :ARG1 (MRPNode-2 / flea) :ARG0 (MRPNode-3 / i) :location (MRPNode-4 / crawlspace) :duration (MRPNode-5 / forever) :manner (MRPNode-6 / amr-unknown)))

# ::id 72
# ::snt Should I write my biography in the first or third person?
# ::tok Should I write my biography in the first or third person ?
# ::alignments 0-1|0 2-3|0.0 3-4|0.0.0.0 4-5|0.0.0 7-8|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 8-9|0.0.1 9-10|0.0.1.1.0+0.0.1.1.0.0 10-11|0.0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.861064 ::parser eager_oracle ::smatch 0.9545454545454545 ::n_actions 51
# ::node	0	recommend-01	0-1
# ::node	0.0	write-01	2-3
# ::node	0.0.0	biography	4-5
# ::node	0.0.0.0	i	3-4
# ::node	0.0.1	or	8-9
# ::node	0.0.1.0	person	7-8
# ::node	0.0.1.0.0	ordinal-entity	7-8
# ::node	0.0.1.0.0.0	1	7-8
# ::node	0.0.1.1	person	10-11
# ::node	0.0.1.1.0	ordinal-entity	9-10
# ::node	0.0.1.1.0.0	3	9-10
# ::node	0.1	amr-unknown	
# ::root	0	recommend-01
# ::edge	biography	poss	i	0.0.0	0.0.0.0
# ::edge	or	op1	person	0.0.1	0.0.1.0
# ::edge	or	op2	person	0.0.1	0.0.1.1
# ::edge	ordinal-entity	value	1	0.0.1.0.0	0.0.1.0.0.0
# ::edge	ordinal-entity	value	3	0.0.1.1.0	0.0.1.1.0.0
# ::edge	person	ord	ordinal-entity	0.0.1.0	0.0.1.0.0
# ::edge	person	ord	ordinal-entity	0.0.1.1	0.0.1.1.0
# ::edge	recommend-01	ARG1	write-01	0	0.0
# ::edge	recommend-01	ARG2	amr-unknown	0	0.1
# ::edge	write-01	ARG0	i	0.0	0.0.0.0
# ::edge	write-01	ARG1	biography	0.0	0.0.0
# ::edge	write-01	manner	or	0.0	0.0.1
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / write-01 :ARG1 (MRPNode-2 / biography :poss (MRPNode-3 / i)) :ARG0 MRPNode-3 :manner (MRPNode-4 / or :op1 (MRPNode-5 / person :ord (MRPNode-6 / ordinal-entity :value 1)) :op2 (MRPNode-7 / person :ord (MRPNode-8 / ordinal-entity :value 3)))) :ARG2 (MRPNode-9 / amr-unknown))

# ::id 73
# ::snt How can I tell if a journal is reputable?
# ::tok How can I tell if a journal is reputable ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.1 3-4|0.0 6-7|0.0.0.0 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.865242 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	possible-01	1-2
# ::node	0.0	tell-01	3-4
# ::node	0.0.0	repute-01	8-9
# ::node	0.0.0.0	journal	6-7
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	possible-01	ARG1	tell-01	0	0.0
# ::edge	repute-01	ARG1	journal	0.0.0	0.0.0.0
# ::edge	tell-01	ARG0	i	0.0	0.0.1
# ::edge	tell-01	ARG1	repute-01	0.0	0.0.0
# ::edge	tell-01	manner	amr-unknown	0.0	0.0.2
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / tell-01 :ARG1 (MRPNode-2 / repute-01 :ARG1 (MRPNode-3 / journal)) :ARG0 (MRPNode-4 / i) :manner (MRPNode-5 / amr-unknown)))

# ::id 74
# ::snt How can I safely re-heat a chicken pie without burning the crust?
# ::tok How can I safely re - heat a chicken pie without burning the crust ?
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1 3-4|0.0.2 6-7|0.0 8-9|0.0.0.0 9-10|0.0.0 10-11|0.0.3.0 11-12|0.0.3 13-14|0.0.3.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.876289 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	possible-01	1-2
# ::node	0.0	heat-01	6-7
# ::node	0.0.0	pie	9-10
# ::node	0.0.0.0	chicken	8-9
# ::node	0.0.1	i	2-3
# ::node	0.0.2	safe-01	3-4
# ::node	0.0.3	burn-01	11-12
# ::node	0.0.3.0	-	10-11
# ::node	0.0.3.1	crust	13-14
# ::node	0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	burn-01	ARG0	i	0.0.3	0.0.1
# ::edge	burn-01	ARG1	crust	0.0.3	0.0.3.1
# ::edge	burn-01	polarity	-	0.0.3	0.0.3.0
# ::edge	heat-01	ARG0	i	0.0	0.0.1
# ::edge	heat-01	ARG1	pie	0.0	0.0.0
# ::edge	heat-01	manner	burn-01	0.0	0.0.3
# ::edge	heat-01	manner	safe-01	0.0	0.0.2
# ::edge	pie	mod	chicken	0.0.0	0.0.0.0
# ::edge	possible-01	ARG1	heat-01	0	0.0
# ::edge	possible-01	manner	amr-unknown	0	0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / heat-01 :ARG1 (MRPNode-2 / pie :mod (MRPNode-3 / chicken)) :ARG0 (MRPNode-4 / i) :manner (MRPNode-5 / safe-01) :manner (MRPNode-6 / burn-01 :polarity - :ARG0 MRPNode-4 :ARG1 (MRPNode-7 / crust))) :manner (MRPNode-8 / amr-unknown))

# ::id 75
# ::snt How to replace recessed halogen light from an eyeball fixture?
# ::tok How to replace recessed halogen light from an eyeball fixture ?
# ::alignments 0-1|0 2-3|0.0 4-5|0.0.0.0 5-6|0.0.0 8-9|0.0.1.0 9-10|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.880765 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 31
# ::node	0	amr-unknown	0-1
# ::node	0.0	replace-01	2-3
# ::node	0.0.0	light	5-6
# ::node	0.0.0.0	halogen	4-5
# ::node	0.0.0.1	separate-01	
# ::node	0.0.1	fixture	9-10
# ::node	0.0.1.0	eyeball	8-9
# ::root	0	amr-unknown
# ::edge	amr-unknown	manner-of	replace-01	0	0.0
# ::edge	fixture	mod	eyeball	0.0.1	0.0.1.0
# ::edge	light	ARG1-of	separate-01	0.0.0	0.0.0.1
# ::edge	light	mod	halogen	0.0.0	0.0.0.0
# ::edge	replace-01	ARG1	light	0.0	0.0.0
# ::edge	replace-01	ARG2	fixture	0.0	0.0.1
(MRPNode-0 / amr-unknown :manner-of (MRPNode-1 / replace-01 :ARG1 (MRPNode-2 / light :mod (MRPNode-3 / halogen) :ARG1-of (MRPNode-4 / separate-01)) :ARG2 (MRPNode-5 / fixture :mod (MRPNode-6 / eyeball))))

# ::id 76
# ::snt Is it appropriate as a referee to contact an author after the editor rejected the manuscript?
# ::tok Is it appropriate as a referee to contact an author after the editor rejected the manuscript ?
# ::alignments 2-3|0 5-6|0.0.0+0.0.0.0+0.0.0.0.0 7-8|0.0 9-10|0.0.1+0.0.1.0 10-11|0.0.2 12-13|0.0.2.0.1 13-14|0.0.2.0 15-16|0.0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.897362 ::parser eager_oracle ::smatch 0.9565217391304348 ::n_actions 55
# ::node	0	appropriate-02	2-3
# ::node	0.0	contact-01	7-8
# ::node	0.0.0	person	5-6
# ::node	0.0.0.0	have-org-role-91	5-6
# ::node	0.0.0.0.0	referee	5-6
# ::node	0.0.1	person	9-10
# ::node	0.0.1.0	author-01	9-10
# ::node	0.0.2	after	10-11
# ::node	0.0.2.0	reject-01	13-14
# ::node	0.0.2.0.0	manuscript	15-16
# ::node	0.0.2.0.1	editor	12-13
# ::node	0.1	amr-unknown	
# ::root	0	appropriate-02
# ::edge	after	op1	reject-01	0.0.2	0.0.2.0
# ::edge	appropriate-02	ARG1	contact-01	0	0.0
# ::edge	appropriate-02	ARG2	amr-unknown	0	0.1
# ::edge	contact-01	ARG1	person	0.0	0.0.0
# ::edge	contact-01	time	after	0.0	0.0.2
# ::edge	contact-01	time	person	0.0	0.0.1
# ::edge	have-org-role-91	ARG2	referee	0.0.0.0	0.0.0.0.0
# ::edge	person	ARG0-of	author-01	0.0.1	0.0.1.0
# ::edge	person	ARG0-of	have-org-role-91	0.0.0	0.0.0.0
# ::edge	reject-01	ARG0	editor	0.0.2.0	0.0.2.0.1
# ::edge	reject-01	ARG1	manuscript	0.0.2.0	0.0.2.0.0
(MRPNode-0 / appropriate-02 :ARG1 (MRPNode-1 / contact-01 :ARG1 (MRPNode-2 / person :ARG0-of (MRPNode-3 / have-org-role-91 :ARG2 (MRPNode-4 / referee))) :time (MRPNode-5 / person :ARG0-of (MRPNode-6 / author-01)) :time (MRPNode-7 / after :op1 (MRPNode-8 / reject-01 :ARG1 (MRPNode-9 / manuscript) :ARG0 (MRPNode-10 / editor)))) :ARG2 (MRPNode-11 / amr-unknown))

# ::id 77
# ::snt What is a good guitar solo to learn in the minor scale?
# ::tok What is a good guitar solo to learn in the minor scale ?
# ::alignments 0-1|0.1 3-4|0.0.1 4-5|0.0.0 5-6|0.0 7-8|0 10-11|0.0.2.0 11-12|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:24.902511 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	learn-01	7-8
# ::node	0.0	solo	5-6
# ::node	0.0.0	guitar	4-5
# ::node	0.0.1	good-02	3-4
# ::node	0.0.2	scale	11-12
# ::node	0.0.2.0	minor-01	10-11
# ::node	0.1	amr-unknown	0-1
# ::root	0	learn-01
# ::edge	learn-01	ARG1	solo	0	0.0
# ::edge	learn-01	location	amr-unknown	0	0.1
# ::edge	scale	ARG1-of	minor-01	0.0.2	0.0.2.0
# ::edge	solo	ARG1-of	good-02	0.0	0.0.1
# ::edge	solo	location	scale	0.0	0.0.2
# ::edge	solo	mod	guitar	0.0	0.0.0
(MRPNode-0 / learn-01 :ARG1 (MRPNode-1 / solo :mod (MRPNode-2 / guitar) :ARG1-of (MRPNode-3 / good-02) :location (MRPNode-4 / scale :ARG1-of (MRPNode-5 / minor-01))) :location (MRPNode-6 / amr-unknown))

# ::id 78
# ::snt How do I get rid of fleas on my rabbit?
# ::tok How do I get rid of fleas on my rabbit ?
# ::alignments 0-1|0.1 4-5|0 6-7|0.0 8-9|0.0.0.0 9-10|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.906291 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	rid-01	4-5
# ::node	0.0	flea	6-7
# ::node	0.0.0	rabbit	9-10
# ::node	0.0.0.0	i	8-9
# ::node	0.1	amr-unknown	0-1
# ::root	0	rid-01
# ::edge	flea	location	rabbit	0.0	0.0.0
# ::edge	rabbit	poss	i	0.0.0	0.0.0.0
# ::edge	rid-01	ARG0	i	0	0.0.0.0
# ::edge	rid-01	ARG1	flea	0	0.0
# ::edge	rid-01	manner	amr-unknown	0	0.1
(MRPNode-0 / rid-01 :ARG1 (MRPNode-1 / flea :location (MRPNode-2 / rabbit :poss (MRPNode-3 / i))) :ARG0 MRPNode-3 :manner (MRPNode-4 / amr-unknown))

# ::id 79
# ::snt How can I add a GFCI breaker on two circuits with a shared neutral without rewiring?
# ::tok How can I add a GFCI breaker on two circuits with a shared neutral without rewiring ?
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 6-7|0.0.0 8-9|0.0.2.0 9-10|0.0.2 12-13|0.0.0.0.1.0 13-14|0.0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.918580 ::parser eager_oracle ::smatch 0.8936170212765958 ::n_actions 48
# ::node	0	possible-01	1-2
# ::node	0.0	add-02	3-4
# ::node	0.0.0	break-01	6-7
# ::node	0.0.0.0	verify-01	
# ::node	0.0.0.0.0	-	
# ::node	0.0.0.0.1	neutral-02	13-14
# ::node	0.0.0.0.1.0	share-01	12-13
# ::node	0.0.0.1	product	5-6
# ::node	0.0.0.1.0	name	5-6
# ::node	0.0.0.1.0.0	gfci	5-6
# ::node	0.0.1	i	2-3
# ::node	0.0.2	circuit	9-10
# ::node	0.0.2.0	2	8-9
# ::node	0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	add-02	ARG0	i	0.0	0.0.1
# ::edge	add-02	ARG1	break-01	0.0	0.0.0
# ::edge	add-02	ARG2	circuit	0.0	0.0.2
# ::edge	break-01	ARG1	product	0.0.0	0.0.0.1
# ::edge	break-01	ARG1	verify-01	0.0.0	0.0.0.0
# ::edge	circuit	quant	2	0.0.2	0.0.2.0
# ::edge	name	op1	gfci	0.0.0.1.0	0.0.0.1.0.0
# ::edge	neutral-02	ARG1-of	share-01	0.0.0.0.1	0.0.0.0.1.0
# ::edge	possible-01	ARG1	add-02	0	0.0
# ::edge	possible-01	manner	amr-unknown	0	0.1
# ::edge	product	name	name	0.0.0.1	0.0.0.1.0
# ::edge	verify-01	ARG1	neutral-02	0.0.0.0	0.0.0.0.1
# ::edge	verify-01	polarity	-	0.0.0.0	0.0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / add-02 :ARG1 (MRPNode-2 / break-01 :ARG1 (MRPNode-3 / verify-01 :polarity - :ARG1 (MRPNode-4 / neutral-02 :ARG1-of (MRPNode-5 / share-01))) :ARG1 (MRPNode-6 / product :name (MRPNode-7 / name :op1 gfci))) :ARG0 (MRPNode-8 / i) :ARG2 (MRPNode-9 / circuit :quant 2)) :manner (MRPNode-10 / amr-unknown))

# ::id 80
# ::snt Will paying off a credit card early affect my credit score?
# ::tok Will paying off a credit card early affect my credit score ?
# ::alignments 4-5|0.1.2.0 5-6|0.1.2 6-7|0.1.1 7-8|0 8-9|0.1.0 9-10|0.0.0 10-11|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.926638 ::parser eager_oracle ::smatch 0.6428571428571429 ::n_actions 32
# ::node	0	affect-01	7-8
# ::node	0.0	score	10-11
# ::node	0.0.0	credit-01	9-10
# ::node	0.1	pay-off-02	
# ::node	0.1.0	i	8-9
# ::node	0.1.1	early	6-7
# ::node	0.1.2	card	5-6
# ::node	0.1.2.0	credit	4-5
# ::node	0.2	amr-unknown	
# ::root	0	affect-01
# ::edge	affect-01	ARG0	pay-off-02	0	0.1
# ::edge	affect-01	ARG1	score	0	0.0
# ::edge	affect-01	ARG2	amr-unknown	0	0.2
# ::edge	card	mod	credit	0.1.2	0.1.2.0
# ::edge	pay-off-02	ARG0	i	0.1	0.1.0
# ::edge	pay-off-02	ARG1	card	0.1	0.1.2
# ::edge	pay-off-02	time	early	0.1	0.1.1
# ::edge	score	mod	credit-01	0.0	0.0.0
(MRPNode-0 / affect-01 :ARG1 (MRPNode-1 / score :mod (MRPNode-2 / credit-01)) :ARG0 (MRPNode-3 / pay-off-02 :ARG0 (MRPNode-4 / i) :time (MRPNode-5 / early) :ARG1 (MRPNode-6 / card :mod (MRPNode-7 / credit))) :ARG2 (MRPNode-8 / amr-unknown))

# ::id 81
# ::snt How should a PhD student approach a collaboration?
# ::tok How should a PhD student approach a collaboration ?
# ::alignments 0-1|0.0.2 1-2|0 4-5|0.0.0+0.0.0.0 5-6|0.0 7-8|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.931164 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 31
# ::node	0	recommend-01	1-2
# ::node	0.0	approach-02	5-6
# ::node	0.0.0	person	4-5
# ::node	0.0.0.0	study-01	4-5
# ::node	0.0.0.0.0	philosophy	
# ::node	0.0.1	collaborate-01	7-8
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	recommend-01
# ::edge	approach-02	ARG1	collaborate-01	0.0	0.0.1
# ::edge	approach-02	ARG1	person	0.0	0.0.0
# ::edge	approach-02	manner	amr-unknown	0.0	0.0.2
# ::edge	person	ARG0-of	study-01	0.0.0	0.0.0.0
# ::edge	recommend-01	ARG1	approach-02	0	0.0
# ::edge	study-01	location	philosophy	0.0.0.0	0.0.0.0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / approach-02 :ARG1 (MRPNode-2 / person :ARG0-of (MRPNode-3 / study-01 :location (MRPNode-4 / philosophy))) :ARG1 (MRPNode-5 / collaborate-01) :manner (MRPNode-6 / amr-unknown)))

# ::id 82
# ::snt How can I replace my light fixture with a ceiling fan?
# ::tok How can I replace my light fixture with a ceiling fan ?
# ::alignments 0-1|0.0.2 1-2|0 3-4|0.0 4-5|0.0.0.1 5-6|0.0.0.0 6-7|0.0.0 9-10|0.0.1.0 10-11|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:24.938454 ::parser eager_oracle ::smatch 1.0 ::n_actions 40
# ::node	0	possible-01	1-2
# ::node	0.0	replace-01	3-4
# ::node	0.0.0	fixture	6-7
# ::node	0.0.0.0	light	5-6
# ::node	0.0.0.1	i	4-5
# ::node	0.0.1	fan	10-11
# ::node	0.0.1.0	ceiling	9-10
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	fan	mod	ceiling	0.0.1	0.0.1.0
# ::edge	fixture	mod	light	0.0.0	0.0.0.0
# ::edge	fixture	poss	i	0.0.0	0.0.0.1
# ::edge	possible-01	ARG1	replace-01	0	0.0
# ::edge	replace-01	ARG0	i	0.0	0.0.0.1
# ::edge	replace-01	ARG1	fixture	0.0	0.0.0
# ::edge	replace-01	ARG2	fan	0.0	0.0.1
# ::edge	replace-01	manner	amr-unknown	0.0	0.0.2
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / replace-01 :ARG1 (MRPNode-2 / fixture :mod (MRPNode-3 / light) :poss (MRPNode-4 / i)) :ARG0 MRPNode-4 :ARG2 (MRPNode-5 / fan :mod (MRPNode-6 / ceiling)) :manner (MRPNode-7 / amr-unknown)))

# ::id 83
# ::snt How do I maintain a good relationship with an employer after resigning?
# ::tok How do I maintain a good relationship with an employer after resigning ?
# ::alignments 0-1|0.2 2-3|0.0.2 3-4|0 5-6|0.0.1 6-7|0.0 9-10|0.0.0+0.0.0.0 10-11|0.1 11-12|0.0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.945450 ::parser eager_oracle ::smatch 1.0 ::n_actions 48
# ::node	0	maintain-01	3-4
# ::node	0.0	relation-03	6-7
# ::node	0.0.0	person	9-10
# ::node	0.0.0.0	employ-01	9-10
# ::node	0.0.1	good-02	5-6
# ::node	0.0.2	i	2-3
# ::node	0.0.2.0	resign-01	11-12
# ::node	0.1	after	10-11
# ::node	0.2	amr-unknown	0-1
# ::root	0	maintain-01
# ::edge	after	op1	resign-01	0.1	0.0.2.0
# ::edge	i	ARG0-of	resign-01	0.0.2	0.0.2.0
# ::edge	maintain-01	ARG0	i	0	0.0.2
# ::edge	maintain-01	ARG1	relation-03	0	0.0
# ::edge	maintain-01	manner	amr-unknown	0	0.2
# ::edge	maintain-01	time	after	0	0.1
# ::edge	person	ARG0-of	employ-01	0.0.0	0.0.0.0
# ::edge	relation-03	ARG0	i	0.0	0.0.2
# ::edge	relation-03	ARG1-of	good-02	0.0	0.0.1
# ::edge	relation-03	ARG1-of	person	0.0	0.0.0
(MRPNode-0 / maintain-01 :ARG1 (MRPNode-1 / relation-03 :ARG1-of (MRPNode-2 / person :ARG0-of (MRPNode-3 / employ-01)) :ARG1-of (MRPNode-4 / good-02) :ARG0 (MRPNode-5 / i :ARG0-of (MRPNode-6 / resign-01))) :ARG0 MRPNode-5 :time (MRPNode-7 / after :op1 MRPNode-6) :manner (MRPNode-8 / amr-unknown))

# ::id 84
# ::snt What should I ask as an applicant in a job interview?
# ::tok What should I ask as an applicant in a job interview ?
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.0.1 3-4|0.0 6-7|0.0.2+0.0.2.1 9-10|0.0.2.0.0 11-12|0.0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:24.952898 ::parser eager_oracle ::smatch 1.0 ::n_actions 40
# ::node	0	recommend-01	1-2
# ::node	0.0	ask-01	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	i	2-3
# ::node	0.0.2	person	6-7
# ::node	0.0.2.0	interview-01	11-12
# ::node	0.0.2.0.0	job	9-10
# ::node	0.0.2.1	apply-01	6-7
# ::root	0	recommend-01
# ::edge	ask-01	ARG0	i	0.0	0.0.1
# ::edge	ask-01	ARG1	amr-unknown	0.0	0.0.0
# ::edge	ask-01	ARG2	person	0.0	0.0.2
# ::edge	interview-01	ARG2	job	0.0.2.0	0.0.2.0.0
# ::edge	person	ARG0-of	apply-01	0.0.2	0.0.2.1
# ::edge	person	ARG1-of	interview-01	0.0.2	0.0.2.0
# ::edge	recommend-01	ARG1	ask-01	0	0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / ask-01 :ARG1 (MRPNode-2 / amr-unknown) :ARG0 (MRPNode-3 / i) :ARG2 (MRPNode-4 / person :ARG1-of (MRPNode-5 / interview-01 :ARG2 (MRPNode-6 / job)) :ARG0-of (MRPNode-7 / apply-01))))

# ::id 85
# ::snt UK income tax & charitable donations: How much is income tax reduced by donations?
# ::tok UK income tax & charitable donations : How much is income tax reduced by donations ?
# ::alignments 0-1|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 1-2|0.0.0.0 2-3|0.0.0 4-5|0.0.1.0 5-6|0.0.1 7-8|0.1.0 10-11|0.1.1.0 11-12|0.1.1 12-13|0.1 14-15|0.1.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:33.653021 ::parser eager_oracle ::smatch 0.7999999999999999 ::n_actions 48
# ::node	0	multi-sentence	
# ::node	0.0	and	
# ::node	0.0.0	tax-01	2-3
# ::node	0.0.0.0	income	1-2
# ::node	0.0.0.1	country	0-1
# ::node	0.0.0.1.0	name	0-1
# ::node	0.0.0.1.0.0	uk	0-1
# ::node	0.0.1	donate-01	5-6
# ::node	0.0.1.0	charitable	4-5
# ::node	0.1	reduce-01	12-13
# ::node	0.1.0	amr-unknown	7-8
# ::node	0.1.1	tax-01	11-12
# ::node	0.1.1.0	income	10-11
# ::node	0.1.1.1	donate-01	14-15
# ::root	0	multi-sentence
# ::edge	and	op1	tax-01	0.0	0.0.0
# ::edge	and	op2	donate-01	0.0	0.0.1
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	donate-01	mod	charitable	0.0.1	0.0.1.0
# ::edge	multi-sentence	snt1	and	0	0.0
# ::edge	multi-sentence	snt2	reduce-01	0	0.1
# ::edge	name	op1	uk	0.0.0.1.0	0.0.0.1.0.0
# ::edge	reduce-01	ARG1	amr-unknown	0.1	0.1.0
# ::edge	reduce-01	ARG3	tax-01	0.1	0.1.1
# ::edge	tax-01	ARG2	country	0.0.0	0.0.0.1
# ::edge	tax-01	ARG2	donate-01	0.1.1	0.1.1.1
# ::edge	tax-01	ARG2	income	0.1.1	0.1.1.0
# ::edge	tax-01	ARG3	income	0.0.0	0.0.0.0
(MRPNode-0 / multi-sentence :snt1 (MRPNode-1 / and :op1 (MRPNode-2 / tax-01 :ARG3 (MRPNode-3 / income) :ARG2 (MRPNode-4 / country :name (MRPNode-5 / name :op1 uk))) :op2 (MRPNode-6 / donate-01 :mod (MRPNode-7 / charitable))) :snt2 (MRPNode-8 / reduce-01 :ARG1 (MRPNode-9 / amr-unknown) :ARG3 (MRPNode-10 / tax-01 :ARG2 (MRPNode-11 / income) :ARG2 (MRPNode-12 / donate-01))))

# ::id 86
# ::snt How can I connect additional wires to a receptacle?
# ::tok How can I connect additional wires to a receptacle ?
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.0.2 3-4|0.0 4-5|0.0.1.0 5-6|0.0.1 8-9|0.0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:33.657828 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	possible-01	1-2
# ::node	0.0	connect-01	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	wire	5-6
# ::node	0.0.1.0	additional	4-5
# ::node	0.0.2	i	2-3
# ::node	0.0.3	receptacle	8-9
# ::root	0	possible-01
# ::edge	connect-01	ARG0	i	0.0	0.0.2
# ::edge	connect-01	ARG1	amr-unknown	0.0	0.0.0
# ::edge	connect-01	ARG1	wire	0.0	0.0.1
# ::edge	connect-01	ARG2	receptacle	0.0	0.0.3
# ::edge	possible-01	ARG1	connect-01	0	0.0
# ::edge	wire	ARG1-of	additional	0.0.1	0.0.1.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / connect-01 :ARG1 (MRPNode-2 / amr-unknown) :ARG1 (MRPNode-3 / wire :ARG1-of (MRPNode-4 / additional)) :ARG0 (MRPNode-5 / i) :ARG2 (MRPNode-6 / receptacle)))

# ::id 87
# ::snt How can I replace the bulb in this ceiling fan?
# ::tok How can I replace the bulb in this ceiling fan ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0 7-8|0.0.0.0.0 8-9|0.0.0.0.1 9-10|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:33.663302 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	possible-01	1-2
# ::node	0.0	replace-01	3-4
# ::node	0.0.0	bulb	5-6
# ::node	0.0.0.0	fan	9-10
# ::node	0.0.0.0.0	this	7-8
# ::node	0.0.0.0.1	ceiling	8-9
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	bulb	location	fan	0.0.0	0.0.0.0
# ::edge	fan	mod	ceiling	0.0.0.0	0.0.0.0.1
# ::edge	fan	mod	this	0.0.0.0	0.0.0.0.0
# ::edge	possible-01	ARG1	replace-01	0	0.0
# ::edge	replace-01	ARG0	i	0.0	0.0.1
# ::edge	replace-01	ARG1	bulb	0.0	0.0.0
# ::edge	replace-01	ARG2	amr-unknown	0.0	0.0.2
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / replace-01 :ARG1 (MRPNode-2 / bulb :location (MRPNode-3 / fan :mod (MRPNode-4 / this) :mod (MRPNode-5 / ceiling))) :ARG0 (MRPNode-6 / i) :ARG2 (MRPNode-7 / amr-unknown)))

# ::id 88
# ::snt Should I replace or patch a plaster ceiling?
# ::tok Should I replace or patch a plaster ceiling ?
# ::alignments 0-1|0 1-2|0.0.0.1 2-3|0.0.0 3-4|0.0 6-7|0.0.0.0.0 7-8|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:33.667841 ::parser eager_oracle ::smatch 0.8 ::n_actions 30
# ::node	0	recommend-01	0-1
# ::node	0.0	or	3-4
# ::node	0.0.0	replace-01	2-3
# ::node	0.0.0.0	ceiling	7-8
# ::node	0.0.0.0.0	plaster	6-7
# ::node	0.0.0.1	i	1-2
# ::node	0.0.1	tweak-01	
# ::node	0.1	amr-unknown	
# ::root	0	recommend-01
# ::edge	ceiling	mod	plaster	0.0.0.0	0.0.0.0.0
# ::edge	or	op1	replace-01	0.0	0.0.0
# ::edge	or	op2	tweak-01	0.0	0.0.1
# ::edge	recommend-01	ARG1	or	0	0.0
# ::edge	recommend-01	ARG2	amr-unknown	0	0.1
# ::edge	replace-01	ARG0	i	0.0.0	0.0.0.1
# ::edge	replace-01	ARG1	ceiling	0.0.0	0.0.0.0
# ::edge	tweak-01	ARG0	i	0.0.1	0.0.0.1
# ::edge	tweak-01	ARG1	ceiling	0.0.1	0.0.0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / or :op1 (MRPNode-2 / replace-01 :ARG1 (MRPNode-3 / ceiling :mod (MRPNode-4 / plaster)) :ARG0 (MRPNode-5 / i)) :op2 (MRPNode-6 / tweak-01 :ARG1 MRPNode-3 :ARG0 MRPNode-5)) :ARG2 (MRPNode-7 / amr-unknown))

# ::id 89
# ::snt What should I do if a professor says she doesn't understand my questions in office hours?
# ::tok What should I do if a professor says she does n't understand my questions in office hours ?
# ::alignments 0-1|0.0.0 1-2|0 6-7|0.1.0.2 7-8|0.1+0.1.0 10-11|0.1.0.0 11-12|0.0 12-13|0.0.1 13-14|0.0.1.0 15-16|0.1.0.1.0 16-17|0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:33.890140 ::parser eager_oracle ::smatch 1.0 ::n_actions 58
# ::node	0	recommend-01	1-2
# ::node	0.0	do-02	11-12
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	i	12-13
# ::node	0.0.1.0	question-01	13-14
# ::node	0.1	say-01	7-8
# ::node	0.1.0	understand-01	7-8
# ::node	0.1.0.0	-	10-11
# ::node	0.1.0.1	hour	16-17
# ::node	0.1.0.1.0	office	15-16
# ::node	0.1.0.2	professor	6-7
# ::root	0	recommend-01
# ::edge	do-02	ARG0	i	0.0	0.0.1
# ::edge	do-02	ARG1	amr-unknown	0.0	0.0.0
# ::edge	hour	mod	office	0.1.0.1	0.1.0.1.0
# ::edge	i	ARG0-of	question-01	0.0.1	0.0.1.0
# ::edge	recommend-01	ARG1	do-02	0	0.0
# ::edge	recommend-01	ARG2	say-01	0	0.1
# ::edge	say-01	ARG0	professor	0.1	0.1.0.2
# ::edge	say-01	ARG1	understand-01	0.1	0.1.0
# ::edge	understand-01	ARG0	professor	0.1.0	0.1.0.2
# ::edge	understand-01	polarity	-	0.1.0	0.1.0.0
# ::edge	understand-01	time	hour	0.1.0	0.1.0.1
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / amr-unknown) :ARG0 (MRPNode-3 / i :ARG0-of (MRPNode-4 / question-01))) :ARG2 (MRPNode-5 / say-01 :ARG1 (MRPNode-6 / understand-01 :polarity - :time (MRPNode-7 / hour :mod (MRPNode-8 / office)) :ARG0 (MRPNode-9 / professor)) :ARG0 MRPNode-9))

# ::id 90
# ::snt How do I stop my dog from barking at people through the fence?
# ::tok How do I stop my dog from barking at people through the fence ?
# ::alignments 0-1|0.2 2-3|0.0.0 3-4|0 5-6|0.0 7-8|0.1 9-10|0.1.0 10-11|0.1.1 12-13|0.1.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:33.897799 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	stop-03	3-4
# ::node	0.0	dog	5-6
# ::node	0.0.0	i	2-3
# ::node	0.1	bark-01	7-8
# ::node	0.1.0	person	9-10
# ::node	0.1.1	through	10-11
# ::node	0.1.1.0	fence	12-13
# ::node	0.2	amr-unknown	0-1
# ::root	0	stop-03
# ::edge	bark-01	ARG0	dog	0.1	0.0
# ::edge	bark-01	ARG2	person	0.1	0.1.0
# ::edge	bark-01	location	through	0.1	0.1.1
# ::edge	dog	poss	i	0.0	0.0.0
# ::edge	stop-03	ARG0	i	0	0.0.0
# ::edge	stop-03	ARG1	dog	0	0.0
# ::edge	stop-03	ARG2	bark-01	0	0.1
# ::edge	stop-03	manner	amr-unknown	0	0.2
# ::edge	through	op1	fence	0.1.1	0.1.1.0
(MRPNode-0 / stop-03 :ARG1 (MRPNode-1 / dog :poss (MRPNode-2 / i)) :ARG0 MRPNode-2 :ARG2 (MRPNode-3 / bark-01 :ARG0 MRPNode-1 :ARG2 (MRPNode-4 / person) :location (MRPNode-5 / through :op1 (MRPNode-6 / fence))) :manner (MRPNode-7 / amr-unknown))

# ::id 91
# ::snt Travelling to Romania on a short stay Schengen visa issued by France?
# ::tok Travelling to Romania on a short stay Schengen visa issued by France ?
# ::alignments 0-1|0 2-3|0.0+0.0.0+0.0.0.0 5-6|0.1.1.0 6-7|0.1.1 7-8|0.1.0.1+0.1.0.1.0+0.1.0.1.0.0 8-9|0.1 9-10|0.1.0 11-12|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:33.914305 ::parser eager_oracle ::smatch 0.9615384615384615 ::n_actions 40
# ::node	0	travel-01	0-1
# ::node	0.0	country	2-3
# ::node	0.0.0	name	2-3
# ::node	0.0.0.0	romania	2-3
# ::node	0.1	visa	8-9
# ::node	0.1.0	issue-01	9-10
# ::node	0.1.0.0	country	11-12
# ::node	0.1.0.0.0	name	11-12
# ::node	0.1.0.0.0.0	france	11-12
# ::node	0.1.0.1	organization	7-8
# ::node	0.1.0.1.0	name	7-8
# ::node	0.1.0.1.0.0	schengen	7-8
# ::node	0.1.1	stay-01	6-7
# ::node	0.1.1.0	short-07	5-6
# ::node	0.2	amr-unknown	
# ::root	0	travel-01
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	issue-01	ARG0	country	0.1.0	0.1.0.0
# ::edge	issue-01	ARG0	organization	0.1.0	0.1.0.1
# ::edge	name	op1	france	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op1	romania	0.0.0	0.0.0.0
# ::edge	name	op1	schengen	0.1.0.1.0	0.1.0.1.0.0
# ::edge	organization	name	name	0.1.0.1	0.1.0.1.0
# ::edge	stay-01	ARG1-of	short-07	0.1.1	0.1.1.0
# ::edge	travel-01	ARG0	amr-unknown	0	0.2
# ::edge	travel-01	ARG0	country	0	0.0
# ::edge	travel-01	ARG0	visa	0	0.1
# ::edge	visa	mod	issue-01	0.1	0.1.0
# ::edge	visa	mod	stay-01	0.1	0.1.1
(MRPNode-0 / travel-01 :ARG0 (MRPNode-1 / country :name (MRPNode-2 / name :op1 romania)) :ARG0 (MRPNode-3 / visa :mod (MRPNode-4 / issue-01 :ARG0 (MRPNode-5 / country :name (MRPNode-6 / name :op1 france)) :ARG0 (MRPNode-7 / organization :name (MRPNode-8 / name :op1 schengen))) :mod (MRPNode-9 / stay-01 :ARG1-of (MRPNode-10 / short-07))) :ARG0 (MRPNode-11 / amr-unknown))

# ::id 92
# ::snt What is the professional way to deal with my manager's boss?
# ::tok What is the professional way to deal with my manager 's boss ?
# ::alignments 0-1|0.1 3-4|0.0 4-5|0 6-7|0.2 8-9|0.2.0.0.2 9-10|0.2.0.0.0+0.2.0.0.0.0 11-12|0.2.0+0.2.0.0+0.2.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:33.922905 ::parser eager_oracle ::smatch 1.0 ::n_actions 50
# ::node	0	way	4-5
# ::node	0.0	professional	3-4
# ::node	0.1	amr-unknown	0-1
# ::node	0.2	deal-01	6-7
# ::node	0.2.0	person	11-12
# ::node	0.2.0.0	have-rel-role-91	11-12
# ::node	0.2.0.0.0	person	9-10
# ::node	0.2.0.0.0.0	manage-01	9-10
# ::node	0.2.0.0.1	boss	11-12
# ::node	0.2.0.0.2	i	8-9
# ::root	0	way
# ::edge	deal-01	ARG1	person	0.2	0.2.0
# ::edge	have-rel-role-91	ARG1	i	0.2.0.0	0.2.0.0.2
# ::edge	have-rel-role-91	ARG1	person	0.2.0.0	0.2.0.0.0
# ::edge	have-rel-role-91	ARG2	boss	0.2.0.0	0.2.0.0.1
# ::edge	person	ARG0-of	have-rel-role-91	0.2.0	0.2.0.0
# ::edge	person	ARG0-of	manage-01	0.2.0.0.0	0.2.0.0.0.0
# ::edge	way	domain	amr-unknown	0	0.1
# ::edge	way	manner-of	deal-01	0	0.2
# ::edge	way	mod	professional	0	0.0
(MRPNode-0 / way :mod (MRPNode-1 / professional) :domain (MRPNode-2 / amr-unknown) :manner-of (MRPNode-3 / deal-01 :ARG1 (MRPNode-4 / person :ARG0-of (MRPNode-5 / have-rel-role-91 :ARG1 (MRPNode-6 / person :ARG0-of (MRPNode-7 / manage-01)) :ARG2 (MRPNode-8 / boss) :ARG1 (MRPNode-9 / i)))))

# ::id 93
# ::snt Why is interest on MMA lower in the US than in Europe?
# ::tok Why is interest on MMA lower in the US than in Europe ?
# ::alignments 2-3|0.0 4-5|0.0.0+0.0.0.0+0.0.0.0.0 5-6|0.1 8-9|0.4.0+0.4.0.0+0.4.0.0.0 11-12|0.4.1+0.4.1.0+0.4.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:33.942371 ::parser eager_oracle ::smatch 0.608695652173913 ::n_actions 27
# ::node	0	have-degree-91	
# ::node	0.0	interest-01	2-3
# ::node	0.0.0	organization	4-5
# ::node	0.0.0.0	name	4-5
# ::node	0.0.0.0.0	mma	4-5
# ::node	0.1	low-04	5-6
# ::node	0.2	cause-01	
# ::node	0.2.0	amr-unknown	
# ::node	0.3	more	
# ::node	0.4	interest-01	
# ::node	0.4.0	country	8-9
# ::node	0.4.0.0	name	8-9
# ::node	0.4.0.0.0	us	8-9
# ::node	0.4.1	continent	11-12
# ::node	0.4.1.0	name	11-12
# ::node	0.4.1.0.0	europe	11-12
# ::root	0	have-degree-91
# ::edge	cause-01	ARG0	amr-unknown	0.2	0.2.0
# ::edge	continent	name	name	0.4.1	0.4.1.0
# ::edge	country	name	name	0.4.0	0.4.0.0
# ::edge	have-degree-91	ARG1	interest-01	0	0.0
# ::edge	have-degree-91	ARG2	low-04	0	0.1
# ::edge	have-degree-91	ARG3	cause-01	0	0.2
# ::edge	have-degree-91	ARG3	more	0	0.3
# ::edge	have-degree-91	ARG4	interest-01	0	0.4
# ::edge	interest-01	ARG2	organization	0.0	0.0.0
# ::edge	interest-01	location	continent	0.4	0.4.1
# ::edge	interest-01	location	country	0.4	0.4.0
# ::edge	name	op1	europe	0.4.1.0	0.4.1.0.0
# ::edge	name	op1	mma	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	us	0.4.0.0	0.4.0.0.0
# ::edge	organization	name	name	0.0.0	0.0.0.0
(MRPNode-0 / have-degree-91 :ARG1 (MRPNode-1 / interest-01 :ARG2 (MRPNode-2 / organization :name (MRPNode-3 / name :op1 mma))) :ARG2 (MRPNode-4 / low-04) :ARG3 (MRPNode-5 / cause-01 :ARG0 (MRPNode-6 / amr-unknown)) :ARG3 (MRPNode-7 / more) :ARG4 (MRPNode-8 / interest-01 :location (MRPNode-9 / country :name (MRPNode-10 / name :op1 us)) :location (MRPNode-11 / continent :name (MRPNode-12 / name :op1 europe))))

# ::id 94
# ::snt What is the significance of the abstract painting?
# ::tok What is the significance of the abstract painting ?
# ::alignments 0-1|0.1 3-4|0 6-7|0.0.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:33.945190 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	significant-02	3-4
# ::node	0.0	paint-02	7-8
# ::node	0.0.0	abstract	6-7
# ::node	0.1	amr-unknown	0-1
# ::root	0	significant-02
# ::edge	paint-02	mod	abstract	0.0	0.0.0
# ::edge	significant-02	ARG1	amr-unknown	0	0.1
# ::edge	significant-02	ARG1	paint-02	0	0.0
(MRPNode-0 / significant-02 :ARG1 (MRPNode-1 / paint-02 :mod (MRPNode-2 / abstract)) :ARG1 (MRPNode-3 / amr-unknown))

# ::id 95
# ::snt What could be causing water to back up into my bathroom basin?
# ::tok What could be causing water to back up into my bathroom basin ?
# ::alignments 0-1|0.0 1-2|0 3-4|0.0.0 4-5|0.0.0.0.0 9-10|0.0.0.0.1.0.0 10-11|0.0.0.0.1.0 11-12|0.0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:33.951421 ::parser eager_oracle ::smatch 0.7857142857142857 ::n_actions 35
# ::node	0	possible-01	1-2
# ::node	0.0	amr-unknown	0-1
# ::node	0.0.0	cause-01	3-4
# ::node	0.0.0.0	catch-up-04	
# ::node	0.0.0.0.0	water	4-5
# ::node	0.0.0.0.1	basin	11-12
# ::node	0.0.0.0.1.0	bathroom	10-11
# ::node	0.0.0.0.1.0.0	i	9-10
# ::root	0	possible-01
# ::edge	amr-unknown	ARG0-of	cause-01	0.0	0.0.0
# ::edge	basin	poss	bathroom	0.0.0.0.1	0.0.0.0.1.0
# ::edge	bathroom	poss	i	0.0.0.0.1.0	0.0.0.0.1.0.0
# ::edge	catch-up-04	ARG1	water	0.0.0.0	0.0.0.0.0
# ::edge	catch-up-04	ARG2	basin	0.0.0.0	0.0.0.0.1
# ::edge	cause-01	ARG1	catch-up-04	0.0.0	0.0.0.0
# ::edge	possible-01	ARG1	amr-unknown	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / amr-unknown :ARG0-of (MRPNode-2 / cause-01 :ARG1 (MRPNode-3 / catch-up-04 :ARG1 (MRPNode-4 / water) :ARG2 (MRPNode-5 / basin :poss (MRPNode-6 / bathroom :poss (MRPNode-7 / i)))))))

# ::id 96
# ::snt How do I wire 2 switches to control a ceiling light?
# ::tok How do I wire 2 switches to control a ceiling light ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0.0 5-6|0.0 7-8|0.2 9-10|0.2.0.0 10-11|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:33.956586 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	wire-02	3-4
# ::node	0.0	switch	5-6
# ::node	0.0.0	2	4-5
# ::node	0.1	i	2-3
# ::node	0.2	control-01	7-8
# ::node	0.2.0	light	10-11
# ::node	0.2.0.0	ceiling	9-10
# ::node	0.3	amr-unknown	0-1
# ::root	0	wire-02
# ::edge	control-01	ARG1	light	0.2	0.2.0
# ::edge	light	mod	ceiling	0.2.0	0.2.0.0
# ::edge	switch	quant	2	0.0	0.0.0
# ::edge	wire-02	ARG0	i	0	0.1
# ::edge	wire-02	ARG1	switch	0	0.0
# ::edge	wire-02	ARG2	control-01	0	0.2
# ::edge	wire-02	manner	amr-unknown	0	0.3
(MRPNode-0 / wire-02 :ARG1 (MRPNode-1 / switch :quant 2) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / control-01 :ARG1 (MRPNode-4 / light :mod (MRPNode-5 / ceiling))) :manner (MRPNode-6 / amr-unknown))

# ::id 97
# ::snt When (if ever) in the interview process is it appropriate to recommend a colleague?
# ::tok When ( if ever ) in the interview process is it appropriate to recommend a colleague ?
# ::alignments 3-4|0.2 7-8|0.1.0.0 8-9|0.1.0 11-12|0 13-14|0.0 15-16|0.3+0.3.0+0.3.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:33.967055 ::parser eager_oracle ::smatch 0.8823529411764706 ::n_actions 44
# ::node	0	appropriate-02	11-12
# ::node	0.0	recommend-01	13-14
# ::node	0.1	amr-unknown	
# ::node	0.1.0	process-02	8-9
# ::node	0.1.0.0	interview-01	7-8
# ::node	0.2	ever	3-4
# ::node	0.3	person	15-16
# ::node	0.3.0	have-rel-role-91	15-16
# ::node	0.3.0.0	colleague	15-16
# ::root	0	appropriate-02
# ::edge	amr-unknown	ARG1-of	process-02	0.1	0.1.0
# ::edge	appropriate-02	ARG1	recommend-01	0	0.0
# ::edge	appropriate-02	condition	person	0	0.3
# ::edge	appropriate-02	time	amr-unknown	0	0.1
# ::edge	appropriate-02	time	ever	0	0.2
# ::edge	have-rel-role-91	ARG2	colleague	0.3.0	0.3.0.0
# ::edge	person	ARG0-of	have-rel-role-91	0.3	0.3.0
# ::edge	process-02	ARG1	interview-01	0.1.0	0.1.0.0
(MRPNode-0 / appropriate-02 :ARG1 (MRPNode-1 / recommend-01) :time (MRPNode-2 / amr-unknown :ARG1-of (MRPNode-3 / process-02 :ARG1 (MRPNode-4 / interview-01))) :time (MRPNode-5 / ever) :condition (MRPNode-6 / person :ARG0-of (MRPNode-7 / have-rel-role-91 :ARG2 (MRPNode-8 / colleague))))

# ::id 98
# ::snt How do I remove paint from pipes?
# ::tok How do I remove paint from pipes ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0 6-7|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:33.969884 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	remove-01	3-4
# ::node	0.0	paint	4-5
# ::node	0.1	i	2-3
# ::node	0.2	pipe	6-7
# ::node	0.3	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	remove-01	ARG0	i	0	0.1
# ::edge	remove-01	ARG1	paint	0	0.0
# ::edge	remove-01	ARG2	pipe	0	0.2
# ::edge	remove-01	manner	amr-unknown	0	0.3
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / paint) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / pipe) :manner (MRPNode-4 / amr-unknown))

# ::id 99
# ::snt Is Greek driver's license valid in the US?
# ::tok Is Greek driver 's license valid in the US ?
# ::alignments 1-2|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 2-3|0.0.0.0 4-5|0.0 5-6|0 8-9|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:33.975504 ::parser eager_oracle ::smatch 0.7647058823529412 ::n_actions 25
# ::node	0	valid-02	5-6
# ::node	0.0	license-01	4-5
# ::node	0.0.0	person	
# ::node	0.0.0.0	drive-01	2-3
# ::node	0.0.0.1	country	1-2
# ::node	0.0.0.1.0	name	1-2
# ::node	0.0.0.1.0.0	greek	1-2
# ::node	0.1	country	8-9
# ::node	0.1.0	name	8-9
# ::node	0.1.0.0	us	8-9
# ::node	0.2	amr-unknown	
# ::root	0	valid-02
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	license-01	ARG1	person	0.0	0.0.0
# ::edge	name	op1	greek	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op1	us	0.1.0	0.1.0.0
# ::edge	person	mod	country	0.0.0	0.0.0.1
# ::edge	person	mod	drive-01	0.0.0	0.0.0.0
# ::edge	valid-02	ARG1	amr-unknown	0	0.2
# ::edge	valid-02	ARG1	license-01	0	0.0
# ::edge	valid-02	ARG2	country	0	0.1
(MRPNode-0 / valid-02 :ARG1 (MRPNode-1 / license-01 :ARG1 (MRPNode-2 / person :mod (MRPNode-3 / drive-01) :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 greek)))) :ARG2 (MRPNode-6 / country :name (MRPNode-7 / name :op1 us)) :ARG1 (MRPNode-8 / amr-unknown))

# ::id 100
# ::snt How do I know if food left at room temperature is still safe to eat?
# ::tok How do I know if food left at room temperature is still safe to eat ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0.0.0 6-7|0.0.0.0.0 8-9|0.0.0.0.0.0.0 9-10|0.0.0.0.0.0 11-12|0.0.1 12-13|0.0 14-15|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.031419 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	know-01	3-4
# ::node	0.0	safe-01	12-13
# ::node	0.0.0	eat-01	14-15
# ::node	0.0.0.0	food	5-6
# ::node	0.0.0.0.0	leave-17	6-7
# ::node	0.0.0.0.0.0	temperature	9-10
# ::node	0.0.0.0.0.0.0	room	8-9
# ::node	0.0.1	still	11-12
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	know-01
# ::edge	eat-01	ARG1	food	0.0.0	0.0.0.0
# ::edge	food	ARG1-of	leave-17	0.0.0.0	0.0.0.0.0
# ::edge	know-01	ARG0	i	0	0.1
# ::edge	know-01	ARG1	safe-01	0	0.0
# ::edge	know-01	manner	amr-unknown	0	0.2
# ::edge	leave-17	location	temperature	0.0.0.0.0	0.0.0.0.0.0
# ::edge	safe-01	ARG1	eat-01	0.0	0.0.0
# ::edge	safe-01	mod	still	0.0	0.0.1
# ::edge	temperature	mod	room	0.0.0.0.0.0	0.0.0.0.0.0.0
(MRPNode-0 / know-01 :ARG1 (MRPNode-1 / safe-01 :ARG1 (MRPNode-2 / eat-01 :ARG1 (MRPNode-3 / food :ARG1-of (MRPNode-4 / leave-17 :location (MRPNode-5 / temperature :mod (MRPNode-6 / room))))) :mod (MRPNode-7 / still)) :ARG0 (MRPNode-8 / i) :manner (MRPNode-9 / amr-unknown))

# ::id 101
# ::snt How do I remove a thick layer of paint from tiles?
# ::tok How do I remove a thick layer of paint from tiles ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 5-6|0.0.0 6-7|0.0 8-9|0.0.1 10-11|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:34.036251 ::parser eager_oracle ::smatch 1.0 ::n_actions 35
# ::node	0	remove-01	3-4
# ::node	0.0	layer	6-7
# ::node	0.0.0	thick-03	5-6
# ::node	0.0.1	paint	8-9
# ::node	0.1	i	2-3
# ::node	0.2	tile	10-11
# ::node	0.3	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	layer	ARG1-of	thick-03	0.0	0.0.0
# ::edge	layer	consist-of	paint	0.0	0.0.1
# ::edge	remove-01	ARG0	i	0	0.1
# ::edge	remove-01	ARG1	layer	0	0.0
# ::edge	remove-01	ARG2	tile	0	0.2
# ::edge	remove-01	manner	amr-unknown	0	0.3
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / layer :ARG1-of (MRPNode-2 / thick-03) :consist-of (MRPNode-3 / paint)) :ARG0 (MRPNode-4 / i) :ARG2 (MRPNode-5 / tile) :manner (MRPNode-6 / amr-unknown))

# ::id 102
# ::snt What are these holes in my concrete wall and how can I mount things to them?
# ::tok What are these holes in my concrete wall and how can I mount things to them ?
# ::alignments 0-1|0.0.2 2-3|0.0.0 3-4|0.0 6-7|0.0.1.0 7-8|0.0.1 8-9|0 10-11|0.1 11-12|0.1.0.0 12-13|0.1.0 13-14|0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.063198 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	and	8-9
# ::node	0.0	hole	3-4
# ::node	0.0.0	this	2-3
# ::node	0.0.1	wall	7-8
# ::node	0.0.1.0	concrete	6-7
# ::node	0.0.2	amr-unknown	0-1
# ::node	0.1	possible-01	10-11
# ::node	0.1.0	mount-02	12-13
# ::node	0.1.0.0	i	11-12
# ::node	0.1.0.1	thing	13-14
# ::root	0	and
# ::edge	and	op1	hole	0	0.0
# ::edge	and	op2	possible-01	0	0.1
# ::edge	hole	location	amr-unknown	0.0	0.0.2
# ::edge	hole	location	wall	0.0	0.0.1
# ::edge	hole	mod	this	0.0	0.0.0
# ::edge	mount-02	ARG1	i	0.1.0	0.1.0.0
# ::edge	mount-02	ARG1	thing	0.1.0	0.1.0.1
# ::edge	possible-01	ARG1	mount-02	0.1	0.1.0
# ::edge	wall	mod	concrete	0.0.1	0.0.1.0
(MRPNode-0 / and :op1 (MRPNode-1 / hole :mod (MRPNode-2 / this) :location (MRPNode-3 / wall :mod (MRPNode-4 / concrete)) :location (MRPNode-5 / amr-unknown)) :op2 (MRPNode-6 / possible-01 :ARG1 (MRPNode-7 / mount-02 :ARG1 (MRPNode-8 / i) :ARG1 (MRPNode-9 / thing))))

# ::id 103
# ::snt What could be causing water to back up into my bathroom basin?
# ::tok What could be causing water to back up into my bathroom basin ?
# ::alignments 0-1|0.0 1-2|0 3-4|0.0.0 4-5|0.0.0.0.0 9-10|0.0.0.0.1.0.0 10-11|0.0.0.0.1.0 11-12|0.0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.069358 ::parser eager_oracle ::smatch 0.7857142857142857 ::n_actions 35
# ::node	0	possible-01	1-2
# ::node	0.0	amr-unknown	0-1
# ::node	0.0.0	cause-01	3-4
# ::node	0.0.0.0	catch-up-04	
# ::node	0.0.0.0.0	water	4-5
# ::node	0.0.0.0.1	basin	11-12
# ::node	0.0.0.0.1.0	bathroom	10-11
# ::node	0.0.0.0.1.0.0	i	9-10
# ::root	0	possible-01
# ::edge	amr-unknown	ARG0-of	cause-01	0.0	0.0.0
# ::edge	basin	poss	bathroom	0.0.0.0.1	0.0.0.0.1.0
# ::edge	bathroom	poss	i	0.0.0.0.1.0	0.0.0.0.1.0.0
# ::edge	catch-up-04	ARG1	water	0.0.0.0	0.0.0.0.0
# ::edge	catch-up-04	ARG2	basin	0.0.0.0	0.0.0.0.1
# ::edge	cause-01	ARG1	catch-up-04	0.0.0	0.0.0.0
# ::edge	possible-01	ARG1	amr-unknown	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / amr-unknown :ARG0-of (MRPNode-2 / cause-01 :ARG1 (MRPNode-3 / catch-up-04 :ARG1 (MRPNode-4 / water) :ARG2 (MRPNode-5 / basin :poss (MRPNode-6 / bathroom :poss (MRPNode-7 / i)))))))

# ::id 104
# ::snt How to truss a chicken?
# ::tok How to truss a chicken ?
# ::alignments 0-1|0.1 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.070646 ::parser eager_oracle ::smatch 0.25 ::n_actions 13
# ::node	0	structure-01	
# ::node	0.0	chicken	4-5
# ::node	0.1	amr-unknown	0-1
# ::root	0	structure-01
# ::edge	structure-01	ARG1	chicken	0	0.0
# ::edge	structure-01	ARG2	amr-unknown	0	0.1
(MRPNode-0 / structure-01 :ARG1 (MRPNode-1 / chicken) :ARG2 (MRPNode-2 / amr-unknown))

# ::id 105
# ::snt What are these bugs and how do I get rid of them?
# ::tok What are these bugs and how do I get rid of them ?
# ::alignments 0-1|0.1 4-5|0 5-6|0.0.2 7-8|0.0.1 9-10|0.0 11-12|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.076282 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	and	4-5
# ::node	0.0	rid-01	9-10
# ::node	0.0.0	they	11-12
# ::node	0.0.1	i	7-8
# ::node	0.0.2	amr-unknown	5-6
# ::node	0.1	amr-unknown	0-1
# ::root	0	and
# ::edge	and	op1	rid-01	0	0.0
# ::edge	and	op2	amr-unknown	0	0.1
# ::edge	rid-01	ARG0	i	0.0	0.0.1
# ::edge	rid-01	ARG1	they	0.0	0.0.0
# ::edge	rid-01	manner	amr-unknown	0.0	0.0.2
(MRPNode-0 / and :op1 (MRPNode-1 / rid-01 :ARG1 (MRPNode-2 / they) :ARG0 (MRPNode-3 / i) :manner (MRPNode-4 / amr-unknown)) :op2 (MRPNode-5 / amr-unknown))

# ::id 106
# ::snt What is a good length for the statement of purpose in a U.S. PhD application?
# ::tok What is a good length for the statement of purpose in a U.S. PhD application ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 7-8|0.1 9-10|0.1.0 12-13|0.1.1.0+0.1.1.0.0+0.1.1.0.0.0 13-14|0.1.1.1 14-15|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.084193 ::parser eager_oracle ::smatch 1.0 ::n_actions 42
# ::node	0	length	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	state-01	7-8
# ::node	0.1.0	purpose	9-10
# ::node	0.1.1	apply-01	14-15
# ::node	0.1.1.0	university	12-13
# ::node	0.1.1.0.0	name	12-13
# ::node	0.1.1.0.0.0	u.s.	12-13
# ::node	0.1.1.1	phd	13-14
# ::node	0.2	amr-unknown	0-1
# ::root	0	length
# ::edge	apply-01	ARG0	university	0.1.1	0.1.1.0
# ::edge	apply-01	mod	phd	0.1.1	0.1.1.1
# ::edge	length	ARG1-of	good-02	0	0.0
# ::edge	length	domain	amr-unknown	0	0.2
# ::edge	length	domain	state-01	0	0.1
# ::edge	name	op1	u.s.	0.1.1.0.0	0.1.1.0.0.0
# ::edge	state-01	ARG1	purpose	0.1	0.1.0
# ::edge	state-01	location	apply-01	0.1	0.1.1
# ::edge	university	name	name	0.1.1.0	0.1.1.0.0
(MRPNode-0 / length :ARG1-of (MRPNode-1 / good-02) :domain (MRPNode-2 / state-01 :ARG1 (MRPNode-3 / purpose) :location (MRPNode-4 / apply-01 :ARG0 (MRPNode-5 / university :name (MRPNode-6 / name :op1 u.s.)) :mod (MRPNode-7 / phd))) :domain (MRPNode-8 / amr-unknown))

# ::id 107
# ::snt How to make chapattis round and of same thickness?
# ::tok How to make chapattis round and of same thickness ?
# ::alignments 0-1|0.2 2-3|0 3-4|0.0 4-5|0.1 7-8|0.0.0.0 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.088089 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	make-01	2-3
# ::node	0.0	chapattis	3-4
# ::node	0.0.0	thickness	8-9
# ::node	0.0.0.0	same-01	7-8
# ::node	0.1	round	4-5
# ::node	0.2	amr-unknown	0-1
# ::root	0	make-01
# ::edge	chapattis	ARG1-of	thickness	0.0	0.0.0
# ::edge	make-01	ARG1	chapattis	0	0.0
# ::edge	make-01	manner	amr-unknown	0	0.2
# ::edge	make-01	manner	round	0	0.1
# ::edge	thickness	ARG1-of	same-01	0.0.0	0.0.0.0
(MRPNode-0 / make-01 :ARG1 (MRPNode-1 / chapattis :ARG1-of (MRPNode-2 / thickness :ARG1-of (MRPNode-3 / same-01))) :manner (MRPNode-4 / round) :manner (MRPNode-5 / amr-unknown))

# ::id 108
# ::snt How should you deal with a teacher who is difficult to understand?
# ::tok How should you deal with a teacher who is difficult to understand ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.0 3-4|0.0 6-7|0.0.1+0.0.1.0 9-10|0.0.1.1.0 11-12|0.0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.096715 ::parser eager_oracle ::smatch 1.0 ::n_actions 41
# ::node	0	recommend-01	1-2
# ::node	0.0	deal-01	3-4
# ::node	0.0.0	you	2-3
# ::node	0.0.1	person	6-7
# ::node	0.0.1.0	teach-01	6-7
# ::node	0.0.1.1	understand-01	11-12
# ::node	0.0.1.1.0	difficult	9-10
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	recommend-01
# ::edge	deal-01	ARG0	you	0.0	0.0.0
# ::edge	deal-01	ARG2	person	0.0	0.0.1
# ::edge	deal-01	manner	amr-unknown	0.0	0.0.2
# ::edge	person	ARG0-of	teach-01	0.0.1	0.0.1.0
# ::edge	person	ARG0-of	understand-01	0.0.1	0.0.1.1
# ::edge	recommend-01	ARG1	deal-01	0	0.0
# ::edge	understand-01	ARG1-of	difficult	0.0.1.1	0.0.1.1.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / deal-01 :ARG0 (MRPNode-2 / you) :ARG2 (MRPNode-3 / person :ARG0-of (MRPNode-4 / teach-01) :ARG0-of (MRPNode-5 / understand-01 :ARG1-of (MRPNode-6 / difficult))) :manner (MRPNode-7 / amr-unknown)))

# ::id 109
# ::snt What should my credit limit be?
# ::tok What should my credit limit be ?
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.0.2 3-4|0.0.1 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.099822 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	recommend-01	1-2
# ::node	0.0	limit-01	4-5
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	credit	3-4
# ::node	0.0.2	i	2-3
# ::root	0	recommend-01
# ::edge	limit-01	ARG1	amr-unknown	0.0	0.0.0
# ::edge	limit-01	ARG1	credit	0.0	0.0.1
# ::edge	limit-01	ARG1	i	0.0	0.0.2
# ::edge	recommend-01	ARG1	limit-01	0	0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / limit-01 :ARG1 (MRPNode-2 / amr-unknown) :ARG1 (MRPNode-3 / credit) :ARG1 (MRPNode-4 / i)))

# ::id 110
# ::snt What's the best/easiest way to install and wire a wall light?
# ::tok What 's the best / easiest way to install and wire a wall light ?
# ::alignments 0-1|0.1 4-5|0.0 8-9|0.0.0 12-13|0.0.2.0 13-14|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:34.106309 ::parser eager_oracle ::smatch 0.4666666666666667 ::n_actions 31
# ::node	0	have-manner-91	
# ::node	0.0	slash	4-5
# ::node	0.0.0	install-01	8-9
# ::node	0.0.1	fine-03	
# ::node	0.0.1.0	have-degree-91	
# ::node	0.0.1.0.0	most	
# ::node	0.0.1.1	have-degree-91	
# ::node	0.0.1.1.0	most	
# ::node	0.0.2	light	13-14
# ::node	0.0.2.0	wall	12-13
# ::node	0.1	amr-unknown	0-1
# ::root	0	have-manner-91
# ::edge	fine-03	ARG2-of	have-degree-91	0.0.1	0.0.1.0
# ::edge	fine-03	ARG2-of	have-degree-91	0.0.1	0.0.1.1
# ::edge	have-degree-91	ARG3	most	0.0.1.0	0.0.1.0.0
# ::edge	have-degree-91	ARG3	most	0.0.1.1	0.0.1.1.0
# ::edge	have-manner-91	ARG1	slash	0	0.0
# ::edge	have-manner-91	ARG2	amr-unknown	0	0.1
# ::edge	light	mod	wall	0.0.2	0.0.2.0
# ::edge	slash	op1	install-01	0.0	0.0.0
# ::edge	slash	op2	fine-03	0.0	0.0.1
# ::edge	slash	op3	light	0.0	0.0.2
(MRPNode-0 / have-manner-91 :ARG1 (MRPNode-1 / slash :op1 (MRPNode-2 / install-01) :op2 (MRPNode-3 / fine-03 :ARG2-of (MRPNode-4 / have-degree-91 :ARG3 (MRPNode-5 / most)) :ARG2-of (MRPNode-6 / have-degree-91 :ARG3 (MRPNode-7 / most))) :op3 (MRPNode-8 / light :mod (MRPNode-9 / wall))) :ARG2 (MRPNode-10 / amr-unknown))

# ::id 111
# ::snt How do I stop my dog from barking when I bring him outside?
# ::tok How do I stop my dog from barking when I bring him outside ?
# ::alignments 0-1|0.3 3-4|0 5-6|0.0 7-8|0.1 9-10|0.0.0 10-11|0.2 12-13|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.114656 ::parser eager_oracle ::smatch 1.0 ::n_actions 41
# ::node	0	stop-03	3-4
# ::node	0.0	dog	5-6
# ::node	0.0.0	i	9-10
# ::node	0.1	bark-01	7-8
# ::node	0.2	bring-01	10-11
# ::node	0.2.0	outside	12-13
# ::node	0.3	amr-unknown	0-1
# ::root	0	stop-03
# ::edge	bark-01	ARG0	dog	0.1	0.0
# ::edge	bring-01	ARG0	i	0.2	0.0.0
# ::edge	bring-01	ARG2	outside	0.2	0.2.0
# ::edge	dog	poss	i	0.0	0.0.0
# ::edge	stop-03	ARG0	i	0	0.0.0
# ::edge	stop-03	ARG1	dog	0	0.0
# ::edge	stop-03	ARG2	bark-01	0	0.1
# ::edge	stop-03	manner	amr-unknown	0	0.3
# ::edge	stop-03	time	bring-01	0	0.2
(MRPNode-0 / stop-03 :ARG1 (MRPNode-1 / dog :poss (MRPNode-2 / i)) :ARG0 MRPNode-2 :ARG2 (MRPNode-3 / bark-01 :ARG0 MRPNode-1) :time (MRPNode-4 / bring-01 :ARG0 MRPNode-2 :ARG2 (MRPNode-5 / outside)) :manner (MRPNode-6 / amr-unknown))

# ::id 112
# ::snt How do I bring up that I got a better job offer to my new current employer?
# ::tok How do I bring up that I got a better job offer to my new current employer ?
# ::alignments 0-1|0.1 3-4|0 7-8|0.0 9-10|0.0.0.2 10-11|0.0.0.0 11-12|0.0.0 13-14|0.0.0.4 14-15|0.0.0.3.0 15-16|0.0.0.4.0.0 16-17|0.0.0.4.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.148258 ::parser eager_oracle ::smatch 0.8163265306122449 ::n_actions 51
# ::node	0	bring-up-02	3-4
# ::node	0.0	get-01	7-8
# ::node	0.0.0	offer-01	11-12
# ::node	0.0.0.0	job	10-11
# ::node	0.0.0.1	have-degree-91	
# ::node	0.0.0.1.0	more	
# ::node	0.0.0.2	good-02	9-10
# ::node	0.0.0.3	company	
# ::node	0.0.0.3.0	new-01	14-15
# ::node	0.0.0.4	i	13-14
# ::node	0.0.0.4.0	employ-01	16-17
# ::node	0.0.0.4.0.0	current	15-16
# ::node	0.1	amr-unknown	0-1
# ::root	0	bring-up-02
# ::edge	bring-up-02	ARG0	i	0	0.0.0.4
# ::edge	bring-up-02	ARG1	get-01	0	0.0
# ::edge	bring-up-02	manner	amr-unknown	0	0.1
# ::edge	company	ARG1-of	new-01	0.0.0.3	0.0.0.3.0
# ::edge	employ-01	ARG0	company	0.0.0.4.0	0.0.0.3
# ::edge	employ-01	time	current	0.0.0.4.0	0.0.0.4.0.0
# ::edge	get-01	ARG0	i	0.0	0.0.0.4
# ::edge	get-01	ARG1	offer-01	0.0	0.0.0
# ::edge	have-degree-91	ARG3	more	0.0.0.1	0.0.0.1.0
# ::edge	i	ARG1-of	employ-01	0.0.0.4	0.0.0.4.0
# ::edge	offer-01	ARG0	i	0.0.0	0.0.0.4
# ::edge	offer-01	ARG1	job	0.0.0	0.0.0.0
# ::edge	offer-01	ARG1-of	good-02	0.0.0	0.0.0.2
# ::edge	offer-01	ARG1-of	have-degree-91	0.0.0	0.0.0.1
# ::edge	offer-01	ARG3	company	0.0.0	0.0.0.3
(MRPNode-0 / bring-up-02 :ARG1 (MRPNode-1 / get-01 :ARG1 (MRPNode-2 / offer-01 :ARG1 (MRPNode-3 / job) :ARG1-of (MRPNode-4 / have-degree-91 :ARG3 (MRPNode-5 / more)) :ARG1-of (MRPNode-6 / good-02) :ARG3 (MRPNode-7 / company :ARG1-of (MRPNode-8 / new-01)) :ARG0 (MRPNode-9 / i :ARG1-of (MRPNode-10 / employ-01 :ARG0 MRPNode-7 :time (MRPNode-11 / current)))) :ARG0 MRPNode-9) :ARG0 MRPNode-9 :manner (MRPNode-12 / amr-unknown))

# ::id 113
# ::snt How can I assess the quality of a paper outside my field?
# ::tok How can I assess the quality of a paper outside my field ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0 8-9|0.0.0.0 9-10|0.0.0.0.0 11-12|0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.155207 ::parser eager_oracle ::smatch 1.0 ::n_actions 42
# ::node	0	possible-01	1-2
# ::node	0.0	assess-01	3-4
# ::node	0.0.0	quality	5-6
# ::node	0.0.0.0	paper	8-9
# ::node	0.0.0.0.0	outside	9-10
# ::node	0.0.0.0.0.0	field	11-12
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	assess-01	ARG0	i	0.0	0.0.1
# ::edge	assess-01	ARG1	quality	0.0	0.0.0
# ::edge	assess-01	manner	amr-unknown	0.0	0.0.2
# ::edge	i	poss-of	field	0.0.1	0.0.0.0.0.0
# ::edge	outside	op1	field	0.0.0.0.0	0.0.0.0.0.0
# ::edge	paper	location	outside	0.0.0.0	0.0.0.0.0
# ::edge	possible-01	ARG1	assess-01	0	0.0
# ::edge	quality	poss	paper	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / assess-01 :ARG1 (MRPNode-2 / quality :poss (MRPNode-3 / paper :location (MRPNode-4 / outside :op1 (MRPNode-6 / field)))) :ARG0 (MRPNode-5 / i :poss-of MRPNode-6) :manner (MRPNode-7 / amr-unknown)))

# ::id 114
# ::snt Paper Title, Is it better to start with a verb?
# ::tok Paper Title , Is it better to start with a verb ?
# ::alignments 0-2|0.1+0.1.0+0.1.0.0+0.1.0.1 5-6|0.0.1 7-8|0.0.0 10-11|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.161095 ::parser eager_oracle ::smatch 0.6060606060606061 ::n_actions 25
# ::node	0	say-01	
# ::node	0.0	have-degree-91	
# ::node	0.0.0	start-01	7-8
# ::node	0.0.0.0	verb	10-11
# ::node	0.0.1	good-02	5-6
# ::node	0.0.2	amr-unknown	
# ::node	0.0.3	more	
# ::node	0.1	person	0-2
# ::node	0.1.0	name	0-2
# ::node	0.1.0.0	paper	0-2
# ::node	0.1.0.1	title	0-2
# ::root	0	say-01
# ::edge	good-02	ARG1	start-01	0.0.1	0.0.0
# ::edge	have-degree-91	ARG1	start-01	0.0	0.0.0
# ::edge	have-degree-91	ARG2	good-02	0.0	0.0.1
# ::edge	have-degree-91	ARG3	amr-unknown	0.0	0.0.2
# ::edge	have-degree-91	ARG3	more	0.0	0.0.3
# ::edge	name	op1	paper	0.1.0	0.1.0.0
# ::edge	name	op2	title	0.1.0	0.1.0.1
# ::edge	person	name	name	0.1	0.1.0
# ::edge	say-01	ARG1	have-degree-91	0	0.0
# ::edge	say-01	ARG2	person	0	0.1
# ::edge	start-01	ARG1	verb	0.0.0	0.0.0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / have-degree-91 :ARG1 (MRPNode-2 / start-01 :ARG1 (MRPNode-3 / verb)) :ARG2 (MRPNode-4 / good-02 :ARG1 MRPNode-2) :ARG3 (MRPNode-5 / amr-unknown) :ARG3 (MRPNode-6 / more)) :ARG2 (MRPNode-7 / person :name (MRPNode-8 / name :op1 paper :op2 title)))

# ::id 115
# ::snt How to apply for a Schengen visa?
# ::tok How to apply for a Schengen visa ?
# ::alignments 0-1|0.1 2-3|0.0 5-6|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.164316 ::parser eager_oracle ::smatch 0.7272727272727274 ::n_actions 21
# ::node	0	have-manner-91	
# ::node	0.0	apply-01	2-3
# ::node	0.0.0	visa	6-7
# ::node	0.0.0.0	city	5-6
# ::node	0.0.0.0.0	name	5-6
# ::node	0.0.0.0.0.0	schengen	5-6
# ::node	0.1	amr-unknown	0-1
# ::root	0	have-manner-91
# ::edge	apply-01	ARG1	visa	0.0	0.0.0
# ::edge	city	name	name	0.0.0.0	0.0.0.0.0
# ::edge	have-manner-91	ARG1	apply-01	0	0.0
# ::edge	have-manner-91	ARG2	amr-unknown	0	0.1
# ::edge	name	op1	schengen	0.0.0.0.0	0.0.0.0.0.0
# ::edge	visa	mod	city	0.0.0	0.0.0.0
(MRPNode-0 / have-manner-91 :ARG1 (MRPNode-1 / apply-01 :ARG1 (MRPNode-2 / visa :mod (MRPNode-3 / city :name (MRPNode-4 / name :op1 schengen)))) :ARG2 (MRPNode-5 / amr-unknown))

# ::id 116
# ::snt What could be wrong with my air conditioner?
# ::tok What could be wrong with my air conditioner ?
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 5-6|0.0.1.0 6-7|0.0.1.1 7-8|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.167931 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	possible-01	1-2
# ::node	0.0	wrong-02	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	conditioner	7-8
# ::node	0.0.1.0	i	5-6
# ::node	0.0.1.1	air	6-7
# ::root	0	possible-01
# ::edge	conditioner	mod	air	0.0.1	0.0.1.1
# ::edge	conditioner	mod	i	0.0.1	0.0.1.0
# ::edge	possible-01	ARG1	wrong-02	0	0.0
# ::edge	wrong-02	ARG1	amr-unknown	0.0	0.0.0
# ::edge	wrong-02	ARG2	conditioner	0.0	0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / wrong-02 :ARG1 (MRPNode-2 / amr-unknown) :ARG2 (MRPNode-3 / conditioner :mod (MRPNode-4 / i) :mod (MRPNode-5 / air))))

# ::id 117
# ::snt How do you teach a child religious views?
# ::tok How do you teach a child religious views ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0.1 6-7|0.0.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.171409 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	teach-01	3-4
# ::node	0.0	view-02	7-8
# ::node	0.0.0	religion	6-7
# ::node	0.0.1	child	5-6
# ::node	0.1	you	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	teach-01
# ::edge	teach-01	ARG0	you	0	0.1
# ::edge	teach-01	ARG1	view-02	0	0.0
# ::edge	teach-01	ARG2	child	0	0.0.1
# ::edge	teach-01	manner	amr-unknown	0	0.2
# ::edge	view-02	ARG0	child	0.0	0.0.1
# ::edge	view-02	ARG1	religion	0.0	0.0.0
(MRPNode-0 / teach-01 :ARG1 (MRPNode-1 / view-02 :ARG1 (MRPNode-2 / religion) :ARG0 (MRPNode-4 / child)) :ARG0 (MRPNode-3 / you) :ARG2 MRPNode-4 :manner (MRPNode-5 / amr-unknown))

# ::id 118
# ::snt What is the best way to learn to play a piece on the guitar?
# ::tok What is the best way to learn to play a piece on the guitar ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 8-9|0.3.0 10-11|0.3.0.0 13-14|0.3.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.179821 ::parser eager_oracle ::smatch 0.8484848484848484 ::n_actions 38
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	learn-01	6-7
# ::node	0.3.0	play-11	8-9
# ::node	0.3.0.0	piece	10-11
# ::node	0.3.0.1	guitar	13-14
# ::root	0	way
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	learn-01	ARG1	play-11	0.3	0.3.0
# ::edge	play-11	ARG1	piece	0.3.0	0.3.0.0
# ::edge	play-11	ARG2	guitar	0.3.0	0.3.0.1
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	learn-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / learn-01 :ARG1 (MRPNode-6 / play-11 :ARG1 (MRPNode-7 / piece) :ARG2 (MRPNode-8 / guitar))))

# ::id 119
# ::snt How do I troubleshoot an electric furnace?
# ::tok How do I troubleshoot an electric furnace ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.182258 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	trouble-01	3-4
# ::node	0.0	furnace	6-7
# ::node	0.0.0	electric	5-6
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	trouble-01
# ::edge	furnace	mod	electric	0.0	0.0.0
# ::edge	trouble-01	ARG0	i	0	0.1
# ::edge	trouble-01	ARG1	furnace	0	0.0
# ::edge	trouble-01	manner	amr-unknown	0	0.2
(MRPNode-0 / trouble-01 :ARG1 (MRPNode-1 / furnace :mod (MRPNode-2 / electric)) :ARG0 (MRPNode-3 / i) :manner (MRPNode-4 / amr-unknown))

# ::id 120
# ::snt Is it possible to get a Schengen visa for future date?
# ::tok Is it possible to get a Schengen visa for future date ?
# ::alignments 2-3|0 4-5|0.0 6-7|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 7-8|0.0.0 9-10|0.0.1.0 10-11|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.187847 ::parser eager_oracle ::smatch 0.9375 ::n_actions 32
# ::node	0	possible-01	2-3
# ::node	0.0	get-01	4-5
# ::node	0.0.0	visa	7-8
# ::node	0.0.0.0	organization	6-7
# ::node	0.0.0.0.0	name	6-7
# ::node	0.0.0.0.0.0	schengen	6-7
# ::node	0.0.1	date	10-11
# ::node	0.0.1.0	future	9-10
# ::node	0.1	amr-unknown	
# ::root	0	possible-01
# ::edge	date	mod	future	0.0.1	0.0.1.0
# ::edge	get-01	ARG1	visa	0.0	0.0.0
# ::edge	get-01	time	date	0.0	0.0.1
# ::edge	name	op1	schengen	0.0.0.0.0	0.0.0.0.0.0
# ::edge	organization	name	name	0.0.0.0	0.0.0.0.0
# ::edge	possible-01	ARG1	get-01	0	0.0
# ::edge	possible-01	ARG1-of	amr-unknown	0	0.1
# ::edge	visa	mod	organization	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / get-01 :ARG1 (MRPNode-2 / visa :mod (MRPNode-3 / organization :name (MRPNode-4 / name :op1 schengen))) :time (MRPNode-5 / date :mod (MRPNode-6 / future))) :ARG1-of (MRPNode-7 / amr-unknown))

# ::id 121
# ::snt How can I determine what is in my water?
# ::tok How can I determine what is in my water ?
# ::alignments 1-2|0 2-3|0.0.0 3-4|0.0 4-5|0.0.1 7-8|0.0.0.0.0 8-9|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.193654 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	possible-01	1-2
# ::node	0.0	determine-01	3-4
# ::node	0.0.0	thing	2-3
# ::node	0.0.0.0	water	8-9
# ::node	0.0.0.0.0	i	7-8
# ::node	0.0.1	amr-unknown	4-5
# ::root	0	possible-01
# ::edge	determine-01	ARG0	i	0.0	0.0.0.0.0
# ::edge	determine-01	ARG1	thing	0.0	0.0.0
# ::edge	determine-01	manner	amr-unknown	0.0	0.0.1
# ::edge	possible-01	ARG1	determine-01	0	0.0
# ::edge	thing	location	water	0.0.0	0.0.0.0
# ::edge	water	poss	i	0.0.0.0	0.0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / determine-01 :ARG1 (MRPNode-2 / thing :location (MRPNode-3 / water :poss (MRPNode-4 / i))) :ARG0 MRPNode-4 :manner (MRPNode-5 / amr-unknown)))

# ::id 122
# ::snt How do I finish a ridge cap?
# ::tok How do I finish a ridge cap ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.196603 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	finish-01	3-4
# ::node	0.0	cap	6-7
# ::node	0.0.0	ridge	5-6
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	finish-01
# ::edge	cap	mod	ridge	0.0	0.0.0
# ::edge	finish-01	ARG0	i	0	0.1
# ::edge	finish-01	ARG1	cap	0	0.0
# ::edge	finish-01	manner	amr-unknown	0	0.2
(MRPNode-0 / finish-01 :ARG1 (MRPNode-1 / cap :mod (MRPNode-2 / ridge)) :ARG0 (MRPNode-3 / i) :manner (MRPNode-4 / amr-unknown))

# ::id 123
# ::snt How do I stop my dog from barking at people through the fence?
# ::tok How do I stop my dog from barking at people through the fence ?
# ::alignments 0-1|0.2 2-3|0.0.0 3-4|0 5-6|0.0 7-8|0.1 9-10|0.1.0 10-11|0.1.1 12-13|0.1.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.203413 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	stop-03	3-4
# ::node	0.0	dog	5-6
# ::node	0.0.0	i	2-3
# ::node	0.1	bark-01	7-8
# ::node	0.1.0	person	9-10
# ::node	0.1.1	through	10-11
# ::node	0.1.1.0	fence	12-13
# ::node	0.2	amr-unknown	0-1
# ::root	0	stop-03
# ::edge	bark-01	ARG0	dog	0.1	0.0
# ::edge	bark-01	ARG2	person	0.1	0.1.0
# ::edge	bark-01	location	through	0.1	0.1.1
# ::edge	dog	poss	i	0.0	0.0.0
# ::edge	stop-03	ARG0	i	0	0.0.0
# ::edge	stop-03	ARG1	dog	0	0.0
# ::edge	stop-03	ARG2	bark-01	0	0.1
# ::edge	stop-03	manner	amr-unknown	0	0.2
# ::edge	through	op1	fence	0.1.1	0.1.1.0
(MRPNode-0 / stop-03 :ARG1 (MRPNode-1 / dog :poss (MRPNode-2 / i)) :ARG0 MRPNode-2 :ARG2 (MRPNode-3 / bark-01 :ARG0 MRPNode-1 :ARG2 (MRPNode-4 / person) :location (MRPNode-5 / through :op1 (MRPNode-6 / fence))) :manner (MRPNode-7 / amr-unknown))

# ::id 124
# ::snt How to make a strong mug of instant Coffee?
# ::tok How to make a strong mug of instant Coffee ?
# ::alignments 0-1|0.0 2-3|0 4-5|0.1.0 5-6|0.1.2 7-9|0.1+0.1.1+0.1.1.0+0.1.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.207270 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	make-01	2-3
# ::node	0.0	amr-unknown	0-1
# ::node	0.1	product	7-9
# ::node	0.1.0	strong-02	4-5
# ::node	0.1.1	name	7-9
# ::node	0.1.1.0	instant	7-9
# ::node	0.1.1.1	coffee	7-9
# ::node	0.1.2	mug	5-6
# ::root	0	make-01
# ::edge	make-01	ARG1	amr-unknown	0	0.0
# ::edge	make-01	ARG1	product	0	0.1
# ::edge	name	op1	instant	0.1.1	0.1.1.0
# ::edge	name	op2	coffee	0.1.1	0.1.1.1
# ::edge	product	mod	strong-02	0.1	0.1.0
# ::edge	product	name	name	0.1	0.1.1
# ::edge	product	quant	mug	0.1	0.1.2
(MRPNode-0 / make-01 :ARG1 (MRPNode-1 / amr-unknown) :ARG1 (MRPNode-2 / product :mod (MRPNode-3 / strong-02) :name (MRPNode-4 / name :op1 instant :op2 coffee) :quant (MRPNode-5 / mug)))

# ::id 125
# ::snt What are the advantages and disadvantages of various methods of supporting the classical guitar?
# ::tok What are the advantages and disadvantages of various methods of supporting the classical guitar ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 7-8|0.0.0.1 8-9|0.0.0 10-11|0.0.0.0 12-13|0.0.0.0.0.0 13-14|0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.214891 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 43
# ::node	0	and	4-5
# ::node	0.0	advantage-01	3-4
# ::node	0.0.0	method	8-9
# ::node	0.0.0.0	support-01	10-11
# ::node	0.0.0.0.0	guitar	13-14
# ::node	0.0.0.0.0.0	classical	12-13
# ::node	0.0.0.1	various	7-8
# ::node	0.1	benefit-01	
# ::node	0.1.0	-	
# ::node	0.2	amr-unknown	0-1
# ::root	0	and
# ::edge	advantage-01	ARG2	method	0.0	0.0.0
# ::edge	and	domain	amr-unknown	0	0.2
# ::edge	and	op1	advantage-01	0	0.0
# ::edge	and	op2	benefit-01	0	0.1
# ::edge	benefit-01	ARG0	method	0.1	0.0.0
# ::edge	benefit-01	polarity	-	0.1	0.1.0
# ::edge	guitar	mod	classical	0.0.0.0.0	0.0.0.0.0.0
# ::edge	method	mod	support-01	0.0.0	0.0.0.0
# ::edge	method	mod	various	0.0.0	0.0.0.1
# ::edge	support-01	ARG1	guitar	0.0.0.0	0.0.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / advantage-01 :ARG2 (MRPNode-2 / method :mod (MRPNode-3 / support-01 :ARG1 (MRPNode-4 / guitar :mod (MRPNode-5 / classical))) :mod (MRPNode-6 / various))) :op2 (MRPNode-7 / benefit-01 :polarity - :ARG0 MRPNode-2) :domain (MRPNode-8 / amr-unknown))

# ::id 126
# ::snt How do I patch a gap between my bathtub and wall?
# ::tok How do I patch a gap between my bathtub and wall ?
# ::alignments 0-1|0.2 5-6|0.0 6-7|0.0.0 7-8|0.1 8-9|0.0.0.0 10-11|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.219641 ::parser eager_oracle ::smatch 0.7142857142857143 ::n_actions 33
# ::node	0	achieve-01	
# ::node	0.0	gap	5-6
# ::node	0.0.0	between	6-7
# ::node	0.0.0.0	bathtub	8-9
# ::node	0.0.0.1	wall	10-11
# ::node	0.1	i	7-8
# ::node	0.2	amr-unknown	0-1
# ::root	0	achieve-01
# ::edge	achieve-01	ARG0	i	0	0.1
# ::edge	achieve-01	ARG1	gap	0	0.0
# ::edge	achieve-01	manner	amr-unknown	0	0.2
# ::edge	between	op1	bathtub	0.0.0	0.0.0.0
# ::edge	between	op2	wall	0.0.0	0.0.0.1
# ::edge	gap	location	between	0.0	0.0.0
# ::edge	i	poss-of	bathtub	0.1	0.0.0.0
# ::edge	i	poss-of	wall	0.1	0.0.0.1
(MRPNode-0 / achieve-01 :ARG1 (MRPNode-1 / gap :location (MRPNode-2 / between :op1 (MRPNode-4 / bathtub) :op2 (MRPNode-5 / wall))) :ARG0 (MRPNode-3 / i :poss-of MRPNode-4 :poss-of MRPNode-5) :manner (MRPNode-6 / amr-unknown))

# ::id 127
# ::snt What is a good solo to learn in the major scale?
# ::tok What is a good solo to learn in the major scale ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.1 9-10|0.1.0.0 10-11|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.223837 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	solo	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	learn-01	6-7
# ::node	0.1.0	scale	10-11
# ::node	0.1.0.0	major-02	9-10
# ::node	0.2	amr-unknown	0-1
# ::root	0	solo
# ::edge	learn-01	location	scale	0.1	0.1.0
# ::edge	scale	ARG1-of	major-02	0.1.0	0.1.0.0
# ::edge	solo	ARG1-of	good-02	0	0.0
# ::edge	solo	ARG1-of	learn-01	0	0.1
# ::edge	solo	domain	amr-unknown	0	0.2
(MRPNode-0 / solo :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / learn-01 :location (MRPNode-3 / scale :ARG1-of (MRPNode-4 / major-02))) :domain (MRPNode-5 / amr-unknown))

# ::id 128
# ::snt How to remove milk smell from hardwood floor?
# ::tok How to remove milk smell from hardwood floor ?
# ::alignments 0-1|0.1.0 2-3|0 3-4|0.2.0 4-5|0.2 6-7|0.1.1 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.228089 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 30
# ::node	0	remove-01	2-3
# ::node	0.0	thing	
# ::node	0.1	floor	7-8
# ::node	0.1.0	amr-unknown	0-1
# ::node	0.1.1	hardwood	6-7
# ::node	0.2	smell-02	4-5
# ::node	0.2.0	milk	3-4
# ::root	0	remove-01
# ::edge	floor	mod	amr-unknown	0.1	0.1.0
# ::edge	floor	mod	hardwood	0.1	0.1.1
# ::edge	remove-01	ARG1	thing	0	0.0
# ::edge	remove-01	ARG2	floor	0	0.1
# ::edge	remove-01	manner	smell-02	0	0.2
# ::edge	smell-02	ARG1	milk	0.2	0.2.0
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / thing) :ARG2 (MRPNode-2 / floor :mod (MRPNode-3 / amr-unknown) :mod (MRPNode-4 / hardwood)) :manner (MRPNode-5 / smell-02 :ARG1 (MRPNode-6 / milk)))

# ::id 129
# ::snt Will I Need a Transit visa or ESTA for the US as a Canadian?
# ::tok Will I Need a Transit visa or ESTA for the US as a Canadian ?
# ::alignments 1-2|0.1 2-3|0 4-5|0.0.0.0 5-6|0.0.0 6-7|0.0 10-11|0.2.0+0.2.0.0+0.2.0.0.0 13-14|0.2.1+0.2.1.0+0.2.1.0.0+0.2.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.239619 ::parser eager_oracle ::smatch 0.76 ::n_actions 40
# ::node	0	need-01	2-3
# ::node	0.0	or	6-7
# ::node	0.0.0	visa	5-6
# ::node	0.0.0.0	Transit	4-5
# ::node	0.0.1	iodine	
# ::node	0.1	i	1-2
# ::node	0.2	resemble-01	
# ::node	0.2.0	country	10-11
# ::node	0.2.0.0	name	10-11
# ::node	0.2.0.0.0	us	10-11
# ::node	0.2.1	person	13-14
# ::node	0.2.1.0	country	13-14
# ::node	0.2.1.0.0	name	13-14
# ::node	0.2.1.0.0.0	canada	13-14
# ::node	0.3	amr-unknown	
# ::root	0	need-01
# ::edge	country	name	name	0.2.0	0.2.0.0
# ::edge	country	name	name	0.2.1.0	0.2.1.0.0
# ::edge	name	op1	canada	0.2.1.0.0	0.2.1.0.0.0
# ::edge	name	op1	us	0.2.0.0	0.2.0.0.0
# ::edge	need-01	ARG0	i	0	0.1
# ::edge	need-01	ARG1	or	0	0.0
# ::edge	need-01	ARG1-of	amr-unknown	0	0.3
# ::edge	need-01	ARG1-of	resemble-01	0	0.2
# ::edge	or	op1	visa	0.0	0.0.0
# ::edge	or	op2	iodine	0.0	0.0.1
# ::edge	person	mod	country	0.2.1	0.2.1.0
# ::edge	resemble-01	ARG2	country	0.2	0.2.0
# ::edge	resemble-01	ARG2	person	0.2	0.2.1
# ::edge	visa	mod	Transit	0.0.0	0.0.0.0
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / or :op1 (MRPNode-2 / visa :mod (MRPNode-3 / Transit)) :op2 (MRPNode-4 / iodine)) :ARG0 (MRPNode-5 / i) :ARG1-of (MRPNode-6 / resemble-01 :ARG2 (MRPNode-7 / country :name (MRPNode-8 / name :op1 us)) :ARG2 (MRPNode-9 / person :mod (MRPNode-10 / country :name (MRPNode-11 / name :op1 canada)))) :ARG1-of (MRPNode-12 / amr-unknown))

# ::id 130
# ::snt Is it safe to replace a switch with a dimmer on halogen spots?
# ::tok Is it safe to replace a switch with a dimmer on halogen spots ?
# ::alignments 2-3|0 4-5|0.0 6-7|0.0.0 9-10|0.0.0.0 11-12|0.0.1.0 12-13|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.245161 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 34
# ::node	0	safe-01	2-3
# ::node	0.0	replace-01	4-5
# ::node	0.0.0	switch	6-7
# ::node	0.0.0.0	dimmer	9-10
# ::node	0.0.1	spot	12-13
# ::node	0.0.1.0	halogen	11-12
# ::node	0.1	amr-unknown	
# ::root	0	safe-01
# ::edge	replace-01	ARG1	switch	0.0	0.0.0
# ::edge	replace-01	ARG2	spot	0.0	0.0.1
# ::edge	safe-01	ARG0	amr-unknown	0	0.1
# ::edge	safe-01	ARG1	replace-01	0	0.0
# ::edge	spot	mod	halogen	0.0.1	0.0.1.0
# ::edge	switch	mod	dimmer	0.0.0	0.0.0.0
(MRPNode-0 / safe-01 :ARG1 (MRPNode-1 / replace-01 :ARG1 (MRPNode-2 / switch :mod (MRPNode-3 / dimmer)) :ARG2 (MRPNode-4 / spot :mod (MRPNode-5 / halogen))) :ARG0 (MRPNode-6 / amr-unknown))

# ::id 131
# ::snt What is the best way to store chopped vegetables?
# ::tok What is the best way to store chopped vegetables ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 8-9|0.3.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.250419 ::parser eager_oracle ::smatch 0.7407407407407407 ::n_actions 27
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	vegetable	8-9
# ::node	0.3.0.0	cook-01	
# ::root	0	way
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	store-01	ARG1	vegetable	0.3	0.3.0
# ::edge	vegetable	ARG1-of	cook-01	0.3.0	0.3.0.0
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	domain	have-degree-91	0	0.1
# ::edge	way	manner-of	good-02	0	0.0
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :manner-of (MRPNode-1 / good-02) :domain (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / vegetable :ARG1-of (MRPNode-7 / cook-01))))

# ::id 132
# ::snt What is the best way to store carrots?
# ::tok What is the best way to store carrots ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.254245 ::parser eager_oracle ::smatch 0.8 ::n_actions 26
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	carrot	7-8
# ::root	0	way
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	store-01	ARG1	carrot	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / carrot)))

# ::id 133
# ::snt How long will uncooked chicken keep in the fridge?
# ::tok How long will uncooked chicken keep in the fridge ?
# ::alignments 0-1|0.2 3-4|0.0.0+0.0.0.0 4-5|0.0 5-6|0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.258030 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	keep-01	5-6
# ::node	0.0	chicken	4-5
# ::node	0.0.0	cook-01	3-4
# ::node	0.0.0.0	-	3-4
# ::node	0.1	fridge	8-9
# ::node	0.2	amr-unknown	0-1
# ::root	0	keep-01
# ::edge	chicken	ARG1-of	cook-01	0.0	0.0.0
# ::edge	cook-01	polarity	-	0.0.0	0.0.0.0
# ::edge	keep-01	ARG1	chicken	0	0.0
# ::edge	keep-01	duration	amr-unknown	0	0.2
# ::edge	keep-01	location	fridge	0	0.1
(MRPNode-0 / keep-01 :ARG1 (MRPNode-1 / chicken :ARG1-of (MRPNode-2 / cook-01 :polarity -)) :location (MRPNode-3 / fridge) :duration (MRPNode-4 / amr-unknown))

# ::id 134
# ::snt How do I remove paint from pipes?
# ::tok How do I remove paint from pipes ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0 6-7|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:34.260673 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	remove-01	3-4
# ::node	0.0	paint	4-5
# ::node	0.1	i	2-3
# ::node	0.2	pipe	6-7
# ::node	0.3	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	remove-01	ARG0	i	0	0.1
# ::edge	remove-01	ARG1	paint	0	0.0
# ::edge	remove-01	ARG2	pipe	0	0.2
# ::edge	remove-01	manner	amr-unknown	0	0.3
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / paint) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / pipe) :manner (MRPNode-4 / amr-unknown))

# ::id 135
# ::snt How can I remove paint from slotted screw heads?
# ::tok How can I remove paint from slotted screw heads ?
# ::alignments 0-1|0.0.3 1-2|0 2-3|0.0.1 3-4|0.0 4-5|0.0.0 6-7|0.0.2.0 7-8|0.0.2.1 8-9|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:34.266191 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	possible-01	1-2
# ::node	0.0	remove-01	3-4
# ::node	0.0.0	paint	4-5
# ::node	0.0.1	i	2-3
# ::node	0.0.2	head	8-9
# ::node	0.0.2.0	slotted	6-7
# ::node	0.0.2.1	screw	7-8
# ::node	0.0.3	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	head	ARG1-of	slotted	0.0.2	0.0.2.0
# ::edge	head	part-of	screw	0.0.2	0.0.2.1
# ::edge	possible-01	ARG1	remove-01	0	0.0
# ::edge	remove-01	ARG0	i	0.0	0.0.1
# ::edge	remove-01	ARG1	paint	0.0	0.0.0
# ::edge	remove-01	ARG2	head	0.0	0.0.2
# ::edge	remove-01	manner	amr-unknown	0.0	0.0.3
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / remove-01 :ARG1 (MRPNode-2 / paint) :ARG0 (MRPNode-3 / i) :ARG2 (MRPNode-4 / head :ARG1-of (MRPNode-5 / slotted) :part-of (MRPNode-6 / screw)) :manner (MRPNode-7 / amr-unknown)))

# ::id 136
# ::snt How do I wire a replacement ceiling fan?
# ::tok How do I wire a replacement ceiling fan ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0.0 6-7|0.0.1 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.269421 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	wire-02	3-4
# ::node	0.0	fan	7-8
# ::node	0.0.0	replace-01	5-6
# ::node	0.0.1	ceiling	6-7
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	wire-02
# ::edge	fan	mod	ceiling	0.0	0.0.1
# ::edge	fan	mod	replace-01	0.0	0.0.0
# ::edge	wire-02	ARG0	i	0	0.1
# ::edge	wire-02	ARG1	fan	0	0.0
# ::edge	wire-02	ARG2	amr-unknown	0	0.2
(MRPNode-0 / wire-02 :ARG1 (MRPNode-1 / fan :mod (MRPNode-2 / replace-01) :mod (MRPNode-3 / ceiling)) :ARG0 (MRPNode-4 / i) :ARG2 (MRPNode-5 / amr-unknown))

# ::id 137
# ::snt How long can I store cooked rice in the refrigerator?
# ::tok How long can I store cooked rice in the refrigerator ?
# ::alignments 0-1|0.0.0.0 2-3|0 3-4|0.0.1 4-5|0.0 5-6|0.0.0.1 6-7|0.0.0 9-10|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:34.274180 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	possible-01	2-3
# ::node	0.0	store-01	4-5
# ::node	0.0.0	rice	6-7
# ::node	0.0.0.0	amr-unknown	0-1
# ::node	0.0.0.1	cook-01	5-6
# ::node	0.0.1	i	3-4
# ::node	0.0.2	refrigerator	9-10
# ::root	0	possible-01
# ::edge	possible-01	ARG1	store-01	0	0.0
# ::edge	rice	ARG1-of	amr-unknown	0.0.0	0.0.0.0
# ::edge	rice	ARG1-of	cook-01	0.0.0	0.0.0.1
# ::edge	store-01	ARG0	i	0.0	0.0.1
# ::edge	store-01	ARG1	rice	0.0	0.0.0
# ::edge	store-01	ARG2	refrigerator	0.0	0.0.2
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / store-01 :ARG1 (MRPNode-2 / rice :ARG1-of (MRPNode-3 / amr-unknown) :ARG1-of (MRPNode-4 / cook-01)) :ARG0 (MRPNode-5 / i) :ARG2 (MRPNode-6 / refrigerator)))

# ::id 138
# ::snt What's the best way to store asparagus?
# ::tok What 's the best way to store asparagus ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.278048 ::parser eager_oracle ::smatch 0.8 ::n_actions 26
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	asparagus	7-8
# ::root	0	way
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	store-01	ARG1	asparagus	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / asparagus)))

# ::id 139
# ::snt How do you teach a toddler not to share?
# ::tok How do you teach a toddler not to share ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0.1 6-7|0.0.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.281343 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	teach-01	3-4
# ::node	0.0	share-01	8-9
# ::node	0.0.0	-	6-7
# ::node	0.0.1	toddler	5-6
# ::node	0.1	you	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	teach-01
# ::edge	share-01	ARG0	toddler	0.0	0.0.1
# ::edge	share-01	polarity	-	0.0	0.0.0
# ::edge	teach-01	ARG0	you	0	0.1
# ::edge	teach-01	ARG1	share-01	0	0.0
# ::edge	teach-01	ARG2	toddler	0	0.0.1
# ::edge	teach-01	manner	amr-unknown	0	0.2
(MRPNode-0 / teach-01 :ARG1 (MRPNode-1 / share-01 :polarity - :ARG0 (MRPNode-3 / toddler)) :ARG0 (MRPNode-2 / you) :ARG2 MRPNode-3 :manner (MRPNode-4 / amr-unknown))

# ::id 140
# ::snt How can I replace a ceiling fan with a regular light fixture?
# ::tok How can I replace a ceiling fan with a regular light fixture ?
# ::alignments 0-1|0.0.3 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0.0 6-7|0.0.0 9-10|0.0.2.0 10-11|0.0.2.1 11-12|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:34.287924 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	possible-01	1-2
# ::node	0.0	replace-01	3-4
# ::node	0.0.0	fan	6-7
# ::node	0.0.0.0	ceiling	5-6
# ::node	0.0.1	i	2-3
# ::node	0.0.2	fixture	11-12
# ::node	0.0.2.0	regular-02	9-10
# ::node	0.0.2.1	light	10-11
# ::node	0.0.3	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	fan	mod	ceiling	0.0.0	0.0.0.0
# ::edge	fixture	ARG1-of	regular-02	0.0.2	0.0.2.0
# ::edge	fixture	mod	light	0.0.2	0.0.2.1
# ::edge	possible-01	ARG1	replace-01	0	0.0
# ::edge	replace-01	ARG0	i	0.0	0.0.1
# ::edge	replace-01	ARG1	fan	0.0	0.0.0
# ::edge	replace-01	ARG2	fixture	0.0	0.0.2
# ::edge	replace-01	manner	amr-unknown	0.0	0.0.3
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / replace-01 :ARG1 (MRPNode-2 / fan :mod (MRPNode-3 / ceiling)) :ARG0 (MRPNode-4 / i) :ARG2 (MRPNode-5 / fixture :ARG1-of (MRPNode-6 / regular-02) :mod (MRPNode-7 / light)) :manner (MRPNode-8 / amr-unknown)))

# ::id 141
# ::snt How can I repair my floors' finish?
# ::tok How can I repair my floors ' finish ?
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 4-5|0.0.1.0.0 5-6|0.0.1.0 7-8|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.293060 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	possible-01	1-2
# ::node	0.0	repair-01	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	finish-01	7-8
# ::node	0.0.1.0	floor	5-6
# ::node	0.0.1.0.0	i	4-5
# ::root	0	possible-01
# ::edge	finish-01	ARG1	floor	0.0.1	0.0.1.0
# ::edge	floor	poss	i	0.0.1.0	0.0.1.0.0
# ::edge	possible-01	ARG1	repair-01	0	0.0
# ::edge	repair-01	ARG0	i	0.0	0.0.1.0.0
# ::edge	repair-01	ARG1	amr-unknown	0.0	0.0.0
# ::edge	repair-01	ARG1	finish-01	0.0	0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / repair-01 :ARG1 (MRPNode-2 / amr-unknown) :ARG1 (MRPNode-3 / finish-01 :ARG1 (MRPNode-4 / floor :poss (MRPNode-5 / i))) :ARG0 MRPNode-5))

# ::id 142
# ::snt Where can I find a good online thesaurus?
# ::tok Where can I find a good online thesaurus ?
# ::alignments 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0.1 6-7|0.0.0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.296864 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 29
# ::node	0	possible-01	1-2
# ::node	0.0	find-01	3-4
# ::node	0.0.0	thesaurus	7-8
# ::node	0.0.0.0	online	6-7
# ::node	0.0.0.1	good-02	5-6
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	
# ::root	0	possible-01
# ::edge	find-01	ARG0	i	0.0	0.0.1
# ::edge	find-01	ARG1	thesaurus	0.0	0.0.0
# ::edge	find-01	location	amr-unknown	0.0	0.0.2
# ::edge	possible-01	ARG1	find-01	0	0.0
# ::edge	thesaurus	ARG1-of	good-02	0.0.0	0.0.0.1
# ::edge	thesaurus	mod	online	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / find-01 :ARG1 (MRPNode-2 / thesaurus :mod (MRPNode-3 / online) :ARG1-of (MRPNode-4 / good-02)) :ARG0 (MRPNode-5 / i) :location (MRPNode-6 / amr-unknown)))

# ::id 143
# ::snt How can I repair a leaking shower?
# ::tok How can I repair a leaking shower ?
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.300380 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	possible-01	1-2
# ::node	0.0	repair-01	3-4
# ::node	0.0.0	shower	6-7
# ::node	0.0.0.0	leak-01	5-6
# ::node	0.0.1	i	2-3
# ::node	0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	possible-01	ARG1	repair-01	0	0.0
# ::edge	possible-01	manner	amr-unknown	0	0.1
# ::edge	repair-01	ARG0	i	0.0	0.0.1
# ::edge	repair-01	ARG1	shower	0.0	0.0.0
# ::edge	shower	ARG0-of	leak-01	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / repair-01 :ARG1 (MRPNode-2 / shower :ARG0-of (MRPNode-3 / leak-01)) :ARG0 (MRPNode-4 / i)) :manner (MRPNode-5 / amr-unknown))

# ::id 144
# ::snt How do I measure a standard sliding glass door?
# ::tok How do I measure a standard sliding glass door ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0.1 6-7|0.0.0.0 7-8|0.0.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.304346 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	measure-01	3-4
# ::node	0.0	door	8-9
# ::node	0.0.0	glass	7-8
# ::node	0.0.0.0	slide-01	6-7
# ::node	0.0.1	standard-02	5-6
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	measure-01
# ::edge	door	ARG1-of	glass	0.0	0.0.0
# ::edge	door	ARG1-of	standard-02	0.0	0.0.1
# ::edge	glass	mod	slide-01	0.0.0	0.0.0.0
# ::edge	measure-01	ARG0	i	0	0.1
# ::edge	measure-01	ARG1	door	0	0.0
# ::edge	measure-01	ARG2	amr-unknown	0	0.2
(MRPNode-0 / measure-01 :ARG1 (MRPNode-1 / door :ARG1-of (MRPNode-2 / glass :mod (MRPNode-3 / slide-01)) :ARG1-of (MRPNode-4 / standard-02)) :ARG0 (MRPNode-5 / i) :ARG2 (MRPNode-6 / amr-unknown))

# ::id 145
# ::snt How do I remove this shower fixture?
# ::tok How do I remove this shower fixture ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 4-5|0.0.0 5-6|0.0.1 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.307412 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	remove-01	3-4
# ::node	0.0	fixture	6-7
# ::node	0.0.0	this	4-5
# ::node	0.0.1	shower	5-6
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	fixture	mod	shower	0.0	0.0.1
# ::edge	fixture	mod	this	0.0	0.0.0
# ::edge	remove-01	ARG0	i	0	0.1
# ::edge	remove-01	ARG1	fixture	0	0.0
# ::edge	remove-01	manner	amr-unknown	0	0.2
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / fixture :mod (MRPNode-2 / this) :mod (MRPNode-3 / shower)) :ARG0 (MRPNode-4 / i) :manner (MRPNode-5 / amr-unknown))

# ::id 146
# ::snt How do I remove paint from a porous table top?
# ::tok How do I remove paint from a porous table top ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0 7-8|0.2.0 8-9|0.2.1 9-10|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:34.311474 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	remove-01	3-4
# ::node	0.0	paint	4-5
# ::node	0.1	i	2-3
# ::node	0.2	top	9-10
# ::node	0.2.0	porous	7-8
# ::node	0.2.1	table	8-9
# ::node	0.3	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	remove-01	ARG0	i	0	0.1
# ::edge	remove-01	ARG1	paint	0	0.0
# ::edge	remove-01	ARG2	top	0	0.2
# ::edge	remove-01	manner	amr-unknown	0	0.3
# ::edge	top	mod	porous	0.2	0.2.0
# ::edge	top	mod	table	0.2	0.2.1
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / paint) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / top :mod (MRPNode-4 / porous) :mod (MRPNode-5 / table)) :manner (MRPNode-6 / amr-unknown))

# ::id 147
# ::snt Why do admissions committees consider the Statement of Purpose to be important?
# ::tok Why do admissions committees consider the Statement of Purpose to be important ?
# ::alignments 2-3|0.1.0 3-4|0.1 4-5|0+0.2 6-7|0.0.0 11-12|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.317149 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 34
# ::node	0	consider-01	4-5
# ::node	0.0	important-01	11-12
# ::node	0.0.0	state-01	6-7
# ::node	0.1	committee	3-4
# ::node	0.1.0	admit-02	2-3
# ::node	0.2	cause-01	4-5
# ::node	0.2.0	amr-unknown	
# ::root	0	consider-01
# ::edge	cause-01	ARG0	amr-unknown	0.2	0.2.0
# ::edge	committee	ARG0-of	admit-02	0.1	0.1.0
# ::edge	consider-01	ARG0	committee	0	0.1
# ::edge	consider-01	ARG1	important-01	0	0.0
# ::edge	consider-01	ARG1-of	cause-01	0	0.2
# ::edge	important-01	ARG1	state-01	0.0	0.0.0
(MRPNode-0 / consider-01 :ARG1 (MRPNode-1 / important-01 :ARG1 (MRPNode-2 / state-01)) :ARG0 (MRPNode-3 / committee :ARG0-of (MRPNode-4 / admit-02)) :ARG1-of (MRPNode-5 / cause-01 :ARG0 (MRPNode-6 / amr-unknown)))

# ::id 148
# ::snt I have a Layover in Japan, Going to stayfor a month, Do I need a Transit Visa?
# ::tok I have a Layover in Japan , Going to stayfor a month , Do I need a Transit Visa ?
# ::alignments 0-1|0.0.1 1-2|0.0 3-4|0.0.0+0.0.0.0+0.0.0.0.0 5-6|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 11-12|0.0.0.2.0+0.0.0.2.0.1 15-16|0.1 17-19|0.1.1+0.1.1.0+0.1.1.0.0+0.1.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.337053 ::parser eager_oracle ::smatch 0.7868852459016393 ::n_actions 47
# ::node	0	and	
# ::node	0.0	have-03	1-2
# ::node	0.0.0	facility	3-4
# ::node	0.0.0.0	name	3-4
# ::node	0.0.0.0.0	layover	3-4
# ::node	0.0.0.1	country	5-6
# ::node	0.0.0.1.0	name	5-6
# ::node	0.0.0.1.0.0	japan	5-6
# ::node	0.0.0.2	reside-01	
# ::node	0.0.0.2.0	temporal-quantity	11-12
# ::node	0.0.0.2.0.0	1	
# ::node	0.0.0.2.0.1	month	11-12
# ::node	0.0.1	i	0-1
# ::node	0.1	need-01	15-16
# ::node	0.1.0	amr-unknown	
# ::node	0.1.1	product	17-19
# ::node	0.1.1.0	name	17-19
# ::node	0.1.1.0.0	transit	17-19
# ::node	0.1.1.0.1	visa	17-19
# ::root	0	and
# ::edge	and	op1	have-03	0	0.0
# ::edge	and	op2	need-01	0	0.1
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	facility	location	country	0.0.0	0.0.0.1
# ::edge	facility	location	reside-01	0.0.0	0.0.0.2
# ::edge	facility	name	name	0.0.0	0.0.0.0
# ::edge	have-03	ARG0	i	0.0	0.0.1
# ::edge	have-03	ARG1	facility	0.0	0.0.0
# ::edge	name	op1	japan	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op1	layover	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	transit	0.1.1.0	0.1.1.0.0
# ::edge	name	op2	visa	0.1.1.0	0.1.1.0.1
# ::edge	need-01	ARG0	i	0.1	0.0.1
# ::edge	need-01	ARG1	amr-unknown	0.1	0.1.0
# ::edge	need-01	ARG1	product	0.1	0.1.1
# ::edge	product	name	name	0.1.1	0.1.1.0
# ::edge	reside-01	duration	temporal-quantity	0.0.0.2	0.0.0.2.0
# ::edge	temporal-quantity	quant	1	0.0.0.2.0	0.0.0.2.0.0
# ::edge	temporal-quantity	unit	month	0.0.0.2.0	0.0.0.2.0.1
(MRPNode-0 / and :op1 (MRPNode-1 / have-03 :ARG1 (MRPNode-2 / facility :name (MRPNode-3 / name :op1 layover) :location (MRPNode-4 / country :name (MRPNode-5 / name :op1 japan)) :location (MRPNode-6 / reside-01 :duration (MRPNode-7 / temporal-quantity :quant 1 :unit (MRPNode-8 / month)))) :ARG0 (MRPNode-9 / i)) :op2 (MRPNode-10 / need-01 :ARG0 MRPNode-9 :ARG1 (MRPNode-11 / amr-unknown) :ARG1 (MRPNode-12 / product :name (MRPNode-13 / name :op1 transit :op2 visa))))

# ::id 149
# ::snt How long does uncooked meat last when kept in the freezer?
# ::tok How long does uncooked meat last when kept in the freezer ?
# ::alignments 0-1|0.1 3-4|0.0.0+0.0.0.0 4-5|0.0 5-6|0 7-8|0.2 10-11|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.342274 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	last-01	5-6
# ::node	0.0	meat	4-5
# ::node	0.0.0	cook-01	3-4
# ::node	0.0.0.0	-	3-4
# ::node	0.1	amr-unknown	0-1
# ::node	0.2	keep-01	7-8
# ::node	0.2.0	freezer	10-11
# ::root	0	last-01
# ::edge	cook-01	polarity	-	0.0.0	0.0.0.0
# ::edge	keep-01	ARG1	meat	0.2	0.0
# ::edge	keep-01	location	freezer	0.2	0.2.0
# ::edge	last-01	ARG1	meat	0	0.0
# ::edge	last-01	ARG2	amr-unknown	0	0.1
# ::edge	last-01	time	keep-01	0	0.2
# ::edge	meat	ARG1-of	cook-01	0.0	0.0.0
(MRPNode-0 / last-01 :ARG1 (MRPNode-1 / meat :ARG1-of (MRPNode-2 / cook-01 :polarity -)) :ARG2 (MRPNode-3 / amr-unknown) :time (MRPNode-4 / keep-01 :ARG1 MRPNode-1 :location (MRPNode-5 / freezer)))

# ::id 150
# ::snt Is it appropriate to send a gift to a professor for an online course?
# ::tok Is it appropriate to send a gift to a professor for an online course ?
# ::alignments 2-3|0 4-5|0.0 6-7|0.0.0 9-10|0.0.1 12-13|0.0.1.0.0 13-14|0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.347455 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 35
# ::node	0	appropriate-02	2-3
# ::node	0.0	send-01	4-5
# ::node	0.0.0	gift	6-7
# ::node	0.0.1	professor	9-10
# ::node	0.0.1.0	course	13-14
# ::node	0.0.1.0.0	online	12-13
# ::node	0.1	amr-unknown	
# ::root	0	appropriate-02
# ::edge	appropriate-02	ARG1	send-01	0	0.0
# ::edge	appropriate-02	ARG2	amr-unknown	0	0.1
# ::edge	course	mod	online	0.0.1.0	0.0.1.0.0
# ::edge	professor	topic	course	0.0.1	0.0.1.0
# ::edge	send-01	ARG1	gift	0.0	0.0.0
# ::edge	send-01	ARG2	professor	0.0	0.0.1
(MRPNode-0 / appropriate-02 :ARG1 (MRPNode-1 / send-01 :ARG1 (MRPNode-2 / gift) :ARG2 (MRPNode-3 / professor :topic (MRPNode-4 / course :mod (MRPNode-5 / online)))) :ARG2 (MRPNode-6 / amr-unknown))

# ::id 151
# ::snt How to tell my company that I am having issues with my boss?
# ::tok How to tell my company that I am having issues with my boss ?
# ::alignments 0-1|0.1 2-3|0.0 4-5|0.0.1 8-9|0 9-10|0.0.0 11-12|0.0.0.0 12-13|0.0.0.0.0+0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.358904 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 43
# ::node	0	have-manner-91	8-9
# ::node	0.0	tell-01	2-3
# ::node	0.0.0	issue-02	9-10
# ::node	0.0.0.0	i	11-12
# ::node	0.0.0.0.0	have-rel-role-91	12-13
# ::node	0.0.0.0.0.0	boss	12-13
# ::node	0.0.0.0.0.1	person	
# ::node	0.0.1	company	4-5
# ::node	0.1	amr-unknown	0-1
# ::root	0	have-manner-91
# ::edge	have-manner-91	ARG1	tell-01	0	0.0
# ::edge	have-manner-91	ARG2	amr-unknown	0	0.1
# ::edge	have-rel-role-91	ARG0	person	0.0.0.0.0	0.0.0.0.0.1
# ::edge	have-rel-role-91	ARG2	boss	0.0.0.0.0	0.0.0.0.0.0
# ::edge	i	ARG1-of	have-rel-role-91	0.0.0.0	0.0.0.0.0
# ::edge	issue-02	ARG0	person	0.0.0	0.0.0.0.0.1
# ::edge	issue-02	ARG1	i	0.0.0	0.0.0.0
# ::edge	tell-01	ARG0	company	0.0	0.0.1
# ::edge	tell-01	ARG1	issue-02	0.0	0.0.0
(MRPNode-0 / have-manner-91 :ARG1 (MRPNode-1 / tell-01 :ARG1 (MRPNode-2 / issue-02 :ARG1 (MRPNode-3 / i :ARG1-of (MRPNode-4 / have-rel-role-91 :ARG2 (MRPNode-5 / boss) :ARG0 (MRPNode-6 / person))) :ARG0 MRPNode-6) :ARG0 (MRPNode-7 / company)) :ARG2 (MRPNode-8 / amr-unknown))

# ::id 152
# ::snt How to peel peaches?
# ::tok How to peel peaches ?
# ::alignments 0-1|0.1 2-3|0 3-4|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.360362 ::parser eager_oracle ::smatch 1.0 ::n_actions 16
# ::node	0	peel	2-3
# ::node	0.0	peach	3-4
# ::node	0.1	amr-unknown	0-1
# ::root	0	peel
# ::edge	peel	manner	amr-unknown	0	0.1
# ::edge	peel	manner	peach	0	0.0
(MRPNode-0 / peel :manner (MRPNode-1 / peach) :manner (MRPNode-2 / amr-unknown))

# ::id 153
# ::snt How do I measure a standard sliding glass door?
# ::tok How do I measure a standard sliding glass door ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0.1 6-7|0.0.0.0 7-8|0.0.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.364519 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	measure-01	3-4
# ::node	0.0	door	8-9
# ::node	0.0.0	glass	7-8
# ::node	0.0.0.0	slide-01	6-7
# ::node	0.0.1	standard-02	5-6
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	measure-01
# ::edge	door	ARG1-of	glass	0.0	0.0.0
# ::edge	door	ARG1-of	standard-02	0.0	0.0.1
# ::edge	glass	mod	slide-01	0.0.0	0.0.0.0
# ::edge	measure-01	ARG0	i	0	0.1
# ::edge	measure-01	ARG1	door	0	0.0
# ::edge	measure-01	ARG2	amr-unknown	0	0.2
(MRPNode-0 / measure-01 :ARG1 (MRPNode-1 / door :ARG1-of (MRPNode-2 / glass :mod (MRPNode-3 / slide-01)) :ARG1-of (MRPNode-4 / standard-02)) :ARG0 (MRPNode-5 / i) :ARG2 (MRPNode-6 / amr-unknown))

# ::id 154
# ::snt "What does ""university ranking"" mean for a graduate admissions committee?"
# ::tok " What does " " university ranking " " mean for a graduate admissions committee ? "
# ::alignments 1-2|0.0 5-6|0.1.0 6-7|0.1 9-10|0 12-13|0.2.0.0+0.2.0.0.0 13-14|0.2.0 14-15|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:34.375538 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	mean-01	9-10
# ::node	0.0	amr-unknown	1-2
# ::node	0.1	rank-01	6-7
# ::node	0.1.0	university	5-6
# ::node	0.2	committee	14-15
# ::node	0.2.0	admit-02	13-14
# ::node	0.2.0.0	person	12-13
# ::node	0.2.0.0.0	graduate-01	12-13
# ::root	0	mean-01
# ::edge	admit-02	ARG2	person	0.2.0	0.2.0.0
# ::edge	committee	ARG0-of	admit-02	0.2	0.2.0
# ::edge	mean-01	ARG0	rank-01	0	0.1
# ::edge	mean-01	ARG1	amr-unknown	0	0.0
# ::edge	mean-01	ARG2	committee	0	0.2
# ::edge	person	ARG1-of	graduate-01	0.2.0.0	0.2.0.0.0
# ::edge	rank-01	ARG2	university	0.1	0.1.0
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / amr-unknown) :ARG0 (MRPNode-2 / rank-01 :ARG2 (MRPNode-3 / university)) :ARG2 (MRPNode-4 / committee :ARG0-of (MRPNode-5 / admit-02 :ARG2 (MRPNode-6 / person :ARG1-of (MRPNode-7 / graduate-01)))))

# ::id 155
# ::snt How do I clean a Hammerite paint brush?
# ::tok How do I clean a Hammerite paint brush ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0.0 6-7|0.0.1 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.378807 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	clean-01	3-4
# ::node	0.0	brush	7-8
# ::node	0.0.0	Hammerite	5-6
# ::node	0.0.1	paint	6-7
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	clean-01
# ::edge	brush	mod	Hammerite	0.0	0.0.0
# ::edge	brush	purpose	paint	0.0	0.0.1
# ::edge	clean-01	ARG0	i	0	0.1
# ::edge	clean-01	ARG1	brush	0	0.0
# ::edge	clean-01	manner	amr-unknown	0	0.2
(MRPNode-0 / clean-01 :ARG1 (MRPNode-1 / brush :mod (MRPNode-2 / Hammerite) :purpose (MRPNode-3 / paint)) :ARG0 (MRPNode-4 / i) :manner (MRPNode-5 / amr-unknown))

# ::id 156
# ::snt How do I wire a combo with two supplies?
# ::tok How do I wire a combo with two supplies ?
# ::alignments 0-1|0.2 2-3|0.1 5-6|0.0 7-8|0.0.0.0 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.381787 ::parser eager_oracle ::smatch 0.5000000000000001 ::n_actions 25
# ::node	0	encrypt-01	
# ::node	0.0	combo	5-6
# ::node	0.0.0	supply-01	8-9
# ::node	0.0.0.0	2	7-8
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	encrypt-01
# ::edge	combo	ARG1-of	supply-01	0.0	0.0.0
# ::edge	encrypt-01	ARG0	i	0	0.1
# ::edge	encrypt-01	ARG1	combo	0	0.0
# ::edge	encrypt-01	manner	amr-unknown	0	0.2
# ::edge	supply-01	quant	2	0.0.0	0.0.0.0
(MRPNode-0 / encrypt-01 :ARG1 (MRPNode-1 / combo :ARG1-of (MRPNode-2 / supply-01 :quant 2)) :ARG0 (MRPNode-3 / i) :manner (MRPNode-4 / amr-unknown))

# ::id 157
# ::snt How should I cite StackOverflow questions in my term paper?
# ::tok How should I cite StackOverflow questions in my term paper ?
# ::alignments 0-1|0.0.3 1-2|0 2-3|0.0.1 3-4|0.0 4-5|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 5-6|0.0.0 8-9|0.0.2.0 9-10|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:34.390086 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	recommend-01	1-2
# ::node	0.0	cite-01	3-4
# ::node	0.0.0	question-01	5-6
# ::node	0.0.0.0	company	4-5
# ::node	0.0.0.0.0	name	4-5
# ::node	0.0.0.0.0.0	stackoverflow	4-5
# ::node	0.0.1	i	2-3
# ::node	0.0.2	paper	9-10
# ::node	0.0.2.0	term	8-9
# ::node	0.0.3	amr-unknown	0-1
# ::root	0	recommend-01
# ::edge	cite-01	ARG0	i	0.0	0.0.1
# ::edge	cite-01	ARG1	question-01	0.0	0.0.0
# ::edge	cite-01	ARG2	paper	0.0	0.0.2
# ::edge	cite-01	manner	amr-unknown	0.0	0.0.3
# ::edge	company	name	name	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	stackoverflow	0.0.0.0.0	0.0.0.0.0.0
# ::edge	paper	mod	term	0.0.2	0.0.2.0
# ::edge	question-01	ARG0	company	0.0.0	0.0.0.0
# ::edge	recommend-01	ARG1	cite-01	0	0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / cite-01 :ARG1 (MRPNode-2 / question-01 :ARG0 (MRPNode-3 / company :name (MRPNode-4 / name :op1 stackoverflow))) :ARG0 (MRPNode-5 / i) :ARG2 (MRPNode-6 / paper :mod (MRPNode-7 / term)) :manner (MRPNode-8 / amr-unknown)))

# ::id 158
# ::snt How do you get a child to eat?
# ::tok How do you get a child to eat ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.393274 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	get-04	3-4
# ::node	0.0	eat-01	7-8
# ::node	0.0.0	child	5-6
# ::node	0.1	you	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	get-04
# ::edge	eat-01	ARG0	child	0.0	0.0.0
# ::edge	get-04	ARG0	you	0	0.1
# ::edge	get-04	ARG1	eat-01	0	0.0
# ::edge	get-04	manner	amr-unknown	0	0.2
(MRPNode-0 / get-04 :ARG1 (MRPNode-1 / eat-01 :ARG0 (MRPNode-2 / child)) :ARG0 (MRPNode-3 / you) :manner (MRPNode-4 / amr-unknown))

# ::id 159
# ::snt Why doesn't my cat like being held?
# ::tok Why does n't my cat like being held ?
# ::alignments 3-4|0.0.0.0 4-5|0.0.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.396694 ::parser eager_oracle ::smatch 0.5263157894736842 ::n_actions 20
# ::node	0	dislike-01	
# ::node	0.0	hold-01	7-8
# ::node	0.0.0	cat	4-5
# ::node	0.0.0.0	i	3-4
# ::node	0.1	cause-01	
# ::node	0.1.0	amr-unknown	
# ::root	0	dislike-01
# ::edge	cat	poss	i	0.0.0	0.0.0.0
# ::edge	cause-01	ARG0	amr-unknown	0.1	0.1.0
# ::edge	dislike-01	ARG0	cat	0	0.0.0
# ::edge	dislike-01	ARG1	hold-01	0	0.0
# ::edge	dislike-01	ARG1-of	cause-01	0	0.1
# ::edge	hold-01	ARG1	cat	0.0	0.0.0
(MRPNode-0 / dislike-01 :ARG1 (MRPNode-1 / hold-01 :ARG1 (MRPNode-2 / cat :poss (MRPNode-3 / i))) :ARG0 MRPNode-2 :ARG1-of (MRPNode-4 / cause-01 :ARG0 (MRPNode-5 / amr-unknown)))

# ::id 160
# ::snt How do I level a pipe with the ground?
# ::tok How do I level a pipe with the ground ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 5-6|0.0 8-9|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:34.399498 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	level-01	3-4
# ::node	0.0	pipe	5-6
# ::node	0.1	i	2-3
# ::node	0.2	ground	8-9
# ::node	0.3	amr-unknown	0-1
# ::root	0	level-01
# ::edge	level-01	ARG0	i	0	0.1
# ::edge	level-01	ARG1	pipe	0	0.0
# ::edge	level-01	ARG2	ground	0	0.2
# ::edge	level-01	manner	amr-unknown	0	0.3
(MRPNode-0 / level-01 :ARG1 (MRPNode-1 / pipe) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / ground) :manner (MRPNode-4 / amr-unknown))

# ::id 161
# ::snt What type of screws should I use?
# ::tok What type of screws should I use ?
# ::alignments 0-1|0.0.0.0.0 1-2|0.0.0.0 3-4|0.0.0 4-5|0 5-6|0.0.1 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.403478 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	recommend-01	4-5
# ::node	0.0	use-01	6-7
# ::node	0.0.0	screw	3-4
# ::node	0.0.0.0	type	1-2
# ::node	0.0.0.0.0	amr-unknown	0-1
# ::node	0.0.1	i	5-6
# ::root	0	recommend-01
# ::edge	recommend-01	ARG1	use-01	0	0.0
# ::edge	screw	mod	type	0.0.0	0.0.0.0
# ::edge	type	mod	amr-unknown	0.0.0.0	0.0.0.0.0
# ::edge	use-01	ARG0	i	0.0	0.0.1
# ::edge	use-01	ARG1	screw	0.0	0.0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / use-01 :ARG1 (MRPNode-2 / screw :mod (MRPNode-3 / type :mod (MRPNode-4 / amr-unknown))) :ARG0 (MRPNode-5 / i)))

# ::id 162
# ::snt How do I make this paint match?
# ::tok How do I make this paint match ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 4-5|0.0.0.0 5-6|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.406620 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	make-02	3-4
# ::node	0.0	match-01	6-7
# ::node	0.0.0	paint	5-6
# ::node	0.0.0.0	this	4-5
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	make-02
# ::edge	make-02	ARG0	i	0	0.1
# ::edge	make-02	ARG1	match-01	0	0.0
# ::edge	make-02	manner	amr-unknown	0	0.2
# ::edge	match-01	ARG1	paint	0.0	0.0.0
# ::edge	paint	mod	this	0.0.0	0.0.0.0
(MRPNode-0 / make-02 :ARG1 (MRPNode-1 / match-01 :ARG1 (MRPNode-2 / paint :mod (MRPNode-3 / this))) :ARG0 (MRPNode-4 / i) :manner (MRPNode-5 / amr-unknown))

# ::id 163
# ::snt What is the best way to introduce cats to newborns?
# ::tok What is the best way to introduce cats to newborns ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0 9-10|0.3.1+0.3.1.0+0.3.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.415769 ::parser eager_oracle ::smatch 0.8648648648648648 ::n_actions 39
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	introduce-01	6-7
# ::node	0.3.0	cat	7-8
# ::node	0.3.1	person	9-10
# ::node	0.3.1.0	have-rel-role-91	9-10
# ::node	0.3.1.0.0	newborn	9-10
# ::root	0	way
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	have-rel-role-91	ARG2	newborn	0.3.1.0	0.3.1.0.0
# ::edge	introduce-01	ARG1	cat	0.3	0.3.0
# ::edge	introduce-01	ARG2	person	0.3	0.3.1
# ::edge	person	ARG0-of	have-rel-role-91	0.3.1	0.3.1.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	introduce-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / introduce-01 :ARG1 (MRPNode-6 / cat) :ARG2 (MRPNode-7 / person :ARG0-of (MRPNode-8 / have-rel-role-91 :ARG2 (MRPNode-9 / newborn)))))

# ::id 164
# ::snt What is the best way to store ground coffee?
# ::tok What is the best way to store ground coffee ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0.0 8-9|0.3.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.420505 ::parser eager_oracle ::smatch 0.8275862068965517 ::n_actions 30
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	coffee	8-9
# ::node	0.3.0.0	ground	7-8
# ::root	0	way
# ::edge	coffee	mod	ground	0.3.0	0.3.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	store-01	ARG1	coffee	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / coffee :mod (MRPNode-7 / ground))))

# ::id 165
# ::snt Is it possible to write a song without a key?
# ::tok Is it possible to write a song without a key ?
# ::alignments 2-3|0 4-5|0.0 6-7|0.0.0 7-8|0.0.1.0 9-10|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.423691 ::parser eager_oracle ::smatch 0.9 ::n_actions 28
# ::node	0	possible-01	2-3
# ::node	0.0	write-01	4-5
# ::node	0.0.0	song	6-7
# ::node	0.0.1	key	9-10
# ::node	0.0.1.0	-	7-8
# ::node	0.1	amr-unknown	
# ::root	0	possible-01
# ::edge	key	polarity	-	0.0.1	0.0.1.0
# ::edge	possible-01	ARG1	write-01	0	0.0
# ::edge	possible-01	manner	amr-unknown	0	0.1
# ::edge	write-01	ARG1	song	0.0	0.0.0
# ::edge	write-01	manner	key	0.0	0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / write-01 :ARG1 (MRPNode-2 / song) :manner (MRPNode-3 / key :polarity -)) :manner (MRPNode-4 / amr-unknown))

# ::id 166
# ::snt How long should I wait for plaster to dry/cure between coats?
# ::tok How long should I wait for plaster to dry / cure between coats ?
# ::alignments 0-1|0.0.2 2-3|0 3-4|0.0.0 4-5|0.0 6-7|0.0.1.0.0 8-9|0.0.1.0 9-10|0.0.1 10-11|0.0.1.1 11-12|0.0.1.1.0 12-13|0.0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.433766 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	recommend-01	2-3
# ::node	0.0	wait-01	4-5
# ::node	0.0.0	i	3-4
# ::node	0.0.1	slash	9-10
# ::node	0.0.1.0	dry-02	8-9
# ::node	0.0.1.0.0	plaster	6-7
# ::node	0.0.1.1	cure-01	10-11
# ::node	0.0.1.1.0	between	11-12
# ::node	0.0.1.1.0.0	coat	12-13
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	recommend-01
# ::edge	between	op1	coat	0.0.1.1.0	0.0.1.1.0.0
# ::edge	cure-01	ARG1	plaster	0.0.1.1	0.0.1.0.0
# ::edge	cure-01	ARG2	between	0.0.1.1	0.0.1.1.0
# ::edge	dry-02	ARG1	plaster	0.0.1.0	0.0.1.0.0
# ::edge	recommend-01	ARG1	wait-01	0	0.0
# ::edge	slash	op1	dry-02	0.0.1	0.0.1.0
# ::edge	slash	op2	cure-01	0.0.1	0.0.1.1
# ::edge	wait-01	ARG1	i	0.0	0.0.0
# ::edge	wait-01	ARG2	amr-unknown	0.0	0.0.2
# ::edge	wait-01	ARG2	slash	0.0	0.0.1
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / wait-01 :ARG1 (MRPNode-2 / i) :ARG2 (MRPNode-3 / slash :op1 (MRPNode-4 / dry-02 :ARG1 (MRPNode-5 / plaster)) :op2 (MRPNode-6 / cure-01 :ARG1 MRPNode-5 :ARG2 (MRPNode-7 / between :op1 (MRPNode-8 / coat)))) :ARG2 (MRPNode-9 / amr-unknown)))

# ::id 167
# ::snt How long can I keep bread dough in the refrigerator?
# ::tok How long can I keep bread dough in the refrigerator ?
# ::alignments 0-1|0.0.0.0 2-3|0 3-4|0.0.1 4-5|0.0 5-6|0.0.0.1 6-7|0.0.0 9-10|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:34.440844 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	possible-01	2-3
# ::node	0.0	keep-01	4-5
# ::node	0.0.0	dough	6-7
# ::node	0.0.0.0	amr-unknown	0-1
# ::node	0.0.0.1	bread	5-6
# ::node	0.0.1	i	3-4
# ::node	0.0.2	refrigerator	9-10
# ::root	0	possible-01
# ::edge	dough	consist-of	bread	0.0.0	0.0.0.1
# ::edge	dough	mod	amr-unknown	0.0.0	0.0.0.0
# ::edge	keep-01	ARG0	i	0.0	0.0.1
# ::edge	keep-01	ARG1	dough	0.0	0.0.0
# ::edge	keep-01	location	refrigerator	0.0	0.0.2
# ::edge	possible-01	ARG1	keep-01	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / keep-01 :ARG1 (MRPNode-2 / dough :mod (MRPNode-3 / amr-unknown) :consist-of (MRPNode-4 / bread)) :ARG0 (MRPNode-5 / i) :location (MRPNode-6 / refrigerator)))

# ::id 168
# ::snt How do I install a new interior partition wall?
# ::tok How do I install a new interior partition wall ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0.1 6-7|0.0.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.444862 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	install-01	3-4
# ::node	0.0	wall	8-9
# ::node	0.0.0	interior	6-7
# ::node	0.0.1	new-01	5-6
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	install-01
# ::edge	install-01	ARG0	i	0	0.1
# ::edge	install-01	ARG1	wall	0	0.0
# ::edge	install-01	ARG2	amr-unknown	0	0.2
# ::edge	wall	ARG1-of	new-01	0.0	0.0.1
# ::edge	wall	mod	interior	0.0	0.0.0
(MRPNode-0 / install-01 :ARG1 (MRPNode-1 / wall :mod (MRPNode-2 / interior) :ARG1-of (MRPNode-3 / new-01)) :ARG0 (MRPNode-4 / i) :ARG2 (MRPNode-5 / amr-unknown))

# ::id 169
# ::snt How do I make this paint match?
# ::tok How do I make this paint match ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 4-5|0.0.0.0 5-6|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.448116 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	make-02	3-4
# ::node	0.0	match-01	6-7
# ::node	0.0.0	paint	5-6
# ::node	0.0.0.0	this	4-5
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	make-02
# ::edge	make-02	ARG0	i	0	0.1
# ::edge	make-02	ARG1	match-01	0	0.0
# ::edge	make-02	manner	amr-unknown	0	0.2
# ::edge	match-01	ARG1	paint	0.0	0.0.0
# ::edge	paint	mod	this	0.0.0	0.0.0.0
(MRPNode-0 / make-02 :ARG1 (MRPNode-1 / match-01 :ARG1 (MRPNode-2 / paint :mod (MRPNode-3 / this))) :ARG0 (MRPNode-4 / i) :manner (MRPNode-5 / amr-unknown))

# ::id 170
# ::snt What is the best way to fix this garage floor?
# ::tok What is the best way to fix this garage floor ?
# ::alignments 0-1|0.3 3-4|0.0 4-5|0 6-7|0.2 7-8|0.2.0.0 8-9|0.2.0.1 9-10|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.453944 ::parser eager_oracle ::smatch 0.8484848484848484 ::n_actions 34
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	fix-02	6-7
# ::node	0.2.0	floor	9-10
# ::node	0.2.0.0	this	7-8
# ::node	0.2.0.1	garage	8-9
# ::node	0.3	amr-unknown	0-1
# ::root	0	way
# ::edge	fix-02	ARG1	floor	0.2	0.2.0
# ::edge	floor	mod	garage	0.2.0	0.2.0.1
# ::edge	floor	mod	this	0.2.0	0.2.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.3
# ::edge	way	manner-of	fix-02	0	0.2
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :manner-of (MRPNode-4 / fix-02 :ARG1 (MRPNode-5 / floor :mod (MRPNode-6 / this) :mod (MRPNode-7 / garage))) :domain (MRPNode-8 / amr-unknown))

# ::id 171
# ::snt What's the best way to store unused sushi rice?
# ::tok What 's the best way to store unused sushi rice ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 8-9|0.3.0.1+0.3.0.1.0+0.3.0.1.0.0 9-10|0.3.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.461606 ::parser eager_oracle ::smatch 0.7894736842105263 ::n_actions 31
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	rice	9-10
# ::node	0.3.0.0	use-01	
# ::node	0.3.0.0.0	-	
# ::node	0.3.0.1	product	8-9
# ::node	0.3.0.1.0	name	8-9
# ::node	0.3.0.1.0.0	sushi	8-9
# ::root	0	way
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	name	op1	sushi	0.3.0.1.0	0.3.0.1.0.0
# ::edge	product	name	name	0.3.0.1	0.3.0.1.0
# ::edge	rice	ARG1-of	use-01	0.3.0	0.3.0.0
# ::edge	rice	mod	product	0.3.0	0.3.0.1
# ::edge	store-01	ARG1	rice	0.3	0.3.0
# ::edge	use-01	polarity	-	0.3.0.0	0.3.0.0.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	domain	have-degree-91	0	0.1
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :domain (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / rice :ARG1-of (MRPNode-7 / use-01 :polarity -) :mod (MRPNode-8 / product :name (MRPNode-9 / name :op1 sushi)))))

# ::id 172
# ::snt What type of faucet is this?
# ::tok What type of faucet is this ?
# ::alignments 0-1|0.0.0 1-2|0.0 3-4|0 5-6|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.463886 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	faucet	3-4
# ::node	0.0	type	1-2
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	this	5-6
# ::root	0	faucet
# ::edge	faucet	mod	type	0	0.0
# ::edge	type	mod	amr-unknown	0.0	0.0.0
# ::edge	type	mod	this	0.0	0.0.1
(MRPNode-0 / faucet :mod (MRPNode-1 / type :mod (MRPNode-2 / amr-unknown) :mod (MRPNode-3 / this)))

# ::id 173
# ::snt What is the difference between a mode and a scale?
# ::tok What is the difference between a mode and a scale ?
# ::alignments 0-1|0.2 3-4|0 6-7|0.0 9-10|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.466326 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	differ-02	3-4
# ::node	0.0	mode	6-7
# ::node	0.1	scale	9-10
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	mode	0	0.0
# ::edge	differ-02	ARG2	scale	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / mode) :ARG2 (MRPNode-2 / scale) :ARG3 (MRPNode-3 / amr-unknown))

# ::id 174
# ::snt What is the best way to introduce cats to newborns?
# ::tok What is the best way to introduce cats to newborns ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0 9-10|0.3.1+0.3.1.0+0.3.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.475344 ::parser eager_oracle ::smatch 0.8648648648648648 ::n_actions 39
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	introduce-01	6-7
# ::node	0.3.0	cat	7-8
# ::node	0.3.1	person	9-10
# ::node	0.3.1.0	have-rel-role-91	9-10
# ::node	0.3.1.0.0	newborn	9-10
# ::root	0	way
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	have-rel-role-91	ARG2	newborn	0.3.1.0	0.3.1.0.0
# ::edge	introduce-01	ARG1	cat	0.3	0.3.0
# ::edge	introduce-01	ARG2	person	0.3	0.3.1
# ::edge	person	ARG0-of	have-rel-role-91	0.3.1	0.3.1.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	introduce-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / introduce-01 :ARG1 (MRPNode-6 / cat) :ARG2 (MRPNode-7 / person :ARG0-of (MRPNode-8 / have-rel-role-91 :ARG2 (MRPNode-9 / newborn)))))

# ::id 175
# ::snt What is the best way to clean a grater?
# ::tok What is the best way to clean a grater ?
# ::alignments 0-1|0.3 3-4|0.0 4-5|0 6-7|0.2 8-9|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.479710 ::parser eager_oracle ::smatch 0.8 ::n_actions 27
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	clean-01	6-7
# ::node	0.2.0	grater	8-9
# ::node	0.3	amr-unknown	0-1
# ::root	0	way
# ::edge	clean-01	ARG1	grater	0.2	0.2.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.3
# ::edge	way	domain	clean-01	0	0.2
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / clean-01 :ARG1 (MRPNode-5 / grater)) :domain (MRPNode-6 / amr-unknown))

# ::id 176
# ::snt What is the best way to cite an anonymous writer?
# ::tok What is the best way to cite an anonymous writer ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 8-9|0.3.0.0 9-10|0.3.0+0.3.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.485698 ::parser eager_oracle ::smatch 0.8484848484848484 ::n_actions 35
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	cite-01	6-7
# ::node	0.3.0	person	9-10
# ::node	0.3.0.0	anonymous	8-9
# ::node	0.3.0.1	write-01	9-10
# ::root	0	way
# ::edge	cite-01	ARG1	person	0.3	0.3.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	person	ARG0-of	write-01	0.3.0	0.3.0.1
# ::edge	person	mod	anonymous	0.3.0	0.3.0.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	domain	have-degree-91	0	0.1
# ::edge	way	manner-of	cite-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :domain (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / cite-01 :ARG1 (MRPNode-6 / person :mod (MRPNode-7 / anonymous) :ARG0-of (MRPNode-8 / write-01))))

# ::id 177
# ::snt Where can I find a complete list of Freddie Green chords?
# ::tok Where can I find a complete list of Freddie Green chords ?
# ::alignments 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0.0.1 6-7|0.0.0+0.0.0.0 8-10|0.0.0.0.0.0+0.0.0.0.0.0.0+0.0.0.0.0.0.0.0+0.0.0.0.0.0.0.1 10-11|0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.496454 ::parser eager_oracle ::smatch 0.9523809523809523 ::n_actions 40
# ::node	0	possible-01	1-2
# ::node	0.0	find-01	3-4
# ::node	0.0.0	thing	6-7
# ::node	0.0.0.0	list-01	6-7
# ::node	0.0.0.0.0	chord	10-11
# ::node	0.0.0.0.0.0	person	8-10
# ::node	0.0.0.0.0.0.0	name	8-10
# ::node	0.0.0.0.0.0.0.0	freddie	8-10
# ::node	0.0.0.0.0.0.0.1	green	8-10
# ::node	0.0.0.0.1	complete-02	5-6
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	
# ::root	0	possible-01
# ::edge	chord	mod	person	0.0.0.0.0	0.0.0.0.0.0
# ::edge	find-01	ARG0	i	0.0	0.0.1
# ::edge	find-01	ARG1	thing	0.0	0.0.0
# ::edge	find-01	location	amr-unknown	0.0	0.0.2
# ::edge	list-01	ARG1	chord	0.0.0.0	0.0.0.0.0
# ::edge	list-01	ARG1-of	complete-02	0.0.0.0	0.0.0.0.1
# ::edge	name	op1	freddie	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0
# ::edge	name	op2	green	0.0.0.0.0.0.0	0.0.0.0.0.0.0.1
# ::edge	person	name	name	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	possible-01	ARG1	find-01	0	0.0
# ::edge	thing	ARG2-of	list-01	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / find-01 :ARG1 (MRPNode-2 / thing :ARG2-of (MRPNode-3 / list-01 :ARG1 (MRPNode-4 / chord :mod (MRPNode-5 / person :name (MRPNode-6 / name :op1 freddie :op2 green))) :ARG1-of (MRPNode-7 / complete-02))) :ARG0 (MRPNode-8 / i) :location (MRPNode-9 / amr-unknown)))

# ::id 178
# ::snt What is the difference between portamento and glissando?
# ::tok What is the difference between portamento and glissando ?
# ::alignments 0-1|0.2 3-4|0 5-6|0.0+0.0.0+0.0.0.0 7-8|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.499905 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	differ-02	3-4
# ::node	0.0	person	5-6
# ::node	0.0.0	name	5-6
# ::node	0.0.0.0	portamento	5-6
# ::node	0.1	event	7-8
# ::node	0.1.0	name	7-8
# ::node	0.1.0.0	glissando	7-8
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	person	0	0.0
# ::edge	differ-02	ARG2	event	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
# ::edge	event	name	name	0.1	0.1.0
# ::edge	name	op1	glissando	0.1.0	0.1.0.0
# ::edge	name	op1	portamento	0.0.0	0.0.0.0
# ::edge	person	name	name	0.0	0.0.0
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 portamento)) :ARG2 (MRPNode-3 / event :name (MRPNode-4 / name :op1 glissando)) :ARG3 (MRPNode-5 / amr-unknown))

# ::id 179
# ::snt What should I do if I have an idea but can't work on it immediately?
# ::tok What should I do if I have an idea but ca n't work on it immediately ?
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.0.1 3-4|0.0 6-7|0.0.3 8-9|0.0.1.0.1 11-12|0.0.2.0 12-13|0.0.1.0 15-16|0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.548761 ::parser eager_oracle ::smatch 0.9 ::n_actions 49
# ::node	0	recommend-01	1-2
# ::node	0.0	do-02	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	i	2-3
# ::node	0.0.1.0	work-01	12-13
# ::node	0.0.1.0.0	immediate	15-16
# ::node	0.0.1.0.1	idea	8-9
# ::node	0.0.2	possible-01	
# ::node	0.0.2.0	-	11-12
# ::node	0.0.3	have-03	6-7
# ::root	0	recommend-01
# ::edge	do-02	ARG0	i	0.0	0.0.1
# ::edge	do-02	ARG1	amr-unknown	0.0	0.0.0
# ::edge	do-02	condition	have-03	0.0	0.0.3
# ::edge	do-02	condition	possible-01	0.0	0.0.2
# ::edge	have-03	ARG0	i	0.0.3	0.0.1
# ::edge	have-03	ARG1	idea	0.0.3	0.0.1.0.1
# ::edge	i	ARG0-of	work-01	0.0.1	0.0.1.0
# ::edge	possible-01	ARG1	work-01	0.0.2	0.0.1.0
# ::edge	possible-01	polarity	-	0.0.2	0.0.2.0
# ::edge	recommend-01	ARG1	do-02	0	0.0
# ::edge	work-01	ARG1	idea	0.0.1.0	0.0.1.0.1
# ::edge	work-01	time	immediate	0.0.1.0	0.0.1.0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / amr-unknown) :ARG0 (MRPNode-3 / i :ARG0-of (MRPNode-4 / work-01 :time (MRPNode-5 / immediate) :ARG1 (MRPNode-8 / idea))) :condition (MRPNode-6 / possible-01 :polarity - :ARG1 MRPNode-4) :condition (MRPNode-7 / have-03 :ARG0 MRPNode-3 :ARG1 MRPNode-8)))

# ::id 180
# ::snt What is the best way to filter the Turkish coffee?
# ::tok What is the best way to filter the Turkish coffee ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 8-9|0.3.0.0+0.3.0.0.0+0.3.0.0.0.0 9-10|0.3.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.554481 ::parser eager_oracle ::smatch 0.8 ::n_actions 31
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	filter-02	6-7
# ::node	0.3.0	coffee	9-10
# ::node	0.3.0.0	country	8-9
# ::node	0.3.0.0.0	name	8-9
# ::node	0.3.0.0.0.0	turkey	8-9
# ::root	0	way
# ::edge	coffee	mod	country	0.3.0	0.3.0.0
# ::edge	country	name	name	0.3.0.0	0.3.0.0.0
# ::edge	filter-02	ARG1	coffee	0.3	0.3.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	name	op1	turkey	0.3.0.0.0	0.3.0.0.0.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	filter-02	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / filter-02 :ARG1 (MRPNode-6 / coffee :mod (MRPNode-7 / country :name (MRPNode-8 / name :op1 turkey)))))

# ::id 181
# ::snt What is the best way to clean a grater?
# ::tok What is the best way to clean a grater ?
# ::alignments 0-1|0.3 3-4|0.0 4-5|0 6-7|0.2 8-9|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.558857 ::parser eager_oracle ::smatch 0.8 ::n_actions 27
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	clean-01	6-7
# ::node	0.2.0	grater	8-9
# ::node	0.3	amr-unknown	0-1
# ::root	0	way
# ::edge	clean-01	ARG1	grater	0.2	0.2.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.3
# ::edge	way	domain	clean-01	0	0.2
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / clean-01 :ARG1 (MRPNode-5 / grater)) :domain (MRPNode-6 / amr-unknown))

# ::id 182
# ::snt What is the best way to clean a grater?
# ::tok What is the best way to clean a grater ?
# ::alignments 0-1|0.3 3-4|0.0 4-5|0 6-7|0.2 8-9|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.563059 ::parser eager_oracle ::smatch 0.8 ::n_actions 27
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	clean-01	6-7
# ::node	0.2.0	grater	8-9
# ::node	0.3	amr-unknown	0-1
# ::root	0	way
# ::edge	clean-01	ARG1	grater	0.2	0.2.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.3
# ::edge	way	domain	clean-01	0	0.2
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / clean-01 :ARG1 (MRPNode-5 / grater)) :domain (MRPNode-6 / amr-unknown))

# ::id 183
# ::snt What's the best way to store asparagus?
# ::tok What 's the best way to store asparagus ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.566903 ::parser eager_oracle ::smatch 0.8 ::n_actions 26
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	asparagus	7-8
# ::root	0	way
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	store-01	ARG1	asparagus	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / asparagus)))

# ::id 184
# ::snt What is the difference between a riff and a lick?
# ::tok What is the difference between a riff and a lick ?
# ::alignments 0-1|0.2 3-4|0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.569193 ::parser eager_oracle ::smatch 0.8571428571428571 ::n_actions 22
# ::node	0	differ-02	3-4
# ::node	0.0	riff	6-7
# ::node	0.1	kick-01	
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	riff	0	0.0
# ::edge	differ-02	ARG2	kick-01	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / riff) :ARG2 (MRPNode-2 / kick-01) :ARG3 (MRPNode-3 / amr-unknown))

# ::id 185
# ::snt what is the difference between Erebor and Moria?
# ::tok what is the difference between Erebor and Moria ?
# ::alignments 0-1|0.2 3-4|0 5-6|0.0+0.0.0+0.0.0.0 7-8|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.572432 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	differ-02	3-4
# ::node	0.0	person	5-6
# ::node	0.0.0	name	5-6
# ::node	0.0.0.0	erebor	5-6
# ::node	0.1	person	7-8
# ::node	0.1.0	name	7-8
# ::node	0.1.0.0	moria	7-8
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	person	0	0.0
# ::edge	differ-02	ARG2	person	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
# ::edge	name	op1	erebor	0.0.0	0.0.0.0
# ::edge	name	op1	moria	0.1.0	0.1.0.0
# ::edge	person	name	name	0.0	0.0.0
# ::edge	person	name	name	0.1	0.1.0
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 erebor)) :ARG2 (MRPNode-3 / person :name (MRPNode-4 / name :op1 moria)) :ARG3 (MRPNode-5 / amr-unknown))

# ::id 186
# ::snt What is the best way to clean a grater?
# ::tok What is the best way to clean a grater ?
# ::alignments 0-1|0.3 3-4|0.0 4-5|0 6-7|0.2 8-9|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.577823 ::parser eager_oracle ::smatch 0.8 ::n_actions 27
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	clean-01	6-7
# ::node	0.2.0	grater	8-9
# ::node	0.3	amr-unknown	0-1
# ::root	0	way
# ::edge	clean-01	ARG1	grater	0.2	0.2.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.3
# ::edge	way	domain	clean-01	0	0.2
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / clean-01 :ARG1 (MRPNode-5 / grater)) :domain (MRPNode-6 / amr-unknown))

# ::id 187
# ::snt What's the best way to keep my garage from freezing?
# ::tok What 's the best way to keep my garage from freezing ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.1.0 8-9|0.3.1 10-11|0.3.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.584979 ::parser eager_oracle ::smatch 0.8484848484848484 ::n_actions 35
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	keep-04	6-7
# ::node	0.3.0	freeze-01	10-11
# ::node	0.3.1	garage	8-9
# ::node	0.3.1.0	i	7-8
# ::root	0	way
# ::edge	garage	poss	i	0.3.1	0.3.1.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	keep-04	ARG1	freeze-01	0.3	0.3.0
# ::edge	keep-04	ARG1	garage	0.3	0.3.1
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	manner-of	amr-unknown	0	0.2
# ::edge	way	manner-of	keep-04	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :manner-of (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / keep-04 :ARG1 (MRPNode-6 / freeze-01) :ARG1 (MRPNode-7 / garage :poss (MRPNode-8 / i))))

# ::id 188
# ::snt What is the difference between a copula and a transitive verb?
# ::tok What is the difference between a copula and a transitive verb ?
# ::alignments 0-1|0.2 3-4|0 6-7|0.0 9-10|0.1.0 10-11|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.589371 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	differ-02	3-4
# ::node	0.0	copula	6-7
# ::node	0.1	verb	10-11
# ::node	0.1.0	transitive	9-10
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	copula	0	0.0
# ::edge	differ-02	ARG2	verb	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
# ::edge	verb	ARG0-of	transitive	0.1	0.1.0
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / copula) :ARG2 (MRPNode-2 / verb :ARG0-of (MRPNode-3 / transitive)) :ARG3 (MRPNode-4 / amr-unknown))

# ::id 189
# ::snt What is this stucco-like finish called?
# ::tok What is this stucco - like finish called ?
# ::alignments 0-1|0.0 2-3|0.1.0 3-4|0.1.1.0 5-6|0.1.1 6-7|0.1 7-8|0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.592918 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	call-01	7-8
# ::node	0.0	amr-unknown	0-1
# ::node	0.1	finish	6-7
# ::node	0.1.0	this	2-3
# ::node	0.1.1	resemble-01	5-6
# ::node	0.1.1.0	stucco	3-4
# ::root	0	call-01
# ::edge	call-01	ARG1	amr-unknown	0	0.0
# ::edge	call-01	ARG1	finish	0	0.1
# ::edge	finish	ARG1-of	resemble-01	0.1	0.1.1
# ::edge	finish	ARG1-of	this	0.1	0.1.0
# ::edge	resemble-01	ARG2	stucco	0.1.1	0.1.1.0
(MRPNode-0 / call-01 :ARG1 (MRPNode-1 / amr-unknown) :ARG1 (MRPNode-2 / finish :ARG1-of (MRPNode-3 / this) :ARG1-of (MRPNode-4 / resemble-01 :ARG2 (MRPNode-5 / stucco))))

# ::id 190
# ::snt What kind of bug is this?
# ::tok What kind of bug is this ?
# ::alignments 0-1|0.1 1-2|0.0 3-4|0 5-6|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.595209 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	bug	3-4
# ::node	0.0	kind	1-2
# ::node	0.0.0	this	5-6
# ::node	0.1	amr-unknown	0-1
# ::root	0	bug
# ::edge	bug	domain	amr-unknown	0	0.1
# ::edge	bug	mod	kind	0	0.0
# ::edge	kind	mod	this	0.0	0.0.0
(MRPNode-0 / bug :mod (MRPNode-1 / kind :mod (MRPNode-2 / this)) :domain (MRPNode-3 / amr-unknown))

# ::id 191
# ::snt What is the best way to start learning a new course?
# ::tok What is the best way to start learning a new course ?
# ::alignments 0-1|0.3 3-4|0.1 4-5|0 6-7|0.0 7-8|0.0.0 9-10|0.0.0.0.0 10-11|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.603286 ::parser eager_oracle ::smatch 0.8484848484848484 ::n_actions 35
# ::node	0	way	4-5
# ::node	0.0	start-01	6-7
# ::node	0.0.0	learn-01	7-8
# ::node	0.0.0.0	course	10-11
# ::node	0.0.0.0.0	new-01	9-10
# ::node	0.1	good-02	3-4
# ::node	0.2	have-degree-91	
# ::node	0.2.0	most	
# ::node	0.3	amr-unknown	0-1
# ::root	0	way
# ::edge	course	ARG1-of	new-01	0.0.0.0	0.0.0.0.0
# ::edge	have-degree-91	ARG2	good-02	0.2	0.1
# ::edge	have-degree-91	ARG3	most	0.2	0.2.0
# ::edge	learn-01	ARG1	course	0.0.0	0.0.0.0
# ::edge	start-01	ARG1	learn-01	0.0	0.0.0
# ::edge	way	ARG1-of	good-02	0	0.1
# ::edge	way	ARG1-of	have-degree-91	0	0.2
# ::edge	way	ARG1-of	start-01	0	0.0
# ::edge	way	domain	amr-unknown	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / start-01 :ARG1 (MRPNode-2 / learn-01 :ARG1 (MRPNode-3 / course :ARG1-of (MRPNode-4 / new-01)))) :ARG1-of (MRPNode-5 / good-02) :ARG1-of (MRPNode-6 / have-degree-91 :ARG2 MRPNode-5 :ARG3 (MRPNode-7 / most)) :domain (MRPNode-8 / amr-unknown))

# ::id 192
# ::snt What is the difference between portamento and glissando?
# ::tok What is the difference between portamento and glissando ?
# ::alignments 0-1|0.2 3-4|0 5-6|0.0+0.0.0+0.0.0.0 7-8|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.606613 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	differ-02	3-4
# ::node	0.0	person	5-6
# ::node	0.0.0	name	5-6
# ::node	0.0.0.0	portamento	5-6
# ::node	0.1	event	7-8
# ::node	0.1.0	name	7-8
# ::node	0.1.0.0	glissando	7-8
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	person	0	0.0
# ::edge	differ-02	ARG2	event	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
# ::edge	event	name	name	0.1	0.1.0
# ::edge	name	op1	glissando	0.1.0	0.1.0.0
# ::edge	name	op1	portamento	0.0.0	0.0.0.0
# ::edge	person	name	name	0.0	0.0.0
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 portamento)) :ARG2 (MRPNode-3 / event :name (MRPNode-4 / name :op1 glissando)) :ARG3 (MRPNode-5 / amr-unknown))

# ::id 193
# ::snt what is the difference between Erebor and Moria?
# ::tok what is the difference between Erebor and Moria ?
# ::alignments 0-1|0.2 3-4|0 5-6|0.0+0.0.0+0.0.0.0 7-8|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.609978 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	differ-02	3-4
# ::node	0.0	person	5-6
# ::node	0.0.0	name	5-6
# ::node	0.0.0.0	erebor	5-6
# ::node	0.1	person	7-8
# ::node	0.1.0	name	7-8
# ::node	0.1.0.0	moria	7-8
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	person	0	0.0
# ::edge	differ-02	ARG2	person	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
# ::edge	name	op1	erebor	0.0.0	0.0.0.0
# ::edge	name	op1	moria	0.1.0	0.1.0.0
# ::edge	person	name	name	0.0	0.0.0
# ::edge	person	name	name	0.1	0.1.0
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 erebor)) :ARG2 (MRPNode-3 / person :name (MRPNode-4 / name :op1 moria)) :ARG3 (MRPNode-5 / amr-unknown))

# ::id 194
# ::snt What is the best way to fix this garage floor?
# ::tok What is the best way to fix this garage floor ?
# ::alignments 0-1|0.3 3-4|0.0 4-5|0 6-7|0.2 7-8|0.2.0.0 8-9|0.2.0.1 9-10|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.617696 ::parser eager_oracle ::smatch 0.8484848484848484 ::n_actions 34
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	fix-02	6-7
# ::node	0.2.0	floor	9-10
# ::node	0.2.0.0	this	7-8
# ::node	0.2.0.1	garage	8-9
# ::node	0.3	amr-unknown	0-1
# ::root	0	way
# ::edge	fix-02	ARG1	floor	0.2	0.2.0
# ::edge	floor	mod	garage	0.2.0	0.2.0.1
# ::edge	floor	mod	this	0.2.0	0.2.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.3
# ::edge	way	manner-of	fix-02	0	0.2
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :manner-of (MRPNode-4 / fix-02 :ARG1 (MRPNode-5 / floor :mod (MRPNode-6 / this) :mod (MRPNode-7 / garage))) :domain (MRPNode-8 / amr-unknown))

# ::id 195
# ::snt What is the difference between chicken cubes and ground chicken?
# ::tok What is the difference between chicken cubes and ground chicken ?
# ::alignments 0-1|0.1 3-4|0 5-6|0.2 6-7|0.0 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.621479 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	differ-02	3-4
# ::node	0.0	cube	6-7
# ::node	0.0.0	ground	8-9
# ::node	0.1	amr-unknown	0-1
# ::node	0.2	chicken	5-6
# ::root	0	differ-02
# ::edge	cube	mod	ground	0.0	0.0.0
# ::edge	differ-02	ARG1	cube	0	0.0
# ::edge	differ-02	ARG2	amr-unknown	0	0.1
# ::edge	differ-02	ARG2	chicken	0	0.2
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / cube :mod (MRPNode-2 / ground)) :ARG2 (MRPNode-3 / amr-unknown) :ARG2 (MRPNode-4 / chicken))

# ::id 196
# ::snt What's the best way to store asparagus?
# ::tok What 's the best way to store asparagus ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.625418 ::parser eager_oracle ::smatch 0.8 ::n_actions 26
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	asparagus	7-8
# ::root	0	way
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	store-01	ARG1	asparagus	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / asparagus)))

# ::id 197
# ::snt What type of asbestos is this?
# ::tok What type of asbestos is this ?
# ::alignments 0-1|0.0.0 1-2|0.0 3-4|0 5-6|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.627643 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	asbestos	3-4
# ::node	0.0	type	1-2
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	this	5-6
# ::root	0	asbestos
# ::edge	asbestos	mod	type	0	0.0
# ::edge	type	mod	amr-unknown	0.0	0.0.0
# ::edge	type	mod	this	0.0	0.0.1
(MRPNode-0 / asbestos :mod (MRPNode-1 / type :mod (MRPNode-2 / amr-unknown) :mod (MRPNode-3 / this)))

# ::id 198
# ::snt "What does the ""to"" mean in the General Welfare Clause?"
# ::tok " What does the " " to " " mean in the General Welfare Clause ? "
# ::alignments 1-2|0.1 9-10|0 12-15|0.0+0.0.0+0.0.0.0+0.0.0.1+0.0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:34.632583 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	mean-01	9-10
# ::node	0.0	law	12-15
# ::node	0.0.0	name	12-15
# ::node	0.0.0.0	general	12-15
# ::node	0.0.0.1	welfare	12-15
# ::node	0.0.0.2	clause	12-15
# ::node	0.1	amr-unknown	1-2
# ::root	0	mean-01
# ::edge	law	name	name	0.0	0.0.0
# ::edge	mean-01	ARG1	law	0	0.0
# ::edge	mean-01	ARG2	amr-unknown	0	0.1
# ::edge	name	op1	general	0.0.0	0.0.0.0
# ::edge	name	op2	welfare	0.0.0	0.0.0.1
# ::edge	name	op3	clause	0.0.0	0.0.0.2
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / law :name (MRPNode-2 / name :op1 general :op2 welfare :op3 clause)) :ARG2 (MRPNode-3 / amr-unknown))

# ::id 199
# ::snt "What is the meaning of ""$N industry""?"
# ::tok " What is the meaning of " " $N industry " " ? "
# ::alignments 1-2|0 4-5|0.0 9-10|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.635578 ::parser eager_oracle ::smatch 0.5333333333333333 ::n_actions 24
# ::node	0	amr-unknown	1-2
# ::node	0.0	mean-01	4-5
# ::node	0.0.0	monetary-quantity	
# ::node	0.0.0.0	1	
# ::node	0.0.0.1	industry	9-10
# ::node	0.0.0.2	dollar	
# ::root	0	amr-unknown
# ::edge	amr-unknown	ARG1-of	mean-01	0	0.0
# ::edge	mean-01	ARG1	monetary-quantity	0.0	0.0.0
# ::edge	monetary-quantity	quant	1	0.0.0	0.0.0.0
# ::edge	monetary-quantity	quant	dollar	0.0.0	0.0.0.2
# ::edge	monetary-quantity	quant	industry	0.0.0	0.0.0.1
(MRPNode-0 / amr-unknown :ARG1-of (MRPNode-1 / mean-01 :ARG1 (MRPNode-2 / monetary-quantity :quant 1 :quant (MRPNode-3 / industry) :quant (MRPNode-4 / dollar))))

# ::id 200
# ::snt What is the difference between portamento and glissando?
# ::tok What is the difference between portamento and glissando ?
# ::alignments 0-1|0.2 3-4|0 5-6|0.0+0.0.0+0.0.0.0 7-8|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.638973 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	differ-02	3-4
# ::node	0.0	person	5-6
# ::node	0.0.0	name	5-6
# ::node	0.0.0.0	portamento	5-6
# ::node	0.1	event	7-8
# ::node	0.1.0	name	7-8
# ::node	0.1.0.0	glissando	7-8
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	person	0	0.0
# ::edge	differ-02	ARG2	event	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
# ::edge	event	name	name	0.1	0.1.0
# ::edge	name	op1	glissando	0.1.0	0.1.0.0
# ::edge	name	op1	portamento	0.0.0	0.0.0.0
# ::edge	person	name	name	0.0	0.0.0
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 portamento)) :ARG2 (MRPNode-3 / event :name (MRPNode-4 / name :op1 glissando)) :ARG3 (MRPNode-5 / amr-unknown))

# ::id 201
# ::snt What is the significance of the artwork?
# ::tok What is the significance of the artwork ?
# ::alignments 0-1|0.1 3-4|0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.640576 ::parser eager_oracle ::smatch 1.0 ::n_actions 19
# ::node	0	significant-02	3-4
# ::node	0.0	artwork	6-7
# ::node	0.1	amr-unknown	0-1
# ::root	0	significant-02
# ::edge	significant-02	ARG0	amr-unknown	0	0.1
# ::edge	significant-02	ARG1	artwork	0	0.0
(MRPNode-0 / significant-02 :ARG1 (MRPNode-1 / artwork) :ARG0 (MRPNode-2 / amr-unknown))

# ::id 202
# ::snt What kind of board is this, and where can I get some?
# ::tok What kind of board is this , and where can I get some ?
# ::alignments 0-1|0.0.1+0.1.0.1 1-2|0.0.0 3-4|0.0 5-6|0.0.0.0 7-8|0 9-10|0.1 10-11|0.1.0.0 11-12|0.1.0 12-13|0.1.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:34.649928 ::parser eager_oracle ::smatch 1.0 ::n_actions 51
# ::node	0	and	7-8
# ::node	0.0	board	3-4
# ::node	0.0.0	kind	1-2
# ::node	0.0.0.0	this	5-6
# ::node	0.0.1	amr-unknown	0-1
# ::node	0.1	possible-01	9-10
# ::node	0.1.0	get-01	11-12
# ::node	0.1.0.0	i	10-11
# ::node	0.1.0.1	amr-unknown	0-1
# ::node	0.1.0.2	some	12-13
# ::root	0	and
# ::edge	and	op1	board	0	0.0
# ::edge	and	op2	possible-01	0	0.1
# ::edge	board	domain	amr-unknown	0.0	0.0.1
# ::edge	board	mod	kind	0.0	0.0.0
# ::edge	get-01	ARG1	amr-unknown	0.1.0	0.1.0.1
# ::edge	get-01	ARG1	i	0.1.0	0.1.0.0
# ::edge	get-01	ARG1	some	0.1.0	0.1.0.2
# ::edge	kind	mod	this	0.0.0	0.0.0.0
# ::edge	possible-01	ARG1	get-01	0.1	0.1.0
(MRPNode-0 / and :op1 (MRPNode-1 / board :mod (MRPNode-2 / kind :mod (MRPNode-3 / this)) :domain (MRPNode-4 / amr-unknown)) :op2 (MRPNode-5 / possible-01 :ARG1 (MRPNode-6 / get-01 :ARG1 (MRPNode-7 / i) :ARG1 (MRPNode-8 / amr-unknown) :ARG1 (MRPNode-9 / some))))

# ::id 203
# ::snt What is the best way to store fresh berries?
# ::tok What is the best way to store fresh berries ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0.0 8-9|0.3.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.655658 ::parser eager_oracle ::smatch 0.8275862068965517 ::n_actions 30
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	berry	8-9
# ::node	0.3.0.0	fresh-04	7-8
# ::root	0	way
# ::edge	berry	ARG1-of	fresh-04	0.3.0	0.3.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	store-01	ARG1	berry	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / berry :ARG1-of (MRPNode-7 / fresh-04))))

# ::id 204
# ::snt What is the difference between a tortoise and a turtle?
# ::tok What is the difference between a tortoise and a turtle ?
# ::alignments 0-1|0.1 3-4|0 6-7|0.0 9-10|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:34.658087 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	differ-02	3-4
# ::node	0.0	tortoise	6-7
# ::node	0.1	amr-unknown	0-1
# ::node	0.2	turtle	9-10
# ::root	0	differ-02
# ::edge	differ-02	ARG1	tortoise	0	0.0
# ::edge	differ-02	ARG2	amr-unknown	0	0.1
# ::edge	differ-02	ARG2	turtle	0	0.2
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / tortoise) :ARG2 (MRPNode-2 / amr-unknown) :ARG2 (MRPNode-3 / turtle))

# ::id 205
# ::snt What is the difference between balls in Test and ODI Cricket?
# ::tok What is the difference between balls in Test and ODI Cricket ?
# ::alignments 0-1|0.1 3-4|0 5-6|0.0 8-9|0.2 9-10|0.2.1.0+0.2.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.664450 ::parser eager_oracle ::smatch 0.6666666666666666 ::n_actions 28
# ::node	0	differ-02	3-4
# ::node	0.0	ball	5-6
# ::node	0.1	amr-unknown	0-1
# ::node	0.2	and	8-9
# ::node	0.2.0	team	
# ::node	0.2.0.0	name	
# ::node	0.2.0.0.0	test	
# ::node	0.2.0.0.1	cricket	
# ::node	0.2.1	team	
# ::node	0.2.1.0	name	9-10
# ::node	0.2.1.0.0	odi	9-10
# ::root	0	differ-02
# ::edge	and	op1	team	0.2	0.2.0
# ::edge	and	op2	team	0.2	0.2.1
# ::edge	differ-02	ARG1	ball	0	0.0
# ::edge	differ-02	ARG2	amr-unknown	0	0.1
# ::edge	differ-02	ARG2	and	0	0.2
# ::edge	name	op1	odi	0.2.1.0	0.2.1.0.0
# ::edge	name	op1	test	0.2.0.0	0.2.0.0.0
# ::edge	name	op2	cricket	0.2.0.0	0.2.0.0.1
# ::edge	team	name	name	0.2.0	0.2.0.0
# ::edge	team	name	name	0.2.1	0.2.1.0
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / ball) :ARG2 (MRPNode-2 / amr-unknown) :ARG2 (MRPNode-3 / and :op1 (MRPNode-4 / team :name (MRPNode-5 / name :op1 test :op2 cricket)) :op2 (MRPNode-6 / team :name (MRPNode-7 / name :op1 odi))))

# ::id 206
# ::snt What's the best way to store asparagus?
# ::tok What 's the best way to store asparagus ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.668458 ::parser eager_oracle ::smatch 0.8 ::n_actions 26
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	asparagus	7-8
# ::root	0	way
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	store-01	ARG1	asparagus	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / asparagus)))

# ::id 207
# ::snt A document is represented as a vector.
# ::tok A document is represented as a vector .
# ::alignments 1-2|0.0 3-4|0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.670326 ::parser eager_oracle ::smatch 1.0 ::n_actions 19
# ::node	0	represent-01	3-4
# ::node	0.0	document	1-2
# ::node	0.1	vector	6-7
# ::root	0	represent-01
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document) :ARG2 (MRPNode-2 / vector))

# ::id 208
# ::snt The way that a 'term' is defined depends on the application.
# ::tok The way that a ' term ' is defined depends on the application .
# ::alignments 1-2|0.0 5-6|0.0.0.0 8-9|0.0.0 9-10|0 12-13|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.674158 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	depend-01	9-10
# ::node	0.0	way	1-2
# ::node	0.0.0	define-01	8-9
# ::node	0.0.0.0	term	5-6
# ::node	0.1	application	12-13
# ::root	0	depend-01
# ::edge	define-01	ARG1	term	0.0.0	0.0.0.0
# ::edge	depend-01	ARG1	application	0	0.1
# ::edge	depend-01	ARG1	way	0	0.0
# ::edge	way	manner-of	define-01	0.0	0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / way :manner-of (MRPNode-2 / define-01 :ARG1 (MRPNode-3 / term))) :ARG1 (MRPNode-4 / application))

# ::id 209
# ::snt "Thus, the ""program"" is the optimal plan for action that is produced."
# ::tok " Thus , the " " program " " is the optimal plan for action that is produced . "
# ::alignments 6-7|0.0.1 11-12|0.0.2 12-13|0.0 13-14|0 14-15|0.0.0 17-18|0.0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:34.680730 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 41
# ::node	0	cause-01	13-14
# ::node	0.0	plan-01	12-13
# ::node	0.0.0	act-02	14-15
# ::node	0.0.1	program	6-7
# ::node	0.0.2	optimal	11-12
# ::node	0.0.3	produce-01	17-18
# ::root	0	cause-01
# ::edge	cause-01	ARG1	plan-01	0	0.0
# ::edge	plan-01	ARG1	act-02	0.0	0.0.0
# ::edge	plan-01	ARG1-of	produce-01	0.0	0.0.3
# ::edge	plan-01	mod	optimal	0.0	0.0.2
# ::edge	plan-01	mod	program	0.0	0.0.1
# ::edge	produce-01	ARG1	act-02	0.0.3	0.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / plan-01 :ARG1 (MRPNode-2 / act-02) :mod (MRPNode-3 / program) :mod (MRPNode-4 / optimal) :ARG1-of (MRPNode-5 / produce-01 :ARG1 MRPNode-2)))

# ::id 210
# ::snt "Therefore, the ""program"" is the optimal plan for action that is produced."
# ::tok " Therefore , the " " program " " is the optimal plan for action that is produced . "
# ::alignments 6-7|0.0.1 11-12|0.0.2 12-13|0.0 13-14|0 14-15|0.0.0 17-18|0.0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:34.686350 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 41
# ::node	0	cause-01	13-14
# ::node	0.0	plan-01	12-13
# ::node	0.0.0	act-02	14-15
# ::node	0.0.1	program	6-7
# ::node	0.0.2	optimal	11-12
# ::node	0.0.3	produce-01	17-18
# ::root	0	cause-01
# ::edge	cause-01	ARG1	plan-01	0	0.0
# ::edge	plan-01	ARG1	act-02	0.0	0.0.0
# ::edge	plan-01	ARG1-of	produce-01	0.0	0.0.3
# ::edge	plan-01	mod	optimal	0.0	0.0.2
# ::edge	plan-01	mod	program	0.0	0.0.1
# ::edge	produce-01	ARG1	act-02	0.0.3	0.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / plan-01 :ARG1 (MRPNode-2 / act-02) :mod (MRPNode-3 / program) :mod (MRPNode-4 / optimal) :ARG1-of (MRPNode-5 / produce-01 :ARG1 MRPNode-2)))

# ::id 211
# ::snt P(B) is the prior or marginal probability of B, and acts as a normalizing constant.
# ::tok P ( B ) is the prior or marginal probability of B , and acts as a normalizing constant .
# ::alignments 0-3|0.0.0+0.0.0.0+0.0.0.0.0 6-7|0.0.0.1 7-8|0.0 8-9|0.0.1.0 9-10|0.0.1 11-12|0.0.1.1+0.0.1.1.0+0.0.1.1.0.0 13-14|0 14-15|0.1 17-18|0.1.0.0 18-19|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.707674 ::parser eager_oracle ::smatch 0.9259259259259259 ::n_actions 52
# ::node	0	and	13-14
# ::node	0.0	or	7-8
# ::node	0.0.0	thing	0-3
# ::node	0.0.0.0	name	0-3
# ::node	0.0.0.0.0	"p(b"	0-3
# ::node	0.0.0.1	prior	6-7
# ::node	0.0.1	probability	9-10
# ::node	0.0.1.0	marginal-02	8-9
# ::node	0.0.1.1	person	11-12
# ::node	0.0.1.1.0	name	11-12
# ::node	0.0.1.1.0.0	b	11-12
# ::node	0.1	act-01	14-15
# ::node	0.1.0	constant	18-19
# ::node	0.1.0.0	normalize-01	17-18
# ::root	0	and
# ::edge	act-01	ARG1	constant	0.1	0.1.0
# ::edge	and	op1	or	0	0.0
# ::edge	and	op2	act-01	0	0.1
# ::edge	constant	ARG0-of	normalize-01	0.1.0	0.1.0.0
# ::edge	name	op1	"p(b"	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	b	0.0.1.1.0	0.0.1.1.0.0
# ::edge	or	op1	thing	0.0	0.0.0
# ::edge	or	op2	probability	0.0	0.0.1
# ::edge	person	name	name	0.0.1.1	0.0.1.1.0
# ::edge	probability	domain	marginal-02	0.0.1	0.0.1.0
# ::edge	probability	domain	person	0.0.1	0.0.1.1
# ::edge	thing	domain	prior	0.0.0	0.0.0.1
# ::edge	thing	name	name	0.0.0	0.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / or :op1 (MRPNode-2 / thing :name (MRPNode-3 / name :op1 "p(b") :domain (MRPNode-4 / prior)) :op2 (MRPNode-5 / probability :domain (MRPNode-6 / marginal-02) :domain (MRPNode-7 / person :name (MRPNode-8 / name :op1 b)))) :op2 (MRPNode-9 / act-01 :ARG1 (MRPNode-10 / constant :ARG0-of (MRPNode-11 / normalize-01))))

# ::id 212
# ::snt In a word, we can solve a problem with optimal substructure using a three-step process.
# ::tok In a word , we can solve a problem with optimal substructure using a three - step process .
# ::alignments 2-3|0.1 4-5|0.0.1 5-6|0 6-7|0.0 8-9|0.0.0 10-11|0.0.0.0.0 11-12|0.0.0.0 12-13|0.0.2 14-15|0.0.2.0.0.0 16-17|0.0.2.0.0 17-18|0.0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.720281 ::parser eager_oracle ::smatch 1.0 ::n_actions 58
# ::node	0	possible-01	5-6
# ::node	0.0	solve-01	6-7
# ::node	0.0.0	problem	8-9
# ::node	0.0.0.0	substructure	11-12
# ::node	0.0.0.0.0	optimal	10-11
# ::node	0.0.1	we	4-5
# ::node	0.0.2	use-01	12-13
# ::node	0.0.2.0	process-02	17-18
# ::node	0.0.2.0.0	step-01	16-17
# ::node	0.0.2.0.0.0	3	14-15
# ::node	0.1	word-01	2-3
# ::root	0	possible-01
# ::edge	possible-01	ARG1	solve-01	0	0.0
# ::edge	possible-01	prep-in	word-01	0	0.1
# ::edge	problem	topic	substructure	0.0.0	0.0.0.0
# ::edge	process-02	ARG1	step-01	0.0.2.0	0.0.2.0.0
# ::edge	solve-01	ARG0	we	0.0	0.0.1
# ::edge	solve-01	ARG1	problem	0.0	0.0.0
# ::edge	solve-01	manner	use-01	0.0	0.0.2
# ::edge	step-01	quant	3	0.0.2.0.0	0.0.2.0.0.0
# ::edge	substructure	mod	optimal	0.0.0.0	0.0.0.0.0
# ::edge	use-01	ARG0	we	0.0.2	0.0.1
# ::edge	use-01	ARG1	process-02	0.0.2	0.0.2.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / solve-01 :ARG1 (MRPNode-2 / problem :topic (MRPNode-3 / substructure :mod (MRPNode-4 / optimal))) :ARG0 (MRPNode-5 / we) :manner (MRPNode-6 / use-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-7 / process-02 :ARG1 (MRPNode-8 / step-01 :quant 3)))) :prep-in (MRPNode-9 / word-01))

# ::id 213
# ::snt It is usually used to calculate posterior probabilities given observations.
# ::tok It is usually used to calculate posterior probabilities given observations .
# ::alignments 0-1|0.0 2-3|0.1 3-4|0 5-6|0.2 7-8|0.2.0 8-9|0.2.1.0 9-10|0.2.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.726657 ::parser eager_oracle ::smatch 0.9375 ::n_actions 36
# ::node	0	use-01	3-4
# ::node	0.0	it	0-1
# ::node	0.1	usual	2-3
# ::node	0.2	calculate-01	5-6
# ::node	0.2.0	probability	7-8
# ::node	0.2.0.0	differ-02	
# ::node	0.2.1	observe-01	9-10
# ::node	0.2.1.0	give-01	8-9
# ::root	0	use-01
# ::edge	calculate-01	ARG0	it	0.2	0.0
# ::edge	calculate-01	ARG1	observe-01	0.2	0.2.1
# ::edge	calculate-01	ARG1	probability	0.2	0.2.0
# ::edge	observe-01	ARG1-of	give-01	0.2.1	0.2.1.0
# ::edge	probability	mod	differ-02	0.2.0	0.2.0.0
# ::edge	use-01	ARG1	it	0	0.0
# ::edge	use-01	ARG2	calculate-01	0	0.2
# ::edge	use-01	mod	usual	0	0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / it) :mod (MRPNode-2 / usual) :ARG2 (MRPNode-3 / calculate-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-4 / probability :mod (MRPNode-5 / differ-02)) :ARG1 (MRPNode-6 / observe-01 :ARG1-of (MRPNode-7 / give-01))))

# ::id 214
# ::snt The definition of term is dependent on the application.
# ::tok The definition of term is dependent on the application .
# ::alignments 1-2|0.1 3-4|0.1.0 5-6|0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.730655 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	depend-01	5-6
# ::node	0.0	apply-02	8-9
# ::node	0.1	define-01	1-2
# ::node	0.1.0	term	3-4
# ::root	0	depend-01
# ::edge	define-01	ARG1	term	0.1	0.1.0
# ::edge	depend-01	ARG0	define-01	0	0.1
# ::edge	depend-01	ARG1	apply-02	0	0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / apply-02) :ARG0 (MRPNode-2 / define-01 :ARG1 (MRPNode-3 / term)))

# ::id 215
# ::snt It was used in the first time in the SMART Information Retrieval System.
# ::tok It was used in the first time in the SMART Information Retrieval System .
# ::alignments 0-1|0.0 2-3|0 9-13|0.1+0.1.0+0.1.0.0+0.1.0.1+0.1.0.2+0.1.0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:34.735993 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 25
# ::node	0	use-01	2-3
# ::node	0.0	it	0-1
# ::node	0.1	thing	9-13
# ::node	0.1.0	name	9-13
# ::node	0.1.0.0	smart	9-13
# ::node	0.1.0.1	information	9-13
# ::node	0.1.0.2	retrieval	9-13
# ::node	0.1.0.3	system	9-13
# ::node	0.2	ordinal-entity	
# ::node	0.2.0	1	
# ::root	0	use-01
# ::edge	name	op1	smart	0.1.0	0.1.0.0
# ::edge	name	op2	information	0.1.0	0.1.0.1
# ::edge	name	op3	retrieval	0.1.0	0.1.0.2
# ::edge	name	op4	system	0.1.0	0.1.0.3
# ::edge	ordinal-entity	value	1	0.2	0.2.0
# ::edge	thing	name	name	0.1	0.1.0
# ::edge	use-01	ARG1	it	0	0.0
# ::edge	use-01	ARG2	thing	0	0.1
# ::edge	use-01	ord	ordinal-entity	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / it) :ARG2 (MRPNode-2 / thing :name (MRPNode-3 / name :op1 smart :op2 information :op3 retrieval :op4 system)) :ord (MRPNode-4 / ordinal-entity :value 1))

# ::id 216
# ::snt "Thus, the ""program"" is the optimal plan of action that is being produced."
# ::tok " Thus , the " " program " " is the optimal plan of action that is being produced . "
# ::alignments 6-7|0.0.3 11-12|0.0.2 12-13|0.0 14-15|0.0.0 18-19|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.741843 ::parser eager_oracle ::smatch 0.8181818181818182 ::n_actions 38
# ::node	0	cause-01	
# ::node	0.0	plan-01	12-13
# ::node	0.0.0	act-02	14-15
# ::node	0.0.1	produce-01	18-19
# ::node	0.0.2	optimal	11-12
# ::node	0.0.3	program	6-7
# ::root	0	cause-01
# ::edge	cause-01	ARG1	plan-01	0	0.0
# ::edge	plan-01	ARG1	act-02	0.0	0.0.0
# ::edge	plan-01	domain	program	0.0	0.0.3
# ::edge	plan-01	mod	optimal	0.0	0.0.2
# ::edge	plan-01	mod	produce-01	0.0	0.0.1
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / plan-01 :ARG1 (MRPNode-2 / act-02) :mod (MRPNode-3 / produce-01) :mod (MRPNode-4 / optimal) :domain (MRPNode-5 / program)))

# ::id 217
# ::snt It is usually be used to compute posterior probabilities given observations.
# ::tok It is usually be used to compute posterior probabilities given observations .
# ::alignments 0-1|0.0 2-3|0.1 4-5|0 6-7|0.2 8-9|0.2.0 9-10|0.2.1.0 10-11|0.2.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.749025 ::parser eager_oracle ::smatch 0.9375 ::n_actions 37
# ::node	0	use-01	4-5
# ::node	0.0	it	0-1
# ::node	0.1	usual	2-3
# ::node	0.2	compile-01	6-7
# ::node	0.2.0	probability	8-9
# ::node	0.2.0.0	differ-02	
# ::node	0.2.1	observe-01	10-11
# ::node	0.2.1.0	give-01	9-10
# ::root	0	use-01
# ::edge	compile-01	ARG0	it	0.2	0.0
# ::edge	compile-01	ARG1	probability	0.2	0.2.0
# ::edge	compile-01	ARG1-of	observe-01	0.2	0.2.1
# ::edge	observe-01	ARG1-of	give-01	0.2.1	0.2.1.0
# ::edge	probability	mod	differ-02	0.2.0	0.2.0.0
# ::edge	use-01	ARG1	it	0	0.0
# ::edge	use-01	ARG2	compile-01	0	0.2
# ::edge	use-01	mod	usual	0	0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / it) :mod (MRPNode-2 / usual) :ARG2 (MRPNode-3 / compile-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-4 / probability :mod (MRPNode-5 / differ-02)) :ARG1-of (MRPNode-6 / observe-01 :ARG1-of (MRPNode-7 / give-01))))

# ::id 218
# ::snt The method takes much less time than naive methods.
# ::tok The method takes much less time than naive methods .
# ::alignments 1-2|0.1 2-3|0 3-4|0.0.0.0.0 4-5|0.0.0.0 5-6|0.0 7-8|0.0.0.1.0 8-9|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.766584 ::parser eager_oracle ::smatch 0.7999999999999999 ::n_actions 31
# ::node	0	take-10	2-3
# ::node	0.0	time	5-6
# ::node	0.0.0	have-quant-91	
# ::node	0.0.0.0	less	4-5
# ::node	0.0.0.0.0	much	3-4
# ::node	0.0.0.1	method	8-9
# ::node	0.0.0.1.0	naive	7-8
# ::node	0.1	method	1-2
# ::root	0	take-10
# ::edge	have-quant-91	ARG3	less	0.0.0	0.0.0.0
# ::edge	have-quant-91	ARG4	method	0.0.0	0.0.0.1
# ::edge	less	quant	much	0.0.0.0	0.0.0.0.0
# ::edge	method	mod	naive	0.0.0.1	0.0.0.1.0
# ::edge	take-10	ARG0	method	0	0.1
# ::edge	take-10	ARG1	time	0	0.0
# ::edge	time	ARG1-of	have-quant-91	0.0	0.0.0
(MRPNode-0 / take-10 :ARG1 (MRPNode-1 / time :ARG1-of (MRPNode-2 / have-quant-91 :ARG3 (MRPNode-3 / less :quant (MRPNode-4 / much)) :ARG4 (MRPNode-5 / method :mod (MRPNode-6 / naive)))) :ARG0 (MRPNode-7 / method))

# ::id 219
# ::snt This is a much quicker method than other more naive methods.
# ::tok This is a much quicker method than other more naive methods .
# ::alignments 0-1|0.0.0 3-4|0.2+0.2.0+0.3.1.1+0.3.1.1.0 4-5|0.1 5-6|0.3 7-8|0.3.0 9-10|0.3.1.0 10-11|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.803405 ::parser eager_oracle ::smatch 0.6363636363636364 ::n_actions 43
# ::node	0	have-degree-91	
# ::node	0.0	method	10-11
# ::node	0.0.0	this	0-1
# ::node	0.1	quick-02	4-5
# ::node	0.2	more	3-4
# ::node	0.2.0	much	3-4
# ::node	0.3	method	5-6
# ::node	0.3.0	other	7-8
# ::node	0.3.1	have-degree-91	
# ::node	0.3.1.0	naive	9-10
# ::node	0.3.1.1	more	3-4
# ::node	0.3.1.1.0	much	3-4
# ::root	0	have-degree-91
# ::edge	have-degree-91	ARG1	method	0	0.0
# ::edge	have-degree-91	ARG2	naive	0.3.1	0.3.1.0
# ::edge	have-degree-91	ARG2	quick-02	0	0.1
# ::edge	have-degree-91	ARG3	more	0	0.2
# ::edge	have-degree-91	ARG3	more	0.3.1	0.3.1.1
# ::edge	have-degree-91	ARG4	method	0	0.3
# ::edge	method	ARG1-of	have-degree-91	0.3	0.3.1
# ::edge	method	mod	other	0.3	0.3.0
# ::edge	method	mod	this	0.0	0.0.0
# ::edge	more	quant	much	0.2	0.2.0
# ::edge	more	quant	much	0.3.1.1	0.3.1.1.0
# ::edge	quick-02	ARG1	method	0.1	0.0
(MRPNode-0 / have-degree-91 :ARG1 (MRPNode-1 / method :mod (MRPNode-2 / this)) :ARG2 (MRPNode-3 / quick-02 :ARG1 MRPNode-1) :ARG3 (MRPNode-4 / more :quant (MRPNode-5 / much)) :ARG4 (MRPNode-6 / method :mod (MRPNode-7 / other) :ARG1-of (MRPNode-8 / have-degree-91 :ARG2 (MRPNode-9 / naive) :ARG3 (MRPNode-10 / more :quant (MRPNode-11 / much)))))

# ::id 220
# ::snt The definition of term depends on the application.
# ::tok The definition of term depends on the application .
# ::alignments 1-2|0.1 3-4|0.1.0 4-5|0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.806175 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	depend-01	4-5
# ::node	0.0	apply-02	7-8
# ::node	0.1	define-01	1-2
# ::node	0.1.0	term	3-4
# ::root	0	depend-01
# ::edge	define-01	ARG1	term	0.1	0.1.0
# ::edge	depend-01	ARG0	define-01	0	0.1
# ::edge	depend-01	ARG1	apply-02	0	0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / apply-02) :ARG0 (MRPNode-2 / define-01 :ARG1 (MRPNode-3 / term)))

# ::id 221
# ::snt At the same time, Bayesians describe probabilities in terms of beliefs and degrees of uncertainty.
# ::tok At the same time , Bayesians describe probabilities in terms of beliefs and degrees of uncertainty .
# ::alignments 2-3|0.2.0 3-4|0.2 5-6|0.1+0.1.0+0.1.0.0 6-7|0 7-8|0.0 11-12|0.3.0+0.3.0.0 12-13|0.3 13-14|0.3.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.817178 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 47
# ::node	0	describe-01	6-7
# ::node	0.0	probability	7-8
# ::node	0.1	person	5-6
# ::node	0.1.0	name	5-6
# ::node	0.1.0.0	bayesians	5-6
# ::node	0.2	time	3-4
# ::node	0.2.0	same-01	2-3
# ::node	0.3	and	12-13
# ::node	0.3.0	thing	11-12
# ::node	0.3.0.0	believe-01	11-12
# ::node	0.3.1	degree	13-14
# ::node	0.3.1.0	know-01	
# ::node	0.3.1.0.0	-	
# ::root	0	describe-01
# ::edge	and	op1	thing	0.3	0.3.0
# ::edge	and	op2	degree	0.3	0.3.1
# ::edge	degree	degree-of	know-01	0.3.1	0.3.1.0
# ::edge	describe-01	ARG0	person	0	0.1
# ::edge	describe-01	ARG1	probability	0	0.0
# ::edge	describe-01	ARG2	and	0	0.3
# ::edge	describe-01	ARG2	time	0	0.2
# ::edge	know-01	polarity	-	0.3.1.0	0.3.1.0.0
# ::edge	name	op1	bayesians	0.1.0	0.1.0.0
# ::edge	person	mod	name	0.1	0.1.0
# ::edge	thing	ARG1-of	believe-01	0.3.0	0.3.0.0
# ::edge	time	ARG1-of	same-01	0.2	0.2.0
(MRPNode-0 / describe-01 :ARG1 (MRPNode-1 / probability) :ARG0 (MRPNode-2 / person :mod (MRPNode-3 / name :op1 bayesians)) :ARG2 (MRPNode-4 / time :ARG1-of (MRPNode-5 / same-01)) :ARG2 (MRPNode-6 / and :op1 (MRPNode-7 / thing :ARG1-of (MRPNode-8 / believe-01)) :op2 (MRPNode-9 / degree :degree-of (MRPNode-10 / know-01 :polarity -))))

# ::id 222
# ::snt It is used in information filtering, indexing, relevancy rankings and information retrieval.
# ::tok It is used in information filtering , indexing , relevancy rankings and information retrieval .
# ::alignments 0-1|0.0 2-3|0 4-5|0.1.0.0 5-6|0.1.0 9-10|0.1.2.0 11-12|0.1 12-13|0.1.3.0 13-14|0.1.3 ::annotator aligner3.py ::date 2021-03-12 14:31:34.834608 ::parser eager_oracle ::smatch 0.8333333333333333 ::n_actions 42
# ::node	0	use-01	2-3
# ::node	0.0	it	0-1
# ::node	0.1	and	11-12
# ::node	0.1.0	filter-02	5-6
# ::node	0.1.0.0	information	4-5
# ::node	0.1.1	model-01	
# ::node	0.1.2	track-01	
# ::node	0.1.2.0	relevant-01	9-10
# ::node	0.1.3	retrieve-01	13-14
# ::node	0.1.3.0	information	12-13
# ::root	0	use-01
# ::edge	and	op1	filter-02	0.1	0.1.0
# ::edge	and	op2	model-01	0.1	0.1.1
# ::edge	and	op3	track-01	0.1	0.1.2
# ::edge	and	op4	retrieve-01	0.1	0.1.3
# ::edge	filter-02	ARG1	information	0.1.0	0.1.0.0
# ::edge	retrieve-01	ARG1	information	0.1.3	0.1.0.0
# ::edge	retrieve-01	ARG1	information	0.1.3	0.1.3.0
# ::edge	track-01	ARG1	relevant-01	0.1.2	0.1.2.0
# ::edge	use-01	ARG1	it	0	0.0
# ::edge	use-01	ARG2	and	0	0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / it) :ARG2 (MRPNode-2 / and :op1 (MRPNode-3 / filter-02 :ARG1 (MRPNode-4 / information)) :op2 (MRPNode-5 / model-01) :op3 (MRPNode-6 / track-01 :ARG1 (MRPNode-7 / relevant-01)) :op4 (MRPNode-8 / retrieve-01 :ARG1 MRPNode-4 :ARG1 (MRPNode-9 / information))))

# ::id 223
# ::snt Several different ways of computing these values, additionally known as (term) weights, have been developed.
# ::tok Several different ways of computing these values , additionally known as ( term ) weights , have been developed .
# ::alignments 0-1|0.0.0 1-2|0.0.1 2-3|0.0 5-6|0.0.2.0.0 6-7|0.0.2.0 8-9|0.0.2.0.1.1 9-10|0.0.2.0.1 14-15|0.0.2.0.1.0 18-19|0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.858234 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 48
# ::node	0	develop-02	18-19
# ::node	0.0	way	2-3
# ::node	0.0.0	several	0-1
# ::node	0.0.1	differ-02	1-2
# ::node	0.0.2	copy-01	
# ::node	0.0.2.0	value	6-7
# ::node	0.0.2.0.0	this	5-6
# ::node	0.0.2.0.1	know-02	9-10
# ::node	0.0.2.0.1.0	weight	14-15
# ::node	0.0.2.0.1.1	additional	8-9
# ::root	0	develop-02
# ::edge	copy-01	ARG1	value	0.0.2	0.0.2.0
# ::edge	develop-02	ARG1	way	0	0.0
# ::edge	know-02	mod	additional	0.0.2.0.1	0.0.2.0.1.1
# ::edge	know-02	mod	weight	0.0.2.0.1	0.0.2.0.1.0
# ::edge	value	ARG1-of	know-02	0.0.2.0	0.0.2.0.1
# ::edge	value	mod	this	0.0.2.0	0.0.2.0.0
# ::edge	way	ARG1-of	differ-02	0.0	0.0.1
# ::edge	way	manner-of	copy-01	0.0	0.0.2
# ::edge	way	quant	several	0.0	0.0.0
(MRPNode-0 / develop-02 :ARG1 (MRPNode-1 / way :quant (MRPNode-2 / several) :ARG1-of (MRPNode-3 / differ-02) :manner-of (MRPNode-4 / copy-01 :ARG1 (MRPNode-5 / value :mod (MRPNode-6 / this) :ARG1-of (MRPNode-7 / know-02 :mod (MRPNode-8 / weight) :mod (MRPNode-9 / additional))))))

# ::id 224
# ::snt If a term appears in the document then its value in the vector is non-zero.
# ::tok If a term appears in the document then its value in the vector is non - zero .
# ::alignments 2-3|0.0.1.1 3-4|0.1 6-7|0.1.0 9-10|0.0.1 12-13|0.0.1.0 14-15|0.0.0 16-17|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.866241 ::parser eager_oracle ::smatch 0.7999999999999999 ::n_actions 41
# ::node	0	have-condition-91	
# ::node	0.0	zero	16-17
# ::node	0.0.0	-	14-15
# ::node	0.0.1	value	9-10
# ::node	0.0.1.0	vector	12-13
# ::node	0.0.1.1	term	2-3
# ::node	0.1	appear-01	3-4
# ::node	0.1.0	document	6-7
# ::root	0	have-condition-91
# ::edge	appear-01	ARG1	term	0.1	0.0.1.1
# ::edge	appear-01	location	document	0.1	0.1.0
# ::edge	have-condition-91	ARG1	zero	0	0.0
# ::edge	have-condition-91	ARG2	appear-01	0	0.1
# ::edge	value	location	vector	0.0.1	0.0.1.0
# ::edge	value	poss	term	0.0.1	0.0.1.1
# ::edge	zero	domain	value	0.0	0.0.1
# ::edge	zero	polarity	-	0.0	0.0.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / zero :polarity - :domain (MRPNode-2 / value :location (MRPNode-3 / vector) :poss (MRPNode-5 / term))) :ARG2 (MRPNode-4 / appear-01 :ARG1 MRPNode-5 :location (MRPNode-6 / document)))

# ::id 225
# ::snt A link to a page is seen as a vote of support.
# ::tok A link to a page is seen as a vote of support .
# ::alignments 1-2|0.0+0.0.0 4-5|0.0.0.0 6-7|0 9-10|0.1 11-12|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.871042 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	see-01	6-7
# ::node	0.0	thing	1-2
# ::node	0.0.0	link-01	1-2
# ::node	0.0.0.0	page	4-5
# ::node	0.1	vote-01	9-10
# ::node	0.1.0	support-01	11-12
# ::root	0	see-01
# ::edge	link-01	ARG1	page	0.0.0	0.0.0.0
# ::edge	see-01	ARG1	thing	0	0.0
# ::edge	see-01	ARG2	vote-01	0	0.1
# ::edge	thing	ARG3-of	link-01	0.0	0.0.0
# ::edge	vote-01	ARG1	support-01	0.1	0.1.0
(MRPNode-0 / see-01 :ARG1 (MRPNode-1 / thing :ARG3-of (MRPNode-2 / link-01 :ARG1 (MRPNode-3 / page))) :ARG2 (MRPNode-4 / vote-01 :ARG1 (MRPNode-5 / support-01)))

# ::id 226
# ::snt For example, a schedule of events at an exhibition is sometimes called a programme.
# ::tok For example , a schedule of events at an exhibition is sometimes called a programme .
# ::alignments 1-2|0 4-5|0.0.2 6-7|0.0.2.0 9-10|0.0.2.0.0 11-12|0.0.0 12-13|0.0 14-15|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.877300 ::parser eager_oracle ::smatch 0.896551724137931 ::n_actions 39
# ::node	0	exemplify-01	1-2
# ::node	0.0	call-01	12-13
# ::node	0.0.0	sometimes	11-12
# ::node	0.0.1	program	14-15
# ::node	0.0.2	schedule-01	4-5
# ::node	0.0.2.0	event	6-7
# ::node	0.0.2.0.0	exhibit-01	9-10
# ::root	0	exemplify-01
# ::edge	call-01	ARG1	schedule-01	0.0	0.0.2
# ::edge	call-01	ARG1	sometimes	0.0	0.0.0
# ::edge	call-01	ARG2	program	0.0	0.0.1
# ::edge	event	location	exhibit-01	0.0.2.0	0.0.2.0.0
# ::edge	exemplify-01	ARG0	call-01	0	0.0
# ::edge	schedule-01	ARG1	event	0.0.2	0.0.2.0
(MRPNode-0 / exemplify-01 :ARG0 (MRPNode-1 / call-01 :ARG1 (MRPNode-2 / sometimes) :ARG2 (MRPNode-3 / program) :ARG1 (MRPNode-4 / schedule-01 :ARG1 (MRPNode-5 / event :location (MRPNode-6 / exhibit-01)))))

# ::id 227
# ::snt However, the patent is assigned to Stanford University and not to Google.
# ::tok However , the patent is assigned to Stanford University and not to Google .
# ::alignments 3-4|0.0.0.0 5-6|0.0.1 7-9|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0+0.0.0.1.0.1 9-10|0.0 10-11|0.0.1.0 12-13|0.0.1.1+0.0.1.1.0+0.0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.886555 ::parser eager_oracle ::smatch 0.8095238095238096 ::n_actions 36
# ::node	0	contrast-01	
# ::node	0.0	and	9-10
# ::node	0.0.0	assign-01	
# ::node	0.0.0.0	patent-01	3-4
# ::node	0.0.0.1	university	7-9
# ::node	0.0.0.1.0	name	7-9
# ::node	0.0.0.1.0.0	stanford	7-9
# ::node	0.0.0.1.0.1	university	7-9
# ::node	0.0.1	assign-01	5-6
# ::node	0.0.1.0	-	10-11
# ::node	0.0.1.1	company	12-13
# ::node	0.0.1.1.0	name	12-13
# ::node	0.0.1.1.0.0	google	12-13
# ::root	0	contrast-01
# ::edge	and	op1	assign-01	0.0	0.0.0
# ::edge	and	op2	assign-01	0.0	0.0.1
# ::edge	assign-01	ARG1	patent-01	0.0.0	0.0.0.0
# ::edge	assign-01	ARG1	patent-01	0.0.1	0.0.0.0
# ::edge	assign-01	ARG2	company	0.0.1	0.0.1.1
# ::edge	assign-01	ARG2	university	0.0.0	0.0.0.1
# ::edge	assign-01	ARG2	university	0.0.1	0.0.0.1
# ::edge	assign-01	polarity	-	0.0.1	0.0.1.0
# ::edge	company	name	name	0.0.1.1	0.0.1.1.0
# ::edge	contrast-01	ARG2	and	0	0.0
# ::edge	name	op1	google	0.0.1.1.0	0.0.1.1.0.0
# ::edge	name	op1	stanford	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op2	university	0.0.0.1.0	0.0.0.1.0.1
# ::edge	university	name	name	0.0.0.1	0.0.0.1.0
(MRPNode-0 / contrast-01 :ARG2 (MRPNode-1 / and :op1 (MRPNode-2 / assign-01 :ARG1 (MRPNode-3 / patent-01) :ARG2 (MRPNode-4 / university :name (MRPNode-5 / name :op1 stanford :op2 university))) :op2 (MRPNode-6 / assign-01 :polarity - :ARG1 MRPNode-3 :ARG2 MRPNode-4 :ARG2 (MRPNode-7 / company :name (MRPNode-8 / name :op1 google)))))

# ::id 228
# ::snt The definition of a term depends on the application.
# ::tok The definition of a term depends on the application .
# ::alignments 1-2|0.1 4-5|0.1.0 5-6|0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.889311 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	depend-01	5-6
# ::node	0.0	apply-02	8-9
# ::node	0.1	define-01	1-2
# ::node	0.1.0	term	4-5
# ::root	0	depend-01
# ::edge	define-01	ARG1	term	0.1	0.1.0
# ::edge	depend-01	ARG0	define-01	0	0.1
# ::edge	depend-01	ARG1	apply-02	0	0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / apply-02) :ARG0 (MRPNode-2 / define-01 :ARG1 (MRPNode-3 / term)))

# ::id 229
# ::snt Inheritance in object oriented programming is a way to form new classes using classes that have already been defined.
# ::tok Inheritance in object oriented programming is a way to form new classes using classes that have already been defined .
# ::alignments 0-1|0.1 2-3|0.1.0.0.0 3-4|0.1.0.0 4-5|0.1.0 7-8|0 9-10|0.0 10-11|0.0.0.0 11-12|0.0.0 12-13|0.0.1 13-14|0.0.1.0 16-17|0.0.1.0.0.0 18-19|0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.915577 ::parser eager_oracle ::smatch 1.0 ::n_actions 58
# ::node	0	way	7-8
# ::node	0.0	form-01	9-10
# ::node	0.0.0	class	11-12
# ::node	0.0.0.0	new-01	10-11
# ::node	0.0.1	use-01	12-13
# ::node	0.0.1.0	class	13-14
# ::node	0.0.1.0.0	define-01	18-19
# ::node	0.0.1.0.0.0	already	16-17
# ::node	0.1	inherit-01	0-1
# ::node	0.1.0	program-01	4-5
# ::node	0.1.0.0	orient-01	3-4
# ::node	0.1.0.0.0	object	2-3
# ::root	0	way
# ::edge	class	ARG1-of	define-01	0.0.1.0	0.0.1.0.0
# ::edge	class	ARG1-of	new-01	0.0.0	0.0.0.0
# ::edge	define-01	time	already	0.0.1.0.0	0.0.1.0.0.0
# ::edge	form-01	ARG1	class	0.0	0.0.0
# ::edge	form-01	manner	use-01	0.0	0.0.1
# ::edge	inherit-01	ARG1	program-01	0.1	0.1.0
# ::edge	orient-01	ARG2	object	0.1.0.0	0.1.0.0.0
# ::edge	program-01	ARG2	orient-01	0.1.0	0.1.0.0
# ::edge	use-01	ARG1	class	0.0.1	0.0.1.0
# ::edge	way	domain	form-01	0	0.0
# ::edge	way	domain	inherit-01	0	0.1
(MRPNode-0 / way :domain (MRPNode-1 / form-01 :ARG1 (MRPNode-2 / class :ARG1-of (MRPNode-3 / new-01)) :manner (MRPNode-4 / use-01 :ARG1 (MRPNode-5 / class :ARG1-of (MRPNode-6 / define-01 :time (MRPNode-7 / already))))) :domain (MRPNode-8 / inherit-01 :ARG1 (MRPNode-9 / program-01 :ARG2 (MRPNode-10 / orient-01 :ARG2 (MRPNode-11 / object)))))

# ::id 230
# ::snt "Thus, the ""program"" is the optimal plan for action that is produced."
# ::tok " Thus , the " " program " " is the optimal plan for action that is produced . "
# ::alignments 6-7|0.0.1 11-12|0.0.2 12-13|0.0 13-14|0 14-15|0.0.0 17-18|0.0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:34.921200 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 41
# ::node	0	cause-01	13-14
# ::node	0.0	plan-01	12-13
# ::node	0.0.0	act-02	14-15
# ::node	0.0.1	program	6-7
# ::node	0.0.2	optimal	11-12
# ::node	0.0.3	produce-01	17-18
# ::root	0	cause-01
# ::edge	cause-01	ARG1	plan-01	0	0.0
# ::edge	plan-01	ARG1	act-02	0.0	0.0.0
# ::edge	plan-01	ARG1-of	produce-01	0.0	0.0.3
# ::edge	plan-01	mod	optimal	0.0	0.0.2
# ::edge	plan-01	mod	program	0.0	0.0.1
# ::edge	produce-01	ARG1	act-02	0.0.3	0.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / plan-01 :ARG1 (MRPNode-2 / act-02) :mod (MRPNode-3 / program) :mod (MRPNode-4 / optimal) :ARG1-of (MRPNode-5 / produce-01 :ARG1 MRPNode-2)))

# ::id 231
# ::snt "The ""program"" is the optimal plan for action that is produced."
# ::tok " The " " program " " is the optimal plan for action that is produced . "
# ::alignments 4-5|0.1 9-10|0.2 10-11|0 12-13|0.0 15-16|0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:34.925506 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	plan-01	10-11
# ::node	0.0	act-02	12-13
# ::node	0.1	program	4-5
# ::node	0.2	optimal	9-10
# ::node	0.3	produce-01	15-16
# ::root	0	plan-01
# ::edge	plan-01	ARG1	act-02	0	0.0
# ::edge	plan-01	ARG1-of	produce-01	0	0.3
# ::edge	plan-01	mod	optimal	0	0.2
# ::edge	plan-01	mod	program	0	0.1
# ::edge	produce-01	ARG1	act-02	0.3	0.0
(MRPNode-0 / plan-01 :ARG1 (MRPNode-1 / act-02) :mod (MRPNode-2 / program) :mod (MRPNode-3 / optimal) :ARG1-of (MRPNode-4 / produce-01 :ARG1 MRPNode-1))

# ::id 232
# ::snt A term which occurs in the document has a value in the vector of non-zero.
# ::tok A term which occurs in the document has a value in the vector of non - zero .
# ::alignments 1-2|0.0 6-7|0.0.0 9-10|0 12-13|0.1 14-15|0.1.0.0 16-17|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.931555 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	value-01	9-10
# ::node	0.0	term	1-2
# ::node	0.0.0	document	6-7
# ::node	0.1	vector	12-13
# ::node	0.1.0	zero	16-17
# ::node	0.1.0.0	-	14-15
# ::root	0	value-01
# ::edge	term	location	document	0.0	0.0.0
# ::edge	value-01	ARG1	term	0	0.0
# ::edge	value-01	location	vector	0	0.1
# ::edge	vector	consist-of	zero	0.1	0.1.0
# ::edge	zero	polarity	-	0.1.0	0.1.0.0
(MRPNode-0 / value-01 :ARG1 (MRPNode-1 / term :location (MRPNode-2 / document)) :location (MRPNode-3 / vector :consist-of (MRPNode-4 / zero :polarity -)))

# ::id 233
# ::snt LIMITATION: There is some limitation of vector space model.
# ::tok LIMITATION : There is some limitation of vector space model .
# ::alignments 0-1|0.0 4-5|0.0.1 7-8|0.0.0.0.0 8-9|0.0.0.0 9-10|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.936555 ::parser eager_oracle ::smatch 0.8181818181818182 ::n_actions 28
# ::node	0	imply-01	
# ::node	0.0	limit-01	0-1
# ::node	0.0.0	model	9-10
# ::node	0.0.0.0	space	8-9
# ::node	0.0.0.0.0	vector	7-8
# ::node	0.0.1	some	4-5
# ::root	0	imply-01
# ::edge	imply-01	ARG0	limit-01	0	0.0
# ::edge	limit-01	ARG1	model	0.0	0.0.0
# ::edge	limit-01	mod	some	0.0	0.0.1
# ::edge	model	mod	space	0.0.0	0.0.0.0
# ::edge	space	mod	vector	0.0.0.0	0.0.0.0.0
(MRPNode-0 / imply-01 :ARG0 (MRPNode-1 / limit-01 :ARG1 (MRPNode-2 / model :mod (MRPNode-3 / space :mod (MRPNode-4 / vector))) :mod (MRPNode-5 / some)))

# ::id 234
# ::snt The vector space model has some limitations: 1.
# ::tok The vector space model has some limitations : 1 .
# ::alignments 1-2|0.1.0.0 2-3|0.1.0 3-4|0.1 6-7|0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.939722 ::parser eager_oracle ::smatch 0.8421052631578948 ::n_actions 27
# ::node	0	limit-01	6-7
# ::node	0.0	1	8-9
# ::node	0.1	model	3-4
# ::node	0.1.0	space	2-3
# ::node	0.1.0.0	vector	1-2
# ::root	0	limit-01
# ::edge	limit-01	ARG1	model	0	0.1
# ::edge	limit-01	li	1	0	0.0
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / limit-01 :li 1 :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / space :mod (MRPNode-3 / vector))))

# ::id 235
# ::snt Typically terms are keywords, single words or longer phrases.
# ::tok Typically terms are keywords , single words or longer phrases .
# ::alignments 0-1|0.3 1-2|0.0.0 3-4|0.0 5-6|0.1.0 6-7|0.1 7-8|0 8-9|0.2.0 9-10|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:34.951115 ::parser eager_oracle ::smatch 0.8648648648648648 ::n_actions 37
# ::node	0	or	7-8
# ::node	0.0	keyword	3-4
# ::node	0.0.0	term	1-2
# ::node	0.1	word-01	6-7
# ::node	0.1.0	single-02	5-6
# ::node	0.2	phrase-01	9-10
# ::node	0.2.0	long-03	8-9
# ::node	0.2.1	have-degree-91	
# ::node	0.2.1.0	more	
# ::node	0.3	typical-02	0-1
# ::root	0	or
# ::edge	have-degree-91	ARG2	long-03	0.2.1	0.2.0
# ::edge	have-degree-91	ARG3	more	0.2.1	0.2.1.0
# ::edge	keyword	domain	term	0.0	0.0.0
# ::edge	or	domain	typical-02	0	0.3
# ::edge	or	op1	keyword	0	0.0
# ::edge	or	op2	word-01	0	0.1
# ::edge	or	op3	phrase-01	0	0.2
# ::edge	phrase-01	ARG1-of	have-degree-91	0.2	0.2.1
# ::edge	phrase-01	ARG1-of	long-03	0.2	0.2.0
# ::edge	word-01	ARG1-of	single-02	0.1	0.1.0
(MRPNode-0 / or :op1 (MRPNode-1 / keyword :domain (MRPNode-2 / term)) :op2 (MRPNode-3 / word-01 :ARG1-of (MRPNode-4 / single-02)) :op3 (MRPNode-5 / phrase-01 :ARG1-of (MRPNode-6 / long-03) :ARG1-of (MRPNode-7 / have-degree-91 :ARG2 MRPNode-6 :ARG3 (MRPNode-8 / more))) :domain (MRPNode-9 / typical-02))

# ::id 236
# ::snt "It doesn't take into account any information about B, so it is ""prior""."
# ::tok " It does n't take into account any information about B , so it is " " prior " " . "
# ::alignments 1-2|0.0.0 3-4|0.1.0 4-5|0.1 7-8|0.1.1.0 8-9|0.1.1 10-11|0.1.1.1+0.1.1.1.0+0.1.1.1.0.0 12-13|0 17-18|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.965382 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	cause-01	12-13
# ::node	0.0	prior	17-18
# ::node	0.0.0	it	1-2
# ::node	0.1	take-into-account-04	4-5
# ::node	0.1.0	-	3-4
# ::node	0.1.1	information	8-9
# ::node	0.1.1.0	any	7-8
# ::node	0.1.1.1	person	10-11
# ::node	0.1.1.1.0	name	10-11
# ::node	0.1.1.1.0.0	b	10-11
# ::root	0	cause-01
# ::edge	cause-01	ARG0	take-into-account-04	0	0.1
# ::edge	cause-01	ARG1	prior	0	0.0
# ::edge	information	topic	any	0.1.1	0.1.1.0
# ::edge	information	topic	person	0.1.1	0.1.1.1
# ::edge	name	op1	b	0.1.1.1.0	0.1.1.1.0.0
# ::edge	person	name	name	0.1.1.1	0.1.1.1.0
# ::edge	prior	domain	it	0.0	0.0.0
# ::edge	take-into-account-04	ARG1	information	0.1	0.1.1
# ::edge	take-into-account-04	polarity	-	0.1	0.1.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / prior :domain (MRPNode-2 / it)) :ARG0 (MRPNode-3 / take-into-account-04 :polarity - :ARG1 (MRPNode-4 / information :topic (MRPNode-5 / any) :topic (MRPNode-6 / person :name (MRPNode-7 / name :op1 b)))))

# ::id 237
# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
# ::tok When a document is represented as a vector , each dimension corresponds to a separate term .
# ::alignments 2-3|0.2.0 4-5|0.2 7-8|0.2.1 9-10|0.1.0 10-11|0.1 11-12|0 14-15|0.0.0 15-16|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.972451 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	correspond-02	11-12
# ::node	0.0	term	15-16
# ::node	0.0.0	separate-02	14-15
# ::node	0.1	dimension	10-11
# ::node	0.1.0	each	9-10
# ::node	0.2	represent-01	4-5
# ::node	0.2.0	document	2-3
# ::node	0.2.1	vector	7-8
# ::root	0	correspond-02
# ::edge	correspond-02	ARG1	dimension	0	0.1
# ::edge	correspond-02	ARG1	term	0	0.0
# ::edge	correspond-02	time	represent-01	0	0.2
# ::edge	dimension	mod	each	0.1	0.1.0
# ::edge	represent-01	ARG1	document	0.2	0.2.0
# ::edge	represent-01	ARG2	vector	0.2	0.2.1
# ::edge	term	ARG1-of	separate-02	0.0	0.0.0
(MRPNode-0 / correspond-02 :ARG1 (MRPNode-1 / term :ARG1-of (MRPNode-2 / separate-02)) :ARG1 (MRPNode-3 / dimension :mod (MRPNode-4 / each)) :time (MRPNode-5 / represent-01 :ARG1 (MRPNode-6 / document) :ARG2 (MRPNode-7 / vector)))

# ::id 238
# ::snt As a formal theorem, Bayes' theorem is valid in all common interpretations of probability.
# ::tok As a formal theorem , Bayes ' theorem is valid in all common interpretations of probability .
# ::alignments 2-3|0.0.0 3-4|0.0 5-6|0.0.1+0.0.1.0+0.0.1.0.0 9-10|0 11-12|0.1.1 13-14|0.1 15-16|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:34.982122 ::parser eager_oracle ::smatch 0.9444444444444444 ::n_actions 40
# ::node	0	valid-02	9-10
# ::node	0.0	theorem	3-4
# ::node	0.0.0	formal	2-3
# ::node	0.0.1	person	5-6
# ::node	0.0.1.0	name	5-6
# ::node	0.0.1.0.0	bayes	5-6
# ::node	0.1	interpret-01	13-14
# ::node	0.1.0	probability	15-16
# ::node	0.1.1	all	11-12
# ::node	0.1.2	share-01	
# ::root	0	valid-02
# ::edge	interpret-01	ARG1	probability	0.1	0.1.0
# ::edge	interpret-01	ARG1-of	share-01	0.1	0.1.2
# ::edge	interpret-01	mod	all	0.1	0.1.1
# ::edge	name	op1	bayes	0.0.1.0	0.0.1.0.0
# ::edge	person	name	name	0.0.1	0.0.1.0
# ::edge	theorem	mod	formal	0.0	0.0.0
# ::edge	theorem	poss	person	0.0	0.0.1
# ::edge	valid-02	ARG1	theorem	0	0.0
# ::edge	valid-02	ARG2	interpret-01	0	0.1
(MRPNode-0 / valid-02 :ARG1 (MRPNode-1 / theorem :mod (MRPNode-2 / formal) :poss (MRPNode-3 / person :name (MRPNode-4 / name :op1 bayes))) :ARG2 (MRPNode-5 / interpret-01 :ARG1 (MRPNode-6 / probability) :mod (MRPNode-7 / all) :ARG1-of (MRPNode-8 / share-01)))

# ::id 239
# ::snt The method is more effiecent than naive methods.
# ::tok The method is more effiecent than naive methods .
# ::alignments 1-2|0.0 3-4|0.2 4-5|0.1 6-7|0.3.0 7-8|0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:34.986158 ::parser eager_oracle ::smatch 0.4444444444444444 ::n_actions 23
# ::node	0	have-degree-91	
# ::node	0.0	method	1-2
# ::node	0.1	efficient-01	4-5
# ::node	0.2	more	3-4
# ::node	0.3	method	7-8
# ::node	0.3.0	naive	6-7
# ::root	0	have-degree-91
# ::edge	have-degree-91	ARG1	method	0	0.0
# ::edge	have-degree-91	ARG2	efficient-01	0	0.1
# ::edge	have-degree-91	ARG3	more	0	0.2
# ::edge	have-degree-91	ARG4	method	0	0.3
# ::edge	method	mod	naive	0.3	0.3.0
(MRPNode-0 / have-degree-91 :ARG1 (MRPNode-1 / method) :ARG2 (MRPNode-2 / efficient-01) :ARG3 (MRPNode-3 / more) :ARG4 (MRPNode-4 / method :mod (MRPNode-5 / naive)))

# ::id 240
# ::snt Single words, keywords and occasionally longer phrases are used for terms.
# ::tok Single words , keywords and occasionally longer phrases are used for terms .
# ::alignments 0-1|0.0.0.0 1-2|0.0.0 3-4|0.0.1 4-5|0.0 5-6|0.0.2.2 6-7|0.0.2.1 7-8|0.0.2 9-10|0 11-12|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:34.999459 ::parser eager_oracle ::smatch 0.9 ::n_actions 42
# ::node	0	use-01	9-10
# ::node	0.0	and	4-5
# ::node	0.0.0	word	1-2
# ::node	0.0.0.0	single-02	0-1
# ::node	0.0.1	keyword	3-4
# ::node	0.0.2	phrase	7-8
# ::node	0.0.2.0	have-degree-91	
# ::node	0.0.2.0.0	more	
# ::node	0.0.2.1	long-03	6-7
# ::node	0.0.2.2	occasional	5-6
# ::node	0.1	term	11-12
# ::root	0	use-01
# ::edge	and	op1	word	0.0	0.0.0
# ::edge	and	op2	keyword	0.0	0.0.1
# ::edge	and	op3	phrase	0.0	0.0.2
# ::edge	have-degree-91	ARG3	more	0.0.2.0	0.0.2.0.0
# ::edge	phrase	ARG1-of	have-degree-91	0.0.2	0.0.2.0
# ::edge	phrase	ARG1-of	long-03	0.0.2	0.0.2.1
# ::edge	phrase	frequency	occasional	0.0.2	0.0.2.2
# ::edge	use-01	ARG1	and	0	0.0
# ::edge	use-01	ARG2	term	0	0.1
# ::edge	word	ARG1-of	single-02	0.0.0	0.0.0.0
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / word :ARG1-of (MRPNode-3 / single-02)) :op2 (MRPNode-4 / keyword) :op3 (MRPNode-5 / phrase :ARG1-of (MRPNode-6 / have-degree-91 :ARG3 (MRPNode-7 / more)) :ARG1-of (MRPNode-8 / long-03) :frequency (MRPNode-9 / occasional))) :ARG2 (MRPNode-10 / term))

# ::id 241
# ::snt Generate the optimal solution of these computed values
# ::tok Generate the optimal solution of these computed values
# ::alignments 2-3|0.0.1 3-4|0.0 5-6|0.0.0.0 6-7|0.0.0.1 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.002910 ::parser eager_oracle ::smatch 0.7826086956521738 ::n_actions 25
# ::node	0	engineer-01	
# ::node	0.0	solve-01	3-4
# ::node	0.0.0	value	7-8
# ::node	0.0.0.0	this	5-6
# ::node	0.0.0.1	compile-01	6-7
# ::node	0.0.1	optimal	2-3
# ::root	0	engineer-01
# ::edge	engineer-01	ARG1	solve-01	0	0.0
# ::edge	solve-01	ARG1	value	0.0	0.0.0
# ::edge	solve-01	mod	optimal	0.0	0.0.1
# ::edge	value	ARG1-of	compile-01	0.0.0	0.0.0.1
# ::edge	value	mod	this	0.0.0	0.0.0.0
(MRPNode-0 / engineer-01 :ARG1 (MRPNode-1 / solve-01 :ARG1 (MRPNode-2 / value :mod (MRPNode-3 / this) :ARG1-of (MRPNode-4 / compile-01)) :mod (MRPNode-5 / optimal)))

# ::id 242
# ::snt Several different ways have been developed of calculating these values (also known as term weights).
# ::tok Several different ways have been developed of calculating these values ( also known as term weights ) .
# ::alignments 0-1|0.0.2 1-2|0.0.0 2-3|0.0 5-6|0 7-8|0.0.1 8-9|0.0.1.0.0 9-10|0.0.1.0 11-12|0.0.1.0.1.0 12-13|0.0.1.0.1 14-15|0.0.1.0.1.1.0 15-16|0.0.1.0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:35.039915 ::parser eager_oracle ::smatch 1.0 ::n_actions 54
# ::node	0	develop-02	5-6
# ::node	0.0	way	2-3
# ::node	0.0.0	differ-02	1-2
# ::node	0.0.1	calculate-01	7-8
# ::node	0.0.1.0	value	9-10
# ::node	0.0.1.0.0	this	8-9
# ::node	0.0.1.0.1	know-02	12-13
# ::node	0.0.1.0.1.0	also	11-12
# ::node	0.0.1.0.1.1	weight	15-16
# ::node	0.0.1.0.1.1.0	term	14-15
# ::node	0.0.2	several	0-1
# ::root	0	develop-02
# ::edge	calculate-01	ARG1	value	0.0.1	0.0.1.0
# ::edge	develop-02	ARG1	way	0	0.0
# ::edge	know-02	ARG2	weight	0.0.1.0.1	0.0.1.0.1.1
# ::edge	know-02	mod	also	0.0.1.0.1	0.0.1.0.1.0
# ::edge	value	ARG1-of	know-02	0.0.1.0	0.0.1.0.1
# ::edge	value	mod	this	0.0.1.0	0.0.1.0.0
# ::edge	way	quant	calculate-01	0.0	0.0.1
# ::edge	way	quant	differ-02	0.0	0.0.0
# ::edge	way	quant	several	0.0	0.0.2
# ::edge	weight	mod	term	0.0.1.0.1.1	0.0.1.0.1.1.0
(MRPNode-0 / develop-02 :ARG1 (MRPNode-1 / way :quant (MRPNode-2 / differ-02) :quant (MRPNode-3 / calculate-01 :ARG1 (MRPNode-4 / value :mod (MRPNode-5 / this) :ARG1-of (MRPNode-6 / know-02 :mod (MRPNode-7 / also) :ARG2 (MRPNode-8 / weight :mod (MRPNode-9 / term))))) :quant (MRPNode-10 / several)))

# ::id 243
# ::snt However, the key in Dynamic Programming is to determine the structure of optimal solutions.
# ::tok However , the key in Dynamic Programming is to determine the structure of optimal solutions .
# ::alignments 3-4|0.0 6-7|0.0.1 9-10|0.0.0 11-12|0.0.0.0 13-14|0.0.0.0.0.0 14-15|0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.047660 ::parser eager_oracle ::smatch 0.7857142857142857 ::n_actions 36
# ::node	0	contrast-01	
# ::node	0.0	key-02	3-4
# ::node	0.0.0	determine-01	9-10
# ::node	0.0.0.0	structure-01	11-12
# ::node	0.0.0.0.0	solution	14-15
# ::node	0.0.0.0.0.0	optimal	13-14
# ::node	0.0.1	program-01	6-7
# ::node	0.0.1.0	philosophy	
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	key-02	0	0.0
# ::edge	determine-01	ARG1	structure-01	0.0.0	0.0.0.0
# ::edge	key-02	ARG1	determine-01	0.0	0.0.0
# ::edge	key-02	ARG2	program-01	0.0	0.0.1
# ::edge	program-01	mod	philosophy	0.0.1	0.0.1.0
# ::edge	solution	mod	optimal	0.0.0.0.0	0.0.0.0.0.0
# ::edge	structure-01	ARG1	solution	0.0.0.0	0.0.0.0.0
(MRPNode-0 / contrast-01 :ARG2 (MRPNode-1 / key-02 :ARG1 (MRPNode-2 / determine-01 :ARG1 (MRPNode-3 / structure-01 :ARG1 (MRPNode-4 / solution :mod (MRPNode-5 / optimal)))) :ARG2 (MRPNode-6 / program-01 :mod (MRPNode-7 / philosophy))))

# ::id 244
# ::snt One of the best known methods is called tf-idf weighting.
# ::tok One of the best known methods is called tf - idf weighting .
# ::alignments 0-1|0.2 1-2|0+0.0.0.1 3-4|0.0.0.0+0.0.0.1.0+0.1 4-5|0.0.0 5-6|0.0 7-8|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:35.065880 ::parser eager_oracle ::smatch 0.9047619047619047 ::n_actions 50
# ::node	0	have-degree-91	1-2
# ::node	0.0	method	5-6
# ::node	0.0.0	know-02	4-5
# ::node	0.0.0.0	good-02	3-4
# ::node	0.0.0.1	have-degree-91	1-2
# ::node	0.0.0.1.0	most	3-4
# ::node	0.0.1	call-01	7-8
# ::node	0.0.1.0	name	8-12
# ::node	0.0.1.0.0	tf	8-12
# ::node	0.0.1.0.1	weighting	8-12
# ::node	0.1	good-02	3-4
# ::node	0.2	most	0-1
# ::root	0	have-degree-91
# ::edge	call-01	ARG2	name	0.0.1	0.0.1.0
# ::edge	good-02	ARG1	method	0.1	0.0
# ::edge	have-degree-91	ARG1	method	0	0.0
# ::edge	have-degree-91	ARG2	good-02	0	0.1
# ::edge	have-degree-91	ARG3	most	0	0.2
# ::edge	have-degree-91	ARG3	most	0.0.0.1	0.0.0.1.0
# ::edge	know-02	ARG1-of	good-02	0.0.0	0.0.0.0
# ::edge	know-02	ARG1-of	have-degree-91	0.0.0	0.0.0.1
# ::edge	method	ARG1-of	call-01	0.0	0.0.1
# ::edge	method	ARG1-of	know-02	0.0	0.0.0
# ::edge	name	op1	tf	0.0.1.0	0.0.1.0.0
# ::edge	name	op2	weighting	0.0.1.0	0.0.1.0.1
(MRPNode-0 / have-degree-91 :ARG1 (MRPNode-1 / method :ARG1-of (MRPNode-2 / know-02 :ARG1-of (MRPNode-3 / good-02) :ARG1-of (MRPNode-4 / have-degree-91 :ARG3 (MRPNode-5 / most))) :ARG1-of (MRPNode-6 / call-01 :ARG2 (MRPNode-7 / name :op1 tf :op2 weighting))) :ARG2 (MRPNode-8 / good-02 :ARG1 MRPNode-1) :ARG3 (MRPNode-9 / most))

# ::id 245
# ::snt For instance, a finalized schedule of events at an exhibition is sometimes called a program.
# ::tok For instance , a finalized schedule of events at an exhibition is sometimes called a program .
# ::alignments 4-5|0.0.2.1 5-6|0.0.2 7-8|0.0.2.0 10-11|0.0.2.0.0 12-13|0.0.1 13-14|0.0 15-16|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.073558 ::parser eager_oracle ::smatch 0.8666666666666666 ::n_actions 40
# ::node	0	exemplify-01	
# ::node	0.0	call-01	13-14
# ::node	0.0.0	program	15-16
# ::node	0.0.1	sometimes	12-13
# ::node	0.0.2	schedule-01	5-6
# ::node	0.0.2.0	event	7-8
# ::node	0.0.2.0.0	exhibit-01	10-11
# ::node	0.0.2.1	finalize-01	4-5
# ::root	0	exemplify-01
# ::edge	call-01	ARG1	program	0.0	0.0.0
# ::edge	call-01	ARG1	schedule-01	0.0	0.0.2
# ::edge	call-01	frequency	sometimes	0.0	0.0.1
# ::edge	event	location	exhibit-01	0.0.2.0	0.0.2.0.0
# ::edge	exemplify-01	ARG0	call-01	0	0.0
# ::edge	schedule-01	ARG1	event	0.0.2	0.0.2.0
# ::edge	schedule-01	ARG1-of	finalize-01	0.0.2	0.0.2.1
(MRPNode-0 / exemplify-01 :ARG0 (MRPNode-1 / call-01 :ARG1 (MRPNode-2 / program) :frequency (MRPNode-3 / sometimes) :ARG1 (MRPNode-4 / schedule-01 :ARG1 (MRPNode-5 / event :location (MRPNode-6 / exhibit-01)) :ARG1-of (MRPNode-7 / finalize-01))))

# ::id 246
# ::snt Characterise structure of an optimal solution.
# ::tok Characterise structure of an optimal solution .
# ::alignments 0-1|0 1-2|0.0 4-5|0.0.0.0 5-6|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.075891 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	characteristic-02	0-1
# ::node	0.0	structure	1-2
# ::node	0.0.0	solve-01	5-6
# ::node	0.0.0.0	optimal	4-5
# ::root	0	characteristic-02
# ::edge	characteristic-02	ARG1	structure	0	0.0
# ::edge	solve-01	mod	optimal	0.0.0	0.0.0.0
# ::edge	structure	poss	solve-01	0.0	0.0.0
(MRPNode-0 / characteristic-02 :ARG1 (MRPNode-1 / structure :poss (MRPNode-2 / solve-01 :mod (MRPNode-3 / optimal))))

# ::id 247
# ::snt It is used in information retrieval and was first used in the SMART Information Retrieval System.
# ::tok It is used in information retrieval and was first used in the SMART Information Retrieval System .
# ::alignments 0-1|0.0.0 2-3|0.1 4-5|0.0.1.0 5-6|0.0.1 6-7|0 9-10|0.0 12-16|0.1.0+0.1.0.0+0.1.0.0.0+0.1.0.0.1+0.1.0.0.2+0.1.0.0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:35.106701 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 45
# ::node	0	and	6-7
# ::node	0.0	use-01	9-10
# ::node	0.0.0	it	0-1
# ::node	0.0.1	retrieve-01	5-6
# ::node	0.0.1.0	information	4-5
# ::node	0.1	use-01	2-3
# ::node	0.1.0	thing	12-16
# ::node	0.1.0.0	name	12-16
# ::node	0.1.0.0.0	smart	12-16
# ::node	0.1.0.0.1	information	12-16
# ::node	0.1.0.0.2	retrieval	12-16
# ::node	0.1.0.0.3	system	12-16
# ::node	0.1.1	ordinal-entity	
# ::node	0.1.1.0	1	
# ::root	0	and
# ::edge	and	op1	use-01	0	0.0
# ::edge	and	op2	use-01	0	0.1
# ::edge	name	op1	smart	0.1.0.0	0.1.0.0.0
# ::edge	name	op2	information	0.1.0.0	0.1.0.0.1
# ::edge	name	op3	retrieval	0.1.0.0	0.1.0.0.2
# ::edge	name	op4	system	0.1.0.0	0.1.0.0.3
# ::edge	ordinal-entity	value	1	0.1.1	0.1.1.0
# ::edge	retrieve-01	ARG1	information	0.0.1	0.0.1.0
# ::edge	thing	name	name	0.1.0	0.1.0.0
# ::edge	use-01	ARG1	it	0.0	0.0.0
# ::edge	use-01	ARG1	it	0.1	0.0.0
# ::edge	use-01	ARG2	retrieve-01	0.0	0.0.1
# ::edge	use-01	ARG2	thing	0.1	0.1.0
# ::edge	use-01	ord	ordinal-entity	0.1	0.1.1
(MRPNode-0 / and :op1 (MRPNode-1 / use-01 :ARG1 (MRPNode-2 / it) :ARG2 (MRPNode-3 / retrieve-01 :ARG1 (MRPNode-4 / information))) :op2 (MRPNode-5 / use-01 :ARG1 MRPNode-2 :ARG2 (MRPNode-6 / thing :name (MRPNode-7 / name :op1 smart :op2 information :op3 retrieval :op4 system)) :ord (MRPNode-8 / ordinal-entity :value 1)))

# ::id 248
# ::snt A term which occurs in the document has a value in the vector of non-zero.
# ::tok A term which occurs in the document has a value in the vector of non - zero .
# ::alignments 1-2|0.0 6-7|0.0.0 9-10|0 12-13|0.1 14-15|0.1.0.0 16-17|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.113568 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	value-01	9-10
# ::node	0.0	term	1-2
# ::node	0.0.0	document	6-7
# ::node	0.1	vector	12-13
# ::node	0.1.0	zero	16-17
# ::node	0.1.0.0	-	14-15
# ::root	0	value-01
# ::edge	term	location	document	0.0	0.0.0
# ::edge	value-01	ARG1	term	0	0.0
# ::edge	value-01	location	vector	0	0.1
# ::edge	vector	consist-of	zero	0.1	0.1.0
# ::edge	zero	polarity	-	0.1.0	0.1.0.0
(MRPNode-0 / value-01 :ARG1 (MRPNode-1 / term :location (MRPNode-2 / document)) :location (MRPNode-3 / vector :consist-of (MRPNode-4 / zero :polarity -)))

# ::id 249
# ::snt Other ways of computing these values, or weights, have been developed.
# ::tok Other ways of computing these values , or weights , have been developed .
# ::alignments 0-1|0.0.0 1-2|0.0 3-4|0.0.1 4-5|0.0.1.0.0.0 5-6|0.0.1.0.0 7-8|0.0.1.0 8-9|0.0.1.0.1 12-13|0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.120069 ::parser eager_oracle ::smatch 1.0 ::n_actions 40
# ::node	0	develop-02	12-13
# ::node	0.0	way	1-2
# ::node	0.0.0	other	0-1
# ::node	0.0.1	comprise-01	3-4
# ::node	0.0.1.0	or	7-8
# ::node	0.0.1.0.0	value	5-6
# ::node	0.0.1.0.0.0	this	4-5
# ::node	0.0.1.0.1	weight	8-9
# ::root	0	develop-02
# ::edge	comprise-01	ARG1	or	0.0.1	0.0.1.0
# ::edge	develop-02	ARG1	way	0	0.0
# ::edge	or	op1	value	0.0.1.0	0.0.1.0.0
# ::edge	or	op2	weight	0.0.1.0	0.0.1.0.1
# ::edge	value	mod	this	0.0.1.0.0	0.0.1.0.0.0
# ::edge	way	manner-of	comprise-01	0.0	0.0.1
# ::edge	way	mod	other	0.0	0.0.0
(MRPNode-0 / develop-02 :ARG1 (MRPNode-1 / way :mod (MRPNode-2 / other) :manner-of (MRPNode-3 / comprise-01 :ARG1 (MRPNode-4 / or :op1 (MRPNode-5 / value :mod (MRPNode-6 / this)) :op2 (MRPNode-7 / weight)))))

# ::id 250
# ::snt Many different ways of calculating these values, also known as (term) weights, have been developed.
# ::tok Many different ways of calculating these values , also known as ( term ) weights , have been developed .
# ::alignments 0-1|0.0.0 1-2|0.0.1 2-3|0.0 4-5|0.0.3 5-6|0.0.3.0.0 6-7|0.0.3.0 8-9|0.0.2.0 9-10|0.0.2 14-15|0.0.2.1 18-19|0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.142919 ::parser eager_oracle ::smatch 1.0 ::n_actions 52
# ::node	0	develop-02	18-19
# ::node	0.0	way	2-3
# ::node	0.0.0	many	0-1
# ::node	0.0.1	differ-02	1-2
# ::node	0.0.2	know-02	9-10
# ::node	0.0.2.0	also	8-9
# ::node	0.0.2.1	weight	14-15
# ::node	0.0.3	calculate-01	4-5
# ::node	0.0.3.0	value	6-7
# ::node	0.0.3.0.0	this	5-6
# ::root	0	develop-02
# ::edge	calculate-01	ARG1	value	0.0.3	0.0.3.0
# ::edge	develop-02	ARG1	way	0	0.0
# ::edge	know-02	ARG2	weight	0.0.2	0.0.2.1
# ::edge	know-02	mod	also	0.0.2	0.0.2.0
# ::edge	value	mod	this	0.0.3.0	0.0.3.0.0
# ::edge	way	ARG1-of	differ-02	0.0	0.0.1
# ::edge	way	manner-of	calculate-01	0.0	0.0.3
# ::edge	way	manner-of	know-02	0.0	0.0.2
# ::edge	way	quant	many	0.0	0.0.0
(MRPNode-0 / develop-02 :ARG1 (MRPNode-1 / way :quant (MRPNode-2 / many) :ARG1-of (MRPNode-3 / differ-02) :manner-of (MRPNode-4 / know-02 :mod (MRPNode-5 / also) :ARG2 (MRPNode-6 / weight)) :manner-of (MRPNode-7 / calculate-01 :ARG1 (MRPNode-8 / value :mod (MRPNode-9 / this)))))

# ::id 251
# ::snt It is similar to divide and conquer, however is differentiated as its subproblems are not independent.
# ::tok It is similar to divide and conquer , however is differentiated as its subproblems are not independent .
# ::alignments 2-3|0.1 4-5|0.1.0.0 5-6|0.1.0 6-7|0.1.0.1 10-11|0.0+0.0.1 11-12|0 12-13|0.0.0 13-14|0.0.0.0.1 15-16|0.0.0.0.0 16-17|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.178501 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 58
# ::node	0	contrast-01	11-12
# ::node	0.0	differ-02	10-11
# ::node	0.0.0	it	12-13
# ::node	0.0.0.0	depend-01	16-17
# ::node	0.0.0.0.0	-	15-16
# ::node	0.0.0.0.1	subproblem	13-14
# ::node	0.0.1	cause-01	10-11
# ::node	0.1	resemble-01	2-3
# ::node	0.1.0	and	5-6
# ::node	0.1.0.0	divide-02	4-5
# ::node	0.1.0.1	conquer-01	6-7
# ::root	0	contrast-01
# ::edge	and	op1	divide-02	0.1.0	0.1.0.0
# ::edge	and	op2	conquer-01	0.1.0	0.1.0.1
# ::edge	cause-01	ARG0	depend-01	0.0.1	0.0.0.0
# ::edge	contrast-01	ARG1	resemble-01	0	0.1
# ::edge	contrast-01	ARG2	differ-02	0	0.0
# ::edge	depend-01	ARG0	subproblem	0.0.0.0	0.0.0.0.1
# ::edge	depend-01	polarity	-	0.0.0.0	0.0.0.0.0
# ::edge	differ-02	ARG1	it	0.0	0.0.0
# ::edge	differ-02	ARG1-of	cause-01	0.0	0.0.1
# ::edge	it	mod	depend-01	0.0.0	0.0.0.0
# ::edge	resemble-01	ARG2	and	0.1	0.1.0
(MRPNode-0 / contrast-01 :ARG2 (MRPNode-1 / differ-02 :ARG1 (MRPNode-2 / it :domain-of (MRPNode-3 / depend-01 :polarity - :ARG0 (MRPNode-4 / subproblem))) :ARG1-of (MRPNode-5 / cause-01 :ARG0 MRPNode-3)) :ARG1 (MRPNode-6 / resemble-01 :ARG2 (MRPNode-7 / and :op1 (MRPNode-8 / divide-02) :op2 (MRPNode-9 / conquer-01))))

# ::id 252
# ::snt In general, dynamic programming is used on optimisation problems, where the most efficient solution is needed.
# ::tok In general , dynamic programming is used on optimisation problems , where the most efficient solution is needed .
# ::alignments 1-2|0.1 3-4|0.0.0 4-5|0.0 6-7|0 9-10|0.2 13-14|0.2.1.0.1.0 14-15|0.2.1.0+0.2.1.0.0 15-16|0.2.1.0.2 17-18|0.2.1 ::annotator aligner3.py ::date 2021-03-12 14:31:35.190396 ::parser eager_oracle ::smatch 0.8372093023255813 ::n_actions 51
# ::node	0	use-01	6-7
# ::node	0.0	program-01	4-5
# ::node	0.0.0	dynamic	3-4
# ::node	0.1	general-02	1-2
# ::node	0.2	problem	9-10
# ::node	0.2.0	exist-01	
# ::node	0.2.1	need-01	17-18
# ::node	0.2.1.0	thing	14-15
# ::node	0.2.1.0.0	efficient-01	14-15
# ::node	0.2.1.0.1	have-degree-91	
# ::node	0.2.1.0.1.0	most	13-14
# ::node	0.2.1.0.2	solve-01	15-16
# ::root	0	use-01
# ::edge	have-degree-91	ARG2	efficient-01	0.2.1.0.1	0.2.1.0.0
# ::edge	have-degree-91	ARG3	most	0.2.1.0.1	0.2.1.0.1.0
# ::edge	need-01	ARG1	thing	0.2.1	0.2.1.0
# ::edge	problem	location-of	need-01	0.2	0.2.1
# ::edge	problem	topic	exist-01	0.2	0.2.0
# ::edge	program-01	mod	dynamic	0.0	0.0.0
# ::edge	thing	ARG1-of	efficient-01	0.2.1.0	0.2.1.0.0
# ::edge	thing	ARG1-of	have-degree-91	0.2.1.0	0.2.1.0.1
# ::edge	thing	ARG2-of	solve-01	0.2.1.0	0.2.1.0.2
# ::edge	use-01	ARG1	program-01	0	0.0
# ::edge	use-01	ARG1-of	general-02	0	0.1
# ::edge	use-01	ARG2	problem	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / program-01 :mod (MRPNode-2 / dynamic)) :ARG1-of (MRPNode-3 / general-02) :ARG2 (MRPNode-4 / problem :topic (MRPNode-5 / exist-01) :location-of (MRPNode-6 / need-01 :ARG1 (MRPNode-7 / thing :ARG1-of (MRPNode-8 / efficient-01) :ARG1-of (MRPNode-9 / have-degree-91 :ARG2 MRPNode-8 :ARG3 (MRPNode-10 / most)) :ARG2-of (MRPNode-11 / solve-01)))))

# ::id 253
# ::snt Bayes' theorem relates the conditional and marginal probabilities of two random events.
# ::tok Bayes ' theorem relates the conditional and marginal probabilities of two random events .
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 2-3|0.1 3-4|0 5-6|0.0.0.0 6-7|0.0 7-8|0.0.1.0 8-9|0.0.1 10-11|0.0.2.0 11-12|0.0.2.1 12-13|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:35.199995 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 45
# ::node	0	relate-01	3-4
# ::node	0.0	and	6-7
# ::node	0.0.0	probability	
# ::node	0.0.0.0	condition-01	5-6
# ::node	0.0.1	probability	8-9
# ::node	0.0.1.0	marginal-02	7-8
# ::node	0.0.2	event	12-13
# ::node	0.0.2.0	2	10-11
# ::node	0.0.2.1	random	11-12
# ::node	0.1	theorem	2-3
# ::node	0.1.0	person	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	bayes	0-1
# ::root	0	relate-01
# ::edge	and	op1	probability	0.0	0.0.0
# ::edge	and	op2	probability	0.0	0.0.1
# ::edge	and	poss	event	0.0	0.0.2
# ::edge	event	mod	random	0.0.2	0.0.2.1
# ::edge	event	quant	2	0.0.2	0.0.2.0
# ::edge	name	op1	bayes	0.1.0.0	0.1.0.0.0
# ::edge	person	name	name	0.1.0	0.1.0.0
# ::edge	probability	ARG1-of	condition-01	0.0.0	0.0.0.0
# ::edge	probability	ARG1-of	marginal-02	0.0.1	0.0.1.0
# ::edge	relate-01	ARG0	theorem	0	0.1
# ::edge	relate-01	ARG1	and	0	0.0
# ::edge	theorem	poss	person	0.1	0.1.0
(MRPNode-0 / relate-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / probability :ARG1-of (MRPNode-3 / condition-01)) :op2 (MRPNode-4 / probability :ARG1-of (MRPNode-5 / marginal-02)) :poss (MRPNode-6 / event :quant 2 :mod (MRPNode-7 / random))) :ARG0 (MRPNode-8 / theorem :poss (MRPNode-9 / person :name (MRPNode-10 / name :op1 bayes))))

# ::id 254
# ::snt Define value of optimal solution recursively.
# ::tok Define value of optimal solution recursively .
# ::alignments 0-1|0+0.0+0.2 1-2|0.1+0.1.0 3-4|0.1.0.0.0 4-5|0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.203906 ::parser eager_oracle ::smatch 0.9285714285714286 ::n_actions 33
# ::node	0	define-01	0-1
# ::node	0.0	imperative	0-1
# ::node	0.1	thing	1-2
# ::node	0.1.0	value-01	1-2
# ::node	0.1.0.0	solution	4-5
# ::node	0.1.0.0.0	optimal	3-4
# ::node	0.2	you	0-1
# ::node	0.3	arbitrary-02	
# ::root	0	define-01
# ::edge	define-01	ARG0	you	0	0.2
# ::edge	define-01	ARG1	thing	0	0.1
# ::edge	define-01	manner	arbitrary-02	0	0.3
# ::edge	define-01	mode	imperative	0	0.0
# ::edge	solution	mod	optimal	0.1.0.0	0.1.0.0.0
# ::edge	thing	ARG2-of	value-01	0.1	0.1.0
# ::edge	value-01	ARG1	solution	0.1.0	0.1.0.0
(MRPNode-0 / define-01 :mode imperative :ARG1 (MRPNode-1 / thing :ARG2-of (MRPNode-2 / value-01 :ARG1 (MRPNode-3 / solution :mod (MRPNode-4 / optimal)))) :ARG0 (MRPNode-5 / you) :manner (MRPNode-6 / arbitrary-02))

# ::id 255
# ::snt It is often used to calculate posterior probabilities given observations.
# ::tok It is often used to calculate posterior probabilities given observations .
# ::alignments 0-1|0.0 2-3|0.2 3-4|0 5-6|0.1 7-8|0.1.0 8-9|0.1.1.0 9-10|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:35.209908 ::parser eager_oracle ::smatch 0.9375 ::n_actions 36
# ::node	0	use-01	3-4
# ::node	0.0	it	0-1
# ::node	0.1	calculate-01	5-6
# ::node	0.1.0	probability	7-8
# ::node	0.1.0.0	differ-02	
# ::node	0.1.1	observe-01	9-10
# ::node	0.1.1.0	give-01	8-9
# ::node	0.2	often	2-3
# ::root	0	use-01
# ::edge	calculate-01	ARG0	it	0.1	0.0
# ::edge	calculate-01	ARG1	observe-01	0.1	0.1.1
# ::edge	calculate-01	ARG1	probability	0.1	0.1.0
# ::edge	observe-01	ARG1-of	give-01	0.1.1	0.1.1.0
# ::edge	probability	mod	differ-02	0.1.0	0.1.0.0
# ::edge	use-01	ARG1	it	0	0.0
# ::edge	use-01	ARG2	calculate-01	0	0.1
# ::edge	use-01	frequency	often	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / it) :ARG2 (MRPNode-2 / calculate-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-3 / probability :mod (MRPNode-4 / differ-02)) :ARG1 (MRPNode-5 / observe-01 :ARG1-of (MRPNode-6 / give-01))) :frequency (MRPNode-7 / often))

# ::id 256
# ::snt P(B) (a.k.a. the normalizing constant) is the prior or marginal probability of B.
# ::tok P ( B ) ( a.k.a. the normalizing constant ) is the prior or marginal probability of B.
# ::alignments 8-9|0.2 12-13|0.0.0 13-14|0 14-15|0.1.0 15-16|0.0+0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:35.215499 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 42
# ::node	0	or	13-14
# ::node	0.0	probability	15-16
# ::node	0.0.0	prior	12-13
# ::node	0.1	probability	15-16
# ::node	0.1.0	marginal-02	14-15
# ::node	0.2	constant	8-9
# ::node	0.2.0	limit-01	
# ::root	0	or
# ::edge	constant	domain	limit-01	0.2	0.2.0
# ::edge	or	domain	constant	0	0.2
# ::edge	or	op1	probability	0	0.0
# ::edge	or	op2	probability	0	0.1
# ::edge	probability	ARG1-of	marginal-02	0.1	0.1.0
# ::edge	probability	mod	prior	0.0	0.0.0
(MRPNode-0 / or :op1 (MRPNode-1 / probability :mod (MRPNode-2 / prior)) :op2 (MRPNode-3 / probability :ARG1-of (MRPNode-4 / marginal-02)) :domain (MRPNode-5 / constant :domain (MRPNode-6 / limit-01)))

# ::id 257
# ::snt Bayes' theorem relates the conditional and marginal probabilities of two random events.
# ::tok Bayes ' theorem relates the conditional and marginal probabilities of two random events .
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 2-3|0.1 3-4|0 5-6|0.0.0.0 6-7|0.0 7-8|0.0.1.0 8-9|0.0.1 10-11|0.0.2.0 11-12|0.0.2.1 12-13|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:35.225034 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 45
# ::node	0	relate-01	3-4
# ::node	0.0	and	6-7
# ::node	0.0.0	probability	
# ::node	0.0.0.0	condition-01	5-6
# ::node	0.0.1	probability	8-9
# ::node	0.0.1.0	marginal-02	7-8
# ::node	0.0.2	event	12-13
# ::node	0.0.2.0	2	10-11
# ::node	0.0.2.1	random	11-12
# ::node	0.1	theorem	2-3
# ::node	0.1.0	person	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	bayes	0-1
# ::root	0	relate-01
# ::edge	and	op1	probability	0.0	0.0.0
# ::edge	and	op2	probability	0.0	0.0.1
# ::edge	and	poss	event	0.0	0.0.2
# ::edge	event	mod	random	0.0.2	0.0.2.1
# ::edge	event	quant	2	0.0.2	0.0.2.0
# ::edge	name	op1	bayes	0.1.0.0	0.1.0.0.0
# ::edge	person	name	name	0.1.0	0.1.0.0
# ::edge	probability	ARG1-of	condition-01	0.0.0	0.0.0.0
# ::edge	probability	ARG1-of	marginal-02	0.0.1	0.0.1.0
# ::edge	relate-01	ARG0	theorem	0	0.1
# ::edge	relate-01	ARG1	and	0	0.0
# ::edge	theorem	poss	person	0.1	0.1.0
(MRPNode-0 / relate-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / probability :ARG1-of (MRPNode-3 / condition-01)) :op2 (MRPNode-4 / probability :ARG1-of (MRPNode-5 / marginal-02)) :poss (MRPNode-6 / event :quant 2 :mod (MRPNode-7 / random))) :ARG0 (MRPNode-8 / theorem :poss (MRPNode-9 / person :name (MRPNode-10 / name :op1 bayes))))

# ::id 258
# ::snt Programming, in this sense, means finding an acceptable plan, an algorithm.
# ::tok Programming , in this sense , means finding an acceptable plan , an algorithm .
# ::alignments 3-4|0.1.0 4-5|0.1 6-7|0+0.2.0+0.2.0.1 7-8|0.2 9-10|0.2.0.0.0 10-11|0.2.0.0 13-14|0.2.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.236148 ::parser eager_oracle ::smatch 0.9 ::n_actions 49
# ::node	0	mean-01	6-7
# ::node	0.0	design-01	
# ::node	0.1	sense	4-5
# ::node	0.1.0	this	3-4
# ::node	0.2	find-01	7-8
# ::node	0.2.0	thing	6-7
# ::node	0.2.0.0	plan-01	10-11
# ::node	0.2.0.0.0	accept-01	9-10
# ::node	0.2.0.0.0.0	possible-01	
# ::node	0.2.0.1	mean-01	6-7
# ::node	0.2.0.1.0	algorithm	13-14
# ::root	0	mean-01
# ::edge	accept-01	ARG1-of	possible-01	0.2.0.0.0	0.2.0.0.0.0
# ::edge	find-01	ARG1	thing	0.2	0.2.0
# ::edge	mean-01	ARG1	design-01	0	0.0
# ::edge	mean-01	ARG2	algorithm	0.2.0.1	0.2.0.1.0
# ::edge	mean-01	ARG2	find-01	0	0.2
# ::edge	mean-01	ARG2	sense	0	0.1
# ::edge	plan-01	ARG1-of	accept-01	0.2.0.0	0.2.0.0.0
# ::edge	sense	mod	this	0.1	0.1.0
# ::edge	thing	ARG1-of	mean-01	0.2.0	0.2.0.1
# ::edge	thing	ARG1-of	plan-01	0.2.0	0.2.0.0
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / design-01) :ARG2 (MRPNode-2 / sense :mod (MRPNode-3 / this)) :ARG2 (MRPNode-4 / find-01 :ARG1 (MRPNode-5 / thing :ARG1-of (MRPNode-6 / plan-01 :ARG1-of (MRPNode-7 / accept-01 :ARG1-of (MRPNode-8 / possible-01))) :ARG1-of (MRPNode-9 / mean-01 :ARG2 (MRPNode-10 / algorithm)))))

# ::id 259
# ::snt The vector space model has several disadvantages.
# ::tok The vector space model has several disadvantages .
# ::alignments 1-2|0.1.0.0 2-3|0.1.0 3-4|0.1 5-6|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:35.238994 ::parser eager_oracle ::smatch 0.5882352941176471 ::n_actions 21
# ::node	0	advantage-01	
# ::node	0.0	-	
# ::node	0.1	model	3-4
# ::node	0.1.0	space	2-3
# ::node	0.1.0.0	vector	1-2
# ::node	0.2	several	5-6
# ::root	0	advantage-01
# ::edge	advantage-01	ARG1	model	0	0.1
# ::edge	advantage-01	ARG3	several	0	0.2
# ::edge	advantage-01	polarity	-	0	0.0
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / advantage-01 :polarity - :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG3 (MRPNode-4 / several))

# ::id 260
# ::snt A possible use for a vector space model is for retrieval and filtering of information.
# ::tok A possible use for a vector space model is for retrieval and filtering of information .
# ::alignments 1-2|0.1 2-3|0 5-6|0.0.0.0 6-7|0.0.0 7-8|0.0 10-11|0.2.0 11-12|0.2 12-13|0.2.1 14-15|0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.248521 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	use-01	2-3
# ::node	0.0	model	7-8
# ::node	0.0.0	space	6-7
# ::node	0.0.0.0	vector	5-6
# ::node	0.1	possible-01	1-2
# ::node	0.2	and	11-12
# ::node	0.2.0	retrieve-01	10-11
# ::node	0.2.0.0	information	14-15
# ::node	0.2.1	filter-02	12-13
# ::root	0	use-01
# ::edge	and	op1	retrieve-01	0.2	0.2.0
# ::edge	and	op2	filter-02	0.2	0.2.1
# ::edge	filter-02	ARG1	information	0.2.1	0.2.0.0
# ::edge	model	mod	space	0.0	0.0.0
# ::edge	retrieve-01	ARG1	information	0.2.0	0.2.0.0
# ::edge	space	mod	vector	0.0.0	0.0.0.0
# ::edge	use-01	ARG1	model	0	0.0
# ::edge	use-01	ARG1-of	possible-01	0	0.1
# ::edge	use-01	ARG2	and	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG1-of (MRPNode-4 / possible-01) :ARG2 (MRPNode-5 / and :op1 (MRPNode-6 / retrieve-01 :ARG1 (MRPNode-7 / information)) :op2 (MRPNode-8 / filter-02 :ARG1 MRPNode-7)))

# ::id 261
# ::snt One of the best known schemes is tf-idf (term frequency-inverse document frequency) weighting.
# ::tok One of the best known schemes is tf - idf ( term frequency - inverse document frequency ) weighting .
# ::alignments 0-1|0.2 1-2|0 3-4|0.1 4-5|0.0.0+0.0.0.0.0 5-6|0.0+0.0.0.0+0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:35.264539 ::parser eager_oracle ::smatch 0.7391304347826086 ::n_actions 52
# ::node	0	have-degree-91	1-2
# ::node	0.0	scheme	5-6
# ::node	0.0.0	mean-01	4-5
# ::node	0.0.0.0	scheme	5-6
# ::node	0.0.0.0.0	know-02	4-5
# ::node	0.0.0.0.1	name	11-13
# ::node	0.0.0.0.1.0	term	11-13
# ::node	0.0.0.0.1.1	frequency	11-13
# ::node	0.0.1	name	
# ::node	0.0.1.0	tf	
# ::node	0.0.1.1	frequency	
# ::node	0.1	good-02	3-4
# ::node	0.2	most	0-1
# ::node	0.3	scheme	5-6
# ::node	0.3.0	name	18-19
# ::node	0.3.0.0	tf	18-19
# ::node	0.3.0.1	weighting	18-19
# ::root	0	have-degree-91
# ::edge	good-02	ARG1	scheme	0.1	0.0
# ::edge	have-degree-91	ARG1	scheme	0	0.0
# ::edge	have-degree-91	ARG2	good-02	0	0.1
# ::edge	have-degree-91	ARG3	most	0	0.2
# ::edge	have-degree-91	ARG5	scheme	0	0.3
# ::edge	mean-01	ARG2	scheme	0.0.0	0.0.0.0
# ::edge	name	op1	term	0.0.0.0.1	0.0.0.0.1.0
# ::edge	name	op1	tf	0.0.1	0.0.1.0
# ::edge	name	op1	tf	0.3.0	0.3.0.0
# ::edge	name	op2	frequency	0.0.0.0.1	0.0.0.0.1.1
# ::edge	name	op2	frequency	0.0.1	0.0.1.1
# ::edge	name	op2	weighting	0.3.0	0.3.0.1
# ::edge	scheme	ARG1-of	mean-01	0.0	0.0.0
# ::edge	scheme	ARG1-of	name	0.3	0.3.0
# ::edge	scheme	mod	know-02	0.0.0.0	0.0.0.0.0
# ::edge	scheme	name	name	0.0	0.0.1
# ::edge	scheme	name	name	0.0.0.0	0.0.0.0.1
(MRPNode-0 / have-degree-91 :ARG1 (MRPNode-1 / scheme :ARG1-of (MRPNode-2 / mean-01 :ARG2 (MRPNode-3 / scheme :mod (MRPNode-4 / know-02) :name (MRPNode-5 / name :op1 term :op2 frequency))) :name (MRPNode-6 / name :op1 tf :op2 frequency)) :ARG2 (MRPNode-7 / good-02 :ARG1 MRPNode-1) :ARG3 (MRPNode-8 / most) :ARG5 (MRPNode-9 / scheme :ARG1-of (MRPNode-10 / name :op1 tf :op2 weighting)))

# ::id 262
# ::snt The order in which terms appear in the document is lost in a vector space representation.
# ::tok The order in which terms appear in the document is lost in a vector space representation .
# ::alignments 1-2|0.0 4-5|0.0.0.0 5-6|0.0.0 8-9|0.0.0.1 10-11|0 13-14|0.1.0.0 14-15|0.1.0 15-16|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:35.272198 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	lose-02	10-11
# ::node	0.0	order	1-2
# ::node	0.0.0	appear-01	5-6
# ::node	0.0.0.0	term	4-5
# ::node	0.0.0.1	document	8-9
# ::node	0.1	representation-02	15-16
# ::node	0.1.0	space	14-15
# ::node	0.1.0.0	vector	13-14
# ::root	0	lose-02
# ::edge	appear-01	ARG1	term	0.0.0	0.0.0.0
# ::edge	appear-01	location	document	0.0.0	0.0.0.1
# ::edge	lose-02	ARG1	order	0	0.0
# ::edge	lose-02	location	representation-02	0	0.1
# ::edge	order	time-of	appear-01	0.0	0.0.0
# ::edge	representation-02	ARG0	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / lose-02 :ARG1 (MRPNode-1 / order :time-of (MRPNode-2 / appear-01 :ARG1 (MRPNode-3 / term) :location (MRPNode-4 / document))) :location (MRPNode-5 / representation-02 :ARG0 (MRPNode-6 / space :mod (MRPNode-7 / vector))))

# ::id 263
# ::snt Many different methods of calculating these values, sometimes known as (term) weights, have been developed.
# ::tok Many different methods of calculating these values , sometimes known as ( term ) weights , have been developed .
# ::alignments 0-1|0.0.0 1-2|0.0.1 2-3|0.0 4-5|0.0.3 5-6|0.0.2.1.0 8-9|0.0.2.0 9-10|0.0.2 14-15|0.0.2.1 18-19|0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.283180 ::parser eager_oracle ::smatch 1.0 ::n_actions 50
# ::node	0	develop-02	18-19
# ::node	0.0	method	2-3
# ::node	0.0.0	many	0-1
# ::node	0.0.1	differ-02	1-2
# ::node	0.0.2	know-02	9-10
# ::node	0.0.2.0	sometimes	8-9
# ::node	0.0.2.1	weight	14-15
# ::node	0.0.2.1.0	this	5-6
# ::node	0.0.3	calculate-01	4-5
# ::root	0	develop-02
# ::edge	develop-02	ARG1	method	0	0.0
# ::edge	know-02	ARG2	sometimes	0.0.2	0.0.2.0
# ::edge	know-02	ARG2	weight	0.0.2	0.0.2.1
# ::edge	method	ARG1-of	differ-02	0.0	0.0.1
# ::edge	method	instrument-of	calculate-01	0.0	0.0.3
# ::edge	method	instrument-of	know-02	0.0	0.0.2
# ::edge	method	quant	many	0.0	0.0.0
# ::edge	weight	mod	this	0.0.2.1	0.0.2.1.0
(MRPNode-0 / develop-02 :ARG1 (MRPNode-1 / method :quant (MRPNode-2 / many) :ARG1-of (MRPNode-3 / differ-02) :instrument-of (MRPNode-4 / know-02 :ARG2 (MRPNode-5 / sometimes) :ARG2 (MRPNode-6 / weight :mod (MRPNode-7 / this))) :instrument-of (MRPNode-8 / calculate-01)))

# ::id 264
# ::snt It is used to compute posterior probabilities given observations.
# ::tok It is used to compute posterior probabilities given observations .
# ::alignments 0-1|0.0 2-3|0 4-5|0.1 6-7|0.1.0 8-9|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:35.287452 ::parser eager_oracle ::smatch 0.9166666666666666 ::n_actions 29
# ::node	0	use-01	2-3
# ::node	0.0	it	0-1
# ::node	0.1	compile-01	4-5
# ::node	0.1.0	probability	6-7
# ::node	0.1.0.0	differ-02	
# ::node	0.1.1	observe-01	8-9
# ::root	0	use-01
# ::edge	compile-01	ARG0	it	0.1	0.0
# ::edge	compile-01	ARG1	probability	0.1	0.1.0
# ::edge	compile-01	ARG1-of	observe-01	0.1	0.1.1
# ::edge	probability	ARG1-of	differ-02	0.1.0	0.1.0.0
# ::edge	use-01	ARG1	it	0	0.0
# ::edge	use-01	ARG2	compile-01	0	0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / it) :ARG2 (MRPNode-2 / compile-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-3 / probability :ARG1-of (MRPNode-4 / differ-02)) :ARG1-of (MRPNode-5 / observe-01)))

# ::id 265
# ::snt Dynamic Programming is a very powerful mathematical technique, often utilised in programming, for solving optimization problems.
# ::tok Dynamic Programming is a very powerful mathematical technique , often utilised in programming , for solving optimization problems .
# ::alignments 1-2|0.3 4-5|0.1.0 5-6|0.1 6-7|0.0 7-8|0 9-10|0.2.0 10-11|0.2 12-13|0.2.1 15-16|0.3.1 16-17|0.3.1.0.0 17-18|0.3.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.310113 ::parser eager_oracle ::smatch 0.9565217391304348 ::n_actions 55
# ::node	0	technique	7-8
# ::node	0.0	mathematics	6-7
# ::node	0.1	powerful-02	5-6
# ::node	0.1.0	very	4-5
# ::node	0.2	utilize-01	10-11
# ::node	0.2.0	often	9-10
# ::node	0.2.1	program-01	12-13
# ::node	0.3	program-01	1-2
# ::node	0.3.0	mechanics	
# ::node	0.3.1	solve-01	15-16
# ::node	0.3.1.0	problem	17-18
# ::node	0.3.1.0.0	optimization	16-17
# ::root	0	technique
# ::edge	powerful-02	degree	very	0.1	0.1.0
# ::edge	problem	topic	optimization	0.3.1.0	0.3.1.0.0
# ::edge	program-01	mod	mechanics	0.3	0.3.0
# ::edge	program-01	mod	solve-01	0.3	0.3.1
# ::edge	solve-01	ARG1	problem	0.3.1	0.3.1.0
# ::edge	technique	ARG1-of	powerful-02	0	0.1
# ::edge	technique	ARG1-of	utilize-01	0	0.2
# ::edge	technique	domain	program-01	0	0.3
# ::edge	technique	mod	mathematics	0	0.0
# ::edge	utilize-01	location	often	0.2	0.2.0
# ::edge	utilize-01	location	program-01	0.2	0.2.1
(MRPNode-0 / technique :mod (MRPNode-1 / mathematics) :ARG1-of (MRPNode-2 / powerful-02 :degree (MRPNode-3 / very)) :ARG1-of (MRPNode-4 / utilize-01 :location (MRPNode-5 / often) :location (MRPNode-6 / program-01)) :domain (MRPNode-7 / program-01 :mod (MRPNode-8 / mechanics) :mod (MRPNode-9 / solve-01 :ARG1 (MRPNode-10 / problem :topic (MRPNode-11 / optimization)))))

# ::id 266
# ::snt One of the most famous schemes is tf-idf weighting.
# ::tok One of the most famous schemes is tf - idf weighting .
# ::alignments 0-1|0.1 1-2|0+0.0.0 3-4|0.0.0.2 5-6|0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.316427 ::parser eager_oracle ::smatch 0.7142857142857143 ::n_actions 35
# ::node	0	include-91	1-2
# ::node	0.0	scheme	5-6
# ::node	0.0.0	have-degree-91	1-2
# ::node	0.0.0.0	scheme	5-6
# ::node	0.0.0.1	fame-01	
# ::node	0.0.0.2	most	3-4
# ::node	0.0.1	name	10-11
# ::node	0.0.1.0	weighting	10-11
# ::node	0.1	thing	0-1
# ::root	0	include-91
# ::edge	have-degree-91	ARG2	fame-01	0.0.0	0.0.0.1
# ::edge	have-degree-91	ARG3	most	0.0.0	0.0.0.2
# ::edge	have-degree-91	arg5	scheme	0.0.0	0.0.0.0
# ::edge	include-91	ARG1	scheme	0	0.0
# ::edge	include-91	ARG2	thing	0	0.1
# ::edge	name	op2	weighting	0.0.1	0.0.1.0
# ::edge	scheme	ARG1-of	have-degree-91	0.0	0.0.0
# ::edge	scheme	name	name	0.0	0.0.1
(MRPNode-0 / include-91 :ARG1 (MRPNode-1 / scheme :ARG1-of (MRPNode-2 / have-degree-91 :arg5 scheme :ARG2 (MRPNode-3 / fame-01) :ARG3 (MRPNode-4 / most)) :name (MRPNode-5 / name :op2 weighting)) :ARG2 (MRPNode-6 / thing))

# ::id 267
# ::snt The last point would be to construct an optimal solution from the computed values.
# ::tok The last point would be to construct an optimal solution from the computed values .
# ::alignments 1-2|0.1 6-7|0.0 8-9|0.0.0.0 9-10|0.0.0+0.0.0.1 12-13|0.0.1.0 13-14|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:35.323191 ::parser eager_oracle ::smatch 0.7857142857142857 ::n_actions 38
# ::node	0	have-purpose-91	
# ::node	0.0	construct-01	6-7
# ::node	0.0.0	thing	9-10
# ::node	0.0.0.0	optimal	8-9
# ::node	0.0.0.1	solve-01	9-10
# ::node	0.0.1	value	13-14
# ::node	0.0.1.0	compile-01	12-13
# ::node	0.1	last	1-2
# ::root	0	have-purpose-91
# ::edge	construct-01	ARG1	thing	0.0	0.0.0
# ::edge	construct-01	ARG2	value	0.0	0.0.1
# ::edge	have-purpose-91	ARG2	construct-01	0	0.0
# ::edge	have-purpose-91	li	last	0	0.1
# ::edge	thing	ARG2-of	solve-01	0.0.0	0.0.0.1
# ::edge	thing	mod	optimal	0.0.0	0.0.0.0
# ::edge	value	ARG1-of	compile-01	0.0.1	0.0.1.0
(MRPNode-0 / have-purpose-91 :ARG2 (MRPNode-1 / construct-01 :ARG1 (MRPNode-2 / thing :mod (MRPNode-3 / optimal) :ARG2-of (MRPNode-4 / solve-01)) :ARG2 (MRPNode-5 / value :ARG1-of (MRPNode-6 / compile-01))) :li (MRPNode-7 / last))

# ::id 268
# ::snt The method takes much less time than naive methods.
# ::tok The method takes much less time than naive methods .
# ::alignments 1-2|0.1 2-3|0 3-4|0.0.0.0.0 4-5|0.0.0.0 5-6|0.0 7-8|0.0.0.1.0 8-9|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:35.340407 ::parser eager_oracle ::smatch 0.7999999999999999 ::n_actions 31
# ::node	0	take-10	2-3
# ::node	0.0	time	5-6
# ::node	0.0.0	have-quant-91	
# ::node	0.0.0.0	less	4-5
# ::node	0.0.0.0.0	much	3-4
# ::node	0.0.0.1	method	8-9
# ::node	0.0.0.1.0	naive	7-8
# ::node	0.1	method	1-2
# ::root	0	take-10
# ::edge	have-quant-91	ARG3	less	0.0.0	0.0.0.0
# ::edge	have-quant-91	ARG4	method	0.0.0	0.0.0.1
# ::edge	less	quant	much	0.0.0.0	0.0.0.0.0
# ::edge	method	mod	naive	0.0.0.1	0.0.0.1.0
# ::edge	take-10	ARG0	method	0	0.1
# ::edge	take-10	ARG1	time	0	0.0
# ::edge	time	ARG1-of	have-quant-91	0.0	0.0.0
(MRPNode-0 / take-10 :ARG1 (MRPNode-1 / time :ARG1-of (MRPNode-2 / have-quant-91 :ARG3 (MRPNode-3 / less :quant (MRPNode-4 / much)) :ARG4 (MRPNode-5 / method :mod (MRPNode-6 / naive)))) :ARG0 (MRPNode-7 / method))

# ::id 269
# ::snt inheritance in object oriented programming is where a new class is formed using classes which have allready been defined.
# ::tok inheritance in object oriented programming is where a new class is formed using classes which have allready been defined .
# ::alignments 0-1|0.1 2-3|0.1.0.0.0 3-4|0.1.0.0 4-5|0.1.0 8-9|0.0.0.0 9-10|0.0.0 11-12|0.0 12-13|0.0.1 13-14|0.0.1.0 18-19|0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.364408 ::parser eager_oracle ::smatch 0.8181818181818182 ::n_actions 51
# ::node	0	thing	
# ::node	0.0	form-01	11-12
# ::node	0.0.0	class	9-10
# ::node	0.0.0.0	new-01	8-9
# ::node	0.0.1	use-01	12-13
# ::node	0.0.1.0	class	13-14
# ::node	0.0.1.0.0	define-01	18-19
# ::node	0.0.1.0.0.0	large	
# ::node	0.1	inherit-01	0-1
# ::node	0.1.0	program-01	4-5
# ::node	0.1.0.0	orient-01	3-4
# ::node	0.1.0.0.0	object	2-3
# ::root	0	thing
# ::edge	class	ARG1-of	define-01	0.0.1.0	0.0.1.0.0
# ::edge	class	ARG1-of	new-01	0.0.0	0.0.0.0
# ::edge	define-01	degree	large	0.0.1.0.0	0.0.1.0.0.0
# ::edge	form-01	manner	class	0.0	0.0.0
# ::edge	form-01	manner	use-01	0.0	0.0.1
# ::edge	inherit-01	ARG1	program-01	0.1	0.1.0
# ::edge	orient-01	ARG2	object	0.1.0.0	0.1.0.0.0
# ::edge	program-01	ARG2	orient-01	0.1.0	0.1.0.0
# ::edge	thing	domain	form-01	0	0.0
# ::edge	thing	domain	inherit-01	0	0.1
# ::edge	use-01	ARG1	class	0.0.1	0.0.1.0
(MRPNode-0 / thing :domain (MRPNode-1 / form-01 :manner (MRPNode-2 / class :ARG1-of (MRPNode-3 / new-01)) :manner (MRPNode-4 / use-01 :ARG1 (MRPNode-5 / class :ARG1-of (MRPNode-6 / define-01 :degree (MRPNode-7 / large))))) :domain (MRPNode-8 / inherit-01 :ARG1 (MRPNode-9 / program-01 :ARG2 (MRPNode-10 / orient-01 :ARG2 (MRPNode-11 / object)))))

# ::id 270
# ::snt The limitations of the vector space model are thus.
# ::tok The limitations of the vector space model are thus .
# ::alignments 1-2|0.0 4-5|0.0.0.0.0 5-6|0.0.0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.367576 ::parser eager_oracle ::smatch 0.7777777777777777 ::n_actions 24
# ::node	0	cause-01	
# ::node	0.0	limit-01	1-2
# ::node	0.0.0	model	6-7
# ::node	0.0.0.0	space	5-6
# ::node	0.0.0.0.0	vector	4-5
# ::root	0	cause-01
# ::edge	cause-01	ARG1	limit-01	0	0.0
# ::edge	limit-01	ARG1	model	0.0	0.0.0
# ::edge	model	mod	space	0.0.0	0.0.0.0
# ::edge	space	mod	vector	0.0.0.0	0.0.0.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / limit-01 :ARG1 (MRPNode-2 / model :mod (MRPNode-3 / space :mod (MRPNode-4 / vector)))))

# ::id 271
# ::snt Programming means finding a plan of action.
# ::tok Programming means finding a plan of action .
# ::alignments 1-2|0 2-3|0.1 4-5|0.1.0 6-7|0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.371049 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 22
# ::node	0	mean-01	1-2
# ::node	0.0	write-01	
# ::node	0.1	find-01	2-3
# ::node	0.1.0	plan-01	4-5
# ::node	0.1.0.0	action	6-7
# ::root	0	mean-01
# ::edge	find-01	ARG1	plan-01	0.1	0.1.0
# ::edge	mean-01	ARG1	write-01	0	0.0
# ::edge	mean-01	ARG2	find-01	0	0.1
# ::edge	plan-01	ARG1	action	0.1.0	0.1.0.0
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / write-01) :ARG2 (MRPNode-2 / find-01 :ARG1 (MRPNode-3 / plan-01 :ARG1 (MRPNode-4 / action))))

# ::id 272
# ::snt The key to Dynamic Programming is to find the structure of optimal solutions.
# ::tok The key to Dynamic Programming is to find the structure of optimal solutions .
# ::alignments 1-2|0 7-8|0.1 9-10|0.1.0 11-12|0.1.0.0.0 12-13|0.1.0.0+0.1.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:35.378909 ::parser eager_oracle ::smatch 0.7499999999999999 ::n_actions 35
# ::node	0	key-02	1-2
# ::node	0.0	figure-out-05	
# ::node	0.0.0	product	3-5
# ::node	0.0.0.0	name	3-5
# ::node	0.0.0.0.0	dynamic	3-5
# ::node	0.0.0.0.1	programming	3-5
# ::node	0.1	find-01	7-8
# ::node	0.1.0	structure-01	9-10
# ::node	0.1.0.0	thing	12-13
# ::node	0.1.0.0.0	optimal	11-12
# ::node	0.1.0.0.1	solve-01	12-13
# ::root	0	key-02
# ::edge	figure-out-05	manner	product	0.0	0.0.0
# ::edge	find-01	ARG1	structure-01	0.1	0.1.0
# ::edge	key-02	ARG1	figure-out-05	0	0.0
# ::edge	key-02	ARG2	find-01	0	0.1
# ::edge	name	op1	dynamic	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	programming	0.0.0.0	0.0.0.0.1
# ::edge	product	name	name	0.0.0	0.0.0.0
# ::edge	structure-01	ARG1	thing	0.1.0	0.1.0.0
# ::edge	thing	ARG2-of	solve-01	0.1.0.0	0.1.0.0.1
# ::edge	thing	mod	optimal	0.1.0.0	0.1.0.0.0
(MRPNode-0 / key-02 :ARG1 (MRPNode-1 / figure-out-05 :manner (MRPNode-2 / product :name (MRPNode-3 / name :op1 dynamic :op2 programming))) :ARG2 (MRPNode-4 / find-01 :ARG1 (MRPNode-5 / structure-01 :ARG1 (MRPNode-6 / thing :mod (MRPNode-7 / optimal) :ARG2-of (MRPNode-8 / solve-01)))))

# ::id 273
# ::snt Subclasses are said to ‘extend’ superclasses.
# ::tok Subclasses are said to ' extend ' superclasses .
# ::alignments 0-1|0.0.0 2-3|0 5-6|0.0 7-8|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:35.381619 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	say-01	2-3
# ::node	0.0	extend-01	5-6
# ::node	0.0.0	subclass	0-1
# ::node	0.0.1	superclass	7-8
# ::root	0	say-01
# ::edge	extend-01	ARG1	subclass	0.0	0.0.0
# ::edge	extend-01	ARG4	superclass	0.0	0.0.1
# ::edge	say-01	ARG1	extend-01	0	0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / extend-01 :ARG1 (MRPNode-2 / subclass) :ARG4 (MRPNode-3 / superclass)))

# ::id 274
# ::snt The theorem is often used when we have observations and wish to compute posterior probabilities.
# ::tok The theorem is often used when we have observations and wish to compute posterior probabilities .
# ::alignments 1-2|0.0 3-4|0.2 4-5|0 6-7|0.1.0.1 7-8|0.1.0 8-9|0.1.0.0 9-10|0.1 10-11|0.1.1 12-13|0.1.1.0 14-15|0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.393110 ::parser eager_oracle ::smatch 0.9565217391304348 ::n_actions 51
# ::node	0	use-01	4-5
# ::node	0.0	theorem	1-2
# ::node	0.1	and	9-10
# ::node	0.1.0	have-03	7-8
# ::node	0.1.0.0	observe-01	8-9
# ::node	0.1.0.1	we	6-7
# ::node	0.1.1	wish-01	10-11
# ::node	0.1.1.0	comprehend-01	12-13
# ::node	0.1.1.0.0	probability	14-15
# ::node	0.1.1.0.0.0	differ-02	
# ::node	0.2	often	3-4
# ::root	0	use-01
# ::edge	and	op1	have-03	0.1	0.1.0
# ::edge	and	op2	wish-01	0.1	0.1.1
# ::edge	comprehend-01	ARG0	we	0.1.1.0	0.1.0.1
# ::edge	comprehend-01	ARG1	probability	0.1.1.0	0.1.1.0.0
# ::edge	have-03	ARG0	we	0.1.0	0.1.0.1
# ::edge	have-03	ARG1	observe-01	0.1.0	0.1.0.0
# ::edge	probability	ARG1-of	differ-02	0.1.1.0.0	0.1.1.0.0.0
# ::edge	use-01	ARG1	theorem	0	0.0
# ::edge	use-01	frequency	often	0	0.2
# ::edge	use-01	time	and	0	0.1
# ::edge	wish-01	ARG0	we	0.1.1	0.1.0.1
# ::edge	wish-01	ARG1	comprehend-01	0.1.1	0.1.1.0
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / theorem) :time (MRPNode-2 / and :op1 (MRPNode-3 / have-03 :ARG1 (MRPNode-4 / observe-01) :ARG0 (MRPNode-5 / we)) :op2 (MRPNode-6 / wish-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-7 / comprehend-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-8 / probability :ARG1-of (MRPNode-9 / differ-02))))) :frequency (MRPNode-10 / often))

# ::id 275
# ::snt Each and every dimension corresponds to a separate term.
# ::tok Each and every dimension corresponds to a separate term .
# ::alignments 0-1|0.1.0 2-3|0.1.1 3-4|0.1 4-5|0 7-8|0.0.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.399303 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	correspond-02	4-5
# ::node	0.0	term	8-9
# ::node	0.0.0	separate-02	7-8
# ::node	0.1	dimension	3-4
# ::node	0.1.0	each	0-1
# ::node	0.1.1	every	2-3
# ::root	0	correspond-02
# ::edge	correspond-02	ARG1	dimension	0	0.1
# ::edge	correspond-02	ARG1	term	0	0.0
# ::edge	dimension	mod	each	0.1	0.1.0
# ::edge	dimension	mod	every	0.1	0.1.1
# ::edge	term	ARG1-of	separate-02	0.0	0.0.0
(MRPNode-0 / correspond-02 :ARG1 (MRPNode-1 / term :ARG1-of (MRPNode-2 / separate-02)) :ARG1 (MRPNode-3 / dimension :mod (MRPNode-4 / each) :mod (MRPNode-5 / every)))

# ::id 276
# ::snt Use these optimal solutions to construct an optimal solution for the original problem.
# ::tok Use these optimal solutions to construct an optimal solution for the original problem .
# ::alignments 0-1|0 1-2|0.0.1 2-3|0.0.0 3-4|0.0+0.0.2 5-6|0.2 7-8|0.2.0.0 8-9|0.2.0+0.2.0.1 11-12|0.2.0.1.0.0 12-13|0.2.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.458622 ::parser eager_oracle ::smatch 0.9361702127659575 ::n_actions 51
# ::node	0	use-01	0-1
# ::node	0.0	thing	3-4
# ::node	0.0.0	optimal	2-3
# ::node	0.0.1	this	1-2
# ::node	0.0.2	solve-01	3-4
# ::node	0.1	you	
# ::node	0.2	construct-01	5-6
# ::node	0.2.0	thing	8-9
# ::node	0.2.0.0	optimal	7-8
# ::node	0.2.0.1	solve-01	8-9
# ::node	0.2.0.1.0	problem	12-13
# ::node	0.2.0.1.0.0	original	11-12
# ::root	0	use-01
# ::edge	construct-01	ARG0	you	0.2	0.1
# ::edge	construct-01	ARG1	thing	0.2	0.2.0
# ::edge	problem	mod	original	0.2.0.1.0	0.2.0.1.0.0
# ::edge	solve-01	ARG1	problem	0.2.0.1	0.2.0.1.0
# ::edge	thing	ARG2-of	solve-01	0.0	0.0.2
# ::edge	thing	ARG2-of	solve-01	0.2.0	0.2.0.1
# ::edge	thing	mod	optimal	0.0	0.0.0
# ::edge	thing	mod	optimal	0.2.0	0.2.0.0
# ::edge	thing	mod	this	0.0	0.0.1
# ::edge	use-01	ARG0	you	0	0.1
# ::edge	use-01	ARG1	thing	0	0.0
# ::edge	use-01	ARG2	construct-01	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / thing :mod (MRPNode-2 / optimal) :mod (MRPNode-3 / this) :ARG2-of (MRPNode-4 / solve-01)) :ARG0 (MRPNode-5 / you) :ARG2 (MRPNode-6 / construct-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-7 / thing :mod (MRPNode-8 / optimal) :ARG2-of (MRPNode-9 / solve-01 :ARG1 (MRPNode-10 / problem :mod (MRPNode-11 / original))))))

# ::id 277
# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
# ::tok A document is represented as a vector , with each dimension corresponding to a separate term .
# ::alignments 1-2|0.0 3-4|0 6-7|0.1 9-10|0.2.0.0.0 10-11|0.2.0.0 11-12|0.2.0 14-15|0.2.0.1.0 15-16|0.2.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:35.467725 ::parser eager_oracle ::smatch 0.8823529411764706 ::n_actions 42
# ::node	0	represent-01	3-4
# ::node	0.0	document	1-2
# ::node	0.1	vector	6-7
# ::node	0.2	accompany-01	
# ::node	0.2.0	correspond-02	11-12
# ::node	0.2.0.0	dimension	10-11
# ::node	0.2.0.0.0	each	9-10
# ::node	0.2.0.1	term	15-16
# ::node	0.2.0.1.0	separate-02	14-15
# ::root	0	represent-01
# ::edge	accompany-01	ARG1	correspond-02	0.2	0.2.0
# ::edge	correspond-02	ARG1	dimension	0.2.0	0.2.0.0
# ::edge	correspond-02	ARG2	term	0.2.0	0.2.0.1
# ::edge	dimension	mod	each	0.2.0.0	0.2.0.0.0
# ::edge	represent-01	ARG0-of	accompany-01	0	0.2
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	term	ARG1-of	separate-02	0.2.0.1	0.2.0.1.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document) :ARG2 (MRPNode-2 / vector) :ARG0-of (MRPNode-3 / accompany-01 :ARG1 (MRPNode-4 / correspond-02 :ARG1 (MRPNode-5 / dimension :mod (MRPNode-6 / each)) :ARG2 (MRPNode-7 / term :ARG1-of (MRPNode-8 / separate-02)))))

# ::id 278
# ::snt One of the best known schemes is tf-idf (term frequency-inverse document frequency) weighting.
# ::tok One of the best known schemes is tf - idf ( term frequency - inverse document frequency ) weighting .
# ::alignments 0-1|0.2 1-2|0 3-4|0.1 4-5|0.0.0+0.0.0.0.0 5-6|0.0+0.0.0.0+0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:35.484310 ::parser eager_oracle ::smatch 0.7391304347826086 ::n_actions 52
# ::node	0	have-degree-91	1-2
# ::node	0.0	scheme	5-6
# ::node	0.0.0	mean-01	4-5
# ::node	0.0.0.0	scheme	5-6
# ::node	0.0.0.0.0	know-02	4-5
# ::node	0.0.0.0.1	name	11-13
# ::node	0.0.0.0.1.0	term	11-13
# ::node	0.0.0.0.1.1	frequency	11-13
# ::node	0.0.1	name	
# ::node	0.0.1.0	tf	
# ::node	0.0.1.1	frequency	
# ::node	0.1	good-02	3-4
# ::node	0.2	most	0-1
# ::node	0.3	scheme	5-6
# ::node	0.3.0	name	18-19
# ::node	0.3.0.0	tf	18-19
# ::node	0.3.0.1	weighting	18-19
# ::root	0	have-degree-91
# ::edge	good-02	ARG1	scheme	0.1	0.0
# ::edge	have-degree-91	ARG1	scheme	0	0.0
# ::edge	have-degree-91	ARG2	good-02	0	0.1
# ::edge	have-degree-91	ARG3	most	0	0.2
# ::edge	have-degree-91	ARG5	scheme	0	0.3
# ::edge	mean-01	ARG2	scheme	0.0.0	0.0.0.0
# ::edge	name	op1	term	0.0.0.0.1	0.0.0.0.1.0
# ::edge	name	op1	tf	0.0.1	0.0.1.0
# ::edge	name	op1	tf	0.3.0	0.3.0.0
# ::edge	name	op2	frequency	0.0.0.0.1	0.0.0.0.1.1
# ::edge	name	op2	frequency	0.0.1	0.0.1.1
# ::edge	name	op2	weighting	0.3.0	0.3.0.1
# ::edge	scheme	ARG1-of	mean-01	0.0	0.0.0
# ::edge	scheme	ARG1-of	name	0.3	0.3.0
# ::edge	scheme	mod	know-02	0.0.0.0	0.0.0.0.0
# ::edge	scheme	name	name	0.0	0.0.1
# ::edge	scheme	name	name	0.0.0.0	0.0.0.0.1
(MRPNode-0 / have-degree-91 :ARG1 (MRPNode-1 / scheme :ARG1-of (MRPNode-2 / mean-01 :ARG2 (MRPNode-3 / scheme :mod (MRPNode-4 / know-02) :name (MRPNode-5 / name :op1 term :op2 frequency))) :name (MRPNode-6 / name :op1 tf :op2 frequency)) :ARG2 (MRPNode-7 / good-02 :ARG1 MRPNode-1) :ARG3 (MRPNode-8 / most) :ARG5 (MRPNode-9 / scheme :ARG1-of (MRPNode-10 / name :op1 tf :op2 weighting)))

# ::id 279
# ::snt It is usually be used to compute posterior probabilities given observations.
# ::tok It is usually be used to compute posterior probabilities given observations .
# ::alignments 0-1|0.0 2-3|0.1 4-5|0 6-7|0.2 8-9|0.2.0 9-10|0.2.1.0 10-11|0.2.1 ::annotator aligner3.py ::date 2021-03-12 14:31:35.490969 ::parser eager_oracle ::smatch 0.9375 ::n_actions 37
# ::node	0	use-01	4-5
# ::node	0.0	it	0-1
# ::node	0.1	usual	2-3
# ::node	0.2	compile-01	6-7
# ::node	0.2.0	probability	8-9
# ::node	0.2.0.0	differ-02	
# ::node	0.2.1	observe-01	10-11
# ::node	0.2.1.0	give-01	9-10
# ::root	0	use-01
# ::edge	compile-01	ARG0	it	0.2	0.0
# ::edge	compile-01	ARG1	probability	0.2	0.2.0
# ::edge	compile-01	ARG1-of	observe-01	0.2	0.2.1
# ::edge	observe-01	ARG1-of	give-01	0.2.1	0.2.1.0
# ::edge	probability	mod	differ-02	0.2.0	0.2.0.0
# ::edge	use-01	ARG1	it	0	0.0
# ::edge	use-01	ARG2	compile-01	0	0.2
# ::edge	use-01	mod	usual	0	0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / it) :mod (MRPNode-2 / usual) :ARG2 (MRPNode-3 / compile-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-4 / probability :mod (MRPNode-5 / differ-02)) :ARG1-of (MRPNode-6 / observe-01 :ARG1-of (MRPNode-7 / give-01))))

# ::id 280
# ::snt A problem with overlapping subproblems means that the same subproblems may be used to solve many different larger problems.
# ::tok A problem with overlapping subproblems means that the same subproblems may be used to solve many different larger problems .
# ::alignments 1-2|0.0 4-5|0.0.0 5-6|0 8-9|0.1.0.0.0 9-10|0.1.0.0 10-11|0.1 12-13|0.1.0 14-15|0.1.0.1 15-16|0.1.0.1.0.2 16-17|0.1.0.1.0.1 17-18|0.1.0.1.0.0.0 18-19|0.1.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.871909 ::parser eager_oracle ::smatch 0.8518518518518519 ::n_actions 59
# ::node	0	mean-01	5-6
# ::node	0.0	problem	1-2
# ::node	0.0.0	subproblem	4-5
# ::node	0.0.0.0	coverage-06	
# ::node	0.1	possible-01	10-11
# ::node	0.1.0	use-01	12-13
# ::node	0.1.0.0	subproblem	9-10
# ::node	0.1.0.0.0	same-01	8-9
# ::node	0.1.0.1	solve-01	14-15
# ::node	0.1.0.1.0	problem	18-19
# ::node	0.1.0.1.0.0	have-degree-91	
# ::node	0.1.0.1.0.0.0	large	17-18
# ::node	0.1.0.1.0.0.1	more	
# ::node	0.1.0.1.0.1	differ-02	16-17
# ::node	0.1.0.1.0.2	many	15-16
# ::root	0	mean-01
# ::edge	have-degree-91	ARG3	large	0.1.0.1.0.0	0.1.0.1.0.0.0
# ::edge	have-degree-91	ARG3	more	0.1.0.1.0.0	0.1.0.1.0.0.1
# ::edge	mean-01	ARG1	problem	0	0.0
# ::edge	mean-01	ARG2	possible-01	0	0.1
# ::edge	possible-01	ARG1	use-01	0.1	0.1.0
# ::edge	problem	ARG1-of	differ-02	0.1.0.1.0	0.1.0.1.0.1
# ::edge	problem	ARG1-of	have-degree-91	0.1.0.1.0	0.1.0.1.0.0
# ::edge	problem	quant	many	0.1.0.1.0	0.1.0.1.0.2
# ::edge	problem	topic	subproblem	0.0	0.0.0
# ::edge	solve-01	ARG0	subproblem	0.1.0.1	0.1.0.0
# ::edge	solve-01	ARG1	problem	0.1.0.1	0.1.0.1.0
# ::edge	subproblem	ARG1-of	coverage-06	0.0.0	0.0.0.0
# ::edge	subproblem	ARG1-of	same-01	0.1.0.0	0.1.0.0.0
# ::edge	use-01	ARG1	subproblem	0.1.0	0.1.0.0
# ::edge	use-01	ARG2	solve-01	0.1.0	0.1.0.1
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / problem :topic (MRPNode-2 / subproblem :ARG1-of (MRPNode-3 / coverage-06))) :ARG2 (MRPNode-4 / possible-01 :ARG1 (MRPNode-5 / use-01 :ARG1 (MRPNode-6 / subproblem :ARG1-of (MRPNode-7 / same-01)) :ARG2 (MRPNode-8 / solve-01 :ARG0 MRPNode-6 :ARG1 (MRPNode-9 / problem :ARG1-of (MRPNode-10 / have-degree-91 :ARG3 (MRPNode-11 / large) :ARG3 (MRPNode-12 / more)) :ARG1-of (MRPNode-13 / differ-02) :quant (MRPNode-14 / many))))))

# ::id 281
# ::snt The definition of term is dependent on the application.
# ::tok The definition of term is dependent on the application .
# ::alignments 1-2|0.1 3-4|0.1.0 5-6|0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:35.874784 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	depend-01	5-6
# ::node	0.0	apply-02	8-9
# ::node	0.1	define-01	1-2
# ::node	0.1.0	term	3-4
# ::root	0	depend-01
# ::edge	define-01	ARG1	term	0.1	0.1.0
# ::edge	depend-01	ARG0	define-01	0	0.1
# ::edge	depend-01	ARG1	apply-02	0	0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / apply-02) :ARG0 (MRPNode-2 / define-01 :ARG1 (MRPNode-3 / term)))

# ::id 282
# ::snt And thus the method takes much less time than more naive methods.
# ::tok And thus the method takes much less time than more naive methods .
# ::alignments 0-1|0 3-4|0.0.1 4-5|0.0+0.0.2 5-6|0.0.0.0.1.0.1 6-7|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.1.0.1.0 7-8|0.0.0 10-11|0.0.0.0.1.0.0 11-12|0.0.0.0.1+0.0.0.0.1.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:36.376213 ::parser eager_oracle ::smatch 0.6956521739130435 ::n_actions 50
# ::node	0	and	0-1
# ::node	0.0	take-10	4-5
# ::node	0.0.0	time	7-8
# ::node	0.0.0.0	have-quant-91	
# ::node	0.0.0.0.0	less	6-7
# ::node	0.0.0.0.0.0	much	6-7
# ::node	0.0.0.0.1	method	11-12
# ::node	0.0.0.0.1.0	have-degree-91	
# ::node	0.0.0.0.1.0.0	naive	10-11
# ::node	0.0.0.0.1.0.1	more	5-6
# ::node	0.0.0.0.1.0.1.0	much	6-7
# ::node	0.0.0.0.1.0.2	method	11-12
# ::node	0.0.1	method	3-4
# ::node	0.0.2	cause-01	4-5
# ::root	0	and
# ::edge	and	op2	take-10	0	0.0
# ::edge	have-degree-91	ARG2	naive	0.0.0.0.1.0	0.0.0.0.1.0.0
# ::edge	have-degree-91	ARG3	more	0.0.0.0.1.0	0.0.0.0.1.0.1
# ::edge	have-degree-91	ARG4	method	0.0.0.0.1.0	0.0.0.0.1.0.2
# ::edge	have-quant-91	ARG3	less	0.0.0.0	0.0.0.0.0
# ::edge	have-quant-91	ARG4	method	0.0.0.0	0.0.0.0.1
# ::edge	less	quant	much	0.0.0.0.0	0.0.0.0.0.0
# ::edge	method	ARG1-of	have-degree-91	0.0.0.0.1	0.0.0.0.1.0
# ::edge	more	quant	much	0.0.0.0.1.0.1	0.0.0.0.1.0.1.0
# ::edge	take-10	ARG0	method	0.0	0.0.1
# ::edge	take-10	ARG1	time	0.0	0.0.0
# ::edge	take-10	ARG1-of	cause-01	0.0	0.0.2
# ::edge	time	ARG1-of	have-quant-91	0.0.0	0.0.0.0
(MRPNode-0 / and :op2 (MRPNode-1 / take-10 :ARG1 (MRPNode-2 / time :ARG1-of (MRPNode-3 / have-quant-91 :ARG3 (MRPNode-4 / less :quant (MRPNode-5 / much)) :ARG4 (MRPNode-6 / method :ARG1-of (MRPNode-7 / have-degree-91 :ARG2 (MRPNode-8 / naive) :ARG3 (MRPNode-9 / more :quant (MRPNode-10 / much)) :ARG4 (MRPNode-11 / method))))) :ARG0 (MRPNode-12 / method) :ARG1-of (MRPNode-13 / cause-01)))

# ::id 283
# ::snt In probability theory, the prior and conditional probabilities of two random events are related by Bayes' theorem.
# ::tok In probability theory , the prior and conditional probabilities of two random events are related by Bayes ' theorem .
# ::alignments 1-2|0.2.2 2-3|0.2 5-6|0.1.0 6-7|0.1 7-8|0.1.1.0 8-9|0.2.1 10-11|0.2.0.0 11-12|0.2.0.1 12-13|0.2.0 14-15|0 16-17|0.0.0+0.0.0.0+0.0.0.0.0 18-19|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:36.527999 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 59
# ::node	0	relate-01	14-15
# ::node	0.0	theorem	18-19
# ::node	0.0.0	person	16-17
# ::node	0.0.0.0	name	16-17
# ::node	0.0.0.0.0	bayes	16-17
# ::node	0.1	and	6-7
# ::node	0.1.0	prior	5-6
# ::node	0.1.1	probability	
# ::node	0.1.1.0	condition-01	7-8
# ::node	0.2	theory	2-3
# ::node	0.2.0	event	12-13
# ::node	0.2.0.0	2	10-11
# ::node	0.2.0.1	random	11-12
# ::node	0.2.1	probability	8-9
# ::node	0.2.2	probability	1-2
# ::root	0	relate-01
# ::edge	and	op1	prior	0.1	0.1.0
# ::edge	and	op2	probability	0.1	0.1.1
# ::edge	event	mod	random	0.2.0	0.2.0.1
# ::edge	event	quant	2	0.2.0	0.2.0.0
# ::edge	name	op1	bayes	0.0.0.0	0.0.0.0.0
# ::edge	person	name	name	0.0.0	0.0.0.0
# ::edge	probability	mod	condition-01	0.1.1	0.1.1.0
# ::edge	relate-01	ARG1	and	0	0.1
# ::edge	relate-01	ARG1	theorem	0	0.0
# ::edge	relate-01	location	theory	0	0.2
# ::edge	theorem	poss	person	0.0	0.0.0
# ::edge	theory	mod	event	0.2	0.2.0
# ::edge	theory	mod	probability	0.2	0.2.1
# ::edge	theory	mod	probability	0.2	0.2.2
(MRPNode-0 / relate-01 :ARG1 (MRPNode-1 / theorem :poss (MRPNode-2 / person :name (MRPNode-3 / name :op1 bayes))) :ARG1 (MRPNode-4 / and :op1 (MRPNode-5 / prior) :op2 (MRPNode-6 / probability :mod (MRPNode-7 / condition-01))) :location (MRPNode-8 / theory :mod (MRPNode-9 / event :quant 2 :mod (MRPNode-10 / random)) :mod (MRPNode-11 / probability) :mod (MRPNode-12 / probability)))

# ::id 284
# ::snt As an official theorem, Bayes' theorem is valid in all universal interpretations of probability.
# ::tok As an official theorem , Bayes ' theorem is valid in all universal interpretations of probability .
# ::alignments 2-3|0.0.0.0 3-4|0.0 5-6|0.0.1+0.0.1.0+0.0.1.0.0 7-8|0.0.0 9-10|0 11-12|0.1.1 12-13|0.1.2 13-14|0.1 15-16|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:36.547864 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	valid-02	9-10
# ::node	0.0	theorem	3-4
# ::node	0.0.0	theorem	7-8
# ::node	0.0.0.0	official	2-3
# ::node	0.0.1	person	5-6
# ::node	0.0.1.0	name	5-6
# ::node	0.0.1.0.0	bayes	5-6
# ::node	0.1	interpret-01	13-14
# ::node	0.1.0	probability	15-16
# ::node	0.1.1	all	11-12
# ::node	0.1.2	universal	12-13
# ::root	0	valid-02
# ::edge	interpret-01	ARG1	probability	0.1	0.1.0
# ::edge	interpret-01	mod	all	0.1	0.1.1
# ::edge	interpret-01	mod	universal	0.1	0.1.2
# ::edge	name	op1	bayes	0.0.1.0	0.0.1.0.0
# ::edge	person	name	name	0.0.1	0.0.1.0
# ::edge	theorem	mod	official	0.0.0	0.0.0.0
# ::edge	theorem	mod	theorem	0.0	0.0.0
# ::edge	theorem	poss	person	0.0	0.0.1
# ::edge	valid-02	ARG1	theorem	0	0.0
# ::edge	valid-02	ARG2	interpret-01	0	0.1
(MRPNode-0 / valid-02 :ARG1 (MRPNode-1 / theorem :mod (MRPNode-2 / theorem :mod (MRPNode-3 / official)) :poss (MRPNode-4 / person :name (MRPNode-5 / name :op1 bayes))) :ARG2 (MRPNode-6 / interpret-01 :ARG1 (MRPNode-7 / probability) :mod (MRPNode-8 / all) :mod (MRPNode-9 / universal)))

# ::id 285
# ::snt • P(B|A) is the conditional probability of B given A.
# ::tok * P ( B | A ) is the conditional probability of B given A.
# ::alignments 3-4|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 9-10|0.0 10-11|0 12-13|0.2.0+0.2.0.0+0.2.0.0.0 13-14|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:36.554789 ::parser eager_oracle ::smatch 0.7777777777777777 ::n_actions 30
# ::node	0	probability	10-11
# ::node	0.0	conditional	9-10
# ::node	0.1	give-01	13-14
# ::node	0.1.0	thing	
# ::node	0.1.0.0	variable	3-4
# ::node	0.1.0.0.0	name	3-4
# ::node	0.1.0.0.0.0	b	3-4
# ::node	0.2	thing	
# ::node	0.2.0	variable	12-13
# ::node	0.2.0.0	name	12-13
# ::node	0.2.0.0.0	b	12-13
# ::root	0	probability
# ::edge	give-01	ARG2	thing	0.1	0.1.0
# ::edge	name	op1	b	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op1	b	0.2.0.0	0.2.0.0.0
# ::edge	probability	domain	give-01	0	0.1
# ::edge	probability	domain	thing	0	0.2
# ::edge	probability	mod	conditional	0	0.0
# ::edge	thing	mod	variable	0.1.0	0.1.0.0
# ::edge	thing	mod	variable	0.2	0.2.0
# ::edge	variable	name	name	0.1.0.0	0.1.0.0.0
# ::edge	variable	name	name	0.2.0	0.2.0.0
(MRPNode-0 / probability :mod (MRPNode-1 / conditional) :domain (MRPNode-2 / give-01 :ARG2 (MRPNode-3 / thing :mod (MRPNode-4 / variable :name (MRPNode-5 / name :op1 b)))) :domain (MRPNode-6 / thing :mod (MRPNode-7 / variable :name (MRPNode-8 / name :op1 b))))

# ::id 286
# ::snt It does not take into account any information about B and therefore is considered “prior”.
# ::tok It does not take into account any information about B and therefore is considered " prior " .
# ::alignments 0-1|0.0.0 2-3|0.1.0 3-4|0.1 6-7|0.1.1.0 7-8|0.1.1 9-10|0.1.1.1+0.1.1.1.0+0.1.1.1.0.0+0.1.1.1.0.0.0 13-14|0.0 15-16|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:36.566179 ::parser eager_oracle ::smatch 0.8571428571428572 ::n_actions 47
# ::node	0	cause-01	
# ::node	0.0	consider-02	13-14
# ::node	0.0.0	it	0-1
# ::node	0.0.1	prior	15-16
# ::node	0.1	take-into-account-04	3-4
# ::node	0.1.0	-	2-3
# ::node	0.1.1	information	7-8
# ::node	0.1.1.0	any	6-7
# ::node	0.1.1.1	person	9-10
# ::node	0.1.1.1.0	variable	9-10
# ::node	0.1.1.1.0.0	name	9-10
# ::node	0.1.1.1.0.0.0	b	9-10
# ::root	0	cause-01
# ::edge	cause-01	ARG0	take-into-account-04	0	0.1
# ::edge	cause-01	ARG1	consider-02	0	0.0
# ::edge	consider-02	ARG1	it	0.0	0.0.0
# ::edge	consider-02	ARG2	prior	0.0	0.0.1
# ::edge	information	topic	any	0.1.1	0.1.1.0
# ::edge	information	topic	person	0.1.1	0.1.1.1
# ::edge	name	op1	b	0.1.1.1.0.0	0.1.1.1.0.0.0
# ::edge	person	mod	variable	0.1.1.1	0.1.1.1.0
# ::edge	take-into-account-04	ARG1	information	0.1	0.1.1
# ::edge	take-into-account-04	polarity	-	0.1	0.1.0
# ::edge	variable	name	name	0.1.1.1.0	0.1.1.1.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / consider-02 :ARG1 (MRPNode-2 / it) :ARG2 (MRPNode-3 / prior)) :ARG0 (MRPNode-4 / take-into-account-04 :polarity - :ARG1 (MRPNode-5 / information :topic (MRPNode-6 / any) :topic (MRPNode-7 / person :mod (MRPNode-8 / variable :name (MRPNode-9 / name :op1 b))))))

# ::id 287
# ::snt Each dimensions corresponds to a separate terms.
# ::tok Each dimensions corresponds to a separate terms .
# ::alignments 0-1|0.1.0 1-2|0.1 2-3|0 5-6|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:36.569177 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	correspond-02	2-3
# ::node	0.0	term	6-7
# ::node	0.0.0	separate-02	5-6
# ::node	0.1	dimension	1-2
# ::node	0.1.0	each	0-1
# ::root	0	correspond-02
# ::edge	correspond-02	ARG1	dimension	0	0.1
# ::edge	correspond-02	ARG1	term	0	0.0
# ::edge	dimension	mod	each	0.1	0.1.0
# ::edge	term	ARG1-of	separate-02	0.0	0.0.0
(MRPNode-0 / correspond-02 :ARG1 (MRPNode-1 / term :ARG1-of (MRPNode-2 / separate-02)) :ARG1 (MRPNode-3 / dimension :mod (MRPNode-4 / each)))

# ::id 288
# ::snt It is usually used to calculate posterior probabilities given observations.
# ::tok It is usually used to calculate posterior probabilities given observations .
# ::alignments 0-1|0.0 2-3|0.1 3-4|0 5-6|0.2 7-8|0.2.0 8-9|0.2.1.0 9-10|0.2.1 ::annotator aligner3.py ::date 2021-03-12 14:31:36.575160 ::parser eager_oracle ::smatch 0.9375 ::n_actions 36
# ::node	0	use-01	3-4
# ::node	0.0	it	0-1
# ::node	0.1	usual	2-3
# ::node	0.2	calculate-01	5-6
# ::node	0.2.0	probability	7-8
# ::node	0.2.0.0	differ-02	
# ::node	0.2.1	observe-01	9-10
# ::node	0.2.1.0	give-01	8-9
# ::root	0	use-01
# ::edge	calculate-01	ARG0	it	0.2	0.0
# ::edge	calculate-01	ARG1	observe-01	0.2	0.2.1
# ::edge	calculate-01	ARG1	probability	0.2	0.2.0
# ::edge	observe-01	ARG1-of	give-01	0.2.1	0.2.1.0
# ::edge	probability	mod	differ-02	0.2.0	0.2.0.0
# ::edge	use-01	ARG1	it	0	0.0
# ::edge	use-01	ARG2	calculate-01	0	0.2
# ::edge	use-01	mod	usual	0	0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / it) :mod (MRPNode-2 / usual) :ARG2 (MRPNode-3 / calculate-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-4 / probability :mod (MRPNode-5 / differ-02)) :ARG1 (MRPNode-6 / observe-01 :ARG1-of (MRPNode-7 / give-01))))

# ::id 289
# ::snt Each dimension corresponds to a separate term.
# ::tok Each dimension corresponds to a separate term .
# ::alignments 0-1|0.1.0 1-2|0.1 2-3|0 5-6|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:36.578063 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	correspond-02	2-3
# ::node	0.0	term	6-7
# ::node	0.0.0	separate-02	5-6
# ::node	0.1	dimension	1-2
# ::node	0.1.0	each	0-1
# ::root	0	correspond-02
# ::edge	correspond-02	ARG1	dimension	0	0.1
# ::edge	correspond-02	ARG1	term	0	0.0
# ::edge	dimension	mod	each	0.1	0.1.0
# ::edge	term	ARG1-of	separate-02	0.0	0.0.0
(MRPNode-0 / correspond-02 :ARG1 (MRPNode-1 / term :ARG1-of (MRPNode-2 / separate-02)) :ARG1 (MRPNode-3 / dimension :mod (MRPNode-4 / each)))

# ::id 290
# ::snt However, the key in Dynamic Programming is to determine the structure of optimal solutions.
# ::tok However , the key in Dynamic Programming is to determine the structure of optimal solutions .
# ::alignments 3-4|0.0 6-7|0.0.1 9-10|0.0.0 11-12|0.0.0.0 13-14|0.0.0.0.0.0 14-15|0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:36.586523 ::parser eager_oracle ::smatch 0.7857142857142857 ::n_actions 36
# ::node	0	contrast-01	
# ::node	0.0	key-02	3-4
# ::node	0.0.0	determine-01	9-10
# ::node	0.0.0.0	structure-01	11-12
# ::node	0.0.0.0.0	solution	14-15
# ::node	0.0.0.0.0.0	optimal	13-14
# ::node	0.0.1	program-01	6-7
# ::node	0.0.1.0	philosophy	
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	key-02	0	0.0
# ::edge	determine-01	ARG1	structure-01	0.0.0	0.0.0.0
# ::edge	key-02	ARG1	determine-01	0.0	0.0.0
# ::edge	key-02	ARG2	program-01	0.0	0.0.1
# ::edge	program-01	mod	philosophy	0.0.1	0.0.1.0
# ::edge	solution	mod	optimal	0.0.0.0.0	0.0.0.0.0.0
# ::edge	structure-01	ARG1	solution	0.0.0.0	0.0.0.0.0
(MRPNode-0 / contrast-01 :ARG2 (MRPNode-1 / key-02 :ARG1 (MRPNode-2 / determine-01 :ARG1 (MRPNode-3 / structure-01 :ARG1 (MRPNode-4 / solution :mod (MRPNode-5 / optimal)))) :ARG2 (MRPNode-6 / program-01 :mod (MRPNode-7 / philosophy))))

# ::id 291
# ::snt The typical example could be of a finalized schedule of events at an exhibition.
# ::tok The typical example could be of a finalized schedule of events at an exhibition .
# ::alignments 1-2|0.0 2-3|0.1 3-4|0 7-8|0.1.0.1 8-9|0.1.0 10-11|0.1.0.0 13-14|0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:36.592807 ::parser eager_oracle ::smatch 1.0 ::n_actions 40
# ::node	0	possible-01	3-4
# ::node	0.0	typical-02	1-2
# ::node	0.1	exemplify-01	2-3
# ::node	0.1.0	schedule-01	8-9
# ::node	0.1.0.0	event	10-11
# ::node	0.1.0.0.0	exhibit-01	13-14
# ::node	0.1.0.1	finalize-01	7-8
# ::root	0	possible-01
# ::edge	event	location	exhibit-01	0.1.0.0	0.1.0.0.0
# ::edge	exemplify-01	ARG0	schedule-01	0.1	0.1.0
# ::edge	possible-01	ARG1	exemplify-01	0	0.1
# ::edge	possible-01	ARG1	typical-02	0	0.0
# ::edge	schedule-01	ARG1	event	0.1.0	0.1.0.0
# ::edge	schedule-01	ARG1-of	finalize-01	0.1.0	0.1.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / typical-02) :ARG1 (MRPNode-2 / exemplify-01 :ARG0 (MRPNode-3 / schedule-01 :ARG1 (MRPNode-4 / event :location (MRPNode-5 / exhibit-01)) :ARG1-of (MRPNode-6 / finalize-01))))

# ::id 292
# ::snt The PageRank is a recursive algorithm used by Google to determine which webpages are more important than others.
# ::tok The PageRank is a recursive algorithm used by Google to determine which webpages are more important than others .
# ::alignments 4-5|0.0 5-6|0 6-7|0.1 10-11|0.2 12-13|0.2.0.0 14-15|0.2.0.2 15-16|0.2.0.1 17-18|0.2.0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:36.604165 ::parser eager_oracle ::smatch 0.5945945945945945 ::n_actions 42
# ::node	0	algorithm	5-6
# ::node	0.0	recursive	4-5
# ::node	0.1	use-01	6-7
# ::node	0.2	determine-01	10-11
# ::node	0.2.0	have-degree-91	
# ::node	0.2.0.0	webpage	12-13
# ::node	0.2.0.1	important-01	15-16
# ::node	0.2.0.2	more	14-15
# ::node	0.2.0.3	other	17-18
# ::node	0.3	publication	
# ::node	0.3.0	name	
# ::node	0.3.0.0	google	
# ::node	0.3.0.1	pagerank	
# ::root	0	algorithm
# ::edge	algorithm	ARG1-of	recursive	0	0.0
# ::edge	algorithm	ARG1-of	use-01	0	0.1
# ::edge	algorithm	domain	determine-01	0	0.2
# ::edge	algorithm	domain	publication	0	0.3
# ::edge	determine-01	ARG1	have-degree-91	0.2	0.2.0
# ::edge	have-degree-91	ARG1	webpage	0.2.0	0.2.0.0
# ::edge	have-degree-91	ARG2	important-01	0.2.0	0.2.0.1
# ::edge	have-degree-91	ARG3	more	0.2.0	0.2.0.2
# ::edge	have-degree-91	ARG4	other	0.2.0	0.2.0.3
# ::edge	important-01	ARG1	webpage	0.2.0.1	0.2.0.0
# ::edge	name	op1	google	0.3.0	0.3.0.0
# ::edge	name	op2	pagerank	0.3.0	0.3.0.1
# ::edge	publication	name	name	0.3	0.3.0
(MRPNode-0 / algorithm :ARG1-of (MRPNode-1 / recursive) :ARG1-of (MRPNode-2 / use-01) :domain (MRPNode-3 / determine-01 :ARG1 (MRPNode-4 / have-degree-91 :ARG1 (MRPNode-5 / webpage) :ARG2 (MRPNode-6 / important-01 :ARG1 MRPNode-5) :ARG3 (MRPNode-7 / more) :ARG4 (MRPNode-8 / other))) :domain (MRPNode-9 / publication :name (MRPNode-10 / name :op1 google :op2 pagerank)))

# ::id 293
# ::snt A document is represented as a vector, and each dimension corresponds to a separate term.
# ::tok A document is represented as a vector , and each dimension corresponds to a separate term .
# ::alignments 1-2|0.0.0 3-4|0.0 6-7|0.0.1 8-9|0 9-10|0.1.0.0 10-11|0.1.0 11-12|0.1 14-15|0.1.1.0 15-16|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:36.613773 ::parser eager_oracle ::smatch 1.0 ::n_actions 46
# ::node	0	and	8-9
# ::node	0.0	represent-01	3-4
# ::node	0.0.0	document	1-2
# ::node	0.0.1	vector	6-7
# ::node	0.1	correspond-02	11-12
# ::node	0.1.0	dimension	10-11
# ::node	0.1.0.0	each	9-10
# ::node	0.1.1	term	15-16
# ::node	0.1.1.0	separate-02	14-15
# ::root	0	and
# ::edge	and	op1	represent-01	0	0.0
# ::edge	and	op2	correspond-02	0	0.1
# ::edge	correspond-02	ARG1	dimension	0.1	0.1.0
# ::edge	correspond-02	ARG2	term	0.1	0.1.1
# ::edge	dimension	mod	each	0.1.0	0.1.0.0
# ::edge	represent-01	ARG1	document	0.0	0.0.0
# ::edge	represent-01	ARG2	vector	0.0	0.0.1
# ::edge	term	ARG1-of	separate-02	0.1.1	0.1.1.0
(MRPNode-0 / and :op1 (MRPNode-1 / represent-01 :ARG1 (MRPNode-2 / document) :ARG2 (MRPNode-3 / vector)) :op2 (MRPNode-4 / correspond-02 :ARG1 (MRPNode-5 / dimension :mod (MRPNode-6 / each)) :ARG2 (MRPNode-7 / term :ARG1-of (MRPNode-8 / separate-02))))

# ::id 294
# ::snt Single words, keywords and occasionally longer phrases are used for terms.
# ::tok Single words , keywords and occasionally longer phrases are used for terms .
# ::alignments 0-1|0.0.0.0 1-2|0.0.0 3-4|0.0.1 4-5|0.0 5-6|0.0.2.2 6-7|0.0.2.1 7-8|0.0.2 9-10|0 11-12|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:36.627413 ::parser eager_oracle ::smatch 0.9 ::n_actions 42
# ::node	0	use-01	9-10
# ::node	0.0	and	4-5
# ::node	0.0.0	word	1-2
# ::node	0.0.0.0	single-02	0-1
# ::node	0.0.1	keyword	3-4
# ::node	0.0.2	phrase	7-8
# ::node	0.0.2.0	have-degree-91	
# ::node	0.0.2.0.0	more	
# ::node	0.0.2.1	long-03	6-7
# ::node	0.0.2.2	occasional	5-6
# ::node	0.1	term	11-12
# ::root	0	use-01
# ::edge	and	op1	word	0.0	0.0.0
# ::edge	and	op2	keyword	0.0	0.0.1
# ::edge	and	op3	phrase	0.0	0.0.2
# ::edge	have-degree-91	ARG3	more	0.0.2.0	0.0.2.0.0
# ::edge	phrase	ARG1-of	have-degree-91	0.0.2	0.0.2.0
# ::edge	phrase	ARG1-of	long-03	0.0.2	0.0.2.1
# ::edge	phrase	frequency	occasional	0.0.2	0.0.2.2
# ::edge	use-01	ARG1	and	0	0.0
# ::edge	use-01	ARG2	term	0	0.1
# ::edge	word	ARG1-of	single-02	0.0.0	0.0.0.0
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / word :ARG1-of (MRPNode-3 / single-02)) :op2 (MRPNode-4 / keyword) :op3 (MRPNode-5 / phrase :ARG1-of (MRPNode-6 / have-degree-91 :ARG3 (MRPNode-7 / more)) :ARG1-of (MRPNode-8 / long-03) :frequency (MRPNode-9 / occasional))) :ARG2 (MRPNode-10 / term))

# ::id 295
# ::snt Inheritance in object oriented programming is a way to form new classes using classes that have already been defined.
# ::tok Inheritance in object oriented programming is a way to form new classes using classes that have already been defined .
# ::alignments 0-1|0.1 2-3|0.1.0.0.0 3-4|0.1.0.0 4-5|0.1.0 7-8|0 9-10|0.0 10-11|0.0.0.0 11-12|0.0.0 12-13|0.0.1 13-14|0.0.1.0 16-17|0.0.1.0.0.0 18-19|0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:36.654173 ::parser eager_oracle ::smatch 1.0 ::n_actions 58
# ::node	0	way	7-8
# ::node	0.0	form-01	9-10
# ::node	0.0.0	class	11-12
# ::node	0.0.0.0	new-01	10-11
# ::node	0.0.1	use-01	12-13
# ::node	0.0.1.0	class	13-14
# ::node	0.0.1.0.0	define-01	18-19
# ::node	0.0.1.0.0.0	already	16-17
# ::node	0.1	inherit-01	0-1
# ::node	0.1.0	program-01	4-5
# ::node	0.1.0.0	orient-01	3-4
# ::node	0.1.0.0.0	object	2-3
# ::root	0	way
# ::edge	class	ARG1-of	define-01	0.0.1.0	0.0.1.0.0
# ::edge	class	ARG1-of	new-01	0.0.0	0.0.0.0
# ::edge	define-01	time	already	0.0.1.0.0	0.0.1.0.0.0
# ::edge	form-01	ARG1	class	0.0	0.0.0
# ::edge	form-01	manner	use-01	0.0	0.0.1
# ::edge	inherit-01	ARG1	program-01	0.1	0.1.0
# ::edge	orient-01	ARG2	object	0.1.0.0	0.1.0.0.0
# ::edge	program-01	ARG2	orient-01	0.1.0	0.1.0.0
# ::edge	use-01	ARG1	class	0.0.1	0.0.1.0
# ::edge	way	domain	form-01	0	0.0
# ::edge	way	domain	inherit-01	0	0.1
(MRPNode-0 / way :domain (MRPNode-1 / form-01 :ARG1 (MRPNode-2 / class :ARG1-of (MRPNode-3 / new-01)) :manner (MRPNode-4 / use-01 :ARG1 (MRPNode-5 / class :ARG1-of (MRPNode-6 / define-01 :time (MRPNode-7 / already))))) :domain (MRPNode-8 / inherit-01 :ARG1 (MRPNode-9 / program-01 :ARG2 (MRPNode-10 / orient-01 :ARG2 (MRPNode-11 / object)))))

# ::id 296
# ::snt A document has representation as a vector.
# ::tok A document has representation as a vector .
# ::alignments 1-2|0.1 2-3|0 3-4|0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:36.656581 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	have-03	2-3
# ::node	0.0	representation-02	3-4
# ::node	0.0.0	vector	6-7
# ::node	0.1	document	1-2
# ::root	0	have-03
# ::edge	have-03	ARG0	document	0	0.1
# ::edge	have-03	ARG1	representation-02	0	0.0
# ::edge	representation-02	manner	vector	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / representation-02 :manner (MRPNode-2 / vector)) :ARG0 (MRPNode-3 / document))

# ::id 297
# ::snt Bayes Theorem is a mathematical formula used to calculate conditional probabilities.
# ::tok Bayes Theorem is a mathematical formula used to calculate conditional probabilities .
# ::alignments 0-2|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0+0.0.0.1.0.1 4-5|0.1 5-6|0 6-7|0.0 8-9|0.0.0 9-10|0.0.0.0.0 10-11|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:36.663158 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	formula	5-6
# ::node	0.0	use-01	6-7
# ::node	0.0.0	calculate-01	8-9
# ::node	0.0.0.0	probability	10-11
# ::node	0.0.0.0.0	conditional	9-10
# ::node	0.0.0.1	thing	0-2
# ::node	0.0.0.1.0	name	0-2
# ::node	0.0.0.1.0.0	bayes	0-2
# ::node	0.0.0.1.0.1	theorem	0-2
# ::node	0.1	mathematics	4-5
# ::root	0	formula
# ::edge	calculate-01	ARG0	thing	0.0.0	0.0.0.1
# ::edge	calculate-01	ARG1	probability	0.0.0	0.0.0.0
# ::edge	formula	domain	thing	0	0.0.0.1
# ::edge	formula	mod	mathematics	0	0.1
# ::edge	formula	mod	use-01	0	0.0
# ::edge	name	op1	bayes	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op2	theorem	0.0.0.1.0	0.0.0.1.0.1
# ::edge	probability	mod	conditional	0.0.0.0	0.0.0.0.0
# ::edge	thing	name	name	0.0.0.1	0.0.0.1.0
# ::edge	use-01	ARG2	calculate-01	0.0	0.0.0
(MRPNode-0 / formula :mod (MRPNode-1 / use-01 :ARG2 (MRPNode-2 / calculate-01 :ARG1 (MRPNode-3 / probability :mod (MRPNode-4 / conditional)) :ARG0 (MRPNode-6 / thing :name (MRPNode-7 / name :op1 bayes :op2 theorem)))) :mod (MRPNode-5 / mathematics) :domain MRPNode-6)

# ::id 298
# ::snt A variation of the PageRank method bases the importance of a webpage on how many visits the page gets.
# ::tok A variation of the PageRank method bases the importance of a webpage on how many visits the page gets .
# ::alignments 4-5|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 5-6|0.1.0 6-7|0 8-9|0.0 11-12|0.0.1 15-16|0.0.0.0 17-18|0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:36.676265 ::parser eager_oracle ::smatch 0.7894736842105262 ::n_actions 41
# ::node	0	base-02	6-7
# ::node	0.0	important-01	8-9
# ::node	0.0.0	number	
# ::node	0.0.0.0	visit-01	15-16
# ::node	0.0.0.0.0	page	17-18
# ::node	0.0.1	webpage	11-12
# ::node	0.1	vary-01	
# ::node	0.1.0	method	5-6
# ::node	0.1.0.0	publication	4-5
# ::node	0.1.0.0.0	name	4-5
# ::node	0.1.0.0.0.0	pagerank	4-5
# ::root	0	base-02
# ::edge	base-02	ARG0	vary-01	0	0.1
# ::edge	base-02	ARG1	important-01	0	0.0
# ::edge	important-01	ARG1	number	0.0	0.0.0
# ::edge	important-01	ARG1	webpage	0.0	0.0.1
# ::edge	method	mod	publication	0.1.0	0.1.0.0
# ::edge	name	op1	pagerank	0.1.0.0.0	0.1.0.0.0.0
# ::edge	number	quant-of	visit-01	0.0.0	0.0.0.0
# ::edge	publication	name	name	0.1.0.0	0.1.0.0.0
# ::edge	vary-01	ARG1	method	0.1	0.1.0
# ::edge	visit-01	ARG0	page	0.0.0.0	0.0.0.0.0
(MRPNode-0 / base-02 :ARG1 (MRPNode-1 / important-01 :ARG1 (MRPNode-2 / number :quant-of (MRPNode-3 / visit-01 :ARG0 (MRPNode-4 / page))) :ARG1 (MRPNode-5 / webpage)) :ARG0 (MRPNode-6 / vary-01 :ARG1 (MRPNode-7 / method :mod (MRPNode-8 / publication :name (MRPNode-9 / name :op1 pagerank)))))

# ::id 299
# ::snt If a term appears in the document, the terms value in the vector is non-zero.
# ::tok If a term appears in the document , the terms value in the vector is non - zero .
# ::alignments 2-3|0.1.0 3-4|0.1 6-7|0.1.1 10-11|0.0.1 13-14|0.0.1.0 15-16|0.0.0 17-18|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:36.686478 ::parser eager_oracle ::smatch 0.7857142857142856 ::n_actions 41
# ::node	0	have-condition-91	
# ::node	0.0	zero	17-18
# ::node	0.0.0	-	15-16
# ::node	0.0.1	value	10-11
# ::node	0.0.1.0	vector	13-14
# ::node	0.1	appear-01	3-4
# ::node	0.1.0	term	2-3
# ::node	0.1.1	document	6-7
# ::root	0	have-condition-91
# ::edge	appear-01	ARG1	term	0.1	0.1.0
# ::edge	appear-01	location	document	0.1	0.1.1
# ::edge	have-condition-91	ARG1	zero	0	0.0
# ::edge	have-condition-91	ARG2	appear-01	0	0.1
# ::edge	value	location	vector	0.0.1	0.0.1.0
# ::edge	zero	domain	value	0.0	0.0.1
# ::edge	zero	polarity	-	0.0	0.0.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / zero :polarity - :domain (MRPNode-2 / value :location (MRPNode-3 / vector))) :ARG2 (MRPNode-4 / appear-01 :ARG1 (MRPNode-5 / term) :location (MRPNode-6 / document)))

# ::id 300
# ::snt The new classes are called derived classes and they inherit the behaviours and attributes of the base classes.
# ::tok The new classes are called derived classes and they inherit the behaviours and attributes of the base classes .
# ::alignments 1-2|0.0.1.0 2-3|0.0.1 4-5|0.0 5-6|0.0.0.0 6-7|0.0.0 7-8|0 9-10|0.1 11-12|0.0.1.1+0.0.1.1.0 12-13|0.1.0 13-14|0.1.0.0+0.1.0.0.0 16-17|0.0.1.1.0.0.0 17-18|0.0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.599909 ::parser eager_oracle ::smatch 1.0 ::n_actions 72
# ::node	0	and	7-8
# ::node	0.0	call-01	4-5
# ::node	0.0.0	class	6-7
# ::node	0.0.0.0	derive-01	5-6
# ::node	0.0.1	class	2-3
# ::node	0.0.1.0	new-01	1-2
# ::node	0.0.1.1	thing	11-12
# ::node	0.0.1.1.0	behave-01	11-12
# ::node	0.0.1.1.0.0	class	17-18
# ::node	0.0.1.1.0.0.0	base	16-17
# ::node	0.1	inherit-01	9-10
# ::node	0.1.0	and	12-13
# ::node	0.1.0.0	thing	13-14
# ::node	0.1.0.0.0	attribute-01	13-14
# ::root	0	and
# ::edge	and	op1	call-01	0	0.0
# ::edge	and	op2	inherit-01	0	0.1
# ::edge	and	op2	thing	0.1.0	0.1.0.0
# ::edge	attribute-01	ARG2	class	0.1.0.0.0	0.0.1.1.0.0
# ::edge	behave-01	ARG0	class	0.0.1.1.0	0.0.1.1.0.0
# ::edge	call-01	ARG1	class	0.0	0.0.0
# ::edge	call-01	ARG2	class	0.0	0.0.1
# ::edge	class	ARG0-of	thing	0.0.1	0.0.1.1
# ::edge	class	ARG1-of	derive-01	0.0.0	0.0.0.0
# ::edge	class	ARG1-of	new-01	0.0.1	0.0.1.0
# ::edge	class	mod	base	0.0.1.1.0.0	0.0.1.1.0.0.0
# ::edge	inherit-01	ARG0	class	0.1	0.0.0
# ::edge	inherit-01	ARG1	and	0.1	0.1.0
# ::edge	thing	ARG1-of	behave-01	0.0.1.1	0.0.1.1.0
# ::edge	thing	ARG2-of	attribute-01	0.1.0.0	0.1.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / call-01 :ARG1 (MRPNode-2 / class :ARG1-of (MRPNode-3 / derive-01)) :ARG2 (MRPNode-4 / class :ARG1-of (MRPNode-5 / new-01) :ARG0-of (MRPNode-6 / thing :ARG1-of (MRPNode-7 / behave-01 :ARG0 (MRPNode-8 / class :mod (MRPNode-9 / base)))))) :op2 (MRPNode-10 / inherit-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-11 / and :op2 (MRPNode-12 / thing :ARG2-of (MRPNode-13 / attribute-01 :ARG2 MRPNode-8)))))

# ::id 301
# ::snt As a formal theorem Bayes theorem is valid in all common interpretations of probability.
# ::tok As a formal theorem Bayes theorem is valid in all common interpretations of probability .
# ::alignments 2-3|0.1.1 3-4|0.1 4-5|0.1.0.0+0.1.0.0.0 5-6|0.1.0 7-8|0 9-10|0.0.2 10-11|0.0.1 11-12|0.0 13-14|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.614897 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	valid-02	7-8
# ::node	0.0	interpret-01	11-12
# ::node	0.0.0	probability	13-14
# ::node	0.0.1	common	10-11
# ::node	0.0.2	all	9-10
# ::node	0.1	theorem	3-4
# ::node	0.1.0	theorem	5-6
# ::node	0.1.0.0	name	4-5
# ::node	0.1.0.0.0	bayes	4-5
# ::node	0.1.1	formal	2-3
# ::root	0	valid-02
# ::edge	interpret-01	ARG0	common	0.0	0.0.1
# ::edge	interpret-01	ARG1	probability	0.0	0.0.0
# ::edge	interpret-01	mod	all	0.0	0.0.2
# ::edge	name	op1	bayes	0.1.0.0	0.1.0.0.0
# ::edge	theorem	mod	formal	0.1	0.1.1
# ::edge	theorem	mod	theorem	0.1	0.1.0
# ::edge	theorem	name	name	0.1.0	0.1.0.0
# ::edge	valid-02	ARG1	interpret-01	0	0.0
# ::edge	valid-02	ARG1	theorem	0	0.1
(MRPNode-0 / valid-02 :ARG1 (MRPNode-1 / interpret-01 :ARG1 (MRPNode-2 / probability) :ARG0 (MRPNode-3 / common) :mod (MRPNode-4 / all)) :ARG1 (MRPNode-5 / theorem :mod (MRPNode-6 / theorem :name (MRPNode-7 / name :op1 bayes)) :mod (MRPNode-8 / formal)))

# ::id 302
# ::snt It is also called the subsequent probability because it is derived from or depends upon the specified value of B.
# ::tok It is also called the subsequent probability because it is derived from or depends upon the specified value of B.
# ::alignments 2-3|0.1 3-4|0 5-6|0.3.0 6-7|0.3 7-8|0.2 8-9|0.0 10-11|0.0.0 12-13|0.2.0 13-14|0.0.1 16-17|0.0.0.0.0 17-18|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.638340 ::parser eager_oracle ::smatch 1.0 ::n_actions 61
# ::node	0	call-01	3-4
# ::node	0.0	it	8-9
# ::node	0.0.0	derive-01	10-11
# ::node	0.0.0.0	value	17-18
# ::node	0.0.0.0.0	specify-01	16-17
# ::node	0.0.1	depend-01	13-14
# ::node	0.1	also	2-3
# ::node	0.2	cause-01	7-8
# ::node	0.2.0	or	12-13
# ::node	0.3	probability	6-7
# ::node	0.3.0	subsequent	5-6
# ::root	0	call-01
# ::edge	call-01	ARG1	it	0	0.0
# ::edge	call-01	ARG1-of	cause-01	0	0.2
# ::edge	call-01	ARG2	probability	0	0.3
# ::edge	call-01	mod	also	0	0.1
# ::edge	cause-01	ARG0	or	0.2	0.2.0
# ::edge	depend-01	ARG1	value	0.0.1	0.0.0.0
# ::edge	derive-01	ARG2	value	0.0.0	0.0.0.0
# ::edge	it	ARG0-of	depend-01	0.0	0.0.1
# ::edge	it	ARG1-of	derive-01	0.0	0.0.0
# ::edge	or	op2	depend-01	0.2.0	0.0.1
# ::edge	probability	time	subsequent	0.3	0.3.0
# ::edge	value	ARG1-of	specify-01	0.0.0.0	0.0.0.0.0
(MRPNode-0 / call-01 :ARG1 (MRPNode-1 / it :ARG1-of (MRPNode-2 / derive-01 :ARG2 (MRPNode-3 / value :ARG1-of (MRPNode-4 / specify-01))) :ARG0-of (MRPNode-5 / depend-01 :ARG1 MRPNode-3)) :mod (MRPNode-6 / also) :ARG1-of (MRPNode-7 / cause-01 :ARG0 (MRPNode-8 / or :op2 MRPNode-5)) :ARG2 (MRPNode-9 / probability :time (MRPNode-10 / subsequent)))

# ::id 303
# ::snt tf-idf weighting is one of the most well known schemes.
# ::tok tf - idf weighting is one of the most well known schemes .
# ::alignments 6-7|0+0.1.0 8-9|0.1.0.0 10-11|0.0.0 11-12|0.0+0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:37.644452 ::parser eager_oracle ::smatch 0.8571428571428571 ::n_actions 36
# ::node	0	include-91	6-7
# ::node	0.0	scheme	11-12
# ::node	0.0.0	know-02	10-11
# ::node	0.0.1	name	0-4
# ::node	0.0.1.0	tf	0-4
# ::node	0.0.1.1	weighting	0-4
# ::node	0.1	scheme	11-12
# ::node	0.1.0	have-degree-91	6-7
# ::node	0.1.0.0	most	8-9
# ::root	0	include-91
# ::edge	have-degree-91	ARG3	most	0.1.0	0.1.0.0
# ::edge	include-91	ARG1	scheme	0	0.0
# ::edge	include-91	ARG1	scheme	0	0.1
# ::edge	name	op1	tf	0.0.1	0.0.1.0
# ::edge	name	op2	weighting	0.0.1	0.0.1.1
# ::edge	scheme	ARG1-of	have-degree-91	0.1	0.1.0
# ::edge	scheme	ARG1-of	know-02	0.0	0.0.0
# ::edge	scheme	name	name	0.0	0.0.1
(MRPNode-0 / include-91 :ARG1 (MRPNode-1 / scheme :ARG1-of (MRPNode-2 / know-02) :name (MRPNode-3 / name :op1 tf :op2 weighting)) :ARG1 (MRPNode-4 / scheme :ARG1-of (MRPNode-5 / have-degree-91 :ARG3 (MRPNode-6 / most))))

# ::id 304
# ::snt LIMITATION: There is some limitation of vector space model.
# ::tok LIMITATION : There is some limitation of vector space model .
# ::alignments 0-1|0.0 4-5|0.0.1 7-8|0.0.0.0.0 8-9|0.0.0.0 9-10|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.649972 ::parser eager_oracle ::smatch 0.8181818181818182 ::n_actions 28
# ::node	0	imply-01	
# ::node	0.0	limit-01	0-1
# ::node	0.0.0	model	9-10
# ::node	0.0.0.0	space	8-9
# ::node	0.0.0.0.0	vector	7-8
# ::node	0.0.1	some	4-5
# ::root	0	imply-01
# ::edge	imply-01	ARG0	limit-01	0	0.0
# ::edge	limit-01	ARG1	model	0.0	0.0.0
# ::edge	limit-01	mod	some	0.0	0.0.1
# ::edge	model	mod	space	0.0.0	0.0.0.0
# ::edge	space	mod	vector	0.0.0.0	0.0.0.0.0
(MRPNode-0 / imply-01 :ARG0 (MRPNode-1 / limit-01 :ARG1 (MRPNode-2 / model :mod (MRPNode-3 / space :mod (MRPNode-4 / vector))) :mod (MRPNode-5 / some)))

# ::id 305
# ::snt The idea of inheritance is to reuse the existing code with little or no modification at all.
# ::tok The idea of inheritance is to reuse the existing code with little or no modification at all .
# ::alignments 1-2|0.1 3-4|0.1.0 6-7|0 8-9|0.0.0 9-10|0.0 11-12|0.2.0.1 12-13|0.2 13-14|0.2.1.0 14-15|0.2.0+0.2.1 15-17|0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.658403 ::parser eager_oracle ::smatch 1.0 ::n_actions 58
# ::node	0	reuse	6-7
# ::node	0.0	code	9-10
# ::node	0.0.0	exist-01	8-9
# ::node	0.1	idea	1-2
# ::node	0.1.0	inherit-01	3-4
# ::node	0.2	or	12-13
# ::node	0.2.0	modify-01	14-15
# ::node	0.2.0.0	at-all	15-17
# ::node	0.2.0.1	little	11-12
# ::node	0.2.1	modify-01	14-15
# ::node	0.2.1.0	-	13-14
# ::root	0	reuse
# ::edge	code	ARG1-of	exist-01	0.0	0.0.0
# ::edge	idea	topic	inherit-01	0.1	0.1.0
# ::edge	modify-01	degree	little	0.2.0	0.2.0.1
# ::edge	modify-01	mod	at-all	0.2.0	0.2.0.0
# ::edge	modify-01	polarity	-	0.2.1	0.2.1.0
# ::edge	or	op1	modify-01	0.2	0.2.0
# ::edge	or	op2	modify-01	0.2	0.2.1
# ::edge	reuse	domain	code	0	0.0
# ::edge	reuse	domain	idea	0	0.1
# ::edge	reuse	manner	or	0	0.2
(MRPNode-0 / reuse :domain (MRPNode-1 / code :ARG1-of (MRPNode-2 / exist-01)) :domain (MRPNode-3 / idea :topic (MRPNode-4 / inherit-01)) :manner (MRPNode-5 / or :op1 (MRPNode-6 / modify-01 :mod (MRPNode-7 / at-all) :degree (MRPNode-8 / little)) :op2 (MRPNode-9 / modify-01 :polarity -)))

# ::id 306
# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
# ::tok The basic idea is to represent each document as a vector of certain weighted word frequencies .
# ::alignments 1-2|0.1.0 2-3|0.1 5-6|0 6-7|0.0.0 7-8|0.0 10-11|0.2 12-13|0.2.0.0 13-14|0.2.0.2 14-15|0.2.0.1 15-16|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.668094 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	represent-01	5-6
# ::node	0.0	document	7-8
# ::node	0.0.0	each	6-7
# ::node	0.1	idea	2-3
# ::node	0.1.0	basic	1-2
# ::node	0.2	vector	10-11
# ::node	0.2.0	frequency	15-16
# ::node	0.2.0.0	certain	12-13
# ::node	0.2.0.1	word	14-15
# ::node	0.2.0.2	weight-01	13-14
# ::root	0	represent-01
# ::edge	document	mod	each	0.0	0.0.0
# ::edge	frequency	ARG1-of	weight-01	0.2.0	0.2.0.2
# ::edge	frequency	ARG1-of	word	0.2.0	0.2.0.1
# ::edge	frequency	mod	certain	0.2.0	0.2.0.0
# ::edge	idea	mod	basic	0.1	0.1.0
# ::edge	represent-01	ARG0	idea	0	0.1
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.2
# ::edge	vector	consist-of	frequency	0.2	0.2.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document :mod (MRPNode-2 / each)) :ARG0 (MRPNode-3 / idea :mod (MRPNode-4 / basic)) :ARG2 (MRPNode-5 / vector :consist-of (MRPNode-6 / frequency :mod (MRPNode-7 / certain) :ARG1-of (MRPNode-8 / word) :ARG1-of (MRPNode-9 / weight-01))))

# ::id 307
# ::snt of a particular page is roughly based upon the quantity of inbound links as well as the PageRank?
# ::tok of a particular page is roughly based upon the quantity of inbound links as well as the PageRank ?
# ::alignments 2-3|0.0.0.0.1 5-6|0.1 6-7|0 11-12|0.0.0.0.0 12-13|0.0.0.0 17-18|0.0.1+0.0.1.0+0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.677846 ::parser eager_oracle ::smatch 0.7222222222222222 ::n_actions 38
# ::node	0	base-02	6-7
# ::node	0.0	and	
# ::node	0.0.0	number	
# ::node	0.0.0.0	link	12-13
# ::node	0.0.0.0.0	inbound	11-12
# ::node	0.0.0.0.1	particular	2-3
# ::node	0.0.1	product	17-18
# ::node	0.0.1.0	name	17-18
# ::node	0.0.1.0.0	pagerank	17-18
# ::node	0.1	rough-04	5-6
# ::node	0.2	amr-unknown	
# ::root	0	base-02
# ::edge	and	op1	number	0.0	0.0.0
# ::edge	and	op2	product	0.0	0.0.1
# ::edge	base-02	ARG1	and	0	0.0
# ::edge	base-02	ARG2	amr-unknown	0	0.2
# ::edge	base-02	manner	rough-04	0	0.1
# ::edge	link	mod	inbound	0.0.0.0	0.0.0.0.0
# ::edge	link	mod	particular	0.0.0.0	0.0.0.0.1
# ::edge	name	op1	pagerank	0.0.1.0	0.0.1.0.0
# ::edge	number	quant-of	link	0.0.0	0.0.0.0
# ::edge	product	name	name	0.0.1	0.0.1.0
(MRPNode-0 / base-02 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / number :quant-of (MRPNode-3 / link :mod (MRPNode-4 / inbound) :mod (MRPNode-5 / particular))) :op2 (MRPNode-6 / product :name (MRPNode-7 / name :op1 pagerank))) :manner (MRPNode-8 / rough-04) :ARG2 (MRPNode-9 / amr-unknown))

# ::id 308
# ::snt The number of unique words in the vocabulary denotes the dimensionality, if words are used for the terms.
# ::tok The number of unique words in the vocabulary denotes the dimensionality , if words are used for the terms .
# ::alignments 1-2|0.1 3-4|0.1.0.0 4-5|0.1.0 7-8|0.1.0.1 10-11|0.0 15-16|0.2 18-19|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.686981 ::parser eager_oracle ::smatch 0.7333333333333334 ::n_actions 41
# ::node	0	dominate-01	
# ::node	0.0	dimensionality	10-11
# ::node	0.1	number	1-2
# ::node	0.1.0	word	4-5
# ::node	0.1.0.0	unique-01	3-4
# ::node	0.1.0.1	vocabulary	7-8
# ::node	0.2	use-01	15-16
# ::node	0.2.0	term	18-19
# ::root	0	dominate-01
# ::edge	dominate-01	ARG0	number	0	0.1
# ::edge	dominate-01	ARG1	dimensionality	0	0.0
# ::edge	dominate-01	condition	use-01	0	0.2
# ::edge	number	quant-of	word	0.1	0.1.0
# ::edge	use-01	ARG1	term	0.2	0.2.0
# ::edge	word	ARG1-of	unique-01	0.1.0	0.1.0.0
# ::edge	word	location	vocabulary	0.1.0	0.1.0.1
(MRPNode-0 / dominate-01 :ARG1 (MRPNode-1 / dimensionality) :ARG0 (MRPNode-2 / number :quant-of (MRPNode-3 / word :ARG1-of (MRPNode-4 / unique-01) :location (MRPNode-5 / vocabulary))) :condition (MRPNode-6 / use-01 :ARG1 (MRPNode-7 / term)))

# ::id 309
# ::snt The idea of inheritance in OOP refers to the formation of new classes with the already existing classes.
# ::tok The idea of inheritance in OOP refers to the formation of new classes with the already existing classes .
# ::alignments 1-2|0.1 3-4|0.1.1 5-6|0.1.0+0.1.0.0+0.1.0.0.0 6-7|0 9-10|0.0 11-12|0.0.1.0 12-13|0.0.0 15-16|0.0.0.0.0 16-17|0.0.0.0 17-18|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:37.706129 ::parser eager_oracle ::smatch 1.0 ::n_actions 52
# ::node	0	refer-01	6-7
# ::node	0.0	form-01	9-10
# ::node	0.0.0	class	12-13
# ::node	0.0.0.0	exist-01	16-17
# ::node	0.0.0.0.0	already	15-16
# ::node	0.0.1	class	17-18
# ::node	0.0.1.0	new-01	11-12
# ::node	0.1	idea	1-2
# ::node	0.1.0	thing	5-6
# ::node	0.1.0.0	name	5-6
# ::node	0.1.0.0.0	oop	5-6
# ::node	0.1.1	inherit-01	3-4
# ::root	0	refer-01
# ::edge	class	ARG1-of	exist-01	0.0.0	0.0.0.0
# ::edge	class	ARG1-of	new-01	0.0.1	0.0.1.0
# ::edge	exist-01	time	already	0.0.0.0	0.0.0.0.0
# ::edge	form-01	ARG1	class	0.0	0.0.0
# ::edge	form-01	accompanier	class	0.0	0.0.1
# ::edge	idea	topic	inherit-01	0.1	0.1.1
# ::edge	idea	topic	thing	0.1	0.1.0
# ::edge	name	op1	oop	0.1.0.0	0.1.0.0.0
# ::edge	refer-01	ARG0	idea	0	0.1
# ::edge	refer-01	ARG1	form-01	0	0.0
# ::edge	thing	name	name	0.1.0	0.1.0.0
(MRPNode-0 / refer-01 :ARG1 (MRPNode-1 / form-01 :ARG1 (MRPNode-2 / class :ARG1-of (MRPNode-3 / exist-01 :time (MRPNode-4 / already))) :accompanier (MRPNode-5 / class :ARG1-of (MRPNode-6 / new-01))) :ARG0 (MRPNode-7 / idea :topic (MRPNode-8 / thing :name (MRPNode-9 / name :op1 oop)) :topic (MRPNode-10 / inherit-01)))

# ::id 310
# ::snt As an official theorem, Bayes' theorem is valid in all universal interpretations of probability.
# ::tok As an official theorem , Bayes ' theorem is valid in all universal interpretations of probability .
# ::alignments 2-3|0.0.0.0 3-4|0.0 5-6|0.0.1+0.0.1.0+0.0.1.0.0 7-8|0.0.0 9-10|0 11-12|0.1.1 12-13|0.1.2 13-14|0.1 15-16|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.723505 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	valid-02	9-10
# ::node	0.0	theorem	3-4
# ::node	0.0.0	theorem	7-8
# ::node	0.0.0.0	official	2-3
# ::node	0.0.1	person	5-6
# ::node	0.0.1.0	name	5-6
# ::node	0.0.1.0.0	bayes	5-6
# ::node	0.1	interpret-01	13-14
# ::node	0.1.0	probability	15-16
# ::node	0.1.1	all	11-12
# ::node	0.1.2	universal	12-13
# ::root	0	valid-02
# ::edge	interpret-01	ARG1	probability	0.1	0.1.0
# ::edge	interpret-01	mod	all	0.1	0.1.1
# ::edge	interpret-01	mod	universal	0.1	0.1.2
# ::edge	name	op1	bayes	0.0.1.0	0.0.1.0.0
# ::edge	person	name	name	0.0.1	0.0.1.0
# ::edge	theorem	mod	official	0.0.0	0.0.0.0
# ::edge	theorem	mod	theorem	0.0	0.0.0
# ::edge	theorem	poss	person	0.0	0.0.1
# ::edge	valid-02	ARG1	theorem	0	0.0
# ::edge	valid-02	ARG2	interpret-01	0	0.1
(MRPNode-0 / valid-02 :ARG1 (MRPNode-1 / theorem :mod (MRPNode-2 / theorem :mod (MRPNode-3 / official)) :poss (MRPNode-4 / person :name (MRPNode-5 / name :op1 bayes))) :ARG2 (MRPNode-6 / interpret-01 :ARG1 (MRPNode-7 / probability) :mod (MRPNode-8 / all) :mod (MRPNode-9 / universal)))

# ::id 311
# ::snt If the term doesn’t occur within the document, the value in the vector is zero.
# ::tok If the term does n't occur within the document , the value in the vector is zero .
# ::alignments 2-3|0.1.1 4-5|0.1.0 6-7|0.1.2 8-9|0.1.2.0 11-12|0.0 12-13|0.1 14-15|0.0.0 16-17|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:37.730985 ::parser eager_oracle ::smatch 0.7272727272727272 ::n_actions 44
# ::node	0	have-condition-91	
# ::node	0.0	value	11-12
# ::node	0.0.0	vector	14-15
# ::node	0.0.1	zero	16-17
# ::node	0.1	be-located-at-91	12-13
# ::node	0.1.0	-	4-5
# ::node	0.1.1	term	2-3
# ::node	0.1.2	within	6-7
# ::node	0.1.2.0	document	8-9
# ::root	0	have-condition-91
# ::edge	be-located-at-91	ARG1	term	0.1	0.1.1
# ::edge	be-located-at-91	ARG2	within	0.1	0.1.2
# ::edge	be-located-at-91	arg2	-	0.1	0.1.0
# ::edge	have-condition-91	ARG1	value	0	0.0
# ::edge	have-condition-91	ARG2	be-located-at-91	0	0.1
# ::edge	value	quant	vector	0.0	0.0.0
# ::edge	value	quant	zero	0.0	0.0.1
# ::edge	within	op1	document	0.1.2	0.1.2.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / value :quant (MRPNode-2 / vector) :quant (MRPNode-3 / zero)) :ARG2 (MRPNode-4 / be-located-at-91 :arg2 - :ARG1 (MRPNode-5 / term) :ARG2 (MRPNode-6 / within :op1 (MRPNode-7 / document))))

# ::id 312
# ::snt In the vector space model a document is represented as a vector.
# ::tok In the vector space model a document is represented as a vector .
# ::alignments 2-3|0.2.0.0 3-4|0.2.0 4-5|0.2 6-7|0.0 8-9|0 11-12|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:37.737777 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	represent-01	8-9
# ::node	0.0	document	6-7
# ::node	0.1	vector	11-12
# ::node	0.2	model-01	4-5
# ::node	0.2.0	space	3-4
# ::node	0.2.0.0	vector	2-3
# ::root	0	represent-01
# ::edge	model-01	ARG1	space	0.2	0.2.0
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	represent-01	location	model-01	0	0.2
# ::edge	space	mod	vector	0.2.0	0.2.0.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document) :ARG2 (MRPNode-2 / vector) :location (MRPNode-3 / model-01 :ARG1 (MRPNode-4 / space :mod (MRPNode-5 / vector))))

# ::id 313
# ::snt The peropos of inheritance in object oriented programming is to minimize the reuse of existing code without modification.
# ::tok The peropos of inheritance in object oriented programming is to minimize the reuse of existing code without modification .
# ::alignments 3-4|0.1 5-6|0.1.0.0.0 6-7|0.1.0.0 7-8|0.1.0 10-11|0.0 13-14|0 14-15|0.0.0.0.0 15-16|0.0.0.0 16-17|0.0.0.1.0 17-18|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:37.752192 ::parser eager_oracle ::smatch 0.8500000000000001 ::n_actions 49
# ::node	0	have-mod-91	13-14
# ::node	0.0	minimize-01	10-11
# ::node	0.0.0	rewrite-01	
# ::node	0.0.0.0	code	15-16
# ::node	0.0.0.0.0	exist-01	14-15
# ::node	0.0.0.1	modify-01	17-18
# ::node	0.0.0.1.0	-	16-17
# ::node	0.1	inherit-01	3-4
# ::node	0.1.0	program-01	7-8
# ::node	0.1.0.0	orient-01	6-7
# ::node	0.1.0.0.0	object	5-6
# ::root	0	have-mod-91
# ::edge	code	ARG1-of	exist-01	0.0.0.0	0.0.0.0.0
# ::edge	have-mod-91	ARG1	inherit-01	0	0.1
# ::edge	have-mod-91	ARG1	minimize-01	0	0.0
# ::edge	inherit-01	ARG1	program-01	0.1	0.1.0
# ::edge	minimize-01	ARG1	rewrite-01	0.0	0.0.0
# ::edge	modify-01	polarity	-	0.0.0.1	0.0.0.1.0
# ::edge	orient-01	ARG2	object	0.1.0.0	0.1.0.0.0
# ::edge	program-01	ARG1-of	orient-01	0.1.0	0.1.0.0
# ::edge	rewrite-01	ARG1	code	0.0.0	0.0.0.0
# ::edge	rewrite-01	manner	modify-01	0.0.0	0.0.0.1
(MRPNode-0 / have-mod-91 :ARG1 (MRPNode-1 / minimize-01 :ARG1 (MRPNode-2 / rewrite-01 :ARG1 (MRPNode-3 / code :ARG1-of (MRPNode-4 / exist-01)) :manner (MRPNode-5 / modify-01 :polarity -))) :ARG1 (MRPNode-6 / inherit-01 :ARG1 (MRPNode-7 / program-01 :ARG1-of (MRPNode-8 / orient-01 :ARG2 (MRPNode-9 / object)))))

# ::id 314
# ::snt It is essentially a popularity meter.
# ::tok It is essentially a popularity meter .
# ::alignments 0-1|0.1 2-3|0.2 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.754206 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	meter	5-6
# ::node	0.0	popularity	4-5
# ::node	0.1	it	0-1
# ::node	0.2	essential	2-3
# ::root	0	meter
# ::edge	meter	domain	it	0	0.1
# ::edge	meter	mod	essential	0	0.2
# ::edge	meter	mod	popularity	0	0.0
(MRPNode-0 / meter :mod (MRPNode-1 / popularity) :domain (MRPNode-2 / it) :mod (MRPNode-3 / essential))

# ::id 315
# ::snt In the vector space model a document is represented as a vector.
# ::tok In the vector space model a document is represented as a vector .
# ::alignments 2-3|0.2.0.0 3-4|0.2.0 4-5|0.2 6-7|0.0 8-9|0 11-12|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:37.760988 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	represent-01	8-9
# ::node	0.0	document	6-7
# ::node	0.1	vector	11-12
# ::node	0.2	model-01	4-5
# ::node	0.2.0	space	3-4
# ::node	0.2.0.0	vector	2-3
# ::root	0	represent-01
# ::edge	model-01	ARG1	space	0.2	0.2.0
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	represent-01	location	model-01	0	0.2
# ::edge	space	mod	vector	0.2.0	0.2.0.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document) :ARG2 (MRPNode-2 / vector) :location (MRPNode-3 / model-01 :ARG1 (MRPNode-4 / space :mod (MRPNode-5 / vector))))

# ::id 316
# ::snt Inheritance is a basic concept in object oriented programming.
# ::tok Inheritance is a basic concept in object oriented programming .
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 3-4|0.0 4-5|0 6-7|0.2.0.0 7-8|0.2.0 8-9|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:37.765611 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	concept	4-5
# ::node	0.0	basic	3-4
# ::node	0.1	medical-condition	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	inheritance	0-1
# ::node	0.2	program-01	8-9
# ::node	0.2.0	orient-01	7-8
# ::node	0.2.0.0	object	6-7
# ::root	0	concept
# ::edge	concept	domain	medical-condition	0	0.1
# ::edge	concept	mod	basic	0	0.0
# ::edge	concept	topic	program-01	0	0.2
# ::edge	medical-condition	name	name	0.1	0.1.0
# ::edge	name	op1	inheritance	0.1.0	0.1.0.0
# ::edge	orient-01	ARG2	object	0.2.0	0.2.0.0
# ::edge	program-01	ARG1-of	orient-01	0.2	0.2.0
(MRPNode-0 / concept :mod (MRPNode-1 / basic) :domain (MRPNode-2 / medical-condition :name (MRPNode-3 / name :op1 inheritance)) :topic (MRPNode-4 / program-01 :ARG1-of (MRPNode-5 / orient-01 :ARG2 (MRPNode-6 / object))))

# ::id 317
# ::snt The limitations of the vector space model are thus.
# ::tok The limitations of the vector space model are thus .
# ::alignments 1-2|0.0 4-5|0.0.0.0.0 5-6|0.0.0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.768698 ::parser eager_oracle ::smatch 0.7777777777777777 ::n_actions 24
# ::node	0	cause-01	
# ::node	0.0	limit-01	1-2
# ::node	0.0.0	model	6-7
# ::node	0.0.0.0	space	5-6
# ::node	0.0.0.0.0	vector	4-5
# ::root	0	cause-01
# ::edge	cause-01	ARG1	limit-01	0	0.0
# ::edge	limit-01	ARG1	model	0.0	0.0.0
# ::edge	model	mod	space	0.0.0	0.0.0.0
# ::edge	space	mod	vector	0.0.0.0	0.0.0.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / limit-01 :ARG1 (MRPNode-2 / model :mod (MRPNode-3 / space :mod (MRPNode-4 / vector)))))

# ::id 318
# ::snt Bayes theorem can be used to compute the probability that a proposed diagnosis is correct.
# ::tok Bayes theorem can be used to compute the probability that a proposed diagnosis is correct .
# ::alignments 0-2|0.0.0+0.0.0.0+0.0.0.0.0+0.0.0.0.1 2-3|0 4-5|0.0 6-7|0.0.1 8-9|0.0.1.0 11-12|0.0.1.0.0.0+0.0.1.0.0.0.0 12-13|0.0.1.0.0.0.1 14-15|0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.781004 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	possible-01	2-3
# ::node	0.0	use-01	4-5
# ::node	0.0.0	theorem	0-2
# ::node	0.0.0.0	name	0-2
# ::node	0.0.0.0.0	bayes	0-2
# ::node	0.0.0.0.1	theorem	0-2
# ::node	0.0.1	compile-01	6-7
# ::node	0.0.1.0	probability	8-9
# ::node	0.0.1.0.0	correct-02	14-15
# ::node	0.0.1.0.0.0	thing	11-12
# ::node	0.0.1.0.0.0.0	propose-01	11-12
# ::node	0.0.1.0.0.0.1	diagnose-01	12-13
# ::root	0	possible-01
# ::edge	compile-01	ARG0	theorem	0.0.1	0.0.0
# ::edge	compile-01	ARG1	probability	0.0.1	0.0.1.0
# ::edge	correct-02	ARG1	thing	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	bayes	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	theorem	0.0.0.0	0.0.0.0.1
# ::edge	possible-01	ARG1	use-01	0	0.0
# ::edge	probability	domain	correct-02	0.0.1.0	0.0.1.0.0
# ::edge	theorem	name	name	0.0.0	0.0.0.0
# ::edge	thing	ARG1-of	propose-01	0.0.1.0.0.0	0.0.1.0.0.0.0
# ::edge	thing	ARG2-of	diagnose-01	0.0.1.0.0.0	0.0.1.0.0.0.1
# ::edge	use-01	ARG1	theorem	0.0	0.0.0
# ::edge	use-01	ARG2	compile-01	0.0	0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / use-01 :ARG1 (MRPNode-2 / theorem :name (MRPNode-3 / name :op1 bayes :op2 theorem)) :ARG2 (MRPNode-4 / compile-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-5 / probability :domain (MRPNode-6 / correct-02 :ARG1 (MRPNode-7 / thing :ARG1-of (MRPNode-8 / propose-01) :ARG2-of (MRPNode-9 / diagnose-01)))))))

# ::id 319
# ::snt One of the best known schemes is tf-idf weighting, proposed by Salton, Wong and Yang.
# ::tok One of the best known schemes is tf - idf weighting , proposed by Salton , Wong and Yang .
# ::alignments 1-2|0.1 3-4|0.1.0.0 5-6|0.1.0 7-11|0.2+0.2.0+0.2.0.0+0.2.0.1 12-13|0+0.0 14-15|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 16-17|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 17-18|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.848857 ::parser eager_oracle ::smatch 0.7941176470588235 ::n_actions 50
# ::node	0	thing	12-13
# ::node	0.0	propose-01	12-13
# ::node	0.0.0	and	17-18
# ::node	0.0.0.0	person	14-15
# ::node	0.0.0.0.0	name	14-15
# ::node	0.0.0.0.0.0	salton	14-15
# ::node	0.0.0.1	person	16-17
# ::node	0.0.0.1.0	name	16-17
# ::node	0.0.0.1.0.0	wong	16-17
# ::node	0.0.0.2	person	
# ::node	0.1	include-91	1-2
# ::node	0.1.0	scheme	5-6
# ::node	0.1.0.0	good-02	3-4
# ::node	0.1.0.1	have-degree-91	
# ::node	0.1.0.1.0	most	
# ::node	0.1.0.2	name	
# ::node	0.1.0.2.0	salton	
# ::node	0.2	scheme	7-11
# ::node	0.2.0	name	7-11
# ::node	0.2.0.0	tf	7-11
# ::node	0.2.0.1	weighting	7-11
# ::root	0	thing
# ::edge	and	op1	person	0.0.0	0.0.0.0
# ::edge	and	op2	person	0.0.0	0.0.0.1
# ::edge	and	op3	person	0.0.0	0.0.0.2
# ::edge	have-degree-91	ARG2	good-02	0.1.0.1	0.1.0.0
# ::edge	have-degree-91	ARG3	most	0.1.0.1	0.1.0.1.0
# ::edge	include-91	ARG2	scheme	0.1	0.1.0
# ::edge	name	op1	salton	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	salton	0.1.0.2	0.1.0.2.0
# ::edge	name	op1	tf	0.2.0	0.2.0.0
# ::edge	name	op1	wong	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op2	weighting	0.2.0	0.2.0.1
# ::edge	person	name	name	0.0.0.0	0.0.0.0.0
# ::edge	person	name	name	0.0.0.1	0.0.0.1.0
# ::edge	propose-01	ARG0	and	0.0	0.0.0
# ::edge	scheme	ARG1-of	good-02	0.1.0	0.1.0.0
# ::edge	scheme	ARG1-of	have-degree-91	0.1.0	0.1.0.1
# ::edge	scheme	name	name	0.1.0	0.1.0.2
# ::edge	scheme	name	name	0.2	0.2.0
# ::edge	thing	ARG1-of	include-91	0	0.1
# ::edge	thing	ARG1-of	propose-01	0	0.0
# ::edge	thing	domain	scheme	0	0.2
(MRPNode-0 / thing :ARG1-of (MRPNode-1 / propose-01 :ARG0 (MRPNode-2 / and :op1 (MRPNode-3 / person :name (MRPNode-4 / name :op1 salton)) :op2 (MRPNode-5 / person :name (MRPNode-6 / name :op1 wong)) :op3 (MRPNode-7 / person))) :ARG1-of (MRPNode-8 / include-91 :ARG2 (MRPNode-9 / scheme :ARG1-of (MRPNode-10 / good-02) :ARG1-of (MRPNode-11 / have-degree-91 :ARG2 MRPNode-10 :ARG3 (MRPNode-12 / most)) :name (MRPNode-13 / name :op1 salton))) :domain (MRPNode-14 / scheme :name (MRPNode-15 / name :op1 tf :op2 weighting)))

# ::id 320
# ::snt "It also provides a way to generalize du to the ""is a"" relationship between classes."
# ::tok " It also provides a way to generalize du to the " " is a " " relationship between classes . "
# ::alignments 1-2|0.0.0.2 2-3|0.1 3-4|0 5-6|0.0 7-8|0.0.0 8-9|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.1 17-18|0.0.0.1 19-20|0.0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.860081 ::parser eager_oracle ::smatch 0.975609756097561 ::n_actions 50
# ::node	0	provide-01	3-4
# ::node	0.0	way	5-6
# ::node	0.0.0	generalize-01	7-8
# ::node	0.0.0.0	organization	8-9
# ::node	0.0.0.0.0	name	8-9
# ::node	0.0.0.0.0.0	du	8-9
# ::node	0.0.0.0.0.1	du	8-9
# ::node	0.0.0.1	relation-03	17-18
# ::node	0.0.0.1.0	class	19-20
# ::node	0.0.0.2	it	1-2
# ::node	0.1	also	2-3
# ::root	0	provide-01
# ::edge	generalize-01	ARG0	it	0.0.0	0.0.0.2
# ::edge	generalize-01	ARG1	organization	0.0.0	0.0.0.0
# ::edge	generalize-01	ARG2	relation-03	0.0.0	0.0.0.1
# ::edge	name	op1	du	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op2	du	0.0.0.0.0	0.0.0.0.0.1
# ::edge	organization	name	name	0.0.0.0	0.0.0.0.0
# ::edge	provide-01	ARG0	it	0	0.0.0.2
# ::edge	provide-01	ARG1	way	0	0.0
# ::edge	provide-01	mod	also	0	0.1
# ::edge	relation-03	ARG1	class	0.0.0.1	0.0.0.1.0
# ::edge	way	manner-of	generalize-01	0.0	0.0.0
(MRPNode-0 / provide-01 :ARG1 (MRPNode-1 / way :manner-of (MRPNode-2 / generalize-01 :ARG1 (MRPNode-3 / organization :name (MRPNode-4 / name :op1 du :op2 du)) :ARG2 (MRPNode-5 / relation-03 :ARG1 (MRPNode-6 / class)) :ARG0 (MRPNode-7 / it))) :ARG0 MRPNode-7 :mod (MRPNode-8 / also))

# ::id 321
# ::snt A document has representation as a vector.
# ::tok A document has representation as a vector .
# ::alignments 1-2|0.1 2-3|0 3-4|0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.862501 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	have-03	2-3
# ::node	0.0	representation-02	3-4
# ::node	0.0.0	vector	6-7
# ::node	0.1	document	1-2
# ::root	0	have-03
# ::edge	have-03	ARG0	document	0	0.1
# ::edge	have-03	ARG1	representation-02	0	0.0
# ::edge	representation-02	manner	vector	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / representation-02 :manner (MRPNode-2 / vector)) :ARG0 (MRPNode-3 / document))

# ::id 322
# ::snt A document is represented as a vector and each dimension corresponds to a separate term.
# ::tok A document is represented as a vector and each dimension corresponds to a separate term .
# ::alignments 1-2|0.0.0 3-4|0.0 6-7|0.0.1 7-8|0 8-9|0.1.0.0 9-10|0.1.0 10-11|0.1 13-14|0.1.1.0 14-15|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:37.871253 ::parser eager_oracle ::smatch 1.0 ::n_actions 45
# ::node	0	and	7-8
# ::node	0.0	represent-01	3-4
# ::node	0.0.0	document	1-2
# ::node	0.0.1	vector	6-7
# ::node	0.1	correspond-02	10-11
# ::node	0.1.0	dimension	9-10
# ::node	0.1.0.0	each	8-9
# ::node	0.1.1	term	14-15
# ::node	0.1.1.0	separate-02	13-14
# ::root	0	and
# ::edge	and	op1	represent-01	0	0.0
# ::edge	and	op2	correspond-02	0	0.1
# ::edge	correspond-02	ARG1	dimension	0.1	0.1.0
# ::edge	correspond-02	ARG2	term	0.1	0.1.1
# ::edge	dimension	mod	each	0.1.0	0.1.0.0
# ::edge	represent-01	ARG1	document	0.0	0.0.0
# ::edge	represent-01	ARG2	vector	0.0	0.0.1
# ::edge	term	ARG1-of	separate-02	0.1.1	0.1.1.0
(MRPNode-0 / and :op1 (MRPNode-1 / represent-01 :ARG1 (MRPNode-2 / document) :ARG2 (MRPNode-3 / vector)) :op2 (MRPNode-4 / correspond-02 :ARG1 (MRPNode-5 / dimension :mod (MRPNode-6 / each)) :ARG2 (MRPNode-7 / term :ARG1-of (MRPNode-8 / separate-02))))

# ::id 323
# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
# ::tok A document is represented as a vector , with each dimension corresponding to a separate term .
# ::alignments 1-2|0.0 3-4|0 6-7|0.1 9-10|0.2.0.0.0 10-11|0.2.0.0 11-12|0.2.0 14-15|0.2.0.1.0 15-16|0.2.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:37.879714 ::parser eager_oracle ::smatch 0.8823529411764706 ::n_actions 42
# ::node	0	represent-01	3-4
# ::node	0.0	document	1-2
# ::node	0.1	vector	6-7
# ::node	0.2	accompany-01	
# ::node	0.2.0	correspond-02	11-12
# ::node	0.2.0.0	dimension	10-11
# ::node	0.2.0.0.0	each	9-10
# ::node	0.2.0.1	term	15-16
# ::node	0.2.0.1.0	separate-02	14-15
# ::root	0	represent-01
# ::edge	accompany-01	ARG1	correspond-02	0.2	0.2.0
# ::edge	correspond-02	ARG1	dimension	0.2.0	0.2.0.0
# ::edge	correspond-02	ARG2	term	0.2.0	0.2.0.1
# ::edge	dimension	mod	each	0.2.0.0	0.2.0.0.0
# ::edge	represent-01	ARG0-of	accompany-01	0	0.2
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	term	ARG1-of	separate-02	0.2.0.1	0.2.0.1.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document) :ARG2 (MRPNode-2 / vector) :ARG0-of (MRPNode-3 / accompany-01 :ARG1 (MRPNode-4 / correspond-02 :ARG1 (MRPNode-5 / dimension :mod (MRPNode-6 / each)) :ARG2 (MRPNode-7 / term :ARG1-of (MRPNode-8 / separate-02)))))

# ::id 324
# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
# ::tok The basic idea is to represent each document as a vector of certain weighted word frequencies .
# ::alignments 1-2|0.1.0 2-3|0.1 5-6|0 6-7|0.0.0 7-8|0.0 10-11|0.2 12-13|0.2.0.0 13-14|0.2.0.2 14-15|0.2.0.1 15-16|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.889693 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	represent-01	5-6
# ::node	0.0	document	7-8
# ::node	0.0.0	each	6-7
# ::node	0.1	idea	2-3
# ::node	0.1.0	basic	1-2
# ::node	0.2	vector	10-11
# ::node	0.2.0	frequency	15-16
# ::node	0.2.0.0	certain	12-13
# ::node	0.2.0.1	word	14-15
# ::node	0.2.0.2	weight-01	13-14
# ::root	0	represent-01
# ::edge	document	mod	each	0.0	0.0.0
# ::edge	frequency	ARG1-of	weight-01	0.2.0	0.2.0.2
# ::edge	frequency	ARG1-of	word	0.2.0	0.2.0.1
# ::edge	frequency	mod	certain	0.2.0	0.2.0.0
# ::edge	idea	mod	basic	0.1	0.1.0
# ::edge	represent-01	ARG0	idea	0	0.1
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.2
# ::edge	vector	consist-of	frequency	0.2	0.2.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document :mod (MRPNode-2 / each)) :ARG0 (MRPNode-3 / idea :mod (MRPNode-4 / basic)) :ARG2 (MRPNode-5 / vector :consist-of (MRPNode-6 / frequency :mod (MRPNode-7 / certain) :ARG1-of (MRPNode-8 / word) :ARG1-of (MRPNode-9 / weight-01))))

# ::id 325
# ::snt The vector space model are the documents which are represented as “bags of words”.
# ::tok The vector space model are the documents which are represented as " bags of words " .
# ::alignments 1-2|0.1.0.0 2-3|0.1.0 3-4|0.1 6-7|0 9-10|0.0 12-13|0.0.0 14-15|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:37.896417 ::parser eager_oracle ::smatch 1.0 ::n_actions 40
# ::node	0	document	6-7
# ::node	0.0	represent-01	9-10
# ::node	0.0.0	bag	12-13
# ::node	0.0.0.0	word	14-15
# ::node	0.1	model	3-4
# ::node	0.1.0	space	2-3
# ::node	0.1.0.0	vector	1-2
# ::root	0	document
# ::edge	bag	consist-of	word	0.0.0	0.0.0.0
# ::edge	document	ARG1-of	represent-01	0	0.0
# ::edge	document	domain	model	0	0.1
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	represent-01	ARG2	bag	0.0	0.0.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / document :ARG1-of (MRPNode-1 / represent-01 :ARG2 (MRPNode-2 / bag :consist-of (MRPNode-3 / word))) :domain (MRPNode-4 / model :mod (MRPNode-5 / space :mod (MRPNode-6 / vector))))

# ::id 326
# ::snt The value of a vector is non-zero if a term occurs in the document.
# ::tok The value of a vector is non - zero if a term occurs in the document .
# ::alignments 1-2|0.0.1+0.0.1.0 2-3|0 4-5|0.0.1.0.0 6-7|0.0.0 8-9|0.0.2 11-12|0.1.0 13-14|0.1 15-16|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:37.906174 ::parser eager_oracle ::smatch 0.7878787878787878 ::n_actions 45
# ::node	0	have-condition-91	2-3
# ::node	0.0	equal-01	
# ::node	0.0.0	-	6-7
# ::node	0.0.1	thing	1-2
# ::node	0.0.1.0	value-01	1-2
# ::node	0.0.1.0.0	vector	4-5
# ::node	0.0.2	zero	8-9
# ::node	0.1	be-located-at-91	13-14
# ::node	0.1.0	term	11-12
# ::node	0.1.1	document	15-16
# ::root	0	have-condition-91
# ::edge	be-located-at-91	ARG1	term	0.1	0.1.0
# ::edge	be-located-at-91	ARG2	document	0.1	0.1.1
# ::edge	equal-01	ARG1	thing	0.0	0.0.1
# ::edge	equal-01	ARG2	zero	0.0	0.0.2
# ::edge	equal-01	polarity	-	0.0	0.0.0
# ::edge	have-condition-91	ARG1	equal-01	0	0.0
# ::edge	have-condition-91	ARG2	be-located-at-91	0	0.1
# ::edge	thing	ARG2-of	value-01	0.0.1	0.0.1.0
# ::edge	value-01	ARG1	vector	0.0.1.0	0.0.1.0.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / equal-01 :polarity - :ARG1 (MRPNode-2 / thing :ARG2-of (MRPNode-3 / value-01 :ARG1 (MRPNode-4 / vector))) :ARG2 (MRPNode-5 / zero)) :ARG2 (MRPNode-6 / be-located-at-91 :ARG1 (MRPNode-7 / term) :ARG2 (MRPNode-8 / document)))

# ::id 327
# ::snt In probability theory, the prior and conditional probabilities of two random events are related by Bayes' theorem.
# ::tok In probability theory , the prior and conditional probabilities of two random events are related by Bayes ' theorem .
# ::alignments 1-2|0.2.2 2-3|0.2 5-6|0.1.0 6-7|0.1 7-8|0.1.1.0 8-9|0.2.1 10-11|0.2.0.0 11-12|0.2.0.1 12-13|0.2.0 14-15|0 16-17|0.0.0+0.0.0.0+0.0.0.0.0 18-19|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.053679 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 59
# ::node	0	relate-01	14-15
# ::node	0.0	theorem	18-19
# ::node	0.0.0	person	16-17
# ::node	0.0.0.0	name	16-17
# ::node	0.0.0.0.0	bayes	16-17
# ::node	0.1	and	6-7
# ::node	0.1.0	prior	5-6
# ::node	0.1.1	probability	
# ::node	0.1.1.0	condition-01	7-8
# ::node	0.2	theory	2-3
# ::node	0.2.0	event	12-13
# ::node	0.2.0.0	2	10-11
# ::node	0.2.0.1	random	11-12
# ::node	0.2.1	probability	8-9
# ::node	0.2.2	probability	1-2
# ::root	0	relate-01
# ::edge	and	op1	prior	0.1	0.1.0
# ::edge	and	op2	probability	0.1	0.1.1
# ::edge	event	mod	random	0.2.0	0.2.0.1
# ::edge	event	quant	2	0.2.0	0.2.0.0
# ::edge	name	op1	bayes	0.0.0.0	0.0.0.0.0
# ::edge	person	name	name	0.0.0	0.0.0.0
# ::edge	probability	mod	condition-01	0.1.1	0.1.1.0
# ::edge	relate-01	ARG1	and	0	0.1
# ::edge	relate-01	ARG1	theorem	0	0.0
# ::edge	relate-01	location	theory	0	0.2
# ::edge	theorem	poss	person	0.0	0.0.0
# ::edge	theory	mod	event	0.2	0.2.0
# ::edge	theory	mod	probability	0.2	0.2.1
# ::edge	theory	mod	probability	0.2	0.2.2
(MRPNode-0 / relate-01 :ARG1 (MRPNode-1 / theorem :poss (MRPNode-2 / person :name (MRPNode-3 / name :op1 bayes))) :ARG1 (MRPNode-4 / and :op1 (MRPNode-5 / prior) :op2 (MRPNode-6 / probability :mod (MRPNode-7 / condition-01))) :location (MRPNode-8 / theory :mod (MRPNode-9 / event :quant 2 :mod (MRPNode-10 / random)) :mod (MRPNode-11 / probability) :mod (MRPNode-12 / probability)))

# ::id 328
# ::snt Use these optimal solutions to construct an optimal solution for the original problem.
# ::tok Use these optimal solutions to construct an optimal solution for the original problem .
# ::alignments 0-1|0 1-2|0.0.1 2-3|0.0.0 3-4|0.0+0.0.2 5-6|0.2 7-8|0.2.0.0 8-9|0.2.0+0.2.0.1 11-12|0.2.0.1.0.0 12-13|0.2.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.118295 ::parser eager_oracle ::smatch 0.9361702127659575 ::n_actions 51
# ::node	0	use-01	0-1
# ::node	0.0	thing	3-4
# ::node	0.0.0	optimal	2-3
# ::node	0.0.1	this	1-2
# ::node	0.0.2	solve-01	3-4
# ::node	0.1	you	
# ::node	0.2	construct-01	5-6
# ::node	0.2.0	thing	8-9
# ::node	0.2.0.0	optimal	7-8
# ::node	0.2.0.1	solve-01	8-9
# ::node	0.2.0.1.0	problem	12-13
# ::node	0.2.0.1.0.0	original	11-12
# ::root	0	use-01
# ::edge	construct-01	ARG0	you	0.2	0.1
# ::edge	construct-01	ARG1	thing	0.2	0.2.0
# ::edge	problem	mod	original	0.2.0.1.0	0.2.0.1.0.0
# ::edge	solve-01	ARG1	problem	0.2.0.1	0.2.0.1.0
# ::edge	thing	ARG2-of	solve-01	0.0	0.0.2
# ::edge	thing	ARG2-of	solve-01	0.2.0	0.2.0.1
# ::edge	thing	mod	optimal	0.0	0.0.0
# ::edge	thing	mod	optimal	0.2.0	0.2.0.0
# ::edge	thing	mod	this	0.0	0.0.1
# ::edge	use-01	ARG0	you	0	0.1
# ::edge	use-01	ARG1	thing	0	0.0
# ::edge	use-01	ARG2	construct-01	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / thing :mod (MRPNode-2 / optimal) :mod (MRPNode-3 / this) :ARG2-of (MRPNode-4 / solve-01)) :ARG0 (MRPNode-5 / you) :ARG2 (MRPNode-6 / construct-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-7 / thing :mod (MRPNode-8 / optimal) :ARG2-of (MRPNode-9 / solve-01 :ARG1 (MRPNode-10 / problem :mod (MRPNode-11 / original))))))

# ::id 329
# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
# ::tok The basic idea is to represent each document as a vector of certain weighted word frequencies .
# ::alignments 1-2|0.1.0 2-3|0.1 5-6|0 6-7|0.0.0 7-8|0.0 10-11|0.2 12-13|0.2.0.0 13-14|0.2.0.2 14-15|0.2.0.1 15-16|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.128307 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	represent-01	5-6
# ::node	0.0	document	7-8
# ::node	0.0.0	each	6-7
# ::node	0.1	idea	2-3
# ::node	0.1.0	basic	1-2
# ::node	0.2	vector	10-11
# ::node	0.2.0	frequency	15-16
# ::node	0.2.0.0	certain	12-13
# ::node	0.2.0.1	word	14-15
# ::node	0.2.0.2	weight-01	13-14
# ::root	0	represent-01
# ::edge	document	mod	each	0.0	0.0.0
# ::edge	frequency	ARG1-of	weight-01	0.2.0	0.2.0.2
# ::edge	frequency	ARG1-of	word	0.2.0	0.2.0.1
# ::edge	frequency	mod	certain	0.2.0	0.2.0.0
# ::edge	idea	mod	basic	0.1	0.1.0
# ::edge	represent-01	ARG0	idea	0	0.1
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.2
# ::edge	vector	consist-of	frequency	0.2	0.2.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document :mod (MRPNode-2 / each)) :ARG0 (MRPNode-3 / idea :mod (MRPNode-4 / basic)) :ARG2 (MRPNode-5 / vector :consist-of (MRPNode-6 / frequency :mod (MRPNode-7 / certain) :ARG1-of (MRPNode-8 / word) :ARG1-of (MRPNode-9 / weight-01))))

# ::id 330
# ::snt A problem with overlapping subproblems means that the same subproblems may be used to solve many different larger problems.
# ::tok A problem with overlapping subproblems means that the same subproblems may be used to solve many different larger problems .
# ::alignments 1-2|0.0 4-5|0.0.0 5-6|0 8-9|0.1.0.0.0 9-10|0.1.0.0 10-11|0.1 12-13|0.1.0 14-15|0.1.0.1 15-16|0.1.0.1.0.2 16-17|0.1.0.1.0.1 17-18|0.1.0.1.0.0.0 18-19|0.1.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.505680 ::parser eager_oracle ::smatch 0.8518518518518519 ::n_actions 59
# ::node	0	mean-01	5-6
# ::node	0.0	problem	1-2
# ::node	0.0.0	subproblem	4-5
# ::node	0.0.0.0	coverage-06	
# ::node	0.1	possible-01	10-11
# ::node	0.1.0	use-01	12-13
# ::node	0.1.0.0	subproblem	9-10
# ::node	0.1.0.0.0	same-01	8-9
# ::node	0.1.0.1	solve-01	14-15
# ::node	0.1.0.1.0	problem	18-19
# ::node	0.1.0.1.0.0	have-degree-91	
# ::node	0.1.0.1.0.0.0	large	17-18
# ::node	0.1.0.1.0.0.1	more	
# ::node	0.1.0.1.0.1	differ-02	16-17
# ::node	0.1.0.1.0.2	many	15-16
# ::root	0	mean-01
# ::edge	have-degree-91	ARG3	large	0.1.0.1.0.0	0.1.0.1.0.0.0
# ::edge	have-degree-91	ARG3	more	0.1.0.1.0.0	0.1.0.1.0.0.1
# ::edge	mean-01	ARG1	problem	0	0.0
# ::edge	mean-01	ARG2	possible-01	0	0.1
# ::edge	possible-01	ARG1	use-01	0.1	0.1.0
# ::edge	problem	ARG1-of	differ-02	0.1.0.1.0	0.1.0.1.0.1
# ::edge	problem	ARG1-of	have-degree-91	0.1.0.1.0	0.1.0.1.0.0
# ::edge	problem	quant	many	0.1.0.1.0	0.1.0.1.0.2
# ::edge	problem	topic	subproblem	0.0	0.0.0
# ::edge	solve-01	ARG0	subproblem	0.1.0.1	0.1.0.0
# ::edge	solve-01	ARG1	problem	0.1.0.1	0.1.0.1.0
# ::edge	subproblem	ARG1-of	coverage-06	0.0.0	0.0.0.0
# ::edge	subproblem	ARG1-of	same-01	0.1.0.0	0.1.0.0.0
# ::edge	use-01	ARG1	subproblem	0.1.0	0.1.0.0
# ::edge	use-01	ARG2	solve-01	0.1.0	0.1.0.1
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / problem :topic (MRPNode-2 / subproblem :ARG1-of (MRPNode-3 / coverage-06))) :ARG2 (MRPNode-4 / possible-01 :ARG1 (MRPNode-5 / use-01 :ARG1 (MRPNode-6 / subproblem :ARG1-of (MRPNode-7 / same-01)) :ARG2 (MRPNode-8 / solve-01 :ARG0 MRPNode-6 :ARG1 (MRPNode-9 / problem :ARG1-of (MRPNode-10 / have-degree-91 :ARG3 (MRPNode-11 / large) :ARG3 (MRPNode-12 / more)) :ARG1-of (MRPNode-13 / differ-02) :quant (MRPNode-14 / many))))))

# ::id 331
# ::snt What is the probability this student is a girl?
# ::tok What is the probability this student is a girl ?
# ::alignments 0-1|0.1 3-4|0 4-5|0.0.0.0 5-6|0.0.0+0.0.0.1 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.509234 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	probable	3-4
# ::node	0.0	girl	8-9
# ::node	0.0.0	person	5-6
# ::node	0.0.0.0	this	4-5
# ::node	0.0.0.1	study-01	5-6
# ::node	0.1	amr-unknown	0-1
# ::root	0	probable
# ::edge	girl	domain	person	0.0	0.0.0
# ::edge	person	ARG0-of	study-01	0.0.0	0.0.0.1
# ::edge	person	mod	this	0.0.0	0.0.0.0
# ::edge	probable	domain	amr-unknown	0	0.1
# ::edge	probable	domain	girl	0	0.0
(MRPNode-0 / probable :domain (MRPNode-1 / girl :domain (MRPNode-2 / person :mod (MRPNode-3 / this) :ARG0-of (MRPNode-4 / study-01))) :domain (MRPNode-5 / amr-unknown))

# ::id 332
# ::snt There are four steps in Dynamic Programming: 1.
# ::tok There are four steps in Dynamic Programming : 1 .
# ::alignments 2-3|0.0 3-4|0+0.1 5-7|0.2+0.2.0+0.2.0.0+0.2.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:38.513811 ::parser eager_oracle ::smatch 0.8695652173913043 ::n_actions 25
# ::node	0	thing	3-4
# ::node	0.0	4	2-3
# ::node	0.1	step-01	3-4
# ::node	0.2	program	5-7
# ::node	0.2.0	name	5-7
# ::node	0.2.0.0	dynamic	5-7
# ::node	0.2.0.1	programming	5-7
# ::root	0	thing
# ::edge	name	op1	dynamic	0.2.0	0.2.0.0
# ::edge	name	op2	programming	0.2.0	0.2.0.1
# ::edge	program	name	name	0.2	0.2.0
# ::edge	thing	ARG4-of	step-01	0	0.1
# ::edge	thing	location	program	0	0.2
# ::edge	thing	ord	4	0	0.0
(MRPNode-0 / thing :ord 4 :ARG4-of (MRPNode-1 / step-01) :location (MRPNode-2 / program :name (MRPNode-3 / name :op1 dynamic :op2 programming)))

# ::id 333
# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
# ::tok A document is represented as a vector , with each dimension corresponding to a separate term .
# ::alignments 1-2|0.0 3-4|0 6-7|0.1 9-10|0.2.0.0.0 10-11|0.2.0.0 11-12|0.2.0 14-15|0.2.0.1.0 15-16|0.2.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:38.522097 ::parser eager_oracle ::smatch 0.8823529411764706 ::n_actions 42
# ::node	0	represent-01	3-4
# ::node	0.0	document	1-2
# ::node	0.1	vector	6-7
# ::node	0.2	accompany-01	
# ::node	0.2.0	correspond-02	11-12
# ::node	0.2.0.0	dimension	10-11
# ::node	0.2.0.0.0	each	9-10
# ::node	0.2.0.1	term	15-16
# ::node	0.2.0.1.0	separate-02	14-15
# ::root	0	represent-01
# ::edge	accompany-01	ARG1	correspond-02	0.2	0.2.0
# ::edge	correspond-02	ARG1	dimension	0.2.0	0.2.0.0
# ::edge	correspond-02	ARG2	term	0.2.0	0.2.0.1
# ::edge	dimension	mod	each	0.2.0.0	0.2.0.0.0
# ::edge	represent-01	ARG0-of	accompany-01	0	0.2
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	term	ARG1-of	separate-02	0.2.0.1	0.2.0.1.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document) :ARG2 (MRPNode-2 / vector) :ARG0-of (MRPNode-3 / accompany-01 :ARG1 (MRPNode-4 / correspond-02 :ARG1 (MRPNode-5 / dimension :mod (MRPNode-6 / each)) :ARG2 (MRPNode-7 / term :ARG1-of (MRPNode-8 / separate-02)))))

# ::id 334
# ::snt To explain further vector space models, basically a document is characterized by a vector.
# ::tok To explain further vector space models , basically a document is characterized by a vector .
# ::alignments 1-2|0.2 2-3|0.2.0.1 3-4|0.2.0.0.0 4-5|0.2.0.0 5-6|0.2.0 7-8|0.3 9-10|0.0 11-12|0 14-15|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:38.540903 ::parser eager_oracle ::smatch 1.0 ::n_actions 45
# ::node	0	characterize-01	11-12
# ::node	0.0	document	9-10
# ::node	0.1	vector	14-15
# ::node	0.2	explain-01	1-2
# ::node	0.2.0	model-01	5-6
# ::node	0.2.0.0	space	4-5
# ::node	0.2.0.0.0	vector	3-4
# ::node	0.2.0.1	further	2-3
# ::node	0.3	basic	7-8
# ::root	0	characterize-01
# ::edge	characterize-01	ARG0	vector	0	0.1
# ::edge	characterize-01	ARG1	document	0	0.0
# ::edge	characterize-01	mod	basic	0	0.3
# ::edge	characterize-01	mod	explain-01	0	0.2
# ::edge	explain-01	ARG1	model-01	0.2	0.2.0
# ::edge	model-01	mod	further	0.2.0	0.2.0.1
# ::edge	model-01	mod	space	0.2.0	0.2.0.0
# ::edge	space	mod	vector	0.2.0.0	0.2.0.0.0
(MRPNode-0 / characterize-01 :ARG1 (MRPNode-1 / document) :ARG0 (MRPNode-2 / vector) :mod (MRPNode-3 / explain-01 :ARG1 (MRPNode-4 / model-01 :mod (MRPNode-5 / space :mod (MRPNode-6 / vector)) :mod (MRPNode-7 / further))) :mod (MRPNode-8 / basic))

# ::id 335
# ::snt In this classic model the term specific weights in the document vectors are products of local and global parameters.
# ::tok In this classic model the term specific weights in the document vectors are products of local and global parameters .
# ::alignments 1-2|0.2.0 2-3|0.2.1 3-4|0.2 5-6|0.0+0.0.0.0 6-7|0.0.0 10-11|0.0.1.0 11-12|0.0.1 13-14|0 15-16|0.1.0.0 16-17|0.1 17-18|0.1.1.0 18-19|0.1.0+0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:38.563348 ::parser eager_oracle ::smatch 1.0 ::n_actions 69
# ::node	0	produce-01	13-14
# ::node	0.0	term	5-6
# ::node	0.0.0	specific-02	6-7
# ::node	0.0.0.0	term	5-6
# ::node	0.0.1	vector	11-12
# ::node	0.0.1.0	document	10-11
# ::node	0.1	and	16-17
# ::node	0.1.0	parameter	18-19
# ::node	0.1.0.0	local-02	15-16
# ::node	0.1.1	parameter	18-19
# ::node	0.1.1.0	globe	17-18
# ::node	0.2	model	3-4
# ::node	0.2.0	this	1-2
# ::node	0.2.1	classic	2-3
# ::root	0	produce-01
# ::edge	and	op1	parameter	0.1	0.1.0
# ::edge	and	op2	parameter	0.1	0.1.1
# ::edge	model	mod	classic	0.2	0.2.1
# ::edge	model	mod	this	0.2	0.2.0
# ::edge	parameter	ARG1-of	local-02	0.1.0	0.1.0.0
# ::edge	parameter	mod	globe	0.1.1	0.1.1.0
# ::edge	produce-01	ARG1	term	0	0.0
# ::edge	produce-01	ARG2	and	0	0.1
# ::edge	produce-01	location	model	0	0.2
# ::edge	specific-02	ARG2	term	0.0.0	0.0.0.0
# ::edge	term	ARG1-of	specific-02	0.0	0.0.0
# ::edge	term	location	vector	0.0	0.0.1
# ::edge	vector	mod	document	0.0.1	0.0.1.0
(MRPNode-0 / produce-01 :ARG1 (MRPNode-1 / term :ARG1-of (MRPNode-2 / specific-02 :ARG2 (MRPNode-3 / term)) :location (MRPNode-4 / vector :mod (MRPNode-5 / document))) :ARG2 (MRPNode-6 / and :op1 (MRPNode-7 / parameter :ARG1-of (MRPNode-8 / local-02)) :op2 (MRPNode-9 / parameter :mod (MRPNode-10 / globe))) :location (MRPNode-11 / model :mod (MRPNode-12 / this) :mod (MRPNode-13 / classic)))

# ::id 336
# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
# ::tok In vector space model , the documents from which the information is to be retrieved are represented as vectors .
# ::alignments 1-2|0.2.0.0 2-3|0.2.0 3-4|0.2 6-7|0.0 10-11|0.0.0.0 14-15|0.0.0 16-17|0 18-19|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:38.575926 ::parser eager_oracle ::smatch 1.0 ::n_actions 46
# ::node	0	represent-01	16-17
# ::node	0.0	document	6-7
# ::node	0.0.0	retrieve-01	14-15
# ::node	0.0.0.0	information	10-11
# ::node	0.1	vector	18-19
# ::node	0.2	model-01	3-4
# ::node	0.2.0	space	2-3
# ::node	0.2.0.0	vector	1-2
# ::root	0	represent-01
# ::edge	document	ARG1-of	retrieve-01	0.0	0.0.0
# ::edge	model-01	ARG2	space	0.2	0.2.0
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	represent-01	location	model-01	0	0.2
# ::edge	retrieve-01	ARG1	information	0.0.0	0.0.0.0
# ::edge	space	mod	vector	0.2.0	0.2.0.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document :ARG1-of (MRPNode-2 / retrieve-01 :ARG1 (MRPNode-3 / information))) :ARG2 (MRPNode-4 / vector) :location (MRPNode-5 / model-01 :ARG2 (MRPNode-6 / space :mod (MRPNode-7 / vector))))

# ::id 337
# ::snt It was intended to allow existing code to be used again with minimal or no alteration.
# ::tok It was intended to allow existing code to be used again with minimal or no alteration .
# ::alignments 2-3|0 4-5|0.0 5-6|0.0.0.0.0 6-7|0.0.0.0 9-10|0.0.0 10-11|0.0.0.1 12-13|0.0.0.2.1.0 13-14|0.0.0.2 14-15|0.0.0.2.0.0 15-16|0.0.0.2.0+0.0.0.2.1 ::annotator aligner3.py ::date 2021-03-12 14:31:38.587436 ::parser eager_oracle ::smatch 1.0 ::n_actions 54
# ::node	0	intend-01	2-3
# ::node	0.0	allow-01	4-5
# ::node	0.0.0	use-01	9-10
# ::node	0.0.0.0	code	6-7
# ::node	0.0.0.0.0	exist-01	5-6
# ::node	0.0.0.1	again	10-11
# ::node	0.0.0.2	or	13-14
# ::node	0.0.0.2.0	alter-01	15-16
# ::node	0.0.0.2.0.0	-	14-15
# ::node	0.0.0.2.1	alter-01	15-16
# ::node	0.0.0.2.1.0	minimal-02	12-13
# ::root	0	intend-01
# ::edge	allow-01	ARG1	use-01	0.0	0.0.0
# ::edge	alter-01	ARG1-of	minimal-02	0.0.0.2.1	0.0.0.2.1.0
# ::edge	alter-01	polarity	-	0.0.0.2.0	0.0.0.2.0.0
# ::edge	code	ARG1-of	exist-01	0.0.0.0	0.0.0.0.0
# ::edge	intend-01	ARG1	allow-01	0	0.0
# ::edge	or	op1	alter-01	0.0.0.2	0.0.0.2.0
# ::edge	or	op2	alter-01	0.0.0.2	0.0.0.2.1
# ::edge	use-01	ARG1	code	0.0.0	0.0.0.0
# ::edge	use-01	manner	or	0.0.0	0.0.0.2
# ::edge	use-01	mod	again	0.0.0	0.0.0.1
(MRPNode-0 / intend-01 :ARG1 (MRPNode-1 / allow-01 :ARG1 (MRPNode-2 / use-01 :ARG1 (MRPNode-3 / code :ARG1-of (MRPNode-4 / exist-01)) :mod (MRPNode-5 / again) :manner (MRPNode-6 / or :op1 (MRPNode-7 / alter-01 :polarity -) :op2 (MRPNode-8 / alter-01 :ARG1-of (MRPNode-9 / minimal-02))))))

# ::id 338
# ::snt The limitations of the vector space model are thus.
# ::tok The limitations of the vector space model are thus .
# ::alignments 1-2|0.0 4-5|0.0.0.0.0 5-6|0.0.0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.590567 ::parser eager_oracle ::smatch 0.7777777777777777 ::n_actions 24
# ::node	0	cause-01	
# ::node	0.0	limit-01	1-2
# ::node	0.0.0	model	6-7
# ::node	0.0.0.0	space	5-6
# ::node	0.0.0.0.0	vector	4-5
# ::root	0	cause-01
# ::edge	cause-01	ARG1	limit-01	0	0.0
# ::edge	limit-01	ARG1	model	0.0	0.0.0
# ::edge	model	mod	space	0.0.0	0.0.0.0
# ::edge	space	mod	vector	0.0.0.0	0.0.0.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / limit-01 :ARG1 (MRPNode-2 / model :mod (MRPNode-3 / space :mod (MRPNode-4 / vector)))))

# ::id 339
# ::snt The key to Dynamic Programming is to find the structure of optimal solutions.
# ::tok The key to Dynamic Programming is to find the structure of optimal solutions .
# ::alignments 1-2|0 7-8|0.1 9-10|0.1.0 11-12|0.1.0.0.0 12-13|0.1.0.0+0.1.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:38.598270 ::parser eager_oracle ::smatch 0.7499999999999999 ::n_actions 35
# ::node	0	key-02	1-2
# ::node	0.0	figure-out-05	
# ::node	0.0.0	product	3-5
# ::node	0.0.0.0	name	3-5
# ::node	0.0.0.0.0	dynamic	3-5
# ::node	0.0.0.0.1	programming	3-5
# ::node	0.1	find-01	7-8
# ::node	0.1.0	structure-01	9-10
# ::node	0.1.0.0	thing	12-13
# ::node	0.1.0.0.0	optimal	11-12
# ::node	0.1.0.0.1	solve-01	12-13
# ::root	0	key-02
# ::edge	figure-out-05	manner	product	0.0	0.0.0
# ::edge	find-01	ARG1	structure-01	0.1	0.1.0
# ::edge	key-02	ARG1	figure-out-05	0	0.0
# ::edge	key-02	ARG2	find-01	0	0.1
# ::edge	name	op1	dynamic	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	programming	0.0.0.0	0.0.0.0.1
# ::edge	product	name	name	0.0.0	0.0.0.0
# ::edge	structure-01	ARG1	thing	0.1.0	0.1.0.0
# ::edge	thing	ARG2-of	solve-01	0.1.0.0	0.1.0.0.1
# ::edge	thing	mod	optimal	0.1.0.0	0.1.0.0.0
(MRPNode-0 / key-02 :ARG1 (MRPNode-1 / figure-out-05 :manner (MRPNode-2 / product :name (MRPNode-3 / name :op1 dynamic :op2 programming))) :ARG2 (MRPNode-4 / find-01 :ARG1 (MRPNode-5 / structure-01 :ARG1 (MRPNode-6 / thing :mod (MRPNode-7 / optimal) :ARG2-of (MRPNode-8 / solve-01)))))

# ::id 340
# ::snt Terms are basically the words or any indexing unit used to identify the contents of a text.
# ::tok Terms are basically the words or any indexing unit used to identify the contents of a text .
# ::alignments 0-1|0.3 2-3|0.2 4-5|0.0 5-6|0 6-7|0.1.0 8-9|0.1 9-10|0.1.1 11-12|0.1.1.0 13-14|0.1.1.0.0+0.1.1.0.0.0 16-17|0.1.1.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.610336 ::parser eager_oracle ::smatch 0.9565217391304348 ::n_actions 54
# ::node	0	or	5-6
# ::node	0.0	word	4-5
# ::node	0.1	unit	8-9
# ::node	0.1.0	any	6-7
# ::node	0.1.1	use-01	9-10
# ::node	0.1.1.0	identify-01	11-12
# ::node	0.1.1.0.0	thing	13-14
# ::node	0.1.1.0.0.0	contain-01	13-14
# ::node	0.1.1.0.0.0.0	text	16-17
# ::node	0.1.2	define-01	
# ::node	0.2	basic	2-3
# ::node	0.3	term	0-1
# ::root	0	or
# ::edge	contain-01	ARG0	text	0.1.1.0.0.0	0.1.1.0.0.0.0
# ::edge	identify-01	ARG1	thing	0.1.1.0	0.1.1.0.0
# ::edge	or	domain	basic	0	0.2
# ::edge	or	domain	term	0	0.3
# ::edge	or	op1	word	0	0.0
# ::edge	or	op2	unit	0	0.1
# ::edge	thing	ARG1-of	contain-01	0.1.1.0.0	0.1.1.0.0.0
# ::edge	unit	ARG0-of	define-01	0.1	0.1.2
# ::edge	unit	ARG0-of	use-01	0.1	0.1.1
# ::edge	unit	mod	any	0.1	0.1.0
# ::edge	use-01	ARG2	identify-01	0.1.1	0.1.1.0
(MRPNode-0 / or :op1 (MRPNode-1 / word) :op2 (MRPNode-2 / unit :mod (MRPNode-3 / any) :ARG0-of (MRPNode-4 / use-01 :ARG2 (MRPNode-5 / identify-01 :ARG1 (MRPNode-6 / thing :ARG1-of (MRPNode-7 / contain-01 :ARG0 (MRPNode-8 / text))))) :ARG0-of (MRPNode-9 / define-01)) :domain (MRPNode-10 / basic) :domain (MRPNode-11 / term))

# ::id 341
# ::snt Bayes theorem can be used to compute the probability that a proposed diagnosis is correct.
# ::tok Bayes theorem can be used to compute the probability that a proposed diagnosis is correct .
# ::alignments 0-2|0.0.0+0.0.0.0+0.0.0.0.0+0.0.0.0.1 2-3|0 4-5|0.0 6-7|0.0.1 8-9|0.0.1.0 11-12|0.0.1.0.0.0+0.0.1.0.0.0.0 12-13|0.0.1.0.0.0.1 14-15|0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.621414 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	possible-01	2-3
# ::node	0.0	use-01	4-5
# ::node	0.0.0	theorem	0-2
# ::node	0.0.0.0	name	0-2
# ::node	0.0.0.0.0	bayes	0-2
# ::node	0.0.0.0.1	theorem	0-2
# ::node	0.0.1	compile-01	6-7
# ::node	0.0.1.0	probability	8-9
# ::node	0.0.1.0.0	correct-02	14-15
# ::node	0.0.1.0.0.0	thing	11-12
# ::node	0.0.1.0.0.0.0	propose-01	11-12
# ::node	0.0.1.0.0.0.1	diagnose-01	12-13
# ::root	0	possible-01
# ::edge	compile-01	ARG0	theorem	0.0.1	0.0.0
# ::edge	compile-01	ARG1	probability	0.0.1	0.0.1.0
# ::edge	correct-02	ARG1	thing	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	bayes	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	theorem	0.0.0.0	0.0.0.0.1
# ::edge	possible-01	ARG1	use-01	0	0.0
# ::edge	probability	domain	correct-02	0.0.1.0	0.0.1.0.0
# ::edge	theorem	name	name	0.0.0	0.0.0.0
# ::edge	thing	ARG1-of	propose-01	0.0.1.0.0.0	0.0.1.0.0.0.0
# ::edge	thing	ARG2-of	diagnose-01	0.0.1.0.0.0	0.0.1.0.0.0.1
# ::edge	use-01	ARG1	theorem	0.0	0.0.0
# ::edge	use-01	ARG2	compile-01	0.0	0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / use-01 :ARG1 (MRPNode-2 / theorem :name (MRPNode-3 / name :op1 bayes :op2 theorem)) :ARG2 (MRPNode-4 / compile-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-5 / probability :domain (MRPNode-6 / correct-02 :ARG1 (MRPNode-7 / thing :ARG1-of (MRPNode-8 / propose-01) :ARG2-of (MRPNode-9 / diagnose-01)))))))

# ::id 342
# ::snt It is also called the posterior probability because it is derived from or depends upon the specified value of B.
# ::tok It is also called the posterior probability because it is derived from or depends upon the specified value of B.
# ::alignments 2-3|0.1 3-4|0 5-6|0.3 7-8|0.2 8-9|0.0 10-11|0.0.0 12-13|0.2.0 13-14|0.0.1 16-17|0.0.0.0.0 17-18|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.641918 ::parser eager_oracle ::smatch 1.0 ::n_actions 58
# ::node	0	call-01	3-4
# ::node	0.0	it	8-9
# ::node	0.0.0	derive-01	10-11
# ::node	0.0.0.0	value	17-18
# ::node	0.0.0.0.0	specify-01	16-17
# ::node	0.0.1	depend-01	13-14
# ::node	0.1	also	2-3
# ::node	0.2	cause-01	7-8
# ::node	0.2.0	or	12-13
# ::node	0.3	posterior	5-6
# ::root	0	call-01
# ::edge	call-01	ARG1	it	0	0.0
# ::edge	call-01	ARG1-of	cause-01	0	0.2
# ::edge	call-01	ARG2	posterior	0	0.3
# ::edge	call-01	mod	also	0	0.1
# ::edge	cause-01	ARG0	or	0.2	0.2.0
# ::edge	depend-01	ARG1	value	0.0.1	0.0.0.0
# ::edge	derive-01	ARG2	value	0.0.0	0.0.0.0
# ::edge	it	ARG0-of	depend-01	0.0	0.0.1
# ::edge	it	ARG1-of	derive-01	0.0	0.0.0
# ::edge	or	op2	depend-01	0.2.0	0.0.1
# ::edge	value	ARG1-of	specify-01	0.0.0.0	0.0.0.0.0
(MRPNode-0 / call-01 :ARG1 (MRPNode-1 / it :ARG1-of (MRPNode-2 / derive-01 :ARG2 (MRPNode-3 / value :ARG1-of (MRPNode-4 / specify-01))) :ARG0-of (MRPNode-5 / depend-01 :ARG1 MRPNode-3)) :mod (MRPNode-6 / also) :ARG1-of (MRPNode-7 / cause-01 :ARG0 (MRPNode-8 / or :op2 MRPNode-5)) :ARG2 (MRPNode-9 / posterior))

# ::id 343
# ::snt The limitations of the vector space model are thus.
# ::tok The limitations of the vector space model are thus .
# ::alignments 1-2|0.0 4-5|0.0.0.0.0 5-6|0.0.0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.645127 ::parser eager_oracle ::smatch 0.7777777777777777 ::n_actions 24
# ::node	0	cause-01	
# ::node	0.0	limit-01	1-2
# ::node	0.0.0	model	6-7
# ::node	0.0.0.0	space	5-6
# ::node	0.0.0.0.0	vector	4-5
# ::root	0	cause-01
# ::edge	cause-01	ARG1	limit-01	0	0.0
# ::edge	limit-01	ARG1	model	0.0	0.0.0
# ::edge	model	mod	space	0.0.0	0.0.0.0
# ::edge	space	mod	vector	0.0.0.0	0.0.0.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / limit-01 :ARG1 (MRPNode-2 / model :mod (MRPNode-3 / space :mod (MRPNode-4 / vector)))))

# ::id 344
# ::snt A possible use for a vector space model is for retrieval and filtering of information.
# ::tok A possible use for a vector space model is for retrieval and filtering of information .
# ::alignments 1-2|0.1 2-3|0 5-6|0.0.0.0 6-7|0.0.0 7-8|0.0 10-11|0.2.0 11-12|0.2 12-13|0.2.1 14-15|0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.654040 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	use-01	2-3
# ::node	0.0	model	7-8
# ::node	0.0.0	space	6-7
# ::node	0.0.0.0	vector	5-6
# ::node	0.1	possible-01	1-2
# ::node	0.2	and	11-12
# ::node	0.2.0	retrieve-01	10-11
# ::node	0.2.0.0	information	14-15
# ::node	0.2.1	filter-02	12-13
# ::root	0	use-01
# ::edge	and	op1	retrieve-01	0.2	0.2.0
# ::edge	and	op2	filter-02	0.2	0.2.1
# ::edge	filter-02	ARG1	information	0.2.1	0.2.0.0
# ::edge	model	mod	space	0.0	0.0.0
# ::edge	retrieve-01	ARG1	information	0.2.0	0.2.0.0
# ::edge	space	mod	vector	0.0.0	0.0.0.0
# ::edge	use-01	ARG1	model	0	0.0
# ::edge	use-01	ARG1-of	possible-01	0	0.1
# ::edge	use-01	ARG2	and	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG1-of (MRPNode-4 / possible-01) :ARG2 (MRPNode-5 / and :op1 (MRPNode-6 / retrieve-01 :ARG1 (MRPNode-7 / information)) :op2 (MRPNode-8 / filter-02 :ARG1 MRPNode-7)))

# ::id 345
# ::snt If a term occurs in the document, the value will be non-zero in the vector.
# ::tok If a term occurs in the document , the value will be non - zero in the vector .
# ::alignments 2-3|0.0.0 4-5|0.0 6-7|0.0.1 9-10|0.1 13-14|0.1.0.0 14-15|0.1.0 17-18|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:38.662859 ::parser eager_oracle ::smatch 0.7857142857142856 ::n_actions 41
# ::node	0	have-condition-91	
# ::node	0.0	be-located-at-91	4-5
# ::node	0.0.0	term	2-3
# ::node	0.0.1	document	6-7
# ::node	0.1	value	9-10
# ::node	0.1.0	zero	14-15
# ::node	0.1.0.0	-	13-14
# ::node	0.1.1	vector	17-18
# ::root	0	have-condition-91
# ::edge	be-located-at-91	ARG1	term	0.0	0.0.0
# ::edge	be-located-at-91	ARG2	document	0.0	0.0.1
# ::edge	have-condition-91	ARG1	be-located-at-91	0	0.0
# ::edge	have-condition-91	ARG1	value	0	0.1
# ::edge	value	location	vector	0.1	0.1.1
# ::edge	value	mod	zero	0.1	0.1.0
# ::edge	zero	polarity	-	0.1.0	0.1.0.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / be-located-at-91 :ARG1 (MRPNode-2 / term) :ARG2 (MRPNode-3 / document)) :ARG1 (MRPNode-4 / value :mod (MRPNode-5 / zero :polarity -) :location (MRPNode-6 / vector)))

# ::id 346
# ::snt The peropos of inheritance in object oriented programming is to minimize the reuse of existing code without modification.
# ::tok The peropos of inheritance in object oriented programming is to minimize the reuse of existing code without modification .
# ::alignments 3-4|0.1 5-6|0.1.0.0.0 6-7|0.1.0.0 7-8|0.1.0 10-11|0.0 13-14|0 14-15|0.0.0.0.0 15-16|0.0.0.0 16-17|0.0.0.1.0 17-18|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:38.676953 ::parser eager_oracle ::smatch 0.8500000000000001 ::n_actions 49
# ::node	0	have-mod-91	13-14
# ::node	0.0	minimize-01	10-11
# ::node	0.0.0	rewrite-01	
# ::node	0.0.0.0	code	15-16
# ::node	0.0.0.0.0	exist-01	14-15
# ::node	0.0.0.1	modify-01	17-18
# ::node	0.0.0.1.0	-	16-17
# ::node	0.1	inherit-01	3-4
# ::node	0.1.0	program-01	7-8
# ::node	0.1.0.0	orient-01	6-7
# ::node	0.1.0.0.0	object	5-6
# ::root	0	have-mod-91
# ::edge	code	ARG1-of	exist-01	0.0.0.0	0.0.0.0.0
# ::edge	have-mod-91	ARG1	inherit-01	0	0.1
# ::edge	have-mod-91	ARG1	minimize-01	0	0.0
# ::edge	inherit-01	ARG1	program-01	0.1	0.1.0
# ::edge	minimize-01	ARG1	rewrite-01	0.0	0.0.0
# ::edge	modify-01	polarity	-	0.0.0.1	0.0.0.1.0
# ::edge	orient-01	ARG2	object	0.1.0.0	0.1.0.0.0
# ::edge	program-01	ARG1-of	orient-01	0.1.0	0.1.0.0
# ::edge	rewrite-01	ARG1	code	0.0.0	0.0.0.0
# ::edge	rewrite-01	manner	modify-01	0.0.0	0.0.0.1
(MRPNode-0 / have-mod-91 :ARG1 (MRPNode-1 / minimize-01 :ARG1 (MRPNode-2 / rewrite-01 :ARG1 (MRPNode-3 / code :ARG1-of (MRPNode-4 / exist-01)) :manner (MRPNode-5 / modify-01 :polarity -))) :ARG1 (MRPNode-6 / inherit-01 :ARG1 (MRPNode-7 / program-01 :ARG1-of (MRPNode-8 / orient-01 :ARG2 (MRPNode-9 / object)))))

# ::id 347
# ::snt A possible use for a vector space model is for retrieval and filtering of information.
# ::tok A possible use for a vector space model is for retrieval and filtering of information .
# ::alignments 1-2|0.1 2-3|0 5-6|0.0.0.0 6-7|0.0.0 7-8|0.0 10-11|0.2.0 11-12|0.2 12-13|0.2.1 14-15|0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.685769 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	use-01	2-3
# ::node	0.0	model	7-8
# ::node	0.0.0	space	6-7
# ::node	0.0.0.0	vector	5-6
# ::node	0.1	possible-01	1-2
# ::node	0.2	and	11-12
# ::node	0.2.0	retrieve-01	10-11
# ::node	0.2.0.0	information	14-15
# ::node	0.2.1	filter-02	12-13
# ::root	0	use-01
# ::edge	and	op1	retrieve-01	0.2	0.2.0
# ::edge	and	op2	filter-02	0.2	0.2.1
# ::edge	filter-02	ARG1	information	0.2.1	0.2.0.0
# ::edge	model	mod	space	0.0	0.0.0
# ::edge	retrieve-01	ARG1	information	0.2.0	0.2.0.0
# ::edge	space	mod	vector	0.0.0	0.0.0.0
# ::edge	use-01	ARG1	model	0	0.0
# ::edge	use-01	ARG1-of	possible-01	0	0.1
# ::edge	use-01	ARG2	and	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG1-of (MRPNode-4 / possible-01) :ARG2 (MRPNode-5 / and :op1 (MRPNode-6 / retrieve-01 :ARG1 (MRPNode-7 / information)) :op2 (MRPNode-8 / filter-02 :ARG1 MRPNode-7)))

# ::id 348
# ::snt Generalise the structure of an optimal solution 2.
# ::tok Generalise the structure of an optimal solution 2 .
# ::alignments 0-1|0 2-3|0.0 5-6|0.0.0.1 6-7|0.0.0+0.0.0.2 7-8|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.689265 ::parser eager_oracle ::smatch 0.9166666666666666 ::n_actions 30
# ::node	0	generalize-01	0-1
# ::node	0.0	structure-01	2-3
# ::node	0.0.0	thing	6-7
# ::node	0.0.0.0	2	7-8
# ::node	0.0.0.1	optimal	5-6
# ::node	0.0.0.2	solve-01	6-7
# ::node	0.1	you	
# ::root	0	generalize-01
# ::edge	generalize-01	ARG0	you	0	0.1
# ::edge	generalize-01	ARG1	structure-01	0	0.0
# ::edge	structure-01	ARG1	thing	0.0	0.0.0
# ::edge	thing	ARG2-of	solve-01	0.0.0	0.0.0.2
# ::edge	thing	mod	optimal	0.0.0	0.0.0.1
# ::edge	thing	quant	2	0.0.0	0.0.0.0
(MRPNode-0 / generalize-01 :ARG1 (MRPNode-1 / structure-01 :ARG1 (MRPNode-2 / thing :quant 2 :mod (MRPNode-3 / optimal) :ARG2-of (MRPNode-4 / solve-01))) :ARG0 (MRPNode-5 / you))

# ::id 349
# ::snt There are four steps in Dynamic Programming: 1.
# ::tok There are four steps in Dynamic Programming : 1 .
# ::alignments 2-3|0.0 3-4|0+0.1 5-7|0.2+0.2.0+0.2.0.0+0.2.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:38.693349 ::parser eager_oracle ::smatch 0.8695652173913043 ::n_actions 25
# ::node	0	thing	3-4
# ::node	0.0	4	2-3
# ::node	0.1	step-01	3-4
# ::node	0.2	program	5-7
# ::node	0.2.0	name	5-7
# ::node	0.2.0.0	dynamic	5-7
# ::node	0.2.0.1	programming	5-7
# ::root	0	thing
# ::edge	name	op1	dynamic	0.2.0	0.2.0.0
# ::edge	name	op2	programming	0.2.0	0.2.0.1
# ::edge	program	name	name	0.2	0.2.0
# ::edge	thing	ARG4-of	step-01	0	0.1
# ::edge	thing	location	program	0	0.2
# ::edge	thing	ord	4	0	0.0
(MRPNode-0 / thing :ord 4 :ARG4-of (MRPNode-1 / step-01) :location (MRPNode-2 / program :name (MRPNode-3 / name :op1 dynamic :op2 programming)))

# ::id 350
# ::snt It is mainly used to calculate the probability of one event’s outcome given that a previous event happened.
# ::tok It is mainly used to calculate the probability of one event 's outcome given that a previous event happened .
# ::alignments 0-1|0.0 2-3|0.1 3-4|0 5-6|0.2 7-8|0.2.0 9-10|0.2.0.0.0.0 10-11|0.2.0.0.0 12-13|0.2.0.0 13-14|0.3 16-17|0.3.0.0 17-18|0.3.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.720546 ::parser eager_oracle ::smatch 1.0 ::n_actions 55
# ::node	0	use-01	3-4
# ::node	0.0	it	0-1
# ::node	0.1	main	2-3
# ::node	0.2	calculate-01	5-6
# ::node	0.2.0	probable	7-8
# ::node	0.2.0.0	outcome	12-13
# ::node	0.2.0.0.0	event	10-11
# ::node	0.2.0.0.0.0	1	9-10
# ::node	0.3	give-01	13-14
# ::node	0.3.0	event	17-18
# ::node	0.3.0.0	previous	16-17
# ::root	0	use-01
# ::edge	calculate-01	ARG1	probable	0.2	0.2.0
# ::edge	event	mod	previous	0.3.0	0.3.0.0
# ::edge	event	quant	1	0.2.0.0.0	0.2.0.0.0.0
# ::edge	give-01	ARG1	event	0.3	0.3.0
# ::edge	outcome	poss	event	0.2.0.0	0.2.0.0.0
# ::edge	probable	domain	outcome	0.2.0	0.2.0.0
# ::edge	use-01	ARG1	it	0	0.0
# ::edge	use-01	ARG1-of	give-01	0	0.3
# ::edge	use-01	ARG2	calculate-01	0	0.2
# ::edge	use-01	mod	main	0	0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / it) :mod (MRPNode-2 / main) :ARG2 (MRPNode-3 / calculate-01 :ARG1 (MRPNode-4 / probable :domain (MRPNode-5 / outcome :poss (MRPNode-6 / event :quant 1)))) :ARG1-of (MRPNode-7 / give-01 :ARG1 (MRPNode-8 / event :mod (MRPNode-9 / previous))))

# ::id 351
# ::snt The vector space model has several disadvantages.
# ::tok The vector space model has several disadvantages .
# ::alignments 1-2|0.1.0.0 2-3|0.1.0 3-4|0.1 5-6|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:38.723556 ::parser eager_oracle ::smatch 0.5882352941176471 ::n_actions 21
# ::node	0	advantage-01	
# ::node	0.0	-	
# ::node	0.1	model	3-4
# ::node	0.1.0	space	2-3
# ::node	0.1.0.0	vector	1-2
# ::node	0.2	several	5-6
# ::root	0	advantage-01
# ::edge	advantage-01	ARG1	model	0	0.1
# ::edge	advantage-01	ARG3	several	0	0.2
# ::edge	advantage-01	polarity	-	0	0.0
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / advantage-01 :polarity - :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG3 (MRPNode-4 / several))

# ::id 352
# ::snt The order in which the terms appear in the document is lost in the vector space representation.
# ::tok The order in which the terms appear in the document is lost in the vector space representation .
# ::alignments 1-2|0.0 5-6|0.0.0.0 6-7|0.0.0 9-10|0.0.0.1 11-12|0 14-15|0.1.0.0 15-16|0.1.0 16-17|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:38.731372 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	lose-02	11-12
# ::node	0.0	order	1-2
# ::node	0.0.0	appear-01	6-7
# ::node	0.0.0.0	term	5-6
# ::node	0.0.0.1	document	9-10
# ::node	0.1	representation-02	16-17
# ::node	0.1.0	space	15-16
# ::node	0.1.0.0	vector	14-15
# ::root	0	lose-02
# ::edge	appear-01	ARG1	term	0.0.0	0.0.0.0
# ::edge	appear-01	location	document	0.0.0	0.0.0.1
# ::edge	lose-02	ARG1	order	0	0.0
# ::edge	lose-02	location	representation-02	0	0.1
# ::edge	order	time-of	appear-01	0.0	0.0.0
# ::edge	representation-02	ARG0	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / lose-02 :ARG1 (MRPNode-1 / order :time-of (MRPNode-2 / appear-01 :ARG1 (MRPNode-3 / term) :location (MRPNode-4 / document))) :location (MRPNode-5 / representation-02 :ARG0 (MRPNode-6 / space :mod (MRPNode-7 / vector))))

# ::id 353
# ::snt In the vector space model a document is represented as a vector.
# ::tok In the vector space model a document is represented as a vector .
# ::alignments 2-3|0.2.0.0 3-4|0.2.0 4-5|0.2 6-7|0.0 8-9|0 11-12|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:38.738111 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	represent-01	8-9
# ::node	0.0	document	6-7
# ::node	0.1	vector	11-12
# ::node	0.2	model-01	4-5
# ::node	0.2.0	space	3-4
# ::node	0.2.0.0	vector	2-3
# ::root	0	represent-01
# ::edge	model-01	ARG1	space	0.2	0.2.0
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	represent-01	location	model-01	0	0.2
# ::edge	space	mod	vector	0.2.0	0.2.0.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document) :ARG2 (MRPNode-2 / vector) :location (MRPNode-3 / model-01 :ARG1 (MRPNode-4 / space :mod (MRPNode-5 / vector))))

# ::id 354
# ::snt A link to a page is seen as a vote of support.
# ::tok A link to a page is seen as a vote of support .
# ::alignments 1-2|0.0+0.0.0 4-5|0.0.0.0 6-7|0 9-10|0.1 11-12|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.742804 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	see-01	6-7
# ::node	0.0	thing	1-2
# ::node	0.0.0	link-01	1-2
# ::node	0.0.0.0	page	4-5
# ::node	0.1	vote-01	9-10
# ::node	0.1.0	support-01	11-12
# ::root	0	see-01
# ::edge	link-01	ARG1	page	0.0.0	0.0.0.0
# ::edge	see-01	ARG1	thing	0	0.0
# ::edge	see-01	ARG2	vote-01	0	0.1
# ::edge	thing	ARG3-of	link-01	0.0	0.0.0
# ::edge	vote-01	ARG1	support-01	0.1	0.1.0
(MRPNode-0 / see-01 :ARG1 (MRPNode-1 / thing :ARG3-of (MRPNode-2 / link-01 :ARG1 (MRPNode-3 / page))) :ARG2 (MRPNode-4 / vote-01 :ARG1 (MRPNode-5 / support-01)))

# ::id 355
# ::snt The PageRank depends on the PageRank rating and number of all pages that have links to it.
# ::tok The PageRank depends on the PageRank rating and number of all pages that have links to it .
# ::alignments 1-2|0.1+0.1.1+0.1.1.0 2-3|0 6-7|0.0.0 7-8|0.0 8-9|0.0.1 10-11|0.0.1.0.0 11-12|0.0.1.0 14-15|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.753558 ::parser eager_oracle ::smatch 1.0 ::n_actions 46
# ::node	0	depend-01	2-3
# ::node	0.0	and	7-8
# ::node	0.0.0	rate-01	6-7
# ::node	0.0.1	number	8-9
# ::node	0.0.1.0	page	11-12
# ::node	0.0.1.0.0	all	10-11
# ::node	0.1	publication	1-2
# ::node	0.1.0	link-01	14-15
# ::node	0.1.1	name	1-2
# ::node	0.1.1.0	pagerank	1-2
# ::root	0	depend-01
# ::edge	and	op1	rate-01	0.0	0.0.0
# ::edge	and	op2	number	0.0	0.0.1
# ::edge	depend-01	ARG0	publication	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	link-01	ARG1	page	0.1.0	0.0.1.0
# ::edge	name	op1	pagerank	0.1.1	0.1.1.0
# ::edge	number	quant-of	page	0.0.1	0.0.1.0
# ::edge	page	mod	all	0.0.1.0	0.0.1.0.0
# ::edge	publication	ARG1-of	link-01	0.1	0.1.0
# ::edge	publication	name	name	0.1	0.1.1
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / rate-01) :op2 (MRPNode-3 / number :quant-of (MRPNode-4 / page :mod (MRPNode-5 / all)))) :ARG0 (MRPNode-6 / publication :ARG1-of (MRPNode-7 / link-01 :ARG1 MRPNode-4) :name (MRPNode-8 / name :op1 pagerank)))

# ::id 356
# ::snt A possible use for a vector space model is for retrieval and filtering of information.
# ::tok A possible use for a vector space model is for retrieval and filtering of information .
# ::alignments 1-2|0.1 2-3|0 5-6|0.0.0.0 6-7|0.0.0 7-8|0.0 10-11|0.2.0 11-12|0.2 12-13|0.2.1 14-15|0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.762417 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	use-01	2-3
# ::node	0.0	model	7-8
# ::node	0.0.0	space	6-7
# ::node	0.0.0.0	vector	5-6
# ::node	0.1	possible-01	1-2
# ::node	0.2	and	11-12
# ::node	0.2.0	retrieve-01	10-11
# ::node	0.2.0.0	information	14-15
# ::node	0.2.1	filter-02	12-13
# ::root	0	use-01
# ::edge	and	op1	retrieve-01	0.2	0.2.0
# ::edge	and	op2	filter-02	0.2	0.2.1
# ::edge	filter-02	ARG1	information	0.2.1	0.2.0.0
# ::edge	model	mod	space	0.0	0.0.0
# ::edge	retrieve-01	ARG1	information	0.2.0	0.2.0.0
# ::edge	space	mod	vector	0.0.0	0.0.0.0
# ::edge	use-01	ARG1	model	0	0.0
# ::edge	use-01	ARG1-of	possible-01	0	0.1
# ::edge	use-01	ARG2	and	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG1-of (MRPNode-4 / possible-01) :ARG2 (MRPNode-5 / and :op1 (MRPNode-6 / retrieve-01 :ARG1 (MRPNode-7 / information)) :op2 (MRPNode-8 / filter-02 :ARG1 MRPNode-7)))

# ::id 357
# ::snt Each item in the vector represents a different keyword.
# ::tok Each item in the vector represents a different keyword .
# ::alignments 0-1|0.1.0 1-2|0.1 4-5|0.1.1 5-6|0 7-8|0.0.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.765808 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	represent-01	5-6
# ::node	0.0	keyword	8-9
# ::node	0.0.0	differ-02	7-8
# ::node	0.1	item	1-2
# ::node	0.1.0	each	0-1
# ::node	0.1.1	vector	4-5
# ::root	0	represent-01
# ::edge	item	location	vector	0.1	0.1.1
# ::edge	item	mod	each	0.1	0.1.0
# ::edge	keyword	ARG1-of	differ-02	0.0	0.0.0
# ::edge	represent-01	ARG0	item	0	0.1
# ::edge	represent-01	ARG1	keyword	0	0.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / keyword :ARG1-of (MRPNode-2 / differ-02)) :ARG0 (MRPNode-3 / item :mod (MRPNode-4 / each) :location (MRPNode-5 / vector)))

# ::id 358
# ::snt A term which occurs in the document has a value in the vector of non-zero.
# ::tok A term which occurs in the document has a value in the vector of non - zero .
# ::alignments 1-2|0.0 6-7|0.0.0 9-10|0 12-13|0.1 14-15|0.1.0.0 16-17|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.771598 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	value-01	9-10
# ::node	0.0	term	1-2
# ::node	0.0.0	document	6-7
# ::node	0.1	vector	12-13
# ::node	0.1.0	zero	16-17
# ::node	0.1.0.0	-	14-15
# ::root	0	value-01
# ::edge	term	location	document	0.0	0.0.0
# ::edge	value-01	ARG1	term	0	0.0
# ::edge	value-01	location	vector	0	0.1
# ::edge	vector	consist-of	zero	0.1	0.1.0
# ::edge	zero	polarity	-	0.1.0	0.1.0.0
(MRPNode-0 / value-01 :ARG1 (MRPNode-1 / term :location (MRPNode-2 / document)) :location (MRPNode-3 / vector :consist-of (MRPNode-4 / zero :polarity -)))

# ::id 359
# ::snt A variation of the PageRank method bases the importance of a webpage on how many visits the page gets.
# ::tok A variation of the PageRank method bases the importance of a webpage on how many visits the page gets .
# ::alignments 4-5|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 5-6|0.1.0 6-7|0 8-9|0.0 11-12|0.0.1 15-16|0.0.0.0 17-18|0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:38.784699 ::parser eager_oracle ::smatch 0.7894736842105262 ::n_actions 41
# ::node	0	base-02	6-7
# ::node	0.0	important-01	8-9
# ::node	0.0.0	number	
# ::node	0.0.0.0	visit-01	15-16
# ::node	0.0.0.0.0	page	17-18
# ::node	0.0.1	webpage	11-12
# ::node	0.1	vary-01	
# ::node	0.1.0	method	5-6
# ::node	0.1.0.0	publication	4-5
# ::node	0.1.0.0.0	name	4-5
# ::node	0.1.0.0.0.0	pagerank	4-5
# ::root	0	base-02
# ::edge	base-02	ARG0	vary-01	0	0.1
# ::edge	base-02	ARG1	important-01	0	0.0
# ::edge	important-01	ARG1	number	0.0	0.0.0
# ::edge	important-01	ARG1	webpage	0.0	0.0.1
# ::edge	method	mod	publication	0.1.0	0.1.0.0
# ::edge	name	op1	pagerank	0.1.0.0.0	0.1.0.0.0.0
# ::edge	number	quant-of	visit-01	0.0.0	0.0.0.0
# ::edge	publication	name	name	0.1.0.0	0.1.0.0.0
# ::edge	vary-01	ARG1	method	0.1	0.1.0
# ::edge	visit-01	ARG0	page	0.0.0.0	0.0.0.0.0
(MRPNode-0 / base-02 :ARG1 (MRPNode-1 / important-01 :ARG1 (MRPNode-2 / number :quant-of (MRPNode-3 / visit-01 :ARG0 (MRPNode-4 / page))) :ARG1 (MRPNode-5 / webpage)) :ARG0 (MRPNode-6 / vary-01 :ARG1 (MRPNode-7 / method :mod (MRPNode-8 / publication :name (MRPNode-9 / name :op1 pagerank)))))

# ::id 360
# ::snt Joe records all of his results and about 0.5% of the time he accidently records the wrong results.
# ::tok Joe records all of his results and about 0.5 % of the time he accidently records the wrong results .
# ::alignments 0-1|0.0.0.2+0.0.0.2.0+0.0.0.2.0.0 1-2|0.1 2-3|0.0.0.0 3-4|0.0.0.1 5-6|0.1.0+0.1.0.0 6-7|0 7-8|0.0.0.1.0 8-9|0.0.0.1.0.0.0 9-10|0.0.0.1.0.0 14-15|0.1.1 15-16|0.0 17-18|0.1.0.1 18-19|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.099560 ::parser eager_oracle ::smatch 0.9538461538461539 ::n_actions 85
# ::node	0	and	6-7
# ::node	0.0	record-01	15-16
# ::node	0.0.0	result-01	18-19
# ::node	0.0.0.0	all	2-3
# ::node	0.0.0.1	include-91	3-4
# ::node	0.0.0.1.0	about	7-8
# ::node	0.0.0.1.0.0	percentage-entity	9-10
# ::node	0.0.0.1.0.0.0	0.5	8-9
# ::node	0.0.0.2	person	0-1
# ::node	0.0.0.2.0	name	0-1
# ::node	0.0.0.2.0.0	joe	0-1
# ::node	0.1	record-01	1-2
# ::node	0.1.0	thing	5-6
# ::node	0.1.0.0	result-01	5-6
# ::node	0.1.0.1	wrong-04	17-18
# ::node	0.1.1	accidental	14-15
# ::root	0	and
# ::edge	about	op1	percentage-entity	0.0.0.1.0	0.0.0.1.0.0
# ::edge	and	op1	record-01	0	0.0
# ::edge	and	op2	record-01	0	0.1
# ::edge	include-91	ARG2	about	0.0.0.1	0.0.0.1.0
# ::edge	name	op1	joe	0.0.0.2.0	0.0.0.2.0.0
# ::edge	percentage-entity	value	0.5	0.0.0.1.0.0	0.0.0.1.0.0.0
# ::edge	person	name	name	0.0.0.2	0.0.0.2.0
# ::edge	record-01	ARG0	person	0.0	0.0.0.2
# ::edge	record-01	ARG0	person	0.1	0.0.0.2
# ::edge	record-01	ARG1	result-01	0.0	0.0.0
# ::edge	record-01	ARG1	thing	0.1	0.1.0
# ::edge	record-01	manner	accidental	0.1	0.1.1
# ::edge	result-01	ARG1	person	0.0.0	0.0.0.2
# ::edge	result-01	ARG2	include-91	0.0.0	0.0.0.1
# ::edge	result-01	mod	all	0.0.0	0.0.0.0
# ::edge	thing	ARG2-of	result-01	0.1.0	0.1.0.0
# ::edge	thing	ARG2-of	wrong-04	0.1.0	0.1.0.1
(MRPNode-0 / and :op1 (MRPNode-1 / record-01 :ARG1 (MRPNode-2 / result-01 :mod (MRPNode-3 / all) :ARG2 (MRPNode-4 / include-91 :ARG2 (MRPNode-5 / about :op1 (MRPNode-6 / percentage-entity :value 0.5))) :ARG1 (MRPNode-7 / person :name (MRPNode-8 / name :op1 joe))) :ARG0 MRPNode-7) :op2 (MRPNode-9 / record-01 :ARG0 MRPNode-7 :ARG1 (MRPNode-10 / thing :ARG2-of (MRPNode-11 / result-01) :ARG2-of (MRPNode-12 / wrong-04)) :manner (MRPNode-13 / accidental)))

# ::id 361
# ::snt Bayes' theorem is useful in evaluating the result of drug tests.
# ::tok Bayes ' theorem is useful in evaluating the result of drug tests .
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 2-3|0.0 4-5|0 6-7|0.1 8-9|0.1.0+0.1.0.0 10-11|0.1.0.0.0.0 11-12|0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.107821 ::parser eager_oracle ::smatch 1.0 ::n_actions 42
# ::node	0	useful-05	4-5
# ::node	0.0	theorem	2-3
# ::node	0.0.0	person	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	bayes	0-1
# ::node	0.1	evaluate-01	6-7
# ::node	0.1.0	thing	8-9
# ::node	0.1.0.0	result-01	8-9
# ::node	0.1.0.0.0	test-01	11-12
# ::node	0.1.0.0.0.0	drug	10-11
# ::root	0	useful-05
# ::edge	evaluate-01	ARG0	theorem	0.1	0.0
# ::edge	evaluate-01	ARG1	thing	0.1	0.1.0
# ::edge	name	op1	bayes	0.0.0.0	0.0.0.0.0
# ::edge	person	name	name	0.0.0	0.0.0.0
# ::edge	result-01	ARG1	test-01	0.1.0.0	0.1.0.0.0
# ::edge	test-01	ARG2	drug	0.1.0.0.0	0.1.0.0.0.0
# ::edge	theorem	poss	person	0.0	0.0.0
# ::edge	thing	ARG2-of	result-01	0.1.0	0.1.0.0
# ::edge	useful-05	ARG1	theorem	0	0.0
# ::edge	useful-05	ARG2	evaluate-01	0	0.1
(MRPNode-0 / useful-05 :ARG1 (MRPNode-1 / theorem :poss (MRPNode-2 / person :name (MRPNode-3 / name :op1 bayes))) :ARG2 (MRPNode-4 / evaluate-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-5 / thing :ARG2-of (MRPNode-6 / result-01 :ARG1 (MRPNode-7 / test-01 :ARG2 (MRPNode-8 / drug))))))

# ::id 362
# ::snt Dangling, links to a page which has no links to others.
# ::tok Dangling , links to a page which has no links to others .
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 2-3|0.0 5-6|0.0.0 8-9|0.0.0.0.0 9-10|0.0.0.0 11-12|0.0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.115820 ::parser eager_oracle ::smatch 0.7333333333333334 ::n_actions 32
# ::node	0	say-01	
# ::node	0.0	link-01	2-3
# ::node	0.0.0	page	5-6
# ::node	0.0.0.0	link-01	9-10
# ::node	0.0.0.0.0	-	8-9
# ::node	0.0.0.0.1	other	11-12
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	dangle	0-1
# ::root	0	say-01
# ::edge	link-01	ARG2	other	0.0.0.0	0.0.0.0.1
# ::edge	link-01	ARG2	page	0.0	0.0.0
# ::edge	link-01	polarity	-	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	dangle	0.1.0	0.1.0.0
# ::edge	page	ARG0-of	link-01	0.0.0	0.0.0.0
# ::edge	person	name	name	0.1	0.1.0
# ::edge	say-01	ARG1	link-01	0	0.0
# ::edge	say-01	ARG2	person	0	0.1
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / link-01 :ARG2 (MRPNode-2 / page :ARG0-of (MRPNode-3 / link-01 :polarity - :ARG2 (MRPNode-4 / other)))) :ARG2 (MRPNode-5 / person :name (MRPNode-6 / name :op1 dangle)))

# ::id 363
# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
# ::tok In vector space model , the documents from which the information is to be retrieved are represented as vectors .
# ::alignments 1-2|0.2.0.0 2-3|0.2.0 3-4|0.2 6-7|0.0 10-11|0.0.0.0 14-15|0.0.0 16-17|0 18-19|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.128767 ::parser eager_oracle ::smatch 1.0 ::n_actions 46
# ::node	0	represent-01	16-17
# ::node	0.0	document	6-7
# ::node	0.0.0	retrieve-01	14-15
# ::node	0.0.0.0	information	10-11
# ::node	0.1	vector	18-19
# ::node	0.2	model-01	3-4
# ::node	0.2.0	space	2-3
# ::node	0.2.0.0	vector	1-2
# ::root	0	represent-01
# ::edge	document	ARG1-of	retrieve-01	0.0	0.0.0
# ::edge	model-01	ARG2	space	0.2	0.2.0
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	represent-01	location	model-01	0	0.2
# ::edge	retrieve-01	ARG1	information	0.0.0	0.0.0.0
# ::edge	space	mod	vector	0.2.0	0.2.0.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document :ARG1-of (MRPNode-2 / retrieve-01 :ARG1 (MRPNode-3 / information))) :ARG2 (MRPNode-4 / vector) :location (MRPNode-5 / model-01 :ARG2 (MRPNode-6 / space :mod (MRPNode-7 / vector))))

# ::id 364
# ::snt Vector space representation results in the loss of the order which the terms are in the document.
# ::tok Vector space representation results in the loss of the order which the terms are in the document .
# ::alignments 0-1|0.0.0.0 1-2|0.0.0 2-3|0.0 3-4|0 9-10|0.1.0 12-13|0.1.0.0 16-17|0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.136007 ::parser eager_oracle ::smatch 0.8666666666666666 ::n_actions 40
# ::node	0	result-01	3-4
# ::node	0.0	represent-01	2-3
# ::node	0.0.0	space	1-2
# ::node	0.0.0.0	vector	0-1
# ::node	0.1	lose-02	
# ::node	0.1.0	order	9-10
# ::node	0.1.0.0	term	12-13
# ::node	0.1.0.0.0	document	16-17
# ::root	0	result-01
# ::edge	lose-02	ARG1	order	0.1	0.1.0
# ::edge	order	location-of	term	0.1.0	0.1.0.0
# ::edge	represent-01	ARG1	space	0.0	0.0.0
# ::edge	result-01	ARG1	represent-01	0	0.0
# ::edge	result-01	ARG2	lose-02	0	0.1
# ::edge	space	mod	vector	0.0.0	0.0.0.0
# ::edge	term	location	document	0.1.0.0	0.1.0.0.0
(MRPNode-0 / result-01 :ARG1 (MRPNode-1 / represent-01 :ARG1 (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG2 (MRPNode-4 / lose-02 :ARG1 (MRPNode-5 / order :location-of (MRPNode-6 / term :location (MRPNode-7 / document)))))

# ::id 365
# ::snt Finally, the order in which the terms appear in the document is lost in the vector space representation.
# ::tok Finally , the order in which the terms appear in the document is lost in the vector space representation .
# ::alignments 0-1|0.2 3-4|0.0 7-8|0.0.0.0 8-9|0.0.0 11-12|0.0.0.1 13-14|0 16-17|0.1.0.0 17-18|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.145630 ::parser eager_oracle ::smatch 0.8823529411764706 ::n_actions 45
# ::node	0	lose-02	13-14
# ::node	0.0	order	3-4
# ::node	0.0.0	appear-01	8-9
# ::node	0.0.0.0	term	7-8
# ::node	0.0.0.1	document	11-12
# ::node	0.1	enter-02	
# ::node	0.1.0	space	17-18
# ::node	0.1.0.0	vector	16-17
# ::node	0.2	final	0-1
# ::root	0	lose-02
# ::edge	appear-01	ARG1	term	0.0.0	0.0.0.0
# ::edge	appear-01	location	document	0.0.0	0.0.0.1
# ::edge	enter-02	ARG1	space	0.1	0.1.0
# ::edge	lose-02	ARG1	order	0	0.0
# ::edge	lose-02	mod	enter-02	0	0.1
# ::edge	lose-02	mod	final	0	0.2
# ::edge	order	time-of	appear-01	0.0	0.0.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / lose-02 :ARG1 (MRPNode-1 / order :time-of (MRPNode-2 / appear-01 :ARG1 (MRPNode-3 / term) :location (MRPNode-4 / document))) :mod (MRPNode-5 / enter-02 :ARG1 (MRPNode-6 / space :mod (MRPNode-7 / vector))) :mod (MRPNode-8 / final))

# ::id 366
# ::snt Each document is a vector where each word is a dimension.
# ::tok Each document is a vector where each word is a dimension .
# ::alignments 0-1|0.0.0 1-2|0.0 4-5|0 6-7|0.1.0.0 7-8|0.1.0 10-11|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.151386 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	vector	4-5
# ::node	0.0	document	1-2
# ::node	0.0.0	each	0-1
# ::node	0.1	dimension	10-11
# ::node	0.1.0	word	7-8
# ::node	0.1.0.0	each	6-7
# ::root	0	vector
# ::edge	dimension	domain	word	0.1	0.1.0
# ::edge	document	mod	each	0.0	0.0.0
# ::edge	vector	domain	document	0	0.0
# ::edge	vector	location-of	dimension	0	0.1
# ::edge	word	mod	each	0.1.0	0.1.0.0
(MRPNode-0 / vector :domain (MRPNode-1 / document :mod (MRPNode-2 / each)) :location-of (MRPNode-3 / dimension :domain (MRPNode-4 / word :mod (MRPNode-5 / each))))

# ::id 367
# ::snt In this classic model the term specific weights in the document vectors are products of local and global parameters.
# ::tok In this classic model the term specific weights in the document vectors are products of local and global parameters .
# ::alignments 1-2|0.2.0 2-3|0.2.1 3-4|0.2 5-6|0.0+0.0.0.0 6-7|0.0.0 10-11|0.0.1.0 11-12|0.0.1 13-14|0 15-16|0.1.0.0 16-17|0.1 17-18|0.1.1.0 18-19|0.1.0+0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.170796 ::parser eager_oracle ::smatch 1.0 ::n_actions 69
# ::node	0	produce-01	13-14
# ::node	0.0	term	5-6
# ::node	0.0.0	specific-02	6-7
# ::node	0.0.0.0	term	5-6
# ::node	0.0.1	vector	11-12
# ::node	0.0.1.0	document	10-11
# ::node	0.1	and	16-17
# ::node	0.1.0	parameter	18-19
# ::node	0.1.0.0	local-02	15-16
# ::node	0.1.1	parameter	18-19
# ::node	0.1.1.0	globe	17-18
# ::node	0.2	model	3-4
# ::node	0.2.0	this	1-2
# ::node	0.2.1	classic	2-3
# ::root	0	produce-01
# ::edge	and	op1	parameter	0.1	0.1.0
# ::edge	and	op2	parameter	0.1	0.1.1
# ::edge	model	mod	classic	0.2	0.2.1
# ::edge	model	mod	this	0.2	0.2.0
# ::edge	parameter	ARG1-of	local-02	0.1.0	0.1.0.0
# ::edge	parameter	mod	globe	0.1.1	0.1.1.0
# ::edge	produce-01	ARG1	term	0	0.0
# ::edge	produce-01	ARG2	and	0	0.1
# ::edge	produce-01	location	model	0	0.2
# ::edge	specific-02	ARG2	term	0.0.0	0.0.0.0
# ::edge	term	ARG1-of	specific-02	0.0	0.0.0
# ::edge	term	location	vector	0.0	0.0.1
# ::edge	vector	mod	document	0.0.1	0.0.1.0
(MRPNode-0 / produce-01 :ARG1 (MRPNode-1 / term :ARG1-of (MRPNode-2 / specific-02 :ARG2 (MRPNode-3 / term)) :location (MRPNode-4 / vector :mod (MRPNode-5 / document))) :ARG2 (MRPNode-6 / and :op1 (MRPNode-7 / parameter :ARG1-of (MRPNode-8 / local-02)) :op2 (MRPNode-9 / parameter :mod (MRPNode-10 / globe))) :location (MRPNode-11 / model :mod (MRPNode-12 / this) :mod (MRPNode-13 / classic)))

# ::id 368
# ::snt Bayes' theorem is useful in evaluating the result of drug tests.
# ::tok Bayes ' theorem is useful in evaluating the result of drug tests .
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 2-3|0.0 4-5|0 6-7|0.1 8-9|0.1.0+0.1.0.0 10-11|0.1.0.0.0.0 11-12|0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.178964 ::parser eager_oracle ::smatch 1.0 ::n_actions 42
# ::node	0	useful-05	4-5
# ::node	0.0	theorem	2-3
# ::node	0.0.0	person	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	bayes	0-1
# ::node	0.1	evaluate-01	6-7
# ::node	0.1.0	thing	8-9
# ::node	0.1.0.0	result-01	8-9
# ::node	0.1.0.0.0	test-01	11-12
# ::node	0.1.0.0.0.0	drug	10-11
# ::root	0	useful-05
# ::edge	evaluate-01	ARG0	theorem	0.1	0.0
# ::edge	evaluate-01	ARG1	thing	0.1	0.1.0
# ::edge	name	op1	bayes	0.0.0.0	0.0.0.0.0
# ::edge	person	name	name	0.0.0	0.0.0.0
# ::edge	result-01	ARG1	test-01	0.1.0.0	0.1.0.0.0
# ::edge	test-01	ARG2	drug	0.1.0.0.0	0.1.0.0.0.0
# ::edge	theorem	poss	person	0.0	0.0.0
# ::edge	thing	ARG2-of	result-01	0.1.0	0.1.0.0
# ::edge	useful-05	ARG1	theorem	0	0.0
# ::edge	useful-05	ARG2	evaluate-01	0	0.1
(MRPNode-0 / useful-05 :ARG1 (MRPNode-1 / theorem :poss (MRPNode-2 / person :name (MRPNode-3 / name :op1 bayes))) :ARG2 (MRPNode-4 / evaluate-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-5 / thing :ARG2-of (MRPNode-6 / result-01 :ARG1 (MRPNode-7 / test-01 :ARG2 (MRPNode-8 / drug))))))

# ::id 369
# ::snt If a term appears in the document, the terms value in the vector is non-zero.
# ::tok If a term appears in the document , the terms value in the vector is non - zero .
# ::alignments 2-3|0.1.0 3-4|0.1 6-7|0.1.1 10-11|0.0.1 13-14|0.0.1.0 15-16|0.0.0 17-18|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.188756 ::parser eager_oracle ::smatch 0.7857142857142856 ::n_actions 41
# ::node	0	have-condition-91	
# ::node	0.0	zero	17-18
# ::node	0.0.0	-	15-16
# ::node	0.0.1	value	10-11
# ::node	0.0.1.0	vector	13-14
# ::node	0.1	appear-01	3-4
# ::node	0.1.0	term	2-3
# ::node	0.1.1	document	6-7
# ::root	0	have-condition-91
# ::edge	appear-01	ARG1	term	0.1	0.1.0
# ::edge	appear-01	location	document	0.1	0.1.1
# ::edge	have-condition-91	ARG1	zero	0	0.0
# ::edge	have-condition-91	ARG2	appear-01	0	0.1
# ::edge	value	location	vector	0.0.1	0.0.1.0
# ::edge	zero	domain	value	0.0	0.0.1
# ::edge	zero	polarity	-	0.0	0.0.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / zero :polarity - :domain (MRPNode-2 / value :location (MRPNode-3 / vector))) :ARG2 (MRPNode-4 / appear-01 :ARG1 (MRPNode-5 / term) :location (MRPNode-6 / document)))

# ::id 370
# ::snt In order to prevent spamming, Google releases little information on the way in which a PageRank is calculated.
# ::tok In order to prevent spamming , Google releases little information on the way in which a PageRank is calculated .
# ::alignments 3-4|0.2 6-7|0.1+0.1.0+0.1.0.0 7-8|0 8-9|0.0.0 9-10|0.0 16-17|0.0.1.0.0+0.0.1.0.0.0+0.0.1.0.0.0.0 18-19|0.0.1+0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.202180 ::parser eager_oracle ::smatch 0.9583333333333334 ::n_actions 49
# ::node	0	release-01	7-8
# ::node	0.0	information	9-10
# ::node	0.0.0	little	8-9
# ::node	0.0.1	thing	18-19
# ::node	0.0.1.0	calculate-01	18-19
# ::node	0.0.1.0.0	publication	16-17
# ::node	0.0.1.0.0.0	name	16-17
# ::node	0.0.1.0.0.0.0	pagerank	16-17
# ::node	0.1	company	6-7
# ::node	0.1.0	name	6-7
# ::node	0.1.0.0	google	6-7
# ::node	0.2	prevent-01	3-4
# ::node	0.2.0	skim-01	
# ::root	0	release-01
# ::edge	calculate-01	ARG1	publication	0.0.1.0	0.0.1.0.0
# ::edge	company	name	name	0.1	0.1.0
# ::edge	information	quant	little	0.0	0.0.0
# ::edge	information	topic	thing	0.0	0.0.1
# ::edge	name	op1	google	0.1.0	0.1.0.0
# ::edge	name	op1	pagerank	0.0.1.0.0.0	0.0.1.0.0.0.0
# ::edge	prevent-01	ARG0	company	0.2	0.1
# ::edge	prevent-01	ARG1	skim-01	0.2	0.2.0
# ::edge	publication	name	name	0.0.1.0.0	0.0.1.0.0.0
# ::edge	release-01	ARG0	company	0	0.1
# ::edge	release-01	ARG1	information	0	0.0
# ::edge	release-01	purpose	prevent-01	0	0.2
# ::edge	thing	manner-of	calculate-01	0.0.1	0.0.1.0
(MRPNode-0 / release-01 :ARG1 (MRPNode-1 / information :quant (MRPNode-2 / little) :topic (MRPNode-3 / thing :manner-of (MRPNode-4 / calculate-01 :ARG1 (MRPNode-5 / publication :name (MRPNode-6 / name :op1 pagerank))))) :ARG0 (MRPNode-7 / company :name (MRPNode-8 / name :op1 google)) :purpose (MRPNode-9 / prevent-01 :ARG0 MRPNode-7 :ARG1 (MRPNode-10 / skim-01)))

# ::id 371
# ::snt P(A), or the probability that the student is a girl regardless of any other information.
# ::tok P ( A ) , or the probability that the student is a girl regardless of any other information .
# ::alignments 5-6|0 7-8|0.1 10-11|0.1.0.0+0.1.0.0.0 13-14|0.1.0 14-15|0.1.1 16-17|0.1.1.0.1 17-18|0.1.1.0.0 18-19|0.1.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.210613 ::parser eager_oracle ::smatch 0.9473684210526316 ::n_actions 50
# ::node	0	or	5-6
# ::node	0.0	exemplify-01	
# ::node	0.1	probable	7-8
# ::node	0.1.0	girl	13-14
# ::node	0.1.0.0	person	10-11
# ::node	0.1.0.0.0	study-01	10-11
# ::node	0.1.1	regardless-91	14-15
# ::node	0.1.1.0	information	18-19
# ::node	0.1.1.0.0	other	17-18
# ::node	0.1.1.0.1	any	16-17
# ::root	0	or
# ::edge	girl	domain	person	0.1.0	0.1.0.0
# ::edge	information	mod	any	0.1.1.0	0.1.1.0.1
# ::edge	information	mod	other	0.1.1.0	0.1.1.0.0
# ::edge	or	op1	exemplify-01	0	0.0
# ::edge	or	op2	probable	0	0.1
# ::edge	person	ARG0-of	study-01	0.1.0.0	0.1.0.0.0
# ::edge	probable	ARG1-of	regardless-91	0.1	0.1.1
# ::edge	probable	domain	girl	0.1	0.1.0
# ::edge	regardless-91	ARG2	information	0.1.1	0.1.1.0
(MRPNode-0 / or :op1 (MRPNode-1 / exemplify-01) :op2 (MRPNode-2 / probable :domain (MRPNode-3 / girl :domain (MRPNode-4 / person :ARG0-of (MRPNode-5 / study-01))) :ARG1-of (MRPNode-6 / regardless-91 :ARG2 (MRPNode-7 / information :mod (MRPNode-8 / other) :mod (MRPNode-9 / any)))))

# ::id 372
# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
# ::tok In vector space model , the documents from which the information is to be retrieved are represented as vectors .
# ::alignments 1-2|0.2.0.0 2-3|0.2.0 3-4|0.2 6-7|0.0 10-11|0.0.0.0 14-15|0.0.0 16-17|0 18-19|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.223137 ::parser eager_oracle ::smatch 1.0 ::n_actions 46
# ::node	0	represent-01	16-17
# ::node	0.0	document	6-7
# ::node	0.0.0	retrieve-01	14-15
# ::node	0.0.0.0	information	10-11
# ::node	0.1	vector	18-19
# ::node	0.2	model-01	3-4
# ::node	0.2.0	space	2-3
# ::node	0.2.0.0	vector	1-2
# ::root	0	represent-01
# ::edge	document	ARG1-of	retrieve-01	0.0	0.0.0
# ::edge	model-01	ARG2	space	0.2	0.2.0
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	represent-01	location	model-01	0	0.2
# ::edge	retrieve-01	ARG1	information	0.0.0	0.0.0.0
# ::edge	space	mod	vector	0.2.0	0.2.0.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document :ARG1-of (MRPNode-2 / retrieve-01 :ARG1 (MRPNode-3 / information))) :ARG2 (MRPNode-4 / vector) :location (MRPNode-5 / model-01 :ARG2 (MRPNode-6 / space :mod (MRPNode-7 / vector))))

# ::id 373
# ::snt A term which occurs in the document has a value in the vector of non-zero.
# ::tok A term which occurs in the document has a value in the vector of non - zero .
# ::alignments 1-2|0.0 6-7|0.0.0 9-10|0 12-13|0.1 14-15|0.1.0.0 16-17|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.228957 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	value-01	9-10
# ::node	0.0	term	1-2
# ::node	0.0.0	document	6-7
# ::node	0.1	vector	12-13
# ::node	0.1.0	zero	16-17
# ::node	0.1.0.0	-	14-15
# ::root	0	value-01
# ::edge	term	location	document	0.0	0.0.0
# ::edge	value-01	ARG1	term	0	0.0
# ::edge	value-01	location	vector	0	0.1
# ::edge	vector	consist-of	zero	0.1	0.1.0
# ::edge	zero	polarity	-	0.1.0	0.1.0.0
(MRPNode-0 / value-01 :ARG1 (MRPNode-1 / term :location (MRPNode-2 / document)) :location (MRPNode-3 / vector :consist-of (MRPNode-4 / zero :polarity -)))

# ::id 374
# ::snt Inheritance is one of the basic concepts of Object Oriented Programming.
# ::tok Inheritance is one of the basic concepts of Object Oriented Programming .
# ::alignments 3-4|0.0 5-6|0.0.0.0 6-7|0+0.0.0 8-9|0.0.0.1.0.0 10-11|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.234963 ::parser eager_oracle ::smatch 0.7692307692307693 ::n_actions 34
# ::node	0	concept	6-7
# ::node	0.0	include-91	3-4
# ::node	0.0.0	concept	6-7
# ::node	0.0.0.0	basic	5-6
# ::node	0.0.0.1	program-01	10-11
# ::node	0.0.0.1.0	integrate-01	
# ::node	0.0.0.1.0.0	object	8-9
# ::node	0.1	influence-01	
# ::root	0	concept
# ::edge	concept	ARG1-of	include-91	0	0.0
# ::edge	concept	domain	influence-01	0	0.1
# ::edge	concept	mod	basic	0.0.0	0.0.0.0
# ::edge	concept	part-of	program-01	0.0.0	0.0.0.1
# ::edge	include-91	ARG2	concept	0.0	0.0.0
# ::edge	integrate-01	ARG2	object	0.0.0.1.0	0.0.0.1.0.0
# ::edge	program-01	ARG1-of	integrate-01	0.0.0.1	0.0.0.1.0
(MRPNode-0 / concept :ARG1-of (MRPNode-1 / include-91 :ARG2 (MRPNode-2 / concept :mod (MRPNode-3 / basic) :part-of (MRPNode-4 / program-01 :ARG1-of (MRPNode-5 / integrate-01 :ARG2 (MRPNode-6 / object))))) :domain (MRPNode-7 / influence-01))

# ::id 375
# ::snt In Java all attributes and methods are implicitly virtual.
# ::tok In Java all attributes and methods are implicitly virtual .
# ::alignments 1-2|0.2+0.2.0+0.2.0.0 2-3|0.1.1 3-4|0.1.0 4-5|0.1 5-6|0.1.2 7-8|0.0 8-9|0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.240111 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	virtual	8-9
# ::node	0.0	implicitly	7-8
# ::node	0.1	and	4-5
# ::node	0.1.0	attribute-01	3-4
# ::node	0.1.1	all	2-3
# ::node	0.1.2	method	5-6
# ::node	0.2	product	1-2
# ::node	0.2.0	name	1-2
# ::node	0.2.0.0	java	1-2
# ::root	0	virtual
# ::edge	and	op1	attribute-01	0.1	0.1.0
# ::edge	and	op2	all	0.1	0.1.1
# ::edge	and	op2	method	0.1	0.1.2
# ::edge	name	op1	java	0.2.0	0.2.0.0
# ::edge	product	name	name	0.2	0.2.0
# ::edge	virtual	domain	and	0	0.1
# ::edge	virtual	domain	implicitly	0	0.0
# ::edge	virtual	location	product	0	0.2
(MRPNode-0 / virtual :domain (MRPNode-1 / implicitly) :domain (MRPNode-2 / and :op1 (MRPNode-3 / attribute-01) :op2 (MRPNode-4 / all) :op2 (MRPNode-5 / method)) :location (MRPNode-6 / product :name (MRPNode-7 / name :op1 java)))

# ::id 376
# ::snt The vector space model are the documents which are represented as “bags of words”.
# ::tok The vector space model are the documents which are represented as " bags of words " .
# ::alignments 1-2|0.1.0.0 2-3|0.1.0 3-4|0.1 6-7|0 9-10|0.0 12-13|0.0.0 14-15|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.246414 ::parser eager_oracle ::smatch 1.0 ::n_actions 40
# ::node	0	document	6-7
# ::node	0.0	represent-01	9-10
# ::node	0.0.0	bag	12-13
# ::node	0.0.0.0	word	14-15
# ::node	0.1	model	3-4
# ::node	0.1.0	space	2-3
# ::node	0.1.0.0	vector	1-2
# ::root	0	document
# ::edge	bag	consist-of	word	0.0.0	0.0.0.0
# ::edge	document	ARG1-of	represent-01	0	0.0
# ::edge	document	domain	model	0	0.1
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	represent-01	ARG2	bag	0.0	0.0.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / document :ARG1-of (MRPNode-1 / represent-01 :ARG2 (MRPNode-2 / bag :consist-of (MRPNode-3 / word))) :domain (MRPNode-4 / model :mod (MRPNode-5 / space :mod (MRPNode-6 / vector))))

# ::id 377
# ::snt In object oriented programming inheritance is also dependant on access level modifiers.
# ::tok In object oriented programming inheritance is also dependant on access level modifiers .
# ::alignments 1-2|0.3.0.0 2-3|0.3.0 3-4|0.3 4-5|0.1 6-7|0.2 7-8|0 9-10|0.0.0.0 10-11|0.0.0 11-12|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.255112 ::parser eager_oracle ::smatch 1.0 ::n_actions 42
# ::node	0	depend-01	7-8
# ::node	0.0	modifier	11-12
# ::node	0.0.0	level	10-11
# ::node	0.0.0.0	access-01	9-10
# ::node	0.1	inherit-01	4-5
# ::node	0.2	also	6-7
# ::node	0.3	program-01	3-4
# ::node	0.3.0	orient-01	2-3
# ::node	0.3.0.0	object	1-2
# ::root	0	depend-01
# ::edge	depend-01	ARG0	inherit-01	0	0.1
# ::edge	depend-01	ARG1	modifier	0	0.0
# ::edge	depend-01	location	program-01	0	0.3
# ::edge	depend-01	mod	also	0	0.2
# ::edge	level	mod	access-01	0.0.0	0.0.0.0
# ::edge	modifier	mod	level	0.0	0.0.0
# ::edge	orient-01	ARG2	object	0.3.0	0.3.0.0
# ::edge	program-01	ARG2	orient-01	0.3	0.3.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / modifier :mod (MRPNode-2 / level :mod (MRPNode-3 / access-01))) :ARG0 (MRPNode-4 / inherit-01) :mod (MRPNode-5 / also) :location (MRPNode-6 / program-01 :ARG2 (MRPNode-7 / orient-01 :ARG2 (MRPNode-8 / object))))

# ::id 378
# ::snt The value of a vector is non-zero if a term occurs in the document.
# ::tok The value of a vector is non - zero if a term occurs in the document .
# ::alignments 1-2|0.0.1+0.0.1.0 2-3|0 4-5|0.0.1.0.0 6-7|0.0.0 8-9|0.0.2 11-12|0.1.0 13-14|0.1 15-16|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.264900 ::parser eager_oracle ::smatch 0.7878787878787878 ::n_actions 45
# ::node	0	have-condition-91	2-3
# ::node	0.0	equal-01	
# ::node	0.0.0	-	6-7
# ::node	0.0.1	thing	1-2
# ::node	0.0.1.0	value-01	1-2
# ::node	0.0.1.0.0	vector	4-5
# ::node	0.0.2	zero	8-9
# ::node	0.1	be-located-at-91	13-14
# ::node	0.1.0	term	11-12
# ::node	0.1.1	document	15-16
# ::root	0	have-condition-91
# ::edge	be-located-at-91	ARG1	term	0.1	0.1.0
# ::edge	be-located-at-91	ARG2	document	0.1	0.1.1
# ::edge	equal-01	ARG1	thing	0.0	0.0.1
# ::edge	equal-01	ARG2	zero	0.0	0.0.2
# ::edge	equal-01	polarity	-	0.0	0.0.0
# ::edge	have-condition-91	ARG1	equal-01	0	0.0
# ::edge	have-condition-91	ARG2	be-located-at-91	0	0.1
# ::edge	thing	ARG2-of	value-01	0.0.1	0.0.1.0
# ::edge	value-01	ARG1	vector	0.0.1.0	0.0.1.0.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / equal-01 :polarity - :ARG1 (MRPNode-2 / thing :ARG2-of (MRPNode-3 / value-01 :ARG1 (MRPNode-4 / vector))) :ARG2 (MRPNode-5 / zero)) :ARG2 (MRPNode-6 / be-located-at-91 :ARG1 (MRPNode-7 / term) :ARG2 (MRPNode-8 / document)))

# ::id 379
# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
# ::tok In vector space model , the documents from which the information is to be retrieved are represented as vectors .
# ::alignments 1-2|0.2.0.0 2-3|0.2.0 3-4|0.2 6-7|0.0 10-11|0.0.0.0 14-15|0.0.0 16-17|0 18-19|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.277364 ::parser eager_oracle ::smatch 1.0 ::n_actions 46
# ::node	0	represent-01	16-17
# ::node	0.0	document	6-7
# ::node	0.0.0	retrieve-01	14-15
# ::node	0.0.0.0	information	10-11
# ::node	0.1	vector	18-19
# ::node	0.2	model-01	3-4
# ::node	0.2.0	space	2-3
# ::node	0.2.0.0	vector	1-2
# ::root	0	represent-01
# ::edge	document	ARG1-of	retrieve-01	0.0	0.0.0
# ::edge	model-01	ARG2	space	0.2	0.2.0
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	represent-01	location	model-01	0	0.2
# ::edge	retrieve-01	ARG1	information	0.0.0	0.0.0.0
# ::edge	space	mod	vector	0.2.0	0.2.0.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document :ARG1-of (MRPNode-2 / retrieve-01 :ARG1 (MRPNode-3 / information))) :ARG2 (MRPNode-4 / vector) :location (MRPNode-5 / model-01 :ARG2 (MRPNode-6 / space :mod (MRPNode-7 / vector))))

# ::id 380
# ::snt A document has representation as a vector.
# ::tok A document has representation as a vector .
# ::alignments 1-2|0.1 2-3|0 3-4|0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.279797 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	have-03	2-3
# ::node	0.0	representation-02	3-4
# ::node	0.0.0	vector	6-7
# ::node	0.1	document	1-2
# ::root	0	have-03
# ::edge	have-03	ARG0	document	0	0.1
# ::edge	have-03	ARG1	representation-02	0	0.0
# ::edge	representation-02	manner	vector	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / representation-02 :manner (MRPNode-2 / vector)) :ARG0 (MRPNode-3 / document))

# ::id 381
# ::snt However, the key in Dynamic Programming is to determine the structure of optimal solutions.
# ::tok However , the key in Dynamic Programming is to determine the structure of optimal solutions .
# ::alignments 3-4|0.0 6-7|0.0.1 9-10|0.0.0 11-12|0.0.0.0 13-14|0.0.0.0.0.0 14-15|0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.287231 ::parser eager_oracle ::smatch 0.7857142857142857 ::n_actions 36
# ::node	0	contrast-01	
# ::node	0.0	key-02	3-4
# ::node	0.0.0	determine-01	9-10
# ::node	0.0.0.0	structure-01	11-12
# ::node	0.0.0.0.0	solution	14-15
# ::node	0.0.0.0.0.0	optimal	13-14
# ::node	0.0.1	program-01	6-7
# ::node	0.0.1.0	philosophy	
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	key-02	0	0.0
# ::edge	determine-01	ARG1	structure-01	0.0.0	0.0.0.0
# ::edge	key-02	ARG1	determine-01	0.0	0.0.0
# ::edge	key-02	ARG2	program-01	0.0	0.0.1
# ::edge	program-01	mod	philosophy	0.0.1	0.0.1.0
# ::edge	solution	mod	optimal	0.0.0.0.0	0.0.0.0.0.0
# ::edge	structure-01	ARG1	solution	0.0.0.0	0.0.0.0.0
(MRPNode-0 / contrast-01 :ARG2 (MRPNode-1 / key-02 :ARG1 (MRPNode-2 / determine-01 :ARG1 (MRPNode-3 / structure-01 :ARG1 (MRPNode-4 / solution :mod (MRPNode-5 / optimal)))) :ARG2 (MRPNode-6 / program-01 :mod (MRPNode-7 / philosophy))))

# ::id 382
# ::snt If the term doesn’t occur within the document, the value in the vector is zero.
# ::tok If the term does n't occur within the document , the value in the vector is zero .
# ::alignments 2-3|0.1.1 4-5|0.1.0 6-7|0.1.2 8-9|0.1.2.0 11-12|0.0 12-13|0.1 14-15|0.0.0 16-17|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.293854 ::parser eager_oracle ::smatch 0.7272727272727272 ::n_actions 44
# ::node	0	have-condition-91	
# ::node	0.0	value	11-12
# ::node	0.0.0	vector	14-15
# ::node	0.0.1	zero	16-17
# ::node	0.1	be-located-at-91	12-13
# ::node	0.1.0	-	4-5
# ::node	0.1.1	term	2-3
# ::node	0.1.2	within	6-7
# ::node	0.1.2.0	document	8-9
# ::root	0	have-condition-91
# ::edge	be-located-at-91	ARG1	term	0.1	0.1.1
# ::edge	be-located-at-91	ARG2	within	0.1	0.1.2
# ::edge	be-located-at-91	arg2	-	0.1	0.1.0
# ::edge	have-condition-91	ARG1	value	0	0.0
# ::edge	have-condition-91	ARG2	be-located-at-91	0	0.1
# ::edge	value	quant	vector	0.0	0.0.0
# ::edge	value	quant	zero	0.0	0.0.1
# ::edge	within	op1	document	0.1.2	0.1.2.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / value :quant (MRPNode-2 / vector) :quant (MRPNode-3 / zero)) :ARG2 (MRPNode-4 / be-located-at-91 :arg2 - :ARG1 (MRPNode-5 / term) :ARG2 (MRPNode-6 / within :op1 (MRPNode-7 / document))))

# ::id 383
# ::snt The order in which the terms appear in the document is lost in the vector space representation.
# ::tok The order in which the terms appear in the document is lost in the vector space representation .
# ::alignments 1-2|0.0 5-6|0.0.0.0 6-7|0.0.0 9-10|0.0.0.1 11-12|0 14-15|0.1.0.0 15-16|0.1.0 16-17|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.301479 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	lose-02	11-12
# ::node	0.0	order	1-2
# ::node	0.0.0	appear-01	6-7
# ::node	0.0.0.0	term	5-6
# ::node	0.0.0.1	document	9-10
# ::node	0.1	representation-02	16-17
# ::node	0.1.0	space	15-16
# ::node	0.1.0.0	vector	14-15
# ::root	0	lose-02
# ::edge	appear-01	ARG1	term	0.0.0	0.0.0.0
# ::edge	appear-01	location	document	0.0.0	0.0.0.1
# ::edge	lose-02	ARG1	order	0	0.0
# ::edge	lose-02	location	representation-02	0	0.1
# ::edge	order	time-of	appear-01	0.0	0.0.0
# ::edge	representation-02	ARG0	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / lose-02 :ARG1 (MRPNode-1 / order :time-of (MRPNode-2 / appear-01 :ARG1 (MRPNode-3 / term) :location (MRPNode-4 / document))) :location (MRPNode-5 / representation-02 :ARG0 (MRPNode-6 / space :mod (MRPNode-7 / vector))))

# ::id 384
# ::snt It is used in information retrieval and was first used in the SMART Information Retrieval System.
# ::tok It is used in information retrieval and was first used in the SMART Information Retrieval System .
# ::alignments 0-1|0.0.0 2-3|0.1 4-5|0.0.1.0 5-6|0.0.1 6-7|0 9-10|0.0 12-16|0.1.0+0.1.0.0+0.1.0.0.0+0.1.0.0.1+0.1.0.0.2+0.1.0.0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:39.331225 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 45
# ::node	0	and	6-7
# ::node	0.0	use-01	9-10
# ::node	0.0.0	it	0-1
# ::node	0.0.1	retrieve-01	5-6
# ::node	0.0.1.0	information	4-5
# ::node	0.1	use-01	2-3
# ::node	0.1.0	thing	12-16
# ::node	0.1.0.0	name	12-16
# ::node	0.1.0.0.0	smart	12-16
# ::node	0.1.0.0.1	information	12-16
# ::node	0.1.0.0.2	retrieval	12-16
# ::node	0.1.0.0.3	system	12-16
# ::node	0.1.1	ordinal-entity	
# ::node	0.1.1.0	1	
# ::root	0	and
# ::edge	and	op1	use-01	0	0.0
# ::edge	and	op2	use-01	0	0.1
# ::edge	name	op1	smart	0.1.0.0	0.1.0.0.0
# ::edge	name	op2	information	0.1.0.0	0.1.0.0.1
# ::edge	name	op3	retrieval	0.1.0.0	0.1.0.0.2
# ::edge	name	op4	system	0.1.0.0	0.1.0.0.3
# ::edge	ordinal-entity	value	1	0.1.1	0.1.1.0
# ::edge	retrieve-01	ARG1	information	0.0.1	0.0.1.0
# ::edge	thing	name	name	0.1.0	0.1.0.0
# ::edge	use-01	ARG1	it	0.0	0.0.0
# ::edge	use-01	ARG1	it	0.1	0.0.0
# ::edge	use-01	ARG2	retrieve-01	0.0	0.0.1
# ::edge	use-01	ARG2	thing	0.1	0.1.0
# ::edge	use-01	ord	ordinal-entity	0.1	0.1.1
(MRPNode-0 / and :op1 (MRPNode-1 / use-01 :ARG1 (MRPNode-2 / it) :ARG2 (MRPNode-3 / retrieve-01 :ARG1 (MRPNode-4 / information))) :op2 (MRPNode-5 / use-01 :ARG1 MRPNode-2 :ARG2 (MRPNode-6 / thing :name (MRPNode-7 / name :op1 smart :op2 information :op3 retrieval :op4 system)) :ord (MRPNode-8 / ordinal-entity :value 1)))

# ::id 385
# ::snt The vector space model has the following limitations: 1.
# ::tok The vector space model has the following limitations : 1 .
# ::alignments 1-2|0.1.0.0 2-3|0.1.0 3-4|0.1 6-7|0.2 7-8|0 9-10|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.335237 ::parser eager_oracle ::smatch 0.8695652173913043 ::n_actions 31
# ::node	0	limit-01	7-8
# ::node	0.0	1	9-10
# ::node	0.1	model	3-4
# ::node	0.1.0	space	2-3
# ::node	0.1.0.0	vector	1-2
# ::node	0.2	follow-01	6-7
# ::root	0	limit-01
# ::edge	limit-01	ARG1	model	0	0.1
# ::edge	limit-01	ARG1-of	follow-01	0	0.2
# ::edge	limit-01	li	1	0	0.0
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / limit-01 :li 1 :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG1-of (MRPNode-4 / follow-01))

# ::id 386
# ::snt Use these optimal solutions to construct an optimal solution for the original problem.
# ::tok Use these optimal solutions to construct an optimal solution for the original problem .
# ::alignments 0-1|0 1-2|0.0.1 2-3|0.0.0 3-4|0.0+0.0.2 5-6|0.2 7-8|0.2.0.0 8-9|0.2.0+0.2.0.1 11-12|0.2.0.1.0.0 12-13|0.2.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.394144 ::parser eager_oracle ::smatch 0.9361702127659575 ::n_actions 51
# ::node	0	use-01	0-1
# ::node	0.0	thing	3-4
# ::node	0.0.0	optimal	2-3
# ::node	0.0.1	this	1-2
# ::node	0.0.2	solve-01	3-4
# ::node	0.1	you	
# ::node	0.2	construct-01	5-6
# ::node	0.2.0	thing	8-9
# ::node	0.2.0.0	optimal	7-8
# ::node	0.2.0.1	solve-01	8-9
# ::node	0.2.0.1.0	problem	12-13
# ::node	0.2.0.1.0.0	original	11-12
# ::root	0	use-01
# ::edge	construct-01	ARG0	you	0.2	0.1
# ::edge	construct-01	ARG1	thing	0.2	0.2.0
# ::edge	problem	mod	original	0.2.0.1.0	0.2.0.1.0.0
# ::edge	solve-01	ARG1	problem	0.2.0.1	0.2.0.1.0
# ::edge	thing	ARG2-of	solve-01	0.0	0.0.2
# ::edge	thing	ARG2-of	solve-01	0.2.0	0.2.0.1
# ::edge	thing	mod	optimal	0.0	0.0.0
# ::edge	thing	mod	optimal	0.2.0	0.2.0.0
# ::edge	thing	mod	this	0.0	0.0.1
# ::edge	use-01	ARG0	you	0	0.1
# ::edge	use-01	ARG1	thing	0	0.0
# ::edge	use-01	ARG2	construct-01	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / thing :mod (MRPNode-2 / optimal) :mod (MRPNode-3 / this) :ARG2-of (MRPNode-4 / solve-01)) :ARG0 (MRPNode-5 / you) :ARG2 (MRPNode-6 / construct-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-7 / thing :mod (MRPNode-8 / optimal) :ARG2-of (MRPNode-9 / solve-01 :ARG1 (MRPNode-10 / problem :mod (MRPNode-11 / original))))))

# ::id 387
# ::snt The vector space model has several disadvantages.
# ::tok The vector space model has several disadvantages .
# ::alignments 1-2|0.1.0.0 2-3|0.1.0 3-4|0.1 5-6|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:39.397045 ::parser eager_oracle ::smatch 0.5882352941176471 ::n_actions 21
# ::node	0	advantage-01	
# ::node	0.0	-	
# ::node	0.1	model	3-4
# ::node	0.1.0	space	2-3
# ::node	0.1.0.0	vector	1-2
# ::node	0.2	several	5-6
# ::root	0	advantage-01
# ::edge	advantage-01	ARG1	model	0	0.1
# ::edge	advantage-01	ARG3	several	0	0.2
# ::edge	advantage-01	polarity	-	0	0.0
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / advantage-01 :polarity - :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG3 (MRPNode-4 / several))

# ::id 388
# ::snt Finally, the order in which the terms appear in the document is lost in the vector space representation.
# ::tok Finally , the order in which the terms appear in the document is lost in the vector space representation .
# ::alignments 0-1|0.2 3-4|0.0 7-8|0.0.0.0 8-9|0.0.0 11-12|0.0.0.1 13-14|0 16-17|0.1.0.0 17-18|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.406467 ::parser eager_oracle ::smatch 0.8823529411764706 ::n_actions 45
# ::node	0	lose-02	13-14
# ::node	0.0	order	3-4
# ::node	0.0.0	appear-01	8-9
# ::node	0.0.0.0	term	7-8
# ::node	0.0.0.1	document	11-12
# ::node	0.1	enter-02	
# ::node	0.1.0	space	17-18
# ::node	0.1.0.0	vector	16-17
# ::node	0.2	final	0-1
# ::root	0	lose-02
# ::edge	appear-01	ARG1	term	0.0.0	0.0.0.0
# ::edge	appear-01	location	document	0.0.0	0.0.0.1
# ::edge	enter-02	ARG1	space	0.1	0.1.0
# ::edge	lose-02	ARG1	order	0	0.0
# ::edge	lose-02	mod	enter-02	0	0.1
# ::edge	lose-02	mod	final	0	0.2
# ::edge	order	time-of	appear-01	0.0	0.0.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / lose-02 :ARG1 (MRPNode-1 / order :time-of (MRPNode-2 / appear-01 :ARG1 (MRPNode-3 / term) :location (MRPNode-4 / document))) :mod (MRPNode-5 / enter-02 :ARG1 (MRPNode-6 / space :mod (MRPNode-7 / vector))) :mod (MRPNode-8 / final))

# ::id 389
# ::snt Bayes' Theorem is a theorem of probability theory originally stated by the Reverend Thomas Bayes.
# ::tok Bayes ' Theorem is a theorem of probability theory originally stated by the Reverend Thomas Bayes .
# ::alignments 0-3|0.0+0.0.0+0.0.0.0+0.0.0.1 5-6|0 7-8|0.2.0 8-9|0.2 9-10|0.1.1 10-11|0.1 13-14|0.1.0.1+0.1.0.1.0 14-16|0.1.0+0.1.0.0+0.1.0.0.0+0.1.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.465039 ::parser eager_oracle ::smatch 0.9433962264150944 ::n_actions 47
# ::node	0	theorem	5-6
# ::node	0.0	theory	0-3
# ::node	0.0.0	name	0-3
# ::node	0.0.0.0	bayes	0-3
# ::node	0.0.0.1	theorem	0-3
# ::node	0.1	state-01	10-11
# ::node	0.1.0	person	14-16
# ::node	0.1.0.0	name	14-16
# ::node	0.1.0.0.0	thomas	14-16
# ::node	0.1.0.0.1	bayes	14-16
# ::node	0.1.0.1	have-org-role-91	13-14
# ::node	0.1.0.1.0	reverend	13-14
# ::node	0.1.1	original	9-10
# ::node	0.2	theory	8-9
# ::node	0.2.0	probability	7-8
# ::root	0	theorem
# ::edge	have-org-role-91	ARG2	reverend	0.1.0.1	0.1.0.1.0
# ::edge	name	op1	bayes	0.0.0	0.0.0.0
# ::edge	name	op1	thomas	0.1.0.0	0.1.0.0.0
# ::edge	name	op2	bayes	0.1.0.0	0.1.0.0.1
# ::edge	name	op2	theorem	0.0.0	0.0.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.1.0	0.1.0.1
# ::edge	person	name	name	0.1.0	0.1.0.0
# ::edge	state-01	ARG0	person	0.1	0.1.0
# ::edge	state-01	mod	original	0.1	0.1.1
# ::edge	theorem	ARG1-of	state-01	0	0.1
# ::edge	theorem	ARG1-of	theory	0	0.0
# ::edge	theorem	topic	theory	0	0.2
# ::edge	theory	mod	probability	0.2	0.2.0
# ::edge	theory	name	name	0.0	0.0.0
(MRPNode-0 / theorem :ARG1-of (MRPNode-1 / theory :name (MRPNode-2 / name :op1 bayes :op2 theorem)) :ARG1-of (MRPNode-3 / state-01 :ARG0 (MRPNode-4 / person :name (MRPNode-5 / name :op1 thomas :op2 bayes) :ARG0-of (MRPNode-6 / have-org-role-91 :ARG2 (MRPNode-7 / reverend))) :mod (MRPNode-8 / original)) :topic (MRPNode-9 / theory :mod (MRPNode-10 / probability)))

# ::id 390
# ::snt If a term occurs in the document, the value will be non-zero in the vector.
# ::tok If a term occurs in the document , the value will be non - zero in the vector .
# ::alignments 2-3|0.0.0 4-5|0.0 6-7|0.0.1 9-10|0.1 13-14|0.1.0.0 14-15|0.1.0 17-18|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.473796 ::parser eager_oracle ::smatch 0.7857142857142856 ::n_actions 41
# ::node	0	have-condition-91	
# ::node	0.0	be-located-at-91	4-5
# ::node	0.0.0	term	2-3
# ::node	0.0.1	document	6-7
# ::node	0.1	value	9-10
# ::node	0.1.0	zero	14-15
# ::node	0.1.0.0	-	13-14
# ::node	0.1.1	vector	17-18
# ::root	0	have-condition-91
# ::edge	be-located-at-91	ARG1	term	0.0	0.0.0
# ::edge	be-located-at-91	ARG2	document	0.0	0.0.1
# ::edge	have-condition-91	ARG1	be-located-at-91	0	0.0
# ::edge	have-condition-91	ARG1	value	0	0.1
# ::edge	value	location	vector	0.1	0.1.1
# ::edge	value	mod	zero	0.1	0.1.0
# ::edge	zero	polarity	-	0.1.0	0.1.0.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / be-located-at-91 :ARG1 (MRPNode-2 / term) :ARG2 (MRPNode-3 / document)) :ARG1 (MRPNode-4 / value :mod (MRPNode-5 / zero :polarity -) :location (MRPNode-6 / vector)))

# ::id 391
# ::snt In object oriented programming inheritance is also dependant on access level modifiers.
# ::tok In object oriented programming inheritance is also dependant on access level modifiers .
# ::alignments 1-2|0.3.0.0 2-3|0.3.0 3-4|0.3 4-5|0.1 6-7|0.2 7-8|0 9-10|0.0.0.0 10-11|0.0.0 11-12|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.482945 ::parser eager_oracle ::smatch 1.0 ::n_actions 42
# ::node	0	depend-01	7-8
# ::node	0.0	modifier	11-12
# ::node	0.0.0	level	10-11
# ::node	0.0.0.0	access-01	9-10
# ::node	0.1	inherit-01	4-5
# ::node	0.2	also	6-7
# ::node	0.3	program-01	3-4
# ::node	0.3.0	orient-01	2-3
# ::node	0.3.0.0	object	1-2
# ::root	0	depend-01
# ::edge	depend-01	ARG0	inherit-01	0	0.1
# ::edge	depend-01	ARG1	modifier	0	0.0
# ::edge	depend-01	location	program-01	0	0.3
# ::edge	depend-01	mod	also	0	0.2
# ::edge	level	mod	access-01	0.0.0	0.0.0.0
# ::edge	modifier	mod	level	0.0	0.0.0
# ::edge	orient-01	ARG2	object	0.3.0	0.3.0.0
# ::edge	program-01	ARG2	orient-01	0.3	0.3.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / modifier :mod (MRPNode-2 / level :mod (MRPNode-3 / access-01))) :ARG0 (MRPNode-4 / inherit-01) :mod (MRPNode-5 / also) :location (MRPNode-6 / program-01 :ARG2 (MRPNode-7 / orient-01 :ARG2 (MRPNode-8 / object))))

# ::id 392
# ::snt One of the most important uses of page rank is its meaning to advertising.
# ::tok One of the most important uses of page rank is its meaning to advertising .
# ::alignments 0-1|0.0 1-2|0.0.0.2 3-4|0.0.0.2.0 4-5|0.0.0.1 5-6|0.0.0+0.0.1.0 6-7|0.0.1 7-8|0.0.0.0.0 8-9|0.0.0.0 11-12|0 13-14|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.589793 ::parser eager_oracle ::smatch 1.0 ::n_actions 53
# ::node	0	mean-01	11-12
# ::node	0.0	thing	0-1
# ::node	0.0.0	use-01	5-6
# ::node	0.0.0.0	rank-01	8-9
# ::node	0.0.0.0.0	page	7-8
# ::node	0.0.0.1	important-01	4-5
# ::node	0.0.0.2	have-degree-91	1-2
# ::node	0.0.0.2.0	most	3-4
# ::node	0.0.1	include-91	6-7
# ::node	0.0.1.0	use-01	5-6
# ::node	0.1	advertise-01	13-14
# ::root	0	mean-01
# ::edge	have-degree-91	ARG2	important-01	0.0.0.2	0.0.0.1
# ::edge	have-degree-91	ARG3	most	0.0.0.2	0.0.0.2.0
# ::edge	include-91	ARG2	use-01	0.0.1	0.0.1.0
# ::edge	mean-01	ARG1	thing	0	0.0
# ::edge	mean-01	ARG2	advertise-01	0	0.1
# ::edge	rank-01	ARG1	page	0.0.0.0	0.0.0.0.0
# ::edge	thing	ARG1-of	include-91	0.0	0.0.1
# ::edge	thing	ARG1-of	use-01	0.0	0.0.0
# ::edge	use-01	ARG1-of	have-degree-91	0.0.0	0.0.0.2
# ::edge	use-01	ARG1-of	important-01	0.0.0	0.0.0.1
# ::edge	use-01	ARG1-of	rank-01	0.0.0	0.0.0.0
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / thing :ARG1-of (MRPNode-2 / use-01 :ARG1-of (MRPNode-3 / rank-01 :ARG1 (MRPNode-4 / page)) :ARG1-of (MRPNode-5 / important-01) :ARG1-of (MRPNode-6 / have-degree-91 :ARG2 MRPNode-5 :ARG3 (MRPNode-7 / most))) :ARG1-of (MRPNode-8 / include-91 :ARG2 (MRPNode-9 / use-01))) :ARG2 (MRPNode-10 / advertise-01))

# ::id 393
# ::snt An example of this gain in efficiency is a path-finding problem.
# ::tok An example of this gain in efficiency is a path - finding problem .
# ::alignments 1-2|0 3-4|0.0.1 4-5|0.0 6-7|0.0.0 9-10|0.1.0.0 11-12|0.1.0 12-13|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.595433 ::parser eager_oracle ::smatch 0.896551724137931 ::n_actions 38
# ::node	0	exemplify-01	1-2
# ::node	0.0	gain-02	4-5
# ::node	0.0.0	efficient-01	6-7
# ::node	0.0.1	this	3-4
# ::node	0.1	problem	12-13
# ::node	0.1.0	find-01	11-12
# ::node	0.1.0.0	path	9-10
# ::root	0	exemplify-01
# ::edge	exemplify-01	ARG0	problem	0	0.1
# ::edge	exemplify-01	ARG1	gain-02	0	0.0
# ::edge	find-01	ARG1	path	0.1.0	0.1.0.0
# ::edge	gain-02	ARG1	efficient-01	0.0	0.0.0
# ::edge	gain-02	mod	this	0.0	0.0.1
# ::edge	problem	topic	find-01	0.1	0.1.0
(MRPNode-0 / exemplify-01 :ARG1 (MRPNode-1 / gain-02 :ARG1 (MRPNode-2 / efficient-01) :mod (MRPNode-3 / this)) :ARG0 (MRPNode-4 / problem :topic (MRPNode-5 / find-01 :ARG1 (MRPNode-6 / path))))

# ::id 394
# ::snt Since the PageRank is the most important algorithms which is used in the Google engine.
# ::tok Since the PageRank is the most important algorithms which is used in the Google engine .
# ::alignments 0-1|0 2-3|0.0.2+0.0.2.0+0.0.2.0.0 5-6|0.0.1.0 6-7|0.0.1.1 7-8|0.0 10-11|0.0.0 13-14|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 14-15|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.608686 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 41
# ::node	0	cause-01	0-1
# ::node	0.0	algorithm	7-8
# ::node	0.0.0	use-01	10-11
# ::node	0.0.0.0	engine	14-15
# ::node	0.0.0.0.0	company	13-14
# ::node	0.0.0.0.0.0	name	13-14
# ::node	0.0.0.0.0.0.0	google	13-14
# ::node	0.0.1	have-degree-91	
# ::node	0.0.1.0	most	5-6
# ::node	0.0.1.1	important-01	6-7
# ::node	0.0.2	publication	2-3
# ::node	0.0.2.0	name	2-3
# ::node	0.0.2.0.0	pagerank	2-3
# ::root	0	cause-01
# ::edge	algorithm	ARG1-of	have-degree-91	0.0	0.0.1
# ::edge	algorithm	ARG1-of	important-01	0.0	0.0.1.1
# ::edge	algorithm	ARG1-of	use-01	0.0	0.0.0
# ::edge	algorithm	domain	publication	0.0	0.0.2
# ::edge	cause-01	ARG0	algorithm	0	0.0
# ::edge	company	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	engine	mod	company	0.0.0.0	0.0.0.0.0
# ::edge	have-degree-91	ARG2	important-01	0.0.1	0.0.1.1
# ::edge	have-degree-91	ARG3	most	0.0.1	0.0.1.0
# ::edge	name	op1	google	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op1	pagerank	0.0.2.0	0.0.2.0.0
# ::edge	publication	name	name	0.0.2	0.0.2.0
# ::edge	use-01	ARG2	engine	0.0.0	0.0.0.0
(MRPNode-0 / cause-01 :ARG0 (MRPNode-1 / algorithm :ARG1-of (MRPNode-2 / use-01 :ARG2 (MRPNode-3 / engine :mod (MRPNode-4 / company :name (MRPNode-5 / name :op1 google)))) :ARG1-of (MRPNode-6 / have-degree-91 :ARG3 (MRPNode-7 / most) :ARG2 (MRPNode-8 / important-01)) :ARG1-of MRPNode-8 :domain (MRPNode-9 / publication :name (MRPNode-10 / name :op1 pagerank))))

# ::id 395
# ::snt After this, it is using this to pick the best overall path.
# ::tok After this , it is using this to pick the best overall path .
# ::alignments 0-1|0.3 1-2|0.3.0 3-4|0.1 5-6|0 6-7|0.0 8-9|0.2 10-11|0.2.0.1 11-12|0.2.0.0 12-13|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.622042 ::parser eager_oracle ::smatch 0.8837209302325582 ::n_actions 46
# ::node	0	use-01	5-6
# ::node	0.0	this	6-7
# ::node	0.1	it	3-4
# ::node	0.2	pick-01	8-9
# ::node	0.2.0	path	12-13
# ::node	0.2.0.0	overall	11-12
# ::node	0.2.0.1	good-02	10-11
# ::node	0.2.0.2	have-degree-91	
# ::node	0.2.0.2.0	most	
# ::node	0.3	after	0-1
# ::node	0.3.0	this	1-2
# ::root	0	use-01
# ::edge	after	op1	this	0.3	0.3.0
# ::edge	have-degree-91	ARG2	good-02	0.2.0.2	0.2.0.1
# ::edge	have-degree-91	ARG3	most	0.2.0.2	0.2.0.2.0
# ::edge	path	ARG1-of	good-02	0.2.0	0.2.0.1
# ::edge	path	ARG1-of	have-degree-91	0.2.0	0.2.0.2
# ::edge	path	mod	overall	0.2.0	0.2.0.0
# ::edge	pick-01	ARG0	it	0.2	0.1
# ::edge	pick-01	ARG1	path	0.2	0.2.0
# ::edge	use-01	ARG0	it	0	0.1
# ::edge	use-01	ARG1	this	0	0.0
# ::edge	use-01	ARG2	pick-01	0	0.2
# ::edge	use-01	time	after	0	0.3
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / this) :ARG0 (MRPNode-2 / it) :ARG2 (MRPNode-3 / pick-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-4 / path :mod (MRPNode-5 / overall) :ARG1-of (MRPNode-6 / good-02) :ARG1-of (MRPNode-7 / have-degree-91 :ARG2 MRPNode-6 :ARG3 (MRPNode-8 / most)))) :time (MRPNode-9 / after :op1 (MRPNode-10 / this)))

# ::id 396
# ::snt However an object cannot be cast to a class which is no relative of it.
# ::tok However an object cannot be cast to a class which is no relative of it .
# ::alignments 2-3|0.0.1.0 3-4|0.0 5-6|0.0.1 8-9|0.0.1.0.0.1 11-12|0.0.0+0.0.1.0.0.0 12-13|0.0.1.0.0 13-14|0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.627832 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	have-concession-91	13-14
# ::node	0.0	possible-01	3-4
# ::node	0.0.0	-	11-12
# ::node	0.0.1	cast-01	5-6
# ::node	0.0.1.0	object	2-3
# ::node	0.0.1.0.0	related-04	12-13
# ::node	0.0.1.0.0.0	-	11-12
# ::node	0.0.1.0.0.1	class	8-9
# ::root	0	have-concession-91
# ::edge	cast-01	ARG1	object	0.0.1	0.0.1.0
# ::edge	cast-01	ARG2	class	0.0.1	0.0.1.0.0.1
# ::edge	have-concession-91	ARG1	possible-01	0	0.0
# ::edge	object	ARG1-of	related-04	0.0.1.0	0.0.1.0.0
# ::edge	possible-01	ARG1	cast-01	0.0	0.0.1
# ::edge	possible-01	polarity	-	0.0	0.0.0
# ::edge	related-04	ARG2	class	0.0.1.0.0	0.0.1.0.0.1
# ::edge	related-04	polarity	-	0.0.1.0.0	0.0.1.0.0.0
(MRPNode-0 / have-concession-91 :ARG1 (MRPNode-1 / possible-01 :polarity - :ARG1 (MRPNode-2 / cast-01 :ARG1 (MRPNode-3 / object :ARG1-of (MRPNode-4 / related-04 :polarity - :ARG2 (MRPNode-5 / class))) :ARG2 MRPNode-5)))

# ::id 397
# ::snt They do not have to be written in a computer language.
# ::tok They do not have to be written in a computer language .
# ::alignments 0-1|0.1 2-3|0.0 3-4|0 6-7|0.2 9-10|0.2.0.0 10-11|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.631403 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	obligate-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	they	0-1
# ::node	0.2	write-01	6-7
# ::node	0.2.0	language	10-11
# ::node	0.2.0.0	computer	9-10
# ::root	0	obligate-01
# ::edge	language	mod	computer	0.2.0	0.2.0.0
# ::edge	obligate-01	ARG2	they	0	0.1
# ::edge	obligate-01	ARG2	write-01	0	0.2
# ::edge	obligate-01	polarity	-	0	0.0
# ::edge	write-01	ARG1	they	0.2	0.1
# ::edge	write-01	location	language	0.2	0.2.0
(MRPNode-0 / obligate-01 :polarity - :ARG2 (MRPNode-1 / they) :ARG2 (MRPNode-2 / write-01 :ARG1 MRPNode-1 :location (MRPNode-3 / language :mod (MRPNode-4 / computer))))

# ::id 398
# ::snt The other method is the top down approach which is a method that combines memorization and recursion.
# ::tok The other method is the top down approach which is a method that combines memorization and recursion .
# ::alignments 1-2|0.0 2-3|0 6-7|0.1.0 7-8|0.1 13-14|0.2 14-15|0.2.1 15-16|0.2.0 16-17|0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.638941 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	method	2-3
# ::node	0.0	other	1-2
# ::node	0.1	approach-02	7-8
# ::node	0.1.0	down	6-7
# ::node	0.2	combine-01	13-14
# ::node	0.2.0	and	15-16
# ::node	0.2.0.0	recursion	16-17
# ::node	0.2.1	memorization	14-15
# ::root	0	method
# ::edge	and	op2	recursion	0.2.0	0.2.0.0
# ::edge	approach-02	mod	down	0.1	0.1.0
# ::edge	combine-01	ARG1	and	0.2	0.2.0
# ::edge	combine-01	ARG1	memorization	0.2	0.2.1
# ::edge	method	ARG0-of	combine-01	0	0.2
# ::edge	method	domain	approach-02	0	0.1
# ::edge	method	mod	other	0	0.0
(MRPNode-0 / method :mod (MRPNode-1 / other) :domain (MRPNode-2 / approach-02 :mod (MRPNode-3 / down)) :ARG0-of (MRPNode-4 / combine-01 :ARG1 (MRPNode-5 / and :op2 (MRPNode-6 / recursion)) :ARG1 (MRPNode-7 / memorization)))

# ::id 399
# ::snt It is similar to divide and conquer, however is differentiated as its subproblems are not independent.
# ::tok It is similar to divide and conquer , however is differentiated as its subproblems are not independent .
# ::alignments 2-3|0.1 4-5|0.1.0.0 5-6|0.1.0 6-7|0.1.0.1 10-11|0.0+0.0.1 11-12|0 12-13|0.0.0 13-14|0.0.0.0.1 15-16|0.0.0.0.0 16-17|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.675118 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 58
# ::node	0	contrast-01	11-12
# ::node	0.0	differ-02	10-11
# ::node	0.0.0	it	12-13
# ::node	0.0.0.0	depend-01	16-17
# ::node	0.0.0.0.0	-	15-16
# ::node	0.0.0.0.1	subproblem	13-14
# ::node	0.0.1	cause-01	10-11
# ::node	0.1	resemble-01	2-3
# ::node	0.1.0	and	5-6
# ::node	0.1.0.0	divide-02	4-5
# ::node	0.1.0.1	conquer-01	6-7
# ::root	0	contrast-01
# ::edge	and	op1	divide-02	0.1.0	0.1.0.0
# ::edge	and	op2	conquer-01	0.1.0	0.1.0.1
# ::edge	cause-01	ARG0	depend-01	0.0.1	0.0.0.0
# ::edge	contrast-01	ARG1	resemble-01	0	0.1
# ::edge	contrast-01	ARG2	differ-02	0	0.0
# ::edge	depend-01	ARG0	subproblem	0.0.0.0	0.0.0.0.1
# ::edge	depend-01	polarity	-	0.0.0.0	0.0.0.0.0
# ::edge	differ-02	ARG1	it	0.0	0.0.0
# ::edge	differ-02	ARG1-of	cause-01	0.0	0.0.1
# ::edge	it	mod	depend-01	0.0.0	0.0.0.0
# ::edge	resemble-01	ARG2	and	0.1	0.1.0
(MRPNode-0 / contrast-01 :ARG2 (MRPNode-1 / differ-02 :ARG1 (MRPNode-2 / it :domain-of (MRPNode-3 / depend-01 :polarity - :ARG0 (MRPNode-4 / subproblem))) :ARG1-of (MRPNode-5 / cause-01 :ARG0 MRPNode-3)) :ARG1 (MRPNode-6 / resemble-01 :ARG2 (MRPNode-7 / and :op1 (MRPNode-8 / divide-02) :op2 (MRPNode-9 / conquer-01))))

# ::id 400
# ::snt "It also provides a way to generalize du to the ""is a"" relationship between classes."
# ::tok " It also provides a way to generalize du to the " " is a " " relationship between classes . "
# ::alignments 1-2|0.0.0.2 2-3|0.1 3-4|0 5-6|0.0 7-8|0.0.0 8-9|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.1 17-18|0.0.0.1 19-20|0.0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.686491 ::parser eager_oracle ::smatch 0.975609756097561 ::n_actions 50
# ::node	0	provide-01	3-4
# ::node	0.0	way	5-6
# ::node	0.0.0	generalize-01	7-8
# ::node	0.0.0.0	organization	8-9
# ::node	0.0.0.0.0	name	8-9
# ::node	0.0.0.0.0.0	du	8-9
# ::node	0.0.0.0.0.1	du	8-9
# ::node	0.0.0.1	relation-03	17-18
# ::node	0.0.0.1.0	class	19-20
# ::node	0.0.0.2	it	1-2
# ::node	0.1	also	2-3
# ::root	0	provide-01
# ::edge	generalize-01	ARG0	it	0.0.0	0.0.0.2
# ::edge	generalize-01	ARG1	organization	0.0.0	0.0.0.0
# ::edge	generalize-01	ARG2	relation-03	0.0.0	0.0.0.1
# ::edge	name	op1	du	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op2	du	0.0.0.0.0	0.0.0.0.0.1
# ::edge	organization	name	name	0.0.0.0	0.0.0.0.0
# ::edge	provide-01	ARG0	it	0	0.0.0.2
# ::edge	provide-01	ARG1	way	0	0.0
# ::edge	provide-01	mod	also	0	0.1
# ::edge	relation-03	ARG1	class	0.0.0.1	0.0.0.1.0
# ::edge	way	manner-of	generalize-01	0.0	0.0.0
(MRPNode-0 / provide-01 :ARG1 (MRPNode-1 / way :manner-of (MRPNode-2 / generalize-01 :ARG1 (MRPNode-3 / organization :name (MRPNode-4 / name :op1 du :op2 du)) :ARG2 (MRPNode-5 / relation-03 :ARG1 (MRPNode-6 / class)) :ARG0 (MRPNode-7 / it))) :ARG0 MRPNode-7 :mod (MRPNode-8 / also))

# ::id 401
# ::snt It is similar to divide and conquer, however is differentiated as its subproblems are not independent.
# ::tok It is similar to divide and conquer , however is differentiated as its subproblems are not independent .
# ::alignments 2-3|0.1 4-5|0.1.0.0 5-6|0.1.0 6-7|0.1.0.1 10-11|0.0+0.0.1 11-12|0 12-13|0.0.0 13-14|0.0.0.0.1 15-16|0.0.0.0.0 16-17|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.721317 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 58
# ::node	0	contrast-01	11-12
# ::node	0.0	differ-02	10-11
# ::node	0.0.0	it	12-13
# ::node	0.0.0.0	depend-01	16-17
# ::node	0.0.0.0.0	-	15-16
# ::node	0.0.0.0.1	subproblem	13-14
# ::node	0.0.1	cause-01	10-11
# ::node	0.1	resemble-01	2-3
# ::node	0.1.0	and	5-6
# ::node	0.1.0.0	divide-02	4-5
# ::node	0.1.0.1	conquer-01	6-7
# ::root	0	contrast-01
# ::edge	and	op1	divide-02	0.1.0	0.1.0.0
# ::edge	and	op2	conquer-01	0.1.0	0.1.0.1
# ::edge	cause-01	ARG0	depend-01	0.0.1	0.0.0.0
# ::edge	contrast-01	ARG1	resemble-01	0	0.1
# ::edge	contrast-01	ARG2	differ-02	0	0.0
# ::edge	depend-01	ARG0	subproblem	0.0.0.0	0.0.0.0.1
# ::edge	depend-01	polarity	-	0.0.0.0	0.0.0.0.0
# ::edge	differ-02	ARG1	it	0.0	0.0.0
# ::edge	differ-02	ARG1-of	cause-01	0.0	0.0.1
# ::edge	it	mod	depend-01	0.0.0	0.0.0.0
# ::edge	resemble-01	ARG2	and	0.1	0.1.0
(MRPNode-0 / contrast-01 :ARG2 (MRPNode-1 / differ-02 :ARG1 (MRPNode-2 / it :domain-of (MRPNode-3 / depend-01 :polarity - :ARG0 (MRPNode-4 / subproblem))) :ARG1-of (MRPNode-5 / cause-01 :ARG0 MRPNode-3)) :ARG1 (MRPNode-6 / resemble-01 :ARG2 (MRPNode-7 / and :op1 (MRPNode-8 / divide-02) :op2 (MRPNode-9 / conquer-01))))

# ::id 402
# ::snt However an object cannot be cast to a class which is no relative of it.
# ::tok However an object cannot be cast to a class which is no relative of it .
# ::alignments 2-3|0.0.1.0 3-4|0.0 5-6|0.0.1 8-9|0.0.1.0.0.1 11-12|0.0.0+0.0.1.0.0.0 12-13|0.0.1.0.0 13-14|0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.727240 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	have-concession-91	13-14
# ::node	0.0	possible-01	3-4
# ::node	0.0.0	-	11-12
# ::node	0.0.1	cast-01	5-6
# ::node	0.0.1.0	object	2-3
# ::node	0.0.1.0.0	related-04	12-13
# ::node	0.0.1.0.0.0	-	11-12
# ::node	0.0.1.0.0.1	class	8-9
# ::root	0	have-concession-91
# ::edge	cast-01	ARG1	object	0.0.1	0.0.1.0
# ::edge	cast-01	ARG2	class	0.0.1	0.0.1.0.0.1
# ::edge	have-concession-91	ARG1	possible-01	0	0.0
# ::edge	object	ARG1-of	related-04	0.0.1.0	0.0.1.0.0
# ::edge	possible-01	ARG1	cast-01	0.0	0.0.1
# ::edge	possible-01	polarity	-	0.0	0.0.0
# ::edge	related-04	ARG2	class	0.0.1.0.0	0.0.1.0.0.1
# ::edge	related-04	polarity	-	0.0.1.0.0	0.0.1.0.0.0
(MRPNode-0 / have-concession-91 :ARG1 (MRPNode-1 / possible-01 :polarity - :ARG1 (MRPNode-2 / cast-01 :ARG1 (MRPNode-3 / object :ARG1-of (MRPNode-4 / related-04 :polarity - :ARG2 (MRPNode-5 / class))) :ARG2 MRPNode-5)))

# ::id 403
# ::snt The main problem is divided into sub problems which are solved and stored for future use.
# ::tok The main problem is divided into sub problems which are solved and stored for future use .
# ::alignments 1-2|0.0.0 2-3|0.0 4-5|0 6-7|0.0.1 7-8|0.0.1.0 10-11|0.0.1.0.0 12-13|0.0.1.0.1 14-15|0.0.1.0.0.0.0 15-16|0.0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.751524 ::parser eager_oracle ::smatch 1.0 ::n_actions 50
# ::node	0	divide-02	4-5
# ::node	0.0	problem	2-3
# ::node	0.0.0	main	1-2
# ::node	0.0.1	sub	6-7
# ::node	0.0.1.0	problem	7-8
# ::node	0.0.1.0.0	solve-01	10-11
# ::node	0.0.1.0.0.0	use-01	15-16
# ::node	0.0.1.0.0.0.0	future	14-15
# ::node	0.0.1.0.1	store-01	12-13
# ::root	0	divide-02
# ::edge	divide-02	ARG1	problem	0	0.0
# ::edge	divide-02	ARG2	problem	0	0.0.1.0
# ::edge	problem	ARG1-of	solve-01	0.0.1.0	0.0.1.0.0
# ::edge	problem	ARG1-of	store-01	0.0.1.0	0.0.1.0.1
# ::edge	problem	ARG1-of	sub	0.0	0.0.1
# ::edge	problem	mod	main	0.0	0.0.0
# ::edge	solve-01	ARG2	use-01	0.0.1.0.0	0.0.1.0.0.0
# ::edge	store-01	ARG2	use-01	0.0.1.0.1	0.0.1.0.0.0
# ::edge	sub	ARG1	problem	0.0.1	0.0.1.0
# ::edge	use-01	time	future	0.0.1.0.0.0	0.0.1.0.0.0.0
(MRPNode-0 / divide-02 :ARG1 (MRPNode-1 / problem :mod (MRPNode-2 / main) :ARG1-of (MRPNode-3 / sub :ARG1 (MRPNode-4 / problem :ARG1-of (MRPNode-5 / solve-01 :ARG2 (MRPNode-6 / use-01 :time (MRPNode-7 / future))) :ARG1-of (MRPNode-8 / store-01 :ARG2 MRPNode-6)))) :ARG2 MRPNode-4)

# ::id 404
# ::snt For example, a program could exist to model different forms of transport.
# ::tok For example , a program could exist to model different forms of transport .
# ::alignments 1-2|0 4-5|0.0.0.0 5-6|0.0 6-7|0.0.0 8-9|0.0.0.1 9-10|0.0.0.1.0.0 10-11|0.0.0.1.0 12-13|0.0.0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.759294 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 44
# ::node	0	exemplify-01	1-2
# ::node	0.0	possible-01	5-6
# ::node	0.0.0	exist-01	6-7
# ::node	0.0.0.0	program	4-5
# ::node	0.0.0.1	model-01	8-9
# ::node	0.0.0.1.0	form	10-11
# ::node	0.0.0.1.0.0	differ-02	9-10
# ::node	0.0.0.1.0.1	transport-01	12-13
# ::root	0	exemplify-01
# ::edge	exemplify-01	ARG0	possible-01	0	0.0
# ::edge	exist-01	ARG1	program	0.0.0	0.0.0.0
# ::edge	exist-01	purpose	model-01	0.0.0	0.0.0.1
# ::edge	form	ARG1-of	differ-02	0.0.0.1.0	0.0.0.1.0.0
# ::edge	form	mod	transport-01	0.0.0.1.0	0.0.0.1.0.1
# ::edge	model-01	ARG0	program	0.0.0.1	0.0.0.0
# ::edge	model-01	ARG1	form	0.0.0.1	0.0.0.1.0
# ::edge	possible-01	ARG1	exist-01	0.0	0.0.0
(MRPNode-0 / exemplify-01 :ARG0 (MRPNode-1 / possible-01 :ARG1 (MRPNode-2 / exist-01 :ARG1 (MRPNode-3 / program) :purpose (MRPNode-4 / model-01 :ARG0 MRPNode-3 :ARG1 (MRPNode-5 / form :ARG1-of (MRPNode-6 / differ-02) :mod (MRPNode-7 / transport-01))))))

# ::id 405
# ::snt It is therefore used to create relationships between one object and another.
# ::tok It is therefore used to create relationships between one object and another .
# ::alignments 0-1|0.0.0 3-4|0.0 5-6|0.0.1 6-7|0.0.1.0 8-9|0.0.1.0.0.0 9-10|0.0.1.0.0+0.0.1.0.1 11-12|0.0.1.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.781470 ::parser eager_oracle ::smatch 0.8888888888888888 ::n_actions 42
# ::node	0	cause-01	
# ::node	0.0	use-01	3-4
# ::node	0.0.0	it	0-1
# ::node	0.0.1	create-01	5-6
# ::node	0.0.1.0	relation-03	6-7
# ::node	0.0.1.0.0	object	9-10
# ::node	0.0.1.0.0.0	one	8-9
# ::node	0.0.1.0.1	object	9-10
# ::node	0.0.1.0.1.0	another	11-12
# ::root	0	cause-01
# ::edge	cause-01	ARG1	use-01	0	0.0
# ::edge	create-01	ARG0	it	0.0.1	0.0.0
# ::edge	create-01	ARG1	relation-03	0.0.1	0.0.1.0
# ::edge	object	mod	another	0.0.1.0.1	0.0.1.0.1.0
# ::edge	object	mod	one	0.0.1.0.0	0.0.1.0.0.0
# ::edge	relation-03	ARG1	object	0.0.1.0	0.0.1.0.0
# ::edge	relation-03	ARG2	object	0.0.1.0	0.0.1.0.1
# ::edge	use-01	ARG1	it	0.0	0.0.0
# ::edge	use-01	ARG2	create-01	0.0	0.0.1
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / use-01 :ARG1 (MRPNode-2 / it) :ARG2 (MRPNode-3 / create-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-4 / relation-03 :ARG1 (MRPNode-5 / object :mod (MRPNode-6 / one)) :ARG2 (MRPNode-7 / object :mod (MRPNode-8 / another))))))

# ::id 406
# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
# ::tok The easiest way to look at inheritance is as an " ... is a kind of " relationship .
# ::alignments 1-2|0.0 2-3|0 4-5|0.2 6-7|0.2.0 14-15|0.3.0 15-16|0.1 17-18|0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:39.791028 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 43
# ::node	0	way	2-3
# ::node	0.0	simple-02	1-2
# ::node	0.1	have-degree-91	15-16
# ::node	0.1.0	more	
# ::node	0.2	look-01	4-5
# ::node	0.2.0	inherit-01	6-7
# ::node	0.3	relation-03	17-18
# ::node	0.3.0	kind	14-15
# ::root	0	way
# ::edge	have-degree-91	ARG3	more	0.1	0.1.0
# ::edge	look-01	ARG1	inherit-01	0.2	0.2.0
# ::edge	relation-03	mod	kind	0.3	0.3.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	ARG1-of	simple-02	0	0.0
# ::edge	way	domain	look-01	0	0.2
# ::edge	way	domain	relation-03	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / simple-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG3 (MRPNode-3 / more)) :domain (MRPNode-4 / look-01 :ARG1 (MRPNode-5 / inherit-01)) :domain (MRPNode-6 / relation-03 :mod (MRPNode-7 / kind)))

# ::id 407
# ::snt The PageRank is a recursive algorithm used by Google to determine which webpages are more important than others.
# ::tok The PageRank is a recursive algorithm used by Google to determine which webpages are more important than others .
# ::alignments 4-5|0.0 5-6|0 6-7|0.1 10-11|0.2 12-13|0.2.0.0 14-15|0.2.0.2 15-16|0.2.0.1 17-18|0.2.0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:39.801170 ::parser eager_oracle ::smatch 0.5945945945945945 ::n_actions 42
# ::node	0	algorithm	5-6
# ::node	0.0	recursive	4-5
# ::node	0.1	use-01	6-7
# ::node	0.2	determine-01	10-11
# ::node	0.2.0	have-degree-91	
# ::node	0.2.0.0	webpage	12-13
# ::node	0.2.0.1	important-01	15-16
# ::node	0.2.0.2	more	14-15
# ::node	0.2.0.3	other	17-18
# ::node	0.3	publication	
# ::node	0.3.0	name	
# ::node	0.3.0.0	google	
# ::node	0.3.0.1	pagerank	
# ::root	0	algorithm
# ::edge	algorithm	ARG1-of	recursive	0	0.0
# ::edge	algorithm	ARG1-of	use-01	0	0.1
# ::edge	algorithm	domain	determine-01	0	0.2
# ::edge	algorithm	domain	publication	0	0.3
# ::edge	determine-01	ARG1	have-degree-91	0.2	0.2.0
# ::edge	have-degree-91	ARG1	webpage	0.2.0	0.2.0.0
# ::edge	have-degree-91	ARG2	important-01	0.2.0	0.2.0.1
# ::edge	have-degree-91	ARG3	more	0.2.0	0.2.0.2
# ::edge	have-degree-91	ARG4	other	0.2.0	0.2.0.3
# ::edge	important-01	ARG1	webpage	0.2.0.1	0.2.0.0
# ::edge	name	op1	google	0.3.0	0.3.0.0
# ::edge	name	op2	pagerank	0.3.0	0.3.0.1
# ::edge	publication	name	name	0.3	0.3.0
(MRPNode-0 / algorithm :ARG1-of (MRPNode-1 / recursive) :ARG1-of (MRPNode-2 / use-01) :domain (MRPNode-3 / determine-01 :ARG1 (MRPNode-4 / have-degree-91 :ARG1 (MRPNode-5 / webpage) :ARG2 (MRPNode-6 / important-01 :ARG1 MRPNode-5) :ARG3 (MRPNode-7 / more) :ARG4 (MRPNode-8 / other))) :domain (MRPNode-9 / publication :name (MRPNode-10 / name :op1 google :op2 pagerank)))

# ::id 408
# ::snt Mathematicians use the word to describe a set of rules which anyone can follow to solve a problem.
# ::tok Mathematicians use the word to describe a set of rules which anyone can follow to solve a problem .
# ::alignments 0-1|0.1 1-2|0 3-4|0.0 5-6|0.2 7-8|0.2.0 9-10|0.2.0.0 11-12|0.2.0.1.0 12-13|0.2.0.1.1 13-14|0.2.0.1 15-16|0.2.0.1.2 17-18|0.2.0.1.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.815182 ::parser eager_oracle ::smatch 1.0 ::n_actions 58
# ::node	0	use-01	1-2
# ::node	0.0	word	3-4
# ::node	0.1	mathematician	0-1
# ::node	0.2	describe-01	5-6
# ::node	0.2.0	set	7-8
# ::node	0.2.0.0	rule	9-10
# ::node	0.2.0.1	follow-02	13-14
# ::node	0.2.0.1.0	anyone	11-12
# ::node	0.2.0.1.1	possible-01	12-13
# ::node	0.2.0.1.2	solve-01	15-16
# ::node	0.2.0.1.2.0	problem	17-18
# ::root	0	use-01
# ::edge	describe-01	ARG0	mathematician	0.2	0.1
# ::edge	describe-01	ARG1	set	0.2	0.2.0
# ::edge	follow-02	ARG0	anyone	0.2.0.1	0.2.0.1.0
# ::edge	follow-02	ARG1-of	possible-01	0.2.0.1	0.2.0.1.1
# ::edge	follow-02	purpose	solve-01	0.2.0.1	0.2.0.1.2
# ::edge	set	ARG1-of	follow-02	0.2.0	0.2.0.1
# ::edge	set	consist-of	rule	0.2.0	0.2.0.0
# ::edge	solve-01	ARG0	anyone	0.2.0.1.2	0.2.0.1.0
# ::edge	solve-01	ARG1	problem	0.2.0.1.2	0.2.0.1.2.0
# ::edge	use-01	ARG0	mathematician	0	0.1
# ::edge	use-01	ARG1	word	0	0.0
# ::edge	use-01	ARG2	describe-01	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / word) :ARG0 (MRPNode-2 / mathematician) :ARG2 (MRPNode-3 / describe-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-4 / set :consist-of (MRPNode-5 / rule) :ARG1-of (MRPNode-6 / follow-02 :ARG0 (MRPNode-7 / anyone) :ARG1-of (MRPNode-8 / possible-01) :purpose (MRPNode-9 / solve-01 :ARG0 MRPNode-7 :ARG1 (MRPNode-10 / problem))))))

# ::id 409
# ::snt Mathematicians use the word to describe a set of rules which anyone can follow to solve a problem.
# ::tok Mathematicians use the word to describe a set of rules which anyone can follow to solve a problem .
# ::alignments 0-1|0.1 1-2|0 3-4|0.0 5-6|0.2 7-8|0.2.0 9-10|0.2.0.0 11-12|0.2.0.1.0 12-13|0.2.0.1.1 13-14|0.2.0.1 15-16|0.2.0.1.2 17-18|0.2.0.1.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.829195 ::parser eager_oracle ::smatch 1.0 ::n_actions 58
# ::node	0	use-01	1-2
# ::node	0.0	word	3-4
# ::node	0.1	mathematician	0-1
# ::node	0.2	describe-01	5-6
# ::node	0.2.0	set	7-8
# ::node	0.2.0.0	rule	9-10
# ::node	0.2.0.1	follow-02	13-14
# ::node	0.2.0.1.0	anyone	11-12
# ::node	0.2.0.1.1	possible-01	12-13
# ::node	0.2.0.1.2	solve-01	15-16
# ::node	0.2.0.1.2.0	problem	17-18
# ::root	0	use-01
# ::edge	describe-01	ARG0	mathematician	0.2	0.1
# ::edge	describe-01	ARG1	set	0.2	0.2.0
# ::edge	follow-02	ARG0	anyone	0.2.0.1	0.2.0.1.0
# ::edge	follow-02	ARG1-of	possible-01	0.2.0.1	0.2.0.1.1
# ::edge	follow-02	purpose	solve-01	0.2.0.1	0.2.0.1.2
# ::edge	set	ARG1-of	follow-02	0.2.0	0.2.0.1
# ::edge	set	consist-of	rule	0.2.0	0.2.0.0
# ::edge	solve-01	ARG0	anyone	0.2.0.1.2	0.2.0.1.0
# ::edge	solve-01	ARG1	problem	0.2.0.1.2	0.2.0.1.2.0
# ::edge	use-01	ARG0	mathematician	0	0.1
# ::edge	use-01	ARG1	word	0	0.0
# ::edge	use-01	ARG2	describe-01	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / word) :ARG0 (MRPNode-2 / mathematician) :ARG2 (MRPNode-3 / describe-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-4 / set :consist-of (MRPNode-5 / rule) :ARG1-of (MRPNode-6 / follow-02 :ARG0 (MRPNode-7 / anyone) :ARG1-of (MRPNode-8 / possible-01) :purpose (MRPNode-9 / solve-01 :ARG0 MRPNode-7 :ARG1 (MRPNode-10 / problem))))))

# ::id 410
# ::snt After this, it is using this to pick the best overall path.
# ::tok After this , it is using this to pick the best overall path .
# ::alignments 0-1|0.3 1-2|0.3.0 3-4|0.1 5-6|0 6-7|0.0 8-9|0.2 10-11|0.2.0.1 11-12|0.2.0.0 12-13|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.841908 ::parser eager_oracle ::smatch 0.8837209302325582 ::n_actions 46
# ::node	0	use-01	5-6
# ::node	0.0	this	6-7
# ::node	0.1	it	3-4
# ::node	0.2	pick-01	8-9
# ::node	0.2.0	path	12-13
# ::node	0.2.0.0	overall	11-12
# ::node	0.2.0.1	good-02	10-11
# ::node	0.2.0.2	have-degree-91	
# ::node	0.2.0.2.0	most	
# ::node	0.3	after	0-1
# ::node	0.3.0	this	1-2
# ::root	0	use-01
# ::edge	after	op1	this	0.3	0.3.0
# ::edge	have-degree-91	ARG2	good-02	0.2.0.2	0.2.0.1
# ::edge	have-degree-91	ARG3	most	0.2.0.2	0.2.0.2.0
# ::edge	path	ARG1-of	good-02	0.2.0	0.2.0.1
# ::edge	path	ARG1-of	have-degree-91	0.2.0	0.2.0.2
# ::edge	path	mod	overall	0.2.0	0.2.0.0
# ::edge	pick-01	ARG0	it	0.2	0.1
# ::edge	pick-01	ARG1	path	0.2	0.2.0
# ::edge	use-01	ARG0	it	0	0.1
# ::edge	use-01	ARG1	this	0	0.0
# ::edge	use-01	ARG2	pick-01	0	0.2
# ::edge	use-01	time	after	0	0.3
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / this) :ARG0 (MRPNode-2 / it) :ARG2 (MRPNode-3 / pick-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-4 / path :mod (MRPNode-5 / overall) :ARG1-of (MRPNode-6 / good-02) :ARG1-of (MRPNode-7 / have-degree-91 :ARG2 MRPNode-6 :ARG3 (MRPNode-8 / most)))) :time (MRPNode-9 / after :op1 (MRPNode-10 / this)))

# ::id 411
# ::snt There is also Conditional Probability which is usually interested in the way variables relate to each other.
# ::tok There is also Conditional Probability which is usually interested in the way variables relate to each other .
# ::alignments 2-3|0.1 3-5|0.0+0.0.0+0.0.0.0+0.0.0.1 7-8|0.2 8-9|0 11-12|0.3 12-13|0.3.0.0 13-14|0.3.0 15-16|0.3.0.1.0 16-17|0.3.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.853308 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	interest-01	8-9
# ::node	0.0	thing	3-5
# ::node	0.0.0	name	3-5
# ::node	0.0.0.0	conditional	3-5
# ::node	0.0.0.1	probability	3-5
# ::node	0.1	also	2-3
# ::node	0.2	usual	7-8
# ::node	0.3	way	11-12
# ::node	0.3.0	relate-01	13-14
# ::node	0.3.0.0	variable	12-13
# ::node	0.3.0.1	other	16-17
# ::node	0.3.0.1.0	each	15-16
# ::root	0	interest-01
# ::edge	interest-01	ARG2	way	0	0.3
# ::edge	interest-01	mod	also	0	0.1
# ::edge	interest-01	mod	thing	0	0.0
# ::edge	interest-01	mod	usual	0	0.2
# ::edge	name	op1	conditional	0.0.0	0.0.0.0
# ::edge	name	op2	probability	0.0.0	0.0.0.1
# ::edge	other	mod	each	0.3.0.1	0.3.0.1.0
# ::edge	relate-01	ARG1	variable	0.3.0	0.3.0.0
# ::edge	relate-01	ARG2	other	0.3.0	0.3.0.1
# ::edge	thing	name	name	0.0	0.0.0
# ::edge	way	manner-of	relate-01	0.3	0.3.0
(MRPNode-0 / interest-01 :mod (MRPNode-1 / thing :name (MRPNode-2 / name :op1 conditional :op2 probability)) :mod (MRPNode-3 / also) :mod (MRPNode-4 / usual) :ARG2 (MRPNode-5 / way :manner-of (MRPNode-6 / relate-01 :ARG1 (MRPNode-7 / variable) :ARG2 (MRPNode-8 / other :mod (MRPNode-9 / each)))))

# ::id 412
# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
# ::tok The easiest way to look at inheritance is as an " ... is a kind of " relationship .
# ::alignments 1-2|0.0 2-3|0 4-5|0.2 6-7|0.2.0 14-15|0.3.0 15-16|0.1 17-18|0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:39.862746 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 43
# ::node	0	way	2-3
# ::node	0.0	simple-02	1-2
# ::node	0.1	have-degree-91	15-16
# ::node	0.1.0	more	
# ::node	0.2	look-01	4-5
# ::node	0.2.0	inherit-01	6-7
# ::node	0.3	relation-03	17-18
# ::node	0.3.0	kind	14-15
# ::root	0	way
# ::edge	have-degree-91	ARG3	more	0.1	0.1.0
# ::edge	look-01	ARG1	inherit-01	0.2	0.2.0
# ::edge	relation-03	mod	kind	0.3	0.3.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	ARG1-of	simple-02	0	0.0
# ::edge	way	domain	look-01	0	0.2
# ::edge	way	domain	relation-03	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / simple-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG3 (MRPNode-3 / more)) :domain (MRPNode-4 / look-01 :ARG1 (MRPNode-5 / inherit-01)) :domain (MRPNode-6 / relation-03 :mod (MRPNode-7 / kind)))

# ::id 413
# ::snt The advantage being the less time consumption in comparison to other amateur methods.
# ::tok The advantage being the less time consumption in comparison to other amateur methods .
# ::alignments 1-2|0 4-5|0.0.0.0 5-6|0.0.0 6-7|0.0 8-9|0.0.1 10-11|0.0.1.0.0 11-12|0.0.1.0.1 12-13|0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.869650 ::parser eager_oracle ::smatch 1.0 ::n_actions 40
# ::node	0	advantage-01	1-2
# ::node	0.0	consume-01	6-7
# ::node	0.0.0	time	5-6
# ::node	0.0.0.0	less	4-5
# ::node	0.0.1	compare-01	8-9
# ::node	0.0.1.0	method	12-13
# ::node	0.0.1.0.0	other	10-11
# ::node	0.0.1.0.1	amateur	11-12
# ::root	0	advantage-01
# ::edge	advantage-01	ARG1	consume-01	0	0.0
# ::edge	compare-01	ARG2	method	0.0.1	0.0.1.0
# ::edge	consume-01	ARG1	time	0.0	0.0.0
# ::edge	consume-01	ARG1-of	compare-01	0.0	0.0.1
# ::edge	method	mod	amateur	0.0.1.0	0.0.1.0.1
# ::edge	method	mod	other	0.0.1.0	0.0.1.0.0
# ::edge	time	mod	less	0.0.0	0.0.0.0
(MRPNode-0 / advantage-01 :ARG1 (MRPNode-1 / consume-01 :ARG1 (MRPNode-2 / time :mod (MRPNode-3 / less)) :ARG1-of (MRPNode-4 / compare-01 :ARG2 (MRPNode-5 / method :mod (MRPNode-6 / other) :mod (MRPNode-7 / amateur)))))

# ::id 414
# ::snt It is mainly used to calculate the probability of one event’s outcome given that a previous event happened.
# ::tok It is mainly used to calculate the probability of one event 's outcome given that a previous event happened .
# ::alignments 0-1|0.0 2-3|0.1 3-4|0 5-6|0.2 7-8|0.2.0 9-10|0.2.0.0.0.0 10-11|0.2.0.0.0 12-13|0.2.0.0 13-14|0.3 16-17|0.3.0.0 17-18|0.3.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.896936 ::parser eager_oracle ::smatch 1.0 ::n_actions 55
# ::node	0	use-01	3-4
# ::node	0.0	it	0-1
# ::node	0.1	main	2-3
# ::node	0.2	calculate-01	5-6
# ::node	0.2.0	probable	7-8
# ::node	0.2.0.0	outcome	12-13
# ::node	0.2.0.0.0	event	10-11
# ::node	0.2.0.0.0.0	1	9-10
# ::node	0.3	give-01	13-14
# ::node	0.3.0	event	17-18
# ::node	0.3.0.0	previous	16-17
# ::root	0	use-01
# ::edge	calculate-01	ARG1	probable	0.2	0.2.0
# ::edge	event	mod	previous	0.3.0	0.3.0.0
# ::edge	event	quant	1	0.2.0.0.0	0.2.0.0.0.0
# ::edge	give-01	ARG1	event	0.3	0.3.0
# ::edge	outcome	poss	event	0.2.0.0	0.2.0.0.0
# ::edge	probable	domain	outcome	0.2.0	0.2.0.0
# ::edge	use-01	ARG1	it	0	0.0
# ::edge	use-01	ARG1-of	give-01	0	0.3
# ::edge	use-01	ARG2	calculate-01	0	0.2
# ::edge	use-01	mod	main	0	0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / it) :mod (MRPNode-2 / main) :ARG2 (MRPNode-3 / calculate-01 :ARG1 (MRPNode-4 / probable :domain (MRPNode-5 / outcome :poss (MRPNode-6 / event :quant 1)))) :ARG1-of (MRPNode-7 / give-01 :ARG1 (MRPNode-8 / event :mod (MRPNode-9 / previous))))

# ::id 415
# ::snt Instead, a new object is made to inherit properties of objects which already exist.
# ::tok Instead , a new object is made to inherit properties of objects which already exist .
# ::alignments 0-1|0 3-4|0.0.0.1.1 4-5|0.0.0.1 6-7|0.0 8-9|0.0.0 9-10|0.0.0.0 11-12|0.0.0.0.0 13-14|0.0.0.1.0.0 14-15|0.0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.915788 ::parser eager_oracle ::smatch 1.0 ::n_actions 48
# ::node	0	instead-of-91	0-1
# ::node	0.0	make-01	6-7
# ::node	0.0.0	inherit-01	8-9
# ::node	0.0.0.0	property	9-10
# ::node	0.0.0.0.0	object	11-12
# ::node	0.0.0.1	object	4-5
# ::node	0.0.0.1.0	exist-01	14-15
# ::node	0.0.0.1.0.0	already	13-14
# ::node	0.0.0.1.1	new-01	3-4
# ::root	0	instead-of-91
# ::edge	exist-01	ARG1	object	0.0.0.1.0	0.0.0.0.0
# ::edge	exist-01	time	already	0.0.0.1.0	0.0.0.1.0.0
# ::edge	inherit-01	ARG0	object	0.0.0	0.0.0.1
# ::edge	inherit-01	ARG1	property	0.0.0	0.0.0.0
# ::edge	instead-of-91	ARG1	make-01	0	0.0
# ::edge	make-01	ARG1	inherit-01	0.0	0.0.0
# ::edge	make-01	ARG1	object	0.0	0.0.0.1
# ::edge	object	ARG1-of	exist-01	0.0.0.1	0.0.0.1.0
# ::edge	object	ARG1-of	new-01	0.0.0.1	0.0.0.1.1
# ::edge	property	poss	object	0.0.0.0	0.0.0.0.0
(MRPNode-0 / instead-of-91 :ARG1 (MRPNode-1 / make-01 :ARG1 (MRPNode-2 / inherit-01 :ARG1 (MRPNode-3 / property :poss (MRPNode-4 / object)) :ARG0 (MRPNode-5 / object :ARG1-of (MRPNode-6 / exist-01 :ARG1 MRPNode-4 :time (MRPNode-7 / already)) :ARG1-of (MRPNode-8 / new-01))) :ARG1 MRPNode-5))

# ::id 416
# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
# ::tok The easiest way to look at inheritance is as an " ... is a kind of " relationship .
# ::alignments 1-2|0.0 2-3|0 4-5|0.2 6-7|0.2.0 14-15|0.3.0 15-16|0.1 17-18|0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:39.925306 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 43
# ::node	0	way	2-3
# ::node	0.0	simple-02	1-2
# ::node	0.1	have-degree-91	15-16
# ::node	0.1.0	more	
# ::node	0.2	look-01	4-5
# ::node	0.2.0	inherit-01	6-7
# ::node	0.3	relation-03	17-18
# ::node	0.3.0	kind	14-15
# ::root	0	way
# ::edge	have-degree-91	ARG3	more	0.1	0.1.0
# ::edge	look-01	ARG1	inherit-01	0.2	0.2.0
# ::edge	relation-03	mod	kind	0.3	0.3.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	ARG1-of	simple-02	0	0.0
# ::edge	way	domain	look-01	0	0.2
# ::edge	way	domain	relation-03	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / simple-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG3 (MRPNode-3 / more)) :domain (MRPNode-4 / look-01 :ARG1 (MRPNode-5 / inherit-01)) :domain (MRPNode-6 / relation-03 :mod (MRPNode-7 / kind)))

# ::id 417
# ::snt Later versions of PageRank (see the below formulas) would assume a probability distribution between 0 and 1.
# ::tok Later versions of PageRank ( see the below formulas ) would assume a probability distribution between 0 and 1 .
# ::alignments 1-2|0.1 3-4|0.1.2+0.1.2.0+0.1.2.0.0 5-6|0.1.1 7-8|0.1.1.1.0 8-9|0.1.1.1 11-12|0 13-14|0.0.0 14-15|0.0 15-16|0.0.1 16-17|0.0.1.0 18-19|0.0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.951129 ::parser eager_oracle ::smatch 0.9019607843137255 ::n_actions 55
# ::node	0	assume-02	11-12
# ::node	0.0	distribute-01	14-15
# ::node	0.0.0	probability	13-14
# ::node	0.0.1	between	15-16
# ::node	0.0.1.0	0	16-17
# ::node	0.0.1.1	1	18-19
# ::node	0.1	version	1-2
# ::node	0.1.0	after	
# ::node	0.1.1	see-01	5-6
# ::node	0.1.1.0	imperative	
# ::node	0.1.1.1	formula	8-9
# ::node	0.1.1.1.0	below	7-8
# ::node	0.1.1.2	you	
# ::node	0.1.2	company	3-4
# ::node	0.1.2.0	name	3-4
# ::node	0.1.2.0.0	pagerank	3-4
# ::root	0	assume-02
# ::edge	assume-02	ARG0	version	0	0.1
# ::edge	assume-02	ARG1	distribute-01	0	0.0
# ::edge	between	op1	0	0.0.1	0.0.1.0
# ::edge	between	op2	1	0.0.1	0.0.1.1
# ::edge	company	name	name	0.1.2	0.1.2.0
# ::edge	distribute-01	ARG1	probability	0.0	0.0.0
# ::edge	distribute-01	ARG2	between	0.0	0.0.1
# ::edge	formula	mod	below	0.1.1.1	0.1.1.1.0
# ::edge	name	op1	pagerank	0.1.2.0	0.1.2.0.0
# ::edge	see-01	ARG0	you	0.1.1	0.1.1.2
# ::edge	see-01	ARG1	formula	0.1.1	0.1.1.1
# ::edge	see-01	mode	imperative	0.1.1	0.1.1.0
# ::edge	version	mod	after	0.1	0.1.0
# ::edge	version	mod	see-01	0.1	0.1.1
# ::edge	version	poss	company	0.1	0.1.2
(MRPNode-0 / assume-02 :ARG1 (MRPNode-1 / distribute-01 :ARG1 (MRPNode-2 / probability) :ARG2 (MRPNode-3 / between :op1 0 :op2 1)) :ARG0 (MRPNode-4 / version :mod (MRPNode-5 / after) :mod (MRPNode-6 / see-01 :mode imperative :ARG1 (MRPNode-7 / formula :mod (MRPNode-8 / below)) :ARG0 (MRPNode-9 / you)) :poss (MRPNode-10 / company :name (MRPNode-11 / name :op1 pagerank))))

# ::id 418
# ::snt Terms are basically the words or any indexing unit used to identify the contents of a text.
# ::tok Terms are basically the words or any indexing unit used to identify the contents of a text .
# ::alignments 0-1|0.3 2-3|0.2 4-5|0.0 5-6|0 6-7|0.1.0 8-9|0.1 9-10|0.1.1 11-12|0.1.1.0 13-14|0.1.1.0.0+0.1.1.0.0.0 16-17|0.1.1.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:39.963164 ::parser eager_oracle ::smatch 0.9565217391304348 ::n_actions 54
# ::node	0	or	5-6
# ::node	0.0	word	4-5
# ::node	0.1	unit	8-9
# ::node	0.1.0	any	6-7
# ::node	0.1.1	use-01	9-10
# ::node	0.1.1.0	identify-01	11-12
# ::node	0.1.1.0.0	thing	13-14
# ::node	0.1.1.0.0.0	contain-01	13-14
# ::node	0.1.1.0.0.0.0	text	16-17
# ::node	0.1.2	define-01	
# ::node	0.2	basic	2-3
# ::node	0.3	term	0-1
# ::root	0	or
# ::edge	contain-01	ARG0	text	0.1.1.0.0.0	0.1.1.0.0.0.0
# ::edge	identify-01	ARG1	thing	0.1.1.0	0.1.1.0.0
# ::edge	or	domain	basic	0	0.2
# ::edge	or	domain	term	0	0.3
# ::edge	or	op1	word	0	0.0
# ::edge	or	op2	unit	0	0.1
# ::edge	thing	ARG1-of	contain-01	0.1.1.0.0	0.1.1.0.0.0
# ::edge	unit	ARG0-of	define-01	0.1	0.1.2
# ::edge	unit	ARG0-of	use-01	0.1	0.1.1
# ::edge	unit	mod	any	0.1	0.1.0
# ::edge	use-01	ARG2	identify-01	0.1.1	0.1.1.0
(MRPNode-0 / or :op1 (MRPNode-1 / word) :op2 (MRPNode-2 / unit :mod (MRPNode-3 / any) :ARG0-of (MRPNode-4 / use-01 :ARG2 (MRPNode-5 / identify-01 :ARG1 (MRPNode-6 / thing :ARG1-of (MRPNode-7 / contain-01 :ARG0 (MRPNode-8 / text))))) :ARG0-of (MRPNode-9 / define-01)) :domain (MRPNode-10 / basic) :domain (MRPNode-11 / term))

# ::id 419
# ::snt Here by meaning that a program can be an optimal plan for the produced action.
# ::tok Here by meaning that a program can be an optimal plan for the produced action .
# ::alignments 0-1|0.0 2-3|0 5-6|0.1.0.0 6-7|0.1 9-10|0.1.0.1 10-11|0.1.0 13-14|0.1.0.2.0 14-15|0.1.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:39.970001 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	mean-01	2-3
# ::node	0.0	here	0-1
# ::node	0.1	possible-01	6-7
# ::node	0.1.0	plan-01	10-11
# ::node	0.1.0.0	program	5-6
# ::node	0.1.0.1	optimal	9-10
# ::node	0.1.0.2	act-02	14-15
# ::node	0.1.0.2.0	produce-01	13-14
# ::root	0	mean-01
# ::edge	act-02	ARG1-of	produce-01	0.1.0.2	0.1.0.2.0
# ::edge	mean-01	ARG2	here	0	0.0
# ::edge	mean-01	ARG2	possible-01	0	0.1
# ::edge	plan-01	ARG1	program	0.1.0	0.1.0.0
# ::edge	plan-01	mod	optimal	0.1.0	0.1.0.1
# ::edge	plan-01	purpose	act-02	0.1.0	0.1.0.2
# ::edge	possible-01	ARG1	plan-01	0.1	0.1.0
(MRPNode-0 / mean-01 :ARG2 (MRPNode-1 / here) :ARG2 (MRPNode-2 / possible-01 :ARG1 (MRPNode-3 / plan-01 :ARG1 (MRPNode-4 / program) :mod (MRPNode-5 / optimal) :purpose (MRPNode-6 / act-02 :ARG1-of (MRPNode-7 / produce-01)))))

# ::id 420
# ::snt Occasionally it is advantageous to differentiate between these uses, as it is not necessarily noticeable from context.
# ::tok Occasionally it is advantageous to differentiate between these uses , as it is not necessarily noticeable from context .
# ::alignments 0-1|0.2 3-4|0+0.1 5-6|0.0 7-8|0.0.0.0 8-9|0.0.0 10-11|0.1.0.1.0 13-14|0.1.0.0 15-16|0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.979681 ::parser eager_oracle ::smatch 0.8571428571428572 ::n_actions 47
# ::node	0	advantage-01	3-4
# ::node	0.0	differentiate-01	5-6
# ::node	0.0.0	use-01	8-9
# ::node	0.0.0.0	this	7-8
# ::node	0.1	cause-01	3-4
# ::node	0.1.0	possible-01	
# ::node	0.1.0.0	-	13-14
# ::node	0.1.0.1	notice-01	15-16
# ::node	0.1.0.1.0	context	10-11
# ::node	0.2	occasional	0-1
# ::root	0	advantage-01
# ::edge	advantage-01	ARG1	differentiate-01	0	0.0
# ::edge	advantage-01	ARG1-of	cause-01	0	0.1
# ::edge	advantage-01	frequency	occasional	0	0.2
# ::edge	cause-01	ARG0	possible-01	0.1	0.1.0
# ::edge	differentiate-01	ARG1	use-01	0.0	0.0.0
# ::edge	notice-01	source	context	0.1.0.1	0.1.0.1.0
# ::edge	possible-01	ARG1	notice-01	0.1.0	0.1.0.1
# ::edge	possible-01	polarity	-	0.1.0	0.1.0.0
# ::edge	use-01	mod	this	0.0.0	0.0.0.0
(MRPNode-0 / advantage-01 :ARG1 (MRPNode-1 / differentiate-01 :ARG1 (MRPNode-2 / use-01 :mod (MRPNode-3 / this))) :ARG1-of (MRPNode-4 / cause-01 :ARG0 (MRPNode-5 / possible-01 :polarity - :ARG1 (MRPNode-6 / notice-01 :source (MRPNode-7 / context)))) :frequency (MRPNode-8 / occasional))

# ::id 421
# ::snt This can be useful when the number of times a word appears is not considered important.
# ::tok This can be useful when the number of times a word appears is not considered important .
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 6-7|0.1.1.0 10-11|0.1.1.0.0.0 11-12|0.1.1.0.0 13-14|0.1.0 14-15|0.1 15-16|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:39.989543 ::parser eager_oracle ::smatch 1.0 ::n_actions 48
# ::node	0	possible-01	1-2
# ::node	0.0	useful-05	3-4
# ::node	0.0.0	this	0-1
# ::node	0.1	consider-01	14-15
# ::node	0.1.0	-	13-14
# ::node	0.1.1	important-01	15-16
# ::node	0.1.1.0	number	6-7
# ::node	0.1.1.0.0	appear-01	11-12
# ::node	0.1.1.0.0.0	word	10-11
# ::root	0	possible-01
# ::edge	appear-01	ARG1	word	0.1.1.0.0	0.1.1.0.0.0
# ::edge	consider-01	ARG1	important-01	0.1	0.1.1
# ::edge	consider-01	polarity	-	0.1	0.1.0
# ::edge	important-01	ARG1	number	0.1.1	0.1.1.0
# ::edge	number	quant-of	appear-01	0.1.1.0	0.1.1.0.0
# ::edge	possible-01	ARG1	useful-05	0	0.0
# ::edge	possible-01	condition	consider-01	0	0.1
# ::edge	useful-05	ARG1	this	0.0	0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / useful-05 :ARG1 (MRPNode-2 / this)) :condition (MRPNode-3 / consider-01 :polarity - :ARG1 (MRPNode-4 / important-01 :ARG1 (MRPNode-5 / number :quant-of (MRPNode-6 / appear-01 :ARG1 (MRPNode-7 / word))))))

# ::id 422
# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
# ::tok The easiest way to look at inheritance is as an " ... is a kind of " relationship .
# ::alignments 1-2|0.0 2-3|0 4-5|0.2 6-7|0.2.0 14-15|0.3.0 15-16|0.1 17-18|0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:39.999038 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 43
# ::node	0	way	2-3
# ::node	0.0	simple-02	1-2
# ::node	0.1	have-degree-91	15-16
# ::node	0.1.0	more	
# ::node	0.2	look-01	4-5
# ::node	0.2.0	inherit-01	6-7
# ::node	0.3	relation-03	17-18
# ::node	0.3.0	kind	14-15
# ::root	0	way
# ::edge	have-degree-91	ARG3	more	0.1	0.1.0
# ::edge	look-01	ARG1	inherit-01	0.2	0.2.0
# ::edge	relation-03	mod	kind	0.3	0.3.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	ARG1-of	simple-02	0	0.0
# ::edge	way	domain	look-01	0	0.2
# ::edge	way	domain	relation-03	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / simple-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG3 (MRPNode-3 / more)) :domain (MRPNode-4 / look-01 :ARG1 (MRPNode-5 / inherit-01)) :domain (MRPNode-6 / relation-03 :mod (MRPNode-7 / kind)))

# ::id 423
# ::snt Since the PageRank is the most important algorithms which is used in the Google engine.
# ::tok Since the PageRank is the most important algorithms which is used in the Google engine .
# ::alignments 0-1|0 2-3|0.0.2+0.0.2.0+0.0.2.0.0 5-6|0.0.1.0 6-7|0.0.1.1 7-8|0.0 10-11|0.0.0 13-14|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 14-15|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.012311 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 41
# ::node	0	cause-01	0-1
# ::node	0.0	algorithm	7-8
# ::node	0.0.0	use-01	10-11
# ::node	0.0.0.0	engine	14-15
# ::node	0.0.0.0.0	company	13-14
# ::node	0.0.0.0.0.0	name	13-14
# ::node	0.0.0.0.0.0.0	google	13-14
# ::node	0.0.1	have-degree-91	
# ::node	0.0.1.0	most	5-6
# ::node	0.0.1.1	important-01	6-7
# ::node	0.0.2	publication	2-3
# ::node	0.0.2.0	name	2-3
# ::node	0.0.2.0.0	pagerank	2-3
# ::root	0	cause-01
# ::edge	algorithm	ARG1-of	have-degree-91	0.0	0.0.1
# ::edge	algorithm	ARG1-of	important-01	0.0	0.0.1.1
# ::edge	algorithm	ARG1-of	use-01	0.0	0.0.0
# ::edge	algorithm	domain	publication	0.0	0.0.2
# ::edge	cause-01	ARG0	algorithm	0	0.0
# ::edge	company	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	engine	mod	company	0.0.0.0	0.0.0.0.0
# ::edge	have-degree-91	ARG2	important-01	0.0.1	0.0.1.1
# ::edge	have-degree-91	ARG3	most	0.0.1	0.0.1.0
# ::edge	name	op1	google	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op1	pagerank	0.0.2.0	0.0.2.0.0
# ::edge	publication	name	name	0.0.2	0.0.2.0
# ::edge	use-01	ARG2	engine	0.0.0	0.0.0.0
(MRPNode-0 / cause-01 :ARG0 (MRPNode-1 / algorithm :ARG1-of (MRPNode-2 / use-01 :ARG2 (MRPNode-3 / engine :mod (MRPNode-4 / company :name (MRPNode-5 / name :op1 google)))) :ARG1-of (MRPNode-6 / have-degree-91 :ARG3 (MRPNode-7 / most) :ARG2 (MRPNode-8 / important-01)) :ARG1-of MRPNode-8 :domain (MRPNode-9 / publication :name (MRPNode-10 / name :op1 pagerank))))

# ::id 424
# ::snt However an object cannot be cast to a class which is no relative of it.
# ::tok However an object cannot be cast to a class which is no relative of it .
# ::alignments 2-3|0.0.1.0 3-4|0.0 5-6|0.0.1 8-9|0.0.1.0.0.1 11-12|0.0.0+0.0.1.0.0.0 12-13|0.0.1.0.0 13-14|0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.018206 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	have-concession-91	13-14
# ::node	0.0	possible-01	3-4
# ::node	0.0.0	-	11-12
# ::node	0.0.1	cast-01	5-6
# ::node	0.0.1.0	object	2-3
# ::node	0.0.1.0.0	related-04	12-13
# ::node	0.0.1.0.0.0	-	11-12
# ::node	0.0.1.0.0.1	class	8-9
# ::root	0	have-concession-91
# ::edge	cast-01	ARG1	object	0.0.1	0.0.1.0
# ::edge	cast-01	ARG2	class	0.0.1	0.0.1.0.0.1
# ::edge	have-concession-91	ARG1	possible-01	0	0.0
# ::edge	object	ARG1-of	related-04	0.0.1.0	0.0.1.0.0
# ::edge	possible-01	ARG1	cast-01	0.0	0.0.1
# ::edge	possible-01	polarity	-	0.0	0.0.0
# ::edge	related-04	ARG2	class	0.0.1.0.0	0.0.1.0.0.1
# ::edge	related-04	polarity	-	0.0.1.0.0	0.0.1.0.0.0
(MRPNode-0 / have-concession-91 :ARG1 (MRPNode-1 / possible-01 :polarity - :ARG1 (MRPNode-2 / cast-01 :ARG1 (MRPNode-3 / object :ARG1-of (MRPNode-4 / related-04 :polarity - :ARG2 (MRPNode-5 / class))) :ARG2 MRPNode-5)))

# ::id 425
# ::snt Since the PageRank is the most important algorithms which is used in the Google engine.
# ::tok Since the PageRank is the most important algorithms which is used in the Google engine .
# ::alignments 0-1|0 2-3|0.0.2+0.0.2.0+0.0.2.0.0 5-6|0.0.1.0 6-7|0.0.1.1 7-8|0.0 10-11|0.0.0 13-14|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 14-15|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.031356 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 41
# ::node	0	cause-01	0-1
# ::node	0.0	algorithm	7-8
# ::node	0.0.0	use-01	10-11
# ::node	0.0.0.0	engine	14-15
# ::node	0.0.0.0.0	company	13-14
# ::node	0.0.0.0.0.0	name	13-14
# ::node	0.0.0.0.0.0.0	google	13-14
# ::node	0.0.1	have-degree-91	
# ::node	0.0.1.0	most	5-6
# ::node	0.0.1.1	important-01	6-7
# ::node	0.0.2	publication	2-3
# ::node	0.0.2.0	name	2-3
# ::node	0.0.2.0.0	pagerank	2-3
# ::root	0	cause-01
# ::edge	algorithm	ARG1-of	have-degree-91	0.0	0.0.1
# ::edge	algorithm	ARG1-of	important-01	0.0	0.0.1.1
# ::edge	algorithm	ARG1-of	use-01	0.0	0.0.0
# ::edge	algorithm	domain	publication	0.0	0.0.2
# ::edge	cause-01	ARG0	algorithm	0	0.0
# ::edge	company	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	engine	mod	company	0.0.0.0	0.0.0.0.0
# ::edge	have-degree-91	ARG2	important-01	0.0.1	0.0.1.1
# ::edge	have-degree-91	ARG3	most	0.0.1	0.0.1.0
# ::edge	name	op1	google	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op1	pagerank	0.0.2.0	0.0.2.0.0
# ::edge	publication	name	name	0.0.2	0.0.2.0
# ::edge	use-01	ARG2	engine	0.0.0	0.0.0.0
(MRPNode-0 / cause-01 :ARG0 (MRPNode-1 / algorithm :ARG1-of (MRPNode-2 / use-01 :ARG2 (MRPNode-3 / engine :mod (MRPNode-4 / company :name (MRPNode-5 / name :op1 google)))) :ARG1-of (MRPNode-6 / have-degree-91 :ARG3 (MRPNode-7 / most) :ARG2 (MRPNode-8 / important-01)) :ARG1-of MRPNode-8 :domain (MRPNode-9 / publication :name (MRPNode-10 / name :op1 pagerank))))

# ::id 426
# ::snt After this, it is using this to pick the best overall path.
# ::tok After this , it is using this to pick the best overall path .
# ::alignments 0-1|0.3 1-2|0.3.0 3-4|0.1 5-6|0 6-7|0.0 8-9|0.2 10-11|0.2.0.1 11-12|0.2.0.0 12-13|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.044174 ::parser eager_oracle ::smatch 0.8837209302325582 ::n_actions 46
# ::node	0	use-01	5-6
# ::node	0.0	this	6-7
# ::node	0.1	it	3-4
# ::node	0.2	pick-01	8-9
# ::node	0.2.0	path	12-13
# ::node	0.2.0.0	overall	11-12
# ::node	0.2.0.1	good-02	10-11
# ::node	0.2.0.2	have-degree-91	
# ::node	0.2.0.2.0	most	
# ::node	0.3	after	0-1
# ::node	0.3.0	this	1-2
# ::root	0	use-01
# ::edge	after	op1	this	0.3	0.3.0
# ::edge	have-degree-91	ARG2	good-02	0.2.0.2	0.2.0.1
# ::edge	have-degree-91	ARG3	most	0.2.0.2	0.2.0.2.0
# ::edge	path	ARG1-of	good-02	0.2.0	0.2.0.1
# ::edge	path	ARG1-of	have-degree-91	0.2.0	0.2.0.2
# ::edge	path	mod	overall	0.2.0	0.2.0.0
# ::edge	pick-01	ARG0	it	0.2	0.1
# ::edge	pick-01	ARG1	path	0.2	0.2.0
# ::edge	use-01	ARG0	it	0	0.1
# ::edge	use-01	ARG1	this	0	0.0
# ::edge	use-01	ARG2	pick-01	0	0.2
# ::edge	use-01	time	after	0	0.3
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / this) :ARG0 (MRPNode-2 / it) :ARG2 (MRPNode-3 / pick-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-4 / path :mod (MRPNode-5 / overall) :ARG1-of (MRPNode-6 / good-02) :ARG1-of (MRPNode-7 / have-degree-91 :ARG2 MRPNode-6 :ARG3 (MRPNode-8 / most)))) :time (MRPNode-9 / after :op1 (MRPNode-10 / this)))

# ::id 427
# ::snt It has no relationship to computer programming; instead it is a process of finding a satisfactory algorithm.
# ::tok It has no relationship to computer programming ; instead it is a process of finding a satisfactory algorithm .
# ::alignments 2-3|0.0.0 3-4|0.0 5-6|0.0.2.0 6-7|0.0.2 9-10|0.0.1 12-13|0.1 14-15|0.1.0 16-17|0.1.0.0.0 17-18|0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.056118 ::parser eager_oracle ::smatch 0.8421052631578948 ::n_actions 48
# ::node	0	contrast-01	
# ::node	0.0	relation-03	3-4
# ::node	0.0.0	-	2-3
# ::node	0.0.1	it	9-10
# ::node	0.0.2	program-01	6-7
# ::node	0.0.2.0	computer	5-6
# ::node	0.1	process-02	12-13
# ::node	0.1.0	find-01	14-15
# ::node	0.1.0.0	algorithm	17-18
# ::node	0.1.0.0.0	satisfactory-03	16-17
# ::root	0	contrast-01
# ::edge	algorithm	ARG1-of	satisfactory-03	0.1.0.0	0.1.0.0.0
# ::edge	contrast-01	ARG1	relation-03	0	0.0
# ::edge	contrast-01	ARG2	process-02	0	0.1
# ::edge	find-01	ARG0	it	0.1.0	0.0.1
# ::edge	find-01	ARG1	algorithm	0.1.0	0.1.0.0
# ::edge	process-02	ARG1	find-01	0.1	0.1.0
# ::edge	program-01	mod	computer	0.0.2	0.0.2.0
# ::edge	relation-03	ARG1	it	0.0	0.0.1
# ::edge	relation-03	ARG2	program-01	0.0	0.0.2
# ::edge	relation-03	polarity	-	0.0	0.0.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / relation-03 :polarity - :ARG1 (MRPNode-2 / it) :ARG2 (MRPNode-3 / program-01 :mod (MRPNode-4 / computer))) :ARG2 (MRPNode-5 / process-02 :ARG1 (MRPNode-6 / find-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-7 / algorithm :ARG1-of (MRPNode-8 / satisfactory-03)))))

# ::id 428
# ::snt The further down an inheritance tree you get, the more specific the classes become.
# ::tok The further down an inheritance tree you get , the more specific the classes become .
# ::alignments 2-3|0.0.0.0.0.1 4-5|0.0.0.0.1 5-6|0.0.0.0 6-7|0.0.0.0.0.0 7-8|0.0.0.0.0 10-11|0.0 11-12|0.1.0.0 13-14|0.1.0.0.0 14-15|0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.068943 ::parser eager_oracle ::smatch 0.6190476190476191 ::n_actions 42
# ::node	0	correlate-91	
# ::node	0.0	more	10-11
# ::node	0.0.0	have-quant-91	
# ::node	0.0.0.0	tree	5-6
# ::node	0.0.0.0.0	get-05	7-8
# ::node	0.0.0.0.0.0	you	6-7
# ::node	0.0.0.0.0.1	down	2-3
# ::node	0.0.0.0.1	inherit-01	4-5
# ::node	0.1	more	
# ::node	0.1.0	have-quant-91	
# ::node	0.1.0.0	specific-02	11-12
# ::node	0.1.0.0.0	class	13-14
# ::node	0.1.0.1	become-01	14-15
# ::root	0	correlate-91
# ::edge	correlate-91	ARG1	more	0	0.0
# ::edge	correlate-91	ARG2	more	0	0.1
# ::edge	get-05	ARG0	you	0.0.0.0.0	0.0.0.0.0.0
# ::edge	get-05	ARG2	down	0.0.0.0.0	0.0.0.0.0.1
# ::edge	have-quant-91	ARG1	become-01	0.1.0	0.1.0.1
# ::edge	have-quant-91	ARG1	specific-02	0.1.0	0.1.0.0
# ::edge	have-quant-91	ARG1	tree	0.0.0	0.0.0.0
# ::edge	more	ARG3-of	have-quant-91	0.0	0.0.0
# ::edge	more	ARG3-of	have-quant-91	0.1	0.1.0
# ::edge	specific-02	ARG1	class	0.1.0.0	0.1.0.0.0
# ::edge	tree	mod	get-05	0.0.0.0	0.0.0.0.0
# ::edge	tree	mod	inherit-01	0.0.0.0	0.0.0.0.1
(MRPNode-0 / correlate-91 :ARG1 (MRPNode-1 / more :ARG3-of (MRPNode-2 / have-quant-91 :ARG1 (MRPNode-3 / tree :mod (MRPNode-4 / get-05 :ARG0 (MRPNode-5 / you) :ARG2 (MRPNode-6 / down)) :mod (MRPNode-7 / inherit-01)))) :ARG2 (MRPNode-8 / more :ARG3-of (MRPNode-9 / have-quant-91 :ARG1 (MRPNode-10 / specific-02 :ARG1 (MRPNode-11 / class)) :ARG1 (MRPNode-12 / become-01))))

# ::id 429
# ::snt It is similar to divide and conquer, however is differentiated as its subproblems are not independent.
# ::tok It is similar to divide and conquer , however is differentiated as its subproblems are not independent .
# ::alignments 2-3|0.1 4-5|0.1.0.0 5-6|0.1.0 6-7|0.1.0.1 10-11|0.0+0.0.1 11-12|0 12-13|0.0.0 13-14|0.0.0.0.1 15-16|0.0.0.0.0 16-17|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.104619 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 58
# ::node	0	contrast-01	11-12
# ::node	0.0	differ-02	10-11
# ::node	0.0.0	it	12-13
# ::node	0.0.0.0	depend-01	16-17
# ::node	0.0.0.0.0	-	15-16
# ::node	0.0.0.0.1	subproblem	13-14
# ::node	0.0.1	cause-01	10-11
# ::node	0.1	resemble-01	2-3
# ::node	0.1.0	and	5-6
# ::node	0.1.0.0	divide-02	4-5
# ::node	0.1.0.1	conquer-01	6-7
# ::root	0	contrast-01
# ::edge	and	op1	divide-02	0.1.0	0.1.0.0
# ::edge	and	op2	conquer-01	0.1.0	0.1.0.1
# ::edge	cause-01	ARG0	depend-01	0.0.1	0.0.0.0
# ::edge	contrast-01	ARG1	resemble-01	0	0.1
# ::edge	contrast-01	ARG2	differ-02	0	0.0
# ::edge	depend-01	ARG0	subproblem	0.0.0.0	0.0.0.0.1
# ::edge	depend-01	polarity	-	0.0.0.0	0.0.0.0.0
# ::edge	differ-02	ARG1	it	0.0	0.0.0
# ::edge	differ-02	ARG1-of	cause-01	0.0	0.0.1
# ::edge	it	mod	depend-01	0.0.0	0.0.0.0
# ::edge	resemble-01	ARG2	and	0.1	0.1.0
(MRPNode-0 / contrast-01 :ARG2 (MRPNode-1 / differ-02 :ARG1 (MRPNode-2 / it :domain-of (MRPNode-3 / depend-01 :polarity - :ARG0 (MRPNode-4 / subproblem))) :ARG1-of (MRPNode-5 / cause-01 :ARG0 MRPNode-3)) :ARG1 (MRPNode-6 / resemble-01 :ARG2 (MRPNode-7 / and :op1 (MRPNode-8 / divide-02) :op2 (MRPNode-9 / conquer-01))))

# ::id 430
# ::snt The differing application has a direct influence on what the definition of the term means.
# ::tok The differing application has a direct influence on what the definition of the term means .
# ::alignments 1-2|0.1.0 2-3|0.1 5-6|0.2 6-7|0 10-11|0.0.0.0 13-14|0.0.0.0.0 14-15|0.0+0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.113033 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	influence-01	6-7
# ::node	0.0	thing	14-15
# ::node	0.0.0	mean-01	14-15
# ::node	0.0.0.0	define-01	10-11
# ::node	0.0.0.0.0	term	13-14
# ::node	0.1	apply-02	2-3
# ::node	0.1.0	differ-01	1-2
# ::node	0.2	direct-02	5-6
# ::root	0	influence-01
# ::edge	apply-02	ARG1-of	differ-01	0.1	0.1.0
# ::edge	define-01	ARG1	term	0.0.0.0	0.0.0.0.0
# ::edge	influence-01	ARG0	apply-02	0	0.1
# ::edge	influence-01	ARG1	thing	0	0.0
# ::edge	influence-01	ARG1-of	direct-02	0	0.2
# ::edge	mean-01	ARG1	define-01	0.0.0	0.0.0.0
# ::edge	thing	ARG2-of	mean-01	0.0	0.0.0
(MRPNode-0 / influence-01 :ARG1 (MRPNode-1 / thing :ARG2-of (MRPNode-2 / mean-01 :ARG1 (MRPNode-3 / define-01 :ARG1 (MRPNode-4 / term)))) :ARG0 (MRPNode-5 / apply-02 :ARG1-of (MRPNode-6 / differ-01)) :ARG1-of (MRPNode-7 / direct-02))

# ::id 431
# ::snt "It also provides a way to generalize du to the ""is a"" relationship between classes."
# ::tok " It also provides a way to generalize du to the " " is a " " relationship between classes . "
# ::alignments 1-2|0.0.0.2 2-3|0.1 3-4|0 5-6|0.0 7-8|0.0.0 8-9|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.1 17-18|0.0.0.1 19-20|0.0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.124451 ::parser eager_oracle ::smatch 0.975609756097561 ::n_actions 50
# ::node	0	provide-01	3-4
# ::node	0.0	way	5-6
# ::node	0.0.0	generalize-01	7-8
# ::node	0.0.0.0	organization	8-9
# ::node	0.0.0.0.0	name	8-9
# ::node	0.0.0.0.0.0	du	8-9
# ::node	0.0.0.0.0.1	du	8-9
# ::node	0.0.0.1	relation-03	17-18
# ::node	0.0.0.1.0	class	19-20
# ::node	0.0.0.2	it	1-2
# ::node	0.1	also	2-3
# ::root	0	provide-01
# ::edge	generalize-01	ARG0	it	0.0.0	0.0.0.2
# ::edge	generalize-01	ARG1	organization	0.0.0	0.0.0.0
# ::edge	generalize-01	ARG2	relation-03	0.0.0	0.0.0.1
# ::edge	name	op1	du	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op2	du	0.0.0.0.0	0.0.0.0.0.1
# ::edge	organization	name	name	0.0.0.0	0.0.0.0.0
# ::edge	provide-01	ARG0	it	0	0.0.0.2
# ::edge	provide-01	ARG1	way	0	0.0
# ::edge	provide-01	mod	also	0	0.1
# ::edge	relation-03	ARG1	class	0.0.0.1	0.0.0.1.0
# ::edge	way	manner-of	generalize-01	0.0	0.0.0
(MRPNode-0 / provide-01 :ARG1 (MRPNode-1 / way :manner-of (MRPNode-2 / generalize-01 :ARG1 (MRPNode-3 / organization :name (MRPNode-4 / name :op1 du :op2 du)) :ARG2 (MRPNode-5 / relation-03 :ARG1 (MRPNode-6 / class)) :ARG0 (MRPNode-7 / it))) :ARG0 MRPNode-7 :mod (MRPNode-8 / also))

# ::id 432
# ::snt "It is ""prior"" in the sense that it does not take into account any information about B."
# ::tok " It is " " prior " " in the sense that it does not take into account any information about B. "
# ::alignments 1-2|0.0 5-6|0 14-15|0.1.0 18-19|0.1.1.0 19-20|0.1.1 21-22|0.1.1.1.0+0.1.1.1.0.0+0.1.1.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.132496 ::parser eager_oracle ::smatch 0.625 ::n_actions 40
# ::node	0	prior	5-6
# ::node	0.0	it	1-2
# ::node	0.1	understand-01	
# ::node	0.1.0	-	14-15
# ::node	0.1.1	information	19-20
# ::node	0.1.1.0	any	18-19
# ::node	0.1.1.1	thing	
# ::node	0.1.1.1.0	variable	21-22
# ::node	0.1.1.1.0.0	name	21-22
# ::node	0.1.1.1.0.0.0	b	21-22
# ::root	0	prior
# ::edge	information	topic	any	0.1.1	0.1.1.0
# ::edge	information	topic	thing	0.1.1	0.1.1.1
# ::edge	name	op1	b	0.1.1.1.0.0	0.1.1.1.0.0.0
# ::edge	prior	domain	it	0	0.0
# ::edge	prior	manner	understand-01	0	0.1
# ::edge	thing	mod	variable	0.1.1.1	0.1.1.1.0
# ::edge	understand-01	ARG0	it	0.1	0.0
# ::edge	understand-01	ARG1	information	0.1	0.1.1
# ::edge	understand-01	polarity	-	0.1	0.1.0
# ::edge	variable	name	name	0.1.1.1.0	0.1.1.1.0.0
(MRPNode-0 / prior :domain (MRPNode-1 / it) :manner (MRPNode-2 / understand-01 :polarity - :ARG0 MRPNode-1 :ARG1 (MRPNode-3 / information :topic (MRPNode-4 / any) :topic (MRPNode-5 / thing :mod (MRPNode-6 / variable :name (MRPNode-7 / name :op1 b))))))

# ::id 433
# ::snt The method can be abused when people deliberately link to sites in order to raise a site's PageRank.
# ::tok The method can be abused when people deliberately link to sites in order to raise a site 's PageRank .
# ::alignments 1-2|0.0.1 2-3|0 4-5|0.0 6-7|0.0.0.2.1 7-8|0.0.0.1 8-9|0.0.0 10-11|0.0.0.2.0.1 14-15|0.0.0.2 16-17|0.0.0.0 18-19|0.0.0.2.0+0.0.0.2.0.0+0.0.0.2.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.155108 ::parser eager_oracle ::smatch 1.0 ::n_actions 59
# ::node	0	possible-01	2-3
# ::node	0.0	abuse-02	4-5
# ::node	0.0.0	link-01	8-9
# ::node	0.0.0.0	site	16-17
# ::node	0.0.0.1	deliberate-01	7-8
# ::node	0.0.0.2	raise-01	14-15
# ::node	0.0.0.2.0	publication	18-19
# ::node	0.0.0.2.0.0	name	18-19
# ::node	0.0.0.2.0.0.0	pagerank	18-19
# ::node	0.0.0.2.0.1	site	10-11
# ::node	0.0.0.2.1	person	6-7
# ::node	0.0.1	method	1-2
# ::root	0	possible-01
# ::edge	abuse-02	ARG1	link-01	0.0	0.0.0
# ::edge	abuse-02	ARG1	method	0.0	0.0.1
# ::edge	link-01	ARG0	deliberate-01	0.0.0	0.0.0.1
# ::edge	link-01	ARG0	person	0.0.0	0.0.0.2.1
# ::edge	link-01	ARG1	site	0.0.0	0.0.0.0
# ::edge	link-01	purpose	raise-01	0.0.0	0.0.0.2
# ::edge	name	op1	pagerank	0.0.0.2.0.0	0.0.0.2.0.0.0
# ::edge	possible-01	ARG1	abuse-02	0	0.0
# ::edge	publication	name	name	0.0.0.2.0	0.0.0.2.0.0
# ::edge	publication	poss	site	0.0.0.2.0	0.0.0.2.0.1
# ::edge	raise-01	ARG0	person	0.0.0.2	0.0.0.2.1
# ::edge	raise-01	ARG1	publication	0.0.0.2	0.0.0.2.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / abuse-02 :ARG1 (MRPNode-2 / link-01 :ARG1 (MRPNode-3 / site) :ARG0 (MRPNode-4 / deliberate-01) :purpose (MRPNode-5 / raise-01 :ARG1 (MRPNode-6 / publication :name (MRPNode-7 / name :op1 pagerank) :poss (MRPNode-8 / site)) :ARG0 (MRPNode-9 / person)) :ARG0 MRPNode-9) :ARG1 (MRPNode-10 / method)))

# ::id 434
# ::snt Spain princess testifies in historic fraud probe
# ::tok Spain princess testifies in historic fraud probe
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0.0 2-3|0 4-5|0.2.0.0 6-7|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:40.159039 ::parser eager_oracle ::smatch 0.846153846153846 ::n_actions 23
# ::node	0	testify-01	2-3
# ::node	0.0	princess	1-2
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	spain	0-1
# ::node	0.2	probe-01	6-7
# ::node	0.2.0	defraud-01	
# ::node	0.2.0.0	history	4-5
# ::root	0	testify-01
# ::edge	country	name	name	0.1	0.1.0
# ::edge	defraud-01	mod	history	0.2.0	0.2.0.0
# ::edge	name	op1	spain	0.1.0	0.1.0.0
# ::edge	probe-01	ARG1	defraud-01	0.2	0.2.0
# ::edge	testify-01	ARG1	country	0	0.1
# ::edge	testify-01	ARG1	princess	0	0.0
# ::edge	testify-01	ARG1	probe-01	0	0.2
(MRPNode-0 / testify-01 :ARG1 (MRPNode-1 / princess) :ARG1 (MRPNode-2 / country :name (MRPNode-3 / name :op1 spain)) :ARG1 (MRPNode-4 / probe-01 :ARG1 (MRPNode-5 / defraud-01 :mod (MRPNode-6 / history))))

# ::id 435
# ::snt Senate approves Obama nominee to key appeals court
# ::tok Senate approves Obama nominee to key appeals court
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 2-3|0.1.0+0.1.0.0+0.1.0.0.0 3-4|0.1 5-6|0.1.1.1 6-7|0.1.1.0 7-8|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.165291 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	approve-01	1-2
# ::node	0.0	government-organization	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	senate	0-1
# ::node	0.1	nominate-01	3-4
# ::node	0.1.0	person	2-3
# ::node	0.1.0.0	name	2-3
# ::node	0.1.0.0.0	obama	2-3
# ::node	0.1.1	court	7-8
# ::node	0.1.1.0	appeal-01	6-7
# ::node	0.1.1.1	key-02	5-6
# ::root	0	approve-01
# ::edge	approve-01	ARG1	government-organization	0	0.0
# ::edge	approve-01	ARG1	nominate-01	0	0.1
# ::edge	court	ARG1-of	key-02	0.1.1	0.1.1.1
# ::edge	court	mod	appeal-01	0.1.1	0.1.1.0
# ::edge	government-organization	name	name	0.0	0.0.0
# ::edge	name	op1	obama	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	senate	0.0.0	0.0.0.0
# ::edge	nominate-01	ARG1	person	0.1	0.1.0
# ::edge	nominate-01	ARG2	court	0.1	0.1.1
# ::edge	person	name	name	0.1.0	0.1.0.0
(MRPNode-0 / approve-01 :ARG1 (MRPNode-1 / government-organization :name (MRPNode-2 / name :op1 senate)) :ARG1 (MRPNode-3 / nominate-01 :ARG1 (MRPNode-4 / person :name (MRPNode-5 / name :op1 obama)) :ARG2 (MRPNode-6 / court :mod (MRPNode-7 / appeal-01) :ARG1-of (MRPNode-8 / key-02))))

# ::id 436
# ::snt UN Rights Chief Presses Egypt on Morsi Detention
# ::tok UN Rights Chief Presses Egypt on Morsi Detention
# ::alignments 0-1|0.2.0+0.2.0.0+0.2.0.0.0 1-2|0.1.0.1.0 2-3|0.1+0.1.0+0.1.0.1 3-4|0 4-5|0.0+0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.173351 ::parser eager_oracle ::smatch 0.8636363636363635 ::n_actions 33
# ::node	0	press-01	3-4
# ::node	0.0	country	4-5
# ::node	0.0.0	name	4-5
# ::node	0.0.0.0	egypt	4-5
# ::node	0.1	person	2-3
# ::node	0.1.0	have-org-role-91	2-3
# ::node	0.1.0.0	organization	
# ::node	0.1.0.1	chief	2-3
# ::node	0.1.0.1.0	right-05	1-2
# ::node	0.2	detain-01	
# ::node	0.2.0	person	0-1
# ::node	0.2.0.0	name	0-1
# ::node	0.2.0.0.0	un	0-1
# ::root	0	press-01
# ::edge	chief	topic	right-05	0.1.0.1	0.1.0.1.0
# ::edge	country	name	name	0.0	0.0.0
# ::edge	detain-01	ARG1	person	0.2	0.2.0
# ::edge	have-org-role-91	ARG1	organization	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	chief	0.1.0	0.1.0.1
# ::edge	name	op1	egypt	0.0.0	0.0.0.0
# ::edge	name	op1	un	0.2.0.0	0.2.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	person	name	name	0.2.0	0.2.0.0
# ::edge	press-01	ARG0	person	0	0.1
# ::edge	press-01	ARG1	country	0	0.0
# ::edge	press-01	ARG2	detain-01	0	0.2
(MRPNode-0 / press-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 egypt)) :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-org-role-91 :ARG1 (MRPNode-5 / organization) :ARG2 (MRPNode-6 / chief :topic (MRPNode-7 / right-05)))) :ARG2 (MRPNode-8 / detain-01 :ARG1 (MRPNode-9 / person :name (MRPNode-10 / name :op1 un))))

# ::id 437
# ::snt Senate confirms Janet Yellen as next Federal Reserve Chair
# ::tok Senate confirms Janet Yellen as next Federal Reserve Chair
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 2-4|0.1+0.1.0+0.1.0.0+0.1.0.1 5-6|0.1.1.0.0 6-8|0.1.1.1+0.1.1.1.0+0.1.1.1.0.0+0.1.1.1.0.1 8-9|0.1.1+0.1.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.181255 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	confirm-01	1-2
# ::node	0.0	government-organization	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	senate	0-1
# ::node	0.1	person	2-4
# ::node	0.1.0	name	2-4
# ::node	0.1.0.0	janet	2-4
# ::node	0.1.0.1	yellen	2-4
# ::node	0.1.1	have-org-role-91	8-9
# ::node	0.1.1.0	chairman	8-9
# ::node	0.1.1.0.0	next	5-6
# ::node	0.1.1.1	government-organization	6-8
# ::node	0.1.1.1.0	name	6-8
# ::node	0.1.1.1.0.0	federal	6-8
# ::node	0.1.1.1.0.1	reserve	6-8
# ::root	0	confirm-01
# ::edge	chairman	mod	next	0.1.1.0	0.1.1.0.0
# ::edge	confirm-01	ARG1	government-organization	0	0.0
# ::edge	confirm-01	ARG1	person	0	0.1
# ::edge	government-organization	name	name	0.0	0.0.0
# ::edge	government-organization	name	name	0.1.1.1	0.1.1.1.0
# ::edge	have-org-role-91	ARG1	government-organization	0.1.1	0.1.1.1
# ::edge	have-org-role-91	ARG2	chairman	0.1.1	0.1.1.0
# ::edge	name	op1	federal	0.1.1.1.0	0.1.1.1.0.0
# ::edge	name	op1	janet	0.1.0	0.1.0.0
# ::edge	name	op1	senate	0.0.0	0.0.0.0
# ::edge	name	op2	reserve	0.1.1.1.0	0.1.1.1.0.1
# ::edge	name	op2	yellen	0.1.0	0.1.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.1
# ::edge	person	name	name	0.1	0.1.0
(MRPNode-0 / confirm-01 :ARG1 (MRPNode-1 / government-organization :name (MRPNode-2 / name :op1 senate)) :ARG1 (MRPNode-3 / person :name (MRPNode-4 / name :op1 janet :op2 yellen) :ARG0-of (MRPNode-5 / have-org-role-91 :ARG2 (MRPNode-6 / chairman :mod (MRPNode-7 / next)) :ARG1 (MRPNode-8 / government-organization :name (MRPNode-9 / name :op1 federal :op2 reserve)))))

# ::id 438
# ::snt Syrian rebel groups battle each other in north
# ::tok Syrian rebel groups battle each other in north
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 1-2|0.0.1 2-3|0.0 3-4|0 4-5|0.1.0 5-6|0.1 7-8|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:40.186492 ::parser eager_oracle ::smatch 0.9411764705882353 ::n_actions 31
# ::node	0	battle-01	3-4
# ::node	0.0	group	2-3
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	syria	0-1
# ::node	0.0.1	rebel-01	1-2
# ::node	0.1	other	5-6
# ::node	0.1.0	each	4-5
# ::node	0.2	north	7-8
# ::root	0	battle-01
# ::edge	battle-01	ARG1	group	0	0.0
# ::edge	battle-01	location	north	0	0.2
# ::edge	battle-01	location	other	0	0.1
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	group	ARG0-of	rebel-01	0.0	0.0.1
# ::edge	group	mod	country	0.0	0.0.0
# ::edge	name	op1	syria	0.0.0.0	0.0.0.0.0
# ::edge	other	mod	each	0.1	0.1.0
(MRPNode-0 / battle-01 :ARG1 (MRPNode-1 / group :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 syria)) :ARG0-of (MRPNode-4 / rebel-01)) :location (MRPNode-5 / other :mod (MRPNode-6 / each)) :location (MRPNode-7 / north))

# ::id 439
# ::snt Rocks, tear gas fly as Thai protests heat up
# ::tok Rocks , tear gas fly as Thai protests heat up
# ::alignments 0-1|0.0.0 2-3|0.0.1.0 3-4|0.0.1 4-5|0 5-6|0.0 7-8|0.1.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.192655 ::parser eager_oracle ::smatch 0.8484848484848484 ::n_actions 34
# ::node	0	fly-01	4-5
# ::node	0.0	and	5-6
# ::node	0.0.0	rock	0-1
# ::node	0.0.1	gas	3-4
# ::node	0.0.1.0	tear	2-3
# ::node	0.1	heat-01	8-9
# ::node	0.1.0	protest-01	7-8
# ::node	0.1.0.0	country	6-7
# ::node	0.1.0.0.0	name	6-7
# ::node	0.1.0.0.0.0	thailand	6-7
# ::root	0	fly-01
# ::edge	and	op1	rock	0.0	0.0.0
# ::edge	and	op2	gas	0.0	0.0.1
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	fly-01	ARG1	and	0	0.0
# ::edge	fly-01	time	heat-01	0	0.1
# ::edge	gas	mod	tear	0.0.1	0.0.1.0
# ::edge	heat-01	ARG1	protest-01	0.1	0.1.0
# ::edge	name	op1	thailand	0.1.0.0.0	0.1.0.0.0.0
# ::edge	protest-01	ARG0	country	0.1.0	0.1.0.0
(MRPNode-0 / fly-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / rock) :op2 (MRPNode-3 / gas :mod (MRPNode-4 / tear))) :time (MRPNode-5 / heat-01 :ARG1 (MRPNode-6 / protest-01 :ARG0 (MRPNode-7 / country :name (MRPNode-8 / name :op1 thailand)))))

# ::id 440
# ::snt Boston bomb suspect buried in Virginia cemetery
# ::tok Boston bomb suspect buried in Virginia cemetery
# ::alignments 0-1|0.0+0.0.0+0.0.0.0+0.0.0.0.0 1-2|0.0.1.0 2-3|0.0.1 3-4|0 5-6|0.1.0+0.1.0.0+0.1.0.0.0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.198442 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	bury-01	3-4
# ::node	0.0	person	0-1
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	boston	0-1
# ::node	0.0.1	suspect-01	2-3
# ::node	0.0.1.0	bomb	1-2
# ::node	0.1	cemetery	6-7
# ::node	0.1.0	state	5-6
# ::node	0.1.0.0	name	5-6
# ::node	0.1.0.0.0	virginia	5-6
# ::root	0	bury-01
# ::edge	bury-01	ARG1	person	0	0.0
# ::edge	bury-01	ARG2	cemetery	0	0.1
# ::edge	cemetery	location	state	0.1	0.1.0
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	name	op1	boston	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	virginia	0.1.0.0	0.1.0.0.0
# ::edge	person	ARG0-of	country	0.0	0.0.0
# ::edge	person	ARG2-of	suspect-01	0.0	0.0.1
# ::edge	state	name	name	0.1.0	0.1.0.0
# ::edge	suspect-01	ARG1	bomb	0.0.1	0.0.1.0
(MRPNode-0 / bury-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / country :name (MRPNode-3 / name :op1 boston)) :ARG2-of (MRPNode-4 / suspect-01 :ARG1 (MRPNode-5 / bomb))) :ARG2 (MRPNode-6 / cemetery :location (MRPNode-7 / state :name (MRPNode-8 / name :op1 virginia))))

# ::id 441
# ::snt 6 killed in Philippines restaurant blast
# ::tok 6 killed in Philippines restaurant blast
# ::alignments 0-1|0.0+0.0.0 1-2|0 3-4|0.1.0+0.1.0.0+0.1.0.0.0 4-5|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.201730 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	kill-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	6	0-1
# ::node	0.1	restaurant	4-5
# ::node	0.1.0	country	3-4
# ::node	0.1.0.0	name	3-4
# ::node	0.1.0.0.0	philippines	3-4
# ::root	0	kill-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	location	restaurant	0	0.1
# ::edge	name	op1	philippines	0.1.0.0	0.1.0.0.0
# ::edge	person	quant	6	0.0	0.0.0
# ::edge	restaurant	location	country	0.1	0.1.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 6) :location (MRPNode-2 / restaurant :location (MRPNode-3 / country :name (MRPNode-4 / name :op1 philippines))))

# ::id 442
# ::snt China army newspaper slams US's PRISM program
# ::tok China army newspaper slams US 's PRISM program
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 1-2|0.1.0 2-3|0.1 3-4|0 4-5|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 6-7|0.0.1 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.208191 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	slam-02	3-4
# ::node	0.0	program	7-8
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	china	0-1
# ::node	0.0.1	prism	6-7
# ::node	0.1	newspaper	2-3
# ::node	0.1.0	army	1-2
# ::node	0.1.0.0	country	4-5
# ::node	0.1.0.0.0	name	4-5
# ::node	0.1.0.0.0.0	us	4-5
# ::root	0	slam-02
# ::edge	army	poss	country	0.1.0	0.1.0.0
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	china	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	us	0.1.0.0.0	0.1.0.0.0.0
# ::edge	newspaper	mod	army	0.1	0.1.0
# ::edge	program	mod	country	0.0	0.0.0
# ::edge	program	mod	prism	0.0	0.0.1
# ::edge	slam-02	ARG0	newspaper	0	0.1
# ::edge	slam-02	ARG1	program	0	0.0
(MRPNode-0 / slam-02 :ARG1 (MRPNode-1 / program :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 china)) :mod (MRPNode-4 / prism)) :ARG0 (MRPNode-5 / newspaper :mod (MRPNode-6 / army :poss (MRPNode-7 / country :name (MRPNode-8 / name :op1 us)))))

# ::id 443
# ::snt Two killed in Bahrain car blast
# ::tok Two killed in Bahrain car blast
# ::alignments 0-1|0.0+0.0.0 1-2|0 3-4|0.1.0.0.0+0.1.0.0.0.0+0.1.0.0.0.0.0 4-5|0.1.0.0 5-6|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.213160 ::parser eager_oracle ::smatch 0.8666666666666666 ::n_actions 26
# ::node	0	kill-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	2	0-1
# ::node	0.1	cause-01	
# ::node	0.1.0	blast-05	5-6
# ::node	0.1.0.0	car	4-5
# ::node	0.1.0.0.0	country	3-4
# ::node	0.1.0.0.0.0	name	3-4
# ::node	0.1.0.0.0.0.0	bahrain	3-4
# ::root	0	kill-01
# ::edge	blast-05	ARG1	car	0.1.0	0.1.0.0
# ::edge	car	location	country	0.1.0.0	0.1.0.0.0
# ::edge	cause-01	ARG0	blast-05	0.1	0.1.0
# ::edge	country	name	name	0.1.0.0.0	0.1.0.0.0.0
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	ARG1-of	cause-01	0	0.1
# ::edge	name	op1	bahrain	0.1.0.0.0.0	0.1.0.0.0.0.0
# ::edge	person	quant	2	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 2) :ARG1-of (MRPNode-2 / cause-01 :ARG0 (MRPNode-3 / blast-05 :ARG1 (MRPNode-4 / car :location (MRPNode-5 / country :name (MRPNode-6 / name :op1 bahrain))))))

# ::id 444
# ::snt Russia warns it will 'respond' if interests in Ukraine attacked
# ::tok Russia warns it will ' respond ' if interests in Ukraine attacked
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 1-2|0 5-6|0.0 8-9|0.0.0 10-11|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.219564 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	warn-01	1-2
# ::node	0.0	respond-01	5-6
# ::node	0.0.0	interest-01	8-9
# ::node	0.0.0.0	country	10-11
# ::node	0.0.0.0.0	name	10-11
# ::node	0.0.0.0.0.0	ukraine	10-11
# ::node	0.0.1	country	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	russia	0-1
# ::root	0	warn-01
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	interest-01	ARG2	country	0.0.0	0.0.0.0
# ::edge	name	op1	russia	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	ukraine	0.0.0.0.0	0.0.0.0.0.0
# ::edge	respond-01	ARG0	country	0.0	0.0.1
# ::edge	respond-01	condition	interest-01	0.0	0.0.0
# ::edge	warn-01	ARG0	country	0	0.0.1
# ::edge	warn-01	ARG1	respond-01	0	0.0
(MRPNode-0 / warn-01 :ARG1 (MRPNode-1 / respond-01 :condition (MRPNode-2 / interest-01 :ARG2 (MRPNode-3 / country :name (MRPNode-4 / name :op1 ukraine))) :ARG0 (MRPNode-5 / country :name (MRPNode-6 / name :op1 russia))) :ARG0 MRPNode-5)

# ::id 445
# ::snt Couple get married in Britain's first Scientology wedding
# ::tok Couple get married in Britain 's first Scientology wedding
# ::alignments 0-1|0.0 2-3|0 4-5|0.1.1.1+0.1.1.1.0+0.1.1.1.0.0 7-8|0.1.1+0.1.1.0+0.1.1.0.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.224980 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 26
# ::node	0	marry-01	2-3
# ::node	0.0	couple	0-1
# ::node	0.1	wed-01	8-9
# ::node	0.1.0	ordinal-entity	
# ::node	0.1.0.0	1	
# ::node	0.1.1	city	7-8
# ::node	0.1.1.0	name	7-8
# ::node	0.1.1.0.0	scientology	7-8
# ::node	0.1.1.1	country	4-5
# ::node	0.1.1.1.0	name	4-5
# ::node	0.1.1.1.0.0	britain	4-5
# ::root	0	marry-01
# ::edge	city	location	country	0.1.1	0.1.1.1
# ::edge	city	name	name	0.1.1	0.1.1.0
# ::edge	country	name	name	0.1.1.1	0.1.1.1.0
# ::edge	marry-01	ARG1	couple	0	0.0
# ::edge	marry-01	time	wed-01	0	0.1
# ::edge	name	op1	britain	0.1.1.1.0	0.1.1.1.0.0
# ::edge	name	op1	scientology	0.1.1.0	0.1.1.0.0
# ::edge	ordinal-entity	value	1	0.1.0	0.1.0.0
# ::edge	wed-01	mod	city	0.1	0.1.1
# ::edge	wed-01	mod	ordinal-entity	0.1	0.1.0
(MRPNode-0 / marry-01 :ARG1 (MRPNode-1 / couple) :time (MRPNode-2 / wed-01 :mod (MRPNode-3 / ordinal-entity :value 1) :mod (MRPNode-4 / city :name (MRPNode-5 / name :op1 scientology) :location (MRPNode-6 / country :name (MRPNode-7 / name :op1 britain)))))

# ::id 446
# ::snt Russian Opposition Leader Placed Under House Arrest
# ::tok Russian Opposition Leader Placed Under House Arrest
# ::alignments 0-1|0.0+0.0.0+0.0.0.0+0.0.0.0.0 1-2|0.0.1.0 2-3|0.0.1 3-4|0 4-5|0.1 5-6|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0+0.1.0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.232206 ::parser eager_oracle ::smatch 0.8372093023255814 ::n_actions 30
# ::node	0	place-01	3-4
# ::node	0.0	person	0-1
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	russia	0-1
# ::node	0.0.1	lead-02	2-3
# ::node	0.0.1.0	oppose-01	1-2
# ::node	0.1	under	4-5
# ::node	0.1.0	strike-01	
# ::node	0.1.0.0	government-organization	5-6
# ::node	0.1.0.0.0	name	5-6
# ::node	0.1.0.0.0.0	house	5-6
# ::node	0.1.0.0.0.1	house	5-6
# ::root	0	place-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	government-organization	name	name	0.1.0.0	0.1.0.0.0
# ::edge	lead-02	ARG1	oppose-01	0.0.1	0.0.1.0
# ::edge	name	op1	house	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op1	russia	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	house	0.1.0.0.0	0.1.0.0.0.1
# ::edge	person	ARG0-of	country	0.0	0.0.0
# ::edge	person	ARG0-of	lead-02	0.0	0.0.1
# ::edge	place-01	ARG1	person	0	0.0
# ::edge	place-01	ARG2	under	0	0.1
# ::edge	strike-01	ARG0	government-organization	0.1.0	0.1.0.0
# ::edge	under	op1	strike-01	0.1	0.1.0
(MRPNode-0 / place-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / country :name (MRPNode-3 / name :op1 russia)) :ARG0-of (MRPNode-4 / lead-02 :ARG1 (MRPNode-5 / oppose-01))) :ARG2 (MRPNode-6 / under :op1 (MRPNode-7 / strike-01 :ARG0 (MRPNode-8 / government-organization :name (MRPNode-9 / name :op1 house :op2 house)))))

# ::id 447
# ::snt Senate confirms Janet Yellen as next Federal Reserve Chair
# ::tok Senate confirms Janet Yellen as next Federal Reserve Chair
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 2-4|0.1+0.1.0+0.1.0.0+0.1.0.1 5-6|0.1.1.0.0 6-8|0.1.1.1+0.1.1.1.0+0.1.1.1.0.0+0.1.1.1.0.1 8-9|0.1.1+0.1.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.239958 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	confirm-01	1-2
# ::node	0.0	government-organization	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	senate	0-1
# ::node	0.1	person	2-4
# ::node	0.1.0	name	2-4
# ::node	0.1.0.0	janet	2-4
# ::node	0.1.0.1	yellen	2-4
# ::node	0.1.1	have-org-role-91	8-9
# ::node	0.1.1.0	chairman	8-9
# ::node	0.1.1.0.0	next	5-6
# ::node	0.1.1.1	government-organization	6-8
# ::node	0.1.1.1.0	name	6-8
# ::node	0.1.1.1.0.0	federal	6-8
# ::node	0.1.1.1.0.1	reserve	6-8
# ::root	0	confirm-01
# ::edge	chairman	mod	next	0.1.1.0	0.1.1.0.0
# ::edge	confirm-01	ARG1	government-organization	0	0.0
# ::edge	confirm-01	ARG1	person	0	0.1
# ::edge	government-organization	name	name	0.0	0.0.0
# ::edge	government-organization	name	name	0.1.1.1	0.1.1.1.0
# ::edge	have-org-role-91	ARG1	government-organization	0.1.1	0.1.1.1
# ::edge	have-org-role-91	ARG2	chairman	0.1.1	0.1.1.0
# ::edge	name	op1	federal	0.1.1.1.0	0.1.1.1.0.0
# ::edge	name	op1	janet	0.1.0	0.1.0.0
# ::edge	name	op1	senate	0.0.0	0.0.0.0
# ::edge	name	op2	reserve	0.1.1.1.0	0.1.1.1.0.1
# ::edge	name	op2	yellen	0.1.0	0.1.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.1
# ::edge	person	name	name	0.1	0.1.0
(MRPNode-0 / confirm-01 :ARG1 (MRPNode-1 / government-organization :name (MRPNode-2 / name :op1 senate)) :ARG1 (MRPNode-3 / person :name (MRPNode-4 / name :op1 janet :op2 yellen) :ARG0-of (MRPNode-5 / have-org-role-91 :ARG2 (MRPNode-6 / chairman :mod (MRPNode-7 / next)) :ARG1 (MRPNode-8 / government-organization :name (MRPNode-9 / name :op1 federal :op2 reserve)))))

# ::id 448
# ::snt Venezuela lawmakers brawl over election
# ::tok Venezuela lawmakers brawl over election
# ::alignments 0-1|0.1.1+0.1.1.0+0.1.1.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.242464 ::parser eager_oracle ::smatch 0.5 ::n_actions 12
# ::node	0	crawl-01	
# ::node	0.0	elect-01	4-5
# ::node	0.1	person	
# ::node	0.1.0	legislate-01	
# ::node	0.1.1	country	0-1
# ::node	0.1.1.0	name	0-1
# ::node	0.1.1.0.0	venezuela	0-1
# ::root	0	crawl-01
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	crawl-01	ARG0	person	0	0.1
# ::edge	crawl-01	ARG1	elect-01	0	0.0
# ::edge	name	op1	venezuela	0.1.1.0	0.1.1.0.0
# ::edge	person	mod	country	0.1	0.1.1
# ::edge	person	mod	legislate-01	0.1	0.1.0
(MRPNode-0 / crawl-01 :ARG1 (MRPNode-1 / elect-01) :ARG0 (MRPNode-2 / person :mod (MRPNode-3 / legislate-01) :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 venezuela))))

# ::id 449
# ::snt North Korea warns foreigners in South to evacuate
# ::tok North Korea warns foreigners in South to evacuate
# ::alignments 0-2|0.0+0.0.0+0.0.0.0+0.0.0.1 2-3|0 3-4|0.1.0 5-6|0.1.1+0.1.1.0+0.1.1.0.0+0.1.1.0.1 7-8|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:40.247873 ::parser eager_oracle ::smatch 0.7777777777777778 ::n_actions 23
# ::node	0	warn-01	2-3
# ::node	0.0	country	0-2
# ::node	0.0.0	name	0-2
# ::node	0.0.0.0	north	0-2
# ::node	0.0.0.1	korea	0-2
# ::node	0.1	person	
# ::node	0.1.0	foreign	3-4
# ::node	0.1.1	country	5-6
# ::node	0.1.1.0	name	5-6
# ::node	0.1.1.0.0	south	5-6
# ::node	0.1.1.0.1	korea	5-6
# ::node	0.2	evacuate-01	7-8
# ::root	0	warn-01
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	evacuate-01	ARG2	person	0.2	0.1
# ::edge	name	op1	north	0.0.0	0.0.0.0
# ::edge	name	op1	south	0.1.1.0	0.1.1.0.0
# ::edge	name	op2	korea	0.0.0	0.0.0.1
# ::edge	name	op2	korea	0.1.1.0	0.1.1.0.1
# ::edge	person	location	country	0.1	0.1.1
# ::edge	person	mod	foreign	0.1	0.1.0
# ::edge	warn-01	ARG1	country	0	0.0
# ::edge	warn-01	ARG1	evacuate-01	0	0.2
# ::edge	warn-01	ARG1	person	0	0.1
(MRPNode-0 / warn-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 north :op2 korea)) :ARG1 (MRPNode-3 / person :mod (MRPNode-4 / foreign) :location (MRPNode-5 / country :name (MRPNode-6 / name :op1 south :op2 korea))) :ARG1 (MRPNode-7 / evacuate-01 :ARG2 MRPNode-3))

# ::id 450
# ::snt Israel officials: Strike on Syria targeted weapons
# ::tok Israel officials : Strike on Syria targeted weapons
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 1-2|0.1+0.1.0+0.1.0.1 3-4|0.0 5-6|0.0.2+0.0.2.0+0.0.2.0.0 6-7|0.0.1.0 7-8|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.256948 ::parser eager_oracle ::smatch 0.8510638297872342 ::n_actions 35
# ::node	0	say-01	
# ::node	0.0	strike-01	3-4
# ::node	0.0.0	imperative	
# ::node	0.0.1	weapon	7-8
# ::node	0.0.1.0	target-01	6-7
# ::node	0.0.2	country	5-6
# ::node	0.0.2.0	name	5-6
# ::node	0.0.2.0.0	syria	5-6
# ::node	0.1	person	1-2
# ::node	0.1.0	have-org-role-91	1-2
# ::node	0.1.0.0	country	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	israel	0-1
# ::node	0.1.0.1	official	1-2
# ::root	0	say-01
# ::edge	country	name	name	0.0.2	0.0.2.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	official	0.1.0	0.1.0.1
# ::edge	name	op1	israel	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op1	syria	0.0.2.0	0.0.2.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	say-01	ARG0	person	0	0.1
# ::edge	say-01	ARG1	strike-01	0	0.0
# ::edge	strike-01	ARG0	country	0.0	0.0.2
# ::edge	strike-01	ARG1	weapon	0.0	0.0.1
# ::edge	strike-01	mode	imperative	0.0	0.0.0
# ::edge	weapon	ARG2-of	target-01	0.0.1	0.0.1.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / strike-01 :mode imperative :ARG1 (MRPNode-2 / weapon :ARG2-of (MRPNode-3 / target-01)) :ARG0 (MRPNode-4 / country :name (MRPNode-5 / name :op1 syria))) :ARG0 (MRPNode-6 / person :ARG0-of (MRPNode-7 / have-org-role-91 :ARG1 (MRPNode-8 / country :name (MRPNode-9 / name :op1 israel)) :ARG2 (MRPNode-10 / official))))

# ::id 451
# ::snt Death toll in Syria over 100,000 so far
# ::tok Death toll in Syria over 100,000 so far
# ::alignments 0-1|0.0 1-2|0 3-4|0.3+0.3.0+0.3.0.0 4-5|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.261019 ::parser eager_oracle ::smatch 0.88 ::n_actions 22
# ::node	0	toll	1-2
# ::node	0.0	die-01	0-1
# ::node	0.1	over	4-5
# ::node	0.1.0	100000	
# ::node	0.2	so-far	
# ::node	0.3	country	3-4
# ::node	0.3.0	name	3-4
# ::node	0.3.0.0	syria	3-4
# ::root	0	toll
# ::edge	country	name	name	0.3	0.3.0
# ::edge	name	op1	syria	0.3.0	0.3.0.0
# ::edge	over	op1	100000	0.1	0.1.0
# ::edge	toll	location	country	0	0.3
# ::edge	toll	mod	die-01	0	0.0
# ::edge	toll	quant	over	0	0.1
# ::edge	toll	time	so-far	0	0.2
(MRPNode-0 / toll :mod (MRPNode-1 / die-01) :quant (MRPNode-2 / over :op1 100000) :time (MRPNode-3 / so-far) :location (MRPNode-4 / country :name (MRPNode-5 / name :op1 syria)))

# ::id 452
# ::snt Iran nuclear talks enter crucial third day
# ::tok Iran nuclear talks enter crucial third day
# ::alignments 0-1|0.1.1+0.1.1.0+0.1.1.0.0 1-2|0.1.0 2-3|0.1 3-4|0 4-5|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.265624 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 27
# ::node	0	enter-01	3-4
# ::node	0.0	day	6-7
# ::node	0.0.0	crucial	4-5
# ::node	0.0.1	ordinal-entity	
# ::node	0.0.1.0	3	
# ::node	0.1	talk-01	2-3
# ::node	0.1.0	nucleus	1-2
# ::node	0.1.1	country	0-1
# ::node	0.1.1.0	name	0-1
# ::node	0.1.1.0.0	iran	0-1
# ::root	0	enter-01
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	day	ord	crucial	0.0	0.0.0
# ::edge	day	ord	ordinal-entity	0.0	0.0.1
# ::edge	enter-01	ARG0	talk-01	0	0.1
# ::edge	enter-01	ARG1	day	0	0.0
# ::edge	name	op1	iran	0.1.1.0	0.1.1.0.0
# ::edge	ordinal-entity	value	3	0.0.1	0.0.1.0
# ::edge	talk-01	ARG0	country	0.1	0.1.1
# ::edge	talk-01	mod	nucleus	0.1	0.1.0
(MRPNode-0 / enter-01 :ARG1 (MRPNode-1 / day :ord (MRPNode-2 / crucial) :ord (MRPNode-3 / ordinal-entity :value 3)) :ARG0 (MRPNode-4 / talk-01 :mod (MRPNode-5 / nucleus) :ARG0 (MRPNode-6 / country :name (MRPNode-7 / name :op1 iran))))

# ::id 453
# ::snt Jodi Arias eligible for death penalty, jury says
# ::tok Jodi Arias eligible for death penalty , jury says
# ::alignments 2-3|0.0 3-4|0.0.1 4-5|0.0.0+0.0.0.1 7-8|0.1 8-9|0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.272070 ::parser eager_oracle ::smatch 0.8666666666666666 ::n_actions 32
# ::node	0	say-01	8-9
# ::node	0.0	qualify-02	2-3
# ::node	0.0.0	person	4-5
# ::node	0.0.0.0	name	0-2
# ::node	0.0.0.0.0	jodi	0-2
# ::node	0.0.0.0.1	arias	0-2
# ::node	0.0.0.1	die-01	4-5
# ::node	0.0.1	cause-01	3-4
# ::node	0.1	jury	7-8
# ::root	0	say-01
# ::edge	cause-01	ARG0	die-01	0.0.1	0.0.0.1
# ::edge	name	op1	jodi	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	arias	0.0.0.0	0.0.0.0.1
# ::edge	person	ARG1-of	die-01	0.0.0	0.0.0.1
# ::edge	person	ARG1-of	name	0.0.0	0.0.0.0
# ::edge	qualify-02	ARG1	person	0.0	0.0.0
# ::edge	qualify-02	ARG1-of	cause-01	0.0	0.0.1
# ::edge	say-01	ARG0	jury	0	0.1
# ::edge	say-01	ARG1	qualify-02	0	0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / qualify-02 :ARG1 (MRPNode-2 / person :ARG1-of (MRPNode-3 / name :op1 jodi :op2 arias) :ARG1-of (MRPNode-4 / die-01)) :ARG1-of (MRPNode-5 / cause-01 :ARG0 MRPNode-4)) :ARG0 (MRPNode-6 / jury))

# ::id 454
# ::snt At least 100 dead as typhoon batters Philippines
# ::tok At least 100 dead as typhoon batters Philippines
# ::alignments 2-3|0.0.0.0 5-6|0.1.0.0 7-8|0.1.0.1+0.1.0.1.0+0.1.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.276701 ::parser eager_oracle ::smatch 0.32 ::n_actions 17
# ::node	0	die-01	
# ::node	0.0	person	
# ::node	0.0.0	at-least	
# ::node	0.0.0.0	100	2-3
# ::node	0.1	cause-01	
# ::node	0.1.0	beat-01	
# ::node	0.1.0.0	typhoon	5-6
# ::node	0.1.0.1	country	7-8
# ::node	0.1.0.1.0	name	7-8
# ::node	0.1.0.1.0.0	philippines	7-8
# ::root	0	die-01
# ::edge	at-least	op1	100	0.0.0	0.0.0.0
# ::edge	beat-01	ARG0	typhoon	0.1.0	0.1.0.0
# ::edge	beat-01	ARG1	country	0.1.0	0.1.0.1
# ::edge	cause-01	ARG0	beat-01	0.1	0.1.0
# ::edge	country	name	name	0.1.0.1	0.1.0.1.0
# ::edge	die-01	ARG1	person	0	0.0
# ::edge	die-01	time	cause-01	0	0.1
# ::edge	name	op1	philippines	0.1.0.1.0	0.1.0.1.0.0
# ::edge	person	quant	at-least	0.0	0.0.0
(MRPNode-0 / die-01 :ARG1 (MRPNode-1 / person :quant (MRPNode-2 / at-least :op1 100)) :time (MRPNode-3 / cause-01 :ARG0 (MRPNode-4 / beat-01 :ARG0 (MRPNode-5 / typhoon) :ARG1 (MRPNode-6 / country :name (MRPNode-7 / name :op1 philippines)))))

# ::id 455
# ::snt High court checks President's recess appointment power
# ::tok High court checks President 's recess appointment power
# ::alignments 0-2|0.1+0.1.0+0.1.0.0+0.1.0.1 2-3|0 3-4|0.0.0+0.0.0.0+0.0.0.0.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.281359 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 30
# ::node	0	check-01	2-3
# ::node	0.0	power	7-8
# ::node	0.0.0	person	3-4
# ::node	0.0.0.0	have-org-role-91	3-4
# ::node	0.0.0.0.0	president	3-4
# ::node	0.0.1	resign-01	
# ::node	0.1	government-organization	0-2
# ::node	0.1.0	name	0-2
# ::node	0.1.0.0	high	0-2
# ::node	0.1.0.1	court	0-2
# ::root	0	check-01
# ::edge	check-01	ARG0	government-organization	0	0.1
# ::edge	check-01	ARG1	power	0	0.0
# ::edge	government-organization	name	name	0.1	0.1.0
# ::edge	have-org-role-91	ARG2	president	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	high	0.1.0	0.1.0.0
# ::edge	name	op2	court	0.1.0	0.1.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.0.0	0.0.0.0
# ::edge	power	mod	person	0.0	0.0.0
# ::edge	power	mod	resign-01	0.0	0.0.1
# ::edge	resign-01	ARG0	person	0.0.1	0.0.0
(MRPNode-0 / check-01 :ARG1 (MRPNode-1 / power :mod (MRPNode-2 / person :ARG0-of (MRPNode-3 / have-org-role-91 :ARG2 (MRPNode-4 / president))) :mod (MRPNode-5 / resign-01 :ARG0 MRPNode-2)) :ARG0 (MRPNode-6 / government-organization :name (MRPNode-7 / name :op1 high :op2 court)))

# ::id 456
# ::snt What makes India vote? Debate at Jaipur Literature Festival
# ::tok What makes India vote ? Debate at Jaipur Literature Festival
# ::alignments 0-1|0.0 1-2|0.0.0 2-3|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 3-4|0.0.0.0 5-6|0 7-10|0.1+0.1.0+0.1.0.0+0.1.0.1+0.1.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:40.289519 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	debate-01	5-6
# ::node	0.0	amr-unknown	0-1
# ::node	0.0.0	make-02	1-2
# ::node	0.0.0.0	vote-01	3-4
# ::node	0.0.0.0.0	country	2-3
# ::node	0.0.0.0.0.0	name	2-3
# ::node	0.0.0.0.0.0.0	india	2-3
# ::node	0.1	festival	7-10
# ::node	0.1.0	name	7-10
# ::node	0.1.0.0	jaipur	7-10
# ::node	0.1.0.1	literature	7-10
# ::node	0.1.0.2	festival	7-10
# ::root	0	debate-01
# ::edge	amr-unknown	ARG0-of	make-02	0.0	0.0.0
# ::edge	country	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	debate-01	ARG1	amr-unknown	0	0.0
# ::edge	debate-01	location	festival	0	0.1
# ::edge	festival	name	name	0.1	0.1.0
# ::edge	make-02	ARG1	vote-01	0.0.0	0.0.0.0
# ::edge	name	op1	india	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op1	jaipur	0.1.0	0.1.0.0
# ::edge	name	op2	literature	0.1.0	0.1.0.1
# ::edge	name	op3	festival	0.1.0	0.1.0.2
# ::edge	vote-01	ARG0	country	0.0.0.0	0.0.0.0.0
(MRPNode-0 / debate-01 :ARG1 (MRPNode-1 / amr-unknown :ARG0-of (MRPNode-2 / make-02 :ARG1 (MRPNode-3 / vote-01 :ARG0 (MRPNode-4 / country :name (MRPNode-5 / name :op1 india))))) :location (MRPNode-6 / festival :name (MRPNode-7 / name :op1 jaipur :op2 literature :op3 festival)))

# ::id 457
# ::snt Hamas calls on Hezbollah to pull forces out of Syria
# ::tok Hamas calls on Hezbollah to pull forces out of Syria
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 3-4|0.0.2+0.0.2.0+0.0.2.0.0 5-6|0.0 6-7|0.0.0 9-10|0.0.1+0.0.1.0+0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.297221 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	call-03	1-2
# ::node	0.0	pull-out-02	5-6
# ::node	0.0.0	force	6-7
# ::node	0.0.1	country	9-10
# ::node	0.0.1.0	name	9-10
# ::node	0.0.1.0.0	syria	9-10
# ::node	0.0.2	political-party	3-4
# ::node	0.0.2.0	name	3-4
# ::node	0.0.2.0.0	hezbollah	3-4
# ::node	0.1	organization	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	hamas	0-1
# ::root	0	call-03
# ::edge	call-03	ARG0	organization	0	0.1
# ::edge	call-03	ARG1	pull-out-02	0	0.0
# ::edge	call-03	ARG2	political-party	0	0.0.2
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	name	op1	hamas	0.1.0	0.1.0.0
# ::edge	name	op1	hezbollah	0.0.2.0	0.0.2.0.0
# ::edge	name	op1	syria	0.0.1.0	0.0.1.0.0
# ::edge	organization	name	name	0.1	0.1.0
# ::edge	political-party	name	name	0.0.2	0.0.2.0
# ::edge	pull-out-02	ARG1	force	0.0	0.0.0
# ::edge	pull-out-02	ARG1	political-party	0.0	0.0.2
# ::edge	pull-out-02	ARG2	country	0.0	0.0.1
(MRPNode-0 / call-03 :ARG1 (MRPNode-1 / pull-out-02 :ARG1 (MRPNode-2 / force) :ARG2 (MRPNode-3 / country :name (MRPNode-4 / name :op1 syria)) :ARG1 (MRPNode-7 / political-party :name (MRPNode-8 / name :op1 hezbollah))) :ARG0 (MRPNode-5 / organization :name (MRPNode-6 / name :op1 hamas)) :ARG2 MRPNode-7)

# ::id 458
# ::snt Stocks edge lower after earnings from retailers
# ::tok Stocks edge lower after earnings from retailers
# ::alignments 0-1|0.0 2-3|0.1 3-4|0.2 4-5|0.2.0 6-7|0.2.0.0+0.2.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.301535 ::parser eager_oracle ::smatch 0.6666666666666667 ::n_actions 27
# ::node	0	have-degree-91	
# ::node	0.0	stock	0-1
# ::node	0.1	low-04	2-3
# ::node	0.2	after	3-4
# ::node	0.2.0	earn-01	4-5
# ::node	0.2.0.0	person	6-7
# ::node	0.2.0.0.0	retail-01	6-7
# ::node	0.3	more	
# ::root	0	have-degree-91
# ::edge	after	op1	earn-01	0.2	0.2.0
# ::edge	earn-01	ARG0	person	0.2.0	0.2.0.0
# ::edge	have-degree-91	ARG1	stock	0	0.0
# ::edge	have-degree-91	ARG2	low-04	0	0.1
# ::edge	have-degree-91	ARG3	after	0	0.2
# ::edge	have-degree-91	ARG3	more	0	0.3
# ::edge	low-04	ARG1	stock	0.1	0.0
# ::edge	person	ARG0-of	retail-01	0.2.0.0	0.2.0.0.0
(MRPNode-0 / have-degree-91 :ARG1 (MRPNode-1 / stock) :ARG2 (MRPNode-2 / low-04 :ARG1 MRPNode-1) :ARG3 (MRPNode-3 / after :op1 (MRPNode-4 / earn-01 :ARG0 (MRPNode-5 / person :ARG0-of (MRPNode-6 / retail-01)))) :ARG3 (MRPNode-7 / more))

# ::id 459
# ::snt Mt Gox finds 200,000 'forgotten' bitcoins
# ::tok Mt Gox finds 200,000 ' forgotten ' bitcoins
# ::alignments 0-2|0.1+0.1.0+0.1.0.0+0.1.0.1 2-3|0 5-6|0.0.1 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.304966 ::parser eager_oracle ::smatch 0.9600000000000001 ::n_actions 22
# ::node	0	find-01	2-3
# ::node	0.0	bitcoin	7-8
# ::node	0.0.0	200000	
# ::node	0.0.1	forget-01	5-6
# ::node	0.1	person	0-2
# ::node	0.1.0	name	0-2
# ::node	0.1.0.0	mt	0-2
# ::node	0.1.0.1	gox	0-2
# ::root	0	find-01
# ::edge	bitcoin	ARG1-of	forget-01	0.0	0.0.1
# ::edge	bitcoin	quant	200000	0.0	0.0.0
# ::edge	find-01	ARG0	person	0	0.1
# ::edge	find-01	ARG1	bitcoin	0	0.0
# ::edge	name	op1	mt	0.1.0	0.1.0.0
# ::edge	name	op2	gox	0.1.0	0.1.0.1
# ::edge	person	name	name	0.1	0.1.0
(MRPNode-0 / find-01 :ARG1 (MRPNode-1 / bitcoin :quant 200000 :ARG1-of (MRPNode-2 / forget-01)) :ARG0 (MRPNode-3 / person :name (MRPNode-4 / name :op1 mt :op2 gox)))

# ::id 460
# ::snt China lands robot rover on moon
# ::tok China lands robot rover on moon
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 3-4|0.0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:40.307613 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	land-01	1-2
# ::node	0.0	rover	3-4
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	china	0-1
# ::node	0.2	moon	5-6
# ::root	0	land-01
# ::edge	country	name	name	0.1	0.1.0
# ::edge	land-01	ARG0	country	0	0.1
# ::edge	land-01	ARG1	rover	0	0.0
# ::edge	land-01	location	moon	0	0.2
# ::edge	name	op1	china	0.1.0	0.1.0.0
(MRPNode-0 / land-01 :ARG1 (MRPNode-1 / rover) :ARG0 (MRPNode-2 / country :name (MRPNode-3 / name :op1 china)) :location (MRPNode-4 / moon))

# ::id 461
# ::snt Spanish government approves tight restrictions on abortion
# ::tok Spanish government approves tight restrictions on abortion
# ::alignments 1-2|0.1+0.1.0 2-3|0 3-4|0.0.1 4-5|0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.313484 ::parser eager_oracle ::smatch 0.8275862068965517 ::n_actions 28
# ::node	0	approve-01	2-3
# ::node	0.0	restrict-01	4-5
# ::node	0.0.0	abort-01	6-7
# ::node	0.0.1	tight-05	3-4
# ::node	0.1	government-organization	1-2
# ::node	0.1.0	govern-01	1-2
# ::node	0.1.0.0	country	
# ::node	0.1.0.0.0	name	
# ::node	0.1.0.0.0.0	spain	
# ::root	0	approve-01
# ::edge	approve-01	ARG0	government-organization	0	0.1
# ::edge	approve-01	ARG1	restrict-01	0	0.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	govern-01	ARG1	country	0.1.0	0.1.0.0
# ::edge	government-organization	ARG0-of	govern-01	0.1	0.1.0
# ::edge	name	op1	spain	0.1.0.0.0	0.1.0.0.0.0
# ::edge	restrict-01	ARG1	abort-01	0.0	0.0.0
# ::edge	restrict-01	ARG1-of	tight-05	0.0	0.0.1
(MRPNode-0 / approve-01 :ARG1 (MRPNode-1 / restrict-01 :ARG1 (MRPNode-2 / abort-01) :ARG1-of (MRPNode-3 / tight-05)) :ARG0 (MRPNode-4 / government-organization :ARG0-of (MRPNode-5 / govern-01 :ARG1 (MRPNode-6 / country :name (MRPNode-7 / name :op1 spain)))))

# ::id 462
# ::snt Shots fired at German ambassador's residence in Athens
# ::tok Shots fired at German ambassador 's residence in Athens
# ::alignments 1-2|0 3-4|0.1.0.0.0.0+0.1.0.0.0.0.0+0.1.0.0.0.0.0.0 4-5|0.1.0+0.1.0.0+0.1.0.0.0 6-7|0.1 8-9|0.1.1+0.1.1.0+0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.320352 ::parser eager_oracle ::smatch 0.9047619047619048 ::n_actions 35
# ::node	0	fire-01	1-2
# ::node	0.0	shoot-02	
# ::node	0.1	reside-01	6-7
# ::node	0.1.0	person	4-5
# ::node	0.1.0.0	have-org-role-91	4-5
# ::node	0.1.0.0.0	ambassador	4-5
# ::node	0.1.0.0.0.0	country	3-4
# ::node	0.1.0.0.0.0.0	name	3-4
# ::node	0.1.0.0.0.0.0.0	germany	3-4
# ::node	0.1.1	city	8-9
# ::node	0.1.1.0	name	8-9
# ::node	0.1.1.0.0	athens	8-9
# ::root	0	fire-01
# ::edge	ambassador	mod	country	0.1.0.0.0	0.1.0.0.0.0
# ::edge	city	name	name	0.1.1	0.1.1.0
# ::edge	country	name	name	0.1.0.0.0.0	0.1.0.0.0.0.0
# ::edge	fire-01	ARG1	shoot-02	0	0.0
# ::edge	fire-01	destination	reside-01	0	0.1
# ::edge	have-org-role-91	ARG2	ambassador	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	athens	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	germany	0.1.0.0.0.0.0	0.1.0.0.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1.0	0.1.0.0
# ::edge	reside-01	ARG0	person	0.1	0.1.0
# ::edge	reside-01	location	city	0.1	0.1.1
(MRPNode-0 / fire-01 :ARG1 (MRPNode-1 / shoot-02) :destination (MRPNode-2 / reside-01 :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-org-role-91 :ARG2 (MRPNode-5 / ambassador :mod (MRPNode-6 / country :name (MRPNode-7 / name :op1 germany))))) :location (MRPNode-8 / city :name (MRPNode-9 / name :op1 athens))))

# ::id 463
# ::snt Italian President Napolitano elected for second term
# ::tok Italian President Napolitano elected for second term
# ::alignments 0-1|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 1-2|0.0.1+0.0.1.1 2-3|0.0+0.0.0+0.0.0.0 3-4|0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.325685 ::parser eager_oracle ::smatch 0.8717948717948718 ::n_actions 28
# ::node	0	elect-01	3-4
# ::node	0.0	person	2-3
# ::node	0.0.0	name	2-3
# ::node	0.0.0.0	napolitano	2-3
# ::node	0.0.1	have-org-role-91	1-2
# ::node	0.0.1.0	country	0-1
# ::node	0.0.1.0.0	name	0-1
# ::node	0.0.1.0.0.0	italy	0-1
# ::node	0.0.1.1	president	1-2
# ::node	0.1	term	6-7
# ::node	0.1.0	ordinal-entity	
# ::node	0.1.0.0	2	
# ::root	0	elect-01
# ::edge	country	name	name	0.0.1.0	0.0.1.0.0
# ::edge	elect-01	ARG1	person	0	0.0
# ::edge	elect-01	ARG2	term	0	0.1
# ::edge	have-org-role-91	ARG1	country	0.0.1	0.0.1.0
# ::edge	have-org-role-91	ARG2	president	0.0.1	0.0.1.1
# ::edge	name	op1	italy	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	napolitano	0.0.0	0.0.0.0
# ::edge	ordinal-entity	value	2	0.1.0	0.1.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.1
# ::edge	person	name	name	0.0	0.0.0
# ::edge	term	ord	ordinal-entity	0.1	0.1.0
(MRPNode-0 / elect-01 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 napolitano) :ARG0-of (MRPNode-3 / have-org-role-91 :ARG1 (MRPNode-4 / country :name (MRPNode-5 / name :op1 italy)) :ARG2 (MRPNode-6 / president))) :ARG2 (MRPNode-7 / term :ord (MRPNode-8 / ordinal-entity :value 2)))

# ::id 464
# ::snt North Korea says detained American tourist to face trial
# ::tok North Korea says detained American tourist to face trial
# ::alignments 0-2|0.1+0.1.0+0.1.0.0+0.1.0.1 2-3|0 4-5|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 5-6|0.0.0.0+0.0.0.0.1 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.332805 ::parser eager_oracle ::smatch 0.8780487804878049 ::n_actions 30
# ::node	0	say-01	2-3
# ::node	0.0	face-01	7-8
# ::node	0.0.0	try-02	
# ::node	0.0.0.0	person	5-6
# ::node	0.0.0.0.0	country	4-5
# ::node	0.0.0.0.0.0	name	4-5
# ::node	0.0.0.0.0.0.0	america	4-5
# ::node	0.0.0.0.1	tour-01	5-6
# ::node	0.1	country	0-2
# ::node	0.1.0	name	0-2
# ::node	0.1.0.0	north	0-2
# ::node	0.1.0.1	korea	0-2
# ::root	0	say-01
# ::edge	country	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	face-01	ARG0	person	0.0	0.0.0.0
# ::edge	face-01	ARG1	try-02	0.0	0.0.0
# ::edge	name	op1	america	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op1	north	0.1.0	0.1.0.0
# ::edge	name	op2	korea	0.1.0	0.1.0.1
# ::edge	person	ARG0-of	tour-01	0.0.0.0	0.0.0.0.1
# ::edge	person	mod	country	0.0.0.0	0.0.0.0.0
# ::edge	say-01	ARG0	country	0	0.1
# ::edge	say-01	ARG1	face-01	0	0.0
# ::edge	try-02	ARG1	person	0.0.0	0.0.0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / face-01 :ARG1 (MRPNode-2 / try-02 :ARG1 (MRPNode-3 / person :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 america)) :ARG0-of (MRPNode-6 / tour-01))) :ARG0 MRPNode-3) :ARG0 (MRPNode-7 / country :name (MRPNode-8 / name :op1 north :op2 korea)))

# ::id 465
# ::snt Mandela in Hospital for 3rd Day
# ::tok Mandela in Hospital for 3rd Day
# ::alignments 1-2|0 2-3|0.2 4-5|0.1.0+0.1.0.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.336261 ::parser eager_oracle ::smatch 0.6923076923076924 ::n_actions 23
# ::node	0	be-located-at-91	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	mandela	0-1
# ::node	0.1	day	5-6
# ::node	0.1.0	ordinal-entity	4-5
# ::node	0.1.0.0	3	4-5
# ::node	0.2	hospital	2-3
# ::node	0.2.0	name	2-3
# ::node	0.2.0.0	hospital	2-3
# ::root	0	be-located-at-91
# ::edge	be-located-at-91	ARG1	person	0	0.0
# ::edge	be-located-at-91	ARG2	day	0	0.1
# ::edge	be-located-at-91	ARG2	hospital	0	0.2
# ::edge	day	ord	ordinal-entity	0.1	0.1.0
# ::edge	hospital	name	name	0.2	0.2.0
# ::edge	name	op1	hospital	0.2.0	0.2.0.0
# ::edge	name	op1	mandela	0.0.0	0.0.0.0
# ::edge	ordinal-entity	value	3	0.1.0	0.1.0.0
# ::edge	person	name	name	0.0	0.0.0
(MRPNode-0 / be-located-at-91 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 mandela)) :ARG2 (MRPNode-3 / day :ord (MRPNode-4 / ordinal-entity :value 3)) :ARG2 (MRPNode-5 / hospital :name (MRPNode-6 / name :op1 hospital)))

# ::id 466
# ::snt Murray wins Wimbledon title ends Britains 77year agony
# ::tok Murray wins Wimbledon title ends Britains 77year agony
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 2-3|0.2.0+0.2.0.0 3-4|0.2 5-6|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.343526 ::parser eager_oracle ::smatch 0.7555555555555555 ::n_actions 27
# ::node	0	win-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	murray	0-1
# ::node	0.1	agony	7-8
# ::node	0.1.0	between	
# ::node	0.1.0.0	country	5-6
# ::node	0.1.0.0.0	name	5-6
# ::node	0.1.0.0.0.0	britain	5-6
# ::node	0.1.0.1	temporal-quantity	
# ::node	0.1.0.1.0	1	
# ::node	0.1.0.1.1	year	
# ::node	0.2	title	3-4
# ::node	0.2.0	name	2-3
# ::node	0.2.0.0	wimbledon	2-3
# ::root	0	win-01
# ::edge	agony	mod	between	0.1	0.1.0
# ::edge	between	op1	country	0.1.0	0.1.0.0
# ::edge	between	op2	temporal-quantity	0.1.0	0.1.0.1
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	britain	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op1	murray	0.0.0	0.0.0.0
# ::edge	name	op1	wimbledon	0.2.0	0.2.0.0
# ::edge	person	name	name	0.0	0.0.0
# ::edge	temporal-quantity	quant	1	0.1.0.1	0.1.0.1.0
# ::edge	temporal-quantity	quant	year	0.1.0.1	0.1.0.1.1
# ::edge	title	name	name	0.2	0.2.0
# ::edge	win-01	ARG1	agony	0	0.1
# ::edge	win-01	ARG1	person	0	0.0
# ::edge	win-01	ARG1	title	0	0.2
(MRPNode-0 / win-01 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 murray)) :ARG1 (MRPNode-3 / agony :mod (MRPNode-4 / between :op1 (MRPNode-5 / country :name (MRPNode-6 / name :op1 britain)) :op2 (MRPNode-7 / temporal-quantity :quant 1 :quant (MRPNode-8 / year)))) :ARG1 (MRPNode-9 / title :name (MRPNode-10 / name :op1 wimbledon)))

# ::id 467
# ::snt Pope urges action on climate change in draft encyclical
# ::tok Pope urges action on climate change in draft encyclical
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 4-5|0.0.0.0 5-6|0.0.0 7-8|0.2.0 8-9|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:40.349171 ::parser eager_oracle ::smatch 0.8749999999999999 ::n_actions 28
# ::node	0	urge-01	1-2
# ::node	0.0	act-02	
# ::node	0.0.0	change-01	5-6
# ::node	0.0.0.0	climate	4-5
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	pope	0-1
# ::node	0.2	encyclical	8-9
# ::node	0.2.0	draft-01	7-8
# ::root	0	urge-01
# ::edge	act-02	ARG1	change-01	0.0	0.0.0
# ::edge	change-01	ARG1	climate	0.0.0	0.0.0.0
# ::edge	encyclical	ARG1-of	draft-01	0.2	0.2.0
# ::edge	name	op1	pope	0.1.0	0.1.0.0
# ::edge	person	name	name	0.1	0.1.0
# ::edge	urge-01	ARG0	person	0	0.1
# ::edge	urge-01	ARG1	act-02	0	0.0
# ::edge	urge-01	medium	encyclical	0	0.2
(MRPNode-0 / urge-01 :ARG1 (MRPNode-1 / act-02 :ARG1 (MRPNode-2 / change-01 :ARG1 (MRPNode-3 / climate))) :ARG0 (MRPNode-4 / person :name (MRPNode-5 / name :op1 pope)) :medium (MRPNode-6 / encyclical :ARG1-of (MRPNode-7 / draft-01)))

# ::id 468
# ::snt Who was 'Jihadi John?'
# ::tok Who was ' Jihadi John ? '
# ::alignments 0-1|0.0 3-4|0.2+0.2.0+0.2.0.0 4-5|0+0.1+0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.351705 ::parser eager_oracle ::smatch 1.0 ::n_actions 18
# ::node	0	person	4-5
# ::node	0.0	amr-unknown	0-1
# ::node	0.1	name	4-5
# ::node	0.1.0	john	4-5
# ::node	0.2	religious-group	3-4
# ::node	0.2.0	name	3-4
# ::node	0.2.0.0	jihadi	3-4
# ::root	0	person
# ::edge	name	op1	jihadi	0.2.0	0.2.0.0
# ::edge	name	op1	john	0.1	0.1.0
# ::edge	person	mod	amr-unknown	0	0.0
# ::edge	person	mod	religious-group	0	0.2
# ::edge	person	name	name	0	0.1
# ::edge	religious-group	name	name	0.2	0.2.0
(MRPNode-0 / person :mod (MRPNode-1 / amr-unknown) :name (MRPNode-2 / name :op1 john) :mod (MRPNode-3 / religious-group :name (MRPNode-4 / name :op1 jihadi)))

# ::id 469
# ::snt Iran, IAEA officials meet ahead of March nuclear deadline: ISNA
# ::tok Iran , IAEA officials meet ahead of March nuclear deadline : ISNA
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 2-3|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 3-4|0.0+0.0.0+0.0.0.1 4-5|0 5-6|0.2 7-8|0.2.0.1+0.2.0.1.0 8-9|0.2.0.0 9-10|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.386051 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	meet-03	4-5
# ::node	0.0	person	3-4
# ::node	0.0.0	have-org-role-91	3-4
# ::node	0.0.0.0	organization	2-3
# ::node	0.0.0.0.0	name	2-3
# ::node	0.0.0.0.0.0	iaea	2-3
# ::node	0.0.0.1	official	3-4
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	iran	0-1
# ::node	0.2	ahead	5-6
# ::node	0.2.0	deadline	9-10
# ::node	0.2.0.0	nucleus	8-9
# ::node	0.2.0.1	date-entity	7-8
# ::node	0.2.0.1.0	3	7-8
# ::root	0	meet-03
# ::edge	ahead	op1	deadline	0.2	0.2.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	date-entity	month	3	0.2.0.1	0.2.0.1.0
# ::edge	deadline	mod	nucleus	0.2.0	0.2.0.0
# ::edge	deadline	time	date-entity	0.2.0	0.2.0.1
# ::edge	have-org-role-91	ARG1	organization	0.0.0	0.0.0.0
# ::edge	have-org-role-91	ARG2	official	0.0.0	0.0.0.1
# ::edge	meet-03	ARG0	country	0	0.1
# ::edge	meet-03	ARG0	person	0	0.0
# ::edge	meet-03	time	ahead	0	0.2
# ::edge	name	op1	iaea	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	iran	0.1.0	0.1.0.0
# ::edge	organization	name	name	0.0.0.0	0.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.0
(MRPNode-0 / meet-03 :ARG0 (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-org-role-91 :ARG1 (MRPNode-3 / organization :name (MRPNode-4 / name :op1 iaea)) :ARG2 (MRPNode-5 / official))) :ARG0 (MRPNode-6 / country :name (MRPNode-7 / name :op1 iran)) :time (MRPNode-8 / ahead :op1 (MRPNode-9 / deadline :mod (MRPNode-10 / nucleus) :time (MRPNode-11 / date-entity :month 3))))

# ::id 470
# ::snt U.S., EU Boost Sanctions On Russia
# ::tok U.S. , EU Boost Sanctions On Russia
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 2-3|0.0.0+0.0.0.0+0.0.0.0.0 4-5|0.0 6-7|0.0.1+0.0.1.0+0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.391609 ::parser eager_oracle ::smatch 0.8333333333333333 ::n_actions 20
# ::node	0	oppose-01	
# ::node	0.0	sanction-02	4-5
# ::node	0.0.0	organization	2-3
# ::node	0.0.0.0	name	2-3
# ::node	0.0.0.0.0	eu	2-3
# ::node	0.0.1	country	6-7
# ::node	0.0.1.0	name	6-7
# ::node	0.0.1.0.0	russia	6-7
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	u.s.	0-1
# ::root	0	oppose-01
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	name	op1	eu	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	russia	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	u.s.	0.1.0	0.1.0.0
# ::edge	oppose-01	ARG0	country	0	0.1
# ::edge	oppose-01	ARG1	sanction-02	0	0.0
# ::edge	organization	name	name	0.0.0	0.0.0.0
# ::edge	sanction-02	ARG0	country	0.0	0.0.1
# ::edge	sanction-02	ARG0	organization	0.0	0.0.0
(MRPNode-0 / oppose-01 :ARG1 (MRPNode-1 / sanction-02 :ARG0 (MRPNode-2 / organization :name (MRPNode-3 / name :op1 eu)) :ARG0 (MRPNode-4 / country :name (MRPNode-5 / name :op1 russia))) :ARG0 (MRPNode-6 / country :name (MRPNode-7 / name :op1 u.s.)))

# ::id 471
# ::snt Attorney General Eric Holder to Resign
# ::tok Attorney General Eric Holder to Resign
# ::alignments 0-1|0.0.1+0.0.1.0 1-2|0.0.1.0.0 2-4|0.0+0.0.0+0.0.0.0+0.0.0.1 5-6|0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.395098 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	resign-01	5-6
# ::node	0.0	person	2-4
# ::node	0.0.0	name	2-4
# ::node	0.0.0.0	eric	2-4
# ::node	0.0.0.1	holder	2-4
# ::node	0.0.1	have-org-role-91	0-1
# ::node	0.0.1.0	attorney	0-1
# ::node	0.0.1.0.0	general	1-2
# ::root	0	resign-01
# ::edge	attorney	mod	general	0.0.1.0	0.0.1.0.0
# ::edge	have-org-role-91	ARG2	attorney	0.0.1	0.0.1.0
# ::edge	name	op1	eric	0.0.0	0.0.0.0
# ::edge	name	op2	holder	0.0.0	0.0.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.1
# ::edge	person	name	name	0.0	0.0.0
# ::edge	resign-01	ARG0	person	0	0.0
(MRPNode-0 / resign-01 :ARG0 (MRPNode-1 / person :name (MRPNode-2 / name :op1 eric :op2 holder) :ARG0-of (MRPNode-3 / have-org-role-91 :ARG2 (MRPNode-4 / attorney :mod (MRPNode-5 / general)))))

# ::id 472
# ::snt AbbVie cools on $55bn Shire deal after US tax changes
# ::tok AbbVie cools on $ 55bn Shire deal after US tax changes
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 6-7|0.0 7-8|0.2 8-9|0.2.0.0.0+0.2.0.0.0.0+0.2.0.0.0.0.0 9-10|0.2.0.0 10-11|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.404568 ::parser eager_oracle ::smatch 0.851063829787234 ::n_actions 34
# ::node	0	cool-01	1-2
# ::node	0.0	deal	6-7
# ::node	0.0.0	monetary-quantity	
# ::node	0.0.0.0	500000000000	
# ::node	0.0.0.1	dollar	
# ::node	0.0.1	trade-01	
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	abbvie	0-1
# ::node	0.2	after	7-8
# ::node	0.2.0	change-01	10-11
# ::node	0.2.0.0	tax-01	9-10
# ::node	0.2.0.0.0	country	8-9
# ::node	0.2.0.0.0.0	name	8-9
# ::node	0.2.0.0.0.0.0	us	8-9
# ::root	0	cool-01
# ::edge	after	op1	change-01	0.2	0.2.0
# ::edge	change-01	ARG1	tax-01	0.2.0	0.2.0.0
# ::edge	cool-01	ARG0	person	0	0.1
# ::edge	cool-01	ARG1	deal	0	0.0
# ::edge	cool-01	time	after	0	0.2
# ::edge	country	name	name	0.2.0.0.0	0.2.0.0.0.0
# ::edge	deal	ARG1-of	monetary-quantity	0.0	0.0.0
# ::edge	deal	ARG1-of	trade-01	0.0	0.0.1
# ::edge	monetary-quantity	quant	500000000000	0.0.0	0.0.0.0
# ::edge	monetary-quantity	quant	dollar	0.0.0	0.0.0.1
# ::edge	name	op1	abbvie	0.1.0	0.1.0.0
# ::edge	name	op1	us	0.2.0.0.0.0	0.2.0.0.0.0.0
# ::edge	person	name	name	0.1	0.1.0
# ::edge	tax-01	ARG2	country	0.2.0.0	0.2.0.0.0
(MRPNode-0 / cool-01 :ARG1 (MRPNode-1 / deal :ARG1-of (MRPNode-2 / monetary-quantity :quant 500000000000 :quant (MRPNode-3 / dollar)) :ARG1-of (MRPNode-4 / trade-01)) :ARG0 (MRPNode-5 / person :name (MRPNode-6 / name :op1 abbvie)) :time (MRPNode-7 / after :op1 (MRPNode-8 / change-01 :ARG1 (MRPNode-9 / tax-01 :ARG2 (MRPNode-10 / country :name (MRPNode-11 / name :op1 us))))))

# ::id 473
# ::snt Hawaii bracing as first hurricane in 22 years approaches
# ::tok Hawaii bracing as first hurricane in 22 years approaches
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 4-5|0.0.0 6-7|0.0.0.0.1.0 7-8|0.0.0.0.1+0.0.0.0.1.1 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.410790 ::parser eager_oracle ::smatch 0.5945945945945946 ::n_actions 28
# ::node	0	track-01	
# ::node	0.0	approach-01	8-9
# ::node	0.0.0	hurricane	4-5
# ::node	0.0.0.0	before	
# ::node	0.0.0.0.0	now	
# ::node	0.0.0.0.1	temporal-quantity	7-8
# ::node	0.0.0.0.1.0	22	6-7
# ::node	0.0.0.0.1.1	year	7-8
# ::node	0.0.0.1	ordinal-entity	
# ::node	0.0.0.1.0	1	
# ::node	0.1	state	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	hawaii	0-1
# ::root	0	track-01
# ::edge	approach-01	ARG2	hurricane	0.0	0.0.0
# ::edge	before	duration	temporal-quantity	0.0.0.0	0.0.0.0.1
# ::edge	before	op1	now	0.0.0.0	0.0.0.0.0
# ::edge	hurricane	ord	before	0.0.0	0.0.0.0
# ::edge	hurricane	ord	ordinal-entity	0.0.0	0.0.0.1
# ::edge	name	op1	hawaii	0.1.0	0.1.0.0
# ::edge	ordinal-entity	value	1	0.0.0.1	0.0.0.1.0
# ::edge	state	name	name	0.1	0.1.0
# ::edge	temporal-quantity	quant	22	0.0.0.0.1	0.0.0.0.1.0
# ::edge	temporal-quantity	unit	year	0.0.0.0.1	0.0.0.0.1.1
# ::edge	track-01	ARG0	state	0	0.1
# ::edge	track-01	ARG1	approach-01	0	0.0
(MRPNode-0 / track-01 :ARG1 (MRPNode-1 / approach-01 :ARG2 (MRPNode-2 / hurricane :ord (MRPNode-3 / before :op1 (MRPNode-4 / now) :duration (MRPNode-5 / temporal-quantity :quant 22 :unit (MRPNode-6 / year))) :ord (MRPNode-7 / ordinal-entity :value 1))) :ARG0 (MRPNode-8 / state :name (MRPNode-9 / name :op1 hawaii)))

# ::id 474
# ::snt Oil prices down in Asian trade
# ::tok Oil prices down in Asian trade
# ::alignments 0-1|0.0.0 1-2|0.0 2-3|0 4-5|0.1.0+0.1.0.0+0.1.0.0.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.414351 ::parser eager_oracle ::smatch 0.9230769230769231 ::n_actions 23
# ::node	0	down-03	2-3
# ::node	0.0	price-01	1-2
# ::node	0.0.0	oil	0-1
# ::node	0.1	trade-01	5-6
# ::node	0.1.0	continent	4-5
# ::node	0.1.0.0	name	4-5
# ::node	0.1.0.0.0	asia	4-5
# ::root	0	down-03
# ::edge	continent	name	name	0.1.0	0.1.0.0
# ::edge	down-03	ARG1	price-01	0	0.0
# ::edge	down-03	location	trade-01	0	0.1
# ::edge	name	op1	asia	0.1.0.0	0.1.0.0.0
# ::edge	price-01	ARG1	oil	0.0	0.0.0
# ::edge	trade-01	location	continent	0.1	0.1.0
(MRPNode-0 / down-03 :ARG1 (MRPNode-1 / price-01 :ARG1 (MRPNode-2 / oil)) :location (MRPNode-3 / trade-01 :location (MRPNode-4 / continent :name (MRPNode-5 / name :op1 asia))))

# ::id 475
# ::snt Driver backs into mom, stroller with child then drives off
# ::tok Driver backs into mom , stroller with child then drives off
# ::alignments 0-1|0.0.1+0.0.1.0 1-2|0.0 3-4|0.0.0+0.0.0.0+0.0.0.0.0 6-7|0 8-9|0.1.1 9-10|0.1 10-11|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.426857 ::parser eager_oracle ::smatch 0.9302325581395349 ::n_actions 48
# ::node	0	and	6-7
# ::node	0.0	back-02	1-2
# ::node	0.0.0	person	3-4
# ::node	0.0.0.0	have-rel-role-91	3-4
# ::node	0.0.0.0.0	mom	3-4
# ::node	0.0.1	person	0-1
# ::node	0.0.1.0	drive-01	0-1
# ::node	0.1	drive-01	9-10
# ::node	0.1.0	off	10-11
# ::node	0.1.1	then	8-9
# ::root	0	and
# ::edge	and	op1	back-02	0	0.0
# ::edge	and	op2	drive-01	0	0.1
# ::edge	back-02	ARG1	person	0.0	0.0.0
# ::edge	back-02	destination	person	0.0	0.0.1
# ::edge	drive-01	ARG0	person	0.1	0.0.0
# ::edge	drive-01	direction	off	0.1	0.1.0
# ::edge	drive-01	time	then	0.1	0.1.1
# ::edge	have-rel-role-91	ARG2	mom	0.0.0.0	0.0.0.0.0
# ::edge	person	ARG0-of	drive-01	0.0.1	0.0.1.0
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0	0.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / back-02 :ARG1 (MRPNode-2 / person :ARG0-of (MRPNode-3 / have-rel-role-91 :ARG2 (MRPNode-4 / mom))) :destination (MRPNode-5 / person :ARG0-of (MRPNode-6 / drive-01))) :op2 (MRPNode-7 / drive-01 :ARG0 MRPNode-2 :direction (MRPNode-8 / off) :time (MRPNode-9 / then)))

# ::id 476
# ::snt Uganda's president signs harsh anti-gay law
# ::tok Uganda 's president signs harsh anti - gay law
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 2-3|0.1+0.1.0+0.1.0.1 3-4|0 4-5|0.0.0 5-6|0.0.1 7-8|0.0.1.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.435252 ::parser eager_oracle ::smatch 1.0 ::n_actions 41
# ::node	0	sign-01	3-4
# ::node	0.0	law	8-9
# ::node	0.0.0	harsh-02	4-5
# ::node	0.0.1	oppose-01	5-6
# ::node	0.0.1.0	gay-01	7-8
# ::node	0.1	person	2-3
# ::node	0.1.0	have-org-role-91	2-3
# ::node	0.1.0.0	country	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	uganda	0-1
# ::node	0.1.0.1	president	2-3
# ::root	0	sign-01
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	president	0.1.0	0.1.0.1
# ::edge	law	ARG0-of	harsh-02	0.0	0.0.0
# ::edge	law	ARG0-of	oppose-01	0.0	0.0.1
# ::edge	name	op1	uganda	0.1.0.0.0	0.1.0.0.0.0
# ::edge	oppose-01	ARG1	gay-01	0.0.1	0.0.1.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	sign-01	ARG0	person	0	0.1
# ::edge	sign-01	ARG1	law	0	0.0
(MRPNode-0 / sign-01 :ARG1 (MRPNode-1 / law :ARG0-of (MRPNode-2 / harsh-02) :ARG0-of (MRPNode-3 / oppose-01 :ARG1 (MRPNode-4 / gay-01))) :ARG0 (MRPNode-5 / person :ARG0-of (MRPNode-6 / have-org-role-91 :ARG1 (MRPNode-7 / country :name (MRPNode-8 / name :op1 uganda)) :ARG2 (MRPNode-9 / president))))

# ::id 477
# ::snt Silvio Berlusconi expelled from parliament
# ::tok Silvio Berlusconi expelled from parliament
# ::alignments 0-2|0.0+0.0.0+0.0.0.0+0.0.0.1 2-3|0 4-5|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.437775 ::parser eager_oracle ::smatch 1.0 ::n_actions 16
# ::node	0	expel-01	2-3
# ::node	0.0	person	0-2
# ::node	0.0.0	name	0-2
# ::node	0.0.0.0	silvio	0-2
# ::node	0.0.0.1	berlusconi	0-2
# ::node	0.1	government-organization	4-5
# ::node	0.1.0	name	4-5
# ::node	0.1.0.0	parliament	4-5
# ::root	0	expel-01
# ::edge	expel-01	ARG1	person	0	0.0
# ::edge	expel-01	ARG2	government-organization	0	0.1
# ::edge	government-organization	name	name	0.1	0.1.0
# ::edge	name	op1	parliament	0.1.0	0.1.0.0
# ::edge	name	op1	silvio	0.0.0	0.0.0.0
# ::edge	name	op2	berlusconi	0.0.0	0.0.0.1
# ::edge	person	name	name	0.0	0.0.0
(MRPNode-0 / expel-01 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 silvio :op2 berlusconi)) :ARG2 (MRPNode-3 / government-organization :name (MRPNode-4 / name :op1 parliament)))

# ::id 478
# ::snt Mubarak retrial adjourned to June
# ::tok Mubarak retrial adjourned to June
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 4-5|0.1+0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.443733 ::parser eager_oracle ::smatch 0.6 ::n_actions 12
# ::node	0	uphold-01	
# ::node	0.0	try-02	
# ::node	0.0.0	person	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	mubarak	0-1
# ::node	0.1	date-entity	4-5
# ::node	0.1.0	6	4-5
# ::root	0	uphold-01
# ::edge	date-entity	month	6	0.1	0.1.0
# ::edge	name	op1	mubarak	0.0.0.0	0.0.0.0.0
# ::edge	person	name	name	0.0.0	0.0.0.0
# ::edge	try-02	ARG1	person	0.0	0.0.0
# ::edge	uphold-01	ARG1	try-02	0	0.0
# ::edge	uphold-01	time	date-entity	0	0.1
(MRPNode-0 / uphold-01 :ARG1 (MRPNode-1 / try-02 :ARG1 (MRPNode-2 / person :name (MRPNode-3 / name :op1 mubarak))) :time (MRPNode-4 / date-entity :month 6))

# ::id 479
# ::snt Egypt protesters defy cabinet threat
# ::tok Egypt protesters defy cabinet threat
# ::alignments 0-1|0.1+0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1.1 2-3|0 3-4|0.0.0+0.0.0.0+0.0.0.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.447773 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	defy-01	2-3
# ::node	0.0	threaten-01	4-5
# ::node	0.0.0	government-organization	3-4
# ::node	0.0.0.0	name	3-4
# ::node	0.0.0.0.0	cabinet	3-4
# ::node	0.1	person	0-1
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	egypt	0-1
# ::node	0.1.1	protest-01	1-2
# ::root	0	defy-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	defy-01	ARG0	person	0	0.1
# ::edge	defy-01	ARG1	threaten-01	0	0.0
# ::edge	government-organization	name	name	0.0.0	0.0.0.0
# ::edge	name	op1	cabinet	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	egypt	0.1.0.0	0.1.0.0.0
# ::edge	person	ARG0-of	country	0.1	0.1.0
# ::edge	person	ARG0-of	protest-01	0.1	0.1.1
# ::edge	threaten-01	ARG0	government-organization	0.0	0.0.0
(MRPNode-0 / defy-01 :ARG1 (MRPNode-1 / threaten-01 :ARG0 (MRPNode-2 / government-organization :name (MRPNode-3 / name :op1 cabinet))) :ARG0 (MRPNode-4 / person :ARG0-of (MRPNode-5 / country :name (MRPNode-6 / name :op1 egypt)) :ARG0-of (MRPNode-7 / protest-01)))

# ::id 480
# ::snt Qatari emir hands power to son Tamim
# ::tok Qatari emir hands power to son Tamim
# ::alignments 1-2|0.2.1+0.2.1.0 2-3|0 3-4|0.0 5-6|0.1.0.1 6-7|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.454350 ::parser eager_oracle ::smatch 0.7027027027027027 ::n_actions 28
# ::node	0	hand-01	2-3
# ::node	0.0	power	3-4
# ::node	0.1	person	
# ::node	0.1.0	have-rel-role-91	
# ::node	0.1.0.0	country	
# ::node	0.1.0.0.0	name	
# ::node	0.1.0.0.0.0	syria	
# ::node	0.1.0.1	son	5-6
# ::node	0.2	person	6-7
# ::node	0.2.0	name	6-7
# ::node	0.2.0.0	tamim	6-7
# ::node	0.2.1	have-org-role-91	1-2
# ::node	0.2.1.0	emir	1-2
# ::root	0	hand-01
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	hand-01	ARG0	person	0	0.1
# ::edge	hand-01	ARG1	power	0	0.0
# ::edge	hand-01	ARG2	person	0	0.2
# ::edge	have-org-role-91	ARG2	emir	0.2.1	0.2.1.0
# ::edge	have-rel-role-91	ARG2	country	0.1.0	0.1.0.0
# ::edge	have-rel-role-91	ARG2	son	0.1.0	0.1.0.1
# ::edge	name	op1	syria	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op1	tamim	0.2.0	0.2.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.2	0.2.1
# ::edge	person	ARG0-of	have-rel-role-91	0.1	0.1.0
# ::edge	person	name	name	0.2	0.2.0
(MRPNode-0 / hand-01 :ARG1 (MRPNode-1 / power) :ARG0 (MRPNode-2 / person :ARG0-of (MRPNode-3 / have-rel-role-91 :ARG2 (MRPNode-4 / country :name (MRPNode-5 / name :op1 syria)) :ARG2 (MRPNode-6 / son))) :ARG2 (MRPNode-7 / person :name (MRPNode-8 / name :op1 tamim) :ARG0-of (MRPNode-9 / have-org-role-91 :ARG2 (MRPNode-10 / emir))))

# ::id 481
# ::snt Egypt braces for Friday of anger after bloody crackdown
# ::tok Egypt braces for Friday of anger after bloody crackdown
# ::alignments 0-1|0.0+0.0.1+0.0.1.0 3-4|0.2.0 5-6|0.0.0 6-7|0.1 7-8|0.1.0.0 8-9|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.459340 ::parser eager_oracle ::smatch 0.6875 ::n_actions 27
# ::node	0	accelerate-01	
# ::node	0.0	country	0-1
# ::node	0.0.0	anger-01	5-6
# ::node	0.0.1	name	0-1
# ::node	0.0.1.0	egypt	0-1
# ::node	0.1	after	6-7
# ::node	0.1.0	crack-down-06	8-9
# ::node	0.1.0.0	bloody	7-8
# ::node	0.2	date-entity	
# ::node	0.2.0	friday	3-4
# ::root	0	accelerate-01
# ::edge	accelerate-01	ARG1	country	0	0.0
# ::edge	accelerate-01	time	after	0	0.1
# ::edge	accelerate-01	time	date-entity	0	0.2
# ::edge	after	op1	crack-down-06	0.1	0.1.0
# ::edge	country	ARG1-of	anger-01	0.0	0.0.0
# ::edge	country	name	name	0.0	0.0.1
# ::edge	crack-down-06	mod	bloody	0.1.0	0.1.0.0
# ::edge	date-entity	weekday	friday	0.2	0.2.0
# ::edge	name	op1	egypt	0.0.1	0.0.1.0
(MRPNode-0 / accelerate-01 :ARG1 (MRPNode-1 / country :ARG1-of (MRPNode-2 / anger-01) :name (MRPNode-3 / name :op1 egypt)) :time (MRPNode-4 / after :op1 (MRPNode-5 / crack-down-06 :mod (MRPNode-6 / bloody))) :time (MRPNode-7 / date-entity :weekday (MRPNode-8 / friday)))

# ::id 482
# ::snt Red Sox beat Tigers to reach World Series
# ::tok Red Sox beat Tigers to reach World Series
# ::alignments 0-2|0.0+0.0.0+0.0.0.0+0.0.0.1 2-3|0 3-4|0.1+0.1.0+0.1.0.0 5-6|0.2 6-8|0.2.0+0.2.0.0+0.2.0.0.0+0.2.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.465828 ::parser eager_oracle ::smatch 0.9545454545454546 ::n_actions 27
# ::node	0	beat-03	2-3
# ::node	0.0	team	0-2
# ::node	0.0.0	name	0-2
# ::node	0.0.0.0	red	0-2
# ::node	0.0.0.1	sox	0-2
# ::node	0.1	team	3-4
# ::node	0.1.0	name	3-4
# ::node	0.1.0.0	tiger	3-4
# ::node	0.2	reach-01	5-6
# ::node	0.2.0	game	6-8
# ::node	0.2.0.0	name	6-8
# ::node	0.2.0.0.0	world	6-8
# ::node	0.2.0.0.1	series	6-8
# ::root	0	beat-03
# ::edge	beat-03	ARG0	team	0	0.1
# ::edge	beat-03	ARG1	team	0	0.0
# ::edge	beat-03	purpose	reach-01	0	0.2
# ::edge	game	name	name	0.2.0	0.2.0.0
# ::edge	name	op1	red	0.0.0	0.0.0.0
# ::edge	name	op1	tiger	0.1.0	0.1.0.0
# ::edge	name	op1	world	0.2.0.0	0.2.0.0.0
# ::edge	name	op2	series	0.2.0.0	0.2.0.0.1
# ::edge	name	op2	sox	0.0.0	0.0.0.1
# ::edge	reach-01	ARG0	team	0.2	0.0
# ::edge	reach-01	ARG1	game	0.2	0.2.0
# ::edge	team	name	name	0.0	0.0.0
# ::edge	team	name	name	0.1	0.1.0
(MRPNode-0 / beat-03 :ARG1 (MRPNode-1 / team :name (MRPNode-2 / name :op1 red :op2 sox)) :ARG0 (MRPNode-3 / team :name (MRPNode-4 / name :op1 tiger)) :purpose (MRPNode-5 / reach-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-6 / game :name (MRPNode-7 / name :op1 world :op2 series))))

# ::id 483
# ::snt China lands robot rover on moon
# ::tok China lands robot rover on moon
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 3-4|0.0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:40.468483 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	land-01	1-2
# ::node	0.0	rover	3-4
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	china	0-1
# ::node	0.2	moon	5-6
# ::root	0	land-01
# ::edge	country	name	name	0.1	0.1.0
# ::edge	land-01	ARG0	country	0	0.1
# ::edge	land-01	ARG1	rover	0	0.0
# ::edge	land-01	location	moon	0	0.2
# ::edge	name	op1	china	0.1.0	0.1.0.0
(MRPNode-0 / land-01 :ARG1 (MRPNode-1 / rover) :ARG0 (MRPNode-2 / country :name (MRPNode-3 / name :op1 china)) :location (MRPNode-4 / moon))

# ::id 484
# ::snt Ukraine's parliament votes to dismiss president
# ::tok Ukraine 's parliament votes to dismiss president
# ::alignments 0-1|0.0.0.0.1+0.0.0.0.1.0+0.0.0.0.1.0.0 2-3|0.0.1 3-4|0 5-6|0.0 6-7|0.0.0+0.0.0.0+0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.473578 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	vote-01	3-4
# ::node	0.0	dismiss-01	5-6
# ::node	0.0.0	person	6-7
# ::node	0.0.0.0	have-org-role-91	6-7
# ::node	0.0.0.0.0	president	6-7
# ::node	0.0.0.0.1	country	0-1
# ::node	0.0.0.0.1.0	name	0-1
# ::node	0.0.0.0.1.0.0	ukraine	0-1
# ::node	0.0.1	parliament	2-3
# ::root	0	vote-01
# ::edge	country	name	name	0.0.0.0.1	0.0.0.0.1.0
# ::edge	dismiss-01	ARG0	parliament	0.0	0.0.1
# ::edge	dismiss-01	ARG1	person	0.0	0.0.0
# ::edge	have-org-role-91	ARG1	country	0.0.0.0	0.0.0.0.1
# ::edge	have-org-role-91	ARG2	president	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	ukraine	0.0.0.0.1.0	0.0.0.0.1.0.0
# ::edge	parliament	poss	country	0.0.1	0.0.0.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.0.0	0.0.0.0
# ::edge	vote-01	ARG0	parliament	0	0.0.1
# ::edge	vote-01	ARG1	dismiss-01	0	0.0
(MRPNode-0 / vote-01 :ARG1 (MRPNode-1 / dismiss-01 :ARG1 (MRPNode-2 / person :ARG0-of (MRPNode-3 / have-org-role-91 :ARG2 (MRPNode-4 / president) :ARG1 (MRPNode-6 / country :name (MRPNode-7 / name :op1 ukraine)))) :ARG0 (MRPNode-5 / parliament :poss MRPNode-6)) :ARG0 MRPNode-5)

# ::id 485
# ::snt Captain of capsized S Korean Ferry Arrested
# ::tok Captain of capsized S Korean Ferry Arrested
# ::alignments 0-1|0.0+0.0.0+0.0.0.1 3-6|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.1+0.0.0.0.0.2 6-7|0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.477733 ::parser eager_oracle ::smatch 0.8000000000000002 ::n_actions 25
# ::node	0	arrest-01	6-7
# ::node	0.0	person	0-1
# ::node	0.0.0	have-org-role-91	0-1
# ::node	0.0.0.0	ship	
# ::node	0.0.0.0.0	name	3-6
# ::node	0.0.0.0.0.0	s	3-6
# ::node	0.0.0.0.0.1	korean	3-6
# ::node	0.0.0.0.0.2	ferry	3-6
# ::node	0.0.0.0.1	collapse-01	
# ::node	0.0.0.1	captain	0-1
# ::root	0	arrest-01
# ::edge	arrest-01	ARG1	person	0	0.0
# ::edge	have-org-role-91	ARG1	ship	0.0.0	0.0.0.0
# ::edge	have-org-role-91	ARG2	captain	0.0.0	0.0.0.1
# ::edge	name	op1	s	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op2	korean	0.0.0.0.0	0.0.0.0.0.1
# ::edge	name	op3	ferry	0.0.0.0.0	0.0.0.0.0.2
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.0
# ::edge	ship	ARG1-of	collapse-01	0.0.0.0	0.0.0.0.1
# ::edge	ship	ARG1-of	name	0.0.0.0	0.0.0.0.0
(MRPNode-0 / arrest-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-org-role-91 :ARG1 (MRPNode-3 / ship :ARG1-of (MRPNode-4 / name :op1 s :op2 korean :op3 ferry) :ARG1-of (MRPNode-5 / collapse-01)) :ARG2 (MRPNode-6 / captain))))

# ::id 486
# ::snt Communist rebels kill eight Philippine police
# ::tok Communist rebels kill eight Philippine police
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1+0.1.1 2-3|0 3-4|0.0.0 4-5|0.0.1+0.0.1.0+0.0.1.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.483068 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 30
# ::node	0	kill-01	2-3
# ::node	0.0	police	5-6
# ::node	0.0.0	8	3-4
# ::node	0.0.1	country	4-5
# ::node	0.0.1.0	name	4-5
# ::node	0.0.1.0.0	philippines	4-5
# ::node	0.1	person	1-2
# ::node	0.1.0	political-movement	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	communism	0-1
# ::node	0.1.1	rebel-01	1-2
# ::root	0	kill-01
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	kill-01	ARG0	person	0	0.1
# ::edge	kill-01	ARG1	police	0	0.0
# ::edge	name	op1	communism	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	philippines	0.0.1.0	0.0.1.0.0
# ::edge	person	ARG0-of	rebel-01	0.1	0.1.1
# ::edge	person	mod	political-movement	0.1	0.1.0
# ::edge	police	mod	country	0.0	0.0.1
# ::edge	police	quant	8	0.0	0.0.0
# ::edge	political-movement	name	name	0.1.0	0.1.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / police :quant 8 :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 philippines))) :ARG0 (MRPNode-4 / person :mod (MRPNode-5 / political-movement :name (MRPNode-6 / name :op1 communism)) :ARG0-of (MRPNode-7 / rebel-01)))

# ::id 487
# ::snt Woman dies riding roller coaster at Texas amusement park
# ::tok Woman dies riding roller coaster at Texas amusement park
# ::alignments 0-1|0.0 1-2|0 2-3|0.1 3-4|0.1.0.0 4-5|0.1.0 6-7|0.1.1.0+0.1.1.0.0+0.1.1.0.0.0 7-8|0.1.1.1 8-9|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.490968 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	die-01	1-2
# ::node	0.0	woman	0-1
# ::node	0.1	ride-01	2-3
# ::node	0.1.0	coaster	4-5
# ::node	0.1.0.0	roller	3-4
# ::node	0.1.1	park	8-9
# ::node	0.1.1.0	state	6-7
# ::node	0.1.1.0.0	name	6-7
# ::node	0.1.1.0.0.0	texas	6-7
# ::node	0.1.1.1	amusement	7-8
# ::root	0	die-01
# ::edge	coaster	mod	roller	0.1.0	0.1.0.0
# ::edge	die-01	ARG1	woman	0	0.0
# ::edge	die-01	location	ride-01	0	0.1
# ::edge	name	op1	texas	0.1.1.0.0	0.1.1.0.0.0
# ::edge	park	location	state	0.1.1	0.1.1.0
# ::edge	park	mod	amusement	0.1.1	0.1.1.1
# ::edge	ride-01	ARG0	woman	0.1	0.0
# ::edge	ride-01	ARG1	coaster	0.1	0.1.0
# ::edge	ride-01	location	park	0.1	0.1.1
# ::edge	state	name	name	0.1.1.0	0.1.1.0.0
(MRPNode-0 / die-01 :ARG1 (MRPNode-1 / woman) :location (MRPNode-2 / ride-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-3 / coaster :mod (MRPNode-4 / roller)) :location (MRPNode-5 / park :location (MRPNode-6 / state :name (MRPNode-7 / name :op1 texas)) :mod (MRPNode-8 / amusement))))

# ::id 488
# ::snt Nobel Prize winning author Doris Lessing dies
# ::tok Nobel Prize winning author Doris Lessing dies
# ::alignments 0-2|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.1 2-3|0.0.0 3-4|0.0 4-6|0.1+0.1.0+0.1.0.0+0.1.0.1 6-7|0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.496112 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	die-01	6-7
# ::node	0.0	author-01	3-4
# ::node	0.0.0	win-01	2-3
# ::node	0.0.0.0	award	0-2
# ::node	0.0.0.0.0	name	0-2
# ::node	0.0.0.0.0.0	nobel	0-2
# ::node	0.0.0.0.0.1	prize	0-2
# ::node	0.1	person	4-6
# ::node	0.1.0	name	4-6
# ::node	0.1.0.0	doris	4-6
# ::node	0.1.0.1	lessing	4-6
# ::root	0	die-01
# ::edge	author-01	ARG0-of	win-01	0.0	0.0.0
# ::edge	award	name	name	0.0.0.0	0.0.0.0.0
# ::edge	die-01	ARG1	author-01	0	0.0
# ::edge	die-01	ARG1	person	0	0.1
# ::edge	name	op1	doris	0.1.0	0.1.0.0
# ::edge	name	op1	nobel	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op2	lessing	0.1.0	0.1.0.1
# ::edge	name	op2	prize	0.0.0.0.0	0.0.0.0.0.1
# ::edge	person	name	name	0.1	0.1.0
# ::edge	win-01	ARG2	award	0.0.0	0.0.0.0
(MRPNode-0 / die-01 :ARG1 (MRPNode-1 / author-01 :ARG0-of (MRPNode-2 / win-01 :ARG2 (MRPNode-3 / award :name (MRPNode-4 / name :op1 nobel :op2 prize)))) :ARG1 (MRPNode-5 / person :name (MRPNode-6 / name :op1 doris :op2 lessing)))

# ::id 489
# ::snt Twitter says images blocked in Venezuela
# ::tok Twitter says images blocked in Venezuela
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.0 3-4|0.0 5-6|0.0.1+0.0.1.0+0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.500786 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	say-01	1-2
# ::node	0.0	block-01	3-4
# ::node	0.0.0	image	2-3
# ::node	0.0.1	country	5-6
# ::node	0.0.1.0	name	5-6
# ::node	0.0.1.0.0	venezuela	5-6
# ::node	0.1	publication	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	twitter	0-1
# ::root	0	say-01
# ::edge	block-01	ARG1	image	0.0	0.0.0
# ::edge	block-01	location	country	0.0	0.0.1
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	name	op1	twitter	0.1.0	0.1.0.0
# ::edge	name	op1	venezuela	0.0.1.0	0.0.1.0.0
# ::edge	publication	name	name	0.1	0.1.0
# ::edge	say-01	ARG0	publication	0	0.1
# ::edge	say-01	ARG1	block-01	0	0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / block-01 :ARG1 (MRPNode-2 / image) :location (MRPNode-3 / country :name (MRPNode-4 / name :op1 venezuela))) :ARG0 (MRPNode-5 / publication :name (MRPNode-6 / name :op1 twitter)))

# ::id 490
# ::snt British stuntman dies in wingsuit mishap in Alps
# ::tok British stuntman dies in wingsuit mishap in Alps
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 1-2|0.0+0.0.1+0.0.1.0 2-3|0 4-5|0.1.0+0.1.0.0+0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.507650 ::parser eager_oracle ::smatch 0.8421052631578948 ::n_actions 29
# ::node	0	die-01	2-3
# ::node	0.0	person	1-2
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	britain	0-1
# ::node	0.0.1	have-org-role-91	1-2
# ::node	0.0.1.0	stuntman	1-2
# ::node	0.1	cause-01	
# ::node	0.1.0	show	4-5
# ::node	0.1.0.0	name	4-5
# ::node	0.1.0.0.0	wingsuit	4-5
# ::root	0	die-01
# ::edge	cause-01	ARG0	show	0.1	0.1.0
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	die-01	ARG1	person	0	0.0
# ::edge	die-01	ARG1-of	cause-01	0	0.1
# ::edge	have-org-role-91	ARG2	stuntman	0.0.1	0.0.1.0
# ::edge	name	op1	britain	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	wingsuit	0.1.0.0	0.1.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.1
# ::edge	person	mod	country	0.0	0.0.0
# ::edge	show	name	name	0.1.0	0.1.0.0
(MRPNode-0 / die-01 :ARG1 (MRPNode-1 / person :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 britain)) :ARG0-of (MRPNode-4 / have-org-role-91 :ARG2 (MRPNode-5 / stuntman))) :ARG1-of (MRPNode-6 / cause-01 :ARG0 (MRPNode-7 / show :name (MRPNode-8 / name :op1 wingsuit))))

# ::id 491
# ::snt Eurozone debt crisis is over, says France's President
# ::tok Eurozone debt crisis is over , says France 's President
# ::alignments 0-1|0.0.0.1 1-2|0.0.0.0 2-3|0.0.0 4-5|0.0 6-7|0 7-8|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 9-10|0.1+0.1.0+0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.514771 ::parser eager_oracle ::smatch 1.0 ::n_actions 42
# ::node	0	say-01	6-7
# ::node	0.0	over-01	4-5
# ::node	0.0.0	crisis	2-3
# ::node	0.0.0.0	debt	1-2
# ::node	0.0.0.1	euro	0-1
# ::node	0.1	person	9-10
# ::node	0.1.0	have-org-role-91	9-10
# ::node	0.1.0.0	country	7-8
# ::node	0.1.0.0.0	name	7-8
# ::node	0.1.0.0.0.0	france	7-8
# ::node	0.1.0.1	president	9-10
# ::root	0	say-01
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	crisis	mod	debt	0.0.0	0.0.0.0
# ::edge	crisis	poss	euro	0.0.0	0.0.0.1
# ::edge	have-org-role-91	ARG1	country	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	president	0.1.0	0.1.0.1
# ::edge	name	op1	france	0.1.0.0.0	0.1.0.0.0.0
# ::edge	over-01	ARG1	crisis	0.0	0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	say-01	ARG0	person	0	0.1
# ::edge	say-01	ARG1	over-01	0	0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / over-01 :ARG1 (MRPNode-2 / crisis :mod (MRPNode-3 / debt) :poss (MRPNode-4 / euro))) :ARG0 (MRPNode-5 / person :ARG0-of (MRPNode-6 / have-org-role-91 :ARG1 (MRPNode-7 / country :name (MRPNode-8 / name :op1 france)) :ARG2 (MRPNode-9 / president))))

# ::id 492
# ::snt White diamond fetches record $34m at HK auction
# ::tok White diamond fetches record $ 34m at HK auction
# ::alignments 0-1|0.1.0 1-2|0.1 3-4|0.0 7-8|0.2.0+0.2.0.0+0.2.0.0.0 8-9|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:40.520100 ::parser eager_oracle ::smatch 0.6060606060606061 ::n_actions 24
# ::node	0	dive-01	
# ::node	0.0	record	3-4
# ::node	0.0.0	monetary-quantity	
# ::node	0.0.0.0	34	
# ::node	0.0.0.1	dollar	
# ::node	0.1	diamond	1-2
# ::node	0.1.0	white-03	0-1
# ::node	0.2	auction	8-9
# ::node	0.2.0	city	7-8
# ::node	0.2.0.0	name	7-8
# ::node	0.2.0.0.0	hk	7-8
# ::root	0	dive-01
# ::edge	auction	location	city	0.2	0.2.0
# ::edge	city	name	name	0.2.0	0.2.0.0
# ::edge	diamond	ARG1-of	white-03	0.1	0.1.0
# ::edge	dive-01	ARG0	diamond	0	0.1
# ::edge	dive-01	ARG1	record	0	0.0
# ::edge	dive-01	location	auction	0	0.2
# ::edge	monetary-quantity	quant	34	0.0.0	0.0.0.0
# ::edge	monetary-quantity	unit	dollar	0.0.0	0.0.0.1
# ::edge	name	op1	hk	0.2.0.0	0.2.0.0.0
# ::edge	record	quant	monetary-quantity	0.0	0.0.0
(MRPNode-0 / dive-01 :ARG1 (MRPNode-1 / record :quant (MRPNode-2 / monetary-quantity :quant 34 :unit (MRPNode-3 / dollar))) :ARG0 (MRPNode-4 / diamond :ARG1-of (MRPNode-5 / white-03)) :location (MRPNode-6 / auction :location (MRPNode-7 / city :name (MRPNode-8 / name :op1 hk))))

# ::id 493
# ::snt Treasury proposes 1.5% income tax raise in budget
# ::tok Treasury proposes 1.5 % income tax raise in budget
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.1.0 3-4|0.0.1 4-5|0.0.0.0 5-6|0.0.0 6-7|0.0 8-9|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:40.528989 ::parser eager_oracle ::smatch 0.918918918918919 ::n_actions 35
# ::node	0	propose-01	1-2
# ::node	0.0	raise-01	6-7
# ::node	0.0.0	tax-01	5-6
# ::node	0.0.0.0	income	4-5
# ::node	0.0.1	percentage-entity	3-4
# ::node	0.0.1.0	1.5	2-3
# ::node	0.0.2	budget	8-9
# ::node	0.1	government-organization	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	treasury	0-1
# ::root	0	propose-01
# ::edge	government-organization	name	name	0.1	0.1.0
# ::edge	name	op1	treasury	0.1.0	0.1.0.0
# ::edge	percentage-entity	value	1.5	0.0.1	0.0.1.0
# ::edge	propose-01	ARG0	government-organization	0	0.1
# ::edge	propose-01	ARG1	raise-01	0	0.0
# ::edge	raise-01	ARG1	tax-01	0.0	0.0.0
# ::edge	raise-01	ARG2	percentage-entity	0.0	0.0.1
# ::edge	raise-01	subevent-of	budget	0.0	0.0.2
# ::edge	tax-01	ARG3	income	0.0.0	0.0.0.0
(MRPNode-0 / propose-01 :ARG1 (MRPNode-1 / raise-01 :ARG1 (MRPNode-2 / tax-01 :ARG3 (MRPNode-3 / income)) :ARG2 (MRPNode-4 / percentage-entity :value 1.5) :subevent-of (MRPNode-5 / budget)) :ARG0 (MRPNode-6 / government-organization :name (MRPNode-7 / name :op1 treasury)))

# ::id 494
# ::snt 13:23 PSNI 'failed RUC officer families'
# ::tok 13:23 PSNI ' failed RUC officer families '
# ::alignments 1-2|0.1.0.0+0.1.0.0.1+0.1.0.0.1.0 3-4|0.0 4-5|0.2+0.2.0+0.2.0.0+0.2.0.0.0+0.2.0.0.0.0 5-6|0.1+0.1.0+0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.536369 ::parser eager_oracle ::smatch 0.7916666666666666 ::n_actions 37
# ::node	0	say-01	
# ::node	0.0	fail-01	3-4
# ::node	0.1	person	5-6
# ::node	0.1.0	have-org-role-91	5-6
# ::node	0.1.0.0	military	1-2
# ::node	0.1.0.0.0	member	
# ::node	0.1.0.0.1	name	1-2
# ::node	0.1.0.0.1.0	psni	1-2
# ::node	0.1.0.1	officer	5-6
# ::node	0.2	person	4-5
# ::node	0.2.0	have-org-role-91	4-5
# ::node	0.2.0.0	military	4-5
# ::node	0.2.0.0.0	name	4-5
# ::node	0.2.0.0.0.0	ruc	4-5
# ::root	0	say-01
# ::edge	have-org-role-91	ARG1	military	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG1	military	0.2.0	0.2.0.0
# ::edge	have-org-role-91	ARG2	officer	0.1.0	0.1.0.1
# ::edge	military	mod	member	0.1.0.0	0.1.0.0.0
# ::edge	military	name	name	0.1.0.0	0.1.0.0.1
# ::edge	military	name	name	0.2.0.0	0.2.0.0.0
# ::edge	name	op1	psni	0.1.0.0.1	0.1.0.0.1.0
# ::edge	name	op1	ruc	0.2.0.0.0	0.2.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	person	ARG0-of	have-org-role-91	0.2	0.2.0
# ::edge	say-01	ARG0	person	0	0.1
# ::edge	say-01	ARG0	person	0	0.2
# ::edge	say-01	ARG1	fail-01	0	0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / fail-01) :ARG0 (MRPNode-2 / person :ARG0-of (MRPNode-3 / have-org-role-91 :ARG1 (MRPNode-4 / military :mod (MRPNode-5 / member) :name (MRPNode-6 / name :op1 psni)) :ARG2 (MRPNode-7 / officer))) :ARG0 (MRPNode-8 / person :ARG0-of (MRPNode-9 / have-org-role-91 :ARG1 (MRPNode-10 / military :name (MRPNode-11 / name :op1 ruc)))))

# ::id 495
# ::snt Police helicopter crashes on top of bar in Glasgow
# ::tok Police helicopter crashes on top of bar in Glasgow
# ::alignments 0-1|0.0.0 1-2|0.0 2-3|0 4-5|0.1 6-7|0.1.0 8-9|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.541169 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	crash-01	2-3
# ::node	0.0	helicopter	1-2
# ::node	0.0.0	police	0-1
# ::node	0.1	top	4-5
# ::node	0.1.0	bar	6-7
# ::node	0.1.0.0	city	8-9
# ::node	0.1.0.0.0	name	8-9
# ::node	0.1.0.0.0.0	glasgow	8-9
# ::root	0	crash-01
# ::edge	bar	location	city	0.1.0	0.1.0.0
# ::edge	city	name	name	0.1.0.0	0.1.0.0.0
# ::edge	crash-01	ARG1	helicopter	0	0.0
# ::edge	crash-01	location	top	0	0.1
# ::edge	helicopter	mod	police	0.0	0.0.0
# ::edge	name	op1	glasgow	0.1.0.0.0	0.1.0.0.0.0
# ::edge	top	op1	bar	0.1	0.1.0
(MRPNode-0 / crash-01 :ARG1 (MRPNode-1 / helicopter :mod (MRPNode-2 / police)) :location (MRPNode-3 / top :op1 (MRPNode-4 / bar :location (MRPNode-5 / city :name (MRPNode-6 / name :op1 glasgow)))))

# ::id 496
# ::snt US, UN up pressure on Israel over Gaza
# ::tok US , UN up pressure on Israel over Gaza
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 4-5|0 6-7|0.0+0.0.0+0.0.0.0 8-9|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.546503 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	pressure-01	4-5
# ::node	0.0	country	6-7
# ::node	0.0.0	name	6-7
# ::node	0.0.0.0	israel	6-7
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	us	0-1
# ::node	0.2	organization	8-9
# ::node	0.2.0	name	8-9
# ::node	0.2.0.0	gaza	8-9
# ::root	0	pressure-01
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	name	op1	gaza	0.2.0	0.2.0.0
# ::edge	name	op1	israel	0.0.0	0.0.0.0
# ::edge	name	op1	us	0.1.0	0.1.0.0
# ::edge	organization	name	name	0.2	0.2.0
# ::edge	pressure-01	ARG0	country	0	0.1
# ::edge	pressure-01	ARG0	organization	0	0.2
# ::edge	pressure-01	ARG1	country	0	0.0
(MRPNode-0 / pressure-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 israel)) :ARG0 (MRPNode-3 / country :name (MRPNode-4 / name :op1 us)) :ARG0 (MRPNode-5 / organization :name (MRPNode-6 / name :op1 gaza)))

# ::id 497
# ::snt Australian PM confident sounds are from Flight 370
# ::tok Australian PM confident sounds are from Flight 370
# ::alignments 0-1|0.1.1+0.1.1.0+0.1.1.0.0 1-2|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 2-3|0.0.0 3-4|0+0.0 6-8|0.1+0.1.0+0.1.0.0+0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.552845 ::parser eager_oracle ::smatch 0.9545454545454546 ::n_actions 31
# ::node	0	thing	3-4
# ::node	0.0	sound-01	3-4
# ::node	0.0.0	confident-01	2-3
# ::node	0.0.0.0	military	1-2
# ::node	0.0.0.0.0	name	1-2
# ::node	0.0.0.0.0.0	pm	1-2
# ::node	0.1	aircraft-type	6-8
# ::node	0.1.0	name	6-8
# ::node	0.1.0.0	flight	6-8
# ::node	0.1.0.1	370	6-8
# ::node	0.1.1	country	0-1
# ::node	0.1.1.0	name	0-1
# ::node	0.1.1.0.0	australia	0-1
# ::root	0	thing
# ::edge	aircraft-type	mod	country	0.1	0.1.1
# ::edge	aircraft-type	name	name	0.1	0.1.0
# ::edge	confident-01	ARG2	military	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	military	name	name	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	australia	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	flight	0.1.0	0.1.0.0
# ::edge	name	op1	pm	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op2	370	0.1.0	0.1.0.1
# ::edge	sound-01	ARG2	confident-01	0.0	0.0.0
# ::edge	thing	ARG1-of	sound-01	0	0.0
# ::edge	thing	source	aircraft-type	0	0.1
(MRPNode-0 / thing :ARG1-of (MRPNode-1 / sound-01 :ARG2 (MRPNode-2 / confident-01 :ARG2 (MRPNode-3 / military :name (MRPNode-4 / name :op1 pm)))) :source (MRPNode-5 / aircraft-type :name (MRPNode-6 / name :op1 flight :op2 370) :mod (MRPNode-7 / country :name (MRPNode-8 / name :op1 australia))))

# ::id 498
# ::snt Philippe ascends throne of divided Belgium
# ::tok Philippe ascends throne of divided Belgium
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 2-3|0.0 4-5|0.0.0 5-6|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.556910 ::parser eager_oracle ::smatch 0.7999999999999999 ::n_actions 19
# ::node	0	descend-01	
# ::node	0.0	throne	2-3
# ::node	0.0.0	divide-02	4-5
# ::node	0.0.0.0	country	5-6
# ::node	0.0.0.0.0	name	5-6
# ::node	0.0.0.0.0.0	belgium	5-6
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	philippe	0-1
# ::root	0	descend-01
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	descend-01	ARG0	person	0	0.1
# ::edge	descend-01	ARG1	throne	0	0.0
# ::edge	divide-02	ARG1	country	0.0.0	0.0.0.0
# ::edge	name	op1	belgium	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	philippe	0.1.0	0.1.0.0
# ::edge	person	name	name	0.1	0.1.0
# ::edge	throne	poss	divide-02	0.0	0.0.0
(MRPNode-0 / descend-01 :ARG1 (MRPNode-1 / throne :poss (MRPNode-2 / divide-02 :ARG1 (MRPNode-3 / country :name (MRPNode-4 / name :op1 belgium)))) :ARG0 (MRPNode-5 / person :name (MRPNode-6 / name :op1 philippe)))

# ::id 499
# ::snt India's Anti-Graft Party Forms Government in Delhi
# ::tok India 's Anti - Graft Party Forms Government in Delhi
# ::alignments 0-1|0.1.1+0.1.1.0+0.1.1.0.0 2-6|0.1+0.1.0+0.1.0.0+0.1.0.1 6-7|0 7-8|0.0+0.0.0 9-10|0.0.1+0.0.1.0+0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.566045 ::parser eager_oracle ::smatch 0.9130434782608695 ::n_actions 31
# ::node	0	form-01	6-7
# ::node	0.0	government-organization	7-8
# ::node	0.0.0	govern-01	7-8
# ::node	0.0.1	city	9-10
# ::node	0.0.1.0	name	9-10
# ::node	0.0.1.0.0	delhi	9-10
# ::node	0.1	political-party	2-6
# ::node	0.1.0	name	2-6
# ::node	0.1.0.0	anti	2-6
# ::node	0.1.0.1	party	2-6
# ::node	0.1.1	country	0-1
# ::node	0.1.1.0	name	0-1
# ::node	0.1.1.0.0	india	0-1
# ::root	0	form-01
# ::edge	city	name	name	0.0.1	0.0.1.0
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	form-01	ARG0	political-party	0	0.1
# ::edge	form-01	ARG1	government-organization	0	0.0
# ::edge	government-organization	ARG0-of	govern-01	0.0	0.0.0
# ::edge	government-organization	location	city	0.0	0.0.1
# ::edge	name	op1	anti	0.1.0	0.1.0.0
# ::edge	name	op1	delhi	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	india	0.1.1.0	0.1.1.0.0
# ::edge	name	op2	party	0.1.0	0.1.0.1
# ::edge	political-party	location	country	0.1	0.1.1
# ::edge	political-party	name	name	0.1	0.1.0
(MRPNode-0 / form-01 :ARG1 (MRPNode-1 / government-organization :ARG0-of (MRPNode-2 / govern-01) :location (MRPNode-3 / city :name (MRPNode-4 / name :op1 delhi))) :ARG0 (MRPNode-5 / political-party :name (MRPNode-6 / name :op1 anti :op2 party) :location (MRPNode-7 / country :name (MRPNode-8 / name :op1 india))))

# ::id 500
# ::snt Hundreds believed injured in Texas fertiliser plant blast
# ::tok Hundreds believed injured in Texas fertiliser plant blast
# ::alignments 1-2|0 2-3|0.0 4-5|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 5-6|0.0.0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.571444 ::parser eager_oracle ::smatch 0.8387096774193548 ::n_actions 25
# ::node	0	believe-01	1-2
# ::node	0.0	injure-01	2-3
# ::node	0.0.0	plant	6-7
# ::node	0.0.0.0	fertiliser	5-6
# ::node	0.0.0.1	state	4-5
# ::node	0.0.0.1.0	name	4-5
# ::node	0.0.0.1.0.0	texas	4-5
# ::node	0.1	person	
# ::node	0.1.0	multiple	
# ::node	0.1.0.0	100	
# ::root	0	believe-01
# ::edge	believe-01	ARG0	person	0	0.1
# ::edge	believe-01	ARG1	injure-01	0	0.0
# ::edge	injure-01	location	plant	0.0	0.0.0
# ::edge	multiple	op1	100	0.1.0	0.1.0.0
# ::edge	name	op1	texas	0.0.0.1.0	0.0.0.1.0.0
# ::edge	person	quant	multiple	0.1	0.1.0
# ::edge	plant	location	state	0.0.0	0.0.0.1
# ::edge	plant	mod	fertiliser	0.0.0	0.0.0.0
# ::edge	state	name	name	0.0.0.1	0.0.0.1.0
(MRPNode-0 / believe-01 :ARG1 (MRPNode-1 / injure-01 :location (MRPNode-2 / plant :mod (MRPNode-3 / fertiliser) :location (MRPNode-4 / state :name (MRPNode-5 / name :op1 texas)))) :ARG0 (MRPNode-6 / person :quant (MRPNode-7 / multiple :op1 100)))

# ::id 501
# ::snt UN War Crimes Court Convicts Six Bosnians Croats
# ::tok UN War Crimes Court Convicts Six Bosnians Croats
# ::alignments 0-4|0.1+0.1.0+0.1.0.0+0.1.0.1+0.1.0.2+0.1.0.3 4-5|0 5-6|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.576548 ::parser eager_oracle ::smatch 0.7142857142857143 ::n_actions 18
# ::node	0	convict-01	4-5
# ::node	0.0	person	
# ::node	0.0.0	6	5-6
# ::node	0.0.1	country	
# ::node	0.0.1.0	name	
# ::node	0.0.1.0.0	morocco	
# ::node	0.1	organization	0-4
# ::node	0.1.0	name	0-4
# ::node	0.1.0.0	un	0-4
# ::node	0.1.0.1	war	0-4
# ::node	0.1.0.2	crimes	0-4
# ::node	0.1.0.3	court	0-4
# ::root	0	convict-01
# ::edge	convict-01	ARG0	organization	0	0.1
# ::edge	convict-01	ARG1	person	0	0.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	name	op1	morocco	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	un	0.1.0	0.1.0.0
# ::edge	name	op2	war	0.1.0	0.1.0.1
# ::edge	name	op3	crimes	0.1.0	0.1.0.2
# ::edge	name	op4	court	0.1.0	0.1.0.3
# ::edge	organization	name	name	0.1	0.1.0
# ::edge	person	mod	country	0.0	0.0.1
# ::edge	person	quant	6	0.0	0.0.0
(MRPNode-0 / convict-01 :ARG1 (MRPNode-1 / person :quant 6 :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 morocco))) :ARG0 (MRPNode-4 / organization :name (MRPNode-5 / name :op1 un :op2 war :op3 crimes :op4 court)))

# ::id 502
# ::snt Saudi Man Traveling With Pressure Cooker Arrested
# ::tok Saudi Man Traveling With Pressure Cooker Arrested
# ::alignments 0-1|0.2+0.2.0+0.2.0.0+0.2.0.1 1-2|0.0 2-3|0 4-5|0.1.0.0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.581185 ::parser eager_oracle ::smatch 0.8148148148148148 ::n_actions 23
# ::node	0	travel-01	2-3
# ::node	0.0	man	1-2
# ::node	0.1	arrest-01	6-7
# ::node	0.1.0	process-01	
# ::node	0.1.0.0	pressure	4-5
# ::node	0.2	country	0-1
# ::node	0.2.0	name	0-1
# ::node	0.2.0.0	saudi	0-1
# ::node	0.2.0.1	arabia	0-1
# ::root	0	travel-01
# ::edge	arrest-01	ARG2	process-01	0.1	0.1.0
# ::edge	country	name	name	0.2	0.2.0
# ::edge	name	op1	saudi	0.2.0	0.2.0.0
# ::edge	name	op2	arabia	0.2.0	0.2.0.1
# ::edge	process-01	ARG1	pressure	0.1.0	0.1.0.0
# ::edge	travel-01	ARG0	man	0	0.0
# ::edge	travel-01	accompanier	arrest-01	0	0.1
# ::edge	travel-01	accompanier	country	0	0.2
(MRPNode-0 / travel-01 :ARG0 (MRPNode-1 / man) :accompanier (MRPNode-2 / arrest-01 :ARG2 (MRPNode-3 / process-01 :ARG1 (MRPNode-4 / pressure))) :accompanier (MRPNode-5 / country :name (MRPNode-6 / name :op1 saudi :op2 arabia)))

# ::id 503
# ::snt Across US, people rally for 'Justice for Trayvon'
# ::tok Across US , people rally for ' Justice for Trayvon '
# ::alignments 0-1|0.1 1-2|0.1.0+0.1.0.0+0.1.0.0.0 3-4|0.2.0 4-5|0 5-6|0.2.0.0.1 7-8|0.2 9-10|0.2.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.587001 ::parser eager_oracle ::smatch 0.787878787878788 ::n_actions 34
# ::node	0	rally-01	4-5
# ::node	0.0	person	
# ::node	0.1	across	0-1
# ::node	0.1.0	country	1-2
# ::node	0.1.0.0	name	1-2
# ::node	0.1.0.0.0	us	1-2
# ::node	0.2	justice	7-8
# ::node	0.2.0	person	3-4
# ::node	0.2.0.0	name	
# ::node	0.2.0.0.0	trayvon	9-10
# ::node	0.2.0.0.1	for	5-6
# ::node	0.2.0.0.2	bush	
# ::root	0	rally-01
# ::edge	across	op1	country	0.1	0.1.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	justice	beneficiary	person	0.2	0.2.0
# ::edge	name	op1	trayvon	0.2.0.0	0.2.0.0.0
# ::edge	name	op1	us	0.1.0.0	0.1.0.0.0
# ::edge	name	op2	for	0.2.0.0	0.2.0.0.1
# ::edge	name	op3	bush	0.2.0.0	0.2.0.0.2
# ::edge	person	name	name	0.2.0	0.2.0.0
# ::edge	rally-01	ARG0	person	0	0.0
# ::edge	rally-01	ARG2	across	0	0.1
# ::edge	rally-01	ARG2	justice	0	0.2
(MRPNode-0 / rally-01 :ARG0 (MRPNode-1 / person) :ARG2 (MRPNode-2 / across :op1 (MRPNode-3 / country :name (MRPNode-4 / name :op1 us))) :ARG2 (MRPNode-5 / justice :beneficiary (MRPNode-6 / person :name (MRPNode-7 / name :op1 trayvon :op2 for :op3 bush))))

# ::id 504
# ::snt "Hagel laments ""political"" changes to US defence budget"
# ::tok " Hagel laments " " political " " changes to US defence budget "
# ::alignments 1-2|0.1+0.1.0+0.1.0.0 5-6|0.0.1 8-9|0.0 10-11|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 11-12|0.0.0.1 12-13|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.594643 ::parser eager_oracle ::smatch 0.8421052631578948 ::n_actions 33
# ::node	0	call-03	
# ::node	0.0	change-01	8-9
# ::node	0.0.0	budget-01	12-13
# ::node	0.0.0.0	country	10-11
# ::node	0.0.0.0.0	name	10-11
# ::node	0.0.0.0.0.0	us	10-11
# ::node	0.0.0.1	defend-01	11-12
# ::node	0.0.1	politics	5-6
# ::node	0.1	person	1-2
# ::node	0.1.0	name	1-2
# ::node	0.1.0.0	hagel	1-2
# ::root	0	call-03
# ::edge	budget-01	ARG0	country	0.0.0	0.0.0.0
# ::edge	budget-01	ARG2	defend-01	0.0.0	0.0.0.1
# ::edge	call-03	ARG0	person	0	0.1
# ::edge	call-03	ARG1	change-01	0	0.0
# ::edge	change-01	ARG1	budget-01	0.0	0.0.0
# ::edge	change-01	mod	politics	0.0	0.0.1
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	hagel	0.1.0	0.1.0.0
# ::edge	name	op1	us	0.0.0.0.0	0.0.0.0.0.0
# ::edge	person	name	name	0.1	0.1.0
(MRPNode-0 / call-03 :ARG1 (MRPNode-1 / change-01 :ARG1 (MRPNode-2 / budget-01 :ARG0 (MRPNode-3 / country :name (MRPNode-4 / name :op1 us)) :ARG2 (MRPNode-5 / defend-01)) :mod (MRPNode-6 / politics)) :ARG0 (MRPNode-7 / person :name (MRPNode-8 / name :op1 hagel)))

# ::id 505
# ::snt Ukraine rivals sign deal to end crisis
# ::tok Ukraine rivals sign deal to end crisis
# ::alignments 0-1|0.0.0.1+0.0.0.1.1+0.0.0.1.1.0 1-2|0.0.0.1.0 2-3|0 3-4|0.0 5-6|0.0.0 6-7|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.598797 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	sign-02	2-3
# ::node	0.0	deal-01	3-4
# ::node	0.0.0	end-01	5-6
# ::node	0.0.0.0	crisis	6-7
# ::node	0.0.0.1	country	0-1
# ::node	0.0.0.1.0	rival-01	1-2
# ::node	0.0.0.1.1	name	0-1
# ::node	0.0.0.1.1.0	ukraine	0-1
# ::root	0	sign-02
# ::edge	country	ARG0-of	rival-01	0.0.0.1	0.0.0.1.0
# ::edge	country	name	name	0.0.0.1	0.0.0.1.1
# ::edge	deal-01	ARG2	end-01	0.0	0.0.0
# ::edge	end-01	ARG0	country	0.0.0	0.0.0.1
# ::edge	end-01	ARG1	crisis	0.0.0	0.0.0.0
# ::edge	name	op1	ukraine	0.0.0.1.1	0.0.0.1.1.0
# ::edge	sign-02	ARG0	country	0	0.0.0.1
# ::edge	sign-02	ARG1	deal-01	0	0.0
(MRPNode-0 / sign-02 :ARG1 (MRPNode-1 / deal-01 :ARG2 (MRPNode-2 / end-01 :ARG1 (MRPNode-3 / crisis) :ARG0 (MRPNode-4 / country :ARG0-of (MRPNode-5 / rival-01) :name (MRPNode-6 / name :op1 ukraine)))) :ARG0 MRPNode-4)

# ::id 506
# ::snt Syrian prime minister survives assassination attempt
# ::tok Syrian prime minister survives assassination attempt
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 1-2|0.1.0.1.0 2-3|0.1+0.1.0+0.1.0.1 3-4|0 4-5|0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.604082 ::parser eager_oracle ::smatch 0.9473684210526315 ::n_actions 37
# ::node	0	survive-01	3-4
# ::node	0.0	attempt-01	5-6
# ::node	0.0.0	assassinate-01	4-5
# ::node	0.1	person	2-3
# ::node	0.1.0	have-org-role-91	2-3
# ::node	0.1.0.0	country	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	syria	0-1
# ::node	0.1.0.1	minister	2-3
# ::node	0.1.0.1.0	prime	1-2
# ::root	0	survive-01
# ::edge	attempt-01	ARG1	assassinate-01	0.0	0.0.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	minister	0.1.0	0.1.0.1
# ::edge	minister	mod	prime	0.1.0.1	0.1.0.1.0
# ::edge	name	op1	syria	0.1.0.0.0	0.1.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	survive-01	ARG0	person	0	0.1
# ::edge	survive-01	ARG1	attempt-01	0	0.0
(MRPNode-0 / survive-01 :ARG1 (MRPNode-1 / attempt-01 :ARG1 (MRPNode-2 / assassinate-01)) :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-org-role-91 :ARG1 (MRPNode-5 / country :name (MRPNode-6 / name :op1 syria)) :ARG2 (MRPNode-7 / minister :mod (MRPNode-8 / prime)))))

# ::id 507
# ::snt South Korean Soldier Kills Comrades And Flees
# ::tok South Korean Soldier Kills Comrades And Flees
# ::alignments 0-2|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0+0.1.0.0.0.1 2-3|0.1+0.1.0+0.1.0.1 3-4|0 4-5|0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.609745 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 33
# ::node	0	kill-01	3-4
# ::node	0.0	and	5-6
# ::node	0.0.0	comrade	4-5
# ::node	0.0.1	fly-01	
# ::node	0.1	person	2-3
# ::node	0.1.0	have-org-role-91	2-3
# ::node	0.1.0.0	country	0-2
# ::node	0.1.0.0.0	name	0-2
# ::node	0.1.0.0.0.0	south	0-2
# ::node	0.1.0.0.0.1	korea	0-2
# ::node	0.1.0.1	soldier	2-3
# ::root	0	kill-01
# ::edge	and	op1	comrade	0.0	0.0.0
# ::edge	and	op2	fly-01	0.0	0.0.1
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	soldier	0.1.0	0.1.0.1
# ::edge	kill-01	ARG0	person	0	0.1
# ::edge	kill-01	ARG1	and	0	0.0
# ::edge	name	op1	south	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op2	korea	0.1.0.0.0	0.1.0.0.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / comrade) :op2 (MRPNode-3 / fly-01)) :ARG0 (MRPNode-4 / person :ARG0-of (MRPNode-5 / have-org-role-91 :ARG1 (MRPNode-6 / country :name (MRPNode-7 / name :op1 south :op2 korea)) :ARG2 (MRPNode-8 / soldier))))

# ::id 508
# ::snt US Attorney general Eric Holder to resign
# ::tok US Attorney general Eric Holder to resign
# ::alignments 0-1|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 1-2|0.0.1+0.0.1.1 2-3|0.0.1.1.0 3-5|0.0+0.0.0+0.0.0.0+0.0.0.1 6-7|0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.614659 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	resign-01	6-7
# ::node	0.0	person	3-5
# ::node	0.0.0	name	3-5
# ::node	0.0.0.0	eric	3-5
# ::node	0.0.0.1	holder	3-5
# ::node	0.0.1	have-org-role-91	1-2
# ::node	0.0.1.0	country	0-1
# ::node	0.0.1.0.0	name	0-1
# ::node	0.0.1.0.0.0	us	0-1
# ::node	0.0.1.1	attorney	1-2
# ::node	0.0.1.1.0	general	2-3
# ::root	0	resign-01
# ::edge	attorney	mod	general	0.0.1.1	0.0.1.1.0
# ::edge	country	name	name	0.0.1.0	0.0.1.0.0
# ::edge	have-org-role-91	ARG1	country	0.0.1	0.0.1.0
# ::edge	have-org-role-91	ARG2	attorney	0.0.1	0.0.1.1
# ::edge	name	op1	eric	0.0.0	0.0.0.0
# ::edge	name	op1	us	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op2	holder	0.0.0	0.0.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.1
# ::edge	person	name	name	0.0	0.0.0
# ::edge	resign-01	ARG0	person	0	0.0
(MRPNode-0 / resign-01 :ARG0 (MRPNode-1 / person :name (MRPNode-2 / name :op1 eric :op2 holder) :ARG0-of (MRPNode-3 / have-org-role-91 :ARG1 (MRPNode-4 / country :name (MRPNode-5 / name :op1 us)) :ARG2 (MRPNode-6 / attorney :mod (MRPNode-7 / general)))))

# ::id 509
# ::snt Hajj to go ahead despite crane collapse
# ::tok Hajj to go ahead despite crane collapse
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 2-3|0 3-4|0.1 5-6|0.2.0 6-7|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:40.617882 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	go-01	2-3
# ::node	0.0	city	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	hajj	0-1
# ::node	0.1	ahead	3-4
# ::node	0.2	collapse-01	6-7
# ::node	0.2.0	crane	5-6
# ::root	0	go-01
# ::edge	city	name	name	0.0	0.0.0
# ::edge	collapse-01	ARG1	crane	0.2	0.2.0
# ::edge	go-01	ARG1	city	0	0.0
# ::edge	go-01	concession	collapse-01	0	0.2
# ::edge	go-01	mod	ahead	0	0.1
# ::edge	name	op1	hajj	0.0.0	0.0.0.0
(MRPNode-0 / go-01 :ARG1 (MRPNode-1 / city :name (MRPNode-2 / name :op1 hajj)) :mod (MRPNode-3 / ahead) :concession (MRPNode-4 / collapse-01 :ARG1 (MRPNode-5 / crane)))

# ::id 510
# ::snt China issues yellow alert for typhoon Kalmaegi
# ::tok China issues yellow alert for typhoon Kalmaegi
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 2-3|0.1.1 3-4|0.1 5-6|0.1.0 6-7|0.1.0.0+0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.622338 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	issue-01	1-2
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	china	0-1
# ::node	0.1	alert-01	3-4
# ::node	0.1.0	typhoon	5-6
# ::node	0.1.0.0	name	6-7
# ::node	0.1.0.0.0	kalmaegi	6-7
# ::node	0.1.1	yellow	2-3
# ::root	0	issue-01
# ::edge	alert-01	ARG1	typhoon	0.1	0.1.0
# ::edge	alert-01	mod	yellow	0.1	0.1.1
# ::edge	country	name	name	0.0	0.0.0
# ::edge	issue-01	ARG1	alert-01	0	0.1
# ::edge	issue-01	ARG1	country	0	0.0
# ::edge	name	op1	china	0.0.0	0.0.0.0
# ::edge	name	op1	kalmaegi	0.1.0.0	0.1.0.0.0
# ::edge	typhoon	name	name	0.1.0	0.1.0.0
(MRPNode-0 / issue-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 china)) :ARG1 (MRPNode-3 / alert-01 :ARG1 (MRPNode-4 / typhoon :name (MRPNode-5 / name :op1 kalmaegi)) :mod (MRPNode-6 / yellow)))

# ::id 511
# ::snt Tokyo shares open higher tracing U.S. gains
# ::tok Tokyo shares open higher tracing U.S. gains
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 3-4|0.2.0 4-5|0.0.0 5-6|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.628110 ::parser eager_oracle ::smatch 0.8421052631578948 ::n_actions 26
# ::node	0	share-01	1-2
# ::node	0.0	gain-02	6-7
# ::node	0.0.0	trace	4-5
# ::node	0.0.0.0	country	5-6
# ::node	0.0.0.0.0	name	5-6
# ::node	0.0.0.0.0.0	u.s.	5-6
# ::node	0.1	city	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	tokyo	0-1
# ::node	0.2	have-degree-91	
# ::node	0.2.0	high-02	3-4
# ::node	0.2.1	more	
# ::root	0	share-01
# ::edge	city	name	name	0.1	0.1.0
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	gain-02	ARG1-of	trace	0.0	0.0.0
# ::edge	have-degree-91	ARG2	high-02	0.2	0.2.0
# ::edge	have-degree-91	ARG3	more	0.2	0.2.1
# ::edge	name	op1	tokyo	0.1.0	0.1.0.0
# ::edge	name	op1	u.s.	0.0.0.0.0	0.0.0.0.0.0
# ::edge	share-01	ARG0	city	0	0.1
# ::edge	share-01	ARG1	gain-02	0	0.0
# ::edge	share-01	ARG2	have-degree-91	0	0.2
# ::edge	trace	poss	country	0.0.0	0.0.0.0
(MRPNode-0 / share-01 :ARG1 (MRPNode-1 / gain-02 :ARG1-of (MRPNode-2 / trace :poss (MRPNode-3 / country :name (MRPNode-4 / name :op1 u.s.)))) :ARG0 (MRPNode-5 / city :name (MRPNode-6 / name :op1 tokyo)) :ARG2 (MRPNode-7 / have-degree-91 :ARG2 (MRPNode-8 / high-02) :ARG3 (MRPNode-9 / more)))

# ::id 512
# ::snt Tokyo shares open higher following strong U.S. performance
# ::tok Tokyo shares open higher following strong U.S. performance
# ::alignments 0-1|0.0.0.0.1.0+0.0.0.0.1.0.0+0.0.0.0.1.0.0.0 1-2|0.0.0.0.1 2-3|0.0 3-4|0.0.0 4-5|0 5-6|0.1.0 6-7|0.1.1+0.1.1.0+0.1.1.0.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.638465 ::parser eager_oracle ::smatch 0.88 ::n_actions 34
# ::node	0	follow-01	4-5
# ::node	0.0	open-07	2-3
# ::node	0.0.0	high-02	3-4
# ::node	0.0.0.0	have-degree-91	
# ::node	0.0.0.0.0	more	
# ::node	0.0.0.0.1	share-01	1-2
# ::node	0.0.0.0.1.0	city	0-1
# ::node	0.0.0.0.1.0.0	name	0-1
# ::node	0.0.0.0.1.0.0.0	tokyo	0-1
# ::node	0.1	perform-02	7-8
# ::node	0.1.0	strong-02	5-6
# ::node	0.1.1	country	6-7
# ::node	0.1.1.0	name	6-7
# ::node	0.1.1.0.0	u.s.	6-7
# ::root	0	follow-01
# ::edge	city	name	name	0.0.0.0.1.0	0.0.0.0.1.0.0
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	follow-01	ARG1	open-07	0	0.0
# ::edge	follow-01	ARG2	perform-02	0	0.1
# ::edge	have-degree-91	ARG1	share-01	0.0.0.0	0.0.0.0.1
# ::edge	have-degree-91	ARG3	more	0.0.0.0	0.0.0.0.0
# ::edge	high-02	ARG1	have-degree-91	0.0.0	0.0.0.0
# ::edge	name	op1	tokyo	0.0.0.0.1.0.0	0.0.0.0.1.0.0.0
# ::edge	name	op1	u.s.	0.1.1.0	0.1.1.0.0
# ::edge	open-07	ARG1	have-degree-91	0.0	0.0.0.0
# ::edge	open-07	ARG1	high-02	0.0	0.0.0
# ::edge	open-07	ARG1	share-01	0.0	0.0.0.0.1
# ::edge	perform-02	ARG0	country	0.1	0.1.1
# ::edge	perform-02	ARG0	strong-02	0.1	0.1.0
# ::edge	share-01	ARG0	city	0.0.0.0.1	0.0.0.0.1.0
(MRPNode-0 / follow-01 :ARG1 (MRPNode-1 / open-07 :ARG1 (MRPNode-2 / high-02 :ARG1 (MRPNode-3 / have-degree-91 :ARG3 (MRPNode-4 / more) :ARG1 (MRPNode-5 / share-01 :ARG0 (MRPNode-6 / city :name (MRPNode-7 / name :op1 tokyo))))) :ARG1 MRPNode-3 :ARG1 MRPNode-5) :ARG2 (MRPNode-8 / perform-02 :ARG0 (MRPNode-9 / strong-02) :ARG0 (MRPNode-10 / country :name (MRPNode-11 / name :op1 u.s.))))

# ::id 513
# ::snt Lewis Hamilton wins inaugural Russian GP
# ::tok Lewis Hamilton wins inaugural Russian GP
# ::alignments 0-2|0.0+0.0.0+0.0.0.0+0.0.0.1 2-3|0 3-4|0.1.0 4-5|0.1.1+0.1.1.0+0.1.1.0.0 5-6|0.1+0.1.2+0.1.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.643357 ::parser eager_oracle ::smatch 0.9500000000000001 ::n_actions 23
# ::node	0	win-01	2-3
# ::node	0.0	person	0-2
# ::node	0.0.0	name	0-2
# ::node	0.0.0.0	lewis	0-2
# ::node	0.0.0.1	hamilton	0-2
# ::node	0.1	game	5-6
# ::node	0.1.0	inaugural	3-4
# ::node	0.1.1	country	4-5
# ::node	0.1.1.0	name	4-5
# ::node	0.1.1.0.0	russia	4-5
# ::node	0.1.2	name	5-6
# ::node	0.1.2.0	gp	5-6
# ::root	0	win-01
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	game	mod	country	0.1	0.1.1
# ::edge	game	mod	inaugural	0.1	0.1.0
# ::edge	game	name	name	0.1	0.1.2
# ::edge	name	op1	gp	0.1.2	0.1.2.0
# ::edge	name	op1	lewis	0.0.0	0.0.0.0
# ::edge	name	op1	russia	0.1.1.0	0.1.1.0.0
# ::edge	name	op2	hamilton	0.0.0	0.0.0.1
# ::edge	person	name	name	0.0	0.0.0
# ::edge	win-01	ARG0	person	0	0.0
# ::edge	win-01	ARG2	game	0	0.1
(MRPNode-0 / win-01 :ARG0 (MRPNode-1 / person :name (MRPNode-2 / name :op1 lewis :op2 hamilton)) :ARG2 (MRPNode-3 / game :mod (MRPNode-4 / inaugural) :mod (MRPNode-5 / country :name (MRPNode-6 / name :op1 russia)) :name (MRPNode-7 / name :op1 gp)))

# ::id 514
# ::snt Suspected Boko Haram attacks kill dozens in Nigeria
# ::tok Suspected Boko Haram attacks kill dozens in Nigeria
# ::alignments 0-1|0.1.1 1-3|0.1.0+0.1.0.0+0.1.0.0.0+0.1.0.0.1 3-4|0.1 4-5|0 7-8|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.649549 ::parser eager_oracle ::smatch 0.8717948717948718 ::n_actions 25
# ::node	0	kill-01	4-5
# ::node	0.0	person	
# ::node	0.0.0	multiple	
# ::node	0.0.0.0	12	
# ::node	0.1	attack-01	3-4
# ::node	0.1.0	criminal-organization	1-3
# ::node	0.1.0.0	name	1-3
# ::node	0.1.0.0.0	boko	1-3
# ::node	0.1.0.0.1	haram	1-3
# ::node	0.1.1	suspect-01	0-1
# ::node	0.2	country	7-8
# ::node	0.2.0	name	7-8
# ::node	0.2.0.0	nigeria	7-8
# ::root	0	kill-01
# ::edge	attack-01	ARG0	criminal-organization	0.1	0.1.0
# ::edge	attack-01	ARG1-of	suspect-01	0.1	0.1.1
# ::edge	country	name	name	0.2	0.2.0
# ::edge	criminal-organization	name	name	0.1.0	0.1.0.0
# ::edge	kill-01	ARG0	attack-01	0	0.1
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	location	country	0	0.2
# ::edge	multiple	op1	12	0.0.0	0.0.0.0
# ::edge	name	op1	boko	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	nigeria	0.2.0	0.2.0.0
# ::edge	name	op2	haram	0.1.0.0	0.1.0.0.1
# ::edge	person	quant	multiple	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant (MRPNode-2 / multiple :op1 12)) :ARG0 (MRPNode-3 / attack-01 :ARG0 (MRPNode-4 / criminal-organization :name (MRPNode-5 / name :op1 boko :op2 haram)) :ARG1-of (MRPNode-6 / suspect-01)) :location (MRPNode-7 / country :name (MRPNode-8 / name :op1 nigeria)))

# ::id 515
# ::snt Mayawati demands Presidents rule in Jammu and Kashmir
# ::tok Mayawati demands Presidents rule in Jammu and Kashmir
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.0+0.0.0.0+0.0.0.0.0 3-4|0.0 5-6|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 6-7|0.0.1 7-8|0.0.1.1+0.0.1.1.0+0.0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.658239 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	demand-01	1-2
# ::node	0.0	rule-03	3-4
# ::node	0.0.0	person	2-3
# ::node	0.0.0.0	have-org-role-91	2-3
# ::node	0.0.0.0.0	president	2-3
# ::node	0.0.1	and	6-7
# ::node	0.0.1.0	state	5-6
# ::node	0.0.1.0.0	name	5-6
# ::node	0.0.1.0.0.0	jammu	5-6
# ::node	0.0.1.1	world-region	7-8
# ::node	0.0.1.1.0	name	7-8
# ::node	0.0.1.1.0.0	kashmir	7-8
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	mayawati	0-1
# ::root	0	demand-01
# ::edge	and	op1	state	0.0.1	0.0.1.0
# ::edge	and	op2	world-region	0.0.1	0.0.1.1
# ::edge	demand-01	ARG0	person	0	0.1
# ::edge	demand-01	ARG1	rule-03	0	0.0
# ::edge	have-org-role-91	ARG2	president	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	jammu	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	kashmir	0.0.1.1.0	0.0.1.1.0.0
# ::edge	name	op1	mayawati	0.1.0	0.1.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0.0	0.0.0.0
# ::edge	person	name	name	0.1	0.1.0
# ::edge	rule-03	ARG0	person	0.0	0.0.0
# ::edge	rule-03	location	and	0.0	0.0.1
# ::edge	state	name	name	0.0.1.0	0.0.1.0.0
# ::edge	world-region	name	name	0.0.1.1	0.0.1.1.0
(MRPNode-0 / demand-01 :ARG1 (MRPNode-1 / rule-03 :ARG0 (MRPNode-2 / person :ARG0-of (MRPNode-3 / have-org-role-91 :ARG2 (MRPNode-4 / president))) :location (MRPNode-5 / and :op1 (MRPNode-6 / state :name (MRPNode-7 / name :op1 jammu)) :op2 (MRPNode-8 / world-region :name (MRPNode-9 / name :op1 kashmir)))) :ARG0 (MRPNode-10 / person :name (MRPNode-11 / name :op1 mayawati)))

# ::id 516
# ::snt Philippines typhoon death toll rises above 5,000
# ::tok Philippines typhoon death toll rises above 5,000
# ::alignments 0-1|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 1-2|0.0.0 2-3|0.0.1 3-4|0.0 4-5|0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.662686 ::parser eager_oracle ::smatch 0.967741935483871 ::n_actions 27
# ::node	0	rise-01	4-5
# ::node	0.0	toll	3-4
# ::node	0.0.0	typhoon	1-2
# ::node	0.0.0.0	country	0-1
# ::node	0.0.0.0.0	name	0-1
# ::node	0.0.0.0.0.0	philippines	0-1
# ::node	0.0.1	die-01	2-3
# ::node	0.1	above	5-6
# ::node	0.1.0	5000	
# ::root	0	rise-01
# ::edge	above	op1	5000	0.1	0.1.0
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	philippines	0.0.0.0.0	0.0.0.0.0.0
# ::edge	rise-01	ARG1	toll	0	0.0
# ::edge	rise-01	ARG4	above	0	0.1
# ::edge	toll	mod	typhoon	0.0	0.0.0
# ::edge	toll	quant-of	die-01	0.0	0.0.1
# ::edge	typhoon	mod	country	0.0.0	0.0.0.0
(MRPNode-0 / rise-01 :ARG1 (MRPNode-1 / toll :mod (MRPNode-2 / typhoon :mod (MRPNode-3 / country :name (MRPNode-4 / name :op1 philippines))) :quant-of (MRPNode-5 / die-01)) :ARG4 (MRPNode-6 / above :op1 5000))

# ::id 517
# ::snt Cars plunge into river as US bridge collapses
# ::tok Cars plunge into river as US bridge collapses
# ::alignments 0-1|0.0 1-2|0 3-4|0.1 5-6|0.2.0.0+0.2.0.0.0+0.2.0.0.0.0 6-7|0.2.0 7-8|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:40.667299 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	plunge-01	1-2
# ::node	0.0	car	0-1
# ::node	0.1	river	3-4
# ::node	0.2	collapse-01	7-8
# ::node	0.2.0	bridge	6-7
# ::node	0.2.0.0	country	5-6
# ::node	0.2.0.0.0	name	5-6
# ::node	0.2.0.0.0.0	us	5-6
# ::root	0	plunge-01
# ::edge	bridge	poss	country	0.2.0	0.2.0.0
# ::edge	collapse-01	ARG1	bridge	0.2	0.2.0
# ::edge	country	name	name	0.2.0.0	0.2.0.0.0
# ::edge	name	op1	us	0.2.0.0.0	0.2.0.0.0.0
# ::edge	plunge-01	ARG1	car	0	0.0
# ::edge	plunge-01	time	collapse-01	0	0.2
# ::edge	plunge-01	time	river	0	0.1
(MRPNode-0 / plunge-01 :ARG1 (MRPNode-1 / car) :time (MRPNode-2 / river) :time (MRPNode-3 / collapse-01 :ARG1 (MRPNode-4 / bridge :poss (MRPNode-5 / country :name (MRPNode-6 / name :op1 us)))))

# ::id 518
# ::snt Egypt's Morsi faces trial for prison break
# ::tok Egypt 's Morsi faces trial for prison break
# ::alignments 0-1|0.0.1.1+0.0.1.1.0+0.0.1.1.0.0 2-3|0.0.1+0.0.1.0+0.0.1.0.0 3-4|0 6-7|0.0.0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.672708 ::parser eager_oracle ::smatch 0.8571428571428572 ::n_actions 24
# ::node	0	face-01	3-4
# ::node	0.0	try-02	
# ::node	0.0.0	break-13	7-8
# ::node	0.0.0.0	prison	6-7
# ::node	0.0.1	person	2-3
# ::node	0.0.1.0	name	2-3
# ::node	0.0.1.0.0	morsi	2-3
# ::node	0.0.1.1	country	0-1
# ::node	0.0.1.1.0	name	0-1
# ::node	0.0.1.1.0.0	egypt	0-1
# ::root	0	face-01
# ::edge	break-13	ARG1	prison	0.0.0	0.0.0.0
# ::edge	country	name	name	0.0.1.1	0.0.1.1.0
# ::edge	face-01	ARG0	person	0	0.0.1
# ::edge	face-01	ARG1	try-02	0	0.0
# ::edge	name	op1	egypt	0.0.1.1.0	0.0.1.1.0.0
# ::edge	name	op1	morsi	0.0.1.0	0.0.1.0.0
# ::edge	person	ARG0-of	country	0.0.1	0.0.1.1
# ::edge	person	name	name	0.0.1	0.0.1.0
# ::edge	try-02	ARG1	person	0.0	0.0.1
# ::edge	try-02	ARG3	break-13	0.0	0.0.0
(MRPNode-0 / face-01 :ARG1 (MRPNode-1 / try-02 :ARG3 (MRPNode-2 / break-13 :ARG1 (MRPNode-3 / prison)) :ARG1 (MRPNode-4 / person :name (MRPNode-5 / name :op1 morsi) :ARG0-of (MRPNode-6 / country :name (MRPNode-7 / name :op1 egypt)))) :ARG0 MRPNode-4)

# ::id 519
# ::snt Thailand's army declares martial law, denies coup
# ::tok Thailand 's army declares martial law , denies coup
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 2-3|0.1 3-4|0 4-5|0.0.0 5-6|0.0 7-8|0.2 8-9|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.677642 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	declare-02	3-4
# ::node	0.0	law	5-6
# ::node	0.0.0	martial	4-5
# ::node	0.1	army	2-3
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	thailand	0-1
# ::node	0.2	deny-01	7-8
# ::node	0.2.0	coup-01	8-9
# ::root	0	declare-02
# ::edge	army	poss	country	0.1	0.1.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	declare-02	ARG0	army	0	0.1
# ::edge	declare-02	ARG1	law	0	0.0
# ::edge	declare-02	ARG2	deny-01	0	0.2
# ::edge	deny-01	ARG1	coup-01	0.2	0.2.0
# ::edge	law	mod	martial	0.0	0.0.0
# ::edge	name	op1	thailand	0.1.0.0	0.1.0.0.0
(MRPNode-0 / declare-02 :ARG1 (MRPNode-1 / law :mod (MRPNode-2 / martial)) :ARG0 (MRPNode-3 / army :poss (MRPNode-4 / country :name (MRPNode-5 / name :op1 thailand))) :ARG2 (MRPNode-6 / deny-01 :ARG1 (MRPNode-7 / coup-01)))

# ::id 520
# ::snt Israel agrees to 24-hour Gaza truce
# ::tok Israel agrees to 24 - hour Gaza truce
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 5-6|0.0.1+0.0.1.1 6-7|0.0.0+0.0.0.0+0.0.0.0.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.683488 ::parser eager_oracle ::smatch 0.972972972972973 ::n_actions 29
# ::node	0	agree-01	1-2
# ::node	0.0	truce	7-8
# ::node	0.0.0	city	6-7
# ::node	0.0.0.0	name	6-7
# ::node	0.0.0.0.0	gaza	6-7
# ::node	0.0.1	temporal-quantity	5-6
# ::node	0.0.1.0	4	
# ::node	0.0.1.1	hour	5-6
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	israel	0-1
# ::root	0	agree-01
# ::edge	agree-01	ARG0	country	0	0.1
# ::edge	agree-01	ARG1	truce	0	0.0
# ::edge	city	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	name	op1	gaza	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	israel	0.1.0	0.1.0.0
# ::edge	temporal-quantity	quant	4	0.0.1	0.0.1.0
# ::edge	temporal-quantity	unit	hour	0.0.1	0.0.1.1
# ::edge	truce	duration	temporal-quantity	0.0	0.0.1
# ::edge	truce	mod	city	0.0	0.0.0
(MRPNode-0 / agree-01 :ARG1 (MRPNode-1 / truce :mod (MRPNode-2 / city :name (MRPNode-3 / name :op1 gaza)) :duration (MRPNode-4 / temporal-quantity :quant 4 :unit (MRPNode-5 / hour))) :ARG0 (MRPNode-6 / country :name (MRPNode-7 / name :op1 israel)))

# ::id 521
# ::snt Earthquake of 6.9 magnitude strikes off Indonesia island
# ::tok Earthquake of 6.9 magnitude strikes off Indonesia island
# ::alignments 0-1|0.0 2-3|0.0.0.0 4-5|0 5-6|0.1 6-7|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 7-8|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.687726 ::parser eager_oracle ::smatch 0.896551724137931 ::n_actions 27
# ::node	0	strike-01	4-5
# ::node	0.0	earthquake	0-1
# ::node	0.0.0	seismic-quantity	
# ::node	0.0.0.0	6.9	2-3
# ::node	0.1	off	5-6
# ::node	0.1.0	island	7-8
# ::node	0.1.0.0	country	6-7
# ::node	0.1.0.0.0	name	6-7
# ::node	0.1.0.0.0.0	indonesia	6-7
# ::root	0	strike-01
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	earthquake	quant	seismic-quantity	0.0	0.0.0
# ::edge	island	location	country	0.1.0	0.1.0.0
# ::edge	name	op1	indonesia	0.1.0.0.0	0.1.0.0.0.0
# ::edge	off	op1	island	0.1	0.1.0
# ::edge	seismic-quantity	quant	6.9	0.0.0	0.0.0.0
# ::edge	strike-01	ARG0	earthquake	0	0.0
# ::edge	strike-01	ARG2	off	0	0.1
(MRPNode-0 / strike-01 :ARG0 (MRPNode-1 / earthquake :quant (MRPNode-2 / seismic-quantity :quant 6.9)) :ARG2 (MRPNode-3 / off :op1 (MRPNode-4 / island :location (MRPNode-5 / country :name (MRPNode-6 / name :op1 indonesia)))))

# ::id 522
# ::snt Malaysia: Chinese satellite found object in ocean
# ::tok Malaysia : Chinese satellite found object in ocean
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 2-3|0.2.0+0.2.0.0+0.2.0.0.0 3-4|0.2 4-5|0 5-6|0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.692913 ::parser eager_oracle ::smatch 0.9444444444444444 ::n_actions 28
# ::node	0	find-01	4-5
# ::node	0.0	object	5-6
# ::node	0.0.0	ocean	7-8
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	malaysia	0-1
# ::node	0.2	satellite	3-4
# ::node	0.2.0	country	2-3
# ::node	0.2.0.0	name	2-3
# ::node	0.2.0.0.0	china	2-3
# ::root	0	find-01
# ::edge	country	name	name	0.1	0.1.0
# ::edge	country	name	name	0.2.0	0.2.0.0
# ::edge	find-01	ARG0	country	0	0.1
# ::edge	find-01	ARG1	object	0	0.0
# ::edge	find-01	location	satellite	0	0.2
# ::edge	name	op1	china	0.2.0.0	0.2.0.0.0
# ::edge	name	op1	malaysia	0.1.0	0.1.0.0
# ::edge	object	location	ocean	0.0	0.0.0
# ::edge	satellite	poss	country	0.2	0.2.0
(MRPNode-0 / find-01 :ARG1 (MRPNode-1 / object :location (MRPNode-2 / ocean)) :ARG0 (MRPNode-3 / country :name (MRPNode-4 / name :op1 malaysia)) :location (MRPNode-5 / satellite :poss (MRPNode-6 / country :name (MRPNode-7 / name :op1 china))))

# ::id 523
# ::snt Indian building collapse deaths rise to 14
# ::tok Indian building collapse deaths rise to 14
# ::alignments 1-2|0.1.0.1 2-3|0.1.0 3-4|0.1 4-5|0 6-7|0.0+0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.698210 ::parser eager_oracle ::smatch 0.8148148148148148 ::n_actions 28
# ::node	0	rise-01	4-5
# ::node	0.0	person	6-7
# ::node	0.0.0	14	6-7
# ::node	0.1	die-01	3-4
# ::node	0.1.0	collapse-01	2-3
# ::node	0.1.0.0	country	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	india	0-1
# ::node	0.1.0.1	building	1-2
# ::root	0	rise-01
# ::edge	collapse-01	ARG1	building	0.1.0	0.1.0.1
# ::edge	collapse-01	ARG1	country	0.1.0	0.1.0.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	die-01	ARG1	collapse-01	0.1	0.1.0
# ::edge	name	op1	india	0.1.0.0.0	0.1.0.0.0.0
# ::edge	person	quant	14	0.0	0.0.0
# ::edge	rise-01	ARG1	die-01	0	0.1
# ::edge	rise-01	ARG1	person	0	0.0
(MRPNode-0 / rise-01 :ARG1 (MRPNode-1 / person :quant 14) :ARG1 (MRPNode-2 / die-01 :ARG1 (MRPNode-3 / collapse-01 :ARG1 (MRPNode-4 / country :name (MRPNode-5 / name :op1 india)) :ARG1 (MRPNode-6 / building))))

# ::id 524
# ::snt CII endorses underage marriage
# ::tok CII endorses underage marriage
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.0 3-4|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.700403 ::parser eager_oracle ::smatch 1.0 ::n_actions 18
# ::node	0	endorse-01	1-2
# ::node	0.0	marry-01	3-4
# ::node	0.0.0	underage	2-3
# ::node	0.1	treaty	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	cii	0-1
# ::root	0	endorse-01
# ::edge	endorse-01	ARG0	treaty	0	0.1
# ::edge	endorse-01	ARG1	marry-01	0	0.0
# ::edge	marry-01	mod	underage	0.0	0.0.0
# ::edge	name	op1	cii	0.1.0	0.1.0.0
# ::edge	treaty	name	name	0.1	0.1.0
(MRPNode-0 / endorse-01 :ARG1 (MRPNode-1 / marry-01 :mod (MRPNode-2 / underage)) :ARG0 (MRPNode-3 / treaty :name (MRPNode-4 / name :op1 cii)))

# ::id 525
# ::snt EU Ministers of Employment and Social policy to discuss employment boosting strategies
# ::tok EU Ministers of Employment and Social policy to discuss employment boosting strategies
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 1-2|0.1+0.1.0+0.1.0.1 3-4|0.0.0.0.0 5-6|0.1.0.1.0.0 6-7|0.1.0.1.0 8-9|0 10-11|0.0.0 11-12|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.715912 ::parser eager_oracle ::smatch 0.9130434782608696 ::n_actions 46
# ::node	0	discuss-01	8-9
# ::node	0.0	strategy	11-12
# ::node	0.0.0	boost-01	10-11
# ::node	0.0.0.0	strategy	
# ::node	0.0.0.0.0	employ-01	3-4
# ::node	0.1	person	1-2
# ::node	0.1.0	have-org-role-91	1-2
# ::node	0.1.0.0	organization	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	eu	0-1
# ::node	0.1.0.1	minister	1-2
# ::node	0.1.0.1.0	policy-01	6-7
# ::node	0.1.0.1.0.0	social	5-6
# ::root	0	discuss-01
# ::edge	boost-01	ARG1	strategy	0.0.0	0.0.0.0
# ::edge	discuss-01	ARG0	person	0	0.1
# ::edge	discuss-01	ARG1	strategy	0	0.0
# ::edge	have-org-role-91	ARG1	organization	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	minister	0.1.0	0.1.0.1
# ::edge	minister	topic	policy-01	0.1.0.1	0.1.0.1.0
# ::edge	name	op1	eu	0.1.0.0.0	0.1.0.0.0.0
# ::edge	organization	name	name	0.1.0.0	0.1.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	policy-01	ARG2	social	0.1.0.1.0	0.1.0.1.0.0
# ::edge	strategy	ARG0-of	boost-01	0.0	0.0.0
# ::edge	strategy	topic	employ-01	0.0.0.0	0.0.0.0.0
(MRPNode-0 / discuss-01 :ARG1 (MRPNode-1 / strategy :ARG0-of (MRPNode-2 / boost-01 :ARG1 (MRPNode-3 / strategy :topic (MRPNode-4 / employ-01)))) :ARG0 (MRPNode-5 / person :ARG0-of (MRPNode-6 / have-org-role-91 :ARG1 (MRPNode-7 / organization :name (MRPNode-8 / name :op1 eu)) :ARG2 (MRPNode-9 / minister :topic (MRPNode-10 / policy-01 :ARG2 (MRPNode-11 / social))))))

# ::id 526
# ::snt China welcomes US, Russia deal on Syria chemical weapons
# ::tok China welcomes US , Russia deal on Syria chemical weapons
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 2-3|0.1.0+0.1.0.0+0.1.0.0.0 4-5|0.1.1+0.1.1.0+0.1.1.0.0 5-6|0.1 8-9|0.1.2.0 9-10|0.1.2 ::annotator aligner3.py ::date 2021-03-12 14:31:40.725280 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	welcome-01	1-2
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	china	0-1
# ::node	0.1	deal-01	5-6
# ::node	0.1.0	country	2-3
# ::node	0.1.0.0	name	2-3
# ::node	0.1.0.0.0	us	2-3
# ::node	0.1.1	country	4-5
# ::node	0.1.1.0	name	4-5
# ::node	0.1.1.0.0	russia	4-5
# ::node	0.1.2	weapon	9-10
# ::node	0.1.2.0	chemical	8-9
# ::root	0	welcome-01
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	deal-01	ARG1	country	0.1	0.1.0
# ::edge	deal-01	ARG2	country	0.1	0.1.1
# ::edge	deal-01	ARG2	weapon	0.1	0.1.2
# ::edge	name	op1	china	0.0.0	0.0.0.0
# ::edge	name	op1	russia	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	us	0.1.0.0	0.1.0.0.0
# ::edge	weapon	mod	chemical	0.1.2	0.1.2.0
# ::edge	welcome-01	ARG1	country	0	0.0
# ::edge	welcome-01	ARG1	deal-01	0	0.1
(MRPNode-0 / welcome-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 china)) :ARG1 (MRPNode-3 / deal-01 :ARG1 (MRPNode-4 / country :name (MRPNode-5 / name :op1 us)) :ARG2 (MRPNode-6 / country :name (MRPNode-7 / name :op1 russia)) :ARG2 (MRPNode-8 / weapon :mod (MRPNode-9 / chemical))))

# ::id 527
# ::snt Okla. inmate dies of heart attack after botched execution
# ::tok Okla. inmate dies of heart attack after botched execution
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 1-2|0.0 2-3|0 4-5|0.0.0.0 6-7|0.2 7-8|0.0.2.0 8-9|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:40.732878 ::parser eager_oracle ::smatch 0.8421052631578948 ::n_actions 33
# ::node	0	die-01	2-3
# ::node	0.0	inmate	1-2
# ::node	0.0.0	assault-01	
# ::node	0.0.0.0	heart	4-5
# ::node	0.0.1	person	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	okla.	0-1
# ::node	0.0.2	execute-02	8-9
# ::node	0.0.2.0	botched	7-8
# ::node	0.1	cause-01	
# ::node	0.2	after	6-7
# ::root	0	die-01
# ::edge	after	op1	execute-02	0.2	0.0.2
# ::edge	assault-01	manner	heart	0.0.0	0.0.0.0
# ::edge	die-01	ARG1	inmate	0	0.0
# ::edge	die-01	ARG1-of	cause-01	0	0.1
# ::edge	die-01	time	after	0	0.2
# ::edge	execute-02	ARG1-of	botched	0.0.2	0.0.2.0
# ::edge	inmate	ARG1-of	assault-01	0.0	0.0.0
# ::edge	inmate	ARG1-of	execute-02	0.0	0.0.2
# ::edge	inmate	mod	person	0.0	0.0.1
# ::edge	name	op1	okla.	0.0.1.0	0.0.1.0.0
# ::edge	person	name	name	0.0.1	0.0.1.0
(MRPNode-0 / die-01 :ARG1 (MRPNode-1 / inmate :ARG1-of (MRPNode-2 / assault-01 :manner (MRPNode-3 / heart)) :mod (MRPNode-4 / person :name (MRPNode-5 / name :op1 okla.)) :ARG1-of (MRPNode-6 / execute-02 :ARG1-of (MRPNode-7 / botched))) :ARG1-of (MRPNode-8 / cause-01) :time (MRPNode-9 / after :op1 MRPNode-6))

# ::id 528
# ::snt Thai protesters call general strike
# ::tok Thai protesters call general strike
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1+0.1.1 2-3|0 3-4|0.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.736194 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 26
# ::node	0	call-01	2-3
# ::node	0.0	strike-02	4-5
# ::node	0.0.0	general-02	3-4
# ::node	0.1	person	1-2
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	thailand	0-1
# ::node	0.1.1	protest-01	1-2
# ::root	0	call-01
# ::edge	call-01	ARG0	person	0	0.1
# ::edge	call-01	ARG1	strike-02	0	0.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	name	op1	thailand	0.1.0.0	0.1.0.0.0
# ::edge	person	ARG0-of	protest-01	0.1	0.1.1
# ::edge	person	mod	country	0.1	0.1.0
# ::edge	strike-02	ARG1-of	general-02	0.0	0.0.0
(MRPNode-0 / call-01 :ARG1 (MRPNode-1 / strike-02 :ARG1-of (MRPNode-2 / general-02)) :ARG0 (MRPNode-3 / person :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 thailand)) :ARG0-of (MRPNode-6 / protest-01)))

# ::id 529
# ::snt Egypt announces one-month state of emergency nationwide
# ::tok Egypt announces one - month state of emergency nationwide
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.2.0 4-5|0.0.2+0.0.2.1 5-6|0.0 7-8|0.0.1 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.741263 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	announce-01	1-2
# ::node	0.0	state	5-6
# ::node	0.0.0	nationwide	8-9
# ::node	0.0.1	emergency	7-8
# ::node	0.0.2	temporal-quantity	4-5
# ::node	0.0.2.0	1	2-3
# ::node	0.0.2.1	month	4-5
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	egypt	0-1
# ::root	0	announce-01
# ::edge	announce-01	ARG0	country	0	0.1
# ::edge	announce-01	ARG1	state	0	0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	name	op1	egypt	0.1.0	0.1.0.0
# ::edge	state	duration	emergency	0.0	0.0.1
# ::edge	state	duration	temporal-quantity	0.0	0.0.2
# ::edge	state	mod	nationwide	0.0	0.0.0
# ::edge	temporal-quantity	quant	1	0.0.2	0.0.2.0
# ::edge	temporal-quantity	unit	month	0.0.2	0.0.2.1
(MRPNode-0 / announce-01 :ARG1 (MRPNode-1 / state :mod (MRPNode-2 / nationwide) :duration (MRPNode-3 / emergency) :duration (MRPNode-4 / temporal-quantity :quant 1 :unit (MRPNode-5 / month))) :ARG0 (MRPNode-6 / country :name (MRPNode-7 / name :op1 egypt)))

# ::id 530
# ::snt UNICEF calls for immediate safe access to women, children in Homs
# ::tok UNICEF calls for immediate safe access to women , children in Homs
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 3-4|0.0.0 4-5|0.0.1 5-6|0.0 7-8|0.0.2.0 9-10|0.0.2.1 11-12|0.0.3+0.0.3.0+0.0.3.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.750523 ::parser eager_oracle ::smatch 0.8571428571428571 ::n_actions 36
# ::node	0	call-03	1-2
# ::node	0.0	access-01	5-6
# ::node	0.0.0	immediate	3-4
# ::node	0.0.1	safe-01	4-5
# ::node	0.0.2	and	
# ::node	0.0.2.0	woman	7-8
# ::node	0.0.2.1	child	9-10
# ::node	0.0.3	city	11-12
# ::node	0.0.3.0	name	11-12
# ::node	0.0.3.0.0	homs	11-12
# ::node	0.1	organization	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	unicef	0-1
# ::root	0	call-03
# ::edge	access-01	ARG1	immediate	0.0	0.0.0
# ::edge	access-01	location	and	0.0	0.0.2
# ::edge	access-01	location	city	0.0	0.0.3
# ::edge	access-01	location	safe-01	0.0	0.0.1
# ::edge	and	op1	woman	0.0.2	0.0.2.0
# ::edge	and	op2	child	0.0.2	0.0.2.1
# ::edge	call-03	ARG0	organization	0	0.1
# ::edge	call-03	ARG1	access-01	0	0.0
# ::edge	city	name	name	0.0.3	0.0.3.0
# ::edge	name	op1	homs	0.0.3.0	0.0.3.0.0
# ::edge	name	op1	unicef	0.1.0	0.1.0.0
# ::edge	organization	name	name	0.1	0.1.0
(MRPNode-0 / call-03 :ARG1 (MRPNode-1 / access-01 :ARG1 (MRPNode-2 / immediate) :location (MRPNode-3 / safe-01) :location (MRPNode-4 / and :op1 (MRPNode-5 / woman) :op2 (MRPNode-6 / child)) :location (MRPNode-7 / city :name (MRPNode-8 / name :op1 homs))) :ARG0 (MRPNode-9 / organization :name (MRPNode-10 / name :op1 unicef)))

# ::id 531
# ::snt Sony to axe PC unit in major business overhaul
# ::tok Sony to axe PC unit in major business overhaul
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 4-5|0.2 6-7|0.0.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.754657 ::parser eager_oracle ::smatch 0.5833333333333334 ::n_actions 21
# ::node	0	use-02	
# ::node	0.0	overhaul	8-9
# ::node	0.0.0	major-02	6-7
# ::node	0.1	company	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	sony	0-1
# ::node	0.2	unit	4-5
# ::node	0.2.0	computer	
# ::root	0	use-02
# ::edge	company	name	name	0.1	0.1.0
# ::edge	name	op1	sony	0.1.0	0.1.0.0
# ::edge	overhaul	ARG1-of	major-02	0.0	0.0.0
# ::edge	unit	mod	computer	0.2	0.2.0
# ::edge	use-02	ARG0	company	0	0.1
# ::edge	use-02	ARG1	overhaul	0	0.0
# ::edge	use-02	ARG1	unit	0	0.2
(MRPNode-0 / use-02 :ARG1 (MRPNode-1 / overhaul :ARG1-of (MRPNode-2 / major-02)) :ARG0 (MRPNode-3 / company :name (MRPNode-4 / name :op1 sony)) :ARG1 (MRPNode-5 / unit :mod (MRPNode-6 / computer)))

# ::id 532
# ::snt Zimmerman acquitted in slaying
# ::tok Zimmerman acquitted in slaying
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 3-4|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.756819 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	acquit-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	zimmerman	0-1
# ::node	0.1	slay-01	3-4
# ::root	0	acquit-01
# ::edge	acquit-01	ARG1	person	0	0.0
# ::edge	acquit-01	ARG2	slay-01	0	0.1
# ::edge	name	op1	zimmerman	0.0.0	0.0.0.0
# ::edge	person	name	name	0.0	0.0.0
# ::edge	slay-01	ARG0	person	0.1	0.0
(MRPNode-0 / acquit-01 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 zimmerman)) :ARG2 (MRPNode-3 / slay-01 :ARG0 MRPNode-1))

# ::id 533
# ::snt Jordan elected to UN security council seat that Saudi Arabia rejected
# ::tok Jordan elected to UN security council seat that Saudi Arabia rejected
# ::alignments 0-1|0.1.0+0.1.0.0 1-2|0 3-4|0.0.0.0.1.0.0.0 4-5|0.0.0.0.1.0.0.1 5-6|0.1 6-7|0.0 8-10|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0+0.0.0.0.0.0.1 10-11|0.0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.767288 ::parser eager_oracle ::smatch 0.7659574468085106 ::n_actions 39
# ::node	0	elect-01	1-2
# ::node	0.0	seat	6-7
# ::node	0.0.0	include-91	
# ::node	0.0.0.0	person	8-10
# ::node	0.0.0.0.0	country	8-10
# ::node	0.0.0.0.0.0	name	8-10
# ::node	0.0.0.0.0.0.0	saudi	8-10
# ::node	0.0.0.0.0.0.1	arabia	8-10
# ::node	0.0.0.0.1	reject-01	10-11
# ::node	0.0.0.0.1.0	organization	
# ::node	0.0.0.0.1.0.0	name	
# ::node	0.0.0.0.1.0.0.0	un	3-4
# ::node	0.0.0.0.1.0.0.1	security	4-5
# ::node	0.0.0.0.1.0.0.2	committee	
# ::node	0.1	country	5-6
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	jordan	0-1
# ::root	0	elect-01
# ::edge	country	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	elect-01	ARG0	country	0	0.1
# ::edge	elect-01	ARG1	seat	0	0.0
# ::edge	include-91	ARG2	person	0.0.0	0.0.0.0
# ::edge	name	op1	jordan	0.1.0	0.1.0.0
# ::edge	name	op1	saudi	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op1	un	0.0.0.0.1.0.0	0.0.0.0.1.0.0.0
# ::edge	name	op2	arabia	0.0.0.0.0.0	0.0.0.0.0.0.1
# ::edge	name	op2	security	0.0.0.0.1.0.0	0.0.0.0.1.0.0.1
# ::edge	name	op3	committee	0.0.0.0.1.0.0	0.0.0.0.1.0.0.2
# ::edge	organization	name	name	0.0.0.0.1.0	0.0.0.0.1.0.0
# ::edge	person	ARG1-of	country	0.0.0.0	0.0.0.0.0
# ::edge	person	ARG1-of	reject-01	0.0.0.0	0.0.0.0.1
# ::edge	reject-01	ARG0	organization	0.0.0.0.1	0.0.0.0.1.0
# ::edge	seat	ARG1-of	include-91	0.0	0.0.0
(MRPNode-0 / elect-01 :ARG1 (MRPNode-1 / seat :ARG1-of (MRPNode-2 / include-91 :ARG2 (MRPNode-3 / person :ARG1-of (MRPNode-4 / country :name (MRPNode-5 / name :op1 saudi :op2 arabia)) :ARG1-of (MRPNode-6 / reject-01 :ARG0 (MRPNode-7 / organization :name (MRPNode-8 / name :op1 un :op2 security :op3 committee)))))) :ARG0 (MRPNode-9 / country :name (MRPNode-10 / name :op1 jordan)))

# ::id 534
# ::snt Crisis-hit Maldives holds new presidential poll
# ::tok Crisis - hit Maldives holds new presidential poll
# ::alignments 0-1|0.1.0.0 2-3|0.1.0 3-4|0.1+0.1.1+0.1.1.0 4-5|0 5-6|0.0.0 6-7|0.0.1+0.0.1.0+0.0.1.0.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.774044 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	hold-01	4-5
# ::node	0.0	poll-01	7-8
# ::node	0.0.0	new-01	5-6
# ::node	0.0.1	person	6-7
# ::node	0.0.1.0	have-org-role-91	6-7
# ::node	0.0.1.0.0	president	6-7
# ::node	0.1	country	3-4
# ::node	0.1.0	hit-01	2-3
# ::node	0.1.0.0	crisis	0-1
# ::node	0.1.1	name	3-4
# ::node	0.1.1.0	maldives	3-4
# ::root	0	hold-01
# ::edge	country	ARG1-of	hit-01	0.1	0.1.0
# ::edge	country	name	name	0.1	0.1.1
# ::edge	have-org-role-91	ARG2	president	0.0.1.0	0.0.1.0.0
# ::edge	hit-01	ARG2	crisis	0.1.0	0.1.0.0
# ::edge	hold-01	ARG0	country	0	0.1
# ::edge	hold-01	ARG1	poll-01	0	0.0
# ::edge	name	op1	maldives	0.1.1	0.1.1.0
# ::edge	person	ARG0-of	have-org-role-91	0.0.1	0.0.1.0
# ::edge	poll-01	ARG1-of	new-01	0.0	0.0.0
# ::edge	poll-01	ARG2	person	0.0	0.0.1
(MRPNode-0 / hold-01 :ARG1 (MRPNode-1 / poll-01 :ARG1-of (MRPNode-2 / new-01) :ARG2 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-org-role-91 :ARG2 (MRPNode-5 / president)))) :ARG0 (MRPNode-6 / country :ARG1-of (MRPNode-7 / hit-01 :ARG2 (MRPNode-8 / crisis)) :name (MRPNode-9 / name :op1 maldives)))

# ::id 535
# ::snt Peaceful anti-G8 protest held in Belfast
# ::tok Peaceful anti - G 8 protest held in Belfast
# ::alignments 0-1|0.0.0 1-2|0.0.1 3-4|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 5-6|0.0 6-7|0 8-9|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.779627 ::parser eager_oracle ::smatch 0.9444444444444444 ::n_actions 29
# ::node	0	hold-04	6-7
# ::node	0.0	protest-01	5-6
# ::node	0.0.0	peace	0-1
# ::node	0.0.1	oppose-01	1-2
# ::node	0.0.1.0	organization	3-4
# ::node	0.0.1.0.0	name	3-4
# ::node	0.0.1.0.0.0	g8	3-4
# ::node	0.1	city	8-9
# ::node	0.1.0	name	8-9
# ::node	0.1.0.0	belfast	8-9
# ::root	0	hold-04
# ::edge	city	name	name	0.1	0.1.0
# ::edge	hold-04	ARG1	protest-01	0	0.0
# ::edge	hold-04	location	city	0	0.1
# ::edge	name	op1	belfast	0.1.0	0.1.0.0
# ::edge	name	op1	g8	0.0.1.0.0	0.0.1.0.0.0
# ::edge	oppose-01	ARG1	organization	0.0.1	0.0.1.0
# ::edge	organization	name	name	0.0.1.0	0.0.1.0.0
# ::edge	protest-01	ARG0-of	oppose-01	0.0	0.0.1
# ::edge	protest-01	mod	peace	0.0	0.0.0
(MRPNode-0 / hold-04 :ARG1 (MRPNode-1 / protest-01 :mod (MRPNode-2 / peace) :ARG0-of (MRPNode-3 / oppose-01 :ARG1 (MRPNode-4 / organization :name (MRPNode-5 / name :op1 g8)))) :location (MRPNode-6 / city :name (MRPNode-7 / name :op1 belfast)))

# ::id 536
# ::snt Six rescued after boat capsizes in Dublin Bay
# ::tok Six rescued after boat capsizes in Dublin Bay
# ::alignments 0-1|0.0 1-2|0 2-3|0.1 3-4|0.1.0.0 6-8|0.1.0.1+0.1.0.1.0+0.1.0.1.0.0+0.1.0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.783860 ::parser eager_oracle ::smatch 0.6666666666666665 ::n_actions 23
# ::node	0	rescue-01	1-2
# ::node	0.0	6	0-1
# ::node	0.1	after	2-3
# ::node	0.1.0	collapse-01	
# ::node	0.1.0.0	boat	3-4
# ::node	0.1.0.1	bay	6-8
# ::node	0.1.0.1.0	name	6-8
# ::node	0.1.0.1.0.0	dublin	6-8
# ::node	0.1.0.1.0.1	bay	6-8
# ::root	0	rescue-01
# ::edge	after	op1	collapse-01	0.1	0.1.0
# ::edge	bay	name	name	0.1.0.1	0.1.0.1.0
# ::edge	collapse-01	ARG1	boat	0.1.0	0.1.0.0
# ::edge	collapse-01	location	bay	0.1.0	0.1.0.1
# ::edge	name	op1	dublin	0.1.0.1.0	0.1.0.1.0.0
# ::edge	name	op2	bay	0.1.0.1.0	0.1.0.1.0.1
# ::edge	rescue-01	ARG0	after	0	0.1
# ::edge	rescue-01	arg1	6	0	0.0
(MRPNode-0 / rescue-01 :arg1 6 :ARG0 (MRPNode-1 / after :op1 (MRPNode-2 / collapse-01 :ARG1 (MRPNode-3 / boat) :location (MRPNode-4 / bay :name (MRPNode-5 / name :op1 dublin :op2 bay)))))

# ::id 537
# ::snt Worker dies at World Cup stadium
# ::tok Worker dies at World Cup stadium
# ::alignments 0-1|0.0+0.0.0 1-2|0 3-5|0.1.0+0.1.0.0+0.1.0.0.0+0.1.0.0.1 5-6|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.787295 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	die-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	work-01	0-1
# ::node	0.1	stadium	5-6
# ::node	0.1.0	game	3-5
# ::node	0.1.0.0	name	3-5
# ::node	0.1.0.0.0	world	3-5
# ::node	0.1.0.0.1	cup	3-5
# ::root	0	die-01
# ::edge	die-01	ARG1	person	0	0.0
# ::edge	die-01	location	stadium	0	0.1
# ::edge	game	name	name	0.1.0	0.1.0.0
# ::edge	name	op1	world	0.1.0.0	0.1.0.0.0
# ::edge	name	op2	cup	0.1.0.0	0.1.0.0.1
# ::edge	person	ARG0-of	work-01	0.0	0.0.0
# ::edge	stadium	mod	game	0.1	0.1.0
(MRPNode-0 / die-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / work-01)) :location (MRPNode-3 / stadium :mod (MRPNode-4 / game :name (MRPNode-5 / name :op1 world :op2 cup))))

# ::id 538
# ::snt Debt inspectors reach agreement with Greece
# ::tok Debt inspectors reach agreement with Greece
# ::alignments 0-1|0.0.1.0.0 1-2|0.0.1+0.0.1.0 2-3|0 3-4|0.0 5-6|0.0.0+0.0.0.0+0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.791153 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	reach-01	2-3
# ::node	0.0	agree-01	3-4
# ::node	0.0.0	country	5-6
# ::node	0.0.0.0	name	5-6
# ::node	0.0.0.0.0	greece	5-6
# ::node	0.0.1	person	1-2
# ::node	0.0.1.0	inspect-01	1-2
# ::node	0.0.1.0.0	debt	0-1
# ::root	0	reach-01
# ::edge	agree-01	ARG0	person	0.0	0.0.1
# ::edge	agree-01	ARG2	country	0.0	0.0.0
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	inspect-01	ARG1	debt	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	greece	0.0.0.0	0.0.0.0.0
# ::edge	person	ARG0-of	inspect-01	0.0.1	0.0.1.0
# ::edge	reach-01	ARG0	person	0	0.0.1
# ::edge	reach-01	ARG1	agree-01	0	0.0
(MRPNode-0 / reach-01 :ARG1 (MRPNode-1 / agree-01 :ARG2 (MRPNode-2 / country :name (MRPNode-3 / name :op1 greece)) :ARG0 (MRPNode-4 / person :ARG0-of (MRPNode-5 / inspect-01 :ARG1 (MRPNode-6 / debt)))) :ARG0 MRPNode-4)

# ::id 539
# ::snt North Korean leader sends 'special envoy' to China
# ::tok North Korean leader sends ' special envoy ' to China
# ::alignments 0-2|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0+0.1.0.0.0.1 2-3|0.1+0.1.0 3-4|0 5-6|0.0.0 6-7|0.0 9-10|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.797576 ::parser eager_oracle ::smatch 0.9523809523809523 ::n_actions 35
# ::node	0	send-01	3-4
# ::node	0.0	envoy	6-7
# ::node	0.0.0	special-02	5-6
# ::node	0.1	person	2-3
# ::node	0.1.0	lead-02	2-3
# ::node	0.1.0.0	country	0-2
# ::node	0.1.0.0.0	name	0-2
# ::node	0.1.0.0.0.0	north	0-2
# ::node	0.1.0.0.0.1	korea	0-2
# ::node	0.2	country	9-10
# ::node	0.2.0	name	9-10
# ::node	0.2.0.0	china	9-10
# ::root	0	send-01
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	country	name	name	0.2	0.2.0
# ::edge	envoy	ARG1-of	special-02	0.0	0.0.0
# ::edge	lead-02	ARG1	country	0.1.0	0.1.0.0
# ::edge	name	op1	china	0.2.0	0.2.0.0
# ::edge	name	op1	north	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op2	korea	0.1.0.0.0	0.1.0.0.0.1
# ::edge	person	ARG0-of	lead-02	0.1	0.1.0
# ::edge	send-01	ARG0	person	0	0.1
# ::edge	send-01	ARG1	envoy	0	0.0
# ::edge	send-01	ARG2	country	0	0.2
(MRPNode-0 / send-01 :ARG1 (MRPNode-1 / envoy :ARG1-of (MRPNode-2 / special-02)) :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / lead-02 :ARG1 (MRPNode-5 / country :name (MRPNode-6 / name :op1 north :op2 korea)))) :ARG2 (MRPNode-7 / country :name (MRPNode-8 / name :op1 china)))

# ::id 540
# ::snt US House Republicans eye reluctant Ryan for speaker
# ::tok US House Republicans eye reluctant Ryan for speaker
# ::alignments 0-1|0.2.0.0.0+0.2.0.0.0.0+0.2.0.0.0.0.0 1-2|0.2.0.0+0.2.0.0.1+0.2.0.0.1.0+0.2.0.0.1.1 2-3|0.0.1+0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 4-5|0.2.1 5-6|0.0+0.0.0+0.0.0.0 7-8|0.2+0.2.0+0.2.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.811515 ::parser eager_oracle ::smatch 0.8307692307692307 ::n_actions 42
# ::node	0	see-01	
# ::node	0.0	person	5-6
# ::node	0.0.0	name	5-6
# ::node	0.0.0.0	ryan	5-6
# ::node	0.0.1	have-org-role-91	2-3
# ::node	0.0.1.0	political-party	2-3
# ::node	0.0.1.0.0	name	2-3
# ::node	0.0.1.0.0.0	republican	2-3
# ::node	0.1	person	
# ::node	0.2	person	7-8
# ::node	0.2.0	have-org-role-91	7-8
# ::node	0.2.0.0	government-organization	1-2
# ::node	0.2.0.0.0	country	0-1
# ::node	0.2.0.0.0.0	name	0-1
# ::node	0.2.0.0.0.0.0	us	0-1
# ::node	0.2.0.0.1	name	1-2
# ::node	0.2.0.0.1.0	house	1-2
# ::node	0.2.0.0.1.1	republican	1-2
# ::node	0.2.0.1	speaker	7-8
# ::node	0.2.1	reluctant-01	4-5
# ::root	0	see-01
# ::edge	country	name	name	0.2.0.0.0	0.2.0.0.0.0
# ::edge	government-organization	mod	country	0.2.0.0	0.2.0.0.0
# ::edge	government-organization	name	name	0.2.0.0	0.2.0.0.1
# ::edge	have-org-role-91	ARG1	government-organization	0.2.0	0.2.0.0
# ::edge	have-org-role-91	ARG1	political-party	0.0.1	0.0.1.0
# ::edge	have-org-role-91	ARG2	speaker	0.2.0	0.2.0.1
# ::edge	name	op1	house	0.2.0.0.1	0.2.0.0.1.0
# ::edge	name	op1	republican	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	ryan	0.0.0	0.0.0.0
# ::edge	name	op1	us	0.2.0.0.0.0	0.2.0.0.0.0.0
# ::edge	name	op2	republican	0.2.0.0.1	0.2.0.0.1.1
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.2	0.2.0
# ::edge	person	ARG0-of	reluctant-01	0.2	0.2.1
# ::edge	person	name	name	0.0	0.0.0
# ::edge	political-party	name	name	0.0.1.0	0.0.1.0.0
# ::edge	see-01	ARG0	person	0	0.1
# ::edge	see-01	ARG1	person	0	0.0
# ::edge	see-01	ARG2	person	0	0.2
(MRPNode-0 / see-01 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 ryan) :ARG0-of (MRPNode-3 / have-org-role-91 :ARG1 (MRPNode-4 / political-party :name (MRPNode-5 / name :op1 republican)))) :ARG0 (MRPNode-6 / person) :ARG2 (MRPNode-7 / person :ARG0-of (MRPNode-8 / have-org-role-91 :ARG1 (MRPNode-9 / government-organization :mod (MRPNode-10 / country :name (MRPNode-11 / name :op1 us)) :name (MRPNode-12 / name :op1 house :op2 republican)) :ARG2 (MRPNode-13 / speaker)) :ARG0-of (MRPNode-14 / reluctant-01)))

# ::id 541
# ::snt Top Asian News 8:39 a.m. GMT
# ::tok Top Asian News 8:39 a.m. GMT
# ::alignments 0-3|0+0.0+0.0.0+0.0.1+0.0.2 5-6|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.813445 ::parser eager_oracle ::smatch 0.7777777777777778 ::n_actions 13
# ::node	0	broadcast-program	0-3
# ::node	0.0	name	0-3
# ::node	0.0.0	top	0-3
# ::node	0.0.1	asian	0-3
# ::node	0.0.2	news	0-3
# ::node	0.1	date-entity	
# ::node	0.1.0	"8:39"	
# ::node	0.1.1	gmt	5-6
# ::root	0	broadcast-program
# ::edge	broadcast-program	name	name	0	0.0
# ::edge	broadcast-program	time	date-entity	0	0.1
# ::edge	date-entity	time	"8:39"	0.1	0.1.0
# ::edge	date-entity	timezone	gmt	0.1	0.1.1
# ::edge	name	op1	top	0.0	0.0.0
# ::edge	name	op2	asian	0.0	0.0.1
# ::edge	name	op3	news	0.0	0.0.2
(MRPNode-0 / broadcast-program :name (MRPNode-1 / name :op1 top :op2 asian :op3 news) :time (MRPNode-2 / date-entity :time "8:39" :timezone gmt))

# ::id 542
# ::snt Headlines in several Iranian newspapers on Oct 19
# ::tok Headlines in several Iranian newspapers on Oct 19
# ::alignments 0-1|0+0.0 2-3|0.0.0.0 3-4|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 4-5|0.0.0 7-8|0.0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.825224 ::parser eager_oracle ::smatch 0.8000000000000002 ::n_actions 28
# ::node	0	thing	0-1
# ::node	0.0	headline-01	0-1
# ::node	0.0.0	newspaper	4-5
# ::node	0.0.0.0	several	2-3
# ::node	0.0.0.1	country	3-4
# ::node	0.0.0.1.0	name	3-4
# ::node	0.0.0.1.0.0	iran	3-4
# ::node	0.0.1	date-entity	
# ::node	0.0.1.0	10	
# ::node	0.0.1.1	19	7-8
# ::root	0	thing
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	date-entity	day	19	0.0.1	0.0.1.1
# ::edge	date-entity	month	10	0.0.1	0.0.1.0
# ::edge	headline-01	time	date-entity	0.0	0.0.1
# ::edge	headline-01	time	newspaper	0.0	0.0.0
# ::edge	name	op1	iran	0.0.0.1.0	0.0.0.1.0.0
# ::edge	newspaper	mod	country	0.0.0	0.0.0.1
# ::edge	newspaper	mod	several	0.0.0	0.0.0.0
# ::edge	thing	ARG2-of	headline-01	0	0.0
(MRPNode-0 / thing :ARG2-of (MRPNode-1 / headline-01 :time (MRPNode-2 / newspaper :mod (MRPNode-3 / several) :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 iran))) :time (MRPNode-6 / date-entity :month 10 :day 19)))

# ::id 543
# ::snt Saudi airstrikes in Yemen's capital kill 29
# ::tok Saudi airstrikes in Yemen 's capital kill 29
# ::alignments 0-1|0.2+0.2.1+0.2.1.0+0.2.1.1 3-4|0.2.0.0+0.2.0.0.0+0.2.0.0.0.0 5-6|0.2.0+0.2.0.1 6-7|0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.831773 ::parser eager_oracle ::smatch 0.761904761904762 ::n_actions 29
# ::node	0	kill-01	6-7
# ::node	0.0	29	7-8
# ::node	0.1	strike-01	
# ::node	0.1.0	city	
# ::node	0.1.1	air	
# ::node	0.2	country	0-1
# ::node	0.2.0	have-org-role-91	5-6
# ::node	0.2.0.0	country	3-4
# ::node	0.2.0.0.0	name	3-4
# ::node	0.2.0.0.0.0	yemen	3-4
# ::node	0.2.0.1	capital	5-6
# ::node	0.2.1	name	0-1
# ::node	0.2.1.0	saudi	0-1
# ::node	0.2.1.1	arabia	0-1
# ::root	0	kill-01
# ::edge	country	ARG1-of	have-org-role-91	0.2	0.2.0
# ::edge	country	name	name	0.2	0.2.1
# ::edge	country	name	name	0.2.0.0	0.2.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.2.0	0.2.0.0
# ::edge	have-org-role-91	ARG2	capital	0.2.0	0.2.0.1
# ::edge	kill-01	ARG0	country	0	0.2
# ::edge	kill-01	ARG0	strike-01	0	0.1
# ::edge	kill-01	arg1	29	0	0.0
# ::edge	name	op1	saudi	0.2.1	0.2.1.0
# ::edge	name	op1	yemen	0.2.0.0.0	0.2.0.0.0.0
# ::edge	name	op2	arabia	0.2.1	0.2.1.1
# ::edge	strike-01	ARG1	city	0.1	0.1.0
# ::edge	strike-01	path	air	0.1	0.1.1
(MRPNode-0 / kill-01 :arg1 29 :ARG0 (MRPNode-1 / strike-01 :ARG1 (MRPNode-2 / city) :path (MRPNode-3 / air)) :ARG0 (MRPNode-4 / country :ARG1-of (MRPNode-5 / have-org-role-91 :ARG1 (MRPNode-6 / country :name (MRPNode-7 / name :op1 yemen)) :ARG2 (MRPNode-8 / capital)) :name (MRPNode-9 / name :op1 saudi :op2 arabia)))

# ::id 544
# ::snt Militant attack from Afghanistan kills FC soldier in Balochistan
# ::tok Militant attack from Afghanistan kills FC soldier in Balochistan
# ::alignments 0-1|0.1.0 1-2|0.1 3-4|0.1.1+0.1.1.0+0.1.1.0.0 4-5|0 6-7|0.0 8-9|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.837966 ::parser eager_oracle ::smatch 0.972972972972973 ::n_actions 29
# ::node	0	kill-01	4-5
# ::node	0.0	soldier	6-7
# ::node	0.0.0	2	
# ::node	0.1	attack-01	1-2
# ::node	0.1.0	militant	0-1
# ::node	0.1.1	country	3-4
# ::node	0.1.1.0	name	3-4
# ::node	0.1.1.0.0	afghanistan	3-4
# ::node	0.2	province	8-9
# ::node	0.2.0	name	8-9
# ::node	0.2.0.0	balochistan	8-9
# ::root	0	kill-01
# ::edge	attack-01	ARG0	militant	0.1	0.1.0
# ::edge	attack-01	source	country	0.1	0.1.1
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	kill-01	ARG0	attack-01	0	0.1
# ::edge	kill-01	ARG1	soldier	0	0.0
# ::edge	kill-01	location	province	0	0.2
# ::edge	name	op1	afghanistan	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	balochistan	0.2.0	0.2.0.0
# ::edge	province	name	name	0.2	0.2.0
# ::edge	soldier	quant	2	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / soldier :quant 2) :ARG0 (MRPNode-2 / attack-01 :ARG0 (MRPNode-3 / militant) :source (MRPNode-4 / country :name (MRPNode-5 / name :op1 afghanistan))) :location (MRPNode-6 / province :name (MRPNode-7 / name :op1 balochistan)))

# ::id 545
# ::snt Militants attack UN as Mali hunts jihadist nightclub killers
# ::tok Militants attack UN as Mali hunts jihadist nightclub killers
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0+0.0.0+0.0.0.0 4-5|0.2.1+0.2.1.0+0.2.1.0.0 5-6|0.2 6-7|0.2.0.0 8-9|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.852147 ::parser eager_oracle ::smatch 1.0 ::n_actions 40
# ::node	0	attack-01	1-2
# ::node	0.0	organization	2-3
# ::node	0.0.0	name	2-3
# ::node	0.0.0.0	un	2-3
# ::node	0.1	person	0-1
# ::node	0.1.0	have-org-role-91	0-1
# ::node	0.1.0.0	militant	0-1
# ::node	0.2	hunt-01	5-6
# ::node	0.2.0	kill-01	8-9
# ::node	0.2.0.0	jihadist	6-7
# ::node	0.2.1	country	4-5
# ::node	0.2.1.0	name	4-5
# ::node	0.2.1.0.0	mali	4-5
# ::root	0	attack-01
# ::edge	attack-01	ARG0	person	0	0.1
# ::edge	attack-01	ARG1	organization	0	0.0
# ::edge	attack-01	time	hunt-01	0	0.2
# ::edge	country	name	name	0.2.1	0.2.1.0
# ::edge	have-org-role-91	ARG2	militant	0.1.0	0.1.0.0
# ::edge	hunt-01	ARG0	country	0.2	0.2.1
# ::edge	hunt-01	ARG1	kill-01	0.2	0.2.0
# ::edge	kill-01	ARG1	jihadist	0.2.0	0.2.0.0
# ::edge	name	op1	mali	0.2.1.0	0.2.1.0.0
# ::edge	name	op1	un	0.0.0	0.0.0.0
# ::edge	organization	name	name	0.0	0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
(MRPNode-0 / attack-01 :ARG1 (MRPNode-1 / organization :name (MRPNode-2 / name :op1 un)) :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-org-role-91 :ARG2 (MRPNode-5 / militant))) :time (MRPNode-6 / hunt-01 :ARG1 (MRPNode-7 / kill-01 :ARG1 (MRPNode-8 / jihadist)) :ARG0 (MRPNode-9 / country :name (MRPNode-10 / name :op1 mali))))

# ::id 546
# ::snt Sierra Leone Reaches Final Day of Ebola Lockdown
# ::tok Sierra Leone Reaches Final Day of Ebola Lockdown
# ::alignments 0-2|0.0+0.0.0+0.0.0.0+0.0.0.1 4-7|0.1+0.1.0+0.1.0.0+0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.855817 ::parser eager_oracle ::smatch 0.5925925925925927 ::n_actions 15
# ::node	0	race-02	
# ::node	0.0	country	0-2
# ::node	0.0.0	name	0-2
# ::node	0.0.0.0	sierra	0-2
# ::node	0.0.0.1	leone	0-2
# ::node	0.1	event	4-7
# ::node	0.1.0	name	4-7
# ::node	0.1.0.0	ebola	4-7
# ::node	0.1.0.1	day	4-7
# ::root	0	race-02
# ::edge	country	name	name	0.0	0.0.0
# ::edge	event	name	name	0.1	0.1.0
# ::edge	name	op1	ebola	0.1.0	0.1.0.0
# ::edge	name	op1	sierra	0.0.0	0.0.0.0
# ::edge	name	op2	day	0.1.0	0.1.0.1
# ::edge	name	op2	leone	0.0.0	0.0.0.1
# ::edge	race-02	ARG0	country	0	0.0
# ::edge	race-02	ARG3	event	0	0.1
(MRPNode-0 / race-02 :ARG0 (MRPNode-1 / country :name (MRPNode-2 / name :op1 sierra :op2 leone)) :ARG3 (MRPNode-3 / event :name (MRPNode-4 / name :op1 ebola :op2 day)))

# ::id 547
# ::snt Israeli forces detain 2 Palestinians in overnight arrest raids
# ::tok Israeli forces detain 2 Palestinians in overnight arrest raids
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1 2-3|0 3-4|0.0.0 4-5|0.0.1+0.0.1.0+0.0.1.0.0 6-7|0.2.1 7-8|0.2.0 8-9|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:40.863647 ::parser eager_oracle ::smatch 0.7906976744186046 ::n_actions 33
# ::node	0	detain-01	2-3
# ::node	0.0	person	
# ::node	0.0.0	2	3-4
# ::node	0.0.1	country	4-5
# ::node	0.0.1.0	name	4-5
# ::node	0.0.1.0.0	palestine	4-5
# ::node	0.1	force	1-2
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	israel	0-1
# ::node	0.2	raid-01	8-9
# ::node	0.2.0	arrest-01	7-8
# ::node	0.2.1	overnight	6-7
# ::root	0	detain-01
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	detain-01	ARG0	force	0	0.1
# ::edge	detain-01	ARG1	person	0	0.0
# ::edge	detain-01	ARG2	raid-01	0	0.2
# ::edge	force	mod	country	0.1	0.1.0
# ::edge	name	op1	israel	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	palestine	0.0.1.0	0.0.1.0.0
# ::edge	person	mod	country	0.0	0.0.1
# ::edge	person	quant	2	0.0	0.0.0
# ::edge	raid-01	ARG1	arrest-01	0.2	0.2.0
# ::edge	raid-01	time	overnight	0.2	0.2.1
(MRPNode-0 / detain-01 :ARG1 (MRPNode-1 / person :quant 2 :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 palestine))) :ARG0 (MRPNode-4 / force :mod (MRPNode-5 / country :name (MRPNode-6 / name :op1 israel))) :ARG2 (MRPNode-7 / raid-01 :ARG1 (MRPNode-8 / arrest-01) :time (MRPNode-9 / overnight)))

# ::id 548
# ::snt Over 2,000 migrants rescued from wooden boats in Mediterranean
# ::tok Over 2,000 migrants rescued from wooden boats in Mediterranean
# ::alignments 0-1|0.0.1 2-3|0.0+0.0.0 3-4|0 5-6|0.1.0 6-7|0.1 8-9|0.1.1+0.1.1.0+0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.869027 ::parser eager_oracle ::smatch 0.9714285714285714 ::n_actions 33
# ::node	0	rescue-01	3-4
# ::node	0.0	person	2-3
# ::node	0.0.0	migrate-01	2-3
# ::node	0.0.1	over	0-1
# ::node	0.0.1.0	2000	
# ::node	0.1	boat	6-7
# ::node	0.1.0	wooden	5-6
# ::node	0.1.1	sea	8-9
# ::node	0.1.1.0	name	8-9
# ::node	0.1.1.0.0	mediterranean	8-9
# ::root	0	rescue-01
# ::edge	boat	location	sea	0.1	0.1.1
# ::edge	boat	mod	wooden	0.1	0.1.0
# ::edge	name	op1	mediterranean	0.1.1.0	0.1.1.0.0
# ::edge	over	op1	2000	0.0.1	0.0.1.0
# ::edge	person	ARG0-of	migrate-01	0.0	0.0.0
# ::edge	person	quant	over	0.0	0.0.1
# ::edge	rescue-01	ARG1	person	0	0.0
# ::edge	rescue-01	ARG2	boat	0	0.1
# ::edge	sea	name	name	0.1.1	0.1.1.0
(MRPNode-0 / rescue-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / migrate-01) :quant (MRPNode-3 / over :op1 2000)) :ARG2 (MRPNode-4 / boat :mod (MRPNode-5 / wooden) :location (MRPNode-6 / sea :name (MRPNode-7 / name :op1 mediterranean))))

# ::id 549
# ::snt Israel Police Clash With Palestinians in Jerusalem
# ::tok Israel Police Clash With Palestinians in Jerusalem
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1 2-3|0 4-5|0.0+0.0.0+0.0.0.0+0.0.0.0.0 6-7|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.874999 ::parser eager_oracle ::smatch 0.9523809523809523 ::n_actions 28
# ::node	0	clash-01	2-3
# ::node	0.0	person	4-5
# ::node	0.0.0	country	4-5
# ::node	0.0.0.0	name	4-5
# ::node	0.0.0.0.0	palestine	4-5
# ::node	0.1	police	1-2
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	israel	0-1
# ::node	0.2	city	6-7
# ::node	0.2.0	name	6-7
# ::node	0.2.0.0	jerusalem	6-7
# ::root	0	clash-01
# ::edge	city	name	name	0.2	0.2.0
# ::edge	clash-01	ARG1	person	0	0.0
# ::edge	clash-01	location	city	0	0.2
# ::edge	clash-01	location	police	0	0.1
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	name	op1	israel	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	jerusalem	0.2.0	0.2.0.0
# ::edge	name	op1	palestine	0.0.0.0	0.0.0.0.0
# ::edge	person	mod	country	0.0	0.0.0
# ::edge	police	mod	country	0.1	0.1.0
(MRPNode-0 / clash-01 :ARG1 (MRPNode-1 / person :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 palestine))) :location (MRPNode-4 / police :mod (MRPNode-5 / country :name (MRPNode-6 / name :op1 israel))) :location (MRPNode-7 / city :name (MRPNode-8 / name :op1 jerusalem)))

# ::id 550
# ::snt Islamic State posts second propaganda video of UK hostage
# ::tok Islamic State posts second propaganda video of UK hostage
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1 2-3|0 4-5|0.0.0 5-6|0.0 7-8|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 8-9|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.882047 ::parser eager_oracle ::smatch 0.9302325581395349 ::n_actions 32
# ::node	0	post-01	2-3
# ::node	0.0	video	5-6
# ::node	0.0.0	propaganda	4-5
# ::node	0.0.1	hostage	8-9
# ::node	0.0.1.0	country	7-8
# ::node	0.0.1.0.0	name	7-8
# ::node	0.0.1.0.0.0	uk	7-8
# ::node	0.0.2	ordinal-entity	
# ::node	0.0.2.0	2	
# ::node	0.1	state	1-2
# ::node	0.1.0	religious-group	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	islamic	0-1
# ::root	0	post-01
# ::edge	country	name	name	0.0.1.0	0.0.1.0.0
# ::edge	hostage	mod	country	0.0.1	0.0.1.0
# ::edge	name	op1	islamic	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	uk	0.0.1.0.0	0.0.1.0.0.0
# ::edge	ordinal-entity	value	2	0.0.2	0.0.2.0
# ::edge	post-01	ARG0	state	0	0.1
# ::edge	post-01	ARG1	video	0	0.0
# ::edge	religious-group	name	name	0.1.0	0.1.0.0
# ::edge	state	mod	religious-group	0.1	0.1.0
# ::edge	video	ord	ordinal-entity	0.0	0.0.2
# ::edge	video	topic	hostage	0.0	0.0.1
# ::edge	video	topic	propaganda	0.0	0.0.0
(MRPNode-0 / post-01 :ARG1 (MRPNode-1 / video :topic (MRPNode-2 / propaganda) :topic (MRPNode-3 / hostage :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 uk))) :ord (MRPNode-6 / ordinal-entity :value 2)) :ARG0 (MRPNode-7 / state :mod (MRPNode-8 / religious-group :name (MRPNode-9 / name :op1 islamic))))

# ::id 551
# ::snt Greece concerns drag on Asia markets
# ::tok Greece concerns drag on Asia markets
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 2-3|0.1 4-5|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 5-6|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.886055 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	concern-01	1-2
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	greece	0-1
# ::node	0.1	drag-01	2-3
# ::node	0.1.0	market	5-6
# ::node	0.1.0.0	continent	4-5
# ::node	0.1.0.0.0	name	4-5
# ::node	0.1.0.0.0.0	asia	4-5
# ::root	0	concern-01
# ::edge	concern-01	ARG0	drag-01	0	0.1
# ::edge	concern-01	ARG1	country	0	0.0
# ::edge	continent	name	name	0.1.0.0	0.1.0.0.0
# ::edge	country	name	name	0.0	0.0.0
# ::edge	drag-01	ARG1	market	0.1	0.1.0
# ::edge	market	location	continent	0.1.0	0.1.0.0
# ::edge	name	op1	asia	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op1	greece	0.0.0	0.0.0.0
(MRPNode-0 / concern-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 greece)) :ARG0 (MRPNode-3 / drag-01 :ARG1 (MRPNode-4 / market :location (MRPNode-5 / continent :name (MRPNode-6 / name :op1 asia)))))

# ::id 552
# ::snt Death toll in Nepal earthquake tops 8,000
# ::tok Death toll in Nepal earthquake tops 8,000
# ::alignments 0-1|0.1.0 1-2|0.1 3-4|0.2.0.0+0.2.0.0.0+0.2.0.0.0.0 4-5|0.2.0 5-6|0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.890431 ::parser eager_oracle ::smatch 0.8275862068965517 ::n_actions 23
# ::node	0	top-01	5-6
# ::node	0.0	8000	
# ::node	0.1	toll	1-2
# ::node	0.1.0	die-01	0-1
# ::node	0.2	cause-01	
# ::node	0.2.0	earthquake	4-5
# ::node	0.2.0.0	country	3-4
# ::node	0.2.0.0.0	name	3-4
# ::node	0.2.0.0.0.0	nepal	3-4
# ::root	0	top-01
# ::edge	cause-01	ARG0	earthquake	0.2	0.2.0
# ::edge	country	name	name	0.2.0.0	0.2.0.0.0
# ::edge	earthquake	location	country	0.2.0	0.2.0.0
# ::edge	name	op1	nepal	0.2.0.0.0	0.2.0.0.0.0
# ::edge	toll	quant-of	die-01	0.1	0.1.0
# ::edge	top-01	ARG1	toll	0	0.1
# ::edge	top-01	ARG2	cause-01	0	0.2
# ::edge	top-01	arg2	8000	0	0.0
(MRPNode-0 / top-01 :arg2 8000 :ARG1 (MRPNode-1 / toll :quant-of (MRPNode-2 / die-01)) :ARG2 (MRPNode-3 / cause-01 :ARG0 (MRPNode-4 / earthquake :location (MRPNode-5 / country :name (MRPNode-6 / name :op1 nepal)))))

# ::id 553
# ::snt US drone strike kills 11 in Pakistan
# ::tok US drone strike kills 11 in Pakistan
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1.1 2-3|0.1 3-4|0 4-5|0.0+0.0.0 6-7|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.895542 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	kill-01	3-4
# ::node	0.0	person	4-5
# ::node	0.0.0	11	4-5
# ::node	0.1	strike-01	2-3
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	us	0-1
# ::node	0.1.1	drone	1-2
# ::node	0.2	country	6-7
# ::node	0.2.0	name	6-7
# ::node	0.2.0.0	pakistan	6-7
# ::root	0	kill-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	country	name	name	0.2	0.2.0
# ::edge	kill-01	ARG0	strike-01	0	0.1
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	location	country	0	0.2
# ::edge	name	op1	pakistan	0.2.0	0.2.0.0
# ::edge	name	op1	us	0.1.0.0	0.1.0.0.0
# ::edge	person	quant	11	0.0	0.0.0
# ::edge	strike-01	ARG0	country	0.1	0.1.0
# ::edge	strike-01	ARG2	drone	0.1	0.1.1
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 11) :ARG0 (MRPNode-2 / strike-01 :ARG0 (MRPNode-3 / country :name (MRPNode-4 / name :op1 us)) :ARG2 (MRPNode-5 / drone)) :location (MRPNode-6 / country :name (MRPNode-7 / name :op1 pakistan)))

# ::id 554
# ::snt Two teenagers arrested after string of sex attacks on Manchester University campus
# ::tok Two teenagers arrested after string of sex attacks on Manchester University campus
# ::alignments 0-1|0.0.0 1-2|0.0 2-3|0 3-4|0.1 4-5|0.1.0.1 6-7|0.1.0.2 7-8|0.1.0 9-11|0.1.0.0.0+0.1.0.0.0.0+0.1.0.0.0.0.0+0.1.0.0.0.0.1 11-12|0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.907220 ::parser eager_oracle ::smatch 1.0 ::n_actions 41
# ::node	0	arrest-01	2-3
# ::node	0.0	teenager	1-2
# ::node	0.0.0	2	0-1
# ::node	0.1	after	3-4
# ::node	0.1.0	attack-01	7-8
# ::node	0.1.0.0	campus	11-12
# ::node	0.1.0.0.0	university	9-11
# ::node	0.1.0.0.0.0	name	9-11
# ::node	0.1.0.0.0.0.0	manchester	9-11
# ::node	0.1.0.0.0.0.1	university	9-11
# ::node	0.1.0.1	string	4-5
# ::node	0.1.0.2	sex-01	6-7
# ::root	0	arrest-01
# ::edge	after	op1	attack-01	0.1	0.1.0
# ::edge	arrest-01	ARG1	teenager	0	0.0
# ::edge	arrest-01	time	after	0	0.1
# ::edge	attack-01	ARG1	campus	0.1.0	0.1.0.0
# ::edge	attack-01	manner	sex-01	0.1.0	0.1.0.2
# ::edge	attack-01	quant	string	0.1.0	0.1.0.1
# ::edge	campus	poss	university	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	manchester	0.1.0.0.0.0	0.1.0.0.0.0.0
# ::edge	name	op2	university	0.1.0.0.0.0	0.1.0.0.0.0.1
# ::edge	teenager	quant	2	0.0	0.0.0
# ::edge	university	name	name	0.1.0.0.0	0.1.0.0.0.0
(MRPNode-0 / arrest-01 :ARG1 (MRPNode-1 / teenager :quant 2) :time (MRPNode-2 / after :op1 (MRPNode-3 / attack-01 :ARG1 (MRPNode-4 / campus :poss (MRPNode-5 / university :name (MRPNode-6 / name :op1 manchester :op2 university))) :quant (MRPNode-7 / string) :manner (MRPNode-8 / sex-01))))

# ::id 555
# ::snt UN urges Syria gas attack inspection
# ::tok UN urges Syria gas attack inspection
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.0+0.0.0.0+0.0.0.0.0 3-4|0.0.2 4-5|0.0 5-6|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.912034 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	urge-01	1-2
# ::node	0.0	attack-01	4-5
# ::node	0.0.0	country	2-3
# ::node	0.0.0.0	name	2-3
# ::node	0.0.0.0.0	syria	2-3
# ::node	0.0.1	inspection	5-6
# ::node	0.0.2	gas	3-4
# ::node	0.1	organization	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	un	0-1
# ::root	0	urge-01
# ::edge	attack-01	ARG1	country	0.0	0.0.0
# ::edge	attack-01	ARG2	inspection	0.0	0.0.1
# ::edge	attack-01	instrument	gas	0.0	0.0.2
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	name	op1	syria	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	un	0.1.0	0.1.0.0
# ::edge	organization	name	name	0.1	0.1.0
# ::edge	urge-01	ARG0	organization	0	0.1
# ::edge	urge-01	ARG1	attack-01	0	0.0
(MRPNode-0 / urge-01 :ARG1 (MRPNode-1 / attack-01 :ARG1 (MRPNode-2 / country :name (MRPNode-3 / name :op1 syria)) :ARG2 (MRPNode-4 / inspection) :instrument (MRPNode-5 / gas)) :ARG0 (MRPNode-6 / organization :name (MRPNode-7 / name :op1 un)))

# ::id 556
# ::snt Ukraine's opposition chief wants more protests
# ::tok Ukraine 's opposition chief wants more protests
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 2-3|0.1.0.1.0 3-4|0.1+0.1.0+0.1.0.1 4-5|0 5-6|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.917216 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	want-01	4-5
# ::node	0.0	protest-01	6-7
# ::node	0.0.0	more	5-6
# ::node	0.1	person	3-4
# ::node	0.1.0	have-org-role-91	3-4
# ::node	0.1.0.0	country	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	ukraine	0-1
# ::node	0.1.0.1	chief	3-4
# ::node	0.1.0.1.0	oppose-01	2-3
# ::root	0	want-01
# ::edge	chief	ARG0-of	oppose-01	0.1.0.1	0.1.0.1.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	chief	0.1.0	0.1.0.1
# ::edge	name	op1	ukraine	0.1.0.0.0	0.1.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	protest-01	quant	more	0.0	0.0.0
# ::edge	want-01	ARG0	person	0	0.1
# ::edge	want-01	ARG1	protest-01	0	0.0
(MRPNode-0 / want-01 :ARG1 (MRPNode-1 / protest-01 :quant (MRPNode-2 / more)) :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-org-role-91 :ARG1 (MRPNode-5 / country :name (MRPNode-6 / name :op1 ukraine)) :ARG2 (MRPNode-7 / chief :ARG0-of (MRPNode-8 / oppose-01)))))

# ::id 557
# ::snt Redford addresses PC convention ahead of leadership review
# ::tok Redford addresses PC convention ahead of leadership review
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 3-4|0.2 4-5|0.1 6-7|0.1.0.0 7-8|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.922276 ::parser eager_oracle ::smatch 0.9375 ::n_actions 28
# ::node	0	address-03	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	redford	0-1
# ::node	0.1	ahead	4-5
# ::node	0.1.0	review-01	7-8
# ::node	0.1.0.0	lead-02	6-7
# ::node	0.2	convention	3-4
# ::node	0.2.0	politics	
# ::root	0	address-03
# ::edge	address-03	ARG1	convention	0	0.2
# ::edge	address-03	ARG1	person	0	0.0
# ::edge	address-03	time	ahead	0	0.1
# ::edge	ahead	op1	review-01	0.1	0.1.0
# ::edge	convention	mod	politics	0.2	0.2.0
# ::edge	name	op1	redford	0.0.0	0.0.0.0
# ::edge	person	name	name	0.0	0.0.0
# ::edge	review-01	ARG1	lead-02	0.1.0	0.1.0.0
(MRPNode-0 / address-03 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 redford)) :time (MRPNode-3 / ahead :op1 (MRPNode-4 / review-01 :ARG1 (MRPNode-5 / lead-02))) :ARG1 (MRPNode-6 / convention :mod (MRPNode-7 / politics)))

# ::id 558
# ::snt Police: Gunman killed 6 in California shootings
# ::tok Police : Gunman killed 6 in California shootings
# ::alignments 0-1|0.3 3-4|0 4-5|0.0+0.0.0 6-7|0.1.0+0.1.0.0+0.1.0.0.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.929188 ::parser eager_oracle ::smatch 0.8750000000000001 ::n_actions 29
# ::node	0	kill-01	3-4
# ::node	0.0	person	4-5
# ::node	0.0.0	6	4-5
# ::node	0.1	shoot-02	7-8
# ::node	0.1.0	state	6-7
# ::node	0.1.0.0	name	6-7
# ::node	0.1.0.0.0	california	6-7
# ::node	0.2	cause-01	
# ::node	0.2.0	gun	
# ::node	0.3	police	0-1
# ::root	0	kill-01
# ::edge	cause-01	ARG0	gun	0.2	0.2.0
# ::edge	kill-01	ARG0	police	0	0.3
# ::edge	kill-01	ARG0	shoot-02	0	0.1
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	ARG1-of	cause-01	0	0.2
# ::edge	name	op1	california	0.1.0.0	0.1.0.0.0
# ::edge	person	quant	6	0.0	0.0.0
# ::edge	shoot-02	location	state	0.1	0.1.0
# ::edge	state	name	name	0.1.0	0.1.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 6) :ARG0 (MRPNode-2 / shoot-02 :location (MRPNode-3 / state :name (MRPNode-4 / name :op1 california))) :ARG1-of (MRPNode-5 / cause-01 :ARG0 (MRPNode-6 / gun)) :ARG0 (MRPNode-7 / police))

# ::id 559
# ::snt North Korea deports detained US war veteran
# ::tok North Korea deports detained US war veteran
# ::alignments 0-2|0.1+0.1.0+0.1.0.0+0.1.0.1 2-3|0 3-4|0.0.1 4-5|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 5-6|0.0.0.1.0 6-7|0.0+0.0.0+0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.939622 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	deport-01	2-3
# ::node	0.0	person	6-7
# ::node	0.0.0	have-org-role-91	6-7
# ::node	0.0.0.0	country	4-5
# ::node	0.0.0.0.0	name	4-5
# ::node	0.0.0.0.0.0	us	4-5
# ::node	0.0.0.1	veteran	6-7
# ::node	0.0.0.1.0	war	5-6
# ::node	0.0.1	detain-01	3-4
# ::node	0.1	country	0-2
# ::node	0.1.0	name	0-2
# ::node	0.1.0.0	north	0-2
# ::node	0.1.0.1	korea	0-2
# ::root	0	deport-01
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	deport-01	ARG0	country	0	0.1
# ::edge	deport-01	ARG1	person	0	0.0
# ::edge	have-org-role-91	ARG1	country	0.0.0	0.0.0.0
# ::edge	have-org-role-91	ARG2	veteran	0.0.0	0.0.0.1
# ::edge	name	op1	north	0.1.0	0.1.0.0
# ::edge	name	op1	us	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op2	korea	0.1.0	0.1.0.1
# ::edge	person	ARG0-of	detain-01	0.0	0.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.0
# ::edge	veteran	mod	war	0.0.0.1	0.0.0.1.0
(MRPNode-0 / deport-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-org-role-91 :ARG1 (MRPNode-3 / country :name (MRPNode-4 / name :op1 us)) :ARG2 (MRPNode-5 / veteran :mod (MRPNode-6 / war))) :ARG0-of (MRPNode-7 / detain-01)) :ARG0 (MRPNode-8 / country :name (MRPNode-9 / name :op1 north :op2 korea)))

# ::id 560
# ::snt Obama urges military action against Syria, but will seek Congress' OK
# ::tok Obama urges military action against Syria , but will seek Congress ' OK
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 1-2|0.1 2-3|0.1.0.1 5-6|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 7-8|0 9-10|0.0 10-11|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 12-13|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.952733 ::parser eager_oracle ::smatch 0.8846153846153847 ::n_actions 39
# ::node	0	contrast-01	7-8
# ::node	0.0	seek-01	9-10
# ::node	0.0.0	okay-04	12-13
# ::node	0.0.0.0	government-organization	10-11
# ::node	0.0.0.0.0	name	10-11
# ::node	0.0.0.0.0.0	congress	10-11
# ::node	0.0.1	person	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	obama	0-1
# ::node	0.1	urge-01	1-2
# ::node	0.1.0	act-02	
# ::node	0.1.0.0	country	5-6
# ::node	0.1.0.0.0	name	5-6
# ::node	0.1.0.0.0.0	syria	5-6
# ::node	0.1.0.1	military	2-3
# ::root	0	contrast-01
# ::edge	act-02	ARG0	country	0.1.0	0.1.0.0
# ::edge	act-02	mod	military	0.1.0	0.1.0.1
# ::edge	contrast-01	ARG1	seek-01	0	0.0
# ::edge	contrast-01	ARG1	urge-01	0	0.1
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	government-organization	name	name	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	congress	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	obama	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	syria	0.1.0.0.0	0.1.0.0.0.0
# ::edge	okay-04	ARG1	government-organization	0.0.0	0.0.0.0
# ::edge	person	name	name	0.0.1	0.0.1.0
# ::edge	seek-01	ARG0	person	0.0	0.0.1
# ::edge	seek-01	ARG1	okay-04	0.0	0.0.0
# ::edge	urge-01	ARG0	person	0.1	0.0.1
# ::edge	urge-01	ARG2	act-02	0.1	0.1.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / seek-01 :ARG1 (MRPNode-2 / okay-04 :ARG1 (MRPNode-3 / government-organization :name (MRPNode-4 / name :op1 congress))) :ARG0 (MRPNode-5 / person :name (MRPNode-6 / name :op1 obama))) :ARG1 (MRPNode-7 / urge-01 :ARG0 MRPNode-5 :ARG2 (MRPNode-8 / act-02 :ARG0 (MRPNode-9 / country :name (MRPNode-10 / name :op1 syria)) :mod (MRPNode-11 / military))))

# ::id 561
# ::snt Egypt: Protesters storm Muslim Brotherhood's HQ
# ::tok Egypt : Protesters storm Muslim Brotherhood 's HQ
# ::alignments 0-1|0.2+0.2.0+0.2.0.0 2-3|0.0+0.0.0 3-4|0 4-6|0.1+0.1.0+0.1.0.0+0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.957909 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	storm-02	3-4
# ::node	0.0	person	2-3
# ::node	0.0.0	protest-01	2-3
# ::node	0.1	government-organization	4-6
# ::node	0.1.0	name	4-6
# ::node	0.1.0.0	muslim	4-6
# ::node	0.1.0.1	brotherhood	4-6
# ::node	0.2	country	0-1
# ::node	0.2.0	name	0-1
# ::node	0.2.0.0	egypt	0-1
# ::root	0	storm-02
# ::edge	country	name	name	0.2	0.2.0
# ::edge	government-organization	name	name	0.1	0.1.0
# ::edge	name	op1	egypt	0.2.0	0.2.0.0
# ::edge	name	op1	muslim	0.1.0	0.1.0.0
# ::edge	name	op2	brotherhood	0.1.0	0.1.0.1
# ::edge	person	ARG0-of	protest-01	0.0	0.0.0
# ::edge	storm-02	ARG1	government-organization	0	0.1
# ::edge	storm-02	ARG1	person	0	0.0
# ::edge	storm-02	location	country	0	0.2
(MRPNode-0 / storm-02 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / protest-01)) :ARG1 (MRPNode-3 / government-organization :name (MRPNode-4 / name :op1 muslim :op2 brotherhood)) :location (MRPNode-5 / country :name (MRPNode-6 / name :op1 egypt)))

# ::id 562
# ::snt Saudi women drive in protest with little problem
# ::tok Saudi women drive in protest with little problem
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0+0.0.0.0.1 1-2|0.0 2-3|0 4-5|0.1 6-7|0.2.0.0 7-8|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.962445 ::parser eager_oracle ::smatch 0.8484848484848485 ::n_actions 27
# ::node	0	drive-01	2-3
# ::node	0.0	woman	1-2
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	saudi	0-1
# ::node	0.0.0.0.1	arabia	0-1
# ::node	0.1	protest-01	4-5
# ::node	0.2	have-03	
# ::node	0.2.0	problem	7-8
# ::node	0.2.0.0	little	6-7
# ::root	0	drive-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	drive-01	ARG1	woman	0	0.0
# ::edge	drive-01	manner	have-03	0	0.2
# ::edge	drive-01	manner	protest-01	0	0.1
# ::edge	have-03	ARG1	problem	0.2	0.2.0
# ::edge	name	op1	saudi	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	arabia	0.0.0.0	0.0.0.0.1
# ::edge	problem	quant	little	0.2.0	0.2.0.0
# ::edge	woman	mod	country	0.0	0.0.0
(MRPNode-0 / drive-01 :ARG1 (MRPNode-1 / woman :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 saudi :op2 arabia))) :manner (MRPNode-4 / protest-01) :manner (MRPNode-5 / have-03 :ARG1 (MRPNode-6 / problem :quant (MRPNode-7 / little))))

# ::id 563
# ::snt Nelson Mandela Goes Home After Hospital Stay
# ::tok Nelson Mandela Goes Home After Hospital Stay
# ::alignments 0-2|0.0+0.0.0+0.0.0.0+0.0.0.1 2-3|0 3-4|0.2 4-5|0.1 5-6|0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.966657 ::parser eager_oracle ::smatch 0.8571428571428571 ::n_actions 23
# ::node	0	go-02	2-3
# ::node	0.0	person	0-2
# ::node	0.0.0	name	0-2
# ::node	0.0.0.0	nelson	0-2
# ::node	0.0.0.1	mandela	0-2
# ::node	0.1	after	4-5
# ::node	0.1.0	day	
# ::node	0.1.0.0	hospital	5-6
# ::node	0.2	home	3-4
# ::root	0	go-02
# ::edge	after	op1	day	0.1	0.1.0
# ::edge	day	time-of	hospital	0.1.0	0.1.0.0
# ::edge	go-02	ARG0	person	0	0.0
# ::edge	go-02	ARG4	home	0	0.2
# ::edge	go-02	time	after	0	0.1
# ::edge	name	op1	nelson	0.0.0	0.0.0.0
# ::edge	name	op2	mandela	0.0.0	0.0.0.1
# ::edge	person	name	name	0.0	0.0.0
(MRPNode-0 / go-02 :ARG0 (MRPNode-1 / person :name (MRPNode-2 / name :op1 nelson :op2 mandela)) :time (MRPNode-3 / after :op1 (MRPNode-4 / day :time-of (MRPNode-5 / hospital))) :ARG4 (MRPNode-6 / home))

# ::id 564
# ::snt What we know so far about chemical weapons in Syria's civil war
# ::tok What we know so far about chemical weapons in Syria 's civil war
# ::alignments 1-2|0.1 2-3|0+0.0 3-5|0.2 6-7|0.0.0.0 7-8|0.0.0 11-12|0.0.0.1.1 12-13|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:40.975891 ::parser eager_oracle ::smatch 0.8648648648648648 ::n_actions 41
# ::node	0	know-01	2-3
# ::node	0.0	thing	2-3
# ::node	0.0.0	weapon	7-8
# ::node	0.0.0.0	chemical	6-7
# ::node	0.0.0.1	war	12-13
# ::node	0.0.0.1.0	country	9-10
# ::node	0.0.0.1.0.0	name	9-10
# ::node	0.0.0.1.0.0.0	syria	9-10
# ::node	0.0.0.1.1	civil	11-12
# ::node	0.1	we	1-2
# ::node	0.2	so-far	3-5
# ::root	0	know-01
# ::edge	country	name	name	0.0.0.1.0	0.0.0.1.0.0
# ::edge	know-01	ARG0	we	0	0.1
# ::edge	know-01	ARG1	thing	0	0.0
# ::edge	know-01	time	so-far	0	0.2
# ::edge	name	op1	syria	0.0.0.1.0.0	0.0.0.1.0.0.0
# ::edge	thing	topic	weapon	0.0	0.0.0
# ::edge	war	mod	civil	0.0.0.1	0.0.0.1.1
# ::edge	war	mod	country	0.0.0.1	0.0.0.1.0
# ::edge	weapon	location	war	0.0.0	0.0.0.1
# ::edge	weapon	mod	chemical	0.0.0	0.0.0.0
(MRPNode-0 / know-01 :ARG1 (MRPNode-1 / thing :topic (MRPNode-2 / weapon :mod (MRPNode-3 / chemical) :location (MRPNode-4 / war :mod (MRPNode-5 / country :name (MRPNode-6 / name :op1 syria)) :mod (MRPNode-7 / civil)))) :ARG0 (MRPNode-8 / we) :time (MRPNode-9 / so-far))

# ::id 565
# ::snt UK's Cameron: Syria, Russia must show chemical arms proposal is genuine
# ::tok UK 's Cameron : Syria , Russia must show chemical arms proposal is genuine
# ::alignments 0-1|0.0.0.1.0+0.0.0.1.0.0+0.0.0.1.0.0.0 2-3|0.1+0.1.0+0.1.0.0+0.1.0.1 4-5|0.0.0.1.1+0.0.0.1.1.0+0.0.0.1.1.0.0 6-7|0.1.0.1.0+0.1.0.1.0.0 8-9|0.0.0 9-10|0.0.0.0.0.0.0 10-11|0.0.0.0.0.0 11-12|0.0.0.0.0 13-14|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:40.995867 ::parser eager_oracle ::smatch 0.7076923076923075 ::n_actions 39
# ::node	0	say-01	
# ::node	0.0	obligate-01	
# ::node	0.0.0	show-01	8-9
# ::node	0.0.0.0	genuine	13-14
# ::node	0.0.0.0.0	propose-01	11-12
# ::node	0.0.0.0.0.0	arm	10-11
# ::node	0.0.0.0.0.0.0	chemical	9-10
# ::node	0.0.0.1	and	
# ::node	0.0.0.1.0	country	0-1
# ::node	0.0.0.1.0.0	name	0-1
# ::node	0.0.0.1.0.0.0	uk	0-1
# ::node	0.0.0.1.1	country	4-5
# ::node	0.0.0.1.1.0	name	4-5
# ::node	0.0.0.1.1.0.0	syria	4-5
# ::node	0.1	person	2-3
# ::node	0.1.0	name	2-3
# ::node	0.1.0.0	cameron	2-3
# ::node	0.1.0.1	country	2-3
# ::node	0.1.0.1.0	name	6-7
# ::node	0.1.0.1.0.0	russia	6-7
# ::root	0	say-01
# ::edge	and	op1	country	0.0.0.1	0.0.0.1.0
# ::edge	and	op2	country	0.0.0.1	0.0.0.1.1
# ::edge	arm	mod	chemical	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	country	name	name	0.0.0.1.0	0.0.0.1.0.0
# ::edge	country	name	name	0.0.0.1.1	0.0.0.1.1.0
# ::edge	country	name	name	0.1.0.1	0.1.0.1.0
# ::edge	genuine	domain	propose-01	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	cameron	0.1.0	0.1.0.0
# ::edge	name	op1	country	0.1.0	0.1.0.1
# ::edge	name	op1	russia	0.1.0.1.0	0.1.0.1.0.0
# ::edge	name	op1	syria	0.0.0.1.1.0	0.0.0.1.1.0.0
# ::edge	name	op1	uk	0.0.0.1.0.0	0.0.0.1.0.0.0
# ::edge	obligate-01	ARG1	and	0.0	0.0.0.1
# ::edge	obligate-01	ARG1	show-01	0.0	0.0.0
# ::edge	person	name	name	0.1	0.1.0
# ::edge	propose-01	ARG1	arm	0.0.0.0.0	0.0.0.0.0.0
# ::edge	say-01	ARG1	obligate-01	0	0.0
# ::edge	say-01	ARG2	person	0	0.1
# ::edge	show-01	ARG0	and	0.0.0	0.0.0.1
# ::edge	show-01	ARG1	genuine	0.0.0	0.0.0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / obligate-01 :ARG1 (MRPNode-2 / show-01 :ARG1 (MRPNode-3 / genuine :domain (MRPNode-4 / propose-01 :ARG1 (MRPNode-5 / arm :mod (MRPNode-6 / chemical)))) :ARG0 (MRPNode-7 / and :op1 (MRPNode-8 / country :name (MRPNode-9 / name :op1 uk)) :op2 (MRPNode-10 / country :name (MRPNode-11 / name :op1 syria)))) :ARG1 MRPNode-7) :ARG2 (MRPNode-12 / person :name (MRPNode-13 / name :op1 cameron :op1 (MRPNode-14 / country :name (MRPNode-15 / name :op1 russia)))))

# ::id 566
# ::snt Kremlin: Putin yet to decide on using Russian troops in Ukraine
# ::tok Kremlin : Putin yet to decide on using Russian troops in Ukraine
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 2-3|0.0.1+0.0.1.0+0.0.1.0.0 3-4|0.0.2 5-6|0.0 7-8|0.0.0 9-10|0.0.0.0 11-12|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.006515 ::parser eager_oracle ::smatch 0.8749999999999999 ::n_actions 34
# ::node	0	say-01	
# ::node	0.0	decide-01	5-6
# ::node	0.0.0	use-01	7-8
# ::node	0.0.0.0	troop	9-10
# ::node	0.0.0.1	country	11-12
# ::node	0.0.0.1.0	name	11-12
# ::node	0.0.0.1.0.0	ukraine	11-12
# ::node	0.0.1	person	2-3
# ::node	0.0.1.0	name	2-3
# ::node	0.0.1.0.0	putin	2-3
# ::node	0.0.2	yet	3-4
# ::node	0.1	government-organization	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	kremlin	0-1
# ::root	0	say-01
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	decide-01	ARG0	person	0.0	0.0.1
# ::edge	decide-01	ARG1	use-01	0.0	0.0.0
# ::edge	decide-01	time	yet	0.0	0.0.2
# ::edge	government-organization	name	name	0.1	0.1.0
# ::edge	name	op1	kremlin	0.1.0	0.1.0.0
# ::edge	name	op1	putin	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	ukraine	0.0.0.1.0	0.0.0.1.0.0
# ::edge	person	name	name	0.0.1	0.0.1.0
# ::edge	say-01	ARG0	government-organization	0	0.1
# ::edge	say-01	ARG1	decide-01	0	0.0
# ::edge	use-01	ARG1	troop	0.0.0	0.0.0.0
# ::edge	use-01	location	country	0.0.0	0.0.0.1
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / decide-01 :ARG1 (MRPNode-2 / use-01 :ARG1 (MRPNode-3 / troop) :location (MRPNode-4 / country :name (MRPNode-5 / name :op1 ukraine))) :ARG0 (MRPNode-6 / person :name (MRPNode-7 / name :op1 putin)) :time (MRPNode-8 / yet)) :ARG0 (MRPNode-9 / government-organization :name (MRPNode-10 / name :op1 kremlin)))

# ::id 567
# ::snt Singapore shares open 0.19% higher on Thursday
# ::tok Singapore shares open 0.19 % higher on Thursday
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 1-2|0.0 2-3|0 3-4|0.0.1.0 4-5|0.0.1 5-6|0.1 7-8|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.012109 ::parser eager_oracle ::smatch 0.7027027027027029 ::n_actions 31
# ::node	0	open-01	2-3
# ::node	0.0	share-01	1-2
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	singapore	0-1
# ::node	0.0.1	percentage-entity	4-5
# ::node	0.0.1.0	0.19	3-4
# ::node	0.1	high-02	5-6
# ::node	0.1.0	have-degree-91	
# ::node	0.1.0.0	more	
# ::node	0.2	date-entity	
# ::node	0.2.0	thursday	7-8
# ::root	0	open-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	date-entity	weekday	thursday	0.2	0.2.0
# ::edge	have-degree-91	ARG3	more	0.1.0	0.1.0.0
# ::edge	high-02	ARG2-of	have-degree-91	0.1	0.1.0
# ::edge	name	op1	singapore	0.0.0.0	0.0.0.0.0
# ::edge	open-01	ARG1	share-01	0	0.0
# ::edge	open-01	time	date-entity	0	0.2
# ::edge	open-01	time	high-02	0	0.1
# ::edge	percentage-entity	value	0.19	0.0.1	0.0.1.0
# ::edge	share-01	ARG0	country	0.0	0.0.0
# ::edge	share-01	quant	percentage-entity	0.0	0.0.1
(MRPNode-0 / open-01 :ARG1 (MRPNode-1 / share-01 :ARG0 (MRPNode-2 / country :name (MRPNode-3 / name :op1 singapore)) :quant (MRPNode-4 / percentage-entity :value 0.19)) :time (MRPNode-5 / high-02 :ARG2-of (MRPNode-6 / have-degree-91 :ARG3 (MRPNode-7 / more))) :time (MRPNode-8 / date-entity :weekday (MRPNode-9 / thursday)))

# ::id 568
# ::snt Headlines in several Iranian newspapers on Oct 19
# ::tok Headlines in several Iranian newspapers on Oct 19
# ::alignments 0-1|0+0.0 2-3|0.0.0.0 3-4|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 4-5|0.0.0 7-8|0.0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.024003 ::parser eager_oracle ::smatch 0.8000000000000002 ::n_actions 28
# ::node	0	thing	0-1
# ::node	0.0	headline-01	0-1
# ::node	0.0.0	newspaper	4-5
# ::node	0.0.0.0	several	2-3
# ::node	0.0.0.1	country	3-4
# ::node	0.0.0.1.0	name	3-4
# ::node	0.0.0.1.0.0	iran	3-4
# ::node	0.0.1	date-entity	
# ::node	0.0.1.0	10	
# ::node	0.0.1.1	19	7-8
# ::root	0	thing
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	date-entity	day	19	0.0.1	0.0.1.1
# ::edge	date-entity	month	10	0.0.1	0.0.1.0
# ::edge	headline-01	time	date-entity	0.0	0.0.1
# ::edge	headline-01	time	newspaper	0.0	0.0.0
# ::edge	name	op1	iran	0.0.0.1.0	0.0.0.1.0.0
# ::edge	newspaper	mod	country	0.0.0	0.0.0.1
# ::edge	newspaper	mod	several	0.0.0	0.0.0.0
# ::edge	thing	ARG2-of	headline-01	0	0.0
(MRPNode-0 / thing :ARG2-of (MRPNode-1 / headline-01 :time (MRPNode-2 / newspaper :mod (MRPNode-3 / several) :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 iran))) :time (MRPNode-6 / date-entity :month 10 :day 19)))

# ::id 569
# ::snt Bombings kill 19 people in Iraq
# ::tok Bombings kill 19 people in Iraq
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.0 3-4|0.0 5-6|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.027238 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	kill-01	1-2
# ::node	0.0	person	3-4
# ::node	0.0.0	19	2-3
# ::node	0.1	bomb-01	0-1
# ::node	0.2	country	5-6
# ::node	0.2.0	name	5-6
# ::node	0.2.0.0	iraq	5-6
# ::root	0	kill-01
# ::edge	country	name	name	0.2	0.2.0
# ::edge	kill-01	ARG0	bomb-01	0	0.1
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	location	country	0	0.2
# ::edge	name	op1	iraq	0.2.0	0.2.0.0
# ::edge	person	quant	19	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 19) :ARG0 (MRPNode-2 / bomb-01) :location (MRPNode-3 / country :name (MRPNode-4 / name :op1 iraq)))

# ::id 570
# ::snt 10 Things to Know for Thursday
# ::tok 10 Things to Know for Thursday
# ::alignments 0-1|0.0 1-2|0 3-4|0.1 5-6|0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.032983 ::parser eager_oracle ::smatch 0.8750000000000001 ::n_actions 20
# ::node	0	thing	1-2
# ::node	0.0	10	0-1
# ::node	0.1	know-01	3-4
# ::node	0.1.0	date-entity	5-6
# ::node	0.1.0.0	thursday	5-6
# ::root	0	thing
# ::edge	date-entity	weekday	thursday	0.1.0	0.1.0.0
# ::edge	know-01	time	date-entity	0.1	0.1.0
# ::edge	thing	ARG1-of	know-01	0	0.1
# ::edge	thing	quant	10	0	0.0
(MRPNode-0 / thing :quant 10 :ARG1-of (MRPNode-1 / know-01 :time (MRPNode-2 / date-entity :weekday (MRPNode-3 / thursday))))

# ::id 571
# ::snt How the Dow Jones Industrial Average Fared on Monday
# ::tok How the Dow Jones Industrial Average Fared on Monday
# ::alignments 2-4|0.1+0.1.0+0.1.0.0+0.1.0.1 4-5|0.2 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.036614 ::parser eager_oracle ::smatch 0.5 ::n_actions 18
# ::node	0	rate-01	
# ::node	0.0	date-entity	
# ::node	0.0.0	monday	8-9
# ::node	0.1	company	2-4
# ::node	0.1.0	name	2-4
# ::node	0.1.0.0	dow	2-4
# ::node	0.1.0.1	jones	2-4
# ::node	0.2	industry	4-5
# ::root	0	rate-01
# ::edge	company	name	name	0.1	0.1.0
# ::edge	date-entity	weekday	monday	0.0	0.0.0
# ::edge	name	op1	dow	0.1.0	0.1.0.0
# ::edge	name	op2	jones	0.1.0	0.1.0.1
# ::edge	rate-01	ARG1	company	0	0.1
# ::edge	rate-01	ARG1	date-entity	0	0.0
# ::edge	rate-01	ARG3	industry	0	0.2
(MRPNode-0 / rate-01 :ARG1 (MRPNode-1 / date-entity :weekday (MRPNode-2 / monday)) :ARG1 (MRPNode-3 / company :name (MRPNode-4 / name :op1 dow :op2 jones)) :ARG3 (MRPNode-5 / industry))

# ::id 572
# ::snt UN takes over peacekeeping in Central African Republic
# ::tok UN takes over peacekeeping in Central African Republic
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 3-4|0.2.0 5-8|0.0+0.0.0+0.0.0.0+0.0.0.1+0.0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:41.041083 ::parser eager_oracle ::smatch 0.8750000000000001 ::n_actions 21
# ::node	0	take-over-12	1-2
# ::node	0.0	country	5-8
# ::node	0.0.0	name	5-8
# ::node	0.0.0.0	central	5-8
# ::node	0.0.0.1	african	5-8
# ::node	0.0.0.2	republic	5-8
# ::node	0.1	organization	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	un	0-1
# ::node	0.2	keep-01	
# ::node	0.2.0	peace	3-4
# ::root	0	take-over-12
# ::edge	country	name	name	0.0	0.0.0
# ::edge	keep-01	ARG1	peace	0.2	0.2.0
# ::edge	name	op1	central	0.0.0	0.0.0.0
# ::edge	name	op1	un	0.1.0	0.1.0.0
# ::edge	name	op2	african	0.0.0	0.0.0.1
# ::edge	name	op3	republic	0.0.0	0.0.0.2
# ::edge	organization	name	name	0.1	0.1.0
# ::edge	take-over-12	ARG0	organization	0	0.1
# ::edge	take-over-12	ARG1	country	0	0.0
# ::edge	take-over-12	ARG1	keep-01	0	0.2
(MRPNode-0 / take-over-12 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 central :op2 african :op3 republic)) :ARG0 (MRPNode-3 / organization :name (MRPNode-4 / name :op1 un)) :ARG1 (MRPNode-5 / keep-01 :ARG1 (MRPNode-6 / peace)))

# ::id 573
# ::snt Iraq suicide bomber kills at least 12
# ::tok Iraq suicide bomber kills at least 12
# ::alignments 0-1|0.1+0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.0.0.0 2-3|0.0+0.0.0 3-4|0 6-7|0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.045986 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 32
# ::node	0	kill-01	3-4
# ::node	0.0	person	2-3
# ::node	0.0.0	bomb-01	2-3
# ::node	0.0.0.0	suicide	1-2
# ::node	0.0.1	at-least	
# ::node	0.0.1.0	12	6-7
# ::node	0.1	person	0-1
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	iraq	0-1
# ::root	0	kill-01
# ::edge	at-least	op1	12	0.0.1	0.0.1.0
# ::edge	bomb-01	mod	suicide	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	ARG1	person	0	0.1
# ::edge	name	op1	iraq	0.1.0.0	0.1.0.0.0
# ::edge	person	ARG0-of	bomb-01	0.0	0.0.0
# ::edge	person	mod	country	0.1	0.1.0
# ::edge	person	quant	at-least	0.0	0.0.1
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / bomb-01 :mod (MRPNode-3 / suicide)) :quant (MRPNode-4 / at-least :op1 12)) :ARG1 (MRPNode-5 / person :mod (MRPNode-6 / country :name (MRPNode-7 / name :op1 iraq))))

# ::id 574
# ::snt UN Security Council urges Yemen's Houthis to end...
# ::tok UN Security Council urges Yemen 's Houthis to end ...
# ::alignments 0-3|0.0+0.0.0+0.0.0.0+0.0.0.1+0.0.0.2 3-4|0 4-5|0.1.0.1+0.1.0.1.0+0.1.0.1.0.0 6-7|0.1.0+0.1.0.0+0.1.0.0.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.052271 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	urge-01	3-4
# ::node	0.0	organization	0-3
# ::node	0.0.0	name	0-3
# ::node	0.0.0.0	un	0-3
# ::node	0.0.0.1	security	0-3
# ::node	0.0.0.2	council	0-3
# ::node	0.1	end-01	8-9
# ::node	0.1.0	ethnic-group	6-7
# ::node	0.1.0.0	name	6-7
# ::node	0.1.0.0.0	houthis	6-7
# ::node	0.1.0.1	country	4-5
# ::node	0.1.0.1.0	name	4-5
# ::node	0.1.0.1.0.0	yemen	4-5
# ::root	0	urge-01
# ::edge	country	name	name	0.1.0.1	0.1.0.1.0
# ::edge	end-01	ARG1	ethnic-group	0.1	0.1.0
# ::edge	ethnic-group	name	name	0.1.0	0.1.0.0
# ::edge	ethnic-group	poss	country	0.1.0	0.1.0.1
# ::edge	name	op1	houthis	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	un	0.0.0	0.0.0.0
# ::edge	name	op1	yemen	0.1.0.1.0	0.1.0.1.0.0
# ::edge	name	op2	security	0.0.0	0.0.0.1
# ::edge	name	op3	council	0.0.0	0.0.0.2
# ::edge	organization	name	name	0.0	0.0.0
# ::edge	urge-01	ARG1	organization	0	0.0
# ::edge	urge-01	ARG2	end-01	0	0.1
(MRPNode-0 / urge-01 :ARG1 (MRPNode-1 / organization :name (MRPNode-2 / name :op1 un :op2 security :op3 council)) :ARG2 (MRPNode-3 / end-01 :ARG1 (MRPNode-4 / ethnic-group :name (MRPNode-5 / name :op1 houthis) :poss (MRPNode-6 / country :name (MRPNode-7 / name :op1 yemen)))))

# ::id 575
# ::snt 6 killed in Afghan capital mosque attack
# ::tok 6 killed in Afghan capital mosque attack
# ::alignments 0-1|0.0+0.0.0 1-2|0 2-3|0.1 4-5|0.1.0.0.0+0.1.0.0.0.1 5-6|0.1.0.0 6-7|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.058866 ::parser eager_oracle ::smatch 0.8571428571428571 ::n_actions 35
# ::node	0	kill-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	6	0-1
# ::node	0.1	cause-01	2-3
# ::node	0.1.0	attack-01	6-7
# ::node	0.1.0.0	mosque	5-6
# ::node	0.1.0.0.0	have-org-role-91	4-5
# ::node	0.1.0.0.0.0	country	3-4
# ::node	0.1.0.0.0.0.0	name	3-4
# ::node	0.1.0.0.0.0.0.0	afghanistan	3-4
# ::node	0.1.0.0.0.1	capital	4-5
# ::root	0	kill-01
# ::edge	attack-01	ARG0	mosque	0.1.0	0.1.0.0
# ::edge	cause-01	ARG0	attack-01	0.1	0.1.0
# ::edge	country	name	name	0.1.0.0.0.0	0.1.0.0.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.0.0.0	0.1.0.0.0.0
# ::edge	have-org-role-91	ARG2	capital	0.1.0.0.0	0.1.0.0.0.1
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	ARG1-of	cause-01	0	0.1
# ::edge	mosque	ARG0-of	have-org-role-91	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	afghanistan	0.1.0.0.0.0.0	0.1.0.0.0.0.0.0
# ::edge	person	quant	6	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 6) :ARG1-of (MRPNode-2 / cause-01 :ARG0 (MRPNode-3 / attack-01 :ARG0 (MRPNode-4 / mosque :ARG0-of (MRPNode-5 / have-org-role-91 :ARG1 (MRPNode-6 / country :name (MRPNode-7 / name :op1 afghanistan)) :ARG2 (MRPNode-8 / capital))))))

# ::id 576
# ::snt Rev.'s Early Reads: Sept. 3rd, 2015
# ::tok Rev. 's Early Reads : Sept. 3rd , 2015
# ::alignments 2-3|0.1 3-4|0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.071501 ::parser eager_oracle ::smatch 0.5 ::n_actions 17
# ::node	0	read-01	3-4
# ::node	0.0	person	
# ::node	0.0.0	favor-01	
# ::node	0.1	early	2-3
# ::node	0.2	date-entity	
# ::node	0.2.0	9	
# ::node	0.2.1	3	
# ::root	0	read-01
# ::edge	date-entity	day	3	0.2	0.2.1
# ::edge	date-entity	month	9	0.2	0.2.0
# ::edge	person	ARG0-of	favor-01	0.0	0.0.0
# ::edge	read-01	ARG0	person	0	0.0
# ::edge	read-01	time	date-entity	0	0.2
# ::edge	read-01	time	early	0	0.1
(MRPNode-0 / read-01 :ARG0 (MRPNode-1 / person :ARG0-of (MRPNode-2 / favor-01)) :time (MRPNode-3 / early) :time (MRPNode-4 / date-entity :month 9 :day 3))

# ::id 577
# ::snt Markets Live: China drags
# ::tok Markets Live : China drags
# ::alignments 0-2|0.0+0.0.0+0.0.0.0+0.0.0.1 3-4|0.1+0.1.0+0.1.0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.074273 ::parser eager_oracle ::smatch 0.9230769230769231 ::n_actions 16
# ::node	0	drag-01	4-5
# ::node	0.0	broadcast-program	0-2
# ::node	0.0.0	name	0-2
# ::node	0.0.0.0	market	0-2
# ::node	0.0.0.1	live	0-2
# ::node	0.1	country	3-4
# ::node	0.1.0	name	3-4
# ::node	0.1.0.0	china	3-4
# ::root	0	drag-01
# ::edge	broadcast-program	name	name	0.0	0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	drag-01	ARG0	broadcast-program	0	0.0
# ::edge	drag-01	ARG1	country	0	0.1
# ::edge	name	op1	china	0.1.0	0.1.0.0
# ::edge	name	op1	market	0.0.0	0.0.0.0
# ::edge	name	op2	live	0.0.0	0.0.0.1
(MRPNode-0 / drag-01 :ARG0 (MRPNode-1 / broadcast-program :name (MRPNode-2 / name :op1 market :op2 live)) :ARG1 (MRPNode-3 / country :name (MRPNode-4 / name :op1 china)))

# ::id 578
# ::snt Palestinian Shot by Israeli Police in East Jerusalem Dies
# ::tok Palestinian Shot by Israeli Police in East Jerusalem Dies
# ::alignments 0-1|0.2+0.2.0+0.2.0.0 1-2|0 3-4|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 4-5|0.0+0.0.0+0.0.0.0 6-8|0.1+0.1.0+0.1.0.0+0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.082637 ::parser eager_oracle ::smatch 0.9166666666666666 ::n_actions 35
# ::node	0	shoot-02	1-2
# ::node	0.0	person	4-5
# ::node	0.0.0	have-org-role-91	4-5
# ::node	0.0.0.0	police	4-5
# ::node	0.0.0.0.0	country	3-4
# ::node	0.0.0.0.0.0	name	3-4
# ::node	0.0.0.0.0.0.0	israel	3-4
# ::node	0.1	city	6-8
# ::node	0.1.0	name	6-8
# ::node	0.1.0.0	east	6-8
# ::node	0.1.0.1	jerusalem	6-8
# ::node	0.2	country	0-1
# ::node	0.2.0	name	0-1
# ::node	0.2.0.0	palestine	0-1
# ::root	0	shoot-02
# ::edge	city	name	name	0.1	0.1.0
# ::edge	country	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	country	name	name	0.2	0.2.0
# ::edge	have-org-role-91	ARG1	police	0.0.0	0.0.0.0
# ::edge	name	op1	east	0.1.0	0.1.0.0
# ::edge	name	op1	israel	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op1	palestine	0.2.0	0.2.0.0
# ::edge	name	op2	jerusalem	0.1.0	0.1.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.0
# ::edge	police	mod	country	0.0.0.0	0.0.0.0.0
# ::edge	shoot-02	ARG1	person	0	0.0
# ::edge	shoot-02	ARG3	country	0	0.2
# ::edge	shoot-02	location	city	0	0.1
(MRPNode-0 / shoot-02 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-org-role-91 :ARG1 (MRPNode-3 / police :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 israel))))) :location (MRPNode-6 / city :name (MRPNode-7 / name :op1 east :op2 jerusalem)) :ARG3 (MRPNode-8 / country :name (MRPNode-9 / name :op1 palestine)))

# ::id 579
# ::snt UK 'concern' over Hong Kong protests
# ::tok UK ' concern ' over Hong Kong protests
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 2-3|0 5-7|0.1.0+0.1.0.0+0.1.0.0.0+0.1.0.0.1 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.086468 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	concern-01	2-3
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	uk	0-1
# ::node	0.1	protest-01	7-8
# ::node	0.1.0	city	5-7
# ::node	0.1.0.0	name	5-7
# ::node	0.1.0.0.0	hong	5-7
# ::node	0.1.0.0.1	kong	5-7
# ::root	0	concern-01
# ::edge	city	name	name	0.1.0	0.1.0.0
# ::edge	concern-01	ARG0	protest-01	0	0.1
# ::edge	concern-01	ARG1	country	0	0.0
# ::edge	country	name	name	0.0	0.0.0
# ::edge	name	op1	hong	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	uk	0.0.0	0.0.0.0
# ::edge	name	op2	kong	0.1.0.0	0.1.0.0.1
# ::edge	protest-01	ARG0	city	0.1	0.1.0
(MRPNode-0 / concern-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 uk)) :ARG0 (MRPNode-3 / protest-01 :ARG0 (MRPNode-4 / city :name (MRPNode-5 / name :op1 hong :op2 kong))))

# ::id 580
# ::snt Russian roulette in Syria
# ::tok Russian roulette in Syria
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 3-4|0.0+0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.088718 ::parser eager_oracle ::smatch 0.9166666666666666 ::n_actions 15
# ::node	0	roulette	1-2
# ::node	0.0	country	3-4
# ::node	0.0.0	name	3-4
# ::node	0.0.0.0	syria	3-4
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	russia	0-1
# ::root	0	roulette
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	name	op1	russia	0.1.0	0.1.0.0
# ::edge	name	op1	syria	0.0.0	0.0.0.0
# ::edge	roulette	mod	country	0	0.0
# ::edge	roulette	mod	country	0	0.1
(MRPNode-0 / roulette :mod (MRPNode-1 / country :name (MRPNode-2 / name :op1 syria)) :mod (MRPNode-3 / country :name (MRPNode-4 / name :op1 russia)))

# ::id 581
# ::snt Guineans Go to the Polls in Presidential Elections
# ::tok Guineans Go to the Polls in Presidential Elections
# ::alignments 1-2|0 4-5|0.2 6-7|0.1.0+0.1.0.0+0.1.0.0.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.095028 ::parser eager_oracle ::smatch 0.7741935483870968 ::n_actions 30
# ::node	0	go-01	1-2
# ::node	0.0	person	
# ::node	0.0.0	country	
# ::node	0.0.0.0	name	
# ::node	0.0.0.0.0	afghanistan	
# ::node	0.1	elect-01	7-8
# ::node	0.1.0	person	6-7
# ::node	0.1.0.0	have-org-role-91	6-7
# ::node	0.1.0.0.0	president	6-7
# ::node	0.2	poll-01	4-5
# ::root	0	go-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	elect-01	ARG2	person	0.1	0.1.0
# ::edge	go-01	ARG1	person	0	0.0
# ::edge	go-01	ARG4	elect-01	0	0.1
# ::edge	go-01	ARG4	poll-01	0	0.2
# ::edge	have-org-role-91	ARG2	president	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	afghanistan	0.0.0.0	0.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1.0	0.1.0.0
# ::edge	person	mod	country	0.0	0.0.0
(MRPNode-0 / go-01 :ARG1 (MRPNode-1 / person :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 afghanistan))) :ARG4 (MRPNode-4 / elect-01 :ARG2 (MRPNode-5 / person :ARG0-of (MRPNode-6 / have-org-role-91 :ARG2 (MRPNode-7 / president)))) :ARG4 (MRPNode-8 / poll-01))

# ::id 582
# ::snt Prince William of Britain arrives in Beijing
# ::tok Prince William of Britain arrives in Beijing
# ::alignments 0-2|0.0+0.0.0+0.0.0.0+0.0.0.1 3-4|0.0.1+0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 4-5|0 6-7|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.100122 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	arrive-01	4-5
# ::node	0.0	person	0-2
# ::node	0.0.0	name	0-2
# ::node	0.0.0.0	prince	0-2
# ::node	0.0.0.1	william	0-2
# ::node	0.0.1	have-org-role-91	3-4
# ::node	0.0.1.0	country	3-4
# ::node	0.0.1.0.0	name	3-4
# ::node	0.0.1.0.0.0	britain	3-4
# ::node	0.1	city	6-7
# ::node	0.1.0	name	6-7
# ::node	0.1.0.0	beijing	6-7
# ::root	0	arrive-01
# ::edge	arrive-01	ARG1	person	0	0.0
# ::edge	arrive-01	ARG4	city	0	0.1
# ::edge	city	name	name	0.1	0.1.0
# ::edge	country	name	name	0.0.1.0	0.0.1.0.0
# ::edge	have-org-role-91	ARG1	country	0.0.1	0.0.1.0
# ::edge	name	op1	beijing	0.1.0	0.1.0.0
# ::edge	name	op1	britain	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	prince	0.0.0	0.0.0.0
# ::edge	name	op2	william	0.0.0	0.0.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.1
# ::edge	person	name	name	0.0	0.0.0
(MRPNode-0 / arrive-01 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 prince :op2 william) :ARG0-of (MRPNode-3 / have-org-role-91 :ARG1 (MRPNode-4 / country :name (MRPNode-5 / name :op1 britain)))) :ARG4 (MRPNode-6 / city :name (MRPNode-7 / name :op1 beijing)))

# ::id 583
# ::snt Vice President of Bolivia to visit China
# ::tok Vice President of Bolivia to visit China
# ::alignments 0-1|0.1.0.1.0 1-2|0.1+0.1.0+0.1.0.1 3-4|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 5-6|0 6-7|0.0+0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.107088 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	visit-01	5-6
# ::node	0.0	country	6-7
# ::node	0.0.0	name	6-7
# ::node	0.0.0.0	china	6-7
# ::node	0.1	person	1-2
# ::node	0.1.0	have-org-role-91	1-2
# ::node	0.1.0.0	country	3-4
# ::node	0.1.0.0.0	name	3-4
# ::node	0.1.0.0.0.0	bolivia	3-4
# ::node	0.1.0.1	president	1-2
# ::node	0.1.0.1.0	vice	0-1
# ::root	0	visit-01
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	president	0.1.0	0.1.0.1
# ::edge	name	op1	bolivia	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op1	china	0.0.0	0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	president	mod	vice	0.1.0.1	0.1.0.1.0
# ::edge	visit-01	ARG0	person	0	0.1
# ::edge	visit-01	ARG1	country	0	0.0
(MRPNode-0 / visit-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 china)) :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-org-role-91 :ARG1 (MRPNode-5 / country :name (MRPNode-6 / name :op1 bolivia)) :ARG2 (MRPNode-7 / president :mod (MRPNode-8 / vice)))))

# ::id 584
# ::snt Iran, Tajikistan sign cooperation agreement
# ::tok Iran , Tajikistan sign cooperation agreement
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 2-3|0.1.1+0.1.1.0+0.1.1.0.0 3-4|0 4-5|0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.111358 ::parser eager_oracle ::smatch 0.823529411764706 ::n_actions 21
# ::node	0	sign-02	3-4
# ::node	0.0	agree-01	5-6
# ::node	0.0.0	cooperate-01	4-5
# ::node	0.1	and	
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	iran	0-1
# ::node	0.1.1	country	2-3
# ::node	0.1.1.0	name	2-3
# ::node	0.1.1.0.0	tajikistan	2-3
# ::root	0	sign-02
# ::edge	agree-01	ARG1	cooperate-01	0.0	0.0.0
# ::edge	and	op1	country	0.1	0.1.0
# ::edge	and	op2	country	0.1	0.1.1
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	name	op1	iran	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	tajikistan	0.1.1.0	0.1.1.0.0
# ::edge	sign-02	ARG0	and	0	0.1
# ::edge	sign-02	ARG1	agree-01	0	0.0
(MRPNode-0 / sign-02 :ARG1 (MRPNode-1 / agree-01 :ARG1 (MRPNode-2 / cooperate-01)) :ARG0 (MRPNode-3 / and :op1 (MRPNode-4 / country :name (MRPNode-5 / name :op1 iran)) :op2 (MRPNode-6 / country :name (MRPNode-7 / name :op1 tajikistan))))

# ::id 585
# ::snt China disagrees with U.S. sanctions program on overseas cyber attackers
# ::tok China disagrees with U.S. sanctions program on overseas cyber attackers
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 3-4|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 4-5|0.1.0 5-6|0.1 7-8|0.1.0.1.1 8-9|0.1.0.1.0 9-10|0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.120117 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	disagree-01	1-2
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	china	0-1
# ::node	0.1	program	5-6
# ::node	0.1.0	sanction-02	4-5
# ::node	0.1.0.0	country	3-4
# ::node	0.1.0.0.0	name	3-4
# ::node	0.1.0.0.0.0	u.s.	3-4
# ::node	0.1.0.1	attack-01	9-10
# ::node	0.1.0.1.0	cyber	8-9
# ::node	0.1.0.1.1	overseas	7-8
# ::root	0	disagree-01
# ::edge	attack-01	location	overseas	0.1.0.1	0.1.0.1.1
# ::edge	attack-01	mod	cyber	0.1.0.1	0.1.0.1.0
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	disagree-01	ARG1	country	0	0.0
# ::edge	disagree-01	ARG2	program	0	0.1
# ::edge	name	op1	china	0.0.0	0.0.0.0
# ::edge	name	op1	u.s.	0.1.0.0.0	0.1.0.0.0.0
# ::edge	program	mod	sanction-02	0.1	0.1.0
# ::edge	sanction-02	ARG1	attack-01	0.1.0	0.1.0.1
# ::edge	sanction-02	ARG1	country	0.1.0	0.1.0.0
(MRPNode-0 / disagree-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 china)) :ARG2 (MRPNode-3 / program :mod (MRPNode-4 / sanction-02 :ARG1 (MRPNode-5 / country :name (MRPNode-6 / name :op1 u.s.)) :ARG1 (MRPNode-7 / attack-01 :mod (MRPNode-8 / cyber) :location (MRPNode-9 / overseas)))))

# ::id 586
# ::snt 12 Dead, Despite Cease-fire in East Ukraine
# ::tok 12 Dead , Despite Cease - fire in East Ukraine
# ::alignments 0-1|0.0.0+0.0.0.0 4-5|0.1.0 6-7|0.1 8-9|0.1.1.1 9-10|0.1.1+0.1.1.0+0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.125718 ::parser eager_oracle ::smatch 0.75 ::n_actions 30
# ::node	0	have-concession-91	
# ::node	0.0	die-01	
# ::node	0.0.0	person	0-1
# ::node	0.0.0.0	12	0-1
# ::node	0.1	fire-01	6-7
# ::node	0.1.0	cease-01	4-5
# ::node	0.1.1	country	9-10
# ::node	0.1.1.0	name	9-10
# ::node	0.1.1.0.0	ukraine	9-10
# ::node	0.1.1.1	east	8-9
# ::root	0	have-concession-91
# ::edge	country	location	east	0.1.1	0.1.1.1
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	die-01	ARG1	person	0.0	0.0.0
# ::edge	fire-01	location	cease-01	0.1	0.1.0
# ::edge	fire-01	location	country	0.1	0.1.1
# ::edge	have-concession-91	ARG1	die-01	0	0.0
# ::edge	have-concession-91	ARG2	fire-01	0	0.1
# ::edge	name	op1	ukraine	0.1.1.0	0.1.1.0.0
# ::edge	person	quant	12	0.0.0	0.0.0.0
(MRPNode-0 / have-concession-91 :ARG1 (MRPNode-1 / die-01 :ARG1 (MRPNode-2 / person :quant 12)) :ARG2 (MRPNode-3 / fire-01 :location (MRPNode-4 / cease-01) :location (MRPNode-5 / country :name (MRPNode-6 / name :op1 ukraine) :location (MRPNode-7 / east))))

# ::id 587
# ::snt Mixed Progress Reported in Fight Against Islamic State
# ::tok Mixed Progress Reported in Fight Against Islamic State
# ::alignments 0-1|0.0.0 1-2|0.0 2-3|0 4-5|0.1 6-7|0.1.0.0.0+0.1.0.0.0.0+0.1.0.0.0.0.0 7-8|0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.131224 ::parser eager_oracle ::smatch 0.8749999999999999 ::n_actions 27
# ::node	0	report-01	2-3
# ::node	0.0	progress-01	1-2
# ::node	0.0.0	mix-01	0-1
# ::node	0.1	fight-01	4-5
# ::node	0.1.0	oppose-01	
# ::node	0.1.0.0	state	7-8
# ::node	0.1.0.0.0	religious-group	6-7
# ::node	0.1.0.0.0.0	name	6-7
# ::node	0.1.0.0.0.0.0	islamic	6-7
# ::root	0	report-01
# ::edge	fight-01	ARG1	oppose-01	0.1	0.1.0
# ::edge	name	op1	islamic	0.1.0.0.0.0	0.1.0.0.0.0.0
# ::edge	oppose-01	ARG1	state	0.1.0	0.1.0.0
# ::edge	progress-01	ARG1-of	mix-01	0.0	0.0.0
# ::edge	religious-group	name	name	0.1.0.0.0	0.1.0.0.0.0
# ::edge	report-01	ARG1	progress-01	0	0.0
# ::edge	report-01	location	fight-01	0	0.1
# ::edge	state	mod	religious-group	0.1.0.0	0.1.0.0.0
(MRPNode-0 / report-01 :ARG1 (MRPNode-1 / progress-01 :ARG1-of (MRPNode-2 / mix-01)) :location (MRPNode-3 / fight-01 :ARG1 (MRPNode-4 / oppose-01 :ARG1 (MRPNode-5 / state :mod (MRPNode-6 / religious-group :name (MRPNode-7 / name :op1 islamic))))))

# ::id 588
# ::snt Chinese military reaches out amid South China Sea tensions
# ::tok Chinese military reaches out amid South China Sea tensions
# ::alignments 1-2|0.0 2-3|0 5-6|0.2.0+0.2.0.0+0.2.0.1+0.2.0.2 6-7|0.0.0+0.0.0.0+0.0.0.0.0 7-8|0.2 8-9|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.136187 ::parser eager_oracle ::smatch 0.9411764705882353 ::n_actions 31
# ::node	0	reach-03	2-3
# ::node	0.0	military	1-2
# ::node	0.0.0	country	6-7
# ::node	0.0.0.0	name	6-7
# ::node	0.0.0.0.0	china	6-7
# ::node	0.1	tension	8-9
# ::node	0.2	sea	7-8
# ::node	0.2.0	name	5-6
# ::node	0.2.0.0	south	5-6
# ::node	0.2.0.1	china	5-6
# ::node	0.2.0.2	sea	5-6
# ::root	0	reach-03
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	military	mod	country	0.0	0.0.0
# ::edge	name	op1	china	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	south	0.2.0	0.2.0.0
# ::edge	name	op2	china	0.2.0	0.2.0.1
# ::edge	name	op3	sea	0.2.0	0.2.0.2
# ::edge	reach-03	ARG0	military	0	0.0
# ::edge	reach-03	ARG2	tension	0	0.1
# ::edge	reach-03	direction	sea	0	0.2
# ::edge	sea	name	name	0.2	0.2.0
(MRPNode-0 / reach-03 :ARG0 (MRPNode-1 / military :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 china))) :ARG2 (MRPNode-4 / tension) :direction (MRPNode-5 / sea :name (MRPNode-6 / name :op1 south :op2 china :op3 sea)))

# ::id 589
# ::snt Pro-Palestinian activists prepare flotilla to break Gaza blockade
# ::tok Pro - Palestinian activists prepare flotilla to break Gaza blockade
# ::alignments 2-3|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 3-4|0.1 4-5|0 5-6|0.0 7-8|0.2 8-9|0.2.0.0+0.2.0.0.0+0.2.0.0.0.0 9-10|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.144283 ::parser eager_oracle ::smatch 0.8636363636363636 ::n_actions 34
# ::node	0	prepare-02	4-5
# ::node	0.0	flotilla	5-6
# ::node	0.1	activist	3-4
# ::node	0.1.0	favor-01	
# ::node	0.1.0.0	country	2-3
# ::node	0.1.0.0.0	name	2-3
# ::node	0.1.0.0.0.0	palestine	2-3
# ::node	0.2	break-01	7-8
# ::node	0.2.0	blockade-01	9-10
# ::node	0.2.0.0	country-region	8-9
# ::node	0.2.0.0.0	name	8-9
# ::node	0.2.0.0.0.0	gaza	8-9
# ::root	0	prepare-02
# ::edge	activist	ARG0-of	favor-01	0.1	0.1.0
# ::edge	blockade-01	ARG1	country-region	0.2.0	0.2.0.0
# ::edge	break-01	ARG0	activist	0.2	0.1
# ::edge	break-01	ARG1	blockade-01	0.2	0.2.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	country-region	name	name	0.2.0.0	0.2.0.0.0
# ::edge	favor-01	ARG1	country	0.1.0	0.1.0.0
# ::edge	name	op1	gaza	0.2.0.0.0	0.2.0.0.0.0
# ::edge	name	op1	palestine	0.1.0.0.0	0.1.0.0.0.0
# ::edge	prepare-02	ARG0	activist	0	0.1
# ::edge	prepare-02	ARG1	flotilla	0	0.0
# ::edge	prepare-02	ARG2	break-01	0	0.2
(MRPNode-0 / prepare-02 :ARG1 (MRPNode-1 / flotilla) :ARG0 (MRPNode-2 / activist :ARG0-of (MRPNode-3 / favor-01 :ARG1 (MRPNode-4 / country :name (MRPNode-5 / name :op1 palestine)))) :ARG2 (MRPNode-6 / break-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-7 / blockade-01 :ARG1 (MRPNode-8 / country-region :name (MRPNode-9 / name :op1 gaza)))))

# ::id 590
# ::snt Heat flash detected at time of Russian airliner crash
# ::tok Heat flash detected at time of Russian airliner crash
# ::alignments 0-1|0.1.0 1-2|0.1 2-3|0 6-7|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 7-8|0.0.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.149787 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 29
# ::node	0	detect-01	2-3
# ::node	0.0	crash-01	8-9
# ::node	0.0.0	airliner	7-8
# ::node	0.0.0.0	country	6-7
# ::node	0.0.0.0.0	name	6-7
# ::node	0.0.0.0.0.0	russia	6-7
# ::node	0.1	flash-01	1-2
# ::node	0.1.0	heat	0-1
# ::root	0	detect-01
# ::edge	airliner	mod	country	0.0.0	0.0.0.0
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	crash-01	ARG1	airliner	0.0	0.0.0
# ::edge	detect-01	ARG1	crash-01	0	0.0
# ::edge	detect-01	ARG1	flash-01	0	0.1
# ::edge	flash-01	ARG1	heat	0.1	0.1.0
# ::edge	name	op1	russia	0.0.0.0.0	0.0.0.0.0.0
(MRPNode-0 / detect-01 :ARG1 (MRPNode-1 / crash-01 :ARG1 (MRPNode-2 / airliner :mod (MRPNode-3 / country :name (MRPNode-4 / name :op1 russia)))) :ARG1 (MRPNode-5 / flash-01 :ARG1 (MRPNode-6 / heat)))

# ::id 591
# ::snt Has Nasa discovered water on Mars?
# ::tok Has Nasa discovered water on Mars ?
# ::alignments 1-2|0.1+0.1.0+0.1.0.0 2-3|0 3-4|0.0 5-6|0.3+0.3.0+0.3.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.154069 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 21
# ::node	0	discover-01	2-3
# ::node	0.0	water	3-4
# ::node	0.1	person	1-2
# ::node	0.1.0	name	1-2
# ::node	0.1.0.0	nasa	1-2
# ::node	0.2	amr-unknown	
# ::node	0.3	planet	5-6
# ::node	0.3.0	name	5-6
# ::node	0.3.0.0	mars	5-6
# ::root	0	discover-01
# ::edge	discover-01	ARG0	person	0	0.1
# ::edge	discover-01	ARG1	water	0	0.0
# ::edge	discover-01	location	amr-unknown	0	0.2
# ::edge	discover-01	location	planet	0	0.3
# ::edge	name	op1	mars	0.3.0	0.3.0.0
# ::edge	name	op1	nasa	0.1.0	0.1.0.0
# ::edge	person	name	name	0.1	0.1.0
# ::edge	planet	name	name	0.3	0.3.0
(MRPNode-0 / discover-01 :ARG1 (MRPNode-1 / water) :ARG0 (MRPNode-2 / person :name (MRPNode-3 / name :op1 nasa)) :location (MRPNode-4 / amr-unknown) :location (MRPNode-5 / planet :name (MRPNode-6 / name :op1 mars)))

# ::id 592
# ::snt Media freedom at stake as Turkey fights rebels
# ::tok Media freedom at stake as Turkey fights rebels
# ::alignments 0-1|0.1.0 1-2|0.1 3-4|0 5-6|0.0.1+0.0.1.0+0.0.1.0.0 6-7|0.0 7-8|0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.159465 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	stake-01	3-4
# ::node	0.0	fight-01	6-7
# ::node	0.0.0	person	7-8
# ::node	0.0.0.0	rebel-01	7-8
# ::node	0.0.1	country	5-6
# ::node	0.0.1.0	name	5-6
# ::node	0.0.1.0.0	turkey	5-6
# ::node	0.1	free-04	1-2
# ::node	0.1.0	media	0-1
# ::root	0	stake-01
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	fight-01	ARG0	country	0.0	0.0.1
# ::edge	fight-01	ARG0	person	0.0	0.0.0
# ::edge	free-04	ARG1	media	0.1	0.1.0
# ::edge	name	op1	turkey	0.0.1.0	0.0.1.0.0
# ::edge	person	ARG0-of	rebel-01	0.0.0	0.0.0.0
# ::edge	stake-01	ARG1	free-04	0	0.1
# ::edge	stake-01	ARG2	fight-01	0	0.0
(MRPNode-0 / stake-01 :ARG2 (MRPNode-1 / fight-01 :ARG0 (MRPNode-2 / person :ARG0-of (MRPNode-3 / rebel-01)) :ARG0 (MRPNode-4 / country :name (MRPNode-5 / name :op1 turkey))) :ARG1 (MRPNode-6 / free-04 :ARG1 (MRPNode-7 / media)))

# ::id 593
# ::snt N Korea hit with new US sanctions
# ::tok N Korea hit with new US sanctions
# ::alignments 0-2|0.0.2+0.0.2.0+0.0.2.0.0+0.0.2.0.1 2-3|0 4-5|0.0.1 5-6|0.0.0+0.0.0.0+0.0.0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.164000 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	hit-01	2-3
# ::node	0.0	sanction-02	6-7
# ::node	0.0.0	country	5-6
# ::node	0.0.0.0	name	5-6
# ::node	0.0.0.0.0	us	5-6
# ::node	0.0.1	new-01	4-5
# ::node	0.0.2	country	0-2
# ::node	0.0.2.0	name	0-2
# ::node	0.0.2.0.0	n	0-2
# ::node	0.0.2.0.1	korea	0-2
# ::root	0	hit-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.0.2	0.0.2.0
# ::edge	hit-01	ARG0	country	0	0.0.2
# ::edge	hit-01	ARG1	sanction-02	0	0.0
# ::edge	name	op1	n	0.0.2.0	0.0.2.0.0
# ::edge	name	op1	us	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	korea	0.0.2.0	0.0.2.0.1
# ::edge	sanction-02	ARG0	country	0.0	0.0.0
# ::edge	sanction-02	ARG0	country	0.0	0.0.2
# ::edge	sanction-02	ARG1-of	new-01	0.0	0.0.1
(MRPNode-0 / hit-01 :ARG1 (MRPNode-1 / sanction-02 :ARG0 (MRPNode-2 / country :name (MRPNode-3 / name :op1 us)) :ARG1-of (MRPNode-4 / new-01) :ARG0 (MRPNode-5 / country :name (MRPNode-6 / name :op1 n :op2 korea))) :ARG0 MRPNode-5)

# ::id 594
# ::snt Hong Kong student leaders mull protest retreat
# ::tok Hong Kong student leaders mull protest retreat
# ::alignments 0-2|0.1+0.1.0+0.1.0.0+0.1.0.0.0+0.1.0.0.1 2-3|0.1.1.0 3-4|0.1.1 4-5|0 5-6|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.169143 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	mull	4-5
# ::node	0.0	retreat-01	6-7
# ::node	0.0.0	protest-01	5-6
# ::node	0.1	person	0-2
# ::node	0.1.0	city	0-2
# ::node	0.1.0.0	name	0-2
# ::node	0.1.0.0.0	hong	0-2
# ::node	0.1.0.0.1	kong	0-2
# ::node	0.1.1	lead-02	3-4
# ::node	0.1.1.0	study-01	2-3
# ::root	0	mull
# ::edge	city	name	name	0.1.0	0.1.0.0
# ::edge	lead-02	ARG1	city	0.1.1	0.1.0
# ::edge	lead-02	ARG1	study-01	0.1.1	0.1.1.0
# ::edge	mull	domain	person	0	0.1
# ::edge	mull	domain	retreat-01	0	0.0
# ::edge	name	op1	hong	0.1.0.0	0.1.0.0.0
# ::edge	name	op2	kong	0.1.0.0	0.1.0.0.1
# ::edge	person	ARG0-of	city	0.1	0.1.0
# ::edge	person	ARG0-of	lead-02	0.1	0.1.1
# ::edge	retreat-01	ARG2	protest-01	0.0	0.0.0
(MRPNode-0 / mull :domain (MRPNode-1 / retreat-01 :ARG2 (MRPNode-2 / protest-01)) :domain (MRPNode-3 / person :ARG0-of (MRPNode-4 / city :name (MRPNode-5 / name :op1 hong :op2 kong)) :ARG0-of (MRPNode-6 / lead-02 :ARG1 MRPNode-4 :ARG1 (MRPNode-7 / study-01))))

# ::id 595
# ::snt "Volkswagen's ""gesture of goodwill"" to diesel owners"
# ::tok " Volkswagen 's " " gesture of goodwill " " to diesel owners "
# ::alignments 1-2|0.1+0.1.0+0.1.0.0 5-6|0 7-8|0.0 11-12|0.2.0.0 12-13|0.2+0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.174129 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	gesture-01	5-6
# ::node	0.0	goodwill	7-8
# ::node	0.1	company	1-2
# ::node	0.1.0	name	1-2
# ::node	0.1.0.0	volkswagen	1-2
# ::node	0.2	person	12-13
# ::node	0.2.0	own-01	12-13
# ::node	0.2.0.0	diesel	11-12
# ::root	0	gesture-01
# ::edge	company	name	name	0.1	0.1.0
# ::edge	gesture-01	ARG0	company	0	0.1
# ::edge	gesture-01	ARG1	goodwill	0	0.0
# ::edge	gesture-01	ARG2	person	0	0.2
# ::edge	name	op1	volkswagen	0.1.0	0.1.0.0
# ::edge	own-01	ARG1	diesel	0.2.0	0.2.0.0
# ::edge	person	ARG0-of	own-01	0.2	0.2.0
(MRPNode-0 / gesture-01 :ARG1 (MRPNode-1 / goodwill) :ARG0 (MRPNode-2 / company :name (MRPNode-3 / name :op1 volkswagen)) :ARG2 (MRPNode-4 / person :ARG0-of (MRPNode-5 / own-01 :ARG1 (MRPNode-6 / diesel))))

# ::id 596
# ::snt Security tightened at New Delhi churches after attacks
# ::tok Security tightened at New Delhi churches after attacks
# ::alignments 0-1|0.0 1-2|0 3-5|0.2.0+0.2.0.0+0.2.0.0.0+0.2.0.0.1 5-6|0.2 6-7|0.1 7-8|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.178885 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	tighten-01	1-2
# ::node	0.0	security	0-1
# ::node	0.1	after	6-7
# ::node	0.1.0	attack-01	7-8
# ::node	0.2	church	5-6
# ::node	0.2.0	city	3-5
# ::node	0.2.0.0	name	3-5
# ::node	0.2.0.0.0	new	3-5
# ::node	0.2.0.0.1	delhi	3-5
# ::root	0	tighten-01
# ::edge	after	op1	attack-01	0.1	0.1.0
# ::edge	church	location	city	0.2	0.2.0
# ::edge	city	name	name	0.2.0	0.2.0.0
# ::edge	name	op1	new	0.2.0.0	0.2.0.0.0
# ::edge	name	op2	delhi	0.2.0.0	0.2.0.0.1
# ::edge	tighten-01	ARG1	security	0	0.0
# ::edge	tighten-01	location	church	0	0.2
# ::edge	tighten-01	time	after	0	0.1
(MRPNode-0 / tighten-01 :ARG1 (MRPNode-1 / security) :time (MRPNode-2 / after :op1 (MRPNode-3 / attack-01)) :location (MRPNode-4 / church :location (MRPNode-5 / city :name (MRPNode-6 / name :op1 new :op2 delhi))))

# ::id 597
# ::snt Pilot killed as US jet crashes in England
# ::tok Pilot killed as US jet crashes in England
# ::alignments 0-1|0.1+0.1.0 1-2|0 3-4|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 4-5|0.0.0.0 5-6|0.0.0 7-8|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.186052 ::parser eager_oracle ::smatch 0.9047619047619048 ::n_actions 31
# ::node	0	kill-01	1-2
# ::node	0.0	cause-01	
# ::node	0.0.0	crash-01	5-6
# ::node	0.0.0.0	jet	4-5
# ::node	0.0.0.0.0	country	3-4
# ::node	0.0.0.0.0.0	name	3-4
# ::node	0.0.0.0.0.0.0	us	3-4
# ::node	0.0.0.1	country	7-8
# ::node	0.0.0.1.0	name	7-8
# ::node	0.0.0.1.0.0	england	7-8
# ::node	0.1	person	0-1
# ::node	0.1.0	pilot-01	0-1
# ::root	0	kill-01
# ::edge	cause-01	ARG0	crash-01	0.0	0.0.0
# ::edge	country	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	crash-01	ARG1	jet	0.0.0	0.0.0.0
# ::edge	crash-01	location	country	0.0.0	0.0.0.1
# ::edge	jet	poss	country	0.0.0.0	0.0.0.0.0
# ::edge	kill-01	ARG1	cause-01	0	0.0
# ::edge	kill-01	ARG1	person	0	0.1
# ::edge	name	op1	england	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op1	us	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	person	ARG0-of	pilot-01	0.1	0.1.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / cause-01 :ARG0 (MRPNode-2 / crash-01 :ARG1 (MRPNode-3 / jet :poss (MRPNode-4 / country :name (MRPNode-5 / name :op1 us))) :location (MRPNode-6 / country :name (MRPNode-7 / name :op1 england)))) :ARG1 (MRPNode-8 / person :ARG0-of (MRPNode-9 / pilot-01)))

# ::id 598
# ::snt Mandela's condition has 'worsened over past 48 hours'
# ::tok Mandela 's condition has ' worsened over past 48 hours '
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 2-3|0.0 5-6|0 8-9|0.1.1.0 9-10|0.1.1+0.1.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.191132 ::parser eager_oracle ::smatch 0.8125000000000001 ::n_actions 31
# ::node	0	worsen-01	5-6
# ::node	0.0	condition	2-3
# ::node	0.0.0	person	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	mandela	0-1
# ::node	0.1	before	
# ::node	0.1.0	now	
# ::node	0.1.1	temporal-quantity	9-10
# ::node	0.1.1.0	48	8-9
# ::node	0.1.1.1	hour	9-10
# ::root	0	worsen-01
# ::edge	before	duration	temporal-quantity	0.1	0.1.1
# ::edge	before	op1	now	0.1	0.1.0
# ::edge	condition	poss	person	0.0	0.0.0
# ::edge	name	op1	mandela	0.0.0.0	0.0.0.0.0
# ::edge	person	name	name	0.0.0	0.0.0.0
# ::edge	temporal-quantity	quant	48	0.1.1	0.1.1.0
# ::edge	temporal-quantity	unit	hour	0.1.1	0.1.1.1
# ::edge	worsen-01	ARG1	condition	0	0.0
# ::edge	worsen-01	time	before	0	0.1
(MRPNode-0 / worsen-01 :ARG1 (MRPNode-1 / condition :poss (MRPNode-2 / person :name (MRPNode-3 / name :op1 mandela))) :time (MRPNode-4 / before :op1 (MRPNode-5 / now) :duration (MRPNode-6 / temporal-quantity :quant 48 :unit (MRPNode-7 / hour))))

# ::id 599
# ::snt Searchers hoping pings come from lost Malaysian airliner
# ::tok Searchers hoping pings come from lost Malaysian airliner
# ::alignments 0-1|0.0.0.0+0.0.0.0.0 1-2|0.0+0.0.0 3-4|0 5-6|0.1.0 6-7|0.1.1+0.1.1.0+0.1.1.0.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.197400 ::parser eager_oracle ::smatch 0.9473684210526315 ::n_actions 37
# ::node	0	come-01	3-4
# ::node	0.0	thing	1-2
# ::node	0.0.0	hope-01	1-2
# ::node	0.0.0.0	person	0-1
# ::node	0.0.0.0.0	search-01	0-1
# ::node	0.1	airliner	7-8
# ::node	0.1.0	lose-02	5-6
# ::node	0.1.1	country	6-7
# ::node	0.1.1.0	name	6-7
# ::node	0.1.1.0.0	malaysia	6-7
# ::root	0	come-01
# ::edge	airliner	ARG1-of	lose-02	0.1	0.1.0
# ::edge	airliner	mod	country	0.1	0.1.1
# ::edge	come-01	ARG1	thing	0	0.0
# ::edge	come-01	ARG3	airliner	0	0.1
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	hope-01	ARG0	person	0.0.0	0.0.0.0
# ::edge	name	op1	malaysia	0.1.1.0	0.1.1.0.0
# ::edge	person	ARG0-of	search-01	0.0.0.0	0.0.0.0.0
# ::edge	thing	ARG1-of	hope-01	0.0	0.0.0
(MRPNode-0 / come-01 :ARG1 (MRPNode-1 / thing :ARG1-of (MRPNode-2 / hope-01 :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / search-01)))) :ARG3 (MRPNode-5 / airliner :ARG1-of (MRPNode-6 / lose-02) :mod (MRPNode-7 / country :name (MRPNode-8 / name :op1 malaysia))))

# ::id 600
# ::snt Mandela's family thanks nation and world for support
# ::tok Mandela 's family thanks nation and world for support
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 2-3|0.1 3-4|0 4-5|0.0.0 5-6|0.0 6-7|0.0.1 8-9|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:41.203068 ::parser eager_oracle ::smatch 0.85 ::n_actions 33
# ::node	0	thank-01	3-4
# ::node	0.0	and	5-6
# ::node	0.0.0	nation	4-5
# ::node	0.0.1	world	6-7
# ::node	0.1	family	2-3
# ::node	0.1.0	have-org-role-91	
# ::node	0.1.0.0	person	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	mandela	0-1
# ::node	0.1.0.1	member	
# ::node	0.2	support-01	8-9
# ::root	0	thank-01
# ::edge	and	op1	nation	0.0	0.0.0
# ::edge	and	op2	world	0.0	0.0.1
# ::edge	family	ARG1-of	have-org-role-91	0.1	0.1.0
# ::edge	have-org-role-91	ARG0	person	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	member	0.1.0	0.1.0.1
# ::edge	name	op1	mandela	0.1.0.0.0	0.1.0.0.0.0
# ::edge	person	name	name	0.1.0.0	0.1.0.0.0
# ::edge	support-01	ARG0	family	0.2	0.1
# ::edge	thank-01	ARG0	family	0	0.1
# ::edge	thank-01	ARG1	and	0	0.0
# ::edge	thank-01	ARG2	support-01	0	0.2
(MRPNode-0 / thank-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / nation) :op2 (MRPNode-3 / world)) :ARG0 (MRPNode-4 / family :ARG1-of (MRPNode-5 / have-org-role-91 :ARG0 (MRPNode-6 / person :name (MRPNode-7 / name :op1 mandela)) :ARG2 (MRPNode-8 / member))) :ARG2 (MRPNode-9 / support-01 :ARG0 MRPNode-4))

# ::id 601
# ::snt UK urges countries over Syria aid
# ::tok UK urges countries over Syria aid
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.2 4-5|0.0.0+0.0.0.0+0.0.0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.207670 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	urge-01	1-2
# ::node	0.0	aid-01	5-6
# ::node	0.0.0	country	4-5
# ::node	0.0.0.0	name	4-5
# ::node	0.0.0.0.0	syria	4-5
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	uk	0-1
# ::node	0.2	country	2-3
# ::root	0	urge-01
# ::edge	aid-01	ARG0	country	0.0	0.0.0
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	name	op1	syria	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	uk	0.1.0	0.1.0.0
# ::edge	urge-01	ARG0	country	0	0.2
# ::edge	urge-01	ARG1	aid-01	0	0.0
# ::edge	urge-01	ARG1	country	0	0.1
(MRPNode-0 / urge-01 :ARG1 (MRPNode-1 / aid-01 :ARG0 (MRPNode-2 / country :name (MRPNode-3 / name :op1 syria))) :ARG1 (MRPNode-4 / country :name (MRPNode-5 / name :op1 uk)) :ARG0 (MRPNode-6 / country))

# ::id 602
# ::snt George Zimmerman Verdict Propels Cable News Into Talkradio Mode
# ::tok George Zimmerman Verdict Propels Cable News Into Talkradio Mode
# ::alignments 0-2|0.1+0.1.0+0.1.0.0+0.1.0.1 4-6|0.0+0.0.0+0.0.0.0+0.0.0.1 7-8|0.2.0 8-9|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:41.213052 ::parser eager_oracle ::smatch 0.7647058823529411 ::n_actions 21
# ::node	0	prevent-01	
# ::node	0.0	broadcast-program	4-6
# ::node	0.0.0	name	4-6
# ::node	0.0.0.0	cable	4-6
# ::node	0.0.0.1	news	4-6
# ::node	0.1	person	0-2
# ::node	0.1.0	name	0-2
# ::node	0.1.0.0	george	0-2
# ::node	0.1.0.1	zimmerman	0-2
# ::node	0.2	Mode	8-9
# ::node	0.2.0	Talkradio	7-8
# ::root	0	prevent-01
# ::edge	Mode	mod	Talkradio	0.2	0.2.0
# ::edge	broadcast-program	name	name	0.0	0.0.0
# ::edge	name	op1	cable	0.0.0	0.0.0.0
# ::edge	name	op1	george	0.1.0	0.1.0.0
# ::edge	name	op2	news	0.0.0	0.0.0.1
# ::edge	name	op2	zimmerman	0.1.0	0.1.0.1
# ::edge	person	name	name	0.1	0.1.0
# ::edge	prevent-01	ARG0	person	0	0.1
# ::edge	prevent-01	ARG1	broadcast-program	0	0.0
# ::edge	prevent-01	ARG3	Mode	0	0.2
(MRPNode-0 / prevent-01 :ARG1 (MRPNode-1 / broadcast-program :name (MRPNode-2 / name :op1 cable :op2 news)) :ARG0 (MRPNode-3 / person :name (MRPNode-4 / name :op1 george :op2 zimmerman)) :ARG3 (MRPNode-5 / Mode :mod (MRPNode-6 / Talkradio)))

# ::id 603
# ::snt Hollande arrives for US state visit
# ::tok Hollande arrives for US state visit
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 1-2|0 3-4|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 4-5|0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.217374 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	arrive-01	1-2
# ::node	0.0	visit-01	5-6
# ::node	0.0.0	state	4-5
# ::node	0.0.0.0	country	3-4
# ::node	0.0.0.0.0	name	3-4
# ::node	0.0.0.0.0.0	us	3-4
# ::node	0.0.1	person	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	hollande	0-1
# ::root	0	arrive-01
# ::edge	arrive-01	ARG1	person	0	0.0.1
# ::edge	arrive-01	ARG1	visit-01	0	0.0
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	hollande	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	us	0.0.0.0.0	0.0.0.0.0.0
# ::edge	person	name	name	0.0.1	0.0.1.0
# ::edge	state	location	country	0.0.0	0.0.0.0
# ::edge	visit-01	ARG0	person	0.0	0.0.1
# ::edge	visit-01	ARG1	state	0.0	0.0.0
(MRPNode-0 / arrive-01 :ARG1 (MRPNode-1 / visit-01 :ARG1 (MRPNode-2 / state :location (MRPNode-3 / country :name (MRPNode-4 / name :op1 us))) :ARG0 (MRPNode-5 / person :name (MRPNode-6 / name :op1 hollande))) :ARG1 MRPNode-5)

# ::id 604
# ::snt President Obama warns Russia to stay out of Ukraine
# ::tok President Obama warns Russia to stay out of Ukraine
# ::alignments 0-1|0.1.1+0.1.1.0 1-2|0.1+0.1.0+0.1.0.0 2-3|0 3-4|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 5-6|0.0 6-7|0.0.0 8-9|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.227240 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	warn-01	2-3
# ::node	0.0	stay-01	5-6
# ::node	0.0.0	out-06	6-7
# ::node	0.0.0.0	country	8-9
# ::node	0.0.0.0.0	name	8-9
# ::node	0.0.0.0.0.0	ukraine	8-9
# ::node	0.0.0.1	country	3-4
# ::node	0.0.0.1.0	name	3-4
# ::node	0.0.0.1.0.0	russia	3-4
# ::node	0.1	person	1-2
# ::node	0.1.0	name	1-2
# ::node	0.1.0.0	obama	1-2
# ::node	0.1.1	have-org-role-91	0-1
# ::node	0.1.1.0	president	0-1
# ::root	0	warn-01
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	have-org-role-91	ARG2	president	0.1.1	0.1.1.0
# ::edge	name	op1	obama	0.1.0	0.1.0.0
# ::edge	name	op1	russia	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op1	ukraine	0.0.0.0.0	0.0.0.0.0.0
# ::edge	out-06	ARG1	country	0.0.0	0.0.0.1
# ::edge	out-06	ARG2	country	0.0.0	0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.1
# ::edge	person	name	name	0.1	0.1.0
# ::edge	stay-01	ARG1	country	0.0	0.0.0.1
# ::edge	stay-01	ARG3	out-06	0.0	0.0.0
# ::edge	warn-01	ARG0	person	0	0.1
# ::edge	warn-01	ARG1	stay-01	0	0.0
# ::edge	warn-01	ARG2	country	0	0.0.0.1
(MRPNode-0 / warn-01 :ARG1 (MRPNode-1 / stay-01 :ARG3 (MRPNode-2 / out-06 :ARG2 (MRPNode-3 / country :name (MRPNode-4 / name :op1 ukraine)) :ARG1 (MRPNode-9 / country :name (MRPNode-10 / name :op1 russia))) :ARG1 MRPNode-9) :ARG0 (MRPNode-5 / person :name (MRPNode-6 / name :op1 obama) :ARG0-of (MRPNode-7 / have-org-role-91 :ARG2 (MRPNode-8 / president))) :ARG2 MRPNode-9)

# ::id 605
# ::snt Fed expected to maintain stimulus
# ::tok Fed expected to maintain stimulus
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 1-2|0 3-4|0.0 4-5|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.230015 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	expect-01	1-2
# ::node	0.0	maintain-01	3-4
# ::node	0.0.0	stimulus	4-5
# ::node	0.0.1	government-organization	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	fed	0-1
# ::root	0	expect-01
# ::edge	expect-01	ARG1	maintain-01	0	0.0
# ::edge	government-organization	name	name	0.0.1	0.0.1.0
# ::edge	maintain-01	ARG0	government-organization	0.0	0.0.1
# ::edge	maintain-01	ARG1	stimulus	0.0	0.0.0
# ::edge	name	op1	fed	0.0.1.0	0.0.1.0.0
(MRPNode-0 / expect-01 :ARG1 (MRPNode-1 / maintain-01 :ARG1 (MRPNode-2 / stimulus) :ARG0 (MRPNode-3 / government-organization :name (MRPNode-4 / name :op1 fed))))

# ::id 606
# ::snt The impact of sanctions on Russia
# ::tok The impact of sanctions on Russia
# ::alignments 1-2|0 3-4|0.0 5-6|0.0.0+0.0.0.0+0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.232430 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	impact-01	1-2
# ::node	0.0	sanction-02	3-4
# ::node	0.0.0	country	5-6
# ::node	0.0.0.0	name	5-6
# ::node	0.0.0.0.0	russia	5-6
# ::root	0	impact-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	impact-01	ARG1	sanction-02	0	0.0
# ::edge	name	op1	russia	0.0.0.0	0.0.0.0.0
# ::edge	sanction-02	ARG1	country	0.0	0.0.0
(MRPNode-0 / impact-01 :ARG1 (MRPNode-1 / sanction-02 :ARG1 (MRPNode-2 / country :name (MRPNode-3 / name :op1 russia))))

# ::id 607
# ::snt How does world's cheapest car do in crash test?
# ::tok How does world 's cheapest car do in crash test ?
# ::alignments 0-1|0.2 2-3|0.0.0.1.0 4-5|0.0.0.2 5-6|0.0+0.0.0.1 6-7|0 8-9|0.1.0 9-10|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.240087 ::parser eager_oracle ::smatch 0.8108108108108109 ::n_actions 38
# ::node	0	do-02	6-7
# ::node	0.0	car	5-6
# ::node	0.0.0	have-degree-91	
# ::node	0.0.0.0	most	
# ::node	0.0.0.1	car	5-6
# ::node	0.0.0.1.0	world	2-3
# ::node	0.0.0.2	cheap-02	4-5
# ::node	0.1	test-01	9-10
# ::node	0.1.0	crash-01	8-9
# ::node	0.2	amr-unknown	0-1
# ::root	0	do-02
# ::edge	car	ARG1-of	cheap-02	0.0	0.0.0.2
# ::edge	car	ARG1-of	have-degree-91	0.0	0.0.0
# ::edge	car	location	world	0.0.0.1	0.0.0.1.0
# ::edge	do-02	ARG0	test-01	0	0.1
# ::edge	do-02	ARG1	car	0	0.0
# ::edge	do-02	manner	amr-unknown	0	0.2
# ::edge	have-degree-91	ARG2	cheap-02	0.0.0	0.0.0.2
# ::edge	have-degree-91	ARG3	most	0.0.0	0.0.0.0
# ::edge	have-degree-91	ARG5	car	0.0.0	0.0.0.1
# ::edge	test-01	ARG1	crash-01	0.1	0.1.0
(MRPNode-0 / do-02 :ARG1 (MRPNode-1 / car :ARG1-of (MRPNode-2 / have-degree-91 :ARG3 (MRPNode-3 / most) :ARG5 (MRPNode-4 / car :location (MRPNode-5 / world)) :ARG2 (MRPNode-6 / cheap-02)) :ARG1-of MRPNode-6) :ARG0 (MRPNode-7 / test-01 :ARG1 (MRPNode-8 / crash-01)) :manner (MRPNode-9 / amr-unknown))

# ::id 608
# ::snt "Turkish PM Erdogan says ""duty"" to order crackdown on Istanbul park protest"
# ::tok " Turkish PM Erdogan says " " duty " " to order crackdown on Istanbul park protest "
# ::alignments 1-2|0.1.1+0.1.1.0+0.1.1.0.0+0.1.1.0.0.0 3-4|0.1+0.1.0+0.1.0.0 4-5|0 11-12|0.0.0 12-13|0.0.0.0 14-15|0.0.0.0.0.0+0.0.0.0.0.0.0+0.0.0.0.0.0.0.0 16-17|0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.257434 ::parser eager_oracle ::smatch 0.8214285714285714 ::n_actions 44
# ::node	0	say-01	4-5
# ::node	0.0	obligate-01	
# ::node	0.0.0	order-02	11-12
# ::node	0.0.0.0	crack-down-06	12-13
# ::node	0.0.0.0.0	protest-01	16-17
# ::node	0.0.0.0.0.0	city	14-15
# ::node	0.0.0.0.0.0.0	name	14-15
# ::node	0.0.0.0.0.0.0.0	istanbul	14-15
# ::node	0.1	person	3-4
# ::node	0.1.0	name	3-4
# ::node	0.1.0.0	erdogan	3-4
# ::node	0.1.1	have-org-role-91	1-2
# ::node	0.1.1.0	country	1-2
# ::node	0.1.1.0.0	name	1-2
# ::node	0.1.1.0.0.0	turkey	1-2
# ::node	0.1.1.1	minister	
# ::node	0.1.1.1.0	prime	
# ::root	0	say-01
# ::edge	city	name	name	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	country	name	name	0.1.1.0	0.1.1.0.0
# ::edge	crack-down-06	ARG1	protest-01	0.0.0.0	0.0.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.1	0.1.1.0
# ::edge	have-org-role-91	ARG2	minister	0.1.1	0.1.1.1
# ::edge	minister	mod	prime	0.1.1.1	0.1.1.1.0
# ::edge	name	op1	erdogan	0.1.0	0.1.0.0
# ::edge	name	op1	istanbul	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0
# ::edge	name	op1	turkey	0.1.1.0.0	0.1.1.0.0.0
# ::edge	obligate-01	ARG2	order-02	0.0	0.0.0
# ::edge	order-02	ARG1	crack-down-06	0.0.0	0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.1
# ::edge	person	name	name	0.1	0.1.0
# ::edge	protest-01	ARG1	city	0.0.0.0.0	0.0.0.0.0.0
# ::edge	say-01	ARG0	person	0	0.1
# ::edge	say-01	ARG1	obligate-01	0	0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / obligate-01 :ARG2 (MRPNode-2 / order-02 :ARG1 (MRPNode-3 / crack-down-06 :ARG1 (MRPNode-4 / protest-01 :ARG1 (MRPNode-5 / city :name (MRPNode-6 / name :op1 istanbul)))))) :ARG0 (MRPNode-7 / person :name (MRPNode-8 / name :op1 erdogan) :ARG0-of (MRPNode-9 / have-org-role-91 :ARG1 (MRPNode-10 / country :name (MRPNode-11 / name :op1 turkey)) :ARG2 (MRPNode-12 / minister :mod (MRPNode-13 / prime)))))

# ::id 609
# ::snt Top Asian News 1:25 p.m. GMT
# ::tok Top Asian News 1:25 p.m. GMT
# ::alignments 0-3|0+0.0+0.0.0+0.0.1+0.0.2 5-6|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.259282 ::parser eager_oracle ::smatch 0.7777777777777778 ::n_actions 13
# ::node	0	broadcast-program	0-3
# ::node	0.0	name	0-3
# ::node	0.0.0	top	0-3
# ::node	0.0.1	asian	0-3
# ::node	0.0.2	news	0-3
# ::node	0.1	date-entity	
# ::node	0.1.0	"1:25"	
# ::node	0.1.1	gmt	5-6
# ::root	0	broadcast-program
# ::edge	broadcast-program	name	name	0	0.0
# ::edge	broadcast-program	time	date-entity	0	0.1
# ::edge	date-entity	time	"1:25"	0.1	0.1.0
# ::edge	date-entity	timezone	gmt	0.1	0.1.1
# ::edge	name	op1	top	0.0	0.0.0
# ::edge	name	op2	asian	0.0	0.0.1
# ::edge	name	op3	news	0.0	0.0.2
(MRPNode-0 / broadcast-program :name (MRPNode-1 / name :op1 top :op2 asian :op3 news) :time (MRPNode-2 / date-entity :time "1:25" :timezone gmt))

# ::id 610
# ::snt Singapore shares open 0.06% lower on Tuesday
# ::tok Singapore shares open 0.06 % lower on Tuesday
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1 2-3|0 3-4|0.0.0 4-5|0.0 5-6|0.0.1 7-8|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.265046 ::parser eager_oracle ::smatch 0.7368421052631579 ::n_actions 30
# ::node	0	open-01	2-3
# ::node	0.0	percentage-entity	4-5
# ::node	0.0.0	0.06	3-4
# ::node	0.0.1	low-04	5-6
# ::node	0.0.2	have-degree-91	
# ::node	0.0.2.0	more	
# ::node	0.1	share	1-2
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	singapore	0-1
# ::node	0.2	date-entity	
# ::node	0.2.0	tuesday	7-8
# ::root	0	open-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	date-entity	weekday	tuesday	0.2	0.2.0
# ::edge	have-degree-91	ARG2	low-04	0.0.2	0.0.1
# ::edge	have-degree-91	ARG3	more	0.0.2	0.0.2.0
# ::edge	name	op1	singapore	0.1.0.0	0.1.0.0.0
# ::edge	open-01	ARG1	percentage-entity	0	0.0
# ::edge	open-01	time	date-entity	0	0.2
# ::edge	open-01	time	share	0	0.1
# ::edge	percentage-entity	value	0.06	0.0	0.0.0
# ::edge	percentage-entity	value	have-degree-91	0.0	0.0.2
# ::edge	percentage-entity	value	low-04	0.0	0.0.1
# ::edge	share	mod	country	0.1	0.1.0
(MRPNode-0 / open-01 :ARG1 (MRPNode-1 / percentage-entity :value 0.06 :value (MRPNode-2 / low-04) :value (MRPNode-3 / have-degree-91 :ARG2 MRPNode-2 :ARG3 (MRPNode-4 / more))) :time (MRPNode-5 / share :mod (MRPNode-6 / country :name (MRPNode-7 / name :op1 singapore))) :time (MRPNode-8 / date-entity :weekday (MRPNode-9 / tuesday)))

# ::id 611
# ::snt China treasury bond futures close mixed Wednesday
# ::tok China treasury bond futures close mixed Wednesday
# ::alignments 0-1|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 1-2|0.0.0.0 2-3|0.0.0 3-4|0.0 4-5|0 5-6|0.1 6-7|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.270425 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 31
# ::node	0	close-10	4-5
# ::node	0.0	future	3-4
# ::node	0.0.0	bond	2-3
# ::node	0.0.0.0	treasury	1-2
# ::node	0.0.0.1	country	0-1
# ::node	0.0.0.1.0	name	0-1
# ::node	0.0.0.1.0.0	china	0-1
# ::node	0.1	mix-01	5-6
# ::node	0.2	date-entity	
# ::node	0.2.0	wednesday	6-7
# ::root	0	close-10
# ::edge	bond	mod	treasury	0.0.0	0.0.0.0
# ::edge	bond	poss	country	0.0.0	0.0.0.1
# ::edge	close-10	ARG1	future	0	0.0
# ::edge	close-10	ARG2	mix-01	0	0.1
# ::edge	close-10	time	date-entity	0	0.2
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	date-entity	weekday	wednesday	0.2	0.2.0
# ::edge	future	mod	bond	0.0	0.0.0
# ::edge	mix-01	ARG1	future	0.1	0.0
# ::edge	name	op1	china	0.0.0.1.0	0.0.0.1.0.0
(MRPNode-0 / close-10 :ARG1 (MRPNode-1 / future :mod (MRPNode-2 / bond :mod (MRPNode-3 / treasury) :poss (MRPNode-4 / country :name (MRPNode-5 / name :op1 china)))) :ARG2 (MRPNode-6 / mix-01 :ARG1 MRPNode-1) :time (MRPNode-7 / date-entity :weekday (MRPNode-8 / wednesday)))

# ::id 612
# ::snt 6.6-magnitude earthquake strikes off Indonesia
# ::tok 6.6 - magnitude earthquake strikes off Indonesia
# ::alignments 3-4|0.1 4-5|0 6-7|0.0+0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.273127 ::parser eager_oracle ::smatch 0.8571428571428571 ::n_actions 18
# ::node	0	strike-01	4-5
# ::node	0.0	country	6-7
# ::node	0.0.0	name	6-7
# ::node	0.0.0.0	indonesia	6-7
# ::node	0.1	earthquake	3-4
# ::node	0.1.0	seismic-quantity	
# ::node	0.1.0.0	8	
# ::root	0	strike-01
# ::edge	country	name	name	0.0	0.0.0
# ::edge	earthquake	quant	seismic-quantity	0.1	0.1.0
# ::edge	name	op1	indonesia	0.0.0	0.0.0.0
# ::edge	seismic-quantity	quant	8	0.1.0	0.1.0.0
# ::edge	strike-01	ARG0	country	0	0.0
# ::edge	strike-01	ARG0	earthquake	0	0.1
(MRPNode-0 / strike-01 :ARG0 (MRPNode-1 / country :name (MRPNode-2 / name :op1 indonesia)) :ARG0 (MRPNode-3 / earthquake :quant (MRPNode-4 / seismic-quantity :quant 8)))

# ::id 613
# ::snt Iran hardliners attack nuclear deal
# ::tok Iran hardliners attack nuclear deal
# ::alignments 0-1|0.1.1+0.1.1.0+0.1.1.0.0 1-2|0.1.0 2-3|0 3-4|0.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.276065 ::parser eager_oracle ::smatch 0.7692307692307692 ::n_actions 20
# ::node	0	attack-01	2-3
# ::node	0.0	deal-01	4-5
# ::node	0.0.0	nucleus	3-4
# ::node	0.1	person	
# ::node	0.1.0	hardline	1-2
# ::node	0.1.1	country	0-1
# ::node	0.1.1.0	name	0-1
# ::node	0.1.1.0.0	iran	0-1
# ::root	0	attack-01
# ::edge	attack-01	ARG0	person	0	0.1
# ::edge	attack-01	ARG1	deal-01	0	0.0
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	deal-01	ARG2	nucleus	0.0	0.0.0
# ::edge	name	op1	iran	0.1.1.0	0.1.1.0.0
# ::edge	person	mod	country	0.1	0.1.1
# ::edge	person	mod	hardline	0.1	0.1.0
(MRPNode-0 / attack-01 :ARG1 (MRPNode-1 / deal-01 :ARG2 (MRPNode-2 / nucleus)) :ARG0 (MRPNode-3 / person :mod (MRPNode-4 / hardline) :mod (MRPNode-5 / country :name (MRPNode-6 / name :op1 iran))))

# ::id 614
# ::snt Israeli security forces arrest 8 Palestinians in overnight West Bank sweeps
# ::tok Israeli security forces arrest 8 Palestinians in overnight West Bank sweeps
# ::alignments 0-1|0.1.1+0.1.1.0+0.1.1.0.0 1-2|0.1.0 2-3|0.1 3-4|0 4-5|0.0.0 5-6|0.0.1+0.0.1.0+0.0.1.0.0 7-8|0.2.1 8-10|0.2.0+0.2.0.0+0.2.0.0.0+0.2.0.0.1 10-11|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:41.287685 ::parser eager_oracle ::smatch 0.8363636363636363 ::n_actions 38
# ::node	0	arrest-01	3-4
# ::node	0.0	person	
# ::node	0.0.0	8	4-5
# ::node	0.0.1	country	5-6
# ::node	0.0.1.0	name	5-6
# ::node	0.0.1.0.0	palestine	5-6
# ::node	0.1	force	2-3
# ::node	0.1.0	security	1-2
# ::node	0.1.1	country	0-1
# ::node	0.1.1.0	name	0-1
# ::node	0.1.1.0.0	israel	0-1
# ::node	0.2	sweep-01	10-11
# ::node	0.2.0	country-region	8-10
# ::node	0.2.0.0	name	8-10
# ::node	0.2.0.0.0	west	8-10
# ::node	0.2.0.0.1	bank	8-10
# ::node	0.2.1	overnight	7-8
# ::root	0	arrest-01
# ::edge	arrest-01	ARG0	force	0	0.1
# ::edge	arrest-01	ARG1	person	0	0.0
# ::edge	arrest-01	time	sweep-01	0	0.2
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	country-region	name	name	0.2.0	0.2.0.0
# ::edge	force	mod	country	0.1	0.1.1
# ::edge	force	mod	security	0.1	0.1.0
# ::edge	name	op1	israel	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	palestine	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	west	0.2.0.0	0.2.0.0.0
# ::edge	name	op2	bank	0.2.0.0	0.2.0.0.1
# ::edge	person	mod	country	0.0	0.0.1
# ::edge	person	quant	8	0.0	0.0.0
# ::edge	sweep-01	ARG2	country-region	0.2	0.2.0
# ::edge	sweep-01	time	overnight	0.2	0.2.1
(MRPNode-0 / arrest-01 :ARG1 (MRPNode-1 / person :quant 8 :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 palestine))) :ARG0 (MRPNode-4 / force :mod (MRPNode-5 / security) :mod (MRPNode-6 / country :name (MRPNode-7 / name :op1 israel))) :time (MRPNode-8 / sweep-01 :ARG2 (MRPNode-9 / country-region :name (MRPNode-10 / name :op1 west :op2 bank)) :time (MRPNode-11 / overnight)))

# ::id 615
# ::snt 19 killed in Tunis museum attack
# ::tok 19 killed in Tunis museum attack
# ::alignments 0-1|0.0+0.0.0 1-2|0 3-4|0.1+0.1.0+0.1.0.0 4-5|0.2.0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:41.290970 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	kill-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	19	0-1
# ::node	0.1	city	3-4
# ::node	0.1.0	name	3-4
# ::node	0.1.0.0	tunis	3-4
# ::node	0.2	attack-01	5-6
# ::node	0.2.0	museum	4-5
# ::root	0	kill-01
# ::edge	attack-01	mod	museum	0.2	0.2.0
# ::edge	city	name	name	0.1	0.1.0
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	ARG2-of	attack-01	0	0.2
# ::edge	kill-01	location	city	0	0.1
# ::edge	name	op1	tunis	0.1.0	0.1.0.0
# ::edge	person	quant	19	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 19) :location (MRPNode-2 / city :name (MRPNode-3 / name :op1 tunis)) :ARG2-of (MRPNode-4 / attack-01 :mod (MRPNode-5 / museum)))

# ::id 616
# ::snt Texas hospital worker tests positive for Ebola
# ::tok Texas hospital worker tests positive for Ebola
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 1-2|0.0.0.0 2-3|0.0+0.0.0 3-4|0 4-5|0.1 6-7|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.296986 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	test-01	3-4
# ::node	0.0	person	2-3
# ::node	0.0.0	work-01	2-3
# ::node	0.0.0.0	hospital	1-2
# ::node	0.0.1	state	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	texas	0-1
# ::node	0.1	positive	4-5
# ::node	0.2	disease	6-7
# ::node	0.2.0	name	6-7
# ::node	0.2.0.0	ebola	6-7
# ::root	0	test-01
# ::edge	disease	name	name	0.2	0.2.0
# ::edge	name	op1	ebola	0.2.0	0.2.0.0
# ::edge	name	op1	texas	0.0.1.0	0.0.1.0.0
# ::edge	person	ARG0-of	work-01	0.0	0.0.0
# ::edge	person	location	state	0.0	0.0.1
# ::edge	state	name	name	0.0.1	0.0.1.0
# ::edge	test-01	ARG1	person	0	0.0
# ::edge	test-01	ARG2	disease	0	0.2
# ::edge	test-01	ARG2	positive	0	0.1
# ::edge	work-01	ARG2	hospital	0.0.0	0.0.0.0
(MRPNode-0 / test-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / work-01 :ARG2 (MRPNode-3 / hospital)) :location (MRPNode-4 / state :name (MRPNode-5 / name :op1 texas))) :ARG2 (MRPNode-6 / positive) :ARG2 (MRPNode-7 / disease :name (MRPNode-8 / name :op1 ebola)))

# ::id 617
# ::snt Turkey 'exploits' Syrian refugees
# ::tok Turkey ' exploits ' Syrian refugees
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 2-3|0 4-5|0.0.0+0.0.0.0+0.0.0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.300013 ::parser eager_oracle ::smatch 0.9285714285714286 ::n_actions 20
# ::node	0	exploit-01	2-3
# ::node	0.0	refugee	5-6
# ::node	0.0.0	country	4-5
# ::node	0.0.0.0	name	4-5
# ::node	0.0.0.0.0	syria	4-5
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	turkey	0-1
# ::root	0	exploit-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	exploit-01	ARG0	country	0	0.1
# ::edge	exploit-01	ARG1	refugee	0	0.0
# ::edge	name	op1	syria	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	turkey	0.1.0	0.1.0.0
# ::edge	refugee	mod	country	0.0	0.0.0
(MRPNode-0 / exploit-01 :ARG1 (MRPNode-1 / refugee :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 syria))) :ARG0 (MRPNode-4 / country :name (MRPNode-5 / name :op1 turkey)))

# ::id 618
# ::snt West Ham beats Newcastle 2-0 in Premier League
# ::tok West Ham beats Newcastle 2-0 in Premier League
# ::alignments 0-2|0.0+0.0.0+0.0.0.0+0.0.0.1 2-3|0 3-4|0.1+0.1.0+0.1.0.0 6-8|0.3+0.3.0+0.3.0.0+0.3.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.306343 ::parser eager_oracle ::smatch 0.9047619047619047 ::n_actions 22
# ::node	0	beat-03	2-3
# ::node	0.0	team	0-2
# ::node	0.0.0	name	0-2
# ::node	0.0.0.0	west	0-2
# ::node	0.0.0.1	ham	0-2
# ::node	0.1	team	3-4
# ::node	0.1.0	name	3-4
# ::node	0.1.0.0	newcastle	3-4
# ::node	0.2	score-entity	
# ::node	0.2.0	2	
# ::node	0.2.1	0	
# ::node	0.3	team	6-8
# ::node	0.3.0	name	6-8
# ::node	0.3.0.0	premier	6-8
# ::node	0.3.0.1	league	6-8
# ::root	0	beat-03
# ::edge	beat-03	ARG0	team	0	0.1
# ::edge	beat-03	ARG1	team	0	0.0
# ::edge	beat-03	ARG2	score-entity	0	0.2
# ::edge	beat-03	location	team	0	0.3
# ::edge	name	op1	newcastle	0.1.0	0.1.0.0
# ::edge	name	op1	premier	0.3.0	0.3.0.0
# ::edge	name	op1	west	0.0.0	0.0.0.0
# ::edge	name	op2	ham	0.0.0	0.0.0.1
# ::edge	name	op2	league	0.3.0	0.3.0.1
# ::edge	score-entity	op1	2	0.2	0.2.0
# ::edge	score-entity	op2	0	0.2	0.2.1
# ::edge	team	name	name	0.0	0.0.0
# ::edge	team	name	name	0.1	0.1.0
# ::edge	team	name	name	0.3	0.3.0
(MRPNode-0 / beat-03 :ARG1 (MRPNode-1 / team :name (MRPNode-2 / name :op1 west :op2 ham)) :ARG0 (MRPNode-3 / team :name (MRPNode-4 / name :op1 newcastle)) :ARG2 (MRPNode-5 / score-entity :op1 2 :op2 0) :location (MRPNode-6 / team :name (MRPNode-7 / name :op1 premier :op2 league)))

# ::id 619
# ::snt Israeli leader urges calm in Jerusalem
# ::tok Israeli leader urges calm in Jerusalem
# ::alignments 0-1|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 1-2|0.0+0.0.0 2-3|0 3-4|0.1 5-6|0.1.0+0.1.0.0+0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.311370 ::parser eager_oracle ::smatch 0.9444444444444444 ::n_actions 28
# ::node	0	urge-01	2-3
# ::node	0.0	person	1-2
# ::node	0.0.0	lead-02	1-2
# ::node	0.0.0.0	country	0-1
# ::node	0.0.0.0.0	name	0-1
# ::node	0.0.0.0.0.0	israel	0-1
# ::node	0.1	calm-03	3-4
# ::node	0.1.0	city	5-6
# ::node	0.1.0.0	name	5-6
# ::node	0.1.0.0.0	jerusalem	5-6
# ::root	0	urge-01
# ::edge	calm-03	location	city	0.1	0.1.0
# ::edge	city	name	name	0.1.0	0.1.0.0
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	lead-02	ARG1	country	0.0.0	0.0.0.0
# ::edge	name	op1	israel	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	jerusalem	0.1.0.0	0.1.0.0.0
# ::edge	person	ARG0-of	lead-02	0.0	0.0.0
# ::edge	urge-01	ARG1	person	0	0.0
# ::edge	urge-01	ARG2	calm-03	0	0.1
(MRPNode-0 / urge-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / lead-02 :ARG1 (MRPNode-3 / country :name (MRPNode-4 / name :op1 israel)))) :ARG2 (MRPNode-5 / calm-03 :location (MRPNode-6 / city :name (MRPNode-7 / name :op1 jerusalem))))

# ::id 620
# ::snt Waiting for the next president
# ::tok Waiting for the next president
# ::alignments 0-1|0 3-4|0.0.0 4-5|0.0+0.0.1+0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.313680 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	wait-01	0-1
# ::node	0.0	person	4-5
# ::node	0.0.0	next	3-4
# ::node	0.0.1	have-org-role-91	4-5
# ::node	0.0.1.0	president	4-5
# ::root	0	wait-01
# ::edge	have-org-role-91	ARG2	president	0.0.1	0.0.1.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.1
# ::edge	person	mod	next	0.0	0.0.0
# ::edge	wait-01	ARG2	person	0	0.0
(MRPNode-0 / wait-01 :ARG2 (MRPNode-1 / person :mod (MRPNode-2 / next) :ARG0-of (MRPNode-3 / have-org-role-91 :ARG2 (MRPNode-4 / president))))

# ::id 621
# ::snt Egypt sentences Al Jazeera journalists to jail
# ::tok Egypt sentences Al Jazeera journalists to jail
# ::alignments 0-1|0.0.0+0.0.0.0 1-2|0 4-5|0.0 6-7|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:41.317179 ::parser eager_oracle ::smatch 0.782608695652174 ::n_actions 22
# ::node	0	sentence-01	1-2
# ::node	0.0	journalist	4-5
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	egypt	0-1
# ::node	0.1	country	
# ::node	0.2	jail-01	6-7
# ::node	0.2.0	name	
# ::node	0.2.0.0	al-jazeera	
# ::root	0	sentence-01
# ::edge	jail-01	ARG1	name	0.2	0.2.0
# ::edge	journalist	name	name	0.0	0.0.0
# ::edge	name	op1	al-jazeera	0.2.0	0.2.0.0
# ::edge	name	op1	egypt	0.0.0	0.0.0.0
# ::edge	sentence-01	ARG0	country	0	0.1
# ::edge	sentence-01	ARG1	journalist	0	0.0
# ::edge	sentence-01	ARG2	jail-01	0	0.2
(MRPNode-0 / sentence-01 :ARG1 (MRPNode-1 / journalist :name (MRPNode-2 / name :op1 egypt)) :ARG0 (MRPNode-3 / country) :ARG2 (MRPNode-4 / jail-01 :ARG1 (MRPNode-5 / name :op1 al-jazeera)))

# ::id 622
# ::snt Kurds see Turkey impeding Islamic State fight
# ::tok Kurds see Turkey impeding Islamic State fight
# ::alignments 0-1|0.0+0.0.0+0.0.0.0+0.0.0.0.0 1-2|0 2-3|0.1.1+0.1.1.0+0.1.1.0.0 3-4|0.1 4-5|0.1.0.0.0+0.1.0.0.0.0+0.1.0.0.0.0.0 5-6|0.1.0.0 6-7|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.325536 ::parser eager_oracle ::smatch 0.96 ::n_actions 34
# ::node	0	see-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	ethnic-group	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	kurd	0-1
# ::node	0.1	impede-01	3-4
# ::node	0.1.0	fight-01	6-7
# ::node	0.1.0.0	state	5-6
# ::node	0.1.0.0.0	religious-group	4-5
# ::node	0.1.0.0.0.0	name	4-5
# ::node	0.1.0.0.0.0.0	islamic	4-5
# ::node	0.1.1	country	2-3
# ::node	0.1.1.0	name	2-3
# ::node	0.1.1.0.0	turkey	2-3
# ::root	0	see-01
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	ethnic-group	name	name	0.0.0	0.0.0.0
# ::edge	fight-01	ARG0	state	0.1.0	0.1.0.0
# ::edge	impede-01	ARG0	country	0.1	0.1.1
# ::edge	impede-01	ARG1	fight-01	0.1	0.1.0
# ::edge	name	op1	islamic	0.1.0.0.0.0	0.1.0.0.0.0.0
# ::edge	name	op1	kurd	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	turkey	0.1.1.0	0.1.1.0.0
# ::edge	person	mod	ethnic-group	0.0	0.0.0
# ::edge	religious-group	name	name	0.1.0.0.0	0.1.0.0.0.0
# ::edge	see-01	ARG1	impede-01	0	0.1
# ::edge	see-01	ARG1	person	0	0.0
# ::edge	state	mod	religious-group	0.1.0.0	0.1.0.0.0
(MRPNode-0 / see-01 :ARG1 (MRPNode-1 / person :mod (MRPNode-2 / ethnic-group :name (MRPNode-3 / name :op1 kurd))) :ARG1 (MRPNode-4 / impede-01 :ARG1 (MRPNode-5 / fight-01 :ARG0 (MRPNode-6 / state :mod (MRPNode-7 / religious-group :name (MRPNode-8 / name :op1 islamic)))) :ARG0 (MRPNode-9 / country :name (MRPNode-10 / name :op1 turkey))))

# ::id 623
# ::snt Montenegrin police fire teargas to disperse opposition
# ::tok Montenegrin police fire teargas to disperse opposition
# ::alignments 1-2|0.1 2-3|0 3-4|0.0 5-6|0.2 6-7|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.329759 ::parser eager_oracle ::smatch 0.8148148148148148 ::n_actions 26
# ::node	0	fire-01	2-3
# ::node	0.0	teargas	3-4
# ::node	0.1	police	1-2
# ::node	0.1.0	country	
# ::node	0.1.0.0	name	
# ::node	0.1.0.0.0	georgia	
# ::node	0.2	disperse-01	5-6
# ::node	0.2.0	oppose-01	6-7
# ::root	0	fire-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	disperse-01	ARG0	police	0.2	0.1
# ::edge	disperse-01	ARG1	oppose-01	0.2	0.2.0
# ::edge	fire-01	ARG0	police	0	0.1
# ::edge	fire-01	ARG1	teargas	0	0.0
# ::edge	fire-01	purpose	disperse-01	0	0.2
# ::edge	name	op1	georgia	0.1.0.0	0.1.0.0.0
# ::edge	police	mod	country	0.1	0.1.0
(MRPNode-0 / fire-01 :ARG1 (MRPNode-1 / teargas) :ARG0 (MRPNode-2 / police :mod (MRPNode-3 / country :name (MRPNode-4 / name :op1 georgia))) :purpose (MRPNode-5 / disperse-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-6 / oppose-01)))

# ::id 624
# ::snt Ashya King's parents freed from jail in Spain
# ::tok Ashya King 's parents freed from jail in Spain
# ::alignments 0-2|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.1 3-4|0.0+0.0.0+0.0.0.1 4-5|0 6-7|0.1 8-9|0.1.0+0.1.0.0+0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.336012 ::parser eager_oracle ::smatch 1.0 ::n_actions 35
# ::node	0	free-01	4-5
# ::node	0.0	person	3-4
# ::node	0.0.0	have-rel-role-91	3-4
# ::node	0.0.0.0	person	0-2
# ::node	0.0.0.0.0	name	0-2
# ::node	0.0.0.0.0.0	ashya	0-2
# ::node	0.0.0.0.0.1	king	0-2
# ::node	0.0.0.1	parent	3-4
# ::node	0.1	jail	6-7
# ::node	0.1.0	country	8-9
# ::node	0.1.0.0	name	8-9
# ::node	0.1.0.0.0	spain	8-9
# ::root	0	free-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	free-01	ARG1	person	0	0.0
# ::edge	free-01	ARG2	jail	0	0.1
# ::edge	have-rel-role-91	ARG1	person	0.0.0	0.0.0.0
# ::edge	have-rel-role-91	ARG2	parent	0.0.0	0.0.0.1
# ::edge	jail	location	country	0.1	0.1.0
# ::edge	name	op1	ashya	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	spain	0.1.0.0	0.1.0.0.0
# ::edge	name	op2	king	0.0.0.0.0	0.0.0.0.0.1
# ::edge	person	ARG0-of	have-rel-role-91	0.0	0.0.0
# ::edge	person	name	name	0.0.0.0	0.0.0.0.0
(MRPNode-0 / free-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-rel-role-91 :ARG1 (MRPNode-3 / person :name (MRPNode-4 / name :op1 ashya :op2 king)) :ARG2 (MRPNode-5 / parent))) :ARG2 (MRPNode-6 / jail :location (MRPNode-7 / country :name (MRPNode-8 / name :op1 spain))))

# ::id 625
# ::snt US ramps up response to Ebola crisis
# ::tok US ramps up response to Ebola crisis
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 3-4|0.0 5-6|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.340000 ::parser eager_oracle ::smatch 0.7999999999999999 ::n_actions 20
# ::node	0	upgrade-01	
# ::node	0.0	respond-01	3-4
# ::node	0.0.0	crisis	6-7
# ::node	0.0.0.0	disease	5-6
# ::node	0.0.0.0.0	name	5-6
# ::node	0.0.0.0.0.0	ebola	5-6
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	us	0-1
# ::root	0	upgrade-01
# ::edge	country	name	name	0.1	0.1.0
# ::edge	crisis	mod	disease	0.0.0	0.0.0.0
# ::edge	disease	name	name	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	ebola	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	us	0.1.0	0.1.0.0
# ::edge	respond-01	ARG1	crisis	0.0	0.0.0
# ::edge	upgrade-01	ARG0	country	0	0.1
# ::edge	upgrade-01	ARG1	respond-01	0	0.0
(MRPNode-0 / upgrade-01 :ARG1 (MRPNode-1 / respond-01 :ARG1 (MRPNode-2 / crisis :mod (MRPNode-3 / disease :name (MRPNode-4 / name :op1 ebola)))) :ARG0 (MRPNode-5 / country :name (MRPNode-6 / name :op1 us)))

# ::id 626
# ::snt Thousands of Russians stranded abroad
# ::tok Thousands of Russians stranded abroad
# ::alignments 2-3|0.0.0+0.0.0.0+0.0.0.0.0 3-4|0 4-5|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.342938 ::parser eager_oracle ::smatch 0.6086956521739131 ::n_actions 15
# ::node	0	strand-01	3-4
# ::node	0.0	person	
# ::node	0.0.0	country	2-3
# ::node	0.0.0.0	name	2-3
# ::node	0.0.0.0.0	russia	2-3
# ::node	0.0.1	multiple	
# ::node	0.0.1.0	1000	
# ::node	0.1	abroad	4-5
# ::root	0	strand-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	multiple	op1	1000	0.0.1	0.0.1.0
# ::edge	name	op1	russia	0.0.0.0	0.0.0.0.0
# ::edge	person	mod	country	0.0	0.0.0
# ::edge	person	quant	multiple	0.0	0.0.1
# ::edge	strand-01	ARG1	person	0	0.0
# ::edge	strand-01	location	abroad	0	0.1
(MRPNode-0 / strand-01 :ARG1 (MRPNode-1 / person :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 russia)) :quant (MRPNode-4 / multiple :op1 1000)) :location (MRPNode-5 / abroad))

# ::id 627
# ::snt Menendez faces possible corruption charges
# ::tok Menendez faces possible corruption charges
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 1-2|0 2-3|0.0.0.0 3-4|0.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.346248 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	face-01	1-2
# ::node	0.0	charge-05	4-5
# ::node	0.0.0	corrupt-01	3-4
# ::node	0.0.0.0	possible-01	2-3
# ::node	0.0.1	person	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	menendez	0-1
# ::root	0	face-01
# ::edge	charge-05	ARG1	person	0.0	0.0.1
# ::edge	charge-05	ARG1-of	corrupt-01	0.0	0.0.0
# ::edge	corrupt-01	ARG1-of	possible-01	0.0.0	0.0.0.0
# ::edge	face-01	ARG0	person	0	0.0.1
# ::edge	face-01	ARG1	charge-05	0	0.0
# ::edge	name	op1	menendez	0.0.1.0	0.0.1.0.0
# ::edge	person	name	name	0.0.1	0.0.1.0
(MRPNode-0 / face-01 :ARG1 (MRPNode-1 / charge-05 :ARG1-of (MRPNode-2 / corrupt-01 :ARG1-of (MRPNode-3 / possible-01)) :ARG1 (MRPNode-4 / person :name (MRPNode-5 / name :op1 menendez))) :ARG0 MRPNode-4)

# ::id 628
# ::snt US scientists praise Iran nuclear deal
# ::tok US scientists praise Iran nuclear deal
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1 2-3|0 3-4|0.0.0+0.0.0.0+0.0.0.0.0 4-5|0.0.1 5-6|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.350829 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	praise-01	2-3
# ::node	0.0	deal-01	5-6
# ::node	0.0.0	country	3-4
# ::node	0.0.0.0	name	3-4
# ::node	0.0.0.0.0	iran	3-4
# ::node	0.0.1	nucleus	4-5
# ::node	0.1	scientist	1-2
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	us	0-1
# ::root	0	praise-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	deal-01	ARG0	country	0.0	0.0.0
# ::edge	deal-01	ARG2	nucleus	0.0	0.0.1
# ::edge	name	op1	iran	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	us	0.1.0.0	0.1.0.0.0
# ::edge	praise-01	ARG0	scientist	0	0.1
# ::edge	praise-01	ARG1	deal-01	0	0.0
# ::edge	scientist	mod	country	0.1	0.1.0
(MRPNode-0 / praise-01 :ARG1 (MRPNode-1 / deal-01 :ARG0 (MRPNode-2 / country :name (MRPNode-3 / name :op1 iran)) :ARG2 (MRPNode-4 / nucleus)) :ARG0 (MRPNode-5 / scientist :mod (MRPNode-6 / country :name (MRPNode-7 / name :op1 us))))

# ::id 629
# ::snt EPL clubs out to avoid Champions League woes
# ::tok EPL clubs out to avoid Champions League woes
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 2-3|0.1 4-5|0.0 5-7|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.1 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.355668 ::parser eager_oracle ::smatch 0.8 ::n_actions 24
# ::node	0	go-out-17	
# ::node	0.0	avoid-01	4-5
# ::node	0.0.0	woe	7-8
# ::node	0.0.0.0	league	5-7
# ::node	0.0.0.0.0	name	5-7
# ::node	0.0.0.0.0.0	champions	5-7
# ::node	0.0.0.0.0.1	league	5-7
# ::node	0.0.1	company	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	epl	0-1
# ::node	0.1	out	2-3
# ::root	0	go-out-17
# ::edge	avoid-01	ARG0	company	0.0	0.0.1
# ::edge	avoid-01	ARG1	woe	0.0	0.0.0
# ::edge	company	name	name	0.0.1	0.0.1.0
# ::edge	go-out-17	ARG0	company	0	0.0.1
# ::edge	go-out-17	degree	out	0	0.1
# ::edge	go-out-17	purpose	avoid-01	0	0.0
# ::edge	league	name	name	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	champions	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	epl	0.0.1.0	0.0.1.0.0
# ::edge	name	op2	league	0.0.0.0.0	0.0.0.0.0.1
# ::edge	woe	poss	league	0.0.0	0.0.0.0
(MRPNode-0 / go-out-17 :purpose (MRPNode-1 / avoid-01 :ARG1 (MRPNode-2 / woe :poss (MRPNode-3 / league :name (MRPNode-4 / name :op1 champions :op2 league))) :ARG0 (MRPNode-5 / company :name (MRPNode-6 / name :op1 epl))) :ARG0 MRPNode-5 :degree (MRPNode-7 / out))

# ::id 630
# ::snt Iran arrests several spies near nuclear plant
# ::tok Iran arrests several spies near nuclear plant
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.2 3-4|0.0+0.0.1 4-5|0.0.0 5-6|0.0.0.0.0 6-7|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.360742 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	arrest-01	1-2
# ::node	0.0	person	3-4
# ::node	0.0.0	near-02	4-5
# ::node	0.0.0.0	plant	6-7
# ::node	0.0.0.0.0	nucleus	5-6
# ::node	0.0.1	spy-01	3-4
# ::node	0.0.2	several	2-3
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	iran	0-1
# ::root	0	arrest-01
# ::edge	arrest-01	ARG0	country	0	0.1
# ::edge	arrest-01	ARG1	person	0	0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	name	op1	iran	0.1.0	0.1.0.0
# ::edge	near-02	ARG2	plant	0.0.0	0.0.0.0
# ::edge	person	ARG0-of	spy-01	0.0	0.0.1
# ::edge	person	quant	near-02	0.0	0.0.0
# ::edge	person	quant	several	0.0	0.0.2
# ::edge	plant	mod	nucleus	0.0.0.0	0.0.0.0.0
(MRPNode-0 / arrest-01 :ARG1 (MRPNode-1 / person :quant (MRPNode-2 / near-02 :ARG2 (MRPNode-3 / plant :mod (MRPNode-4 / nucleus))) :ARG0-of (MRPNode-5 / spy-01) :quant (MRPNode-6 / several)) :ARG0 (MRPNode-7 / country :name (MRPNode-8 / name :op1 iran)))

# ::id 631
# ::snt Press awash with Nigeria's general elections
# ::tok Press awash with Nigeria 's general elections
# ::alignments 0-1|0.0 1-2|0 3-4|0.1.1+0.1.1.0+0.1.1.0.0 5-6|0.1.0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.364077 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	awash	1-2
# ::node	0.0	press	0-1
# ::node	0.1	elect-01	6-7
# ::node	0.1.0	general-02	5-6
# ::node	0.1.1	country	3-4
# ::node	0.1.1.0	name	3-4
# ::node	0.1.1.0.0	nigeria	3-4
# ::root	0	awash
# ::edge	awash	mod	press	0	0.0
# ::edge	awash	prep-with	elect-01	0	0.1
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	elect-01	ARG1-of	general-02	0.1	0.1.0
# ::edge	elect-01	location	country	0.1	0.1.1
# ::edge	name	op1	nigeria	0.1.1.0	0.1.1.0.0
(MRPNode-0 / awash :mod (MRPNode-1 / press) :prep-with (MRPNode-2 / elect-01 :ARG1-of (MRPNode-3 / general-02) :location (MRPNode-4 / country :name (MRPNode-5 / name :op1 nigeria))))

# ::id 632
# ::snt South Korea reports 14th Mers death, 12 new cases
# ::tok South Korea reports 14th Mers death , 12 new cases
# ::alignments 0-2|0.1+0.1.0+0.1.0.0+0.1.0.1 2-3|0 5-6|0.0 7-8|0.0.0.0.0 8-9|0.0.0.0.1 9-10|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.370402 ::parser eager_oracle ::smatch 0.8 ::n_actions 29
# ::node	0	report-01	2-3
# ::node	0.0	die-01	5-6
# ::node	0.0.0	cause-01	
# ::node	0.0.0.0	case-04	9-10
# ::node	0.0.0.0.0	12	7-8
# ::node	0.0.0.0.1	new-01	8-9
# ::node	0.0.1	ordinal-entity	
# ::node	0.0.1.0	14	
# ::node	0.1	country	0-2
# ::node	0.1.0	name	0-2
# ::node	0.1.0.0	south	0-2
# ::node	0.1.0.1	korea	0-2
# ::root	0	report-01
# ::edge	case-04	ARG1-of	new-01	0.0.0.0	0.0.0.0.1
# ::edge	case-04	quant	12	0.0.0.0	0.0.0.0.0
# ::edge	cause-01	ARG1	case-04	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	die-01	ARG1	cause-01	0.0	0.0.0
# ::edge	die-01	ARG1	ordinal-entity	0.0	0.0.1
# ::edge	name	op1	south	0.1.0	0.1.0.0
# ::edge	name	op2	korea	0.1.0	0.1.0.1
# ::edge	ordinal-entity	value	14	0.0.1	0.0.1.0
# ::edge	report-01	ARG0	country	0	0.1
# ::edge	report-01	ARG1	die-01	0	0.0
(MRPNode-0 / report-01 :ARG1 (MRPNode-1 / die-01 :ARG1 (MRPNode-2 / cause-01 :ARG1 (MRPNode-3 / case-04 :quant 12 :ARG1-of (MRPNode-4 / new-01))) :ARG1 (MRPNode-5 / ordinal-entity :value 14)) :ARG0 (MRPNode-6 / country :name (MRPNode-7 / name :op1 south :op2 korea)))

# ::id 633
# ::snt South Korean woman in contact with MERS patient dies
# ::tok South Korean woman in contact with MERS patient dies
# ::alignments 0-2|0.0.0+0.0.0.0+0.0.0.0.0+0.0.0.0.1 2-3|0.0 4-5|0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.374463 ::parser eager_oracle ::smatch 0.7857142857142857 ::n_actions 23
# ::node	0	contact-01	4-5
# ::node	0.0	woman	2-3
# ::node	0.0.0	country	0-2
# ::node	0.0.0.0	name	0-2
# ::node	0.0.0.0.0	south	0-2
# ::node	0.0.0.0.1	korea	0-2
# ::node	0.1	patient	7-8
# ::node	0.1.0	have-org-role-91	
# ::node	0.1.0.0	member	
# ::root	0	contact-01
# ::edge	contact-01	ARG1	patient	0	0.1
# ::edge	contact-01	ARG1	woman	0	0.0
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	have-org-role-91	ARG1	member	0.1.0	0.1.0.0
# ::edge	name	op1	south	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	korea	0.0.0.0	0.0.0.0.1
# ::edge	patient	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	woman	location	country	0.0	0.0.0
(MRPNode-0 / contact-01 :ARG1 (MRPNode-1 / woman :location (MRPNode-2 / country :name (MRPNode-3 / name :op1 south :op2 korea))) :ARG1 (MRPNode-4 / patient :ARG0-of (MRPNode-5 / have-org-role-91 :ARG1 (MRPNode-6 / member))))

# ::id 634
# ::snt Observatory says Russian air strikes kill 45 in Syria
# ::tok Observatory says Russian air strikes kill 45 in Syria
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 3-4|0.0.1.1 4-5|0.0.1 5-6|0.0 6-7|0.0.0+0.0.0.0 8-9|0.0.2+0.0.2.0+0.0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.383629 ::parser eager_oracle ::smatch 0.9615384615384616 ::n_actions 39
# ::node	0	say-01	1-2
# ::node	0.0	kill-01	5-6
# ::node	0.0.0	person	6-7
# ::node	0.0.0.0	45	6-7
# ::node	0.0.1	strike-01	4-5
# ::node	0.0.1.0	country	2-3
# ::node	0.0.1.0.0	name	2-3
# ::node	0.0.1.0.0.0	russia	2-3
# ::node	0.0.1.1	air	3-4
# ::node	0.0.2	country	8-9
# ::node	0.0.2.0	name	8-9
# ::node	0.0.2.0.0	syria	8-9
# ::node	0.1	organization	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	observatory	0-1
# ::root	0	say-01
# ::edge	country	name	name	0.0.1.0	0.0.1.0.0
# ::edge	country	name	name	0.0.2	0.0.2.0
# ::edge	kill-01	ARG0	strike-01	0.0	0.0.1
# ::edge	kill-01	ARG1	person	0.0	0.0.0
# ::edge	kill-01	location	country	0.0	0.0.2
# ::edge	name	op1	observatory	0.1.0	0.1.0.0
# ::edge	name	op1	russia	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	syria	0.0.2.0	0.0.2.0.0
# ::edge	organization	name	name	0.1	0.1.0
# ::edge	person	quant	45	0.0.0	0.0.0.0
# ::edge	say-01	ARG0	organization	0	0.1
# ::edge	say-01	ARG1	kill-01	0	0.0
# ::edge	strike-01	ARG0	country	0.0.1	0.0.1.0
# ::edge	strike-01	ARG2	air	0.0.1	0.0.1.1
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / kill-01 :ARG1 (MRPNode-2 / person :quant 45) :ARG0 (MRPNode-3 / strike-01 :ARG0 (MRPNode-4 / country :name (MRPNode-5 / name :op1 russia)) :ARG2 (MRPNode-6 / air)) :location (MRPNode-7 / country :name (MRPNode-8 / name :op1 syria))) :ARG0 (MRPNode-9 / organization :name (MRPNode-10 / name :op1 observatory)))

# ::id 635
# ::snt Why Cyprus backs Cameron's push for UK air strikes in Syria
# ::tok Why Cyprus backs Cameron 's push for UK air strikes in Syria
# ::alignments 1-2|0.1+0.1.0+0.1.0.0 2-3|0 3-4|0.0.1+0.0.1.0+0.0.1.0.0 5-6|0.0 7-8|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 8-9|0.0.0.1 9-10|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.397187 ::parser eager_oracle ::smatch 0.92 ::n_actions 35
# ::node	0	back-01	2-3
# ::node	0.0	push-02	5-6
# ::node	0.0.0	strike-01	9-10
# ::node	0.0.0.0	country	7-8
# ::node	0.0.0.0.0	name	7-8
# ::node	0.0.0.0.0.0	uk	7-8
# ::node	0.0.0.1	air	8-9
# ::node	0.0.1	person	3-4
# ::node	0.0.1.0	name	3-4
# ::node	0.0.1.0.0	cameron	3-4
# ::node	0.1	country	1-2
# ::node	0.1.0	name	1-2
# ::node	0.1.0.0	cyprus	1-2
# ::node	0.2	cause-01	
# ::node	0.2.0	amr-unknown	
# ::root	0	back-01
# ::edge	back-01	ARG0	country	0	0.1
# ::edge	back-01	ARG1	push-02	0	0.0
# ::edge	back-01	ARG1-of	cause-01	0	0.2
# ::edge	cause-01	ARG0	amr-unknown	0.2	0.2.0
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	name	op1	cameron	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	cyprus	0.1.0	0.1.0.0
# ::edge	name	op1	uk	0.0.0.0.0	0.0.0.0.0.0
# ::edge	person	name	name	0.0.1	0.0.1.0
# ::edge	push-02	ARG0	person	0.0	0.0.1
# ::edge	push-02	ARG1	strike-01	0.0	0.0.0
# ::edge	strike-01	ARG0	country	0.0.0	0.0.0.0
# ::edge	strike-01	ARG2	air	0.0.0	0.0.0.1
(MRPNode-0 / back-01 :ARG1 (MRPNode-1 / push-02 :ARG1 (MRPNode-2 / strike-01 :ARG0 (MRPNode-3 / country :name (MRPNode-4 / name :op1 uk)) :ARG2 (MRPNode-5 / air)) :ARG0 (MRPNode-6 / person :name (MRPNode-7 / name :op1 cameron))) :ARG0 (MRPNode-8 / country :name (MRPNode-9 / name :op1 cyprus)) :ARG1-of (MRPNode-10 / cause-01 :ARG0 (MRPNode-11 / amr-unknown)))

# ::id 636
# ::snt Two-state solution between Palestinians, Israel pie in sky
# ::tok Two - state solution between Palestinians , Israel pie in sky
# ::alignments 0-1|0.0.0 2-3|0.0 5-6|0.2+0.2.0+0.2.0.0+0.2.0.0.0 7-8|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.402786 ::parser eager_oracle ::smatch 0.6470588235294117 ::n_actions 27
# ::node	0	solve-01	
# ::node	0.0	state	2-3
# ::node	0.0.0	2	0-1
# ::node	0.1	country	7-8
# ::node	0.1.0	name	7-8
# ::node	0.1.0.0	israel	7-8
# ::node	0.1.1	side-01	
# ::node	0.2	person	5-6
# ::node	0.2.0	country	5-6
# ::node	0.2.0.0	name	5-6
# ::node	0.2.0.0.0	palestine	5-6
# ::root	0	solve-01
# ::edge	country	location	side-01	0.1	0.1.1
# ::edge	country	name	name	0.1	0.1.0
# ::edge	country	name	name	0.2.0	0.2.0.0
# ::edge	name	op1	israel	0.1.0	0.1.0.0
# ::edge	name	op1	palestine	0.2.0.0	0.2.0.0.0
# ::edge	person	mod	country	0.2	0.2.0
# ::edge	solve-01	ARG0	country	0	0.1
# ::edge	solve-01	ARG0	state	0	0.0
# ::edge	solve-01	ARG2	person	0	0.2
# ::edge	state	quant	2	0.0	0.0.0
(MRPNode-0 / solve-01 :ARG0 (MRPNode-1 / state :quant 2) :ARG0 (MRPNode-2 / country :name (MRPNode-3 / name :op1 israel) :location (MRPNode-4 / side-01)) :ARG2 (MRPNode-5 / person :mod (MRPNode-6 / country :name (MRPNode-7 / name :op1 palestine))))

# ::id 637
# ::snt Lawmakers from both sides express outrage at Secret Service
# ::tok Lawmakers from both sides express outrage at Secret Service
# ::alignments 2-3|0.0.1.1.0 3-4|0.0.1.1 4-5|0 5-6|0.0 7-9|0.0.0+0.0.0.0+0.0.0.0.0+0.0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.407338 ::parser eager_oracle ::smatch 0.7878787878787878 ::n_actions 25
# ::node	0	express-01	4-5
# ::node	0.0	outrage-01	5-6
# ::node	0.0.0	government-organization	7-9
# ::node	0.0.0.0	name	7-9
# ::node	0.0.0.0.0	secret	7-9
# ::node	0.0.0.0.1	service	7-9
# ::node	0.0.1	person	
# ::node	0.0.1.0	legislate-01	
# ::node	0.0.1.1	side	3-4
# ::node	0.0.1.1.0	both	2-3
# ::root	0	express-01
# ::edge	express-01	ARG0	person	0	0.0.1
# ::edge	express-01	ARG1	outrage-01	0	0.0
# ::edge	government-organization	name	name	0.0.0	0.0.0.0
# ::edge	name	op1	secret	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	service	0.0.0.0	0.0.0.0.1
# ::edge	outrage-01	ARG0	government-organization	0.0	0.0.0
# ::edge	outrage-01	ARG1	person	0.0	0.0.1
# ::edge	person	ARG0-of	legislate-01	0.0.1	0.0.1.0
# ::edge	person	source	side	0.0.1	0.0.1.1
# ::edge	side	mod	both	0.0.1.1	0.0.1.1.0
(MRPNode-0 / express-01 :ARG1 (MRPNode-1 / outrage-01 :ARG0 (MRPNode-2 / government-organization :name (MRPNode-3 / name :op1 secret :op2 service)) :ARG1 (MRPNode-4 / person :ARG0-of (MRPNode-5 / legislate-01) :source (MRPNode-6 / side :mod (MRPNode-7 / both)))) :ARG0 MRPNode-4)

# ::id 638
# ::snt UN chief condemns attack against peacekeepers in Mali
# ::tok UN chief condemns attack against peacekeepers in Mali
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 1-2|0.1+0.1.0+0.1.0.1 2-3|0 3-4|0.0 5-6|0.0.0 7-8|0.0.1+0.0.1.0+0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.413891 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	condemn-01	2-3
# ::node	0.0	attack-01	3-4
# ::node	0.0.0	peace	5-6
# ::node	0.0.1	country	7-8
# ::node	0.0.1.0	name	7-8
# ::node	0.0.1.0.0	mali	7-8
# ::node	0.1	person	1-2
# ::node	0.1.0	have-org-role-91	1-2
# ::node	0.1.0.0	organization	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	un	0-1
# ::node	0.1.0.1	chief	1-2
# ::root	0	condemn-01
# ::edge	attack-01	ARG1	peace	0.0	0.0.0
# ::edge	attack-01	location	country	0.0	0.0.1
# ::edge	condemn-01	ARG0	person	0	0.1
# ::edge	condemn-01	ARG1	attack-01	0	0.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	have-org-role-91	ARG1	organization	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	chief	0.1.0	0.1.0.1
# ::edge	name	op1	mali	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	un	0.1.0.0.0	0.1.0.0.0.0
# ::edge	organization	name	name	0.1.0.0	0.1.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
(MRPNode-0 / condemn-01 :ARG1 (MRPNode-1 / attack-01 :ARG1 (MRPNode-2 / peace) :location (MRPNode-3 / country :name (MRPNode-4 / name :op1 mali))) :ARG0 (MRPNode-5 / person :ARG0-of (MRPNode-6 / have-org-role-91 :ARG1 (MRPNode-7 / organization :name (MRPNode-8 / name :op1 un)) :ARG2 (MRPNode-9 / chief))))

# ::id 639
# ::snt More than 60 killed at Iraq funeral
# ::tok More than 60 killed at Iraq funeral
# ::alignments 0-1|0.0+0.0.0 2-3|0.0.0.0 3-4|0 5-6|0.1.0+0.1.0.0+0.1.0.0.0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.418083 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	kill-01	3-4
# ::node	0.0	person	0-1
# ::node	0.0.0	more-than	0-1
# ::node	0.0.0.0	60	2-3
# ::node	0.1	funeral	6-7
# ::node	0.1.0	country	5-6
# ::node	0.1.0.0	name	5-6
# ::node	0.1.0.0.0	iraq	5-6
# ::root	0	kill-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	funeral	location	country	0.1	0.1.0
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	location	funeral	0	0.1
# ::edge	more-than	op1	60	0.0.0	0.0.0.0
# ::edge	name	op1	iraq	0.1.0.0	0.1.0.0.0
# ::edge	person	quant	more-than	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant (MRPNode-2 / more-than :op1 60)) :location (MRPNode-3 / funeral :location (MRPNode-4 / country :name (MRPNode-5 / name :op1 iraq))))

# ::id 640
# ::snt US: Russia Massing Troops on Ukraine Border
# ::tok US : Russia Massing Troops on Ukraine Border
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 2-3|0.1+0.1.0+0.1.0.0 6-7|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.422894 ::parser eager_oracle ::smatch 0.7500000000000001 ::n_actions 17
# ::node	0	and	
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	us	0-1
# ::node	0.1	country	2-3
# ::node	0.1.0	name	2-3
# ::node	0.1.0.0	russia	2-3
# ::node	0.2	country	6-7
# ::node	0.2.0	name	6-7
# ::node	0.2.0.0	ukraine	6-7
# ::root	0	and
# ::edge	and	op1	country	0	0.0
# ::edge	and	op2	country	0	0.1
# ::edge	and	op3	country	0	0.2
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	country	name	name	0.2	0.2.0
# ::edge	name	op1	russia	0.1.0	0.1.0.0
# ::edge	name	op1	ukraine	0.2.0	0.2.0.0
# ::edge	name	op1	us	0.0.0	0.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 us)) :op2 (MRPNode-3 / country :name (MRPNode-4 / name :op1 russia)) :op3 (MRPNode-5 / country :name (MRPNode-6 / name :op1 ukraine)))

# ::id 641
# ::snt Polling stations open at Ukrainian presidential election
# ::tok Polling stations open at Ukrainian presidential election
# ::alignments 0-1|0.0.0 1-2|0.0 2-3|0 4-5|0.1.0+0.1.0.0+0.1.0.0.0 5-6|0.1.1+0.1.1.0+0.1.1.0.0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.428405 ::parser eager_oracle ::smatch 0.9473684210526315 ::n_actions 35
# ::node	0	open-01	2-3
# ::node	0.0	station	1-2
# ::node	0.0.0	poll-01	0-1
# ::node	0.1	elect-01	6-7
# ::node	0.1.0	country	4-5
# ::node	0.1.0.0	name	4-5
# ::node	0.1.0.0.0	ukraine	4-5
# ::node	0.1.1	person	5-6
# ::node	0.1.1.0	have-org-role-91	5-6
# ::node	0.1.1.0.0	president	5-6
# ::root	0	open-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	elect-01	ARG1	country	0.1	0.1.0
# ::edge	elect-01	ARG2	person	0.1	0.1.1
# ::edge	have-org-role-91	ARG2	president	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	ukraine	0.1.0.0	0.1.0.0.0
# ::edge	open-01	ARG1	station	0	0.0
# ::edge	open-01	time	elect-01	0	0.1
# ::edge	person	ARG0-of	have-org-role-91	0.1.1	0.1.1.0
# ::edge	station	mod	poll-01	0.0	0.0.0
(MRPNode-0 / open-01 :ARG1 (MRPNode-1 / station :mod (MRPNode-2 / poll-01)) :time (MRPNode-3 / elect-01 :ARG1 (MRPNode-4 / country :name (MRPNode-5 / name :op1 ukraine)) :ARG2 (MRPNode-6 / person :ARG0-of (MRPNode-7 / have-org-role-91 :ARG2 (MRPNode-8 / president)))))

# ::id 642
# ::snt New major earthquake rocks southwest Pakistan
# ::tok New major earthquake rocks southwest Pakistan
# ::alignments 0-1|0.1.0 1-2|0.1.1 2-3|0.1 3-4|0 4-5|0.0 5-6|0.0.0+0.0.0.0+0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.432439 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	rock	3-4
# ::node	0.0	southwest	4-5
# ::node	0.0.0	country	5-6
# ::node	0.0.0.0	name	5-6
# ::node	0.0.0.0.0	pakistan	5-6
# ::node	0.1	earthquake	2-3
# ::node	0.1.0	new-01	0-1
# ::node	0.1.1	major-02	1-2
# ::root	0	rock
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	earthquake	ARG1-of	major-02	0.1	0.1.1
# ::edge	earthquake	ARG1-of	new-01	0.1	0.1.0
# ::edge	name	op1	pakistan	0.0.0.0	0.0.0.0.0
# ::edge	rock	ARG1-of	earthquake	0	0.1
# ::edge	rock	location	southwest	0	0.0
# ::edge	southwest	part-of	country	0.0	0.0.0
(MRPNode-0 / rock :location (MRPNode-1 / southwest :part-of (MRPNode-2 / country :name (MRPNode-3 / name :op1 pakistan))) :ARG1-of (MRPNode-4 / earthquake :ARG1-of (MRPNode-5 / new-01) :ARG1-of (MRPNode-6 / major-02)))

# ::id 643
# ::snt Two killed, seventeen injured in Raiwind road accident
# ::tok Two killed , seventeen injured in Raiwind road accident
# ::alignments 0-1|0.0.0+0.0.0.0 1-2|0.0 4-5|0.1 6-7|0.2.0.0+0.2.0.0.0 7-8|0.2.0 8-9|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:41.437582 ::parser eager_oracle ::smatch 0.6451612903225806 ::n_actions 31
# ::node	0	and	
# ::node	0.0	kill-01	1-2
# ::node	0.0.0	person	0-1
# ::node	0.0.0.0	2	0-1
# ::node	0.1	injure-01	4-5
# ::node	0.1.0	person	
# ::node	0.1.0.0	7	
# ::node	0.2	accident	8-9
# ::node	0.2.0	road	7-8
# ::node	0.2.0.0	name	6-7
# ::node	0.2.0.0.0	raiwind	6-7
# ::root	0	and
# ::edge	accident	mod	road	0.2	0.2.0
# ::edge	and	location	accident	0	0.2
# ::edge	and	op1	kill-01	0	0.0
# ::edge	and	op2	injure-01	0	0.1
# ::edge	injure-01	ARG1	person	0.1	0.1.0
# ::edge	kill-01	ARG1	person	0.0	0.0.0
# ::edge	name	op1	raiwind	0.2.0.0	0.2.0.0.0
# ::edge	person	quant	2	0.0.0	0.0.0.0
# ::edge	person	quant	7	0.1.0	0.1.0.0
# ::edge	road	name	name	0.2.0	0.2.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / kill-01 :ARG1 (MRPNode-2 / person :quant 2)) :op2 (MRPNode-3 / injure-01 :ARG1 (MRPNode-4 / person :quant 7)) :location (MRPNode-5 / accident :mod (MRPNode-6 / road :name (MRPNode-7 / name :op1 raiwind))))

# ::id 644
# ::snt 2 dead, 8 injured in central Israel traffic accident
# ::tok 2 dead , 8 injured in central Israel traffic accident
# ::alignments 0-1|0.0.0+0.0.0.0 3-4|0.1.0+0.1.0.0 4-5|0.1 6-7|0.2.1 7-8|0.2.1.0+0.2.1.0.0+0.2.1.0.0.0 8-9|0.2.0 9-10|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:41.449935 ::parser eager_oracle ::smatch 0.761904761904762 ::n_actions 39
# ::node	0	and	
# ::node	0.0	die-01	
# ::node	0.0.0	person	0-1
# ::node	0.0.0.0	2	0-1
# ::node	0.1	injure-01	4-5
# ::node	0.1.0	person	3-4
# ::node	0.1.0.0	8	3-4
# ::node	0.2	accident	9-10
# ::node	0.2.0	traffic	8-9
# ::node	0.2.1	center	6-7
# ::node	0.2.1.0	country	7-8
# ::node	0.2.1.0.0	name	7-8
# ::node	0.2.1.0.0.0	israel	7-8
# ::root	0	and
# ::edge	accident	location	center	0.2	0.2.1
# ::edge	accident	mod	traffic	0.2	0.2.0
# ::edge	and	location	accident	0	0.2
# ::edge	and	op1	die-01	0	0.0
# ::edge	and	op2	injure-01	0	0.1
# ::edge	center	part-of	country	0.2.1	0.2.1.0
# ::edge	country	name	name	0.2.1.0	0.2.1.0.0
# ::edge	die-01	ARG1	person	0.0	0.0.0
# ::edge	injure-01	ARG1	person	0.1	0.1.0
# ::edge	name	op1	israel	0.2.1.0.0	0.2.1.0.0.0
# ::edge	person	quant	2	0.0.0	0.0.0.0
# ::edge	person	quant	8	0.1.0	0.1.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / die-01 :ARG1 (MRPNode-2 / person :quant 2)) :op2 (MRPNode-3 / injure-01 :ARG1 (MRPNode-4 / person :quant 8)) :location (MRPNode-5 / accident :mod (MRPNode-6 / traffic) :location (MRPNode-7 / center :part-of (MRPNode-8 / country :name (MRPNode-9 / name :op1 israel)))))

# ::id 645
# ::snt Sweden recognizes Palestinian state
# ::tok Sweden recognizes Palestinian state
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.0+0.0.0.0+0.0.0.0.0 3-4|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.452629 ::parser eager_oracle ::smatch 0.9285714285714286 ::n_actions 18
# ::node	0	recognize-01	1-2
# ::node	0.0	state	3-4
# ::node	0.0.0	country	2-3
# ::node	0.0.0.0	name	2-3
# ::node	0.0.0.0.0	palestine	2-3
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	sweden	0-1
# ::root	0	recognize-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	name	op1	palestine	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	sweden	0.1.0	0.1.0.0
# ::edge	recognize-01	ARG0	country	0	0.1
# ::edge	recognize-01	ARG1	state	0	0.0
# ::edge	state	mod	country	0.0	0.0.0
(MRPNode-0 / recognize-01 :ARG1 (MRPNode-1 / state :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 palestine))) :ARG0 (MRPNode-4 / country :name (MRPNode-5 / name :op1 sweden)))

# ::id 646
# ::snt Five killed in Saudi Arabia shooting
# ::tok Five killed in Saudi Arabia shooting
# ::alignments 0-1|0.0.0 1-2|0 3-5|0.1+0.1.0+0.1.0.0+0.1.0.1 5-6|0.0+0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.455966 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	kill-01	1-2
# ::node	0.0	person	5-6
# ::node	0.0.0	5	0-1
# ::node	0.0.1	shoot-02	5-6
# ::node	0.1	country	3-5
# ::node	0.1.0	name	3-5
# ::node	0.1.0.0	saudi	3-5
# ::node	0.1.0.1	arabia	3-5
# ::root	0	kill-01
# ::edge	country	name	name	0.1	0.1.0
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	location	country	0	0.1
# ::edge	name	op1	saudi	0.1.0	0.1.0.0
# ::edge	name	op2	arabia	0.1.0	0.1.0.1
# ::edge	person	ARG0-of	shoot-02	0.0	0.0.1
# ::edge	person	quant	5	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 5 :ARG0-of (MRPNode-2 / shoot-02)) :location (MRPNode-3 / country :name (MRPNode-4 / name :op1 saudi :op2 arabia)))

# ::id 647
# ::snt 38 IS militants killed in clashes, air strikes in Iraq
# ::tok 38 IS militants killed in clashes , air strikes in Iraq
# ::alignments 0-1|0.0.0 1-2|0.0.2.0+0.0.2.0.0+0.0.2.0.0.0 2-3|0.0.2+0.0.2.1 3-4|0 5-6|0.1.0 7-8|0.0.1.1 8-9|0.0+0.0.1 10-11|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.470822 ::parser eager_oracle ::smatch 0.92 ::n_actions 46
# ::node	0	kill-01	3-4
# ::node	0.0	person	8-9
# ::node	0.0.0	38	0-1
# ::node	0.0.1	strike-01	8-9
# ::node	0.0.1.0	country	10-11
# ::node	0.0.1.0.0	name	10-11
# ::node	0.0.1.0.0.0	iraq	10-11
# ::node	0.0.1.1	air	7-8
# ::node	0.0.2	have-org-role-91	2-3
# ::node	0.0.2.0	criminal-organization	1-2
# ::node	0.0.2.0.0	name	1-2
# ::node	0.0.2.0.0.0	is	1-2
# ::node	0.0.2.1	militant	2-3
# ::node	0.1	cause-01	
# ::node	0.1.0	clash-01	5-6
# ::root	0	kill-01
# ::edge	cause-01	ARG0	clash-01	0.1	0.1.0
# ::edge	country	name	name	0.0.1.0	0.0.1.0.0
# ::edge	criminal-organization	name	name	0.0.2.0	0.0.2.0.0
# ::edge	have-org-role-91	ARG1	criminal-organization	0.0.2	0.0.2.0
# ::edge	have-org-role-91	ARG2	militant	0.0.2	0.0.2.1
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	ARG1-of	cause-01	0	0.1
# ::edge	name	op1	iraq	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	is	0.0.2.0.0	0.0.2.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.2
# ::edge	person	ARG0-of	strike-01	0.0	0.0.1
# ::edge	person	quant	38	0.0	0.0.0
# ::edge	strike-01	location	country	0.0.1	0.0.1.0
# ::edge	strike-01	mod	air	0.0.1	0.0.1.1
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 38 :ARG0-of (MRPNode-2 / strike-01 :location (MRPNode-3 / country :name (MRPNode-4 / name :op1 iraq)) :mod (MRPNode-5 / air)) :ARG0-of (MRPNode-6 / have-org-role-91 :ARG1 (MRPNode-7 / criminal-organization :name (MRPNode-8 / name :op1 is)) :ARG2 (MRPNode-9 / militant))) :ARG1-of (MRPNode-10 / cause-01 :ARG0 (MRPNode-11 / clash-01)))

# ::id 648
# ::snt Funeral of MH17 victim Liam Sweeney takes place in Newcastle
# ::tok Funeral of MH 17 victim Liam Sweeney takes place in Newcastle
# ::alignments 0-1|0.0 2-3|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 4-5|0.0.0.0 5-7|0.0.0+0.0.0.1+0.0.0.1.0+0.0.0.1.1 10-11|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.478201 ::parser eager_oracle ::smatch 0.8095238095238095 ::n_actions 27
# ::node	0	be-located-at-91	
# ::node	0.0	funeral	0-1
# ::node	0.0.0	person	5-7
# ::node	0.0.0.0	victimize-01	4-5
# ::node	0.0.0.0.0	person	2-3
# ::node	0.0.0.0.0.0	name	2-3
# ::node	0.0.0.0.0.0.0	mh17	2-3
# ::node	0.0.0.1	name	5-7
# ::node	0.0.0.1.0	liam	5-7
# ::node	0.0.0.1.1	sweeney	5-7
# ::node	0.1	city	10-11
# ::node	0.1.0	name	10-11
# ::node	0.1.0.0	newcastle	10-11
# ::root	0	be-located-at-91
# ::edge	be-located-at-91	ARG1	funeral	0	0.0
# ::edge	be-located-at-91	ARG2	city	0	0.1
# ::edge	city	name	name	0.1	0.1.0
# ::edge	funeral	poss	person	0.0	0.0.0
# ::edge	name	op1	liam	0.0.0.1	0.0.0.1.0
# ::edge	name	op1	mh17	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op1	newcastle	0.1.0	0.1.0.0
# ::edge	name	op2	sweeney	0.0.0.1	0.0.0.1.1
# ::edge	person	mod	victimize-01	0.0.0	0.0.0.0
# ::edge	person	name	name	0.0.0	0.0.0.1
# ::edge	person	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	victimize-01	ARG0	person	0.0.0.0	0.0.0.0.0
(MRPNode-0 / be-located-at-91 :ARG1 (MRPNode-1 / funeral :poss (MRPNode-2 / person :mod (MRPNode-3 / victimize-01 :ARG0 (MRPNode-4 / person :name (MRPNode-5 / name :op1 mh17))) :name (MRPNode-6 / name :op1 liam :op2 sweeney))) :ARG2 (MRPNode-7 / city :name (MRPNode-8 / name :op1 newcastle)))

# ::id 649
# ::snt India's top court orders investigation into job scam, deaths
# ::tok India 's top court orders investigation into job scam , deaths
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 2-3|0.0.1 3-4|0.0 4-5|0 5-6|0.1 7-8|0.1.1.0 8-9|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.486794 ::parser eager_oracle ::smatch 0.9444444444444444 ::n_actions 34
# ::node	0	order-01	4-5
# ::node	0.0	court	3-4
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	india	0-1
# ::node	0.0.1	top	2-3
# ::node	0.1	investigate-01	5-6
# ::node	0.1.0	die-01	
# ::node	0.1.1	scam-01	8-9
# ::node	0.1.1.0	job	7-8
# ::root	0	order-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	court	mod	country	0.0	0.0.0
# ::edge	court	mod	top	0.0	0.0.1
# ::edge	investigate-01	ARG1	die-01	0.1	0.1.0
# ::edge	investigate-01	ARG1	scam-01	0.1	0.1.1
# ::edge	name	op1	india	0.0.0.0	0.0.0.0.0
# ::edge	order-01	ARG1	court	0	0.0
# ::edge	order-01	ARG2	investigate-01	0	0.1
# ::edge	scam-01	ARG1	job	0.1.1	0.1.1.0
(MRPNode-0 / order-01 :ARG1 (MRPNode-1 / court :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 india)) :mod (MRPNode-4 / top)) :ARG2 (MRPNode-5 / investigate-01 :ARG1 (MRPNode-6 / die-01) :ARG1 (MRPNode-7 / scam-01 :ARG1 (MRPNode-8 / job))))

# ::id 650
# ::snt 'Bookkeeper of Auschwitz' Sentenced to Four Years in Prison
# ::tok ' Bookkeeper of Auschwitz ' Sentenced to Four Years in Prison
# ::alignments 3-4|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 5-6|0 7-8|0.1.0.0 8-9|0.1.0+0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.492604 ::parser eager_oracle ::smatch 0.6666666666666667 ::n_actions 27
# ::node	0	sentence-01	5-6
# ::node	0.0	person	
# ::node	0.0.0	keep-01	
# ::node	0.0.0.0	park	3-4
# ::node	0.0.0.0.0	name	3-4
# ::node	0.0.0.0.0.0	auschwitz	3-4
# ::node	0.1	imprison-01	
# ::node	0.1.0	temporal-quantity	8-9
# ::node	0.1.0.0	4	7-8
# ::node	0.1.0.1	year	8-9
# ::root	0	sentence-01
# ::edge	imprison-01	ARG2	temporal-quantity	0.1	0.1.0
# ::edge	keep-01	ARG1	park	0.0.0	0.0.0.0
# ::edge	name	op1	auschwitz	0.0.0.0.0	0.0.0.0.0.0
# ::edge	park	name	name	0.0.0.0	0.0.0.0.0
# ::edge	person	ARG0-of	keep-01	0.0	0.0.0
# ::edge	sentence-01	ARG1	person	0	0.0
# ::edge	sentence-01	ARG2	imprison-01	0	0.1
# ::edge	temporal-quantity	quant	4	0.1.0	0.1.0.0
# ::edge	temporal-quantity	unit	year	0.1.0	0.1.0.1
(MRPNode-0 / sentence-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / keep-01 :ARG1 (MRPNode-3 / park :name (MRPNode-4 / name :op1 auschwitz)))) :ARG2 (MRPNode-5 / imprison-01 :ARG2 (MRPNode-6 / temporal-quantity :quant 4 :unit (MRPNode-7 / year))))

# ::id 651
# ::snt Cameron to hold talks with Sturgeon on UK future
# ::tok Cameron to hold talks with Sturgeon on UK future
# ::alignments 0-1|0.0.2+0.0.2.0+0.0.2.0.0 2-3|0 3-4|0.0 5-6|0.0.0+0.0.0.0+0.0.0.0.0 7-8|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 8-9|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.499298 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	hold-04	2-3
# ::node	0.0	talk-01	3-4
# ::node	0.0.0	person	5-6
# ::node	0.0.0.0	name	5-6
# ::node	0.0.0.0.0	sturgeon	5-6
# ::node	0.0.1	future	8-9
# ::node	0.0.1.0	country	7-8
# ::node	0.0.1.0.0	name	7-8
# ::node	0.0.1.0.0.0	uk	7-8
# ::node	0.0.2	person	0-1
# ::node	0.0.2.0	name	0-1
# ::node	0.0.2.0.0	cameron	0-1
# ::root	0	hold-04
# ::edge	country	name	name	0.0.1.0	0.0.1.0.0
# ::edge	future	mod	country	0.0.1	0.0.1.0
# ::edge	hold-04	ARG0	person	0	0.0.2
# ::edge	hold-04	ARG1	talk-01	0	0.0
# ::edge	name	op1	cameron	0.0.2.0	0.0.2.0.0
# ::edge	name	op1	sturgeon	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	uk	0.0.1.0.0	0.0.1.0.0.0
# ::edge	person	name	name	0.0.0	0.0.0.0
# ::edge	person	name	name	0.0.2	0.0.2.0
# ::edge	talk-01	ARG0	person	0.0	0.0.2
# ::edge	talk-01	ARG1	future	0.0	0.0.1
# ::edge	talk-01	ARG1	person	0.0	0.0.0
(MRPNode-0 / hold-04 :ARG1 (MRPNode-1 / talk-01 :ARG1 (MRPNode-2 / person :name (MRPNode-3 / name :op1 sturgeon)) :ARG1 (MRPNode-4 / future :mod (MRPNode-5 / country :name (MRPNode-6 / name :op1 uk))) :ARG0 (MRPNode-7 / person :name (MRPNode-8 / name :op1 cameron))) :ARG0 MRPNode-7)

# ::id 652
# ::snt US Senator Ted Cruz to announce presidential bid
# ::tok US Senator Ted Cruz to announce presidential bid
# ::alignments 0-1|0.1.1.0+0.1.1.0.0+0.1.1.0.0.0 1-2|0.1.1+0.1.1.1 2-4|0.1+0.1.0+0.1.0.0+0.1.0.1 5-6|0 6-7|0.0.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.505357 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	announce-01	5-6
# ::node	0.0	bid-01	7-8
# ::node	0.0.0	president	6-7
# ::node	0.1	person	2-4
# ::node	0.1.0	name	2-4
# ::node	0.1.0.0	ted	2-4
# ::node	0.1.0.1	cruz	2-4
# ::node	0.1.1	have-org-role-91	1-2
# ::node	0.1.1.0	country	0-1
# ::node	0.1.1.0.0	name	0-1
# ::node	0.1.1.0.0.0	us	0-1
# ::node	0.1.1.1	senator	1-2
# ::root	0	announce-01
# ::edge	announce-01	ARG0	person	0	0.1
# ::edge	announce-01	ARG1	bid-01	0	0.0
# ::edge	bid-01	ARG1	president	0.0	0.0.0
# ::edge	country	name	name	0.1.1.0	0.1.1.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.1	0.1.1.0
# ::edge	have-org-role-91	ARG2	senator	0.1.1	0.1.1.1
# ::edge	name	op1	ted	0.1.0	0.1.0.0
# ::edge	name	op1	us	0.1.1.0.0	0.1.1.0.0.0
# ::edge	name	op2	cruz	0.1.0	0.1.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.1
# ::edge	person	name	name	0.1	0.1.0
(MRPNode-0 / announce-01 :ARG1 (MRPNode-1 / bid-01 :ARG1 (MRPNode-2 / president)) :ARG0 (MRPNode-3 / person :name (MRPNode-4 / name :op1 ted :op2 cruz) :ARG0-of (MRPNode-5 / have-org-role-91 :ARG1 (MRPNode-6 / country :name (MRPNode-7 / name :op1 us)) :ARG2 (MRPNode-8 / senator))))

# ::id 653
# ::snt Tour De France Pack Sets off for Stage 15
# ::tok Tour De France Pack Sets off for Stage 15
# ::alignments 0-3|0.1+0.1.0+0.1.0.0+0.1.0.1+0.1.0.2 4-5|0 7-8|0.0 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.509105 ::parser eager_oracle ::smatch 0.8799999999999999 ::n_actions 23
# ::node	0	set-08	4-5
# ::node	0.0	Stage	7-8
# ::node	0.0.0	15	8-9
# ::node	0.1	team	0-3
# ::node	0.1.0	name	0-3
# ::node	0.1.0.0	tour	0-3
# ::node	0.1.0.1	de	0-3
# ::node	0.1.0.2	france	0-3
# ::root	0	set-08
# ::edge	Stage	mod	15	0.0	0.0.0
# ::edge	name	op1	tour	0.1.0	0.1.0.0
# ::edge	name	op2	de	0.1.0	0.1.0.1
# ::edge	name	op3	france	0.1.0	0.1.0.2
# ::edge	set-08	ARG1	Stage	0	0.0
# ::edge	set-08	ARG1	team	0	0.1
# ::edge	team	name	name	0.1	0.1.0
(MRPNode-0 / set-08 :ARG1 (MRPNode-1 / Stage :mod 15) :ARG1 (MRPNode-2 / team :name (MRPNode-3 / name :op1 tour :op2 de :op3 france)))

# ::id 654
# ::snt Spanish bulls gore seven to death
# ::tok Spanish bulls gore seven to death
# ::alignments 1-2|0.2 3-4|0.0+0.0.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.512079 ::parser eager_oracle ::smatch 0.23529411764705882 ::n_actions 19
# ::node	0	go-02	
# ::node	0.0	person	3-4
# ::node	0.0.0	7	3-4
# ::node	0.1	die-01	5-6
# ::node	0.2	bullshit	1-2
# ::node	0.2.0	country	
# ::node	0.2.0.0	name	
# ::node	0.2.0.0.0	spain	
# ::root	0	go-02
# ::edge	bullshit	mod	country	0.2	0.2.0
# ::edge	country	name	name	0.2.0	0.2.0.0
# ::edge	go-02	ARG0	bullshit	0	0.2
# ::edge	go-02	ARG0	die-01	0	0.1
# ::edge	go-02	ARG0	person	0	0.0
# ::edge	name	op1	spain	0.2.0.0	0.2.0.0.0
# ::edge	person	quant	7	0.0	0.0.0
(MRPNode-0 / go-02 :ARG0 (MRPNode-1 / person :quant 7) :ARG0 (MRPNode-2 / die-01) :ARG0 (MRPNode-3 / bullshit :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 spain))))

# ::id 655
# ::snt China keeps an eye on visiting tiger freed by Russian President
# ::tok China keeps an eye on visiting tiger freed by Russian President
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 1-2|0 5-6|0.0.0.1 6-7|0.0.0 7-8|0.0.0.0 9-10|0.0.0.0.0.0.0+0.0.0.0.0.0.0.0+0.0.0.0.0.0.0.0.0 10-11|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.522769 ::parser eager_oracle ::smatch 0.8627450980392156 ::n_actions 42
# ::node	0	keep-02	1-2
# ::node	0.0	have-eye-on-05	
# ::node	0.0.0	tiger	6-7
# ::node	0.0.0.0	free-01	7-8
# ::node	0.0.0.0.0	person	10-11
# ::node	0.0.0.0.0.0	have-org-role-91	10-11
# ::node	0.0.0.0.0.0.0	country	9-10
# ::node	0.0.0.0.0.0.0.0	name	9-10
# ::node	0.0.0.0.0.0.0.0.0	russia	9-10
# ::node	0.0.0.0.0.0.1	president	10-11
# ::node	0.0.0.1	visit-01	5-6
# ::node	0.0.1	country	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	china	0-1
# ::root	0	keep-02
# ::edge	country	name	name	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	free-01	ARG0	person	0.0.0.0	0.0.0.0.0
# ::edge	have-eye-on-05	ARG0	country	0.0	0.0.1
# ::edge	have-eye-on-05	ARG1	tiger	0.0	0.0.0
# ::edge	have-org-role-91	ARG1	country	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	have-org-role-91	ARG2	president	0.0.0.0.0.0	0.0.0.0.0.0.1
# ::edge	keep-02	ARG0	country	0	0.0.1
# ::edge	keep-02	ARG1	have-eye-on-05	0	0.0
# ::edge	name	op1	china	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	russia	0.0.0.0.0.0.0.0	0.0.0.0.0.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0.0.0.0	0.0.0.0.0.0
# ::edge	tiger	ARG0-of	visit-01	0.0.0	0.0.0.1
# ::edge	tiger	ARG1-of	free-01	0.0.0	0.0.0.0
(MRPNode-0 / keep-02 :ARG1 (MRPNode-1 / have-eye-on-05 :ARG1 (MRPNode-2 / tiger :ARG1-of (MRPNode-3 / free-01 :ARG0 (MRPNode-4 / person :ARG0-of (MRPNode-5 / have-org-role-91 :ARG1 (MRPNode-6 / country :name (MRPNode-7 / name :op1 russia)) :ARG2 (MRPNode-8 / president)))) :ARG0-of (MRPNode-9 / visit-01)) :ARG0 (MRPNode-10 / country :name (MRPNode-11 / name :op1 china))) :ARG0 MRPNode-10)

# ::id 656
# ::snt Belarus tightens security along the border with Ukraine
# ::tok Belarus tightens security along the border with Ukraine
# ::alignments 0-1|0.1+0.1.1+0.1.1.0 1-2|0 2-3|0.0 3-4|0.2 5-6|0.1.0 7-8|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.527309 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	tighten-01	1-2
# ::node	0.0	security	2-3
# ::node	0.1	country	0-1
# ::node	0.1.0	border-01	5-6
# ::node	0.1.0.0	country	7-8
# ::node	0.1.0.0.0	name	7-8
# ::node	0.1.0.0.0.0	ukraine	7-8
# ::node	0.1.1	name	0-1
# ::node	0.1.1.0	belarus	0-1
# ::node	0.2	along	3-4
# ::root	0	tighten-01
# ::edge	along	op1	border-01	0.2	0.1.0
# ::edge	border-01	ARG2	country	0.1.0	0.1.0.0
# ::edge	country	ARG1-of	border-01	0.1	0.1.0
# ::edge	country	name	name	0.1	0.1.1
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	belarus	0.1.1	0.1.1.0
# ::edge	name	op1	ukraine	0.1.0.0.0	0.1.0.0.0.0
# ::edge	tighten-01	ARG0	country	0	0.1
# ::edge	tighten-01	ARG1	security	0	0.0
# ::edge	tighten-01	location	along	0	0.2
(MRPNode-0 / tighten-01 :ARG1 (MRPNode-1 / security) :ARG0 (MRPNode-2 / country :ARG1-of (MRPNode-3 / border-01 :ARG2 (MRPNode-4 / country :name (MRPNode-5 / name :op1 ukraine))) :name (MRPNode-6 / name :op1 belarus)) :location (MRPNode-7 / along :op1 MRPNode-3))

# ::id 657
# ::snt Obama vows to save Iraqis stranded on mountain
# ::tok Obama vows to save Iraqis stranded on mountain
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 1-2|0 3-4|0.0 4-5|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 5-6|0.0.0+0.0.0.1 7-8|0.0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.533729 ::parser eager_oracle ::smatch 0.9523809523809523 ::n_actions 34
# ::node	0	vow-01	1-2
# ::node	0.0	save-02	3-4
# ::node	0.0.0	person	5-6
# ::node	0.0.0.0	country	4-5
# ::node	0.0.0.0.0	name	4-5
# ::node	0.0.0.0.0.0	iraq	4-5
# ::node	0.0.0.1	strand-01	5-6
# ::node	0.0.0.1.0	mountain	7-8
# ::node	0.0.1	person	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	obama	0-1
# ::root	0	vow-01
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	iraq	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	obama	0.0.1.0	0.0.1.0.0
# ::edge	person	ARG1-of	strand-01	0.0.0	0.0.0.1
# ::edge	person	mod	country	0.0.0	0.0.0.0
# ::edge	person	name	name	0.0.1	0.0.1.0
# ::edge	save-02	ARG0	person	0.0	0.0.1
# ::edge	save-02	ARG1	person	0.0	0.0.0
# ::edge	strand-01	location	mountain	0.0.0.1	0.0.0.1.0
# ::edge	vow-01	ARG0	person	0	0.0.1
# ::edge	vow-01	ARG1	save-02	0	0.0
(MRPNode-0 / vow-01 :ARG1 (MRPNode-1 / save-02 :ARG1 (MRPNode-2 / person :mod (MRPNode-3 / country :name (MRPNode-4 / name :op1 iraq)) :ARG1-of (MRPNode-5 / strand-01 :location (MRPNode-6 / mountain))) :ARG0 (MRPNode-7 / person :name (MRPNode-8 / name :op1 obama))) :ARG0 MRPNode-7)

# ::id 658
# ::snt Police abandon posts in Lesotho, fear for lives
# ::tok Police abandon posts in Lesotho , fear for lives
# ::alignments 0-1|0.0.1 1-2|0.0 2-3|0.0.0 4-5|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 6-7|0.1 8-9|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.538941 ::parser eager_oracle ::smatch 0.823529411764706 ::n_actions 30
# ::node	0	and	
# ::node	0.0	abandon-01	1-2
# ::node	0.0.0	post	2-3
# ::node	0.0.0.0	province	4-5
# ::node	0.0.0.0.0	name	4-5
# ::node	0.0.0.0.0.0	lesotho	4-5
# ::node	0.0.1	police	0-1
# ::node	0.1	fear-01	6-7
# ::node	0.1.0	life	8-9
# ::root	0	and
# ::edge	abandon-01	ARG0	police	0.0	0.0.1
# ::edge	abandon-01	ARG1	post	0.0	0.0.0
# ::edge	and	op1	abandon-01	0	0.0
# ::edge	and	op2	fear-01	0	0.1
# ::edge	fear-01	ARG0	police	0.1	0.0.1
# ::edge	fear-01	ARG1	life	0.1	0.1.0
# ::edge	name	op1	lesotho	0.0.0.0.0	0.0.0.0.0.0
# ::edge	post	location	province	0.0.0	0.0.0.0
# ::edge	province	name	name	0.0.0.0	0.0.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / abandon-01 :ARG1 (MRPNode-2 / post :location (MRPNode-3 / province :name (MRPNode-4 / name :op1 lesotho))) :ARG0 (MRPNode-5 / police)) :op2 (MRPNode-6 / fear-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-7 / life)))

# ::id 659
# ::snt UK says investigating 2 suspected MERS cases
# ::tok UK says investigating 2 suspected MERS cases
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 1-2|0 2-3|0.0 3-4|0.0.0.0 4-5|0.0.0.1 5-6|0.0.0.2+0.0.0.2.0+0.0.0.2.0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.544898 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	say-01	1-2
# ::node	0.0	investigate-01	2-3
# ::node	0.0.0	case-03	6-7
# ::node	0.0.0.0	2	3-4
# ::node	0.0.0.1	suspect-01	4-5
# ::node	0.0.0.2	organization	5-6
# ::node	0.0.0.2.0	name	5-6
# ::node	0.0.0.2.0.0	mers	5-6
# ::node	0.0.1	country	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	uk	0-1
# ::root	0	say-01
# ::edge	case-03	ARG1-of	suspect-01	0.0.0	0.0.0.1
# ::edge	case-03	ARG2	organization	0.0.0	0.0.0.2
# ::edge	case-03	quant	2	0.0.0	0.0.0.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	investigate-01	ARG0	country	0.0	0.0.1
# ::edge	investigate-01	ARG1	case-03	0.0	0.0.0
# ::edge	name	op1	mers	0.0.0.2.0	0.0.0.2.0.0
# ::edge	name	op1	uk	0.0.1.0	0.0.1.0.0
# ::edge	organization	name	name	0.0.0.2	0.0.0.2.0
# ::edge	say-01	ARG0	country	0	0.0.1
# ::edge	say-01	ARG1	investigate-01	0	0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / investigate-01 :ARG1 (MRPNode-2 / case-03 :quant 2 :ARG1-of (MRPNode-3 / suspect-01) :ARG2 (MRPNode-4 / organization :name (MRPNode-5 / name :op1 mers))) :ARG0 (MRPNode-6 / country :name (MRPNode-7 / name :op1 uk))) :ARG0 MRPNode-6)

# ::id 660
# ::snt Philippines saves 100 after ferry sinks
# ::tok Philippines saves 100 after ferry sinks
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0 3-4|0.2 5-6|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.548118 ::parser eager_oracle ::smatch 0.8799999999999999 ::n_actions 23
# ::node	0	save-01	1-2
# ::node	0.0	100	2-3
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	philippines	0-1
# ::node	0.2	after	3-4
# ::node	0.2.0	sink-01	5-6
# ::root	0	save-01
# ::edge	after	op1	sink-01	0.2	0.2.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	name	op1	philippines	0.1.0	0.1.0.0
# ::edge	save-01	ARG0	country	0	0.1
# ::edge	save-01	arg1	100	0	0.0
# ::edge	save-01	time	after	0	0.2
(MRPNode-0 / save-01 :arg1 100 :ARG0 (MRPNode-1 / country :name (MRPNode-2 / name :op1 philippines)) :time (MRPNode-3 / after :op1 (MRPNode-4 / sink-01)))

# ::id 661
# ::snt Johor crowns its fifth Sultan
# ::tok Johor crowns its fifth Sultan
# ::alignments 0-1|0.0+0.0.1+0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.550094 ::parser eager_oracle ::smatch 0.33333333333333337 ::n_actions 10
# ::node	0	commemorate-01	
# ::node	0.0	person	0-1
# ::node	0.0.0	ordinal-entity	
# ::node	0.0.0.0	5	
# ::node	0.0.1	name	0-1
# ::node	0.0.1.0	johor	0-1
# ::node	0.0.1.1	city	
# ::root	0	commemorate-01
# ::edge	commemorate-01	ARG0	city	0	0.0.1.1
# ::edge	commemorate-01	ARG1	person	0	0.0
# ::edge	name	ARG1	city	0.0.1	0.0.1.1
# ::edge	name	op1	johor	0.0.1	0.0.1.0
# ::edge	ordinal-entity	value	5	0.0.0	0.0.0.0
# ::edge	person	ARG0-of	name	0.0	0.0.1
# ::edge	person	ord	ordinal-entity	0.0	0.0.0
(MRPNode-0 / commemorate-01 :ARG1 (MRPNode-1 / person :ord (MRPNode-2 / ordinal-entity :value 5) :ARG0-of (MRPNode-3 / name :op1 johor :ARG1 (MRPNode-4 / city))) :ARG0 MRPNode-4)

# ::id 662
# ::snt Iran reiterates support for Iraq, Syria
# ::tok Iran reiterates support for Iraq , Syria
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 1-2|0 2-3|0.0 4-5|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 6-7|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.555345 ::parser eager_oracle ::smatch 0.8571428571428572 ::n_actions 24
# ::node	0	reiterate-01	1-2
# ::node	0.0	support-01	2-3
# ::node	0.0.0	and	
# ::node	0.0.0.0	country	4-5
# ::node	0.0.0.0.0	name	4-5
# ::node	0.0.0.0.0.0	iraq	4-5
# ::node	0.0.0.1	country	6-7
# ::node	0.0.0.1.0	name	6-7
# ::node	0.0.0.1.0.0	syria	6-7
# ::node	0.0.1	country	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	iran	0-1
# ::root	0	reiterate-01
# ::edge	and	op1	country	0.0.0	0.0.0.0
# ::edge	and	op2	country	0.0.0	0.0.0.1
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	name	op1	iran	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	iraq	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	syria	0.0.0.1.0	0.0.0.1.0.0
# ::edge	reiterate-01	ARG0	country	0	0.0.1
# ::edge	reiterate-01	ARG1	support-01	0	0.0
# ::edge	support-01	ARG0	country	0.0	0.0.1
# ::edge	support-01	ARG1	and	0.0	0.0.0
(MRPNode-0 / reiterate-01 :ARG1 (MRPNode-1 / support-01 :ARG1 (MRPNode-2 / and :op1 (MRPNode-3 / country :name (MRPNode-4 / name :op1 iraq)) :op2 (MRPNode-5 / country :name (MRPNode-6 / name :op1 syria))) :ARG0 (MRPNode-7 / country :name (MRPNode-8 / name :op1 iran))) :ARG0 MRPNode-7)

# ::id 663
# ::snt Poland president loses to challenger
# ::tok Poland president loses to challenger
# ::alignments 0-1|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 1-2|0.0+0.0.0+0.0.0.1 2-3|0 4-5|0.1+0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.559288 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	lose-03	2-3
# ::node	0.0	person	1-2
# ::node	0.0.0	have-org-role-91	1-2
# ::node	0.0.0.0	country	0-1
# ::node	0.0.0.0.0	name	0-1
# ::node	0.0.0.0.0.0	poland	0-1
# ::node	0.0.0.1	president	1-2
# ::node	0.1	person	4-5
# ::node	0.1.0	challenge-01	4-5
# ::root	0	lose-03
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.0.0	0.0.0.0
# ::edge	have-org-role-91	ARG2	president	0.0.0	0.0.0.1
# ::edge	lose-03	ARG0	person	0	0.0
# ::edge	lose-03	ARG0	person	0	0.1
# ::edge	name	op1	poland	0.0.0.0.0	0.0.0.0.0.0
# ::edge	person	ARG0-of	challenge-01	0.1	0.1.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.0
(MRPNode-0 / lose-03 :ARG0 (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-org-role-91 :ARG1 (MRPNode-3 / country :name (MRPNode-4 / name :op1 poland)) :ARG2 (MRPNode-5 / president))) :ARG0 (MRPNode-6 / person :ARG0-of (MRPNode-7 / challenge-01)))

# ::id 664
# ::snt Palestinian official slams Israel's stone-throwing bill
# ::tok Palestinian official slams Israel 's stone - throwing bill
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 1-2|0.1+0.1.0+0.1.0.1 2-3|0 3-4|0.0.1+0.0.1.0+0.0.1.0.0 5-6|0.0.0.0 7-8|0.0.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.566813 ::parser eager_oracle ::smatch 0.9583333333333334 ::n_actions 41
# ::node	0	slam-02	2-3
# ::node	0.0	bill	8-9
# ::node	0.0.0	throw-01	7-8
# ::node	0.0.0.0	stone	5-6
# ::node	0.0.1	country	3-4
# ::node	0.0.1.0	name	3-4
# ::node	0.0.1.0.0	israel	3-4
# ::node	0.1	person	1-2
# ::node	0.1.0	have-org-role-91	1-2
# ::node	0.1.0.0	country	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	palestine	0-1
# ::node	0.1.0.1	official	1-2
# ::root	0	slam-02
# ::edge	bill	mod	throw-01	0.0	0.0.0
# ::edge	bill	poss	country	0.0	0.0.1
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	official	0.1.0	0.1.0.1
# ::edge	name	op1	israel	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	palestine	0.1.0.0.0	0.1.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	slam-02	ARG0	person	0	0.1
# ::edge	slam-02	ARG1	bill	0	0.0
# ::edge	throw-01	ARG1	stone	0.0.0	0.0.0.0
(MRPNode-0 / slam-02 :ARG1 (MRPNode-1 / bill :mod (MRPNode-2 / throw-01 :ARG1 (MRPNode-3 / stone)) :poss (MRPNode-4 / country :name (MRPNode-5 / name :op1 israel))) :ARG0 (MRPNode-6 / person :ARG0-of (MRPNode-7 / have-org-role-91 :ARG1 (MRPNode-8 / country :name (MRPNode-9 / name :op1 palestine)) :ARG2 (MRPNode-10 / official))))

# ::id 665
# ::snt University of Florida frat accused of spitting on wounded war veterans
# ::tok University of Florida frat accused of spitting on wounded war veterans
# ::alignments 0-3|0.0.0+0.0.0.0+0.0.0.0.0+0.0.0.0.1+0.0.0.0.2 3-4|0.0 4-5|0 6-7|0.1 8-9|0.1.0.1 9-10|0.1.0.0 10-11|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.573918 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	accuse-01	4-5
# ::node	0.0	frat	3-4
# ::node	0.0.0	university	0-3
# ::node	0.0.0.0	name	0-3
# ::node	0.0.0.0.0	university	0-3
# ::node	0.0.0.0.1	of	0-3
# ::node	0.0.0.0.2	florida	0-3
# ::node	0.1	spit-01	6-7
# ::node	0.1.0	veteran	10-11
# ::node	0.1.0.0	war	9-10
# ::node	0.1.0.1	wound-01	8-9
# ::root	0	accuse-01
# ::edge	accuse-01	ARG1	frat	0	0.0
# ::edge	accuse-01	ARG2	spit-01	0	0.1
# ::edge	frat	mod	university	0.0	0.0.0
# ::edge	name	op1	university	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	of	0.0.0.0	0.0.0.0.1
# ::edge	name	op3	florida	0.0.0.0	0.0.0.0.2
# ::edge	spit-01	ARG0	frat	0.1	0.0
# ::edge	spit-01	ARG2	veteran	0.1	0.1.0
# ::edge	university	name	name	0.0.0	0.0.0.0
# ::edge	veteran	ARG1-of	wound-01	0.1.0	0.1.0.1
# ::edge	veteran	mod	war	0.1.0	0.1.0.0
(MRPNode-0 / accuse-01 :ARG1 (MRPNode-1 / frat :mod (MRPNode-2 / university :name (MRPNode-3 / name :op1 university :op2 of :op3 florida))) :ARG2 (MRPNode-4 / spit-01 :ARG0 MRPNode-1 :ARG2 (MRPNode-5 / veteran :mod (MRPNode-6 / war) :ARG1-of (MRPNode-7 / wound-01))))

# ::id 666
# ::snt PM Narendra Modi speaks of non-discrimination and equality
# ::tok PM Narendra Modi speaks of non - discrimination and equality
# ::alignments 1-3|0.0+0.0.0+0.0.0.0+0.0.0.1 3-4|0 5-6|0.1.0.0 7-8|0.1.0 8-9|0.1 9-10|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.581625 ::parser eager_oracle ::smatch 0.8333333333333333 ::n_actions 30
# ::node	0	speak-01	3-4
# ::node	0.0	person	1-3
# ::node	0.0.0	name	1-3
# ::node	0.0.0.0	narendra	1-3
# ::node	0.0.0.1	modi	1-3
# ::node	0.0.1	have-org-role-91	
# ::node	0.0.1.0	minister	
# ::node	0.0.1.0.0	prime	
# ::node	0.1	and	8-9
# ::node	0.1.0	discriminate-02	7-8
# ::node	0.1.0.0	-	5-6
# ::node	0.1.1	equal-01	9-10
# ::root	0	speak-01
# ::edge	and	op1	discriminate-02	0.1	0.1.0
# ::edge	and	op2	equal-01	0.1	0.1.1
# ::edge	discriminate-02	polarity	-	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	minister	0.0.1	0.0.1.0
# ::edge	minister	mod	prime	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	narendra	0.0.0	0.0.0.0
# ::edge	name	op2	modi	0.0.0	0.0.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.1
# ::edge	person	name	name	0.0	0.0.0
# ::edge	speak-01	ARG0	person	0	0.0
# ::edge	speak-01	ARG1	and	0	0.1
(MRPNode-0 / speak-01 :ARG0 (MRPNode-1 / person :name (MRPNode-2 / name :op1 narendra :op2 modi) :ARG0-of (MRPNode-3 / have-org-role-91 :ARG2 (MRPNode-4 / minister :mod (MRPNode-5 / prime)))) :ARG1 (MRPNode-6 / and :op1 (MRPNode-7 / discriminate-02 :polarity -) :op2 (MRPNode-8 / equal-01)))

# ::id 667
# ::snt Myanmar Struggles to Finalize Voter Lists for Sunday Polls
# ::tok Myanmar Struggles to Finalize Voter Lists for Sunday Polls
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 3-4|0.1 4-5|0.1.0.0+0.1.0.0.0 5-6|0.1.0 7-8|0.1.0.1.0.0 8-9|0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.589716 ::parser eager_oracle ::smatch 0.9 ::n_actions 37
# ::node	0	struggle-01	1-2
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	myanmar	0-1
# ::node	0.1	finalize-01	3-4
# ::node	0.1.0	list-01	5-6
# ::node	0.1.0.0	person	4-5
# ::node	0.1.0.0.0	vote-01	4-5
# ::node	0.1.0.1	poll-01	8-9
# ::node	0.1.0.1.0	date-entity	
# ::node	0.1.0.1.0.0	sunday	7-8
# ::root	0	struggle-01
# ::edge	country	name	name	0.0	0.0.0
# ::edge	date-entity	weekday	sunday	0.1.0.1.0	0.1.0.1.0.0
# ::edge	finalize-01	ARG0	country	0.1	0.0
# ::edge	finalize-01	ARG1	list-01	0.1	0.1.0
# ::edge	list-01	ARG1	person	0.1.0	0.1.0.0
# ::edge	list-01	purpose	poll-01	0.1.0	0.1.0.1
# ::edge	name	op1	myanmar	0.0.0	0.0.0.0
# ::edge	person	ARG0-of	vote-01	0.1.0.0	0.1.0.0.0
# ::edge	poll-01	time	date-entity	0.1.0.1	0.1.0.1.0
# ::edge	struggle-01	ARG1	country	0	0.0
# ::edge	struggle-01	ARG2	finalize-01	0	0.1
(MRPNode-0 / struggle-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 myanmar)) :ARG2 (MRPNode-3 / finalize-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-4 / list-01 :ARG1 (MRPNode-5 / person :ARG0-of (MRPNode-6 / vote-01)) :purpose (MRPNode-7 / poll-01 :time (MRPNode-8 / date-entity :weekday (MRPNode-9 / sunday))))))

# ::id 668
# ::snt Pakistan protests ceasefire violations by India
# ::tok Pakistan protests ceasefire violations by India
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 3-4|0.0 5-6|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.593726 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 20
# ::node	0	protest-01	1-2
# ::node	0.0	violate-01	3-4
# ::node	0.0.0	fire-01	
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	pakistan	0-1
# ::node	0.2	country	5-6
# ::node	0.2.0	name	5-6
# ::node	0.2.0.0	india	5-6
# ::root	0	protest-01
# ::edge	country	name	name	0.1	0.1.0
# ::edge	country	name	name	0.2	0.2.0
# ::edge	name	op1	india	0.2.0	0.2.0.0
# ::edge	name	op1	pakistan	0.1.0	0.1.0.0
# ::edge	protest-01	ARG0	country	0	0.1
# ::edge	protest-01	ARG1	country	0	0.2
# ::edge	protest-01	ARG1	violate-01	0	0.0
# ::edge	violate-01	ARG1	fire-01	0.0	0.0.0
(MRPNode-0 / protest-01 :ARG1 (MRPNode-1 / violate-01 :ARG1 (MRPNode-2 / fire-01)) :ARG0 (MRPNode-3 / country :name (MRPNode-4 / name :op1 pakistan)) :ARG1 (MRPNode-5 / country :name (MRPNode-6 / name :op1 india)))

# ::id 669
# ::snt North Korea Delegation Meets With South Korean Officials
# ::tok North Korea Delegation Meets With South Korean Officials
# ::alignments 2-3|0.1+0.1.0+0.1.0.0 3-4|0 5-7|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.1 7-8|0.0+0.0.0+0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.599373 ::parser eager_oracle ::smatch 0.9473684210526315 ::n_actions 31
# ::node	0	meet-03	3-4
# ::node	0.0	person	7-8
# ::node	0.0.0	have-org-role-91	7-8
# ::node	0.0.0.0	country	5-7
# ::node	0.0.0.0.0	name	5-7
# ::node	0.0.0.0.0.0	south	5-7
# ::node	0.0.0.0.0.1	korea	5-7
# ::node	0.0.0.1	official	7-8
# ::node	0.1	organization	2-3
# ::node	0.1.0	name	2-3
# ::node	0.1.0.0	delegation	2-3
# ::root	0	meet-03
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.0.0	0.0.0.0
# ::edge	have-org-role-91	ARG2	official	0.0.0	0.0.0.1
# ::edge	meet-03	ARG0	organization	0	0.1
# ::edge	meet-03	ARG1	person	0	0.0
# ::edge	name	op1	delegation	0.1.0	0.1.0.0
# ::edge	name	op1	south	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op2	korea	0.0.0.0.0	0.0.0.0.0.1
# ::edge	organization	name	name	0.1	0.1.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.0
(MRPNode-0 / meet-03 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-org-role-91 :ARG1 (MRPNode-3 / country :name (MRPNode-4 / name :op1 south :op2 korea)) :ARG2 (MRPNode-5 / official))) :ARG0 (MRPNode-6 / organization :name (MRPNode-7 / name :op1 delegation)))

# ::id 670
# ::snt WTO: India regrets action of developed nations
# ::tok WTO : India regrets action of developed nations
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 2-3|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 3-4|0.0 6-7|0.0.0.0.0 7-8|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.605831 ::parser eager_oracle ::smatch 0.7027027027027026 ::n_actions 23
# ::node	0	say-01	
# ::node	0.0	regret-01	3-4
# ::node	0.0.0	act-02	
# ::node	0.0.0.0	nation	7-8
# ::node	0.0.0.0.0	develop-02	6-7
# ::node	0.0.0.1	country	2-3
# ::node	0.0.0.1.0	name	2-3
# ::node	0.0.0.1.0.0	india	2-3
# ::node	0.1	organization	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	wto	0-1
# ::root	0	say-01
# ::edge	act-02	ARG0	country	0.0.0	0.0.0.1
# ::edge	act-02	ARG0	nation	0.0.0	0.0.0.0
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	name	op1	india	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op1	wto	0.1.0	0.1.0.0
# ::edge	nation	ARG1-of	develop-02	0.0.0.0	0.0.0.0.0
# ::edge	organization	name	name	0.1	0.1.0
# ::edge	regret-01	ARG0	country	0.0	0.0.0.1
# ::edge	regret-01	ARG1	act-02	0.0	0.0.0
# ::edge	say-01	ARG0	organization	0	0.1
# ::edge	say-01	ARG1	regret-01	0	0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / regret-01 :ARG1 (MRPNode-2 / act-02 :ARG0 (MRPNode-3 / nation :ARG1-of (MRPNode-4 / develop-02)) :ARG0 (MRPNode-5 / country :name (MRPNode-6 / name :op1 india))) :ARG0 MRPNode-5) :ARG0 (MRPNode-7 / organization :name (MRPNode-8 / name :op1 wto)))

# ::id 671
# ::snt Permalink to Two killed in Germany train accident
# ::tok Permalink to Two killed in Germany train accident
# ::alignments 0-1|0.0+0.0.1+0.0.1.0 2-3|0.0.0 3-4|0 5-6|0.1.0.1+0.1.0.1.0+0.1.0.1.0.0 6-7|0.1.0.0 7-8|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.611688 ::parser eager_oracle ::smatch 0.8888888888888888 ::n_actions 27
# ::node	0	kill-01	3-4
# ::node	0.0	person	0-1
# ::node	0.0.0	2	2-3
# ::node	0.0.1	name	0-1
# ::node	0.0.1.0	permalink	0-1
# ::node	0.1	cause-01	
# ::node	0.1.0	accident	7-8
# ::node	0.1.0.0	train	6-7
# ::node	0.1.0.1	country	5-6
# ::node	0.1.0.1.0	name	5-6
# ::node	0.1.0.1.0.0	germany	5-6
# ::root	0	kill-01
# ::edge	accident	location	country	0.1.0	0.1.0.1
# ::edge	accident	mod	train	0.1.0	0.1.0.0
# ::edge	cause-01	ARG0	accident	0.1	0.1.0
# ::edge	country	name	name	0.1.0.1	0.1.0.1.0
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	ARG1-of	cause-01	0	0.1
# ::edge	name	op1	germany	0.1.0.1.0	0.1.0.1.0.0
# ::edge	name	op1	permalink	0.0.1	0.0.1.0
# ::edge	person	name	name	0.0	0.0.1
# ::edge	person	quant	2	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 2 :name (MRPNode-2 / name :op1 permalink)) :ARG1-of (MRPNode-3 / cause-01 :ARG0 (MRPNode-4 / accident :mod (MRPNode-5 / train) :location (MRPNode-6 / country :name (MRPNode-7 / name :op1 germany)))))

# ::id 672
# ::snt Merkel pledges NATO solidarity with Latvia
# ::tok Merkel pledges NATO solidarity with Latvia
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.0+0.0.0.0+0.0.0.0.0 3-4|0.0 5-6|0.0.1+0.0.1.0+0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.616366 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	pledge-01	1-2
# ::node	0.0	solidarity	3-4
# ::node	0.0.0	military	2-3
# ::node	0.0.0.0	name	2-3
# ::node	0.0.0.0.0	nato	2-3
# ::node	0.0.1	country	5-6
# ::node	0.0.1.0	name	5-6
# ::node	0.0.1.0.0	latvia	5-6
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	merkel	0-1
# ::root	0	pledge-01
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	military	name	name	0.0.0	0.0.0.0
# ::edge	name	op1	latvia	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	merkel	0.1.0	0.1.0.0
# ::edge	name	op1	nato	0.0.0.0	0.0.0.0.0
# ::edge	person	name	name	0.1	0.1.0
# ::edge	pledge-01	ARG0	person	0	0.1
# ::edge	pledge-01	ARG1	solidarity	0	0.0
# ::edge	solidarity	accompanier	country	0.0	0.0.1
# ::edge	solidarity	mod	military	0.0	0.0.0
(MRPNode-0 / pledge-01 :ARG1 (MRPNode-1 / solidarity :mod (MRPNode-2 / military :name (MRPNode-3 / name :op1 nato)) :accompanier (MRPNode-4 / country :name (MRPNode-5 / name :op1 latvia))) :ARG0 (MRPNode-6 / person :name (MRPNode-7 / name :op1 merkel)))

# ::id 673
# ::snt Egyptian boat crash death toll rises as more bodies found in Nile
# ::tok Egyptian boat crash death toll rises as more bodies found in Nile
# ::alignments 0-1|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 1-2|0.0.0.0 2-3|0.0.0 4-5|0.0 5-6|0 7-8|0.1.0.0 8-9|0.1.0 9-10|0.1 11-12|0.1.1+0.1.1.0+0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.627480 ::parser eager_oracle ::smatch 0.9583333333333334 ::n_actions 41
# ::node	0	rise-01	5-6
# ::node	0.0	toll	4-5
# ::node	0.0.0	crash-01	2-3
# ::node	0.0.0.0	boat	1-2
# ::node	0.0.0.0.0	country	0-1
# ::node	0.0.0.0.0.0	name	0-1
# ::node	0.0.0.0.0.0.0	egypt	0-1
# ::node	0.1	find-01	9-10
# ::node	0.1.0	body	8-9
# ::node	0.1.0.0	more	7-8
# ::node	0.1.1	city	11-12
# ::node	0.1.1.0	name	11-12
# ::node	0.1.1.0.0	nile	11-12
# ::root	0	rise-01
# ::edge	boat	mod	country	0.0.0.0	0.0.0.0.0
# ::edge	body	mod	more	0.1.0	0.1.0.0
# ::edge	city	name	name	0.1.1	0.1.1.0
# ::edge	country	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	crash-01	ARG1	boat	0.0.0	0.0.0.0
# ::edge	find-01	ARG1	body	0.1	0.1.0
# ::edge	find-01	location	city	0.1	0.1.1
# ::edge	name	op1	egypt	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op1	nile	0.1.1.0	0.1.1.0.0
# ::edge	rise-01	ARG1	toll	0	0.0
# ::edge	rise-01	time	find-01	0	0.1
# ::edge	toll	mod	crash-01	0.0	0.0.0
(MRPNode-0 / rise-01 :ARG1 (MRPNode-1 / toll :mod (MRPNode-2 / crash-01 :ARG1 (MRPNode-3 / boat :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 egypt))))) :time (MRPNode-6 / find-01 :ARG1 (MRPNode-7 / body :mod (MRPNode-8 / more)) :location (MRPNode-9 / city :name (MRPNode-10 / name :op1 nile))))

# ::id 674
# ::snt President Xi: China to continue help to fight Ebola
# ::tok President Xi : China to continue help to fight Ebola
# ::alignments 0-1|0.1.1+0.1.1.0 1-2|0.1+0.1.0+0.1.0.0 3-4|0.2+0.2.0+0.2.0.0 5-6|0.0 6-7|0.0.0 8-9|0.0.0.0 9-10|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.638162 ::parser eager_oracle ::smatch 0.8461538461538461 ::n_actions 35
# ::node	0	say-01	
# ::node	0.0	continue-01	5-6
# ::node	0.0.0	help-01	6-7
# ::node	0.0.0.0	fight-01	8-9
# ::node	0.0.0.0.0	disease	9-10
# ::node	0.0.0.0.0.0	name	9-10
# ::node	0.0.0.0.0.0.0	ebola	9-10
# ::node	0.1	person	1-2
# ::node	0.1.0	name	1-2
# ::node	0.1.0.0	xi	1-2
# ::node	0.1.1	have-org-role-91	0-1
# ::node	0.1.1.0	president	0-1
# ::node	0.2	country	3-4
# ::node	0.2.0	name	3-4
# ::node	0.2.0.0	china	3-4
# ::root	0	say-01
# ::edge	continue-01	ARG1	help-01	0.0	0.0.0
# ::edge	country	name	name	0.2	0.2.0
# ::edge	disease	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	fight-01	ARG1	disease	0.0.0.0	0.0.0.0.0
# ::edge	have-org-role-91	ARG2	president	0.1.1	0.1.1.0
# ::edge	help-01	ARG1	fight-01	0.0.0	0.0.0.0
# ::edge	name	op1	china	0.2.0	0.2.0.0
# ::edge	name	op1	ebola	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op1	xi	0.1.0	0.1.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.1
# ::edge	person	name	name	0.1	0.1.0
# ::edge	say-01	ARG0	person	0	0.1
# ::edge	say-01	ARG1	continue-01	0	0.0
# ::edge	say-01	ARG2	country	0	0.2
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / continue-01 :ARG1 (MRPNode-2 / help-01 :ARG1 (MRPNode-3 / fight-01 :ARG1 (MRPNode-4 / disease :name (MRPNode-5 / name :op1 ebola))))) :ARG0 (MRPNode-6 / person :name (MRPNode-7 / name :op1 xi) :ARG0-of (MRPNode-8 / have-org-role-91 :ARG2 (MRPNode-9 / president))) :ARG2 (MRPNode-10 / country :name (MRPNode-11 / name :op1 china)))

# ::id 675
# ::snt China Scrambles to Reassure Jittery Stock Traders
# ::tok China Scrambles to Reassure Jittery Stock Traders
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 3-4|0.1 5-7|0.1.0.1.0+0.1.0.1.0.0+0.1.0.1.0.0.0+0.1.0.1.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.643787 ::parser eager_oracle ::smatch 0.7894736842105263 ::n_actions 22
# ::node	0	scramble-01	1-2
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	china	0-1
# ::node	0.1	reassure-01	3-4
# ::node	0.1.0	person	
# ::node	0.1.0.0	retire-01	
# ::node	0.1.0.1	trade-01	
# ::node	0.1.0.1.0	company	5-7
# ::node	0.1.0.1.0.0	name	5-7
# ::node	0.1.0.1.0.0.0	stock	5-7
# ::node	0.1.0.1.0.0.1	traders	5-7
# ::root	0	scramble-01
# ::edge	company	name	name	0.1.0.1.0	0.1.0.1.0.0
# ::edge	country	name	name	0.0	0.0.0
# ::edge	name	op1	china	0.0.0	0.0.0.0
# ::edge	name	op1	stock	0.1.0.1.0.0	0.1.0.1.0.0.0
# ::edge	name	op2	traders	0.1.0.1.0.0	0.1.0.1.0.0.1
# ::edge	person	ARG0-of	retire-01	0.1.0	0.1.0.0
# ::edge	person	ARG0-of	trade-01	0.1.0	0.1.0.1
# ::edge	reassure-01	ARG0	country	0.1	0.0
# ::edge	reassure-01	ARG1	person	0.1	0.1.0
# ::edge	scramble-01	ARG0	country	0	0.0
# ::edge	scramble-01	purpose	reassure-01	0	0.1
# ::edge	trade-01	ARG1	company	0.1.0.1	0.1.0.1.0
(MRPNode-0 / scramble-01 :ARG0 (MRPNode-1 / country :name (MRPNode-2 / name :op1 china)) :purpose (MRPNode-3 / reassure-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-4 / person :ARG0-of (MRPNode-5 / retire-01) :ARG0-of (MRPNode-6 / trade-01 :ARG1 (MRPNode-7 / company :name (MRPNode-8 / name :op1 stock :op2 traders))))))

# ::id 676
# ::snt Obama waiting for midterm to name attorney general
# ::tok Obama waiting for midterm to name attorney general
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 5-6|0.2 6-7|0.2.0 7-8|0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.647947 ::parser eager_oracle ::smatch 0.8750000000000001 ::n_actions 27
# ::node	0	wait-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	obama	0-1
# ::node	0.1	date-entity	
# ::node	0.1.0	2007	
# ::node	0.2	name-01	5-6
# ::node	0.2.0	attorney	6-7
# ::node	0.2.0.0	general	7-8
# ::root	0	wait-01
# ::edge	attorney	mod	general	0.2.0	0.2.0.0
# ::edge	date-entity	ARG0	person	0.1	0.0
# ::edge	date-entity	season	2007	0.1	0.1.0
# ::edge	name	op1	obama	0.0.0	0.0.0.0
# ::edge	name-01	ARG0	person	0.2	0.0
# ::edge	name-01	ARG1	attorney	0.2	0.2.0
# ::edge	person	name	name	0.0	0.0.0
# ::edge	wait-01	ARG1	person	0	0.0
# ::edge	wait-01	ARG2	date-entity	0	0.1
# ::edge	wait-01	ARG2	name-01	0	0.2
(MRPNode-0 / wait-01 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 obama)) :ARG2 (MRPNode-3 / date-entity :season 2007 :ARG0 MRPNode-1) :ARG2 (MRPNode-4 / name-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-5 / attorney :mod (MRPNode-6 / general))))

# ::id 677
# ::snt The Latest on Severe Weather: 1 Dead in Texas After Tornado
# ::tok The Latest on Severe Weather : 1 Dead in Texas After Tornado
# ::alignments 3-4|0.0.1.0 4-5|0.0.1 6-7|0.1.0+0.1.0.0 9-10|0.1.2+0.1.2.0+0.1.2.0.0 10-11|0.1.1 11-12|0.1.1.0+0.1.1.0.0+0.1.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.659035 ::parser eager_oracle ::smatch 0.625 ::n_actions 33
# ::node	0	multi-sentence	
# ::node	0.0	bad-02	
# ::node	0.0.0	have-degree-91	
# ::node	0.0.0.0	most	
# ::node	0.0.1	weather	4-5
# ::node	0.0.1.0	severe	3-4
# ::node	0.1	die-01	
# ::node	0.1.0	person	6-7
# ::node	0.1.0.0	1	6-7
# ::node	0.1.1	after	10-11
# ::node	0.1.1.0	incident	11-12
# ::node	0.1.1.0.0	name	11-12
# ::node	0.1.1.0.0.0	tornado	11-12
# ::node	0.1.2	state	9-10
# ::node	0.1.2.0	name	9-10
# ::node	0.1.2.0.0	texas	9-10
# ::root	0	multi-sentence
# ::edge	after	op1	incident	0.1.1	0.1.1.0
# ::edge	bad-02	ARG1	have-degree-91	0.0	0.0.0
# ::edge	bad-02	ARG2	weather	0.0	0.0.1
# ::edge	die-01	location	state	0.1	0.1.2
# ::edge	die-01	time	after	0.1	0.1.1
# ::edge	die-01	time	person	0.1	0.1.0
# ::edge	have-degree-91	ARG3	most	0.0.0	0.0.0.0
# ::edge	incident	name	name	0.1.1.0	0.1.1.0.0
# ::edge	multi-sentence	snt1	bad-02	0	0.0
# ::edge	multi-sentence	snt2	die-01	0	0.1
# ::edge	name	op1	texas	0.1.2.0	0.1.2.0.0
# ::edge	name	op1	tornado	0.1.1.0.0	0.1.1.0.0.0
# ::edge	person	quant	1	0.1.0	0.1.0.0
# ::edge	state	name	name	0.1.2	0.1.2.0
# ::edge	weather	mod	severe	0.0.1	0.0.1.0
(MRPNode-0 / multi-sentence :snt1 (MRPNode-1 / bad-02 :ARG1 (MRPNode-2 / have-degree-91 :ARG3 (MRPNode-3 / most)) :ARG2 (MRPNode-4 / weather :mod (MRPNode-5 / severe))) :snt2 (MRPNode-6 / die-01 :time (MRPNode-7 / person :quant 1) :time (MRPNode-8 / after :op1 (MRPNode-9 / incident :name (MRPNode-10 / name :op1 tornado))) :location (MRPNode-11 / state :name (MRPNode-12 / name :op1 texas))))

# ::id 678
# ::snt New York police officer critically wounded in hatchet attack
# ::tok New York police officer critically wounded in hatchet attack
# ::alignments 0-2|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0+0.0.0.0.0.0.1 2-3|0.0.0.0 3-4|0.0+0.0.0+0.0.0.1 4-5|0.2 5-6|0 7-8|0.1.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.670305 ::parser eager_oracle ::smatch 1.0 ::n_actions 41
# ::node	0	wound-01	5-6
# ::node	0.0	person	3-4
# ::node	0.0.0	have-org-role-91	3-4
# ::node	0.0.0.0	police	2-3
# ::node	0.0.0.0.0	city	0-2
# ::node	0.0.0.0.0.0	name	0-2
# ::node	0.0.0.0.0.0.0	new	0-2
# ::node	0.0.0.0.0.0.1	york	0-2
# ::node	0.0.0.1	officer	3-4
# ::node	0.1	attack-01	8-9
# ::node	0.1.0	hatchet	7-8
# ::node	0.2	critical-03	4-5
# ::root	0	wound-01
# ::edge	attack-01	instrument	hatchet	0.1	0.1.0
# ::edge	city	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	have-org-role-91	ARG1	police	0.0.0	0.0.0.0
# ::edge	have-org-role-91	ARG2	officer	0.0.0	0.0.0.1
# ::edge	name	op1	new	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op2	york	0.0.0.0.0.0	0.0.0.0.0.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.0
# ::edge	police	location	city	0.0.0.0	0.0.0.0.0
# ::edge	wound-01	ARG0	attack-01	0	0.1
# ::edge	wound-01	ARG1	person	0	0.0
# ::edge	wound-01	degree	critical-03	0	0.2
(MRPNode-0 / wound-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-org-role-91 :ARG1 (MRPNode-3 / police :location (MRPNode-4 / city :name (MRPNode-5 / name :op1 new :op2 york))) :ARG2 (MRPNode-6 / officer))) :ARG0 (MRPNode-7 / attack-01 :instrument (MRPNode-8 / hatchet)) :degree (MRPNode-9 / critical-03))

# ::id 679
# ::snt You don't have to worry.
# ::tok You do n't have to worry .
# ::alignments 0-1|0.1 2-3|0.0 3-4|0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:41.672413 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	obligate-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	you	0-1
# ::node	0.2	worry-02	5-6
# ::root	0	obligate-01
# ::edge	obligate-01	ARG1	you	0	0.1
# ::edge	obligate-01	ARG2	worry-02	0	0.2
# ::edge	obligate-01	polarity	-	0	0.0
# ::edge	worry-02	ARG0	you	0.2	0.1
(MRPNode-0 / obligate-01 :polarity - :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / worry-02 :ARG0 MRPNode-1))

# ::id 680
# ::snt Yes, you can do it.
# ::tok Yes , you can do it .
# ::alignments 2-3|0.0.1 3-4|0 4-5|0.0 5-6|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.674376 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	possible-01	3-4
# ::node	0.0	do-02	4-5
# ::node	0.0.0	it	5-6
# ::node	0.0.1	you	2-3
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	it	0.0	0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / you)))

# ::id 681
# ::snt The answer to both of your questions is yes.
# ::tok The answer to both of your questions is yes .
# ::alignments 1-2|0.0 3-4|0.0.1 5-6|0.0.0 6-7|0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.679312 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	answer-01	6-7
# ::node	0.0	question-01	1-2
# ::node	0.0.0	you	5-6
# ::node	0.0.1	both	3-4
# ::node	0.1	yes	8-9
# ::root	0	answer-01
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	answer-01	ARG2	yes	0	0.1
# ::edge	question-01	ARG0	you	0.0	0.0.0
# ::edge	question-01	mod	both	0.0	0.0.1
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you) :mod (MRPNode-3 / both)) :ARG2 (MRPNode-4 / yes))

# ::id 682
# ::snt You are making this too complicated.
# ::tok You are making this too complicated .
# ::alignments 0-1|0.1 2-3|0 3-4|0.0.0 4-5|0.0.1.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.683291 ::parser eager_oracle ::smatch 0.761904761904762 ::n_actions 23
# ::node	0	make-02	2-3
# ::node	0.0	complicate-01	5-6
# ::node	0.0.0	this	3-4
# ::node	0.0.1	have-degree-91	
# ::node	0.0.1.0	too	4-5
# ::node	0.1	you	0-1
# ::root	0	make-02
# ::edge	complicate-01	ARG1	this	0.0	0.0.0
# ::edge	complicate-01	ARG2-of	have-degree-91	0.0	0.0.1
# ::edge	have-degree-91	ARG1	this	0.0.1	0.0.0
# ::edge	have-degree-91	ARG3	too	0.0.1	0.0.1.0
# ::edge	make-02	ARG0	you	0	0.1
# ::edge	make-02	ARG1	complicate-01	0	0.0
(MRPNode-0 / make-02 :ARG1 (MRPNode-1 / complicate-01 :ARG1 (MRPNode-2 / this) :ARG2-of (MRPNode-3 / have-degree-91 :ARG1 MRPNode-2 :ARG3 (MRPNode-4 / too))) :ARG0 (MRPNode-5 / you))

# ::id 683
# ::snt It is not a good idea.
# ::tok It is not a good idea .
# ::alignments 0-1|0.1 2-3|0.0.0 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.685208 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	idea	5-6
# ::node	0.0	good-02	4-5
# ::node	0.0.0	-	2-3
# ::node	0.1	it	0-1
# ::root	0	idea
# ::edge	good-02	polarity	-	0.0	0.0.0
# ::edge	idea	ARG1-of	good-02	0	0.0
# ::edge	idea	domain	it	0	0.1
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / good-02 :polarity -) :domain (MRPNode-2 / it))

# ::id 684
# ::snt Take a look at this:
# ::tok Take a look at this :
# ::alignments 0-1|0.2 2-3|0+0.0 4-5|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.687250 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	look-01	2-3
# ::node	0.0	imperative	2-3
# ::node	0.1	this	4-5
# ::node	0.2	you	0-1
# ::root	0	look-01
# ::edge	look-01	ARG0	you	0	0.2
# ::edge	look-01	ARG1	this	0	0.1
# ::edge	look-01	mode	imperative	0	0.0
(MRPNode-0 / look-01 :mode imperative :ARG1 (MRPNode-1 / this) :ARG0 (MRPNode-2 / you))

# ::id 685
# ::snt But it is not a good idea.
# ::tok But it is not a good idea .
# ::alignments 0-1|0 1-2|0.0.1 3-4|0.0.0.0 5-6|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.689500 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	contrast-01	0-1
# ::node	0.0	idea	6-7
# ::node	0.0.0	good-02	5-6
# ::node	0.0.0.0	-	3-4
# ::node	0.0.1	it	1-2
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	idea	0	0.0
# ::edge	good-02	polarity	-	0.0.0	0.0.0.0
# ::edge	idea	ARG1-of	good-02	0.0	0.0.0
# ::edge	idea	domain	it	0.0	0.0.1
(MRPNode-0 / contrast-01 :ARG2 (MRPNode-1 / idea :ARG1-of (MRPNode-2 / good-02 :polarity -) :domain (MRPNode-3 / it)))

# ::id 686
# ::snt I had a similar situation.
# ::tok I had a similar situation .
# ::alignments 0-1|0.1 1-2|0 3-4|0.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.691393 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	have-03	1-2
# ::node	0.0	situation	4-5
# ::node	0.0.0	resemble-01	3-4
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	situation	0	0.0
# ::edge	situation	ARG1-of	resemble-01	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / situation :ARG1-of (MRPNode-2 / resemble-01)) :ARG0 (MRPNode-3 / i))

# ::id 687
# ::snt I had this same problem.
# ::tok I had this same problem .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.0 3-4|0.0.1 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.693489 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	have-03	1-2
# ::node	0.0	problem	4-5
# ::node	0.0.0	this	2-3
# ::node	0.0.1	same-01	3-4
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
# ::edge	problem	ARG1-of	same-01	0.0	0.0.1
# ::edge	problem	ARG1-of	this	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem :ARG1-of (MRPNode-2 / this) :ARG1-of (MRPNode-3 / same-01)) :ARG0 (MRPNode-4 / i))

# ::id 688
# ::snt You have answered your own question.
# ::tok You have answered your own question .
# ::alignments 2-3|0.0 3-4|0.0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.698937 ::parser eager_oracle ::smatch 1.0 ::n_actions 19
# ::node	0	answer-01	5-6
# ::node	0.0	question-01	2-3
# ::node	0.0.0	you	3-4
# ::root	0	answer-01
# ::edge	answer-01	ARG0	you	0	0.0.0
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	question-01	ARG0	you	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG0 MRPNode-2)

# ::id 689
# ::snt I don't see why that should be a problem.
# ::tok I do n't see why that should be a problem .
# ::alignments 0-1|0.1+0.1.0+0.2 2-3|0.0 3-4|0 5-6|0.1.0.0.0.0 6-7|0.1.0.0 9-10|0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.712037 ::parser eager_oracle ::smatch 1.0 ::n_actions 42
# ::node	0	see-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	thing	0-1
# ::node	0.1.0	cause-01	0-1
# ::node	0.1.0.0	recommend-01	6-7
# ::node	0.1.0.0.0	problem	9-10
# ::node	0.1.0.0.0.0	that	5-6
# ::node	0.2	i	0-1
# ::root	0	see-01
# ::edge	cause-01	ARG1	recommend-01	0.1.0	0.1.0.0
# ::edge	problem	domain	that	0.1.0.0.0	0.1.0.0.0.0
# ::edge	recommend-01	ARG1	problem	0.1.0.0	0.1.0.0.0
# ::edge	see-01	ARG0	i	0	0.2
# ::edge	see-01	ARG1	thing	0	0.1
# ::edge	see-01	polarity	-	0	0.0
# ::edge	thing	ARG0-of	cause-01	0.1	0.1.0
(MRPNode-0 / see-01 :polarity - :ARG1 (MRPNode-1 / thing :ARG0-of (MRPNode-2 / cause-01 :ARG1 (MRPNode-3 / recommend-01 :ARG1 (MRPNode-4 / problem :domain (MRPNode-5 / that))))) :ARG0 (MRPNode-6 / i))

# ::id 690
# ::snt No, it makes no difference.
# ::tok No , it makes no difference .
# ::alignments 0-1|0.0 2-3|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.714591 ::parser eager_oracle ::smatch 0.0 ::n_actions 14
# ::node	0	sense-02	
# ::node	0.0	-	0-1
# ::node	0.1	it	2-3
# ::root	0	sense-02
# ::edge	sense-02	ARG1	it	0	0.1
# ::edge	sense-02	polarity	-	0	0.0
(MRPNode-0 / sense-02 :polarity - :ARG1 (MRPNode-1 / it))

# ::id 691
# ::snt I think it is okay to ask the question.
# ::tok I think it is okay to ask the question .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0 6-7|0.0.0 8-9|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.718701 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	think-01	1-2
# ::node	0.0	okay-04	4-5
# ::node	0.0.0	ask-01	6-7
# ::node	0.0.0.0	question-01	8-9
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	ask-01	ARG1	question-01	0.0.0	0.0.0.0
# ::edge	okay-04	ARG1	ask-01	0.0	0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	okay-04	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / okay-04 :ARG1 (MRPNode-2 / ask-01 :ARG1 (MRPNode-3 / question-01))) :ARG0 (MRPNode-4 / i))

# ::id 692
# ::snt I'm afraid there's not really a lot you can do.
# ::tok I 'm afraid there 's not really a lot you can do .
# ::alignments 0-1|0.1 2-3|0 5-6|0.0.0.1.0 6-7|0.0.1 8-9|0.0.0.1 9-10|0.0.0.0 10-11|0.0 11-12|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.724287 ::parser eager_oracle ::smatch 0.9032258064516129 ::n_actions 43
# ::node	0	fear-01	2-3
# ::node	0.0	possible-01	10-11
# ::node	0.0.0	do-02	11-12
# ::node	0.0.0.0	you	9-10
# ::node	0.0.0.1	lot	8-9
# ::node	0.0.0.1.0	-	5-6
# ::node	0.0.1	real-04	6-7
# ::node	0.1	i	0-1
# ::root	0	fear-01
# ::edge	do-02	ARG1	lot	0.0.0	0.0.0.1
# ::edge	do-02	ARG1	you	0.0.0	0.0.0.0
# ::edge	fear-01	ARG0	i	0	0.1
# ::edge	fear-01	ARG1	possible-01	0	0.0
# ::edge	lot	polarity	-	0.0.0.1	0.0.0.1.0
# ::edge	possible-01	ARG1	do-02	0.0	0.0.0
# ::edge	possible-01	ARG1-of	real-04	0.0	0.0.1
(MRPNode-0 / fear-01 :ARG1 (MRPNode-1 / possible-01 :ARG1 (MRPNode-2 / do-02 :ARG1 (MRPNode-3 / you) :ARG1 (MRPNode-4 / lot :polarity -)) :ARG1-of (MRPNode-5 / real-04)) :ARG0 (MRPNode-6 / i))

# ::id 693
# ::snt You've answered your own question already.
# ::tok You 've answered your own question already .
# ::alignments 2-3|0.0 3-4|0.0.0 5-6|0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:41.734503 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	answer-01	5-6
# ::node	0.0	question-01	2-3
# ::node	0.0.0	you	3-4
# ::node	0.1	already	6-7
# ::root	0	answer-01
# ::edge	answer-01	ARG0	you	0	0.0.0
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	answer-01	time	already	0	0.1
# ::edge	question-01	ARG0	you	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG0 MRPNode-2 :time (MRPNode-3 / already))

# ::id 694
# ::snt Can you do it?
# ::tok Can you do it ?
# ::alignments 0-1|0 1-2|0.0.1 2-3|0.0 3-4|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.736774 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 19
# ::node	0	possible-01	0-1
# ::node	0.0	do-02	2-3
# ::node	0.0.0	it	3-4
# ::node	0.0.1	you	1-2
# ::node	0.1	amr-unknown	
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	it	0.0	0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	possible-01	ARG1-of	amr-unknown	0	0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / you)) :ARG1-of (MRPNode-4 / amr-unknown))

# ::id 695
# ::snt How to do that?
# ::tok How to do that ?
# ::alignments 0-1|0.1 2-3|0 3-4|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.738107 ::parser eager_oracle ::smatch 1.0 ::n_actions 16
# ::node	0	do-02	2-3
# ::node	0.0	that	3-4
# ::node	0.1	amr-unknown	0-1
# ::root	0	do-02
# ::edge	do-02	ARG1	that	0	0.0
# ::edge	do-02	manner	amr-unknown	0	0.1
(MRPNode-0 / do-02 :ARG1 (MRPNode-1 / that) :manner (MRPNode-2 / amr-unknown))

# ::id 696
# ::snt It's definitely just a matter of preference.
# ::tok It 's definitely just a matter of preference .
# ::alignments 0-1|0.2 2-3|0.3 3-4|0.1 5-6|0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.744559 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	matter	5-6
# ::node	0.0	prefer-01	7-8
# ::node	0.1	just	3-4
# ::node	0.2	it	0-1
# ::node	0.3	definite	2-3
# ::root	0	matter
# ::edge	matter	mod	definite	0	0.3
# ::edge	matter	mod	it	0	0.2
# ::edge	matter	mod	just	0	0.1
# ::edge	matter	mod	prefer-01	0	0.0
(MRPNode-0 / matter :mod (MRPNode-1 / prefer-01) :mod (MRPNode-2 / just) :mod (MRPNode-3 / it) :mod (MRPNode-4 / definite))

# ::id 697
# ::snt I don't see why this could be a problem.
# ::tok I do n't see why this could be a problem .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 5-6|0.1.0.0.0.0 6-7|0.1+0.1.0+0.1.0.0 9-10|0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:41.755676 ::parser eager_oracle ::smatch 1.0 ::n_actions 40
# ::node	0	see-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	thing	6-7
# ::node	0.1.0	cause-01	6-7
# ::node	0.1.0.0	possible-01	6-7
# ::node	0.1.0.0.0	problem	9-10
# ::node	0.1.0.0.0.0	this	5-6
# ::node	0.2	i	0-1
# ::root	0	see-01
# ::edge	cause-01	ARG1	possible-01	0.1.0	0.1.0.0
# ::edge	possible-01	ARG1	problem	0.1.0.0	0.1.0.0.0
# ::edge	problem	domain	this	0.1.0.0.0	0.1.0.0.0.0
# ::edge	see-01	ARG0	i	0	0.2
# ::edge	see-01	ARG1	thing	0	0.1
# ::edge	see-01	polarity	-	0	0.0
# ::edge	thing	ARG0-of	cause-01	0.1	0.1.0
(MRPNode-0 / see-01 :polarity - :ARG1 (MRPNode-1 / thing :ARG0-of (MRPNode-2 / cause-01 :ARG1 (MRPNode-3 / possible-01 :ARG1 (MRPNode-4 / problem :domain (MRPNode-5 / this))))) :ARG0 (MRPNode-6 / i))

# ::id 698
# ::snt I really do not think there is much you can do about that.
# ::tok I really do not think there is much you can do about that .
# ::alignments 0-1|0.2 1-2|0.3 3-4|0.0 4-5|0 7-8|0.1.0.2 8-9|0.1.0.1 9-10|0.1 10-11|0.1.0 12-13|0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.004030 ::parser eager_oracle ::smatch 1.0 ::n_actions 45
# ::node	0	think-01	4-5
# ::node	0.0	-	3-4
# ::node	0.1	possible-01	9-10
# ::node	0.1.0	do-02	10-11
# ::node	0.1.0.0	that	12-13
# ::node	0.1.0.1	you	8-9
# ::node	0.1.0.2	much	7-8
# ::node	0.2	i	0-1
# ::node	0.3	real-04	1-2
# ::root	0	think-01
# ::edge	do-02	ARG0	you	0.1.0	0.1.0.1
# ::edge	do-02	ARG1	much	0.1.0	0.1.0.2
# ::edge	do-02	ARG1	that	0.1.0	0.1.0.0
# ::edge	possible-01	ARG1	do-02	0.1	0.1.0
# ::edge	think-01	ARG0	i	0	0.2
# ::edge	think-01	ARG1	possible-01	0	0.1
# ::edge	think-01	ARG1-of	real-04	0	0.3
# ::edge	think-01	polarity	-	0	0.0
(MRPNode-0 / think-01 :polarity - :ARG1 (MRPNode-1 / possible-01 :ARG1 (MRPNode-2 / do-02 :ARG1 (MRPNode-3 / that) :ARG0 (MRPNode-4 / you) :ARG1 (MRPNode-5 / much))) :ARG0 (MRPNode-6 / i) :ARG1-of (MRPNode-7 / real-04))

# ::id 699
# ::snt Yes you got it.
# ::tok Yes you got it .
# ::alignments 1-2|0.1 2-3|0 3-4|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.005850 ::parser eager_oracle ::smatch 1.0 ::n_actions 16
# ::node	0	get-01	2-3
# ::node	0.0	it	3-4
# ::node	0.1	you	1-2
# ::root	0	get-01
# ::edge	get-01	ARG0	you	0	0.1
# ::edge	get-01	ARG1	it	0	0.0
(MRPNode-0 / get-01 :ARG1 (MRPNode-1 / it) :ARG0 (MRPNode-2 / you))

# ::id 700
# ::snt A couple things to consider:
# ::tok A couple things to consider :
# ::alignments 1-2|0.0 2-3|0 4-5|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.007926 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	thing	2-3
# ::node	0.0	couple	1-2
# ::node	0.1	consider-02	4-5
# ::root	0	thing
# ::edge	thing	ARG1-of	consider-02	0	0.1
# ::edge	thing	quant	couple	0	0.0
(MRPNode-0 / thing :quant (MRPNode-1 / couple) :ARG1-of (MRPNode-2 / consider-02))

# ::id 701
# ::snt So, CAN you do this?
# ::tok So , CAN you do this ?
# ::alignments 0-1|0 2-3|0.0 3-4|0.0.0.1 4-5|0.0.0 5-6|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.011055 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 24
# ::node	0	cause-01	0-1
# ::node	0.0	possible-01	2-3
# ::node	0.0.0	do-02	4-5
# ::node	0.0.0.0	this	5-6
# ::node	0.0.0.1	you	3-4
# ::node	0.0.1	amr-unknown	
# ::root	0	cause-01
# ::edge	cause-01	ARG1	possible-01	0	0.0
# ::edge	do-02	ARG0	you	0.0.0	0.0.0.1
# ::edge	do-02	ARG1	this	0.0.0	0.0.0.0
# ::edge	possible-01	ARG1	do-02	0.0	0.0.0
# ::edge	possible-01	ARG1-of	amr-unknown	0.0	0.0.1
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / possible-01 :ARG1 (MRPNode-2 / do-02 :ARG1 (MRPNode-3 / this) :ARG0 (MRPNode-4 / you)) :ARG1-of (MRPNode-5 / amr-unknown)))

# ::id 702
# ::snt There are a couple things you can try.
# ::tok There are a couple things you can try .
# ::alignments 3-4|0.0 4-5|0 5-6|0.1.0 6-7|0.1.1 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.014631 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	thing	4-5
# ::node	0.0	couple	3-4
# ::node	0.1	try-01	7-8
# ::node	0.1.0	you	5-6
# ::node	0.1.1	possible-01	6-7
# ::root	0	thing
# ::edge	thing	ARG1-of	try-01	0	0.1
# ::edge	thing	quant	couple	0	0.0
# ::edge	try-01	ARG0	you	0.1	0.1.0
# ::edge	try-01	ARG1-of	possible-01	0.1	0.1.1
(MRPNode-0 / thing :quant (MRPNode-1 / couple) :ARG1-of (MRPNode-2 / try-01 :ARG0 (MRPNode-3 / you) :ARG1-of (MRPNode-4 / possible-01)))

# ::id 703
# ::snt You've got it right.
# ::tok You 've got it right .
# ::alignments 0-1|0.1 3-4|0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.017931 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	right-06	4-5
# ::node	0.0	it	3-4
# ::node	0.1	you	0-1
# ::root	0	right-06
# ::edge	right-06	ARG1	it	0	0.0
# ::edge	right-06	ARG1	you	0	0.1
(MRPNode-0 / right-06 :ARG1 (MRPNode-1 / it) :ARG1 (MRPNode-2 / you))

# ::id 704
# ::snt You pretty much answered your own question.
# ::tok You pretty much answered your own question .
# ::alignments 1-2|0.1 3-4|0 4-5|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.027560 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	answer-01	3-4
# ::node	0.0	question-01	6-7
# ::node	0.0.0	you	4-5
# ::node	0.1	pretty-much	1-2
# ::root	0	answer-01
# ::edge	answer-01	ARG0	you	0	0.0.0
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	answer-01	degree	pretty-much	0	0.1
# ::edge	question-01	ARG0	you	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG0 MRPNode-2 :degree (MRPNode-3 / pretty-much))

# ::id 705
# ::snt You're on the right path.
# ::tok You 're on the right path .
# ::alignments 0-1|0.0 2-3|0 4-5|0.1.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.030421 ::parser eager_oracle ::smatch 0.823529411764706 ::n_actions 21
# ::node	0	be-located-at-91	2-3
# ::node	0.0	you	0-1
# ::node	0.1	path	5-6
# ::node	0.1.0	right-06	4-5
# ::root	0	be-located-at-91
# ::edge	be-located-at-91	ARG1	you	0	0.0
# ::edge	be-located-at-91	ARG2	path	0	0.1
# ::edge	path	ARG1-of	right-06	0.1	0.1.0
(MRPNode-0 / be-located-at-91 :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / path :ARG1-of (MRPNode-3 / right-06)))

# ::id 706
# ::snt What are you goals?
# ::tok What are you goals ?
# ::alignments 0-1|0.0 2-3|0.1 3-4|0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.031932 ::parser eager_oracle ::smatch 1.0 ::n_actions 16
# ::node	0	goal	3-4
# ::node	0.0	amr-unknown	0-1
# ::node	0.1	you	2-3
# ::root	0	goal
# ::edge	goal	domain	amr-unknown	0	0.0
# ::edge	goal	domain	you	0	0.1
(MRPNode-0 / goal :domain (MRPNode-1 / amr-unknown) :domain (MRPNode-2 / you))

# ::id 707
# ::snt A few things to think about:
# ::tok A few things to think about :
# ::alignments 1-2|0.0 2-3|0 4-5|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.036186 ::parser eager_oracle ::smatch 1.0 ::n_actions 18
# ::node	0	thing	2-3
# ::node	0.0	few	1-2
# ::node	0.1	think-01	4-5
# ::root	0	thing
# ::edge	thing	ARG2-of	think-01	0	0.1
# ::edge	thing	quant	few	0	0.0
(MRPNode-0 / thing :quant (MRPNode-1 / few) :ARG2-of (MRPNode-2 / think-01))

# ::id 708
# ::snt I think this is one of those things where you are just out of luck.
# ::tok I think this is one of those things where you are just out of luck .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1 5-6|0.0 7-8|0.0.0 9-10|0.0.0.0.2 11-12|0.0.0.0.1 14-15|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.222034 ::parser eager_oracle ::smatch 0.9696969696969697 ::n_actions 42
# ::node	0	think-01	1-2
# ::node	0.0	include-91	5-6
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	luck	14-15
# ::node	0.0.0.0.0	-	
# ::node	0.0.0.0.1	just	11-12
# ::node	0.0.0.0.2	you	9-10
# ::node	0.0.1	this	2-3
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	include-91	ARG1	thing	0.0	0.0.0
# ::edge	include-91	ARG1	this	0.0	0.0.1
# ::edge	luck	domain	you	0.0.0.0	0.0.0.0.2
# ::edge	luck	mod	just	0.0.0.0	0.0.0.0.1
# ::edge	luck	polarity	-	0.0.0.0	0.0.0.0.0
# ::edge	thing	mod	luck	0.0.0	0.0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	include-91	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / include-91 :ARG1 (MRPNode-2 / thing :mod (MRPNode-3 / luck :polarity - :mod (MRPNode-4 / just) :domain (MRPNode-5 / you))) :ARG1 (MRPNode-6 / this)) :ARG0 (MRPNode-7 / i))

# ::id 709
# ::snt It's mostly a matter of taste.
# ::tok It 's mostly a matter of taste .
# ::alignments 0-1|0.2 2-3|0.1 4-5|0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.224884 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	matter	4-5
# ::node	0.0	taste	6-7
# ::node	0.1	most	2-3
# ::node	0.2	it	0-1
# ::root	0	matter
# ::edge	matter	domain	it	0	0.2
# ::edge	matter	mod	most	0	0.1
# ::edge	matter	mod	taste	0	0.0
(MRPNode-0 / matter :mod (MRPNode-1 / taste) :mod (MRPNode-2 / most) :domain (MRPNode-3 / it))

# ::id 710
# ::snt I have just had the same problem.
# ::tok I have just had the same problem .
# ::alignments 0-1|0.1 1-2|0 2-3|0.2 5-6|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.228856 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	have-03	1-2
# ::node	0.0	problem	6-7
# ::node	0.0.0	same-01	5-6
# ::node	0.1	i	0-1
# ::node	0.2	just	2-3
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
# ::edge	have-03	mod	just	0	0.2
# ::edge	problem	ARG1-of	same-01	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem :ARG1-of (MRPNode-2 / same-01)) :ARG0 (MRPNode-3 / i) :mod (MRPNode-4 / just))

# ::id 711
# ::snt I think it's a bad idea.
# ::tok I think it 's a bad idea .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1 5-6|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.236740 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	think-01	1-2
# ::node	0.0	idea	6-7
# ::node	0.0.0	bad-07	5-6
# ::node	0.0.1	it	2-3
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	idea	ARG1-of	bad-07	0.0	0.0.0
# ::edge	idea	domain	it	0.0	0.0.1
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	idea	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / idea :ARG1-of (MRPNode-2 / bad-07) :domain (MRPNode-3 / it)) :ARG0 (MRPNode-4 / i))

# ::id 712
# ::snt Not a good idea.
# ::tok Not a good idea .
# ::alignments 0-1|0.0.0 2-3|0.0 3-4|0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.237989 ::parser eager_oracle ::smatch 1.0 ::n_actions 16
# ::node	0	idea	3-4
# ::node	0.0	good-02	2-3
# ::node	0.0.0	-	0-1
# ::root	0	idea
# ::edge	good-02	polarity	-	0.0	0.0.0
# ::edge	idea	ARG1-of	good-02	0	0.0
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / good-02 :polarity -))

# ::id 713
# ::snt I have exactly the same problem.
# ::tok I have exactly the same problem .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.0.0 4-5|0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.240705 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	have-03	1-2
# ::node	0.0	problem	5-6
# ::node	0.0.0	same-01	4-5
# ::node	0.0.0.0	exact	2-3
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
# ::edge	problem	ARG1-of	same-01	0.0	0.0.0
# ::edge	same-01	mod	exact	0.0.0	0.0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem :ARG1-of (MRPNode-2 / same-01 :mod (MRPNode-3 / exact))) :ARG0 (MRPNode-4 / i))

# ::id 714
# ::snt I think there are two important things to consider:
# ::tok I think there are two important things to consider :
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0 5-6|0.0.1 6-7|0.0 8-9|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:42.253666 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	think-01	1-2
# ::node	0.0	thing	6-7
# ::node	0.0.0	2	4-5
# ::node	0.0.1	important-01	5-6
# ::node	0.0.2	consider-01	8-9
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	thing	ARG1-of	consider-01	0.0	0.0.2
# ::edge	thing	ARG1-of	important-01	0.0	0.0.1
# ::edge	thing	quant	2	0.0	0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	thing	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / thing :quant 2 :ARG1-of (MRPNode-2 / important-01) :ARG1-of (MRPNode-3 / consider-01)) :ARG0 (MRPNode-4 / i))

# ::id 715
# ::snt It is up to you.
# ::tok It is up to you .
# ::alignments 0-1|0.1 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.254764 ::parser eager_oracle ::smatch 0.25 ::n_actions 13
# ::node	0	depend-01	
# ::node	0.0	you	4-5
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	you	0	0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / you) :ARG0 (MRPNode-2 / it))

# ::id 716
# ::snt There are only three options:
# ::tok There are only three options :
# ::alignments 2-3|0.1 3-4|0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.256224 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	option	4-5
# ::node	0.0	3	3-4
# ::node	0.1	only	2-3
# ::root	0	option
# ::edge	option	mod	only	0	0.1
# ::edge	option	quant	3	0	0.0
(MRPNode-0 / option :quant 3 :mod (MRPNode-1 / only))

# ::id 717
# ::snt Think of it this way.
# ::tok Think of it this way .
# ::alignments 0-1|0+0.0+0.2 2-3|0.1 3-4|0.3.0 4-5|0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:42.271166 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	think-01	0-1
# ::node	0.0	imperative	0-1
# ::node	0.1	it	2-3
# ::node	0.2	you	0-1
# ::node	0.3	way	4-5
# ::node	0.3.0	this	3-4
# ::root	0	think-01
# ::edge	think-01	ARG0	you	0	0.2
# ::edge	think-01	ARG1	it	0	0.1
# ::edge	think-01	manner	way	0	0.3
# ::edge	think-01	mode	imperative	0	0.0
# ::edge	way	mod	this	0.3	0.3.0
(MRPNode-0 / think-01 :mode imperative :ARG1 (MRPNode-1 / it) :ARG0 (MRPNode-2 / you) :manner (MRPNode-3 / way :mod (MRPNode-4 / this)))

# ::id 718
# ::snt Maybe this can work for you.
# ::tok Maybe this can work for you .
# ::alignments 0-1|0 1-2|0.0.0 3-4|0.0 5-6|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.273981 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	possible-01	0-1
# ::node	0.0	work-09	3-4
# ::node	0.0.0	this	1-2
# ::node	0.0.1	you	5-6
# ::root	0	possible-01
# ::edge	possible-01	ARG1	work-09	0	0.0
# ::edge	work-09	ARG1	this	0.0	0.0.0
# ::edge	work-09	ARG2	you	0.0	0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / work-09 :ARG1 (MRPNode-2 / this) :ARG2 (MRPNode-3 / you)))

# ::id 719
# ::snt Not a good idea.
# ::tok Not a good idea .
# ::alignments 0-1|0.0.0 2-3|0.0 3-4|0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.275242 ::parser eager_oracle ::smatch 1.0 ::n_actions 16
# ::node	0	idea	3-4
# ::node	0.0	good-02	2-3
# ::node	0.0.0	-	0-1
# ::root	0	idea
# ::edge	good-02	polarity	-	0.0	0.0.0
# ::edge	idea	ARG1-of	good-02	0	0.0
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / good-02 :polarity -))

# ::id 720
# ::snt I know this is an old question but I feel I should add my 2 cents.
# ::tok I know this is an old question but I feel I should add my 2 cents .
# ::alignments 0-1|0 2-3|0.0.1 5-6|0.0.0 6-7|0.0 9-10|0.2 11-12|0.1.1 12-13|0.1.0 13-14|0.1 14-15|0.1.0.0.0 15-16|0.1.0.0+0.1.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.394688 ::parser eager_oracle ::smatch 1.0 ::n_actions 57
# ::node	0	know-01	0-1
# ::node	0.0	question-01	6-7
# ::node	0.0.0	old	5-6
# ::node	0.0.1	this	2-3
# ::node	0.1	i	13-14
# ::node	0.1.0	add-02	12-13
# ::node	0.1.0.0	monetary-quantity	15-16
# ::node	0.1.0.0.0	2	14-15
# ::node	0.1.0.0.1	cent	15-16
# ::node	0.1.1	recommend-01	11-12
# ::node	0.2	feel-02	9-10
# ::root	0	know-01
# ::edge	add-02	ARG1	monetary-quantity	0.1.0	0.1.0.0
# ::edge	feel-02	ARG0	i	0.2	0.1
# ::edge	feel-02	ARG1	recommend-01	0.2	0.1.1
# ::edge	i	ARG0-of	add-02	0.1	0.1.0
# ::edge	i	ARG2-of	recommend-01	0.1	0.1.1
# ::edge	know-01	ARG0	i	0	0.1
# ::edge	know-01	ARG1	question-01	0	0.0
# ::edge	know-01	concession	feel-02	0	0.2
# ::edge	monetary-quantity	quant	2	0.1.0.0	0.1.0.0.0
# ::edge	monetary-quantity	unit	cent	0.1.0.0	0.1.0.0.1
# ::edge	question-01	domain	this	0.0	0.0.1
# ::edge	question-01	mod	old	0.0	0.0.0
# ::edge	recommend-01	ARG1	add-02	0.1.1	0.1.0
(MRPNode-0 / know-01 :ARG1 (MRPNode-1 / question-01 :mod (MRPNode-2 / old) :domain (MRPNode-3 / this)) :ARG0 (MRPNode-4 / i :ARG0-of (MRPNode-5 / add-02 :ARG1 (MRPNode-6 / monetary-quantity :quant 2 :unit (MRPNode-7 / cent))) :ARG2-of (MRPNode-8 / recommend-01 :ARG1 MRPNode-5)) :concession (MRPNode-9 / feel-02 :ARG0 MRPNode-4 :ARG1 MRPNode-8))

# ::id 721
# ::snt You have to find out what works for you.
# ::tok You have to find out what works for you .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.400058 ::parser eager_oracle ::smatch 0.8571428571428571 ::n_actions 27
# ::node	0	obligate-01	1-2
# ::node	0.0	you	0-1
# ::node	0.0.0	work-01	6-7
# ::node	0.0.0.0	thing	
# ::node	0.1	find-out-03	3-4
# ::root	0	obligate-01
# ::edge	find-out-03	ARG0	you	0.1	0.0
# ::edge	find-out-03	ARG1	thing	0.1	0.0.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	find-out-03	0	0.1
# ::edge	work-01	ARG1	thing	0.0.0	0.0.0.0
# ::edge	you	ARG2-of	work-01	0.0	0.0.0
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG2-of (MRPNode-2 / work-01 :ARG1 (MRPNode-4 / thing))) :ARG2 (MRPNode-3 / find-out-03 :ARG0 MRPNode-1 :ARG1 MRPNode-4))

# ::id 722
# ::snt I agree with the previous comments.
# ::tok I agree with the previous comments .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.402231 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	agree-01	1-2
# ::node	0.0	comment-01	5-6
# ::node	0.0.0	previous	4-5
# ::node	0.1	i	0-1
# ::root	0	agree-01
# ::edge	agree-01	ARG0	i	0	0.1
# ::edge	agree-01	ARG1	comment-01	0	0.0
# ::edge	comment-01	time	previous	0.0	0.0.0
(MRPNode-0 / agree-01 :ARG1 (MRPNode-1 / comment-01 :time (MRPNode-2 / previous)) :ARG0 (MRPNode-3 / i))

# ::id 723
# ::snt That depends on which country you are in.
# ::tok That depends on which country you are in .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0 5-6|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.404421 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	depend-01	1-2
# ::node	0.0	country	4-5
# ::node	0.0.0	you	5-6
# ::node	0.1	that	0-1
# ::root	0	depend-01
# ::edge	country	ARG2-of	you	0.0	0.0.0
# ::edge	depend-01	ARG0	that	0	0.1
# ::edge	depend-01	ARG1	country	0	0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / country :ARG2-of (MRPNode-2 / you)) :ARG0 (MRPNode-3 / that))

# ::id 724
# ::snt This is a bad idea.
# ::tok This is a bad idea .
# ::alignments 0-1|0.1 3-4|0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.405907 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	idea	4-5
# ::node	0.0	bad-07	3-4
# ::node	0.1	this	0-1
# ::root	0	idea
# ::edge	idea	ARG1-of	bad-07	0	0.0
# ::edge	idea	domain	this	0	0.1
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / bad-07) :domain (MRPNode-2 / this))

# ::id 725
# ::snt You have to know what you want to do.
# ::tok You have to know what you want to do .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1 6-7|0.0.1 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.463835 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 32
# ::node	0	obligate-01	1-2
# ::node	0.0	you	0-1
# ::node	0.0.0	do-02	8-9
# ::node	0.0.0.0	thing	
# ::node	0.0.1	want-01	6-7
# ::node	0.1	know-01	3-4
# ::root	0	obligate-01
# ::edge	do-02	ARG1	thing	0.0.0	0.0.0.0
# ::edge	know-01	ARG0	you	0.1	0.0
# ::edge	know-01	ARG1	thing	0.1	0.0.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	know-01	0	0.1
# ::edge	want-01	ARG1	do-02	0.0.1	0.0.0
# ::edge	you	ARG0-of	do-02	0.0	0.0.0
# ::edge	you	ARG0-of	want-01	0.0	0.0.1
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / do-02 :ARG1 (MRPNode-5 / thing)) :ARG0-of (MRPNode-3 / want-01 :ARG1 MRPNode-2)) :ARG2 (MRPNode-4 / know-01 :ARG0 MRPNode-1 :ARG1 MRPNode-5))

# ::id 726
# ::snt I have two suggestions for you:
# ::tok I have two suggestions for you :
# ::alignments 0-1|0.0+0.1 2-3|0.0.0 3-4|0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:42.466359 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	suggest-01	3-4
# ::node	0.0	thing	0-1
# ::node	0.0.0	2	2-3
# ::node	0.1	i	0-1
# ::node	0.2	you	5-6
# ::root	0	suggest-01
# ::edge	suggest-01	ARG0	i	0	0.1
# ::edge	suggest-01	ARG1	thing	0	0.0
# ::edge	suggest-01	ARG2	you	0	0.2
# ::edge	thing	quant	2	0.0	0.0.0
(MRPNode-0 / suggest-01 :ARG1 (MRPNode-1 / thing :quant 2) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / you))

# ::id 727
# ::snt Start them as early as possible.
# ::tok Start them as early as possible .
# ::alignments 0-1|0+0.0+0.2 3-4|0.3.2 5-6|0.3.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.469743 ::parser eager_oracle ::smatch 0.6086956521739131 ::n_actions 25
# ::node	0	start-01	0-1
# ::node	0.0	imperative	0-1
# ::node	0.1	they	1-2
# ::node	0.2	you	0-1
# ::node	0.3	have-degree-91	
# ::node	0.3.0	possible-01	5-6
# ::node	0.3.1	equal	
# ::node	0.3.2	early	3-4
# ::root	0	start-01
# ::edge	have-degree-91	ARG2	early	0.3	0.3.2
# ::edge	have-degree-91	ARG3	equal	0.3	0.3.1
# ::edge	have-degree-91	ARG3	possible-01	0.3	0.3.0
# ::edge	start-01	ARG0	you	0	0.2
# ::edge	start-01	ARG1	they	0	0.1
# ::edge	start-01	ARG1-of	have-degree-91	0	0.3
# ::edge	start-01	mode	imperative	0	0.0
# ::edge	start-01	time	early	0	0.3.2
(MRPNode-0 / start-01 :mode imperative :ARG1 (MRPNode-1 / they) :ARG0 (MRPNode-2 / you) :ARG1-of (MRPNode-3 / have-degree-91 :ARG3 (MRPNode-4 / possible-01) :ARG3 (MRPNode-5 / equal) :ARG2 (MRPNode-6 / early)) :time MRPNode-6)

# ::id 728
# ::snt I'll answer this question:
# ::tok I 'll answer this question :
# ::alignments 0-1|0.1 2-3|0 3-4|0.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.472955 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	answer-01	2-3
# ::node	0.0	question-01	4-5
# ::node	0.0.0	this	3-4
# ::node	0.1	i	0-1
# ::root	0	answer-01
# ::edge	answer-01	ARG0	i	0	0.1
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	question-01	mod	this	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :mod (MRPNode-2 / this)) :ARG0 (MRPNode-3 / i))

# ::id 729
# ::snt Sorry, I don't know the answer to your question.
# ::tok Sorry , I do n't know the answer to your question .
# ::alignments 0-1|0 2-3|0.0 4-5|0.1.0 5-6|0.1 7-8|0.1.1 9-10|0.1.1.0.0 10-11|0.1.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.530080 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	sorry-01	0-1
# ::node	0.0	i	2-3
# ::node	0.1	know-01	5-6
# ::node	0.1.0	-	4-5
# ::node	0.1.1	answer-01	7-8
# ::node	0.1.1.0	question-01	10-11
# ::node	0.1.1.0.0	you	9-10
# ::root	0	sorry-01
# ::edge	answer-01	ARG1	question-01	0.1.1	0.1.1.0
# ::edge	know-01	ARG0	i	0.1	0.0
# ::edge	know-01	ARG1	answer-01	0.1	0.1.1
# ::edge	know-01	polarity	-	0.1	0.1.0
# ::edge	question-01	ARG0	you	0.1.1.0	0.1.1.0.0
# ::edge	sorry-01	ARG2	i	0	0.0
# ::edge	sorry-01	ARG2	know-01	0	0.1
(MRPNode-0 / sorry-01 :ARG2 (MRPNode-1 / i) :ARG2 (MRPNode-2 / know-01 :polarity - :ARG0 MRPNode-1 :ARG1 (MRPNode-3 / answer-01 :ARG1 (MRPNode-4 / question-01 :ARG0 (MRPNode-5 / you)))))

# ::id 730
# ::snt "I always go by the rule ""When in doubt, throw it out!"
# ::tok " I always go by the rule " " When in doubt , throw it out ! "
# ::alignments 1-2|0.0.0 2-3|0.0.1 3-4|0.0 6-7|0.0.2 11-12|0.1.3 13-14|0.1+0.1.0+0.1.2 14-15|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.543876 ::parser eager_oracle ::smatch 0.8333333333333333 ::n_actions 48
# ::node	0	multi-sentence	
# ::node	0.0	go-06	3-4
# ::node	0.0.0	i	1-2
# ::node	0.0.1	always	2-3
# ::node	0.0.2	rule	6-7
# ::node	0.1	throw-out-06	13-14
# ::node	0.1.0	imperative	13-14
# ::node	0.1.1	it	14-15
# ::node	0.1.2	you	13-14
# ::node	0.1.3	doubt-01	11-12
# ::root	0	multi-sentence
# ::edge	go-06	ARG0	i	0.0	0.0.0
# ::edge	go-06	ARG2	always	0.0	0.0.1
# ::edge	go-06	ARG2	rule	0.0	0.0.2
# ::edge	multi-sentence	snt1	go-06	0	0.0
# ::edge	multi-sentence	snt2	throw-out-06	0	0.1
# ::edge	throw-out-06	ARG0	you	0.1	0.1.2
# ::edge	throw-out-06	ARG1	it	0.1	0.1.1
# ::edge	throw-out-06	mode	imperative	0.1	0.1.0
# ::edge	throw-out-06	time	doubt-01	0.1	0.1.3
(MRPNode-0 / multi-sentence :snt1 (MRPNode-1 / go-06 :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / always) :ARG2 (MRPNode-4 / rule)) :snt2 (MRPNode-5 / throw-out-06 :mode imperative :ARG1 (MRPNode-6 / it) :ARG0 (MRPNode-7 / you) :time (MRPNode-8 / doubt-01)))

# ::id 731
# ::snt This sound like a very bad idea.
# ::tok This sound like a very bad idea .
# ::alignments 0-1|0.0 1-2|0 4-5|0.1.0.0 5-6|0.1.0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.547873 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	sound-01	1-2
# ::node	0.0	this	0-1
# ::node	0.1	idea	6-7
# ::node	0.1.0	bad-07	5-6
# ::node	0.1.0.0	very	4-5
# ::root	0	sound-01
# ::edge	bad-07	degree	very	0.1.0	0.1.0.0
# ::edge	idea	ARG1-of	bad-07	0.1	0.1.0
# ::edge	sound-01	ARG1	this	0	0.0
# ::edge	sound-01	ARG2	idea	0	0.1
(MRPNode-0 / sound-01 :ARG1 (MRPNode-1 / this) :ARG2 (MRPNode-2 / idea :ARG1-of (MRPNode-3 / bad-07 :degree (MRPNode-4 / very))))

# ::id 732
# ::snt It depends on the meat and how it's cut.
# ::tok It depends on the meat and how it 's cut .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0 5-6|0.0 9-10|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.551858 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 29
# ::node	0	depend-01	1-2
# ::node	0.0	and	5-6
# ::node	0.0.0	meat	4-5
# ::node	0.0.0.0	cut-01	9-10
# ::node	0.0.1	thing	
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	and	op1	meat	0.0	0.0.0
# ::edge	and	op2	thing	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	meat	ARG1-of	cut-01	0.0.0	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / meat :ARG1-of (MRPNode-3 / cut-01)) :op2 (MRPNode-4 / thing)) :ARG0 (MRPNode-5 / it))

# ::id 733
# ::snt Have you tried asking?
# ::tok Have you tried asking ?
# ::alignments 1-2|0.0.0 2-3|0 3-4|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.554246 ::parser eager_oracle ::smatch 0.8750000000000001 ::n_actions 18
# ::node	0	try-01	2-3
# ::node	0.0	ask-01	3-4
# ::node	0.0.0	you	1-2
# ::node	0.1	amr-unknown	
# ::root	0	try-01
# ::edge	ask-01	ARG0	you	0.0	0.0.0
# ::edge	try-01	ARG0	you	0	0.0.0
# ::edge	try-01	ARG1	amr-unknown	0	0.1
# ::edge	try-01	ARG1	ask-01	0	0.0
(MRPNode-0 / try-01 :ARG1 (MRPNode-1 / ask-01 :ARG0 (MRPNode-2 / you)) :ARG0 MRPNode-2 :ARG1 (MRPNode-3 / amr-unknown))

# ::id 734
# ::snt There are two possible causes for this:
# ::tok There are two possible causes for this :
# ::alignments 2-3|0.0 3-4|0.2 4-5|0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.556817 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	cause-01	4-5
# ::node	0.0	2	2-3
# ::node	0.1	this	6-7
# ::node	0.2	possible-01	3-4
# ::root	0	cause-01
# ::edge	cause-01	ARG0	possible-01	0	0.2
# ::edge	cause-01	ARG1	this	0	0.1
# ::edge	cause-01	quant	2	0	0.0
(MRPNode-0 / cause-01 :quant 2 :ARG1 (MRPNode-1 / this) :ARG0 (MRPNode-2 / possible-01))

# ::id 735
# ::snt In other words, it depends on where you go, when you do there and how.
# ::tok In other words , it depends on where you go , when you do there and how .
# ::alignments 1-2|0.2.0 2-3|0.2 4-5|0.1 5-6|0 8-9|0.0.0.0.0 9-10|0.0.0.0+0.0.1+0.0.1.0 14-15|0.0.1.0.0 15-16|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.570147 ::parser eager_oracle ::smatch 0.909090909090909 ::n_actions 53
# ::node	0	depend-01	5-6
# ::node	0.0	and	15-16
# ::node	0.0.0	location	
# ::node	0.0.0.0	go-02	9-10
# ::node	0.0.0.0.0	you	8-9
# ::node	0.0.1	thing	9-10
# ::node	0.0.1.0	go-02	9-10
# ::node	0.0.1.0.0	there	14-15
# ::node	0.1	it	4-5
# ::node	0.2	word	2-3
# ::node	0.2.0	other	1-2
# ::root	0	depend-01
# ::edge	and	op1	location	0.0	0.0.0
# ::edge	and	op2	thing	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	depend-01	ARG1-of	word	0	0.2
# ::edge	go-02	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	go-02	ARG0	you	0.0.1.0	0.0.0.0.0
# ::edge	go-02	ARG4	there	0.0.1.0	0.0.1.0.0
# ::edge	location	ARG4-of	go-02	0.0.0	0.0.0.0
# ::edge	thing	manner-of	go-02	0.0.1	0.0.1.0
# ::edge	word	mod	other	0.2	0.2.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / location :ARG4-of (MRPNode-3 / go-02 :ARG0 (MRPNode-4 / you))) :op2 (MRPNode-5 / thing :manner-of (MRPNode-6 / go-02 :ARG0 MRPNode-4 :ARG4 (MRPNode-7 / there)))) :ARG0 (MRPNode-8 / it) :ARG1-of (MRPNode-9 / word :mod (MRPNode-10 / other)))

# ::id 736
# ::snt I have had the same problem.
# ::tok I have had the same problem .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.572433 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	have-03	1-2
# ::node	0.0	problem	5-6
# ::node	0.0.0	same-01	4-5
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
# ::edge	problem	ARG1-of	same-01	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem :ARG1-of (MRPNode-2 / same-01)) :ARG0 (MRPNode-3 / i))

# ::id 737
# ::snt I think that the short  answer to your question is: No.
# ::tok I think that the short answer to your question is : No.
# ::alignments 0-1|0.1 4-5|0.0.1 5-6|0.0 7-8|0.0.0.0 8-9|0.0.0 10-11|0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.587140 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 32
# ::node	0	think-01	10-11
# ::node	0.0	answer-01	5-6
# ::node	0.0.0	question-01	8-9
# ::node	0.0.0.0	you	7-8
# ::node	0.0.1	short-07	4-5
# ::node	0.0.2	no	
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	answer-01	ARG1	question-01	0.0	0.0.0
# ::edge	answer-01	ARG1-of	short-07	0.0	0.0.1
# ::edge	answer-01	ARG2	no	0.0	0.0.2
# ::edge	question-01	ARG0	you	0.0.0	0.0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	answer-01	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / answer-01 :ARG1 (MRPNode-2 / question-01 :ARG0 (MRPNode-3 / you)) :ARG1-of (MRPNode-4 / short-07) :ARG2 (MRPNode-5 / no)) :ARG0 (MRPNode-6 / i))

# ::id 738
# ::snt I don't think it makes much difference.
# ::tok I do n't think it makes much difference .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 4-5|0.1.1 5-6|0.1 6-7|0.1.0.0 7-8|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.723885 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	think-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	make-02	5-6
# ::node	0.1.0	differ-02	7-8
# ::node	0.1.0.0	much	6-7
# ::node	0.1.1	it	4-5
# ::node	0.2	i	0-1
# ::root	0	think-01
# ::edge	differ-02	degree	much	0.1.0	0.1.0.0
# ::edge	make-02	ARG0	it	0.1	0.1.1
# ::edge	make-02	ARG1	differ-02	0.1	0.1.0
# ::edge	think-01	ARG0	i	0	0.2
# ::edge	think-01	ARG1	make-02	0	0.1
# ::edge	think-01	polarity	-	0	0.0
(MRPNode-0 / think-01 :polarity - :ARG1 (MRPNode-1 / make-02 :ARG1 (MRPNode-2 / differ-02 :degree (MRPNode-3 / much)) :ARG0 (MRPNode-4 / it)) :ARG0 (MRPNode-5 / i))

# ::id 739
# ::snt I do not think it's a good idea.
# ::tok I do not think it 's a good idea .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 4-5|0.1.1 7-8|0.1.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.733091 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	think-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	idea	8-9
# ::node	0.1.0	good-02	7-8
# ::node	0.1.1	it	4-5
# ::node	0.2	i	0-1
# ::root	0	think-01
# ::edge	idea	ARG1-of	good-02	0.1	0.1.0
# ::edge	idea	domain	it	0.1	0.1.1
# ::edge	think-01	ARG0	i	0	0.2
# ::edge	think-01	ARG1	idea	0	0.1
# ::edge	think-01	polarity	-	0	0.0
(MRPNode-0 / think-01 :polarity - :ARG1 (MRPNode-1 / idea :ARG1-of (MRPNode-2 / good-02) :domain (MRPNode-3 / it)) :ARG0 (MRPNode-4 / i))

# ::id 740
# ::snt You are right on the mark.
# ::tok You are right on the mark .
# ::alignments 0-1|0.0 2-3|0.1 3-4|0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:42.735620 ::parser eager_oracle ::smatch 0.823529411764706 ::n_actions 21
# ::node	0	be-located-at-91	3-4
# ::node	0.0	you	0-1
# ::node	0.1	right	2-3
# ::node	0.2	mark	5-6
# ::root	0	be-located-at-91
# ::edge	be-located-at-91	ARG1	you	0	0.0
# ::edge	be-located-at-91	ARG2	mark	0	0.2
# ::edge	be-located-at-91	mod	right	0	0.1
(MRPNode-0 / be-located-at-91 :ARG1 (MRPNode-1 / you) :mod (MRPNode-2 / right) :ARG2 (MRPNode-3 / mark))

# ::id 741
# ::snt So how should I do this?
# ::tok So how should I do this ?
# ::alignments 0-1|0 1-2|0.0.0.2 2-3|0.0 3-4|0.0.0.1 4-5|0.0.0 5-6|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.738926 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	cause-01	0-1
# ::node	0.0	recommend-01	2-3
# ::node	0.0.0	do-02	4-5
# ::node	0.0.0.0	this	5-6
# ::node	0.0.0.1	i	3-4
# ::node	0.0.0.2	amr-unknown	1-2
# ::root	0	cause-01
# ::edge	cause-01	ARG1	recommend-01	0	0.0
# ::edge	do-02	ARG0	i	0.0.0	0.0.0.1
# ::edge	do-02	ARG1	this	0.0.0	0.0.0.0
# ::edge	do-02	manner	amr-unknown	0.0.0	0.0.0.2
# ::edge	recommend-01	ARG1	do-02	0.0	0.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / recommend-01 :ARG1 (MRPNode-2 / do-02 :ARG1 (MRPNode-3 / this) :ARG0 (MRPNode-4 / i) :manner (MRPNode-5 / amr-unknown))))

# ::id 742
# ::snt Does this answer your questions?
# ::tok Does this answer your questions ?
# ::alignments 1-2|0.1 2-3|0.0 3-4|0.0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.742750 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 20
# ::node	0	answer-01	4-5
# ::node	0.0	question-01	2-3
# ::node	0.0.0	you	3-4
# ::node	0.1	this	1-2
# ::node	0.2	amr-unknown	
# ::root	0	answer-01
# ::edge	answer-01	ARG0	this	0	0.1
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	answer-01	ARG2	amr-unknown	0	0.2
# ::edge	question-01	ARG0	you	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG0 (MRPNode-3 / this) :ARG2 (MRPNode-4 / amr-unknown))

# ::id 743
# ::snt I'm going to be blunt, here: You don't.
# ::tok I 'm going to be blunt , here : You do n't .
# ::alignments 0-1|0.0 5-6|0 7-8|0.2 9-10|0.1 10-11|0.1.0 11-12|0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.753326 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	blunt-02	5-6
# ::node	0.0	i	0-1
# ::node	0.1	you	9-10
# ::node	0.1.0	do-02	10-11
# ::node	0.1.0.0	-	11-12
# ::node	0.2	here	7-8
# ::root	0	blunt-02
# ::edge	blunt-02	ARG0	i	0	0.0
# ::edge	blunt-02	location	here	0	0.2
# ::edge	blunt-02	location	you	0	0.1
# ::edge	do-02	polarity	-	0.1.0	0.1.0.0
# ::edge	you	ARG0-of	do-02	0.1	0.1.0
(MRPNode-0 / blunt-02 :ARG0 (MRPNode-1 / i) :location (MRPNode-2 / you :ARG0-of (MRPNode-3 / do-02 :polarity -)) :location (MRPNode-4 / here))

# ::id 744
# ::snt I guess it depends on the nature of your contract.
# ::tok I guess it depends on the nature of your contract .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.0 3-4|0.0 6-7|0.0.1 8-9|0.0.1.0.0 9-10|0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.761905 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	guess-01	1-2
# ::node	0.0	depend-01	3-4
# ::node	0.0.0	it	2-3
# ::node	0.0.1	nature	6-7
# ::node	0.0.1.0	contract	9-10
# ::node	0.0.1.0.0	you	8-9
# ::node	0.1	i	0-1
# ::root	0	guess-01
# ::edge	contract	poss	you	0.0.1.0	0.0.1.0.0
# ::edge	depend-01	ARG1	it	0.0	0.0.0
# ::edge	depend-01	ARG1	nature	0.0	0.0.1
# ::edge	guess-01	ARG0	i	0	0.1
# ::edge	guess-01	ARG1	depend-01	0	0.0
# ::edge	nature	poss	contract	0.0.1	0.0.1.0
(MRPNode-0 / guess-01 :ARG1 (MRPNode-1 / depend-01 :ARG1 (MRPNode-2 / it) :ARG1 (MRPNode-3 / nature :poss (MRPNode-4 / contract :poss (MRPNode-5 / you)))) :ARG0 (MRPNode-6 / i))

# ::id 745
# ::snt There are quite a few things you would need to do;
# ::tok There are quite a few things you would need to do ;
# ::alignments 2-3|0.0.0.0.0 4-5|0.0.0.0 5-6|0.0.0 6-7|0.0.1 8-9|0 10-11|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.815353 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	need-01	8-9
# ::node	0.0	do-02	10-11
# ::node	0.0.0	thing	5-6
# ::node	0.0.0.0	few	4-5
# ::node	0.0.0.0.0	quite	2-3
# ::node	0.0.1	you	6-7
# ::root	0	need-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	thing	0.0	0.0.0
# ::edge	few	degree	quite	0.0.0.0	0.0.0.0.0
# ::edge	need-01	ARG0	you	0	0.0.1
# ::edge	need-01	ARG1	do-02	0	0.0
# ::edge	thing	quant	few	0.0.0	0.0.0.0
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / thing :quant (MRPNode-3 / few :degree (MRPNode-4 / quite))) :ARG0 (MRPNode-5 / you)) :ARG0 MRPNode-5)

# ::id 746
# ::snt How should you do that?
# ::tok How should you do that ?
# ::alignments 0-1|0.1 1-2|0.0 2-3|0.0.0.1 3-4|0.0.0 4-5|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.817934 ::parser eager_oracle ::smatch 0.7000000000000001 ::n_actions 22
# ::node	0	have-manner-91	
# ::node	0.0	recommend-01	1-2
# ::node	0.0.0	do-02	3-4
# ::node	0.0.0.0	that	4-5
# ::node	0.0.0.1	you	2-3
# ::node	0.1	amr-unknown	0-1
# ::root	0	have-manner-91
# ::edge	do-02	ARG0	you	0.0.0	0.0.0.1
# ::edge	do-02	ARG1	that	0.0.0	0.0.0.0
# ::edge	have-manner-91	ARG1	recommend-01	0	0.0
# ::edge	have-manner-91	ARG2	amr-unknown	0	0.1
# ::edge	recommend-01	ARG1	do-02	0.0	0.0.0
(MRPNode-0 / have-manner-91 :ARG1 (MRPNode-1 / recommend-01 :ARG1 (MRPNode-2 / do-02 :ARG1 (MRPNode-3 / that) :ARG0 (MRPNode-4 / you))) :ARG2 (MRPNode-5 / amr-unknown))

# ::id 747
# ::snt I am in a similar situation.
# ::tok I am in a similar situation .
# ::alignments 0-1|0.0 2-3|0 4-5|0.1.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.819851 ::parser eager_oracle ::smatch 0.823529411764706 ::n_actions 21
# ::node	0	be-located-at-91	2-3
# ::node	0.0	i	0-1
# ::node	0.1	situation	5-6
# ::node	0.1.0	resemble-01	4-5
# ::root	0	be-located-at-91
# ::edge	be-located-at-91	ARG1	i	0	0.0
# ::edge	be-located-at-91	ARG2	situation	0	0.1
# ::edge	situation	ARG1-of	resemble-01	0.1	0.1.0
(MRPNode-0 / be-located-at-91 :ARG1 (MRPNode-1 / i) :ARG2 (MRPNode-2 / situation :ARG1-of (MRPNode-3 / resemble-01)))

# ::id 748
# ::snt It's up to you what you want to do next.
# ::tok It 's up to you what you want to do next .
# ::alignments 4-5|0.0.0.1 7-8|0.0.0.1.0 9-10|0.0+0.0.0 10-11|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.827495 ::parser eager_oracle ::smatch 0.8 ::n_actions 32
# ::node	0	depend-01	
# ::node	0.0	thing	9-10
# ::node	0.0.0	do-02	9-10
# ::node	0.0.0.0	next	10-11
# ::node	0.0.0.1	you	4-5
# ::node	0.0.0.1.0	want-01	7-8
# ::root	0	depend-01
# ::edge	depend-01	ARG1	thing	0	0.0
# ::edge	depend-01	ARG1	you	0	0.0.0.1
# ::edge	do-02	ARG0	you	0.0.0	0.0.0.1
# ::edge	do-02	time	next	0.0.0	0.0.0.0
# ::edge	thing	ARG1-of	do-02	0.0	0.0.0
# ::edge	want-01	ARG1	do-02	0.0.0.1.0	0.0.0
# ::edge	you	ARG0-of	want-01	0.0.0.1	0.0.0.1.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / thing :ARG1-of (MRPNode-2 / do-02 :time (MRPNode-3 / next) :ARG0 (MRPNode-4 / you :ARG0-of (MRPNode-5 / want-01 :ARG1 MRPNode-2)))) :ARG1 MRPNode-4)

# ::id 749
# ::snt I wouldn't put this job on my resume.
# ::tok I would n't put this job on my resume .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 4-5|0.1.0 5-6|0.1 8-9|0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:42.832367 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	put-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	job	5-6
# ::node	0.1.0	this	4-5
# ::node	0.2	i	0-1
# ::node	0.3	resume	8-9
# ::root	0	put-01
# ::edge	job	mod	this	0.1	0.1.0
# ::edge	put-01	ARG0	i	0	0.2
# ::edge	put-01	ARG1	job	0	0.1
# ::edge	put-01	ARG2	resume	0	0.3
# ::edge	put-01	polarity	-	0	0.0
(MRPNode-0 / put-01 :polarity - :ARG1 (MRPNode-1 / job :mod (MRPNode-2 / this)) :ARG0 (MRPNode-3 / i) :ARG2 (MRPNode-4 / resume))

# ::id 750
# ::snt I don't think there is an answer for this.
# ::tok I do n't think there is an answer for this .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 7-8|0.1 9-10|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.836947 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	think-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	answer-01	7-8
# ::node	0.1.0	this	9-10
# ::node	0.2	i	0-1
# ::root	0	think-01
# ::edge	answer-01	ARG1	this	0.1	0.1.0
# ::edge	think-01	ARG0	i	0	0.2
# ::edge	think-01	ARG1	answer-01	0	0.1
# ::edge	think-01	polarity	-	0	0.0
(MRPNode-0 / think-01 :polarity - :ARG1 (MRPNode-1 / answer-01 :ARG1 (MRPNode-2 / this)) :ARG0 (MRPNode-3 / i))

# ::id 751
# ::snt You work on it slowly.
# ::tok You work on it slowly .
# ::alignments 0-1|0.1 1-2|0 3-4|0.0 4-5|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:42.838894 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	work-01	1-2
# ::node	0.0	it	3-4
# ::node	0.1	you	0-1
# ::node	0.2	slow-05	4-5
# ::root	0	work-01
# ::edge	work-01	ARG0	you	0	0.1
# ::edge	work-01	ARG1-of	it	0	0.0
# ::edge	work-01	ARG1-of	slow-05	0	0.2
(MRPNode-0 / work-01 :ARG1-of (MRPNode-1 / it) :ARG0 (MRPNode-2 / you) :ARG1-of (MRPNode-3 / slow-05))

# ::id 752
# ::snt This varies by institution.
# ::tok This varies by institution .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.840476 ::parser eager_oracle ::smatch 1.0 ::n_actions 16
# ::node	0	vary-01	1-2
# ::node	0.0	this	0-1
# ::node	0.1	institution	3-4
# ::root	0	vary-01
# ::edge	vary-01	ARG1	this	0	0.0
# ::edge	vary-01	ARG3	institution	0	0.1
(MRPNode-0 / vary-01 :ARG1 (MRPNode-1 / this) :ARG3 (MRPNode-2 / institution))

# ::id 753
# ::snt I have the same problem.
# ::tok I have the same problem .
# ::alignments 0-1|0.1 1-2|0 3-4|0.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.842191 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	have-03	1-2
# ::node	0.0	problem	4-5
# ::node	0.0.0	same-01	3-4
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
# ::edge	problem	ARG1-of	same-01	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem :ARG1-of (MRPNode-2 / same-01)) :ARG0 (MRPNode-3 / i))

# ::id 754
# ::snt I have the exact same problem.
# ::tok I have the exact same problem .
# ::alignments 0-1|0.1 1-2|0 3-4|0.0.0.0 4-5|0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.844553 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	have-03	1-2
# ::node	0.0	problem	5-6
# ::node	0.0.0	same-01	4-5
# ::node	0.0.0.0	exact	3-4
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
# ::edge	problem	ARG1-of	same-01	0.0	0.0.0
# ::edge	same-01	degree	exact	0.0.0	0.0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem :ARG1-of (MRPNode-2 / same-01 :degree (MRPNode-3 / exact))) :ARG0 (MRPNode-4 / i))

# ::id 755
# ::snt You have to find out what works for you.
# ::tok You have to find out what works for you .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.849281 ::parser eager_oracle ::smatch 0.8571428571428571 ::n_actions 27
# ::node	0	obligate-01	1-2
# ::node	0.0	you	0-1
# ::node	0.0.0	work-01	6-7
# ::node	0.0.0.0	thing	
# ::node	0.1	find-out-03	3-4
# ::root	0	obligate-01
# ::edge	find-out-03	ARG0	you	0.1	0.0
# ::edge	find-out-03	ARG1	thing	0.1	0.0.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	find-out-03	0	0.1
# ::edge	work-01	ARG1	thing	0.0.0	0.0.0.0
# ::edge	you	ARG2-of	work-01	0.0	0.0.0
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG2-of (MRPNode-2 / work-01 :ARG1 (MRPNode-4 / thing))) :ARG2 (MRPNode-3 / find-out-03 :ARG0 MRPNode-1 :ARG1 MRPNode-4))

# ::id 756
# ::snt No, it's not a good thing.
# ::tok No , it 's not a good thing .
# ::alignments 0-1|0.0 2-3|0.1 6-7|0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.852884 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	good-02	6-7
# ::node	0.0	-	0-1
# ::node	0.1	it	2-3
# ::root	0	good-02
# ::edge	good-02	ARG1	it	0	0.1
# ::edge	good-02	polarity	-	0	0.0
(MRPNode-0 / good-02 :polarity - :ARG1 (MRPNode-1 / it))

# ::id 757
# ::snt This is a big problem.
# ::tok This is a big problem .
# ::alignments 0-1|0.1 3-4|0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.854253 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	problem	4-5
# ::node	0.0	big	3-4
# ::node	0.1	this	0-1
# ::root	0	problem
# ::edge	problem	domain	this	0	0.1
# ::edge	problem	mod	big	0	0.0
(MRPNode-0 / problem :mod (MRPNode-1 / big) :domain (MRPNode-2 / this))

# ::id 758
# ::snt This cannot be answered in general.
# ::tok This cannot be answered in general .
# ::alignments 0-1|0.1.0 1-2|0 3-4|0.1 5-6|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.856665 ::parser eager_oracle ::smatch 0.7777777777777778 ::n_actions 21
# ::node	0	possible-01	1-2
# ::node	0.0	-	
# ::node	0.1	answer-01	3-4
# ::node	0.1.0	this	0-1
# ::node	0.1.1	general-02	5-6
# ::root	0	possible-01
# ::edge	answer-01	ARG1	this	0.1	0.1.0
# ::edge	answer-01	ARG1-of	general-02	0.1	0.1.1
# ::edge	possible-01	ARG1	answer-01	0	0.1
# ::edge	possible-01	polarity	-	0	0.0
(MRPNode-0 / possible-01 :polarity - :ARG1 (MRPNode-1 / answer-01 :ARG1 (MRPNode-2 / this) :ARG1-of (MRPNode-3 / general-02)))

# ::id 759
# ::snt I don't think there is a single definition.
# ::tok I do n't think there is a single definition .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 7-8|0.1.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.860751 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	think-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	define-01	8-9
# ::node	0.1.0	single-02	7-8
# ::node	0.2	i	0-1
# ::root	0	think-01
# ::edge	define-01	ARG1-of	single-02	0.1	0.1.0
# ::edge	think-01	ARG0	i	0	0.2
# ::edge	think-01	ARG1	define-01	0	0.1
# ::edge	think-01	polarity	-	0	0.0
(MRPNode-0 / think-01 :polarity - :ARG1 (MRPNode-1 / define-01 :ARG1-of (MRPNode-2 / single-02)) :ARG0 (MRPNode-3 / i))

# ::id 760
# ::snt The answer to your question is not really.
# ::tok The answer to your question is not really .
# ::alignments 1-2|0.0 3-4|0.0.0 4-5|0 6-7|0.1.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.866351 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	answer-01	4-5
# ::node	0.0	question-01	1-2
# ::node	0.0.0	you	3-4
# ::node	0.1	real-04	7-8
# ::node	0.1.0	-	6-7
# ::root	0	answer-01
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	answer-01	ARG1-of	real-04	0	0.1
# ::edge	question-01	ARG0	you	0.0	0.0.0
# ::edge	real-04	polarity	-	0.1	0.1.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG1-of (MRPNode-3 / real-04 :polarity -))

# ::id 761
# ::snt I had the same issue.
# ::tok I had the same issue .
# ::alignments 0-1|0.0 3-4|0.1 4-5|0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.867899 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	issue-02	4-5
# ::node	0.0	i	0-1
# ::node	0.1	same-01	3-4
# ::root	0	issue-02
# ::edge	issue-02	ARG0	same-01	0	0.1
# ::edge	issue-02	ARG1	i	0	0.0
(MRPNode-0 / issue-02 :ARG1 (MRPNode-1 / i) :ARG0 (MRPNode-2 / same-01))

# ::id 762
# ::snt Is this the kind of thing you're looking for ?
# ::tok Is this the kind of thing you 're looking for ?
# ::alignments 1-2|0.0.0.0 3-4|0.0.0 5-6|0.0 6-7|0.1 8-9|0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.877805 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 28
# ::node	0	look-01	8-9
# ::node	0.0	thing	5-6
# ::node	0.0.0	kind	3-4
# ::node	0.0.0.0	this	1-2
# ::node	0.1	you	6-7
# ::node	0.2	amr-unknown	
# ::root	0	look-01
# ::edge	kind	domain	this	0.0.0	0.0.0.0
# ::edge	look-01	ARG0	you	0	0.1
# ::edge	look-01	ARG1	thing	0	0.0
# ::edge	look-01	ARG2	amr-unknown	0	0.2
# ::edge	thing	mod	kind	0.0	0.0.0
(MRPNode-0 / look-01 :ARG1 (MRPNode-1 / thing :mod (MRPNode-2 / kind :domain (MRPNode-3 / this))) :ARG0 (MRPNode-4 / you) :ARG2 (MRPNode-5 / amr-unknown))

# ::id 763
# ::snt There are a few things you need to consider:
# ::tok There are a few things you need to consider :
# ::alignments 3-4|0.1.0.0 4-5|0.1.0 5-6|0.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.882184 ::parser eager_oracle ::smatch 0.7000000000000001 ::n_actions 25
# ::node	0	obligate-01	
# ::node	0.0	you	5-6
# ::node	0.1	consider-02	8-9
# ::node	0.1.0	thing	4-5
# ::node	0.1.0.0	few	3-4
# ::root	0	obligate-01
# ::edge	consider-02	ARG0	you	0.1	0.0
# ::edge	consider-02	ARG1	thing	0.1	0.1.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	consider-02	0	0.1
# ::edge	thing	quant	few	0.1.0	0.1.0.0
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / consider-02 :ARG0 MRPNode-1 :ARG1 (MRPNode-3 / thing :quant (MRPNode-4 / few))))

# ::id 764
# ::snt It depends on what and where you are going to do.
# ::tok It depends on what and where you are going to do .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0 6-7|0.0.0.0.0 8-9|0.0.0 10-11|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.898430 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 33
# ::node	0	depend-01	1-2
# ::node	0.0	and	4-5
# ::node	0.0.0	thing	8-9
# ::node	0.0.0.0	do-02	10-11
# ::node	0.0.0.0.0	you	6-7
# ::node	0.0.1	location	
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	and	op1	thing	0.0	0.0.0
# ::edge	and	op2	location	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	do-02	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	thing	ARG1-of	do-02	0.0.0	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / do-02 :ARG0 (MRPNode-4 / you))) :op2 (MRPNode-5 / location)) :ARG0 (MRPNode-6 / it))

# ::id 765
# ::snt This will depend on the university.
# ::tok This will depend on the university .
# ::alignments 0-1|0.1 2-3|0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.900258 ::parser eager_oracle ::smatch 1.0 ::n_actions 18
# ::node	0	depend-01	2-3
# ::node	0.0	university	5-6
# ::node	0.1	this	0-1
# ::root	0	depend-01
# ::edge	depend-01	ARG0	this	0	0.1
# ::edge	depend-01	ARG1	university	0	0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / university) :ARG0 (MRPNode-2 / this))

# ::id 766
# ::snt There are a few minimally-effective things you can do at the personal level.
# ::tok There are a few minimally - effective things you can do at the personal level .
# ::alignments 3-4|0.0.0.1 6-7|0.0.0.0 7-8|0.0.0 8-9|0.0.1 9-10|0 10-11|0.0 13-14|0.0.2.0 14-15|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:42.910084 ::parser eager_oracle ::smatch 0.9411764705882353 ::n_actions 43
# ::node	0	possible-01	9-10
# ::node	0.0	do-02	10-11
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	effective-04	6-7
# ::node	0.0.0.0.0	maximum	
# ::node	0.0.0.1	few	3-4
# ::node	0.0.1	you	8-9
# ::node	0.0.2	level	14-15
# ::node	0.0.2.0	personal-02	13-14
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	thing	0.0	0.0.0
# ::edge	do-02	ARG2	level	0.0	0.0.2
# ::edge	effective-04	mod	maximum	0.0.0.0	0.0.0.0.0
# ::edge	level	ARG1-of	personal-02	0.0.2	0.0.2.0
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	thing	ARG0-of	effective-04	0.0.0	0.0.0.0
# ::edge	thing	quant	few	0.0.0	0.0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / thing :ARG0-of (MRPNode-3 / effective-04 :mod (MRPNode-4 / maximum)) :quant (MRPNode-5 / few)) :ARG0 (MRPNode-6 / you) :ARG2 (MRPNode-7 / level :ARG1-of (MRPNode-8 / personal-02))))

# ::id 767
# ::snt I had this problem before.
# ::tok I had this problem before .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.0 3-4|0.0 4-5|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:42.912316 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	have-03	1-2
# ::node	0.0	problem	3-4
# ::node	0.0.0	this	2-3
# ::node	0.1	i	0-1
# ::node	0.2	before	4-5
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
# ::edge	have-03	time	before	0	0.2
# ::edge	problem	mod	this	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem :mod (MRPNode-2 / this)) :ARG0 (MRPNode-3 / i) :time (MRPNode-4 / before))

# ::id 768
# ::snt Not a real answer to your question, but maybe it helps.
# ::tok Not a real answer to your question , but maybe it helps .
# ::alignments 0-1|0.0.0 2-3|0.0.2 3-4|0.0 5-6|0.0.1.0 6-7|0.0.1 9-10|0 10-11|0.1.0 11-12|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.927831 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 40
# ::node	0	possible-01	9-10
# ::node	0.0	answer-01	3-4
# ::node	0.0.0	-	0-1
# ::node	0.0.1	question-01	6-7
# ::node	0.0.1.0	you	5-6
# ::node	0.0.2	real-04	2-3
# ::node	0.1	help-01	11-12
# ::node	0.1.0	it	10-11
# ::root	0	possible-01
# ::edge	answer-01	ARG1-of	question-01	0.0	0.0.1
# ::edge	answer-01	ARG1-of	real-04	0.0	0.0.2
# ::edge	answer-01	polarity	-	0.0	0.0.0
# ::edge	help-01	ARG0	answer-01	0.1	0.0
# ::edge	help-01	ARG0	it	0.1	0.1.0
# ::edge	possible-01	ARG1	answer-01	0	0.0
# ::edge	possible-01	ARG1	help-01	0	0.1
# ::edge	question-01	ARG0	you	0.0.1	0.0.1.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / answer-01 :polarity - :ARG1-of (MRPNode-2 / question-01 :ARG0 (MRPNode-3 / you)) :ARG1-of (MRPNode-4 / real-04)) :ARG1 (MRPNode-5 / help-01 :ARG0 MRPNode-1 :ARG0 (MRPNode-6 / it)))

# ::id 769
# ::snt I remained under the banyan tree, exhausted by my daily ritual of herding the cats every two hours.
# ::tok I remained under the banyan tree , exhausted by my daily ritual of herding the cats every two hours .
# ::alignments 1-2|0 2-3|0.0 4-5|0.0.0.0 5-6|0.0.0 7-8|0.1.0 8-9|0.1 9-10|0.1.0.1 11-12|0.1.0.0 13-14|0.1.0.1.0 15-16|0.1.0.1.0.0 17-18|0.1.0.0.0.0.0 18-19|0.1.0.0.0.0+0.1.0.0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.950739 ::parser eager_oracle ::smatch 0.9310344827586207 ::n_actions 67
# ::node	0	remain-01	1-2
# ::node	0.0	under	2-3
# ::node	0.0.0	tree	5-6
# ::node	0.0.0.0	banyan	4-5
# ::node	0.1	cause-01	8-9
# ::node	0.1.0	exhaust-01	7-8
# ::node	0.1.0.0	ritual	11-12
# ::node	0.1.0.0.0	rate-entity-91	
# ::node	0.1.0.0.0.0	temporal-quantity	18-19
# ::node	0.1.0.0.0.0.0	2	17-18
# ::node	0.1.0.0.0.0.1	hour	18-19
# ::node	0.1.0.1	i	9-10
# ::node	0.1.0.1.0	herd	13-14
# ::node	0.1.0.1.0.0	cat	15-16
# ::root	0	remain-01
# ::edge	cause-01	ARG0	exhaust-01	0.1	0.1.0
# ::edge	exhaust-01	ARG0	herd	0.1.0	0.1.0.1.0
# ::edge	exhaust-01	ARG0	ritual	0.1.0	0.1.0.0
# ::edge	exhaust-01	ARG1	i	0.1.0	0.1.0.1
# ::edge	herd	ARG1	cat	0.1.0.1.0	0.1.0.1.0.0
# ::edge	herd	beneficiary	ritual	0.1.0.1.0	0.1.0.0
# ::edge	i	ARG0-of	herd	0.1.0.1	0.1.0.1.0
# ::edge	rate-entity-91	ARG3	temporal-quantity	0.1.0.0.0	0.1.0.0.0.0
# ::edge	remain-01	ARG1	cause-01	0	0.1
# ::edge	remain-01	ARG1	i	0	0.1.0.1
# ::edge	remain-01	ARG1	under	0	0.0
# ::edge	ritual	frequency	rate-entity-91	0.1.0.0	0.1.0.0.0
# ::edge	temporal-quantity	quant	2	0.1.0.0.0.0	0.1.0.0.0.0.0
# ::edge	temporal-quantity	unit	hour	0.1.0.0.0.0	0.1.0.0.0.0.1
# ::edge	tree	mod	banyan	0.0.0	0.0.0.0
# ::edge	under	op1	tree	0.0	0.0.0
(MRPNode-0 / remain-01 :ARG1 (MRPNode-1 / under :op1 (MRPNode-2 / tree :mod (MRPNode-3 / banyan))) :ARG1 (MRPNode-4 / cause-01 :ARG0 (MRPNode-5 / exhaust-01 :ARG0 (MRPNode-6 / ritual :frequency (MRPNode-7 / rate-entity-91 :ARG3 (MRPNode-8 / temporal-quantity :quant 2 :unit (MRPNode-9 / hour)))) :ARG1 (MRPNode-10 / i :ARG0-of (MRPNode-11 / herd :beneficiary MRPNode-6 :ARG1 (MRPNode-12 / cat))) :ARG0 MRPNode-11)) :ARG1 MRPNode-10)

# ::id 770
# ::snt It really depends on the school and the program.
# ::tok It really depends on the school and the program .
# ::alignments 0-1|0.1 1-2|0.2 2-3|0 5-6|0.0.0 6-7|0.0 8-9|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:42.954665 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	depend-01	2-3
# ::node	0.0	and	6-7
# ::node	0.0.0	school	5-6
# ::node	0.0.1	program	8-9
# ::node	0.1	it	0-1
# ::node	0.2	real-04	1-2
# ::root	0	depend-01
# ::edge	and	op1	school	0.0	0.0.0
# ::edge	and	op2	program	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	depend-01	ARG1-of	real-04	0	0.2
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / school) :op2 (MRPNode-3 / program)) :ARG0 (MRPNode-4 / it) :ARG1-of (MRPNode-5 / real-04))

# ::id 771
# ::snt You should do what it says.
# ::tok You should do what it says .
# ::alignments 0-1|0.0.1 1-2|0 2-3|0.0 4-5|0.0.0.0.0 5-6|0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.961095 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	recommend-01	1-2
# ::node	0.0	do-02	2-3
# ::node	0.0.0	thing	5-6
# ::node	0.0.0.0	say-01	5-6
# ::node	0.0.0.0.0	it	4-5
# ::node	0.0.1	you	0-1
# ::root	0	recommend-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	thing	0.0	0.0.0
# ::edge	recommend-01	ARG1	do-02	0	0.0
# ::edge	recommend-01	ARG2	you	0	0.0.1
# ::edge	say-01	ARG0	it	0.0.0.0	0.0.0.0.0
# ::edge	thing	ARG1-of	say-01	0.0.0	0.0.0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / say-01 :ARG0 (MRPNode-4 / it))) :ARG0 (MRPNode-5 / you)) :ARG2 MRPNode-5)

# ::id 772
# ::snt It's a good idea.
# ::tok It 's a good idea .
# ::alignments 0-1|0.1 3-4|0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.962810 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	idea	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	it	0-1
# ::root	0	idea
# ::edge	idea	ARG1-of	good-02	0	0.0
# ::edge	idea	domain	it	0	0.1
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / good-02) :domain (MRPNode-2 / it))

# ::id 773
# ::snt Yes, you should mention it.
# ::tok Yes , you should mention it .
# ::alignments 2-3|0.0.1 3-4|0 4-5|0.0 5-6|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:42.964989 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	recommend-01	3-4
# ::node	0.0	mention-01	4-5
# ::node	0.0.0	it	5-6
# ::node	0.0.1	you	2-3
# ::root	0	recommend-01
# ::edge	mention-01	ARG0	you	0.0	0.0.1
# ::edge	mention-01	ARG1	it	0.0	0.0.0
# ::edge	recommend-01	ARG1	mention-01	0	0.0
# ::edge	recommend-01	ARG2	you	0	0.0.1
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / mention-01 :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / you)) :ARG2 MRPNode-3)

# ::id 774
# ::snt I guess it depends on what you're going to do.
# ::tok I guess it depends on what you 're going to do .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1 3-4|0.0 6-7|0.0.0.0.0 8-9|0.0.0 10-11|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.239014 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	guess-01	1-2
# ::node	0.0	depend-01	3-4
# ::node	0.0.0	thing	8-9
# ::node	0.0.0.0	do-02	10-11
# ::node	0.0.0.0.0	you	6-7
# ::node	0.0.1	it	2-3
# ::node	0.1	i	0-1
# ::root	0	guess-01
# ::edge	depend-01	ARG0	it	0.0	0.0.1
# ::edge	depend-01	ARG1	thing	0.0	0.0.0
# ::edge	do-02	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	guess-01	ARG0	i	0	0.1
# ::edge	guess-01	ARG1	depend-01	0	0.0
# ::edge	thing	ARG1-of	do-02	0.0.0	0.0.0.0
(MRPNode-0 / guess-01 :ARG1 (MRPNode-1 / depend-01 :ARG1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / do-02 :ARG0 (MRPNode-4 / you))) :ARG0 (MRPNode-5 / it)) :ARG0 (MRPNode-6 / i))

# ::id 775
# ::snt It depends on what you want to achieve.
# ::tok It depends on what you want to achieve .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0.0 5-6|0.0.0.1 7-8|0.0+0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.243812 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	depend-01	1-2
# ::node	0.0	thing	7-8
# ::node	0.0.0	achieve-01	7-8
# ::node	0.0.0.0	you	4-5
# ::node	0.0.0.1	want-01	5-6
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	achieve-01	ARG0	you	0.0.0	0.0.0.0
# ::edge	achieve-01	ARG1-of	want-01	0.0.0	0.0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	thing	0	0.0
# ::edge	thing	ARG1-of	achieve-01	0.0	0.0.0
# ::edge	want-01	ARG0	you	0.0.0.1	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / thing :ARG1-of (MRPNode-2 / achieve-01 :ARG0 (MRPNode-3 / you) :ARG1-of (MRPNode-4 / want-01 :ARG0 MRPNode-3))) :ARG0 (MRPNode-5 / it))

# ::id 776
# ::snt This sounds a bit unusual.
# ::tok This sounds a bit unusual .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1.1 4-5|0.1+0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.246664 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	sound-01	1-2
# ::node	0.0	this	0-1
# ::node	0.1	usual	4-5
# ::node	0.1.0	-	4-5
# ::node	0.1.1	bit	3-4
# ::root	0	sound-01
# ::edge	sound-01	ARG1	this	0	0.0
# ::edge	sound-01	ARG2	usual	0	0.1
# ::edge	usual	degree	bit	0.1	0.1.1
# ::edge	usual	polarity	-	0.1	0.1.0
(MRPNode-0 / sound-01 :ARG1 (MRPNode-1 / this) :ARG2 (MRPNode-2 / usual :polarity - :degree (MRPNode-3 / bit)))

# ::id 777
# ::snt It depends on what you want to be able to do.
# ::tok It depends on what you want to be able to do .
# ::alignments 0-1|0.1 1-2|0 5-6|0.0+0.0.0+0.0.0.0+0.0.0.2 8-9|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:43.270058 ::parser eager_oracle ::smatch 1.0 ::n_actions 42
# ::node	0	depend-01	1-2
# ::node	0.0	thing	5-6
# ::node	0.0.0	do-02	5-6
# ::node	0.0.0.0	you	5-6
# ::node	0.0.0.1	possible-01	8-9
# ::node	0.0.0.2	want-01	5-6
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	thing	0	0.0
# ::edge	do-02	ARG0	you	0.0.0	0.0.0.0
# ::edge	do-02	ARG1-of	possible-01	0.0.0	0.0.0.1
# ::edge	do-02	ARG1-of	want-01	0.0.0	0.0.0.2
# ::edge	possible-01	ARG0	you	0.0.0.1	0.0.0.0
# ::edge	thing	ARG1-of	do-02	0.0	0.0.0
# ::edge	want-01	ARG0	you	0.0.0.2	0.0.0.0
# ::edge	want-01	ARG1	possible-01	0.0.0.2	0.0.0.1
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / thing :ARG1-of (MRPNode-2 / do-02 :ARG0 (MRPNode-3 / you) :ARG1-of (MRPNode-4 / possible-01 :ARG0 MRPNode-3) :ARG1-of (MRPNode-5 / want-01 :ARG0 MRPNode-3 :ARG1 MRPNode-4))) :ARG0 (MRPNode-6 / it))

# ::id 778
# ::snt It doesn't matter unless it is really far off.
# ::tok It does n't matter unless it is really far off .
# ::alignments 2-3|0.0 3-4|0 4-5|0.2 7-8|0.2.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:43.302403 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	matter-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	it	8-9
# ::node	0.2	far	4-5
# ::node	0.2.0	really	7-8
# ::root	0	matter-01
# ::edge	far	ARG1	it	0.2	0.1
# ::edge	far	degree	really	0.2	0.2.0
# ::edge	matter-01	ARG1	it	0	0.1
# ::edge	matter-01	condition	far	0	0.2
# ::edge	matter-01	polarity	-	0	0.0
(MRPNode-0 / matter-01 :polarity - :ARG1 (MRPNode-1 / it) :condition (MRPNode-2 / far :ARG1 MRPNode-1 :degree (MRPNode-3 / really)))

# ::id 779
# ::snt You don't have to know.
# ::tok You do n't have to know .
# ::alignments 0-1|0.1 2-3|0.0 3-4|0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:43.305842 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	obligate-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	you	0-1
# ::node	0.2	know-01	5-6
# ::root	0	obligate-01
# ::edge	know-01	ARG0	you	0.2	0.1
# ::edge	obligate-01	ARG1	you	0	0.1
# ::edge	obligate-01	ARG2	know-01	0	0.2
# ::edge	obligate-01	polarity	-	0	0.0
(MRPNode-0 / obligate-01 :polarity - :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / know-01 :ARG0 MRPNode-1))

# ::id 780
# ::snt I think you're looking for the movie
# ::tok I think you 're looking for the movie
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1 4-5|0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.312075 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	think-01	1-2
# ::node	0.0	look-01	4-5
# ::node	0.0.0	movie	7-8
# ::node	0.0.1	you	2-3
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	look-01	ARG0	you	0.0	0.0.1
# ::edge	look-01	ARG1	movie	0.0	0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	look-01	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / look-01 :ARG1 (MRPNode-2 / movie) :ARG0 (MRPNode-3 / you)) :ARG0 (MRPNode-4 / i))

# ::id 781
# ::snt I don't think there is any universal term.
# ::tok I do n't think there is any universal term .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 6-7|0.1.0 7-8|0.1.1 8-9|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:43.317308 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	think-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	term	8-9
# ::node	0.1.0	any	6-7
# ::node	0.1.1	universal	7-8
# ::node	0.2	i	0-1
# ::root	0	think-01
# ::edge	term	mod	any	0.1	0.1.0
# ::edge	term	mod	universal	0.1	0.1.1
# ::edge	think-01	ARG0	i	0	0.2
# ::edge	think-01	ARG1	term	0	0.1
# ::edge	think-01	polarity	-	0	0.0
(MRPNode-0 / think-01 :polarity - :ARG1 (MRPNode-1 / term :mod (MRPNode-2 / any) :mod (MRPNode-3 / universal)) :ARG0 (MRPNode-4 / i))

# ::id 782
# ::snt There are a few minimally-effective things you can do at the personal level.
# ::tok There are a few minimally - effective things you can do at the personal level .
# ::alignments 3-4|0.0.0.1 6-7|0.0.0.0 7-8|0.0.0 8-9|0.0.1 9-10|0 10-11|0.0 13-14|0.0.2.0 14-15|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:43.327312 ::parser eager_oracle ::smatch 0.9411764705882353 ::n_actions 43
# ::node	0	possible-01	9-10
# ::node	0.0	do-02	10-11
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	effective-04	6-7
# ::node	0.0.0.0.0	maximum	
# ::node	0.0.0.1	few	3-4
# ::node	0.0.1	you	8-9
# ::node	0.0.2	level	14-15
# ::node	0.0.2.0	personal-02	13-14
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	thing	0.0	0.0.0
# ::edge	do-02	ARG2	level	0.0	0.0.2
# ::edge	effective-04	mod	maximum	0.0.0.0	0.0.0.0.0
# ::edge	level	ARG1-of	personal-02	0.0.2	0.0.2.0
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	thing	ARG0-of	effective-04	0.0.0	0.0.0.0
# ::edge	thing	quant	few	0.0.0	0.0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / thing :ARG0-of (MRPNode-3 / effective-04 :mod (MRPNode-4 / maximum)) :quant (MRPNode-5 / few)) :ARG0 (MRPNode-6 / you) :ARG2 (MRPNode-7 / level :ARG1-of (MRPNode-8 / personal-02))))

# ::id 783
# ::snt Something like this is useful:
# ::tok Something like this is useful :
# ::alignments 0-1|0.0 1-2|0.0.0 2-3|0.0.0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.329970 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	useful-05	4-5
# ::node	0.0	something	0-1
# ::node	0.0.0	resemble-01	1-2
# ::node	0.0.0.0	this	2-3
# ::root	0	useful-05
# ::edge	resemble-01	ARG2	this	0.0.0	0.0.0.0
# ::edge	something	ARG1-of	resemble-01	0.0	0.0.0
# ::edge	useful-05	ARG1	something	0	0.0
(MRPNode-0 / useful-05 :ARG1 (MRPNode-1 / something :ARG1-of (MRPNode-2 / resemble-01 :ARG2 (MRPNode-3 / this))))

# ::id 784
# ::snt I've done this many dozens of times.
# ::tok I 've done this many dozens of times .
# ::alignments 0-1|0.1 2-3|0 3-4|0.0 4-5|0.2 8-9|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.333189 ::parser eager_oracle ::smatch 0.9523809523809523 ::n_actions 26
# ::node	0	do-02	2-3
# ::node	0.0	this	3-4
# ::node	0.1	i	0-1
# ::node	0.2	many	4-5
# ::node	0.2.0	multiple	8-9
# ::node	0.2.0.0	12	
# ::root	0	do-02
# ::edge	do-02	ARG0	i	0	0.1
# ::edge	do-02	ARG1	this	0	0.0
# ::edge	do-02	frequency	many	0	0.2
# ::edge	many	op1	multiple	0.2	0.2.0
# ::edge	multiple	op1	12	0.2.0	0.2.0.0
(MRPNode-0 / do-02 :ARG1 (MRPNode-1 / this) :ARG0 (MRPNode-2 / i) :frequency (MRPNode-3 / many :op1 (MRPNode-4 / multiple :op1 12)))

# ::id 785
# ::snt You can do it, too.
# ::tok You can do it , too .
# ::alignments 0-1|0.0.1 1-2|0 2-3|0.0 3-4|0.0.0 5-6|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:43.335536 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	possible-01	1-2
# ::node	0.0	do-02	2-3
# ::node	0.0.0	it	3-4
# ::node	0.0.1	you	0-1
# ::node	0.0.2	too	5-6
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	it	0.0	0.0.0
# ::edge	do-02	mod	too	0.0	0.0.2
# ::edge	possible-01	ARG1	do-02	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / you) :mod (MRPNode-4 / too)))

# ::id 786
# ::snt I found some link that might be of help to you:
# ::tok I found some link that might be of help to you :
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.0 3-4|0.0+0.0.1 5-6|0.0.2.1 8-9|0.0.2 10-11|0.0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.347918 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	find-01	1-2
# ::node	0.0	thing	3-4
# ::node	0.0.0	some	2-3
# ::node	0.0.1	link-01	3-4
# ::node	0.0.2	help-01	8-9
# ::node	0.0.2.0	you	10-11
# ::node	0.0.2.1	possible-01	5-6
# ::node	0.1	i	0-1
# ::root	0	find-01
# ::edge	find-01	ARG0	i	0	0.1
# ::edge	find-01	ARG1	thing	0	0.0
# ::edge	help-01	ARG1-of	possible-01	0.0.2	0.0.2.1
# ::edge	help-01	ARG2	you	0.0.2	0.0.2.0
# ::edge	thing	ARG0-of	help-01	0.0	0.0.2
# ::edge	thing	ARG0-of	link-01	0.0	0.0.1
# ::edge	thing	mod	some	0.0	0.0.0
(MRPNode-0 / find-01 :ARG1 (MRPNode-1 / thing :mod (MRPNode-2 / some) :ARG0-of (MRPNode-3 / link-01) :ARG0-of (MRPNode-4 / help-01 :ARG2 (MRPNode-5 / you) :ARG1-of (MRPNode-6 / possible-01))) :ARG0 (MRPNode-7 / i))

# ::id 787
# ::snt Since you have one ticket, you don't have to worry.
# ::tok Since you have one ticket , you do n't have to worry .
# ::alignments 0-1|0 1-2|0.0.1 2-3|0.1 3-4|0.1.0.0 4-5|0.1.0 8-9|0.0.0 9-10|0.0 11-12|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:43.360325 ::parser eager_oracle ::smatch 1.0 ::n_actions 42
# ::node	0	cause-01	0-1
# ::node	0.0	obligate-01	9-10
# ::node	0.0.0	-	8-9
# ::node	0.0.1	you	1-2
# ::node	0.0.2	worry-02	11-12
# ::node	0.1	have-03	2-3
# ::node	0.1.0	ticket	4-5
# ::node	0.1.0.0	1	3-4
# ::root	0	cause-01
# ::edge	cause-01	ARG0	have-03	0	0.1
# ::edge	cause-01	ARG1	obligate-01	0	0.0
# ::edge	have-03	ARG1	ticket	0.1	0.1.0
# ::edge	obligate-01	ARG1	you	0.0	0.0.1
# ::edge	obligate-01	ARG2	worry-02	0.0	0.0.2
# ::edge	obligate-01	polarity	-	0.0	0.0.0
# ::edge	ticket	quant	1	0.1.0	0.1.0.0
# ::edge	worry-02	ARG0	you	0.0.2	0.0.1
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / obligate-01 :polarity - :ARG1 (MRPNode-2 / you) :ARG2 (MRPNode-3 / worry-02 :ARG0 MRPNode-2)) :ARG0 (MRPNode-4 / have-03 :ARG1 (MRPNode-5 / ticket :quant 1)))

# ::id 788
# ::snt It depends on your company.
# ::tok It depends on your company .
# ::alignments 0-1|0.1 1-2|0 3-4|0.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.362235 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	depend-01	1-2
# ::node	0.0	company	4-5
# ::node	0.0.0	you	3-4
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	company	poss	you	0.0	0.0.0
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	company	0	0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / company :poss (MRPNode-2 / you)) :ARG0 (MRPNode-3 / it))

# ::id 789
# ::snt It's just worn out and not safe.
# ::tok It 's just worn out and not safe .
# ::alignments 0-1|0.0.0 2-3|0.0.1 3-4|0.0 5-6|0 6-7|0.1.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:43.365271 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	and	5-6
# ::node	0.0	wear-01	3-4
# ::node	0.0.0	it	0-1
# ::node	0.0.1	just	2-3
# ::node	0.1	safe-01	7-8
# ::node	0.1.0	-	6-7
# ::root	0	and
# ::edge	and	op1	wear-01	0	0.0
# ::edge	and	op2	safe-01	0	0.1
# ::edge	safe-01	ARG1	it	0.1	0.0.0
# ::edge	safe-01	polarity	-	0.1	0.1.0
# ::edge	wear-01	ARG1	it	0.0	0.0.0
# ::edge	wear-01	mod	just	0.0	0.0.1
(MRPNode-0 / and :op1 (MRPNode-1 / wear-01 :ARG1 (MRPNode-2 / it) :mod (MRPNode-3 / just)) :op2 (MRPNode-4 / safe-01 :polarity - :ARG1 MRPNode-2))

# ::id 790
# ::snt I had the same problem as you.
# ::tok I had the same problem as you .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0 5-6|0.0.0 6-7|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.368123 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	have-03	1-2
# ::node	0.0	problem	4-5
# ::node	0.0.0	same-01	5-6
# ::node	0.0.0.0	you	6-7
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
# ::edge	problem	ARG1-of	same-01	0.0	0.0.0
# ::edge	same-01	ARG2	you	0.0.0	0.0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem :ARG1-of (MRPNode-2 / same-01 :ARG2 (MRPNode-3 / you))) :ARG0 (MRPNode-4 / i))

# ::id 791
# ::snt The simple answer is yes!
# ::tok The simple answer is yes !
# ::alignments 1-2|0.1 2-3|0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.369785 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	answer-01	2-3
# ::node	0.0	yes	4-5
# ::node	0.1	simple-02	1-2
# ::root	0	answer-01
# ::edge	answer-01	ARG1-of	simple-02	0	0.1
# ::edge	answer-01	ARG1-of	yes	0	0.0
(MRPNode-0 / answer-01 :ARG1-of (MRPNode-1 / yes) :ARG1-of (MRPNode-2 / simple-02))

# ::id 792
# ::snt I don't think there are any benefits.
# ::tok I do n't think there are any benefits .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 6-7|0.1.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:43.373622 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	think-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	benefit-01	7-8
# ::node	0.1.0	any	6-7
# ::node	0.2	i	0-1
# ::root	0	think-01
# ::edge	benefit-01	mod	any	0.1	0.1.0
# ::edge	think-01	ARG0	i	0	0.2
# ::edge	think-01	ARG1	benefit-01	0	0.1
# ::edge	think-01	polarity	-	0	0.0
(MRPNode-0 / think-01 :polarity - :ARG1 (MRPNode-1 / benefit-01 :mod (MRPNode-2 / any)) :ARG0 (MRPNode-3 / i))

# ::id 793
# ::snt Yes, you can do it.
# ::tok Yes , you can do it .
# ::alignments 2-3|0.0.1 3-4|0 4-5|0.0 5-6|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.375671 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	possible-01	3-4
# ::node	0.0	do-02	4-5
# ::node	0.0.0	it	5-6
# ::node	0.0.1	you	2-3
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	it	0.0	0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / you)))

# ::id 794
# ::snt There are a few things I think you should do.
# ::tok There are a few things I think you should do .
# ::alignments 3-4|0.0.0.0.0 4-5|0.0.0.0 5-6|0.1 6-7|0 7-8|0.0.0.1 8-9|0.0 9-10|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.411604 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	think-01	6-7
# ::node	0.0	recommend-01	8-9
# ::node	0.0.0	do-02	9-10
# ::node	0.0.0.0	thing	4-5
# ::node	0.0.0.0.0	few	3-4
# ::node	0.0.0.1	you	7-8
# ::node	0.1	i	5-6
# ::root	0	think-01
# ::edge	do-02	ARG0	you	0.0.0	0.0.0.1
# ::edge	do-02	ARG1	thing	0.0.0	0.0.0.0
# ::edge	recommend-01	ARG1	do-02	0.0	0.0.0
# ::edge	recommend-01	ARG2	you	0.0	0.0.0.1
# ::edge	thing	quant	few	0.0.0.0	0.0.0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	recommend-01	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / recommend-01 :ARG1 (MRPNode-2 / do-02 :ARG1 (MRPNode-3 / thing :quant (MRPNode-4 / few)) :ARG0 (MRPNode-5 / you)) :ARG2 MRPNode-5) :ARG0 (MRPNode-6 / i))

# ::id 795
# ::snt There are a few reasons that paint wrinkles.
# ::tok There are a few reasons that paint wrinkles .
# ::alignments 3-4|0.0.0 4-5|0.0 6-7|0.1 7-8|0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.414746 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	wrinkle	7-8
# ::node	0.0	reason	4-5
# ::node	0.0.0	few	3-4
# ::node	0.1	paint-03	6-7
# ::root	0	wrinkle
# ::edge	reason	quant	few	0.0	0.0.0
# ::edge	wrinkle	ARG0-of	paint-03	0	0.1
# ::edge	wrinkle	ARG0-of	reason	0	0.0
(MRPNode-0 / wrinkle :ARG0-of (MRPNode-1 / reason :quant (MRPNode-2 / few)) :ARG0-of (MRPNode-3 / paint-03))

# ::id 796
# ::snt I had this same situation.
# ::tok I had this same situation .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.0 3-4|0.0.1 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.416972 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	have-03	1-2
# ::node	0.0	situation	4-5
# ::node	0.0.0	this	2-3
# ::node	0.0.1	same-01	3-4
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	situation	0	0.0
# ::edge	situation	ARG1-of	same-01	0.0	0.0.1
# ::edge	situation	mod	this	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / situation :mod (MRPNode-2 / this) :ARG1-of (MRPNode-3 / same-01)) :ARG0 (MRPNode-4 / i))

# ::id 797
# ::snt If the answer to any of these questions is yes, a PhD may be worthwhile for you.
# ::tok If the answer to any of these questions is yes , a PhD may be worthwhile for you .
# ::alignments 2-3|0.0.0 4-5|0.0.0.1 5-6|0 6-7|0.0.0.0 7-8|0.0 9-10|0.0.1 12-13|0.1.0.0 13-14|0.1 15-16|0.1.0 17-18|0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:43.460843 ::parser eager_oracle ::smatch 1.0 ::n_actions 54
# ::node	0	have-condition-91	5-6
# ::node	0.0	answer-01	7-8
# ::node	0.0.0	question-01	2-3
# ::node	0.0.0.0	this	6-7
# ::node	0.0.0.1	any	4-5
# ::node	0.0.1	yes	9-10
# ::node	0.1	possible-01	13-14
# ::node	0.1.0	worthwhile	15-16
# ::node	0.1.0.0	PhD	12-13
# ::node	0.1.0.1	you	17-18
# ::root	0	have-condition-91
# ::edge	answer-01	ARG1	question-01	0.0	0.0.0
# ::edge	answer-01	ARG2	yes	0.0	0.0.1
# ::edge	have-condition-91	ARG1	answer-01	0	0.0
# ::edge	have-condition-91	ARG1	possible-01	0	0.1
# ::edge	possible-01	ARG1	worthwhile	0.1	0.1.0
# ::edge	question-01	mod	any	0.0.0	0.0.0.1
# ::edge	question-01	mod	this	0.0.0	0.0.0.0
# ::edge	worthwhile	beneficiary	you	0.1.0	0.1.0.1
# ::edge	worthwhile	domain	PhD	0.1.0	0.1.0.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / answer-01 :ARG1 (MRPNode-2 / question-01 :mod (MRPNode-3 / this) :mod (MRPNode-4 / any)) :ARG2 (MRPNode-5 / yes)) :ARG1 (MRPNode-6 / possible-01 :ARG1 (MRPNode-7 / worthwhile :domain (MRPNode-8 / PhD) :beneficiary (MRPNode-9 / you))))

# ::id 798
# ::snt I have this habit as well.
# ::tok I have this habit as well .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.0 3-4|0.0 4-6|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:43.464948 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	have-03	1-2
# ::node	0.0	habit	3-4
# ::node	0.0.0	this	2-3
# ::node	0.1	i	0-1
# ::node	0.2	as-well	4-6
# ::root	0	have-03
# ::edge	habit	mod	this	0.0	0.0.0
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	habit	0	0.0
# ::edge	have-03	mod	as-well	0	0.2
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / habit :mod (MRPNode-2 / this)) :ARG0 (MRPNode-3 / i) :mod (MRPNode-4 / as-well))

# ::id 799
# ::snt You should listen to your boss, because you're not paid to tell the boss what to do.
# ::tok You should listen to your boss , because you 're not paid to tell the boss what to do .
# ::alignments 1-2|0 2-3|0.0 4-5|0.0.0 5-6|0.0.0.0+0.0.0.0.0 7-8|0.0.1 10-11|0.0.1.0.0 11-12|0.0.1.0 13-14|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:43.540475 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 54
# ::node	0	recommend-01	1-2
# ::node	0.0	listen-01	2-3
# ::node	0.0.0	you	4-5
# ::node	0.0.0.0	have-rel-role-91	5-6
# ::node	0.0.0.0.0	boss	5-6
# ::node	0.0.0.0.1	person	
# ::node	0.0.0.1	tell-01	13-14
# ::node	0.0.0.1.0	thing	
# ::node	0.0.1	cause-01	7-8
# ::node	0.0.1.0	pay-01	11-12
# ::node	0.0.1.0.0	-	10-11
# ::root	0	recommend-01
# ::edge	cause-01	ARG0	pay-01	0.0.1	0.0.1.0
# ::edge	have-rel-role-91	ARG0	person	0.0.0.0	0.0.0.0.1
# ::edge	have-rel-role-91	ARG2	boss	0.0.0.0	0.0.0.0.0
# ::edge	listen-01	ARG0	cause-01	0.0	0.0.1
# ::edge	listen-01	ARG0	you	0.0	0.0.0
# ::edge	listen-01	ARG1	person	0.0	0.0.0.0.1
# ::edge	pay-01	ARG0	you	0.0.1.0	0.0.0
# ::edge	pay-01	ARG3	tell-01	0.0.1.0	0.0.0.1
# ::edge	pay-01	polarity	-	0.0.1.0	0.0.1.0.0
# ::edge	recommend-01	ARG1	listen-01	0	0.0
# ::edge	recommend-01	ARG1-of	cause-01	0	0.0.1
# ::edge	tell-01	ARG1	thing	0.0.0.1	0.0.0.1.0
# ::edge	you	ARG0-of	tell-01	0.0.0	0.0.0.1
# ::edge	you	ARG1-of	have-rel-role-91	0.0.0	0.0.0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / listen-01 :ARG0 (MRPNode-2 / you :ARG1-of (MRPNode-3 / have-rel-role-91 :ARG2 (MRPNode-4 / boss) :ARG0 (MRPNode-7 / person)) :ARG0-of (MRPNode-5 / tell-01 :ARG1 (MRPNode-6 / thing))) :ARG1 MRPNode-7 :ARG0 (MRPNode-8 / cause-01 :ARG0 (MRPNode-9 / pay-01 :polarity - :ARG0 MRPNode-2 :ARG3 MRPNode-5))) :ARG1-of MRPNode-8)

# ::id 800
# ::snt i think it depends what you want:
# ::tok i think it depends what you want :
# ::alignments 0-1|0.1 1-2|0.0.0 2-3|0.0.1 3-4|0.0 5-6|0.0.0.0.0 6-7|0.0.0.0 7-8|0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.604731 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	think-01	7-8
# ::node	0.0	depend-01	3-4
# ::node	0.0.0	thing	1-2
# ::node	0.0.0.0	want-01	6-7
# ::node	0.0.0.0.0	you	5-6
# ::node	0.0.1	it	2-3
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	depend-01	ARG0	it	0.0	0.0.1
# ::edge	depend-01	ARG1	thing	0.0	0.0.0
# ::edge	thing	ARG1-of	want-01	0.0.0	0.0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	depend-01	0	0.0
# ::edge	want-01	ARG0	you	0.0.0.0	0.0.0.0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / depend-01 :ARG1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / want-01 :ARG0 (MRPNode-4 / you))) :ARG0 (MRPNode-5 / it)) :ARG0 (MRPNode-6 / i))

# ::id 801
# ::snt You have no need to do anything.
# ::tok You have no need to do anything .
# ::alignments 0-1|0.1.1 2-3|0.0 3-4|0 5-6|0.1 6-7|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.610240 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	need-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	do-02	5-6
# ::node	0.1.0	anything	6-7
# ::node	0.1.1	you	0-1
# ::root	0	need-01
# ::edge	do-02	ARG0	you	0.1	0.1.1
# ::edge	do-02	ARG1	anything	0.1	0.1.0
# ::edge	need-01	ARG0	you	0	0.1.1
# ::edge	need-01	ARG1	do-02	0	0.1
# ::edge	need-01	polarity	-	0	0.0
(MRPNode-0 / need-01 :polarity - :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / anything) :ARG0 (MRPNode-3 / you)) :ARG0 MRPNode-3)

# ::id 802
# ::snt You can buy it on ebay for $25 and up.
# ::tok You can buy it on ebay for $ 25 and up .
# ::alignments 0-1|0.0.1 1-2|0 2-3|0.0 3-4|0.0.0 5-6|0.0.3+0.0.3.0+0.0.3.0.0 8-9|0.0.2.0.0 9-10|0.0.2 10-11|0.0.2.1 ::annotator aligner3.py ::date 2021-03-12 14:31:43.617576 ::parser eager_oracle ::smatch 0.8717948717948718 ::n_actions 38
# ::node	0	possible-01	1-2
# ::node	0.0	buy-01	2-3
# ::node	0.0.0	it	3-4
# ::node	0.0.1	you	0-1
# ::node	0.0.2	and	9-10
# ::node	0.0.2.0	monetary-quantity	
# ::node	0.0.2.0.0	25	8-9
# ::node	0.0.2.0.1	dollar	
# ::node	0.0.2.1	up	10-11
# ::node	0.0.3	company	5-6
# ::node	0.0.3.0	name	5-6
# ::node	0.0.3.0.0	ebay	5-6
# ::root	0	possible-01
# ::edge	and	op1	monetary-quantity	0.0.2	0.0.2.0
# ::edge	and	op2	up	0.0.2	0.0.2.1
# ::edge	buy-01	ARG0	you	0.0	0.0.1
# ::edge	buy-01	ARG1	it	0.0	0.0.0
# ::edge	buy-01	ARG3	and	0.0	0.0.2
# ::edge	buy-01	medium	company	0.0	0.0.3
# ::edge	company	name	name	0.0.3	0.0.3.0
# ::edge	monetary-quantity	quant	25	0.0.2.0	0.0.2.0.0
# ::edge	monetary-quantity	unit	dollar	0.0.2.0	0.0.2.0.1
# ::edge	name	op1	ebay	0.0.3.0	0.0.3.0.0
# ::edge	possible-01	ARG1	buy-01	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / buy-01 :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / you) :ARG3 (MRPNode-4 / and :op1 (MRPNode-5 / monetary-quantity :quant 25 :unit (MRPNode-6 / dollar)) :op2 (MRPNode-7 / up)) :medium (MRPNode-8 / company :name (MRPNode-9 / name :op1 ebay))))

# ::id 803
# ::snt My advice would be to try a variety of coffees that you can afford and find one you like.
# ::tok My advice would be to try a variety of coffees that you can afford and find one you like .
# ::alignments 0-1|0.0 1-2|0 5-6|0.1.0 7-8|0.1.0.0.0 9-10|0.1.0.0 11-12|0.1.0.0.1.1 12-13|0.1.0.0.1.0 13-14|0.1.0.0.1 14-15|0.1 15-16|0.1.1 16-17|0.1.0.0.1.1.0.0 18-19|0.1.0.0.1.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.644183 ::parser eager_oracle ::smatch 1.0 ::n_actions 67
# ::node	0	advise-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	and	14-15
# ::node	0.1.0	try-01	5-6
# ::node	0.1.0.0	coffee	9-10
# ::node	0.1.0.0.0	variety	7-8
# ::node	0.1.0.0.1	afford-01	13-14
# ::node	0.1.0.0.1.0	possible-01	12-13
# ::node	0.1.0.0.1.1	you	11-12
# ::node	0.1.0.0.1.1.0	like-01	18-19
# ::node	0.1.0.0.1.1.0.0	one	16-17
# ::node	0.1.1	find-01	15-16
# ::root	0	advise-01
# ::edge	advise-01	ARG1	i	0	0.0
# ::edge	advise-01	ARG2	and	0	0.1
# ::edge	afford-01	ARG0	you	0.1.0.0.1	0.1.0.0.1.1
# ::edge	afford-01	ARG1-of	possible-01	0.1.0.0.1	0.1.0.0.1.0
# ::edge	and	op1	try-01	0.1	0.1.0
# ::edge	and	op2	find-01	0.1	0.1.1
# ::edge	coffee	ARG1-of	afford-01	0.1.0.0	0.1.0.0.1
# ::edge	coffee	mod	variety	0.1.0.0	0.1.0.0.0
# ::edge	find-01	ARG0	coffee	0.1.1	0.1.0.0
# ::edge	find-01	ARG0	you	0.1.1	0.1.0.0.1.1
# ::edge	find-01	ARG1	one	0.1.1	0.1.0.0.1.1.0.0
# ::edge	like-01	ARG1	one	0.1.0.0.1.1.0	0.1.0.0.1.1.0.0
# ::edge	try-01	ARG0	you	0.1.0	0.1.0.0.1.1
# ::edge	try-01	ARG1	coffee	0.1.0	0.1.0.0
# ::edge	you	ARG0-of	like-01	0.1.0.0.1.1	0.1.0.0.1.1.0
(MRPNode-0 / advise-01 :ARG1 (MRPNode-1 / i) :ARG2 (MRPNode-2 / and :op1 (MRPNode-3 / try-01 :ARG1 (MRPNode-4 / coffee :mod (MRPNode-5 / variety) :ARG1-of (MRPNode-6 / afford-01 :ARG1-of (MRPNode-7 / possible-01) :ARG0 (MRPNode-8 / you :ARG0-of (MRPNode-9 / like-01 :ARG1 (MRPNode-11 / one))))) :ARG0 MRPNode-8) :op2 (MRPNode-10 / find-01 :ARG0 MRPNode-4 :ARG0 MRPNode-8 :ARG1 MRPNode-11)))

# ::id 804
# ::snt Can you do this?
# ::tok Can you do this ?
# ::alignments 0-1|0 1-2|0.0.1 2-3|0.0 3-4|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.646519 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 19
# ::node	0	possible-01	0-1
# ::node	0.0	do-02	2-3
# ::node	0.0.0	this	3-4
# ::node	0.0.1	you	1-2
# ::node	0.1	amr-unknown	
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	this	0.0	0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	possible-01	ARG1-of	amr-unknown	0	0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / this) :ARG0 (MRPNode-3 / you)) :ARG1-of (MRPNode-4 / amr-unknown))

# ::id 805
# ::snt I'd say it depends on the ultimate outcome you want?
# ::tok I 'd say it depends on the ultimate outcome you want ?
# ::alignments 0-1|0.1 2-3|0 3-4|0.0.1 4-5|0.0 7-8|0.0.0.0 8-9|0.0.0 9-10|0.0.0.1.0 10-11|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:43.671045 ::parser eager_oracle ::smatch 0.9411764705882353 ::n_actions 38
# ::node	0	say-01	2-3
# ::node	0.0	depend-01	4-5
# ::node	0.0.0	outcome	8-9
# ::node	0.0.0.0	ultimate	7-8
# ::node	0.0.0.1	want-01	10-11
# ::node	0.0.0.1.0	you	9-10
# ::node	0.0.1	it	3-4
# ::node	0.1	i	0-1
# ::node	0.2	amr-unknown	
# ::root	0	say-01
# ::edge	depend-01	ARG0	it	0.0	0.0.1
# ::edge	depend-01	ARG1	outcome	0.0	0.0.0
# ::edge	outcome	ARG1-of	want-01	0.0.0	0.0.0.1
# ::edge	outcome	mod	ultimate	0.0.0	0.0.0.0
# ::edge	say-01	ARG0	i	0	0.1
# ::edge	say-01	ARG1	depend-01	0	0.0
# ::edge	say-01	ARG1-of	amr-unknown	0	0.2
# ::edge	want-01	ARG0	you	0.0.0.1	0.0.0.1.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / depend-01 :ARG1 (MRPNode-2 / outcome :mod (MRPNode-3 / ultimate) :ARG1-of (MRPNode-4 / want-01 :ARG0 (MRPNode-5 / you))) :ARG0 (MRPNode-6 / it)) :ARG0 (MRPNode-7 / i) :ARG1-of (MRPNode-8 / amr-unknown))

# ::id 806
# ::snt I am not sure this question would have made much sense to the Romans themselves.
# ::tok I am not sure this question would have made much sense to the Romans themselves .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 4-5|0.1.0.0 5-6|0.1.0.1 6-7|0.1.0 9-10|0.1.1 10-11|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:43.772692 ::parser eager_oracle ::smatch 0.8108108108108109 ::n_actions 42
# ::node	0	sure-02	3-4
# ::node	0.0	-	2-3
# ::node	0.1	sense-02	10-11
# ::node	0.1.0	thing	6-7
# ::node	0.1.0.0	this	4-5
# ::node	0.1.0.1	question-01	5-6
# ::node	0.1.1	much	9-10
# ::node	0.1.2	person	
# ::node	0.1.2.0	country	
# ::node	0.1.2.0.0	name	
# ::node	0.1.2.0.0.0	rome	
# ::node	0.2	i	0-1
# ::root	0	sure-02
# ::edge	country	name	name	0.1.2.0	0.1.2.0.0
# ::edge	name	op1	rome	0.1.2.0.0	0.1.2.0.0.0
# ::edge	person	mod	country	0.1.2	0.1.2.0
# ::edge	sense-02	ARG1	thing	0.1	0.1.0
# ::edge	sense-02	ARG2	much	0.1	0.1.1
# ::edge	sense-02	ARG2	person	0.1	0.1.2
# ::edge	sure-02	ARG0	i	0	0.2
# ::edge	sure-02	ARG1	sense-02	0	0.1
# ::edge	sure-02	polarity	-	0	0.0
# ::edge	thing	ARG1-of	question-01	0.1.0	0.1.0.1
# ::edge	thing	mod	this	0.1.0	0.1.0.0
(MRPNode-0 / sure-02 :polarity - :ARG1 (MRPNode-1 / sense-02 :ARG1 (MRPNode-2 / thing :mod (MRPNode-3 / this) :ARG1-of (MRPNode-4 / question-01)) :ARG2 (MRPNode-5 / much) :ARG2 (MRPNode-6 / person :mod (MRPNode-7 / country :name (MRPNode-8 / name :op1 rome)))) :ARG0 (MRPNode-9 / i))

# ::id 807
# ::snt No you are not.
# ::tok No you are not .
# ::alignments 0-1|0.0 1-2|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:43.773940 ::parser eager_oracle ::smatch 0.0 ::n_actions 12
# ::node	0	have-polarity-91	
# ::node	0.0	-	0-1
# ::node	0.1	you	1-2
# ::root	0	have-polarity-91
# ::edge	have-polarity-91	ARG1	you	0	0.1
# ::edge	have-polarity-91	arg2	-	0	0.0
(MRPNode-0 / have-polarity-91 :arg2 - :ARG1 (MRPNode-1 / you))

# ::id 808
# ::snt I think it depends very much on the area.
# ::tok I think it depends very much on the area .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1 3-4|0.0 4-5|0.0.2.0 5-6|0.0.2 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.819228 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	think-01	1-2
# ::node	0.0	depend-01	3-4
# ::node	0.0.0	area	8-9
# ::node	0.0.1	it	2-3
# ::node	0.0.2	much	5-6
# ::node	0.0.2.0	very	4-5
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	depend-01	ARG0	it	0.0	0.0.1
# ::edge	depend-01	ARG1	area	0.0	0.0.0
# ::edge	depend-01	degree	much	0.0	0.0.2
# ::edge	much	degree	very	0.0.2	0.0.2.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	depend-01	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / depend-01 :ARG1 (MRPNode-2 / area) :ARG0 (MRPNode-3 / it) :degree (MRPNode-4 / much :degree (MRPNode-5 / very))) :ARG0 (MRPNode-6 / i))

# ::id 809
# ::snt It depends on what they are evaluating, and how.
# ::tok It depends on what they are evaluating , and how .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0.0.0 6-7|0.0.0+0.0.0.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.823129 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 33
# ::node	0	depend-01	1-2
# ::node	0.0	and	8-9
# ::node	0.0.0	thing	6-7
# ::node	0.0.0.0	evaluate-01	6-7
# ::node	0.0.0.0.0	they	4-5
# ::node	0.0.1	thing	
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	and	op1	thing	0.0	0.0.0
# ::edge	and	op2	thing	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	evaluate-01	ARG0	they	0.0.0.0	0.0.0.0.0
# ::edge	thing	ARG1-of	evaluate-01	0.0.0	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / evaluate-01 :ARG0 (MRPNode-4 / they))) :op2 (MRPNode-5 / thing)) :ARG0 (MRPNode-6 / it))

# ::id 810
# ::snt There's not that much that you can do with a sourdough starter.
# ::tok There 's not that much that you can do with a sourdough starter .
# ::alignments 2-3|0.0.0.0 3-4|0.0.0.1 4-5|0.0.0 6-7|0.0.1 7-8|0 8-9|0.0 11-12|0.0.2.0.0 12-13|0.0.2+0.0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.832496 ::parser eager_oracle ::smatch 1.0 ::n_actions 46
# ::node	0	possible-01	7-8
# ::node	0.0	do-02	8-9
# ::node	0.0.0	much	4-5
# ::node	0.0.0.0	-	2-3
# ::node	0.0.0.1	that	3-4
# ::node	0.0.1	you	6-7
# ::node	0.0.2	person	12-13
# ::node	0.0.2.0	start-01	12-13
# ::node	0.0.2.0.0	sourdough	11-12
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	much	0.0	0.0.0
# ::edge	do-02	ARG2	person	0.0	0.0.2
# ::edge	much	degree	that	0.0.0	0.0.0.1
# ::edge	much	polarity	-	0.0.0	0.0.0.0
# ::edge	person	ARG0-of	start-01	0.0.2	0.0.2.0
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	start-01	ARG1	sourdough	0.0.2.0	0.0.2.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / much :polarity - :degree (MRPNode-3 / that)) :ARG0 (MRPNode-4 / you) :ARG2 (MRPNode-5 / person :ARG0-of (MRPNode-6 / start-01 :ARG1 (MRPNode-7 / sourdough)))))

# ::id 811
# ::snt Th answer to you problem is that you dont actually know what you're getting in .
# ::tok Th answer to you problem is that you dont actually know what you 're getting in .
# ::alignments 1-2|0 4-5|0.0 7-8|0.0.0 8-9|0.1+0.1.0 9-10|0.1.1 10-11|0.0.0.0.0 14-15|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.865601 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	answer-01	1-2
# ::node	0.0	problem	4-5
# ::node	0.0.0	you	7-8
# ::node	0.0.0.0	get-05	14-15
# ::node	0.0.0.0.0	thing	10-11
# ::node	0.1	know-01	8-9
# ::node	0.1.0	-	8-9
# ::node	0.1.1	actual-02	9-10
# ::root	0	answer-01
# ::edge	answer-01	ARG2	know-01	0	0.1
# ::edge	answer-01	ARG2	problem	0	0.0
# ::edge	get-05	ARG2	thing	0.0.0.0	0.0.0.0.0
# ::edge	know-01	ARG0	you	0.1	0.0.0
# ::edge	know-01	ARG1	thing	0.1	0.0.0.0.0
# ::edge	know-01	ARG1-of	actual-02	0.1	0.1.1
# ::edge	know-01	polarity	-	0.1	0.1.0
# ::edge	problem	poss	you	0.0	0.0.0
# ::edge	you	ARG0-of	get-05	0.0.0	0.0.0.0
(MRPNode-0 / answer-01 :ARG2 (MRPNode-1 / problem :poss (MRPNode-2 / you :ARG0-of (MRPNode-3 / get-05 :ARG2 (MRPNode-5 / thing)))) :ARG2 (MRPNode-4 / know-01 :polarity - :ARG0 MRPNode-2 :ARG1 MRPNode-5 :ARG1-of (MRPNode-6 / actual-02)))

# ::id 812
# ::snt This is probably not a good idea but I will suggest it anyhow.
# ::tok This is probably not a good idea but I will suggest it anyhow .
# ::alignments 0-1|0.1.0.1 2-3|0.1 3-4|0.1.0.0.0 5-6|0.1.0.0 6-7|0.1.0 7-8|0 8-9|0.0.1 10-11|0.0 11-12|0.0.0 12-13|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:43.874177 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	have-concession-91	7-8
# ::node	0.0	suggest-01	10-11
# ::node	0.0.0	it	11-12
# ::node	0.0.1	i	8-9
# ::node	0.0.2	anyhow	12-13
# ::node	0.1	probable	2-3
# ::node	0.1.0	idea	6-7
# ::node	0.1.0.0	good-02	5-6
# ::node	0.1.0.0.0	-	3-4
# ::node	0.1.0.1	this	0-1
# ::root	0	have-concession-91
# ::edge	good-02	polarity	-	0.1.0.0	0.1.0.0.0
# ::edge	have-concession-91	ARG1	suggest-01	0	0.0
# ::edge	have-concession-91	ARG2	probable	0	0.1
# ::edge	idea	ARG1-of	good-02	0.1.0	0.1.0.0
# ::edge	idea	domain	this	0.1.0	0.1.0.1
# ::edge	probable	domain	idea	0.1	0.1.0
# ::edge	suggest-01	ARG0	i	0.0	0.0.1
# ::edge	suggest-01	ARG1	it	0.0	0.0.0
# ::edge	suggest-01	mod	anyhow	0.0	0.0.2
(MRPNode-0 / have-concession-91 :ARG1 (MRPNode-1 / suggest-01 :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / i) :mod (MRPNode-4 / anyhow)) :ARG2 (MRPNode-5 / probable :domain (MRPNode-6 / idea :ARG1-of (MRPNode-7 / good-02 :polarity -) :domain (MRPNode-8 / this))))

# ::id 813
# ::snt I'd say it depends what conditions you have.
# ::tok I 'd say it depends what conditions you have .
# ::alignments 0-1|0.1 2-3|0 3-4|0.0.1 4-5|0.0 6-7|0.0.0+0.0.0.0 7-8|0.0.0.0.0.0 8-9|0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.882515 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	say-01	2-3
# ::node	0.0	depend-01	4-5
# ::node	0.0.0	thing	6-7
# ::node	0.0.0.0	condition-01	6-7
# ::node	0.0.0.0.0	have-03	8-9
# ::node	0.0.0.0.0.0	you	7-8
# ::node	0.0.1	it	3-4
# ::node	0.1	i	0-1
# ::root	0	say-01
# ::edge	condition-01	ARG1-of	have-03	0.0.0.0	0.0.0.0.0
# ::edge	depend-01	ARG0	it	0.0	0.0.1
# ::edge	depend-01	ARG1	thing	0.0	0.0.0
# ::edge	have-03	ARG0	you	0.0.0.0.0	0.0.0.0.0.0
# ::edge	say-01	ARG0	i	0	0.1
# ::edge	say-01	ARG1	depend-01	0	0.0
# ::edge	thing	ARG2-of	condition-01	0.0.0	0.0.0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / depend-01 :ARG1 (MRPNode-2 / thing :ARG2-of (MRPNode-3 / condition-01 :ARG1-of (MRPNode-4 / have-03 :ARG0 (MRPNode-5 / you)))) :ARG0 (MRPNode-6 / it)) :ARG0 (MRPNode-7 / i))

# ::id 814
# ::snt I have the same situation and have traveled extensively.
# ::tok I have the same situation and have traveled extensively .
# ::alignments 0-1|0.0.1 1-2|0.0 3-4|0.0.0.0 4-5|0.0.0 5-6|0 7-8|0.1 8-9|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.887398 ::parser eager_oracle ::smatch 1.0 ::n_actions 35
# ::node	0	and	5-6
# ::node	0.0	have-03	1-2
# ::node	0.0.0	situation	4-5
# ::node	0.0.0.0	same-01	3-4
# ::node	0.0.1	i	0-1
# ::node	0.1	travel-01	7-8
# ::node	0.1.0	extensive-03	8-9
# ::root	0	and
# ::edge	and	op1	have-03	0	0.0
# ::edge	and	op2	travel-01	0	0.1
# ::edge	have-03	ARG0	i	0.0	0.0.1
# ::edge	have-03	ARG1	situation	0.0	0.0.0
# ::edge	situation	ARG1-of	same-01	0.0.0	0.0.0.0
# ::edge	travel-01	ARG0	i	0.1	0.0.1
# ::edge	travel-01	ARG1-of	extensive-03	0.1	0.1.0
(MRPNode-0 / and :op1 (MRPNode-1 / have-03 :ARG1 (MRPNode-2 / situation :ARG1-of (MRPNode-3 / same-01)) :ARG0 (MRPNode-4 / i)) :op2 (MRPNode-5 / travel-01 :ARG0 MRPNode-4 :ARG1-of (MRPNode-6 / extensive-03)))

# ::id 815
# ::snt You can still use it for practice.
# ::tok You can still use it for practice .
# ::alignments 0-1|0.0.1 1-2|0 2-3|0.0.2 3-4|0.0 4-5|0.0.0 6-7|0.0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:43.891997 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	possible-01	1-2
# ::node	0.0	use-01	3-4
# ::node	0.0.0	it	4-5
# ::node	0.0.1	you	0-1
# ::node	0.0.2	still	2-3
# ::node	0.0.3	practice-01	6-7
# ::root	0	possible-01
# ::edge	possible-01	ARG1	use-01	0	0.0
# ::edge	practice-01	ARG0	you	0.0.3	0.0.1
# ::edge	use-01	ARG0	you	0.0	0.0.1
# ::edge	use-01	ARG1	it	0.0	0.0.0
# ::edge	use-01	ARG2	practice-01	0.0	0.0.3
# ::edge	use-01	mod	still	0.0	0.0.2
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / use-01 :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / you) :mod (MRPNode-4 / still) :ARG2 (MRPNode-5 / practice-01 :ARG0 MRPNode-3)))

# ::id 816
# ::snt It depends how you're stating it.
# ::tok It depends how you 're stating it .
# ::alignments 1-2|0 3-4|0.0.0.0 5-6|0.0+0.0.0 6-7|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:43.896888 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	depend-01	1-2
# ::node	0.0	thing	5-6
# ::node	0.0.0	state-01	5-6
# ::node	0.0.0.0	you	3-4
# ::node	0.0.0.1	it	6-7
# ::root	0	depend-01
# ::edge	depend-01	ARG0	it	0	0.0.0.1
# ::edge	depend-01	ARG1	thing	0	0.0
# ::edge	state-01	ARG0	you	0.0.0	0.0.0.0
# ::edge	state-01	ARG1	it	0.0.0	0.0.0.1
# ::edge	thing	manner-of	state-01	0.0	0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / thing :manner-of (MRPNode-2 / state-01 :ARG0 (MRPNode-3 / you) :ARG1 (MRPNode-4 / it))) :ARG0 MRPNode-4)

# ::id 817
# ::snt I've had this problem while working in a pubs.
# ::tok I 've had this problem while working in a pubs .
# ::alignments 0-1|0.1 2-3|0 3-4|0.0.0 4-5|0.0 6-7|0.2 9-10|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.901419 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	have-03	2-3
# ::node	0.0	problem	4-5
# ::node	0.0.0	this	3-4
# ::node	0.1	i	0-1
# ::node	0.2	work-01	6-7
# ::node	0.2.0	pub	9-10
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
# ::edge	have-03	time	work-01	0	0.2
# ::edge	problem	mod	this	0.0	0.0.0
# ::edge	work-01	ARG0	i	0.2	0.1
# ::edge	work-01	ARG2	pub	0.2	0.2.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem :mod (MRPNode-2 / this)) :ARG0 (MRPNode-3 / i) :time (MRPNode-4 / work-01 :ARG0 MRPNode-3 :ARG2 (MRPNode-5 / pub)))

# ::id 818
# ::snt It depends on the sauce and the result you want.
# ::tok It depends on the sauce and the result you want .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0 5-6|0.0 7-8|0.0.1.1 8-9|0.0.1.0.0 9-10|0.0.1+0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.907130 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	depend-01	1-2
# ::node	0.0	and	5-6
# ::node	0.0.0	sauce	4-5
# ::node	0.0.1	thing	9-10
# ::node	0.0.1.0	want-01	9-10
# ::node	0.0.1.0.0	you	8-9
# ::node	0.0.1.1	result-01	7-8
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	and	op1	sauce	0.0	0.0.0
# ::edge	and	op2	thing	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	thing	ARG1-of	want-01	0.0.1	0.0.1.0
# ::edge	thing	ARG2-of	result-01	0.0.1	0.0.1.1
# ::edge	want-01	ARG0	you	0.0.1.0	0.0.1.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / sauce) :op2 (MRPNode-3 / thing :ARG1-of (MRPNode-4 / want-01 :ARG0 (MRPNode-5 / you)) :ARG2-of (MRPNode-6 / result-01))) :ARG0 (MRPNode-7 / it))

# ::id 819
# ::snt You have to do what is right for you.
# ::tok You have to do what is right for you .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.910980 ::parser eager_oracle ::smatch 0.8695652173913044 ::n_actions 28
# ::node	0	obligate-01	1-2
# ::node	0.0	you	0-1
# ::node	0.0.0	right-02	6-7
# ::node	0.0.0.0	thing	
# ::node	0.1	do-02	3-4
# ::root	0	obligate-01
# ::edge	do-02	ARG0	you	0.1	0.0
# ::edge	do-02	ARG1	right-02	0.1	0.0.0
# ::edge	do-02	ARG1	thing	0.1	0.0.0.0
# ::edge	obligate-01	ARG2	do-02	0	0.1
# ::edge	obligate-01	ARG2	you	0	0.0
# ::edge	right-02	ARG1	thing	0.0.0	0.0.0.0
# ::edge	you	ARG1-of	right-02	0.0	0.0.0
(MRPNode-0 / obligate-01 :ARG2 (MRPNode-1 / you :ARG1-of (MRPNode-2 / right-02 :ARG1 (MRPNode-4 / thing))) :ARG2 (MRPNode-3 / do-02 :ARG0 MRPNode-1 :ARG1 MRPNode-2 :ARG1 MRPNode-4))

# ::id 820
# ::snt Yes, I believe it's a good idea.
# ::tok Yes , I believe it 's a good idea .
# ::alignments 2-3|0.1 3-4|0 4-5|0.0.0 7-8|0.0.1 8-9|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.913939 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	believe-01	3-4
# ::node	0.0	idea	8-9
# ::node	0.0.0	it	4-5
# ::node	0.0.1	good-02	7-8
# ::node	0.1	i	2-3
# ::root	0	believe-01
# ::edge	believe-01	ARG0	i	0	0.1
# ::edge	believe-01	ARG1	idea	0	0.0
# ::edge	idea	ARG1-of	good-02	0.0	0.0.1
# ::edge	idea	ARG1-of	it	0.0	0.0.0
(MRPNode-0 / believe-01 :ARG1 (MRPNode-1 / idea :ARG1-of (MRPNode-2 / it) :ARG1-of (MRPNode-3 / good-02)) :ARG0 (MRPNode-4 / i))

# ::id 821
# ::snt If you do not have a very strong scientific reason to do it, don't.
# ::tok If you do not have a very strong scientific reason to do it , do n't .
# ::alignments 0-1|0.3.1.2 1-2|0.2 2-3|0 3-4|0.3.0 4-5|0.3 6-7|0.3.1.1.0 7-8|0.3.1.1 8-9|0.3.1.0 9-10|0.3.1 11-12|0.3.1.2.0 12-13|0.3.1.2.0.0 15-16|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:43.922282 ::parser eager_oracle ::smatch 0.9787234042553191 ::n_actions 59
# ::node	0	do-02	2-3
# ::node	0.0	-	15-16
# ::node	0.1	imperative	
# ::node	0.2	you	1-2
# ::node	0.3	have-03	4-5
# ::node	0.3.0	-	3-4
# ::node	0.3.1	reason	9-10
# ::node	0.3.1.0	science	8-9
# ::node	0.3.1.1	strong-02	7-8
# ::node	0.3.1.1.0	very	6-7
# ::node	0.3.1.2	cause-01	0-1
# ::node	0.3.1.2.0	do-02	11-12
# ::node	0.3.1.2.0.0	it	12-13
# ::root	0	do-02
# ::edge	cause-01	ARG1	do-02	0.3.1.2	0.3.1.2.0
# ::edge	do-02	ARG0	you	0	0.2
# ::edge	do-02	ARG1	it	0.3.1.2.0	0.3.1.2.0.0
# ::edge	do-02	condition	have-03	0	0.3
# ::edge	do-02	mode	imperative	0	0.1
# ::edge	do-02	polarity	-	0	0.0
# ::edge	have-03	ARG0	you	0.3	0.2
# ::edge	have-03	ARG1	reason	0.3	0.3.1
# ::edge	have-03	polarity	-	0.3	0.3.0
# ::edge	reason	ARG1-of	strong-02	0.3.1	0.3.1.1
# ::edge	reason	mod	science	0.3.1	0.3.1.0
# ::edge	reason	purpose	cause-01	0.3.1	0.3.1.2
# ::edge	strong-02	degree	very	0.3.1.1	0.3.1.1.0
(MRPNode-0 / do-02 :polarity - :mode imperative :ARG0 (MRPNode-1 / you) :condition (MRPNode-2 / have-03 :polarity - :ARG0 MRPNode-1 :ARG1 (MRPNode-3 / reason :mod (MRPNode-4 / science) :ARG1-of (MRPNode-5 / strong-02 :degree (MRPNode-6 / very)) :purpose (MRPNode-7 / cause-01 :ARG1 (MRPNode-8 / do-02 :ARG1 (MRPNode-9 / it))))))

# ::id 822
# ::snt Personally, I would say not unless it suits you.
# ::tok Personally , I would say not unless it suits you .
# ::alignments 0-1|0.3 2-3|0.2 3-4|0 5-6|0.0+0.1.0 7-8|0.1.1 9-10|0.1.2 ::annotator aligner3.py ::date 2021-03-12 14:31:43.927589 ::parser eager_oracle ::smatch 0.6666666666666666 ::n_actions 32
# ::node	0	say-01	3-4
# ::node	0.0	-	5-6
# ::node	0.1	fair-01	
# ::node	0.1.0	-	5-6
# ::node	0.1.1	it	7-8
# ::node	0.1.2	you	9-10
# ::node	0.2	i	2-3
# ::node	0.3	personal-02	0-1
# ::root	0	say-01
# ::edge	fair-01	ARG1	it	0.1	0.1.1
# ::edge	fair-01	ARG2	you	0.1	0.1.2
# ::edge	fair-01	polarity	-	0.1	0.1.0
# ::edge	say-01	ARG0	i	0	0.2
# ::edge	say-01	ARG1	fair-01	0	0.1
# ::edge	say-01	ARG1-of	personal-02	0	0.3
# ::edge	say-01	polarity	-	0	0.0
(MRPNode-0 / say-01 :polarity - :ARG1 (MRPNode-1 / fair-01 :polarity - :ARG1 (MRPNode-2 / it) :ARG2 (MRPNode-3 / you)) :ARG0 (MRPNode-4 / i) :ARG1-of (MRPNode-5 / personal-02))

# ::id 823
# ::snt I would say it is impossible to know, so don't risk it.
# ::tok I would say it is impossible to know , so do n't risk it .
# ::alignments 0-1|0.1 2-3|0 5-6|0.0+0.0.0 7-8|0.0.1 9-10|0.2 11-12|0.2.0.1 12-13|0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:44.263215 ::parser eager_oracle ::smatch 1.0 ::n_actions 48
# ::node	0	say-01	2-3
# ::node	0.0	possible-01	5-6
# ::node	0.0.0	-	5-6
# ::node	0.0.1	know-01	7-8
# ::node	0.1	i	0-1
# ::node	0.2	cause-01	9-10
# ::node	0.2.0	risk-01	12-13
# ::node	0.2.0.0	imperative	12-13
# ::node	0.2.0.1	you	11-12
# ::root	0	say-01
# ::edge	cause-01	ARG1	risk-01	0.2	0.2.0
# ::edge	possible-01	ARG1	know-01	0.0	0.0.1
# ::edge	possible-01	polarity	-	0.0	0.0.0
# ::edge	risk-01	ARG0	you	0.2.0	0.2.0.1
# ::edge	risk-01	ARG1	know-01	0.2.0	0.0.1
# ::edge	risk-01	mode	imperative	0.2.0	0.2.0.0
# ::edge	say-01	ARG0	i	0	0.1
# ::edge	say-01	ARG0-of	cause-01	0	0.2
# ::edge	say-01	ARG1	possible-01	0	0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / possible-01 :polarity - :ARG1 (MRPNode-2 / know-01)) :ARG0 (MRPNode-3 / i) :ARG0-of (MRPNode-4 / cause-01 :ARG1 (MRPNode-5 / risk-01 :mode imperative :ARG1 MRPNode-2 :ARG0 (MRPNode-6 / you))))

# ::id 824
# ::snt This answer is based on experience I did not researched for references.
# ::tok This answer is based on experience I did not researched for references .
# ::alignments 0-1|0.0.0 1-2|0.0+0.0.1 3-4|0 5-6|0.1 6-7|0.1.0.1 8-9|0.1.0.0 9-10|0.1.0 11-12|0.1.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:44.271441 ::parser eager_oracle ::smatch 1.0 ::n_actions 45
# ::node	0	base-02	3-4
# ::node	0.0	thing	1-2
# ::node	0.0.0	this	0-1
# ::node	0.0.1	answer-01	1-2
# ::node	0.1	experience-01	5-6
# ::node	0.1.0	research-01	9-10
# ::node	0.1.0.0	-	8-9
# ::node	0.1.0.1	i	6-7
# ::node	0.1.0.2	reference-04	11-12
# ::root	0	base-02
# ::edge	base-02	ARG1	thing	0	0.0
# ::edge	base-02	ARG2	experience-01	0	0.1
# ::edge	experience-01	ARG1-of	research-01	0.1	0.1.0
# ::edge	reference-04	ARG0	i	0.1.0.2	0.1.0.1
# ::edge	research-01	ARG0	i	0.1.0	0.1.0.1
# ::edge	research-01	polarity	-	0.1.0	0.1.0.0
# ::edge	research-01	purpose	reference-04	0.1.0	0.1.0.2
# ::edge	thing	ARG1-of	answer-01	0.0	0.0.1
# ::edge	thing	mod	this	0.0	0.0.0
(MRPNode-0 / base-02 :ARG1 (MRPNode-1 / thing :mod (MRPNode-2 / this) :ARG1-of (MRPNode-3 / answer-01)) :ARG2 (MRPNode-4 / experience-01 :ARG1-of (MRPNode-5 / research-01 :polarity - :ARG0 (MRPNode-6 / i) :purpose (MRPNode-7 / reference-04 :ARG0 MRPNode-6))))

# ::id 825
# ::snt It depends on what you want to achieve.
# ::tok It depends on what you want to achieve .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0.0 5-6|0.0.0.1 7-8|0.0+0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:44.276106 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	depend-01	1-2
# ::node	0.0	thing	7-8
# ::node	0.0.0	achieve-01	7-8
# ::node	0.0.0.0	you	4-5
# ::node	0.0.0.1	want-01	5-6
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	achieve-01	ARG0	you	0.0.0	0.0.0.0
# ::edge	achieve-01	ARG1-of	want-01	0.0.0	0.0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	thing	0	0.0
# ::edge	thing	ARG1-of	achieve-01	0.0	0.0.0
# ::edge	want-01	ARG0	you	0.0.0.1	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / thing :ARG1-of (MRPNode-2 / achieve-01 :ARG0 (MRPNode-3 / you) :ARG1-of (MRPNode-4 / want-01 :ARG0 MRPNode-3))) :ARG0 (MRPNode-5 / it))

# ::id 826
# ::snt Work with your supervisor and your team to solve the problem.
# ::tok Work with your supervisor and your team to solve the problem .
# ::alignments 0-1|0+0.0 2-3|0.2.1.0 3-4|0.2.1.0.0+0.2.1.0.0.0 4-5|0.2 6-7|0.2.1 8-9|0.1 10-11|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:44.290208 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 45
# ::node	0	work-01	0-1
# ::node	0.0	imperative	0-1
# ::node	0.1	solve-01	8-9
# ::node	0.1.0	problem	10-11
# ::node	0.2	and	4-5
# ::node	0.2.0	person	
# ::node	0.2.1	team	6-7
# ::node	0.2.1.0	you	2-3
# ::node	0.2.1.0.0	have-rel-role-91	3-4
# ::node	0.2.1.0.0.0	supervisor	3-4
# ::root	0	work-01
# ::edge	and	op1	person	0.2	0.2.0
# ::edge	and	op2	team	0.2	0.2.1
# ::edge	have-rel-role-91	ARG0	person	0.2.1.0.0	0.2.0
# ::edge	have-rel-role-91	ARG2	supervisor	0.2.1.0.0	0.2.1.0.0.0
# ::edge	solve-01	ARG1	problem	0.1	0.1.0
# ::edge	team	poss	you	0.2.1	0.2.1.0
# ::edge	work-01	ARG0	and	0	0.2
# ::edge	work-01	ARG0	you	0	0.2.1.0
# ::edge	work-01	ARG1	solve-01	0	0.1
# ::edge	work-01	mode	imperative	0	0.0
# ::edge	you	ARG1-of	have-rel-role-91	0.2.1.0	0.2.1.0.0
(MRPNode-0 / work-01 :mode imperative :ARG1 (MRPNode-1 / solve-01 :ARG1 (MRPNode-2 / problem)) :ARG0 (MRPNode-3 / and :op1 (MRPNode-4 / person) :op2 (MRPNode-5 / team :poss (MRPNode-6 / you :ARG1-of (MRPNode-7 / have-rel-role-91 :ARG0 MRPNode-4 :ARG2 (MRPNode-8 / supervisor))))) :ARG0 MRPNode-6)

# ::id 827
# ::snt Valid reasons to feel the way you do, but not a reason to resign.
# ::tok Valid reasons to feel the way you do , but not a reason to resign .
# ::alignments 0-1|0.1 1-2|0.1.1 3-4|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 5-6|0.0.0.0.0.0.0 9-10|0 10-11|0.1.0 12-13|0.0+0.0.0 14-15|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:44.688093 ::parser eager_oracle ::smatch 0.9333333333333332 ::n_actions 59
# ::node	0	contrast-01	9-10
# ::node	0.0	reason	12-13
# ::node	0.0.0	cause-01	12-13
# ::node	0.0.0.0	feel-01	3-4
# ::node	0.0.0.0.0	you	3-4
# ::node	0.0.0.0.0.0	feel-01	3-4
# ::node	0.0.0.0.0.0.0	way	5-6
# ::node	0.0.0.1	resign-01	14-15
# ::node	0.1	valid-02	0-1
# ::node	0.1.0	-	10-11
# ::node	0.1.1	reason	1-2
# ::root	0	contrast-01
# ::edge	cause-01	ARG1	feel-01	0.0.0	0.0.0.0
# ::edge	cause-01	ARG1	resign-01	0.0.0	0.0.0.1
# ::edge	contrast-01	ARG1	reason	0	0.0
# ::edge	contrast-01	ARG1	valid-02	0	0.1
# ::edge	feel-01	ARG1	way	0.0.0.0	0.0.0.0.0.0.0
# ::edge	feel-01	ARG1	you	0.0.0.0	0.0.0.0.0
# ::edge	feel-01	manner	way	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	reason	ARG0-of	cause-01	0.0	0.0.0
# ::edge	valid-02	ARG1	reason	0.1	0.1.1
# ::edge	valid-02	arg1	-	0.1	0.1.0
# ::edge	you	ARG0-of	feel-01	0.0.0.0.0	0.0.0.0.0.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / reason :ARG0-of (MRPNode-2 / cause-01 :ARG1 (MRPNode-3 / feel-01 :ARG1 (MRPNode-4 / you :ARG0-of (MRPNode-5 / feel-01 :manner (MRPNode-6 / way))) :ARG1 MRPNode-6) :ARG1 (MRPNode-7 / resign-01))) :ARG1 (MRPNode-8 / valid-02 :arg1 - :ARG1 (MRPNode-9 / reason)))

# ::id 828
# ::snt It depends on how the term is used I think.
# ::tok It depends on how the term is used I think .
# ::alignments 1-2|0.0 5-6|0.0.0.0.0 7-8|0.0.0.0 8-9|0.1 9-10|0 ::annotator aligner3.py ::date 2021-03-12 14:31:44.694144 ::parser eager_oracle ::smatch 0.8181818181818182 ::n_actions 27
# ::node	0	think-01	9-10
# ::node	0.0	depend-01	1-2
# ::node	0.0.0	have-manner-91	
# ::node	0.0.0.0	use-01	7-8
# ::node	0.0.0.0.0	term	5-6
# ::node	0.1	i	8-9
# ::root	0	think-01
# ::edge	depend-01	ARG1	have-manner-91	0.0	0.0.0
# ::edge	have-manner-91	ARG1	use-01	0.0.0	0.0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	depend-01	0	0.0
# ::edge	use-01	ARG1	term	0.0.0.0	0.0.0.0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / depend-01 :ARG1 (MRPNode-2 / have-manner-91 :ARG1 (MRPNode-3 / use-01 :ARG1 (MRPNode-4 / term)))) :ARG0 (MRPNode-5 / i))

# ::id 829
# ::snt You've pretty much answered your own question.
# ::tok You 've pretty much answered your own question .
# ::alignments 2-4|0.1 4-5|0.0 5-6|0.0.0 7-8|0 ::annotator aligner3.py ::date 2021-03-12 14:31:44.705092 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	answer-01	7-8
# ::node	0.0	question-01	4-5
# ::node	0.0.0	you	5-6
# ::node	0.1	pretty-much	2-4
# ::root	0	answer-01
# ::edge	answer-01	ARG0	you	0	0.0.0
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	answer-01	degree	pretty-much	0	0.1
# ::edge	question-01	ARG0	you	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG0 MRPNode-2 :degree (MRPNode-3 / pretty-much))

# ::id 830
# ::snt The more you sweat, the faster you will burn calories and fat.
# ::tok The more you sweat , the faster you will burn calories and fat .
# ::alignments 1-2|0.0 2-3|0.0.0.0.0 6-7|0.1.0.0 9-10|0.1.0.1 10-11|0.1.0.1.0.0 11-12|0.1.0.1.0 12-13|0.1.0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:44.716942 ::parser eager_oracle ::smatch 0.5405405405405406 ::n_actions 35
# ::node	0	correlate-91	
# ::node	0.0	more	1-2
# ::node	0.0.0	have-quant-91	
# ::node	0.0.0.0	dry-02	
# ::node	0.0.0.0.0	you	2-3
# ::node	0.1	more	
# ::node	0.1.0	have-degree-91	
# ::node	0.1.0.0	fast-02	6-7
# ::node	0.1.0.1	burn-01	9-10
# ::node	0.1.0.1.0	and	11-12
# ::node	0.1.0.1.0.0	calorie	10-11
# ::node	0.1.0.1.0.1	fat	12-13
# ::root	0	correlate-91
# ::edge	and	op1	calorie	0.1.0.1.0	0.1.0.1.0.0
# ::edge	and	op2	fat	0.1.0.1.0	0.1.0.1.0.1
# ::edge	burn-01	ARG0	you	0.1.0.1	0.0.0.0.0
# ::edge	burn-01	ARG1	and	0.1.0.1	0.1.0.1.0
# ::edge	correlate-91	ARG1	more	0	0.0
# ::edge	correlate-91	ARG2	more	0	0.1
# ::edge	dry-02	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	have-degree-91	ARG1	burn-01	0.1.0	0.1.0.1
# ::edge	have-degree-91	ARG1	fast-02	0.1.0	0.1.0.0
# ::edge	have-quant-91	ARG1	dry-02	0.0.0	0.0.0.0
# ::edge	more	ARG3-of	have-degree-91	0.1	0.1.0
# ::edge	more	ARG3-of	have-quant-91	0.0	0.0.0
(MRPNode-0 / correlate-91 :ARG1 (MRPNode-1 / more :ARG3-of (MRPNode-2 / have-quant-91 :ARG1 (MRPNode-3 / dry-02 :ARG0 (MRPNode-4 / you)))) :ARG2 (MRPNode-5 / more :ARG3-of (MRPNode-6 / have-degree-91 :ARG1 (MRPNode-7 / fast-02) :ARG1 (MRPNode-8 / burn-01 :ARG0 MRPNode-4 :ARG1 (MRPNode-9 / and :op1 (MRPNode-10 / calorie) :op2 (MRPNode-11 / fat))))))

# ::id 831
# ::snt I would look at this way:
# ::tok I would look at this way :
# ::alignments 0-1|0.1 2-3|0 4-5|0.0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:44.719362 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	look-01	2-3
# ::node	0.0	this	4-5
# ::node	0.1	i	0-1
# ::node	0.2	way	5-6
# ::root	0	look-01
# ::edge	look-01	ARG0	i	0	0.1
# ::edge	look-01	ARG1	this	0	0.0
# ::edge	look-01	manner	way	0	0.2
(MRPNode-0 / look-01 :ARG1 (MRPNode-1 / this) :ARG0 (MRPNode-2 / i) :manner (MRPNode-3 / way))

# ::id 832
# ::snt It is up to you whether you want to do that.
# ::tok It is up to you whether you want to do that .
# ::alignments 4-5|0.0.0.0 7-8|0.0.0 9-10|0.0.0.0.0 10-11|0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:44.733382 ::parser eager_oracle ::smatch 0.6956521739130435 ::n_actions 28
# ::node	0	depend-01	
# ::node	0.0	truth-value	
# ::node	0.0.0	want-01	7-8
# ::node	0.0.0.0	you	4-5
# ::node	0.0.0.0.0	do-02	9-10
# ::node	0.0.0.0.0.0	that	10-11
# ::root	0	depend-01
# ::edge	depend-01	ARG1	truth-value	0	0.0
# ::edge	depend-01	ARG1	you	0	0.0.0.0
# ::edge	do-02	ARG1	that	0.0.0.0.0	0.0.0.0.0.0
# ::edge	truth-value	polarity-of	want-01	0.0	0.0.0
# ::edge	want-01	ARG0	you	0.0.0	0.0.0.0
# ::edge	want-01	ARG1	do-02	0.0.0	0.0.0.0.0
# ::edge	you	ARG0-of	do-02	0.0.0.0	0.0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / truth-value :polarity-of (MRPNode-2 / want-01 :ARG0 (MRPNode-3 / you :ARG0-of (MRPNode-4 / do-02 :ARG1 (MRPNode-5 / that))) :ARG1 MRPNode-4)) :ARG1 MRPNode-3)

# ::id 833
# ::snt It is difficult, if not impossible, to give a complete answer to this question.
# ::tok It is difficult , if not impossible , to give a complete answer to this question .
# ::alignments 2-3|0 5-6|0.0.0 6-7|0.0 9-10|0.1 11-12|0.1.0.1 12-13|0.1.0.0 14-15|0.1.0.0.0 15-16|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:44.760738 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	difficult	2-3
# ::node	0.0	possible-01	6-7
# ::node	0.0.0	-	5-6
# ::node	0.1	give-01	9-10
# ::node	0.1.0	answer-01	15-16
# ::node	0.1.0.0	question-01	12-13
# ::node	0.1.0.0.0	this	14-15
# ::node	0.1.0.1	complete-02	11-12
# ::root	0	difficult
# ::edge	answer-01	ARG1	question-01	0.1.0	0.1.0.0
# ::edge	answer-01	ARG1-of	complete-02	0.1.0	0.1.0.1
# ::edge	difficult	domain	give-01	0	0.1
# ::edge	difficult	domain	possible-01	0	0.0
# ::edge	give-01	ARG1	answer-01	0.1	0.1.0
# ::edge	possible-01	polarity	-	0.0	0.0.0
# ::edge	question-01	mod	this	0.1.0.0	0.1.0.0.0
(MRPNode-0 / difficult :domain (MRPNode-1 / possible-01 :polarity -) :domain (MRPNode-2 / give-01 :ARG1 (MRPNode-3 / answer-01 :ARG1 (MRPNode-4 / question-01 :mod (MRPNode-5 / this)) :ARG1-of (MRPNode-6 / complete-02))))

# ::id 834
# ::snt This gives you the opportunity to make your case that you really do have expertise in XXX.
# ::tok This gives you the opportunity to make your case that you really do have expertise in XXX .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.0.1 4-5|0.0 8-9|0.0.0 11-12|0.0.0.0.0 13-14|0.0.0.0 14-15|0.0.0.0.1 16-17|0.0.0.0.1.0+0.0.0.0.1.0.0+0.0.0.0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:44.809422 ::parser eager_oracle ::smatch 1.0 ::n_actions 51
# ::node	0	give-01	1-2
# ::node	0.0	opportunity	4-5
# ::node	0.0.0	case-03	8-9
# ::node	0.0.0.0	have-03	13-14
# ::node	0.0.0.0.0	real-04	11-12
# ::node	0.0.0.0.1	expert-01	14-15
# ::node	0.0.0.0.1.0	person	16-17
# ::node	0.0.0.0.1.0.0	name	16-17
# ::node	0.0.0.0.1.0.0.0	xxx	16-17
# ::node	0.0.0.1	you	2-3
# ::node	0.1	this	0-1
# ::root	0	give-01
# ::edge	case-03	ARG0	you	0.0.0	0.0.0.1
# ::edge	case-03	ARG1	expert-01	0.0.0	0.0.0.0.1
# ::edge	case-03	ARG1-of	have-03	0.0.0	0.0.0.0
# ::edge	expert-01	ARG2	person	0.0.0.0.1	0.0.0.0.1.0
# ::edge	give-01	ARG0	this	0	0.1
# ::edge	give-01	ARG1	opportunity	0	0.0
# ::edge	give-01	ARG2	you	0	0.0.0.1
# ::edge	have-03	ARG1	expert-01	0.0.0.0	0.0.0.0.1
# ::edge	have-03	ARG1-of	real-04	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	xxx	0.0.0.0.1.0.0	0.0.0.0.1.0.0.0
# ::edge	opportunity	topic	case-03	0.0	0.0.0
# ::edge	person	name	name	0.0.0.0.1.0	0.0.0.0.1.0.0
# ::edge	you	ARG1-of	expert-01	0.0.0.1	0.0.0.0.1
(MRPNode-0 / give-01 :ARG1 (MRPNode-1 / opportunity :topic (MRPNode-2 / case-03 :ARG1-of (MRPNode-3 / have-03 :ARG1-of (MRPNode-4 / real-04) :ARG1 (MRPNode-7 / expert-01 :ARG2 (MRPNode-8 / person :name (MRPNode-9 / name :op1 xxx)))) :ARG0 (MRPNode-6 / you :ARG1-of MRPNode-7) :ARG1 MRPNode-7)) :ARG0 (MRPNode-5 / this) :ARG2 MRPNode-6)

# ::id 835
# ::snt Yes, you should make a résumé.
# ::tok Yes , you should make a résumé .
# ::alignments 2-3|0.0.1 3-4|0 4-5|0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:44.813367 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	recommend-01	3-4
# ::node	0.0	make-01	4-5
# ::node	0.0.0	résumé	6-7
# ::node	0.0.1	you	2-3
# ::root	0	recommend-01
# ::edge	make-01	ARG0	you	0.0	0.0.1
# ::edge	make-01	ARG1	résumé	0.0	0.0.0
# ::edge	recommend-01	ARG1	make-01	0	0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / make-01 :ARG1 (MRPNode-2 / résumé) :ARG0 (MRPNode-3 / you)))

# ::id 836
# ::snt I think that's a great plan.
# ::tok I think that 's a great plan .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.0 5-6|0.0.1 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:44.818289 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	think-01	1-2
# ::node	0.0	plan-01	6-7
# ::node	0.0.0	that	2-3
# ::node	0.0.1	great	5-6
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	plan-01	ARG1	that	0.0	0.0.0
# ::edge	plan-01	mod	great	0.0	0.0.1
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	plan-01	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / plan-01 :ARG1 (MRPNode-2 / that) :mod (MRPNode-3 / great)) :ARG0 (MRPNode-4 / i))

# ::id 837
# ::snt I'm going to be very direct here.
# ::tok I 'm going to be very direct here .
# ::alignments 0-1|0.0 5-6|0.2 6-7|0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:44.820827 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	direct-01	6-7
# ::node	0.0	i	0-1
# ::node	0.1	here	7-8
# ::node	0.2	very	5-6
# ::root	0	direct-01
# ::edge	direct-01	ARG1	i	0	0.0
# ::edge	direct-01	degree	very	0	0.2
# ::edge	direct-01	location	here	0	0.1
(MRPNode-0 / direct-01 :ARG1 (MRPNode-1 / i) :location (MRPNode-2 / here) :degree (MRPNode-3 / very))

# ::id 838
# ::snt You do not need a transit visa, but to enter Zurich you will need a visa.
# ::tok You do not need a transit visa , but to enter Zurich you will need a visa .
# ::alignments 0-1|0.0.2 2-3|0.0.0 3-4|0.1 5-6|0.0.1.0 6-7|0.1.0 8-9|0 10-11|0.1.1 11-12|0.1.1.0+0.1.1.0.0+0.1.1.0.0.0 14-15|0.0 16-17|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:45.002845 ::parser eager_oracle ::smatch 1.0 ::n_actions 64
# ::node	0	contrast-01	8-9
# ::node	0.0	need-01	14-15
# ::node	0.0.0	-	2-3
# ::node	0.0.1	visa	16-17
# ::node	0.0.1.0	transit	5-6
# ::node	0.0.2	you	0-1
# ::node	0.1	need-01	3-4
# ::node	0.1.0	visa	6-7
# ::node	0.1.1	enter-01	10-11
# ::node	0.1.1.0	city	11-12
# ::node	0.1.1.0.0	name	11-12
# ::node	0.1.1.0.0.0	zurich	11-12
# ::root	0	contrast-01
# ::edge	city	name	name	0.1.1.0	0.1.1.0.0
# ::edge	contrast-01	ARG1	need-01	0	0.0
# ::edge	contrast-01	ARG2	need-01	0	0.1
# ::edge	enter-01	ARG0	you	0.1.1	0.0.2
# ::edge	enter-01	ARG1	city	0.1.1	0.1.1.0
# ::edge	name	op1	zurich	0.1.1.0.0	0.1.1.0.0.0
# ::edge	need-01	ARG0	you	0.0	0.0.2
# ::edge	need-01	ARG0	you	0.1	0.0.2
# ::edge	need-01	ARG1	visa	0.0	0.0.1
# ::edge	need-01	ARG1	visa	0.1	0.1.0
# ::edge	need-01	polarity	-	0.0	0.0.0
# ::edge	need-01	purpose	enter-01	0.1	0.1.1
# ::edge	visa	ARG0	you	0.1.0	0.0.2
# ::edge	visa	mod	transit	0.0.1	0.0.1.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / need-01 :polarity - :ARG1 (MRPNode-2 / visa :mod (MRPNode-3 / transit)) :ARG0 (MRPNode-4 / you)) :ARG2 (MRPNode-5 / need-01 :ARG0 MRPNode-4 :ARG1 (MRPNode-6 / visa :ARG0 MRPNode-4) :purpose (MRPNode-7 / enter-01 :ARG0 MRPNode-4 :ARG1 (MRPNode-8 / city :name (MRPNode-9 / name :op1 zurich)))))

# ::id 839
# ::snt You don't have to know.
# ::tok You do n't have to know .
# ::alignments 0-1|0.1 2-3|0.0 3-4|0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:45.006169 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	obligate-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	you	0-1
# ::node	0.2	know-01	5-6
# ::root	0	obligate-01
# ::edge	know-01	ARG0	you	0.2	0.1
# ::edge	obligate-01	ARG1	you	0	0.1
# ::edge	obligate-01	ARG2	know-01	0	0.2
# ::edge	obligate-01	polarity	-	0	0.0
(MRPNode-0 / obligate-01 :polarity - :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / know-01 :ARG0 MRPNode-1))

# ::id 840
# ::snt Nope that will not work.
# ::tok Nope that will not work .
# ::alignments 1-2|0.1 3-4|0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-12 14:31:45.007605 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	work-09	4-5
# ::node	0.0	-	3-4
# ::node	0.1	that	1-2
# ::root	0	work-09
# ::edge	work-09	ARG1	that	0	0.1
# ::edge	work-09	polarity	-	0	0.0
(MRPNode-0 / work-09 :polarity - :ARG1 (MRPNode-1 / that))

# ::id 841
# ::snt The best thing you can do is find something else interesting to do while you wait on hold.
# ::tok The best thing you can do is find something else interesting to do while you wait on hold .
# ::alignments 1-2|0.1 2-3|0 3-4|0.2.0 4-5|0.2.1 5-6|0.2 8-9|0.2.2 9-10|0.2.2.0 10-11|0.2.2.1 15-16|0.2.3 17-18|0.2.3.0 ::annotator aligner3.py ::date 2021-03-12 14:31:46.635536 ::parser eager_oracle ::smatch 0.9130434782608696 ::n_actions 53
# ::node	0	thing	2-3
# ::node	0.0	have-degree-91	
# ::node	0.0.0	most	
# ::node	0.1	good-02	1-2
# ::node	0.2	do-02	5-6
# ::node	0.2.0	you	3-4
# ::node	0.2.1	possible-01	4-5
# ::node	0.2.2	something	8-9
# ::node	0.2.2.0	else	9-10
# ::node	0.2.2.1	interest-01	10-11
# ::node	0.2.3	wait-01	15-16
# ::node	0.2.3.0	hold	17-18
# ::root	0	thing
# ::edge	do-02	ARG0	you	0.2	0.2.0
# ::edge	do-02	ARG1-of	possible-01	0.2	0.2.1
# ::edge	do-02	ARG2	something	0.2	0.2.2
# ::edge	do-02	time	wait-01	0.2	0.2.3
# ::edge	have-degree-91	ARG3	most	0.0	0.0.0
# ::edge	something	ARG2-of	interest-01	0.2.2	0.2.2.1
# ::edge	something	mod	else	0.2.2	0.2.2.0
# ::edge	thing	ARG1-of	good-02	0	0.1
# ::edge	thing	ARG1-of	have-degree-91	0	0.0
# ::edge	thing	domain	do-02	0	0.2
# ::edge	wait-01	ARG1	you	0.2.3	0.2.0
# ::edge	wait-01	ARG2	hold	0.2.3	0.2.3.0
(MRPNode-0 / thing :ARG1-of (MRPNode-1 / have-degree-91 :ARG3 (MRPNode-2 / most)) :ARG1-of (MRPNode-3 / good-02) :domain (MRPNode-4 / do-02 :ARG0 (MRPNode-5 / you) :ARG1-of (MRPNode-6 / possible-01) :ARG2 (MRPNode-7 / something :mod (MRPNode-8 / else) :ARG2-of (MRPNode-9 / interest-01)) :time (MRPNode-10 / wait-01 :ARG1 MRPNode-5 :ARG2 (MRPNode-11 / hold))))

# ::id 842
# ::snt Personally when I was in a similar situation I sent the couple a card and a gift.
# ::tok Personally when I was in a similar situation I sent the couple a card and a gift .
# ::alignments 0-1|0.2 2-3|0.1 4-5|0.4 6-7|0.4.0.0 7-8|0.4.0 9-10|0 11-12|0.3 13-14|0.0.0 14-15|0.0 16-17|0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:46.646818 ::parser eager_oracle ::smatch 1.0 ::n_actions 51
# ::node	0	send-01	9-10
# ::node	0.0	and	14-15
# ::node	0.0.0	card	13-14
# ::node	0.0.1	gift	16-17
# ::node	0.1	i	2-3
# ::node	0.2	personal-02	0-1
# ::node	0.3	couple	11-12
# ::node	0.4	be-located-at-91	4-5
# ::node	0.4.0	situation	7-8
# ::node	0.4.0.0	resemble-01	6-7
# ::root	0	send-01
# ::edge	and	op1	card	0.0	0.0.0
# ::edge	and	op2	gift	0.0	0.0.1
# ::edge	be-located-at-91	ARG1	i	0.4	0.1
# ::edge	be-located-at-91	ARG2	situation	0.4	0.4.0
# ::edge	send-01	ARG0	i	0	0.1
# ::edge	send-01	ARG1	and	0	0.0
# ::edge	send-01	ARG1-of	personal-02	0	0.2
# ::edge	send-01	ARG2	couple	0	0.3
# ::edge	send-01	time	be-located-at-91	0	0.4
# ::edge	situation	ARG1-of	resemble-01	0.4.0	0.4.0.0
(MRPNode-0 / send-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / card) :op2 (MRPNode-3 / gift)) :ARG0 (MRPNode-4 / i) :ARG1-of (MRPNode-5 / personal-02) :ARG2 (MRPNode-6 / couple) :time (MRPNode-7 / be-located-at-91 :ARG1 MRPNode-4 :ARG2 (MRPNode-8 / situation :ARG1-of (MRPNode-9 / resemble-01))))

# ::id 843
# ::snt You could probably get a tour agency to do it for you but it would cost you.
# ::tok You could probably get a tour agency to do it for you but it would cost you .
# ::alignments 1-2|0.1 2-3|0.1.0.1 3-4|0.1.0 5-6|0.1.0.0.0 6-7|0.1.0.0 8-9|0.0.1.0 11-12|0.0.1 12-13|0 13-14|0.0.0 15-16|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:47.333320 ::parser eager_oracle ::smatch 1.0 ::n_actions 54
# ::node	0	contrast-01	12-13
# ::node	0.0	cost-01	15-16
# ::node	0.0.0	it	13-14
# ::node	0.0.1	you	11-12
# ::node	0.0.1.0	do-02	8-9
# ::node	0.1	possible-01	1-2
# ::node	0.1.0	get-01	3-4
# ::node	0.1.0.0	agency	6-7
# ::node	0.1.0.0.0	tour	5-6
# ::node	0.1.0.1	probable	2-3
# ::root	0	contrast-01
# ::edge	agency	mod	tour	0.1.0.0	0.1.0.0.0
# ::edge	contrast-01	ARG1	cost-01	0	0.0
# ::edge	contrast-01	ARG1	possible-01	0	0.1
# ::edge	cost-01	ARG1	it	0.0	0.0.0
# ::edge	cost-01	ARG3	you	0.0	0.0.1
# ::edge	get-01	ARG0	you	0.1.0	0.0.1
# ::edge	get-01	ARG1	do-02	0.1.0	0.0.1.0
# ::edge	get-01	mod	agency	0.1.0	0.1.0.0
# ::edge	get-01	mod	probable	0.1.0	0.1.0.1
# ::edge	possible-01	ARG1	get-01	0.1	0.1.0
# ::edge	you	beneficiary-of	do-02	0.0.1	0.0.1.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / cost-01 :ARG1 (MRPNode-2 / it) :ARG3 (MRPNode-3 / you :beneficiary-of (MRPNode-4 / do-02))) :ARG1 (MRPNode-5 / possible-01 :ARG1 (MRPNode-6 / get-01 :ARG0 MRPNode-3 :ARG1 MRPNode-4 :mod (MRPNode-7 / agency :mod (MRPNode-8 / tour)) :mod (MRPNode-9 / probable))))

# ::id 844
# ::snt It is important to keep the story in the scope of your limit.
# ::tok It is important to keep the story in the scope of your limit .
# ::alignments 2-3|0 4-5|0.0 6-7|0.0.0 9-10|0.0.1 11-12|0.0.1.0.0 12-13|0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:47.338267 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	important-01	2-3
# ::node	0.0	keep-02	4-5
# ::node	0.0.0	story	6-7
# ::node	0.0.1	scope	9-10
# ::node	0.0.1.0	limit	12-13
# ::node	0.0.1.0.0	you	11-12
# ::root	0	important-01
# ::edge	important-01	ARG1	keep-02	0	0.0
# ::edge	keep-02	ARG1	story	0.0	0.0.0
# ::edge	keep-02	location	scope	0.0	0.0.1
# ::edge	limit	poss	you	0.0.1.0	0.0.1.0.0
# ::edge	scope	poss	limit	0.0.1	0.0.1.0
(MRPNode-0 / important-01 :ARG1 (MRPNode-1 / keep-02 :ARG1 (MRPNode-2 / story) :location (MRPNode-3 / scope :poss (MRPNode-4 / limit :poss (MRPNode-5 / you)))))

# ::id 845
# ::snt If the conversation is not about work, you know what the answer is to your own question.
# ::tok If the conversation is not about work , you know what the answer is to your own question .
# ::alignments 2-3|0.2.2 4-5|0.2.0 6-7|0.2.1 8-9|0.1 9-10|0 12-13|0.0+0.0.0 17-18|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:47.376638 ::parser eager_oracle ::smatch 0.7586206896551725 ::n_actions 45
# ::node	0	know-01	9-10
# ::node	0.0	thing	12-13
# ::node	0.0.0	answer-01	12-13
# ::node	0.0.0.0	question-01	17-18
# ::node	0.1	you	8-9
# ::node	0.2	concern-02	
# ::node	0.2.0	-	4-5
# ::node	0.2.1	work-01	6-7
# ::node	0.2.2	converse-01	2-3
# ::root	0	know-01
# ::edge	answer-01	ARG1	question-01	0.0.0	0.0.0.0
# ::edge	concern-02	ARG0	converse-01	0.2	0.2.2
# ::edge	concern-02	ARG1	work-01	0.2	0.2.1
# ::edge	concern-02	polarity	-	0.2	0.2.0
# ::edge	know-01	ARG0	you	0	0.1
# ::edge	know-01	ARG1	thing	0	0.0
# ::edge	know-01	condition	concern-02	0	0.2
# ::edge	thing	ARG2-of	answer-01	0.0	0.0.0
# ::edge	you	ARG0-of	question-01	0.1	0.0.0.0
(MRPNode-0 / know-01 :ARG1 (MRPNode-1 / thing :ARG2-of (MRPNode-2 / answer-01 :ARG1 (MRPNode-4 / question-01))) :ARG0 (MRPNode-3 / you :ARG0-of MRPNode-4) :condition (MRPNode-5 / concern-02 :polarity - :ARG1 (MRPNode-6 / work-01) :ARG0 (MRPNode-7 / converse-01)))

# ::id 846
# ::snt I would recommend looking at The Motley Fool.
# ::tok I would recommend looking at The Motley Fool .
# ::alignments 0-1|0.1 2-3|0 3-4|0.0 5-8|0.0.0+0.0.0.0+0.0.0.0.0+0.0.0.0.1+0.0.0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:47.380734 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	recommend-01	2-3
# ::node	0.0	look-01	3-4
# ::node	0.0.0	broadcast-program	5-8
# ::node	0.0.0.0	name	5-8
# ::node	0.0.0.0.0	the	5-8
# ::node	0.0.0.0.1	motley	5-8
# ::node	0.0.0.0.2	fool	5-8
# ::node	0.1	i	0-1
# ::root	0	recommend-01
# ::edge	broadcast-program	name	name	0.0.0	0.0.0.0
# ::edge	look-01	ARG1	broadcast-program	0.0	0.0.0
# ::edge	name	op1	the	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	motley	0.0.0.0	0.0.0.0.1
# ::edge	name	op3	fool	0.0.0.0	0.0.0.0.2
# ::edge	recommend-01	ARG0	i	0	0.1
# ::edge	recommend-01	ARG1	look-01	0	0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / look-01 :ARG1 (MRPNode-2 / broadcast-program :name (MRPNode-3 / name :op1 the :op2 motley :op3 fool))) :ARG0 (MRPNode-4 / i))

# ::id 847
# ::snt You can do it, too.
# ::tok You can do it , too .
# ::alignments 0-1|0.0.1 1-2|0 2-3|0.0 3-4|0.0.0 5-6|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:47.383367 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	possible-01	1-2
# ::node	0.0	do-02	2-3
# ::node	0.0.0	it	3-4
# ::node	0.0.1	you	0-1
# ::node	0.0.2	too	5-6
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	it	0.0	0.0.0
# ::edge	do-02	mod	too	0.0	0.0.2
# ::edge	possible-01	ARG1	do-02	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / you) :mod (MRPNode-4 / too)))

# ::id 848
# ::snt You will have to start with the clinic., and maybe move on to the insurance company.
# ::tok You will have to start with the clinic . , and maybe move on to the insurance company .
# ::alignments 0-1|0.0.0.1 2-3|0 4-5|0.0.0 7-8|0.0.0.0 10-11|0.0 12-13|0.0.0.1.0 16-17|0.0.0.1.0.0.0 17-18|0.0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:47.396265 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 48
# ::node	0	obligate-01	2-3
# ::node	0.0	and	10-11
# ::node	0.0.0	start-01	4-5
# ::node	0.0.0.0	clinic	7-8
# ::node	0.0.0.1	you	0-1
# ::node	0.0.0.1.0	move-01	12-13
# ::node	0.0.0.1.0.0	company	17-18
# ::node	0.0.0.1.0.0.0	insure-02	16-17
# ::node	0.0.1	possible-01	
# ::root	0	obligate-01
# ::edge	and	op1	start-01	0.0	0.0.0
# ::edge	and	op2	possible-01	0.0	0.0.1
# ::edge	company	ARG0-of	insure-02	0.0.0.1.0.0	0.0.0.1.0.0.0
# ::edge	move-01	ARG2	company	0.0.0.1.0	0.0.0.1.0.0
# ::edge	obligate-01	ARG1	you	0	0.0.0.1
# ::edge	obligate-01	ARG2	and	0	0.0
# ::edge	possible-01	ARG0	you	0.0.1	0.0.0.1
# ::edge	possible-01	ARG1	move-01	0.0.1	0.0.0.1.0
# ::edge	start-01	ARG0	you	0.0.0	0.0.0.1
# ::edge	start-01	ARG2	clinic	0.0.0	0.0.0.0
# ::edge	you	ARG0-of	move-01	0.0.0.1	0.0.0.1.0
(MRPNode-0 / obligate-01 :ARG2 (MRPNode-1 / and :op1 (MRPNode-2 / start-01 :ARG2 (MRPNode-3 / clinic) :ARG0 (MRPNode-5 / you :ARG0-of (MRPNode-6 / move-01 :ARG2 (MRPNode-7 / company :ARG0-of (MRPNode-8 / insure-02))))) :op2 (MRPNode-4 / possible-01 :ARG0 MRPNode-5 :ARG1 MRPNode-6)) :ARG1 MRPNode-5)

# ::id 849
# ::snt The key thing you need to do in this meeting is listen.
# ::tok The key thing you need to do in this meeting is listen .
# ::alignments 1-2|0.0 2-3|0 3-4|0.1.0 4-5|0.1.1 8-9|0.1.1.0.0 9-10|0.1.1.0 11-12|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:47.406692 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	thing	2-3
# ::node	0.0	key-02	1-2
# ::node	0.1	listen-01	11-12
# ::node	0.1.0	you	3-4
# ::node	0.1.1	need-01	4-5
# ::node	0.1.1.0	meet-03	9-10
# ::node	0.1.1.0.0	this	8-9
# ::root	0	thing
# ::edge	listen-01	ARG0	you	0.1	0.1.0
# ::edge	listen-01	ARG1-of	need-01	0.1	0.1.1
# ::edge	meet-03	mod	this	0.1.1.0	0.1.1.0.0
# ::edge	need-01	ARG0	you	0.1.1	0.1.0
# ::edge	need-01	location	meet-03	0.1.1	0.1.1.0
# ::edge	thing	ARG1-of	key-02	0	0.0
# ::edge	thing	ARG1-of	listen-01	0	0.1
(MRPNode-0 / thing :ARG1-of (MRPNode-1 / key-02) :ARG1-of (MRPNode-2 / listen-01 :ARG0 (MRPNode-3 / you) :ARG1-of (MRPNode-4 / need-01 :ARG0 MRPNode-3 :location (MRPNode-5 / meet-03 :mod (MRPNode-6 / this)))))

# ::id 850
# ::snt "My answer to your question is ""Probably Not""."
# ::tok " My answer to your question is " " Probably Not " " . "
# ::alignments 1-2|0.1 2-3|0.0 4-5|0.0.0 5-6|0 9-10|0.2.1 10-11|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:47.413569 ::parser eager_oracle ::smatch 0.761904761904762 ::n_actions 33
# ::node	0	answer-01	5-6
# ::node	0.0	question-01	2-3
# ::node	0.0.0	you	4-5
# ::node	0.1	i	1-2
# ::node	0.2	have-polarity-91	
# ::node	0.2.0	-	10-11
# ::node	0.2.1	probable	9-10
# ::root	0	answer-01
# ::edge	answer-01	ARG0	i	0	0.1
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	answer-01	ARG2	have-polarity-91	0	0.2
# ::edge	have-polarity-91	arg2	-	0.2	0.2.0
# ::edge	have-polarity-91	mod	probable	0.2	0.2.1
# ::edge	question-01	ARG0	you	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG0 (MRPNode-3 / i) :ARG2 (MRPNode-4 / have-polarity-91 :arg2 - :mod (MRPNode-5 / probable)))

# ::id 851
# ::snt It depends on what you want to do next, and where you want to do it.
# ::tok It depends on what you want to do next , and where you want to do it .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0.0.0 5-6|0.0.1.0 7-8|0.0.0+0.0.0.0 8-9|0.0.0.0.1 10-11|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:47.607808 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 47
# ::node	0	depend-01	1-2
# ::node	0.0	and	10-11
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	do-02	7-8
# ::node	0.0.0.0.0	you	4-5
# ::node	0.0.0.0.1	next	8-9
# ::node	0.0.1	location	
# ::node	0.0.1.0	want-01	5-6
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	and	op1	thing	0.0	0.0.0
# ::edge	and	op2	location	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	do-02	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	do-02	time	next	0.0.0.0	0.0.0.0.1
# ::edge	location	location-of	want-01	0.0.1	0.0.1.0
# ::edge	thing	ARG1-of	do-02	0.0.0	0.0.0.0
# ::edge	want-01	ARG0	you	0.0.1.0	0.0.0.0.0
# ::edge	want-01	ARG1	do-02	0.0.1.0	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / do-02 :ARG0 (MRPNode-4 / you) :time (MRPNode-5 / next))) :op2 (MRPNode-6 / location :location-of (MRPNode-7 / want-01 :ARG1 MRPNode-3 :ARG0 MRPNode-4))) :ARG0 (MRPNode-8 / it))

# ::id 852
# ::snt Yes, that is exactly what it means.
# ::tok Yes , that is exactly what it means .
# ::alignments 2-3|0.0 4-5|0.1 7-8|0 ::annotator aligner3.py ::date 2021-03-12 14:31:47.610479 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	mean-01	7-8
# ::node	0.0	that	2-3
# ::node	0.1	exact	4-5
# ::root	0	mean-01
# ::edge	mean-01	ARG1	that	0	0.0
# ::edge	mean-01	mod	exact	0	0.1
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / that) :mod (MRPNode-2 / exact))

# ::id 853
# ::snt One idea is cleaning the coffee residue from the coffee pot.
# ::tok One idea is cleaning the coffee residue from the coffee pot .
# ::alignments 0-1|0.1.0 1-2|0.1 3-4|0 5-6|0.0.0 6-7|0.0 9-10|0.2.0 10-11|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:47.622208 ::parser eager_oracle ::smatch 1.0 ::n_actions 35
# ::node	0	clean-01	3-4
# ::node	0.0	residue	6-7
# ::node	0.0.0	coffee	5-6
# ::node	0.1	idea	1-2
# ::node	0.1.0	1	0-1
# ::node	0.2	pot	10-11
# ::node	0.2.0	coffee	9-10
# ::root	0	clean-01
# ::edge	clean-01	ARG0	idea	0	0.1
# ::edge	clean-01	ARG1	residue	0	0.0
# ::edge	clean-01	ARG2	pot	0	0.2
# ::edge	idea	quant	1	0.1	0.1.0
# ::edge	pot	mod	coffee	0.2	0.2.0
# ::edge	residue	mod	coffee	0.0	0.0.0
(MRPNode-0 / clean-01 :ARG1 (MRPNode-1 / residue :mod (MRPNode-2 / coffee)) :ARG0 (MRPNode-3 / idea :quant 1) :ARG2 (MRPNode-4 / pot :mod (MRPNode-5 / coffee)))

# ::id 854
# ::snt They can, but the way to do it depends on what you have available.
# ::tok They can , but the way to do it depends on what you have available .
# ::alignments 0-1|0.1.0.1 1-2|0.1 3-4|0 5-6|0.0.1 7-8|0.1.0 8-9|0.1.0.0 9-10|0.0 12-13|0.0.0.0.0.0 13-14|0.0.0.0.0 14-15|0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:48.000819 ::parser eager_oracle ::smatch 1.0 ::n_actions 55
# ::node	0	contrast-01	3-4
# ::node	0.0	depend-01	9-10
# ::node	0.0.0	thing	14-15
# ::node	0.0.0.0	available-02	14-15
# ::node	0.0.0.0.0	have-03	13-14
# ::node	0.0.0.0.0.0	you	12-13
# ::node	0.0.1	way	5-6
# ::node	0.1	possible-01	1-2
# ::node	0.1.0	do-02	7-8
# ::node	0.1.0.0	it	8-9
# ::node	0.1.0.1	they	0-1
# ::root	0	contrast-01
# ::edge	available-02	ARG1	have-03	0.0.0.0	0.0.0.0.0
# ::edge	contrast-01	ARG1	depend-01	0	0.0
# ::edge	contrast-01	ARG1	possible-01	0	0.1
# ::edge	depend-01	ARG0	way	0.0	0.0.1
# ::edge	depend-01	ARG1	thing	0.0	0.0.0
# ::edge	do-02	ARG0	they	0.1.0	0.1.0.1
# ::edge	do-02	ARG1	it	0.1.0	0.1.0.0
# ::edge	have-03	ARG0	you	0.0.0.0.0	0.0.0.0.0.0
# ::edge	possible-01	ARG1	do-02	0.1	0.1.0
# ::edge	thing	ARG2-of	available-02	0.0.0	0.0.0.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / depend-01 :ARG1 (MRPNode-2 / thing :ARG2-of (MRPNode-3 / available-02 :ARG1 (MRPNode-4 / have-03 :ARG0 (MRPNode-5 / you)))) :ARG0 (MRPNode-6 / way)) :ARG1 (MRPNode-7 / possible-01 :ARG1 (MRPNode-8 / do-02 :ARG1 (MRPNode-9 / it) :ARG0 (MRPNode-10 / they))))

# ::id 855
# ::snt Not much you can do besides:
# ::tok Not much you can do besides :
# ::alignments 0-1|0.0.0.0 1-2|0.0.0 2-3|0.0.1 3-4|0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:48.004723 ::parser eager_oracle ::smatch 0.9 ::n_actions 25
# ::node	0	possible-01	3-4
# ::node	0.0	do-02	4-5
# ::node	0.0.0	much	1-2
# ::node	0.0.0.0	-	0-1
# ::node	0.0.1	you	2-3
# ::node	0.0.2	except-01	
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	much	0.0	0.0.0
# ::edge	do-02	ARG2-of	except-01	0.0	0.0.2
# ::edge	much	polarity	-	0.0.0	0.0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / much :polarity -) :ARG0 (MRPNode-3 / you) :ARG2-of (MRPNode-4 / except-01)))

# ::id 856
# ::snt This is a big problem.
# ::tok This is a big problem .
# ::alignments 0-1|0.1 3-4|0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-12 14:31:48.007267 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	problem	4-5
# ::node	0.0	big	3-4
# ::node	0.1	this	0-1
# ::root	0	problem
# ::edge	problem	domain	this	0	0.1
# ::edge	problem	mod	big	0	0.0
(MRPNode-0 / problem :mod (MRPNode-1 / big) :domain (MRPNode-2 / this))

# ::id 857
# ::snt This is a part answer to your question
# ::tok This is a part answer to your question
# ::alignments 0-1|0.1 3-4|0.2 4-5|0.0 6-7|0.0.0 7-8|0 ::annotator aligner3.py ::date 2021-03-12 14:31:48.015500 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	answer-01	7-8
# ::node	0.0	question-01	4-5
# ::node	0.0.0	you	6-7
# ::node	0.1	this	0-1
# ::node	0.2	part	3-4
# ::root	0	answer-01
# ::edge	answer-01	ARG0	this	0	0.1
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	answer-01	degree	part	0	0.2
# ::edge	question-01	ARG0	you	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG0 (MRPNode-3 / this) :degree (MRPNode-4 / part))

# ::id 858
# ::snt You are not required to file a tax return in Canada if you have no taxable income.
# ::tok You are not required to file a tax return in Canada if you have no taxable income .
# ::alignments 0-1|0.1.2 2-3|0.2.0 3-4|0 5-6|0.1 7-8|0.2.1.0 8-9|0.1.0 10-11|0.1.1+0.1.1.0+0.1.1.0.0 13-14|0.2 14-15|0.0 16-17|0.2.1 ::annotator aligner3.py ::date 2021-03-12 14:31:48.362314 ::parser eager_oracle ::smatch 0.9583333333333334 ::n_actions 61
# ::node	0	require-01	3-4
# ::node	0.0	-	14-15
# ::node	0.1	file-01	5-6
# ::node	0.1.0	return-02	8-9
# ::node	0.1.0.0	tax-01	
# ::node	0.1.1	country	10-11
# ::node	0.1.1.0	name	10-11
# ::node	0.1.1.0.0	canada	10-11
# ::node	0.1.2	you	0-1
# ::node	0.2	have-03	13-14
# ::node	0.2.0	-	2-3
# ::node	0.2.1	income	16-17
# ::node	0.2.1.0	tax-01	7-8
# ::root	0	require-01
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	file-01	ARG0	you	0.1	0.1.2
# ::edge	file-01	ARG1	return-02	0.1	0.1.0
# ::edge	file-01	ARG4	country	0.1	0.1.1
# ::edge	have-03	ARG0	you	0.2	0.1.2
# ::edge	have-03	ARG1	income	0.2	0.2.1
# ::edge	have-03	polarity	-	0.2	0.2.0
# ::edge	income	ARG1-of	tax-01	0.2.1	0.2.1.0
# ::edge	name	op1	canada	0.1.1.0	0.1.1.0.0
# ::edge	require-01	ARG1	file-01	0	0.1
# ::edge	require-01	ARG2	you	0	0.1.2
# ::edge	require-01	condition	have-03	0	0.2
# ::edge	require-01	polarity	-	0	0.0
# ::edge	return-02	ARG1	tax-01	0.1.0	0.1.0.0
(MRPNode-0 / require-01 :polarity - :ARG1 (MRPNode-1 / file-01 :ARG1 (MRPNode-2 / return-02 :ARG1 (MRPNode-3 / tax-01)) :ARG4 (MRPNode-4 / country :name (MRPNode-5 / name :op1 canada)) :ARG0 (MRPNode-6 / you)) :ARG2 MRPNode-6 :condition (MRPNode-7 / have-03 :polarity - :ARG0 MRPNode-6 :ARG1 (MRPNode-8 / income :ARG1-of (MRPNode-9 / tax-01))))

# ::id 859
# ::snt If what you are looking for is much higher, they get the picture.
# ::tok If what you are looking for is much higher , they get the picture .
# ::alignments 0-1|0.2.0.0 4-5|0.2.0 7-8|0.2+0.2.1.0+0.2.1.0.0 8-9|0.2.1.1 10-11|0.1 11-12|0 13-14|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:48.386141 ::parser eager_oracle ::smatch 0.8717948717948718 ::n_actions 45
# ::node	0	get-01	11-12
# ::node	0.0	picture	13-14
# ::node	0.1	they	10-11
# ::node	0.2	thing	7-8
# ::node	0.2.0	look-01	4-5
# ::node	0.2.0.0	you	0-1
# ::node	0.2.1	have-degree-91	
# ::node	0.2.1.0	more	7-8
# ::node	0.2.1.0.0	much	7-8
# ::node	0.2.1.1	high-02	8-9
# ::root	0	get-01
# ::edge	get-01	ARG0	they	0	0.1
# ::edge	get-01	ARG1	picture	0	0.0
# ::edge	get-01	condition	thing	0	0.2
# ::edge	have-degree-91	ARG2	high-02	0.2.1	0.2.1.1
# ::edge	have-degree-91	ARG3	more	0.2.1	0.2.1.0
# ::edge	look-01	ARG0	you	0.2.0	0.2.0.0
# ::edge	more	quant	much	0.2.1.0	0.2.1.0.0
# ::edge	thing	ARG1-of	have-degree-91	0.2	0.2.1
# ::edge	thing	ARG1-of	high-02	0.2	0.2.1.1
# ::edge	thing	ARG1-of	look-01	0.2	0.2.0
(MRPNode-0 / get-01 :ARG1 (MRPNode-1 / picture) :ARG0 (MRPNode-2 / they) :condition (MRPNode-3 / thing :ARG1-of (MRPNode-4 / look-01 :ARG0 (MRPNode-5 / you)) :ARG1-of (MRPNode-6 / have-degree-91 :ARG3 (MRPNode-7 / more :quant (MRPNode-8 / much)) :ARG2 (MRPNode-9 / high-02)) :ARG1-of MRPNode-9))

# ::id 860
# ::snt Yes, you can do exactly what you want to do.
# ::tok Yes , you can do exactly what you want to do .
# ::alignments 3-4|0 4-5|0.0 5-6|0.0.0+0.0.0.0 7-8|0.0.0.1.0 8-9|0.0.0.1.0.0 10-11|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:48.502949 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	possible-01	3-4
# ::node	0.0	do-02	4-5
# ::node	0.0.0	thing	5-6
# ::node	0.0.0.0	exact	5-6
# ::node	0.0.0.1	do-02	10-11
# ::node	0.0.0.1.0	you	7-8
# ::node	0.0.0.1.0.0	want-01	8-9
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.0.1.0
# ::edge	do-02	ARG0	you	0.0.0.1	0.0.0.1.0
# ::edge	do-02	ARG1	thing	0.0	0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	thing	ARG1-of	do-02	0.0.0	0.0.0.1
# ::edge	thing	ARG1-of	exact	0.0.0	0.0.0.0
# ::edge	want-01	ARG1	do-02	0.0.0.1.0.0	0.0.0.1
# ::edge	you	ARG0-of	want-01	0.0.0.1.0	0.0.0.1.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / exact) :ARG1-of (MRPNode-4 / do-02 :ARG0 (MRPNode-5 / you :ARG0-of (MRPNode-6 / want-01 :ARG1 MRPNode-4)))) :ARG0 MRPNode-5))

# ::id 861
# ::snt If not, don't do that and spend that time with something you like to do.
# ::tok If not , do n't do that and spend that time with something you like to do .
# ::alignments 1-2|0.0.1.0 3-4|0.0.0 4-5|0.1.0 5-6|0.0.0.1.0 6-7|0.0.1.1.0 7-8|0.0 8-9|0.0.1 9-10|0.0.0.2 10-11|0.0.1.1 12-13|0.0.1.2 13-14|0.0.0.1 14-15|0.0.0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:48.515813 ::parser eager_oracle ::smatch 0.7924528301886793 ::n_actions 72
# ::node	0	have-condition-91	
# ::node	0.0	and	7-8
# ::node	0.0.0	do-02	3-4
# ::node	0.0.0.0	imperative	
# ::node	0.0.0.1	you	13-14
# ::node	0.0.0.1.0	do-02	5-6
# ::node	0.0.0.1.1	like-02	14-15
# ::node	0.0.0.2	that	9-10
# ::node	0.0.1	spend-02	8-9
# ::node	0.0.1.0	-	1-2
# ::node	0.0.1.1	time	10-11
# ::node	0.0.1.1.0	that	6-7
# ::node	0.0.1.2	something	12-13
# ::node	0.1	have-polarity-91	
# ::node	0.1.0	-	4-5
# ::root	0	have-condition-91
# ::edge	and	op1	do-02	0.0	0.0.0
# ::edge	and	op2	spend-02	0.0	0.0.1
# ::edge	do-02	ARG0	you	0.0.0	0.0.0.1
# ::edge	do-02	ARG1	that	0.0.0	0.0.0.2
# ::edge	do-02	mode	imperative	0.0.0	0.0.0.0
# ::edge	have-condition-91	ARG1	and	0	0.0
# ::edge	have-condition-91	ARG2	have-polarity-91	0	0.1
# ::edge	have-polarity-91	arg2	-	0.1	0.1.0
# ::edge	like-02	ARG1	do-02	0.0.0.1.1	0.0.0.1.0
# ::edge	spend-02	ARG0	you	0.0.1	0.0.0.1
# ::edge	spend-02	ARG1	time	0.0.1	0.0.1.1
# ::edge	spend-02	ARG2	something	0.0.1	0.0.1.2
# ::edge	spend-02	arg1	-	0.0.1	0.0.1.0
# ::edge	time	mod	that	0.0.1.1	0.0.1.1.0
# ::edge	you	ARG0-of	do-02	0.0.0.1	0.0.0.1.0
# ::edge	you	ARG0-of	like-02	0.0.0.1	0.0.0.1.1
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / do-02 :mode imperative :ARG0 (MRPNode-3 / you :ARG0-of (MRPNode-4 / do-02) :ARG0-of (MRPNode-5 / like-02 :ARG1 MRPNode-4)) :ARG1 (MRPNode-6 / that)) :op2 (MRPNode-7 / spend-02 :arg1 - :ARG0 MRPNode-3 :ARG1 (MRPNode-8 / time :mod (MRPNode-9 / that)) :ARG2 (MRPNode-10 / something))) :ARG2 (MRPNode-11 / have-polarity-91 :arg2 -))

# ::id 862
# ::snt The answer to your question is not really.
# ::tok The answer to your question is not really .
# ::alignments 1-2|0.0 3-4|0.0.0 4-5|0 6-7|0.1.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:48.520333 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	answer-01	4-5
# ::node	0.0	question-01	1-2
# ::node	0.0.0	you	3-4
# ::node	0.1	real-04	7-8
# ::node	0.1.0	-	6-7
# ::root	0	answer-01
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	answer-01	ARG1-of	real-04	0	0.1
# ::edge	question-01	ARG0	you	0.0	0.0.0
# ::edge	real-04	polarity	-	0.1	0.1.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG1-of (MRPNode-3 / real-04 :polarity -))

# ::id 863
# ::snt You don't, it will not work.
# ::tok You do n't , it will not work .
# ::alignments 0-1|0.0.1 1-2|0.0 2-3|0.0.0 4-5|0.1.1 6-7|0.1.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:48.549008 ::parser eager_oracle ::smatch 0.7272727272727272 ::n_actions 28
# ::node	0	and	
# ::node	0.0	do-02	1-2
# ::node	0.0.0	-	2-3
# ::node	0.0.1	you	0-1
# ::node	0.1	work-09	7-8
# ::node	0.1.0	-	6-7
# ::node	0.1.1	it	4-5
# ::root	0	and
# ::edge	and	op1	do-02	0	0.0
# ::edge	and	op2	work-09	0	0.1
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	polarity	-	0.0	0.0.0
# ::edge	work-09	ARG1	it	0.1	0.1.1
# ::edge	work-09	polarity	-	0.1	0.1.0
(MRPNode-0 / and :op1 (MRPNode-1 / do-02 :polarity - :ARG0 (MRPNode-2 / you)) :op2 (MRPNode-3 / work-09 :polarity - :ARG1 (MRPNode-4 / it)))

# ::id 864
# ::snt It's a good idea to do both.
# ::tok It 's a good idea to do both .
# ::alignments 3-4|0.0 4-5|0 6-7|0.1 7-8|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:48.551463 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	idea	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	do-02	6-7
# ::node	0.1.0	both	7-8
# ::root	0	idea
# ::edge	do-02	ARG1	both	0.1	0.1.0
# ::edge	idea	ARG1-of	good-02	0	0.0
# ::edge	idea	domain	do-02	0	0.1
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / good-02) :domain (MRPNode-2 / do-02 :ARG1 (MRPNode-3 / both)))

# ::id 865
# ::snt There are a lot of ways that could go poorly for you.
# ::tok There are a lot of ways that could go poorly for you .
# ::alignments 3-4|0.0 5-6|0 7-8|0.1.2 8-9|0.1 9-10|0.1.1 11-12|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:48.568909 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	way	5-6
# ::node	0.0	lot	3-4
# ::node	0.1	go-06	8-9
# ::node	0.1.0	you	11-12
# ::node	0.1.1	poor	9-10
# ::node	0.1.2	possible-01	7-8
# ::root	0	way
# ::edge	go-06	ARG1-of	poor	0.1	0.1.1
# ::edge	go-06	ARG1-of	possible-01	0.1	0.1.2
# ::edge	go-06	ARG2	you	0.1	0.1.0
# ::edge	way	manner-of	go-06	0	0.1
# ::edge	way	quant	lot	0	0.0
(MRPNode-0 / way :quant (MRPNode-1 / lot) :manner-of (MRPNode-2 / go-06 :ARG2 (MRPNode-3 / you) :ARG1-of (MRPNode-4 / poor) :ARG1-of (MRPNode-5 / possible-01)))

# ::id 866
# ::snt Nepalese citizens require a visa to visit the UK.
# ::tok Nepalese citizens require a visa to visit the UK.
# ::alignments 1-2|0.1 2-3|0 4-5|0.0 6-7|0.2 8-9|0.1.0+0.1.0.0+0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:48.574370 ::parser eager_oracle ::smatch 0.7878787878787878 ::n_actions 29
# ::node	0	require-01	2-3
# ::node	0.0	visa	4-5
# ::node	0.1	citizen	1-2
# ::node	0.1.0	country	8-9
# ::node	0.1.0.0	name	8-9
# ::node	0.1.0.0.0	uk	8-9
# ::node	0.1.1	country	
# ::node	0.1.1.0	name	
# ::node	0.1.1.0.0	jesus	
# ::node	0.2	visit-01	6-7
# ::root	0	require-01
# ::edge	citizen	mod	country	0.1	0.1.0
# ::edge	citizen	mod	country	0.1	0.1.1
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	name	op1	jesus	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	uk	0.1.0.0	0.1.0.0.0
# ::edge	require-01	ARG0	citizen	0	0.1
# ::edge	require-01	ARG1	visa	0	0.0
# ::edge	require-01	purpose	visit-01	0	0.2
# ::edge	visit-01	ARG0	citizen	0.2	0.1
(MRPNode-0 / require-01 :ARG1 (MRPNode-1 / visa) :ARG0 (MRPNode-2 / citizen :mod (MRPNode-3 / country :name (MRPNode-4 / name :op1 uk)) :mod (MRPNode-5 / country :name (MRPNode-6 / name :op1 jesus))) :purpose (MRPNode-7 / visit-01 :ARG0 MRPNode-2))

# ::id 867
# ::snt It depends on how long it's been out.
# ::tok It depends on how long it 's been out .
# ::alignments 0-1|0.1 1-2|0 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:48.576929 ::parser eager_oracle ::smatch 0.6666666666666666 ::n_actions 20
# ::node	0	depend-01	1-2
# ::node	0.0	temporal-quantity	
# ::node	0.0.0	out	8-9
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	temporal-quantity	0	0.0
# ::edge	temporal-quantity	duration-of	out	0.0	0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / temporal-quantity :duration-of (MRPNode-2 / out)) :ARG0 (MRPNode-3 / it))

# ::id 868
# ::snt This is a difficult one.
# ::tok This is a difficult one .
# ::alignments 0-1|0.0 3-4|0 ::annotator aligner3.py ::date 2021-03-12 14:31:48.578224 ::parser eager_oracle ::smatch 1.0 ::n_actions 14
# ::node	0	difficult	3-4
# ::node	0.0	this	0-1
# ::root	0	difficult
# ::edge	difficult	domain	this	0	0.0
(MRPNode-0 / difficult :domain (MRPNode-1 / this))

# ::id 869
# ::snt You may want it, but the process given to you is what you have to work within.
# ::tok You may want it , but the process given to you is what you have to work within .
# ::alignments 0-1|0.0.0.1 1-2|0.0 2-3|0.0.0 3-4|0.0.0.0 5-6|0 7-8|0.1.1 8-9|0.1.1.0 14-15|0.1.0.0 16-17|0.1+0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:48.652110 ::parser eager_oracle ::smatch 1.0 ::n_actions 62
# ::node	0	contrast-01	5-6
# ::node	0.0	possible-01	1-2
# ::node	0.0.0	want-01	2-3
# ::node	0.0.0.0	it	3-4
# ::node	0.0.0.1	you	0-1
# ::node	0.1	thing	16-17
# ::node	0.1.0	work-01	16-17
# ::node	0.1.0.0	obligate-01	14-15
# ::node	0.1.1	process-02	7-8
# ::node	0.1.1.0	give-14	8-9
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	possible-01	0	0.0
# ::edge	contrast-01	ARG2	thing	0	0.1
# ::edge	give-14	ARG2	you	0.1.1.0	0.0.0.1
# ::edge	obligate-01	ARG1	you	0.1.0.0	0.0.0.1
# ::edge	possible-01	ARG1	want-01	0.0	0.0.0
# ::edge	process-02	ARG1-of	give-14	0.1.1	0.1.1.0
# ::edge	thing	ARG1-of	work-01	0.1	0.1.0
# ::edge	thing	domain	process-02	0.1	0.1.1
# ::edge	want-01	ARG0	you	0.0.0	0.0.0.1
# ::edge	want-01	ARG1	it	0.0.0	0.0.0.0
# ::edge	work-01	ARG0	you	0.1.0	0.0.0.1
# ::edge	work-01	ARG2-of	obligate-01	0.1.0	0.1.0.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / possible-01 :ARG1 (MRPNode-2 / want-01 :ARG1 (MRPNode-3 / it) :ARG0 (MRPNode-4 / you))) :ARG2 (MRPNode-5 / thing :ARG1-of (MRPNode-6 / work-01 :ARG0 MRPNode-4 :ARG2-of (MRPNode-7 / obligate-01 :ARG1 MRPNode-4)) :domain (MRPNode-8 / process-02 :ARG1-of (MRPNode-9 / give-14 :ARG2 MRPNode-4))))

# ::id 870
# ::snt It depends on what you want to say/imply.
# ::tok It depends on what you want to say / imply .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0.0.0 5-6|0.0.0.0.1 7-8|0.0.0+0.0.0.0 8-9|0.0 9-10|0.0.1+0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:48.734065 ::parser eager_oracle ::smatch 1.0 ::n_actions 46
# ::node	0	depend-01	1-2
# ::node	0.0	slash	8-9
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	say-01	7-8
# ::node	0.0.0.0.0	you	4-5
# ::node	0.0.0.0.1	want-01	5-6
# ::node	0.0.1	thing	9-10
# ::node	0.0.1.0	imply-01	9-10
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	slash	0	0.0
# ::edge	imply-01	ARG0	you	0.0.1.0	0.0.0.0.0
# ::edge	say-01	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	say-01	ARG1-of	want-01	0.0.0.0	0.0.0.0.1
# ::edge	slash	op1	thing	0.0	0.0.0
# ::edge	slash	op2	thing	0.0	0.0.1
# ::edge	thing	ARG1-of	imply-01	0.0.1	0.0.1.0
# ::edge	thing	ARG1-of	say-01	0.0.0	0.0.0.0
# ::edge	want-01	ARG0	you	0.0.0.0.1	0.0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / slash :op1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / say-01 :ARG0 (MRPNode-4 / you) :ARG1-of (MRPNode-5 / want-01 :ARG0 MRPNode-4))) :op2 (MRPNode-6 / thing :ARG1-of (MRPNode-7 / imply-01 :ARG0 MRPNode-4))) :ARG0 (MRPNode-8 / it))

# ::id 871
# ::snt You should, but you don't have to.
# ::tok You should , but you do n't have to .
# ::alignments 0-1|0.0.0 1-2|0.0 3-4|0 6-7|0.1.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:48.739281 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	contrast-01	3-4
# ::node	0.0	recommend-01	1-2
# ::node	0.0.0	you	0-1
# ::node	0.1	obligate-01	7-8
# ::node	0.1.0	-	6-7
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	recommend-01	0	0.0
# ::edge	contrast-01	ARG2	obligate-01	0	0.1
# ::edge	obligate-01	ARG1	you	0.1	0.0.0
# ::edge	obligate-01	polarity	-	0.1	0.1.0
# ::edge	recommend-01	ARG2	you	0.0	0.0.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / recommend-01 :ARG2 (MRPNode-2 / you)) :ARG2 (MRPNode-3 / obligate-01 :polarity - :ARG1 MRPNode-2))

# ::id 872
# ::snt The Joker doesn't care about money.
# ::tok The Joker does n't care about money .
# ::alignments 1-2|0.2+0.2.0+0.2.0.0 3-4|0.0 4-5|0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:48.743096 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	care-01	4-5
# ::node	0.0	-	3-4
# ::node	0.1	money	6-7
# ::node	0.2	person	1-2
# ::node	0.2.0	name	1-2
# ::node	0.2.0.0	joker	1-2
# ::root	0	care-01
# ::edge	care-01	ARG0	person	0	0.2
# ::edge	care-01	ARG1	money	0	0.1
# ::edge	care-01	polarity	-	0	0.0
# ::edge	name	op1	joker	0.2.0	0.2.0.0
# ::edge	person	name	name	0.2	0.2.0
(MRPNode-0 / care-01 :polarity - :ARG1 (MRPNode-1 / money) :ARG0 (MRPNode-2 / person :name (MRPNode-3 / name :op1 joker)))

# ::id 873
# ::snt So I don't think you need to put it on the cover.
# ::tok So I do n't think you need to put it on the cover .
# ::alignments 0-1|0 1-2|0.0.2 3-4|0.0.0 4-5|0.0 5-6|0.0.1.0.2 6-7|0.0.1 8-9|0.0.1.0 9-10|0.0.1.0.0 12-13|0.0.1.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:49.135620 ::parser eager_oracle ::smatch 1.0 ::n_actions 45
# ::node	0	cause-01	0-1
# ::node	0.0	think-01	4-5
# ::node	0.0.0	-	3-4
# ::node	0.0.1	need-01	6-7
# ::node	0.0.1.0	put-01	8-9
# ::node	0.0.1.0.0	it	9-10
# ::node	0.0.1.0.1	cover	12-13
# ::node	0.0.1.0.2	you	5-6
# ::node	0.0.2	i	1-2
# ::root	0	cause-01
# ::edge	cause-01	ARG1	think-01	0	0.0
# ::edge	need-01	ARG0	you	0.0.1	0.0.1.0.2
# ::edge	need-01	ARG1	put-01	0.0.1	0.0.1.0
# ::edge	put-01	ARG0	you	0.0.1.0	0.0.1.0.2
# ::edge	put-01	ARG1	it	0.0.1.0	0.0.1.0.0
# ::edge	put-01	ARG2	cover	0.0.1.0	0.0.1.0.1
# ::edge	think-01	ARG0	i	0.0	0.0.2
# ::edge	think-01	ARG1	need-01	0.0	0.0.1
# ::edge	think-01	polarity	-	0.0	0.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / think-01 :polarity - :ARG1 (MRPNode-2 / need-01 :ARG1 (MRPNode-3 / put-01 :ARG1 (MRPNode-4 / it) :ARG2 (MRPNode-5 / cover) :ARG0 (MRPNode-6 / you)) :ARG0 MRPNode-6) :ARG0 (MRPNode-7 / i)))

# ::id 874
# ::snt Yes, it is hard to publish in a peer reviewed journal.
# ::tok Yes , it is hard to publish in a peer reviewed journal .
# ::alignments 4-5|0 6-7|0.0 9-10|0.0.0.0.0 10-11|0.0.0.0 11-12|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:49.139528 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	hard-02	4-5
# ::node	0.0	publish-01	6-7
# ::node	0.0.0	journal	11-12
# ::node	0.0.0.0	review-01	10-11
# ::node	0.0.0.0.0	peer	9-10
# ::root	0	hard-02
# ::edge	hard-02	ARG1	publish-01	0	0.0
# ::edge	journal	ARG1-of	review-01	0.0.0	0.0.0.0
# ::edge	publish-01	location	journal	0.0	0.0.0
# ::edge	review-01	ARG0	peer	0.0.0.0	0.0.0.0.0
(MRPNode-0 / hard-02 :ARG1 (MRPNode-1 / publish-01 :location (MRPNode-2 / journal :ARG1-of (MRPNode-3 / review-01 :ARG0 (MRPNode-4 / peer)))))

# ::id 875
# ::snt So if that's what you need, you really do have to be explicit about it.
# ::tok So if that 's what you need , you really do have to be explicit about it .
# ::alignments 2-3|0.3.0 5-6|0.0 6-7|0.3 9-10|0.1 11-12|0 14-15|0.2 16-17|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:49.159785 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	obligate-01	11-12
# ::node	0.0	you	5-6
# ::node	0.1	real-04	9-10
# ::node	0.2	explicit-03	14-15
# ::node	0.2.0	it	16-17
# ::node	0.3	need-01	6-7
# ::node	0.3.0	that	2-3
# ::root	0	obligate-01
# ::edge	explicit-03	ARG0	you	0.2	0.0
# ::edge	explicit-03	ARG1	it	0.2	0.2.0
# ::edge	need-01	ARG0	you	0.3	0.0
# ::edge	need-01	ARG1	it	0.3	0.2.0
# ::edge	need-01	ARG1	that	0.3	0.3.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG1-of	real-04	0	0.1
# ::edge	obligate-01	ARG2	explicit-03	0	0.2
# ::edge	obligate-01	condition	need-01	0	0.3
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you) :ARG1-of (MRPNode-2 / real-04) :ARG2 (MRPNode-3 / explicit-03 :ARG0 MRPNode-1 :ARG1 (MRPNode-4 / it)) :condition (MRPNode-5 / need-01 :ARG0 MRPNode-1 :ARG1 MRPNode-4 :ARG1 (MRPNode-6 / that)))

# ::id 876
# ::snt There's no rule against it.
# ::tok There 's no rule against it .
# ::alignments 2-3|0.0 3-4|0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:49.161754 ::parser eager_oracle ::smatch 1.0 ::n_actions 18
# ::node	0	rule-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	it	5-6
# ::root	0	rule-01
# ::edge	rule-01	ARG3	it	0	0.1
# ::edge	rule-01	polarity	-	0	0.0
(MRPNode-0 / rule-01 :polarity - :ARG3 (MRPNode-1 / it))

# ::id 877
# ::snt It depends on how it's used.
# ::tok It depends on how it 's used .
# ::alignments 0-1|0.0.0.0 1-2|0 6-7|0.0+0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:49.164984 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	depend-01	1-2
# ::node	0.0	thing	6-7
# ::node	0.0.0	use-01	6-7
# ::node	0.0.0.0	it	0-1
# ::root	0	depend-01
# ::edge	depend-01	ARG0	it	0	0.0.0.0
# ::edge	depend-01	ARG1	thing	0	0.0
# ::edge	thing	manner-of	use-01	0.0	0.0.0
# ::edge	use-01	ARG1	it	0.0.0	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / thing :manner-of (MRPNode-2 / use-01 :ARG1 (MRPNode-3 / it))) :ARG0 MRPNode-3)

# ::id 878
# ::snt They just don't want you to know it.
# ::tok They just do n't want you to know it .
# ::alignments 0-1|0.2 1-2|0.3 3-4|0.0 4-5|0 5-6|0.1.1 7-8|0.1 8-9|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:51.793257 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	want-01	4-5
# ::node	0.0	-	3-4
# ::node	0.1	know-01	7-8
# ::node	0.1.0	it	8-9
# ::node	0.1.1	you	5-6
# ::node	0.2	they	0-1
# ::node	0.3	just	1-2
# ::root	0	want-01
# ::edge	know-01	ARG0	you	0.1	0.1.1
# ::edge	know-01	ARG1	it	0.1	0.1.0
# ::edge	want-01	ARG0	they	0	0.2
# ::edge	want-01	ARG1	know-01	0	0.1
# ::edge	want-01	mod	just	0	0.3
# ::edge	want-01	polarity	-	0	0.0
(MRPNode-0 / want-01 :polarity - :ARG1 (MRPNode-1 / know-01 :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / you)) :ARG0 (MRPNode-4 / they) :mod (MRPNode-5 / just))

# ::id 879
# ::snt I think it's a bad idea.
# ::tok I think it 's a bad idea .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1 5-6|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:51.801906 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	think-01	1-2
# ::node	0.0	idea	6-7
# ::node	0.0.0	bad-07	5-6
# ::node	0.0.1	it	2-3
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	idea	ARG1-of	bad-07	0.0	0.0.0
# ::edge	idea	domain	it	0.0	0.0.1
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	idea	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / idea :ARG1-of (MRPNode-2 / bad-07) :domain (MRPNode-3 / it)) :ARG0 (MRPNode-4 / i))

# ::id 880
# ::snt You need to pick how and where you want to place your foot and do it.
# ::tok You need to pick how and where you want to place your foot and do it .
# ::alignments 1-2|0 3-4|0.0 5-6|0.0.0 7-8|0.0.1 8-9|0.0.1.1 10-11|0.0.1.2 12-13|0.0.1.2.0 14-15|0.0.1.0 15-16|0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:52.456355 ::parser eager_oracle ::smatch 0.8936170212765957 ::n_actions 51
# ::node	0	need-01	1-2
# ::node	0.0	pick-01	3-4
# ::node	0.0.0	and	5-6
# ::node	0.0.0.0	thing	
# ::node	0.0.0.1	location	
# ::node	0.0.1	you	7-8
# ::node	0.0.1.0	do-02	14-15
# ::node	0.0.1.0.0	it	15-16
# ::node	0.0.1.1	want-01	8-9
# ::node	0.0.1.2	place-01	10-11
# ::node	0.0.1.2.0	foot	12-13
# ::root	0	need-01
# ::edge	and	op1	thing	0.0.0	0.0.0.0
# ::edge	and	op2	location	0.0.0	0.0.0.1
# ::edge	do-02	ARG1	it	0.0.1.0	0.0.1.0.0
# ::edge	do-02	ARG1	location	0.0.1.0	0.0.0.1
# ::edge	need-01	ARG0	you	0	0.0.1
# ::edge	need-01	ARG1	pick-01	0	0.0
# ::edge	pick-01	ARG0	you	0.0	0.0.1
# ::edge	pick-01	ARG1	and	0.0	0.0.0
# ::edge	place-01	ARG1	foot	0.0.1.2	0.0.1.2.0
# ::edge	place-01	ARG1	it	0.0.1.2	0.0.1.0.0
# ::edge	you	ARG0-of	do-02	0.0.1	0.0.1.0
# ::edge	you	ARG0-of	place-01	0.0.1	0.0.1.2
# ::edge	you	ARG0-of	want-01	0.0.1	0.0.1.1
# ::edge	you	part	foot	0.0.1	0.0.1.2.0
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / pick-01 :ARG1 (MRPNode-2 / and :op1 (MRPNode-3 / thing) :op2 (MRPNode-4 / location)) :ARG0 (MRPNode-5 / you :ARG0-of (MRPNode-6 / do-02 :ARG1 MRPNode-4 :ARG1 (MRPNode-7 / it)) :ARG0-of (MRPNode-8 / want-01) :ARG0-of (MRPNode-9 / place-01 :ARG1 MRPNode-7 :ARG1 (MRPNode-10 / foot)) :part MRPNode-10)) :ARG0 MRPNode-5)

# ::id 881
# ::snt You should never do it.
# ::tok You should never do it .
# ::alignments 0-1|0.0.1 1-2|0 2-3|0.0.0+0.0.3 3-4|0.0 4-5|0.0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:52.460571 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	recommend-01	1-2
# ::node	0.0	do-02	3-4
# ::node	0.0.0	-	2-3
# ::node	0.0.1	you	0-1
# ::node	0.0.2	it	4-5
# ::node	0.0.3	ever	2-3
# ::root	0	recommend-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	it	0.0	0.0.2
# ::edge	do-02	polarity	-	0.0	0.0.0
# ::edge	do-02	time	ever	0.0	0.0.3
# ::edge	recommend-01	ARG1	do-02	0	0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / do-02 :polarity - :ARG0 (MRPNode-2 / you) :ARG1 (MRPNode-3 / it) :time (MRPNode-4 / ever)))

# ::id 882
# ::snt The answer to both questions is: Yes.
# ::tok The answer to both questions is : Yes .
# ::alignments 1-2|0 3-4|0.1.0 4-5|0.1 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:52.465471 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	answer-01	1-2
# ::node	0.0	yes	7-8
# ::node	0.1	question-01	4-5
# ::node	0.1.0	both	3-4
# ::root	0	answer-01
# ::edge	answer-01	ARG2	question-01	0	0.1
# ::edge	answer-01	ARG2	yes	0	0.0
# ::edge	question-01	mod	both	0.1	0.1.0
(MRPNode-0 / answer-01 :ARG2 (MRPNode-1 / yes) :ARG2 (MRPNode-2 / question-01 :mod (MRPNode-3 / both)))

# ::id 883
# ::snt They can, but the way to do it depends on what you have available.
# ::tok They can , but the way to do it depends on what you have available .
# ::alignments 0-1|0.1.0.1 1-2|0.1 3-4|0 5-6|0.0.1 7-8|0.1.0 8-9|0.1.0.0 9-10|0.0 12-13|0.0.0.0.0.0 13-14|0.0.0.0.0 14-15|0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:52.717268 ::parser eager_oracle ::smatch 1.0 ::n_actions 55
# ::node	0	contrast-01	3-4
# ::node	0.0	depend-01	9-10
# ::node	0.0.0	thing	14-15
# ::node	0.0.0.0	available-02	14-15
# ::node	0.0.0.0.0	have-03	13-14
# ::node	0.0.0.0.0.0	you	12-13
# ::node	0.0.1	way	5-6
# ::node	0.1	possible-01	1-2
# ::node	0.1.0	do-02	7-8
# ::node	0.1.0.0	it	8-9
# ::node	0.1.0.1	they	0-1
# ::root	0	contrast-01
# ::edge	available-02	ARG1	have-03	0.0.0.0	0.0.0.0.0
# ::edge	contrast-01	ARG1	depend-01	0	0.0
# ::edge	contrast-01	ARG1	possible-01	0	0.1
# ::edge	depend-01	ARG0	way	0.0	0.0.1
# ::edge	depend-01	ARG1	thing	0.0	0.0.0
# ::edge	do-02	ARG0	they	0.1.0	0.1.0.1
# ::edge	do-02	ARG1	it	0.1.0	0.1.0.0
# ::edge	have-03	ARG0	you	0.0.0.0.0	0.0.0.0.0.0
# ::edge	possible-01	ARG1	do-02	0.1	0.1.0
# ::edge	thing	ARG2-of	available-02	0.0.0	0.0.0.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / depend-01 :ARG1 (MRPNode-2 / thing :ARG2-of (MRPNode-3 / available-02 :ARG1 (MRPNode-4 / have-03 :ARG0 (MRPNode-5 / you)))) :ARG0 (MRPNode-6 / way)) :ARG1 (MRPNode-7 / possible-01 :ARG1 (MRPNode-8 / do-02 :ARG1 (MRPNode-9 / it) :ARG0 (MRPNode-10 / they))))

# ::id 884
# ::snt It's not just a good idea, it's an excellent idea.
# ::tok It 's not just a good idea , it 's an excellent idea .
# ::alignments 2-3|0.0.0.0 3-4|0.0.0 5-6|0.1.0 6-7|0.1 8-9|0.0.2 11-12|0.0.1 12-13|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:52.753241 ::parser eager_oracle ::smatch 0.7999999999999999 ::n_actions 37
# ::node	0	and	
# ::node	0.0	idea	12-13
# ::node	0.0.0	just	3-4
# ::node	0.0.0.0	-	2-3
# ::node	0.0.1	good-02	11-12
# ::node	0.0.2	it	8-9
# ::node	0.1	idea	6-7
# ::node	0.1.0	excellent-02	5-6
# ::root	0	and
# ::edge	and	op1	idea	0	0.0
# ::edge	and	op2	idea	0	0.1
# ::edge	idea	ARG1-of	excellent-02	0.1	0.1.0
# ::edge	idea	ARG1-of	good-02	0.0	0.0.1
# ::edge	idea	domain	it	0.0	0.0.2
# ::edge	idea	domain	it	0.1	0.0.2
# ::edge	idea	mod	just	0.0	0.0.0
# ::edge	just	polarity	-	0.0.0	0.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / idea :mod (MRPNode-2 / just :polarity -) :ARG1-of (MRPNode-3 / good-02) :domain (MRPNode-4 / it)) :op2 (MRPNode-5 / idea :domain MRPNode-4 :ARG1-of (MRPNode-6 / excellent-02)))

# ::id 885
# ::snt To my knowledge, there's no time requirement.
# ::tok To my knowledge , there 's no time requirement .
# ::alignments 1-2|0.2.0 2-3|0.2 6-7|0.0 7-8|0.1 8-9|0 ::annotator aligner3.py ::date 2021-03-12 14:31:52.756947 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	require-01	8-9
# ::node	0.0	-	6-7
# ::node	0.1	time	7-8
# ::node	0.2	know-01	2-3
# ::node	0.2.0	i	1-2
# ::root	0	require-01
# ::edge	know-01	ARG0	i	0.2	0.2.0
# ::edge	require-01	ARG1	time	0	0.1
# ::edge	require-01	ARG1-of	know-01	0	0.2
# ::edge	require-01	polarity	-	0	0.0
(MRPNode-0 / require-01 :polarity - :ARG1 (MRPNode-1 / time) :ARG1-of (MRPNode-2 / know-01 :ARG0 (MRPNode-3 / i)))

# ::id 886
# ::snt This is a part answer to your question
# ::tok This is a part answer to your question
# ::alignments 0-1|0.1 3-4|0.2 4-5|0.0 6-7|0.0.0 7-8|0 ::annotator aligner3.py ::date 2021-03-12 14:31:52.763291 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	answer-01	7-8
# ::node	0.0	question-01	4-5
# ::node	0.0.0	you	6-7
# ::node	0.1	this	0-1
# ::node	0.2	part	3-4
# ::root	0	answer-01
# ::edge	answer-01	ARG0	this	0	0.1
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	answer-01	degree	part	0	0.2
# ::edge	question-01	ARG0	you	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG0 (MRPNode-3 / this) :degree (MRPNode-4 / part))

# ::id 887
# ::snt It really isn't your problem how they are going to find a qualified person to do the job.
# ::tok It really is n't your problem how they are going to find a qualified person to do the job .
# ::alignments 1-2|0.1 3-4|0.0 4-5|0.3 5-6|0 7-8|0.2.1 11-12|0.2 13-14|0.2.2.0 14-15|0.2.2 16-17|0.2.0 18-19|0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:52.961469 ::parser eager_oracle ::smatch 1.0 ::n_actions 52
# ::node	0	problem	5-6
# ::node	0.0	-	3-4
# ::node	0.1	real-04	1-2
# ::node	0.2	find-01	11-12
# ::node	0.2.0	do-02	16-17
# ::node	0.2.0.0	job	18-19
# ::node	0.2.1	they	7-8
# ::node	0.2.2	person	14-15
# ::node	0.2.2.0	qualify-02	13-14
# ::node	0.3	you	4-5
# ::root	0	problem
# ::edge	do-02	ARG1	job	0.2.0	0.2.0.0
# ::edge	find-01	ARG0	they	0.2	0.2.1
# ::edge	find-01	ARG1	do-02	0.2	0.2.0
# ::edge	find-01	ARG1	person	0.2	0.2.2
# ::edge	person	ARG1-of	qualify-02	0.2.2	0.2.2.0
# ::edge	problem	ARG1-of	real-04	0	0.1
# ::edge	problem	domain	find-01	0	0.2
# ::edge	problem	polarity	-	0	0.0
# ::edge	problem	poss	you	0	0.3
(MRPNode-0 / problem :polarity - :ARG1-of (MRPNode-1 / real-04) :domain (MRPNode-2 / find-01 :ARG1 (MRPNode-3 / do-02 :ARG1 (MRPNode-4 / job)) :ARG0 (MRPNode-5 / they) :ARG1 (MRPNode-6 / person :ARG1-of (MRPNode-7 / qualify-02))) :poss (MRPNode-8 / you))

# ::id 888
# ::snt There are two options for you -
# ::tok There are two options for you -
# ::alignments 2-3|0.0 3-4|0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:52.963699 ::parser eager_oracle ::smatch 1.0 ::n_actions 18
# ::node	0	option	3-4
# ::node	0.0	2	2-3
# ::node	0.1	you	5-6
# ::root	0	option
# ::edge	option	quant	2	0	0.0
# ::edge	option	quant	you	0	0.1
(MRPNode-0 / option :quant 2 :quant (MRPNode-1 / you))

# ::id 889
# ::snt There is also a Youtube-Version of the film.
# ::tok There is also a Youtube - Version of the film .
# ::alignments 2-3|0.0 4-5|0.1+0.1.0+0.1.0.0 9-10|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:52.967215 ::parser eager_oracle ::smatch 0.5555555555555556 ::n_actions 20
# ::node	0	video	
# ::node	0.0	also	2-3
# ::node	0.1	publication	4-5
# ::node	0.1.0	name	4-5
# ::node	0.1.0.0	youtube	4-5
# ::node	0.2	film	9-10
# ::root	0	video
# ::edge	name	op1	youtube	0.1.0	0.1.0.0
# ::edge	publication	name	name	0.1	0.1.0
# ::edge	video	mod	also	0	0.0
# ::edge	video	mod	film	0	0.2
# ::edge	video	mod	publication	0	0.1
(MRPNode-0 / video :mod (MRPNode-1 / also) :mod (MRPNode-2 / publication :name (MRPNode-3 / name :op1 youtube)) :mod (MRPNode-4 / film))

# ::id 890
# ::snt You can do it, but you might not be a professor.
# ::tok You can do it , but you might not be a professor .
# ::alignments 0-1|0.0.0.1 1-2|0.0 2-3|0.0.0 3-4|0.0.0.0 5-6|0 7-8|0.1 8-9|0.1.0.0 11-12|0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:53.078054 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	contrast-01	5-6
# ::node	0.0	possible-01	1-2
# ::node	0.0.0	do-02	2-3
# ::node	0.0.0.0	it	3-4
# ::node	0.0.0.1	you	0-1
# ::node	0.1	possible-01	7-8
# ::node	0.1.0	professor	11-12
# ::node	0.1.0.0	-	8-9
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	possible-01	0	0.0
# ::edge	contrast-01	ARG2	possible-01	0	0.1
# ::edge	do-02	ARG0	you	0.0.0	0.0.0.1
# ::edge	do-02	ARG1	it	0.0.0	0.0.0.0
# ::edge	possible-01	ARG1	do-02	0.0	0.0.0
# ::edge	possible-01	ARG1	professor	0.1	0.1.0
# ::edge	professor	domain	it	0.1.0	0.0.0.0
# ::edge	professor	domain	you	0.1.0	0.0.0.1
# ::edge	professor	polarity	-	0.1.0	0.1.0.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / possible-01 :ARG1 (MRPNode-2 / do-02 :ARG1 (MRPNode-3 / it) :ARG0 (MRPNode-4 / you))) :ARG2 (MRPNode-5 / possible-01 :ARG1 (MRPNode-6 / professor :polarity - :domain MRPNode-3 :domain MRPNode-4)))

# ::id 891
# ::snt You may want it, but the process given to you is what you have to work within.
# ::tok You may want it , but the process given to you is what you have to work within .
# ::alignments 0-1|0.0.0.1 1-2|0.0 2-3|0.0.0 3-4|0.0.0.0 5-6|0 7-8|0.1.1 8-9|0.1.1.0 14-15|0.1.0.0 16-17|0.1+0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:53.162388 ::parser eager_oracle ::smatch 1.0 ::n_actions 62
# ::node	0	contrast-01	5-6
# ::node	0.0	possible-01	1-2
# ::node	0.0.0	want-01	2-3
# ::node	0.0.0.0	it	3-4
# ::node	0.0.0.1	you	0-1
# ::node	0.1	thing	16-17
# ::node	0.1.0	work-01	16-17
# ::node	0.1.0.0	obligate-01	14-15
# ::node	0.1.1	process-02	7-8
# ::node	0.1.1.0	give-14	8-9
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	possible-01	0	0.0
# ::edge	contrast-01	ARG2	thing	0	0.1
# ::edge	give-14	ARG2	you	0.1.1.0	0.0.0.1
# ::edge	obligate-01	ARG1	you	0.1.0.0	0.0.0.1
# ::edge	possible-01	ARG1	want-01	0.0	0.0.0
# ::edge	process-02	ARG1-of	give-14	0.1.1	0.1.1.0
# ::edge	thing	ARG1-of	work-01	0.1	0.1.0
# ::edge	thing	domain	process-02	0.1	0.1.1
# ::edge	want-01	ARG0	you	0.0.0	0.0.0.1
# ::edge	want-01	ARG1	it	0.0.0	0.0.0.0
# ::edge	work-01	ARG0	you	0.1.0	0.0.0.1
# ::edge	work-01	ARG2-of	obligate-01	0.1.0	0.1.0.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / possible-01 :ARG1 (MRPNode-2 / want-01 :ARG1 (MRPNode-3 / it) :ARG0 (MRPNode-4 / you))) :ARG2 (MRPNode-5 / thing :ARG1-of (MRPNode-6 / work-01 :ARG0 MRPNode-4 :ARG2-of (MRPNode-7 / obligate-01 :ARG1 MRPNode-4)) :domain (MRPNode-8 / process-02 :ARG1-of (MRPNode-9 / give-14 :ARG2 MRPNode-4))))

# ::id 892
# ::snt You have to decide how much you want to demand, and what unmet demands you can live with.
# ::tok You have to decide how much you want to demand , and what unmet demands you can live with .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1 7-8|0.0.1 9-10|0.1.0.1 11-12|0.1.0 14-15|0.0.2 16-17|0.1.0.0 17-18|0.0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:54.298094 ::parser eager_oracle ::smatch 0.8837209302325582 ::n_actions 56
# ::node	0	obligate-01	1-2
# ::node	0.0	you	0-1
# ::node	0.0.0	demand-01	
# ::node	0.0.1	want-01	7-8
# ::node	0.0.2	demand-01	14-15
# ::node	0.0.3	live-01	17-18
# ::node	0.1	decide-01	3-4
# ::node	0.1.0	and	11-12
# ::node	0.1.0.0	possible-01	16-17
# ::node	0.1.0.1	demand-01	9-10
# ::node	0.1.0.1.0	-	
# ::node	0.1.0.2	thing	
# ::root	0	obligate-01
# ::edge	and	op1	demand-01	0.1.0	0.1.0.1
# ::edge	and	op1	thing	0.1.0	0.1.0.2
# ::edge	and	op2	possible-01	0.1.0	0.1.0.0
# ::edge	decide-01	ARG0	you	0.1	0.0
# ::edge	decide-01	ARG1	and	0.1	0.1.0
# ::edge	demand-01	mod	-	0.1.0.1	0.1.0.1.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	decide-01	0	0.1
# ::edge	you	ARG0-of	demand-01	0.0	0.0.0
# ::edge	you	ARG0-of	demand-01	0.0	0.0.2
# ::edge	you	ARG0-of	live-01	0.0	0.0.3
# ::edge	you	ARG0-of	want-01	0.0	0.0.1
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / demand-01) :ARG0-of (MRPNode-3 / want-01) :ARG0-of (MRPNode-4 / demand-01) :ARG0-of (MRPNode-5 / live-01)) :ARG2 (MRPNode-6 / decide-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-7 / and :op2 (MRPNode-8 / possible-01) :op1 (MRPNode-9 / demand-01 :mod -) :op1 (MRPNode-10 / thing))))

# ::id 893
# ::snt It's a good question.
# ::tok It 's a good question .
# ::alignments 0-1|0.0 3-4|0.1 4-5|0 ::annotator aligner3.py ::date 2021-03-12 14:31:54.300028 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	question-01	4-5
# ::node	0.0	it	0-1
# ::node	0.1	good-02	3-4
# ::root	0	question-01
# ::edge	question-01	ARG1-of	good-02	0	0.1
# ::edge	question-01	ARG1-of	it	0	0.0
(MRPNode-0 / question-01 :ARG1-of (MRPNode-1 / it) :ARG1-of (MRPNode-2 / good-02))

# ::id 894
# ::snt It's much better to ask.
# ::tok It 's much better to ask .
# ::alignments 2-3|0.1+0.2 3-4|0.2.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:54.304327 ::parser eager_oracle ::smatch 0.6 ::n_actions 21
# ::node	0	have-degree-91	
# ::node	0.0	ask-01	5-6
# ::node	0.1	good-02	2-3
# ::node	0.2	more	2-3
# ::node	0.2.0	much	3-4
# ::root	0	have-degree-91
# ::edge	good-02	ARG1	ask-01	0.1	0.0
# ::edge	have-degree-91	ARG1	ask-01	0	0.0
# ::edge	have-degree-91	ARG2	good-02	0	0.1
# ::edge	have-degree-91	ARG3	more	0	0.2
# ::edge	more	quant	much	0.2	0.2.0
(MRPNode-0 / have-degree-91 :ARG1 (MRPNode-1 / ask-01) :ARG2 (MRPNode-2 / good-02 :ARG1 MRPNode-1) :ARG3 (MRPNode-3 / more :quant (MRPNode-4 / much)))

# ::id 895
# ::snt It seems to work.
# ::tok It seems to work .
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:54.306543 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	seem-01	1-2
# ::node	0.0	work-09	3-4
# ::node	0.0.0	it	0-1
# ::root	0	seem-01
# ::edge	seem-01	ARG1	work-09	0	0.0
# ::edge	work-09	ARG1	it	0.0	0.0.0
(MRPNode-0 / seem-01 :ARG1 (MRPNode-1 / work-09 :ARG1 (MRPNode-2 / it)))

# ::id 896
# ::snt There are two traditional ways to bend wood:
# ::tok There are two traditional ways to bend wood :
# ::alignments 2-3|0.0 3-4|0.1 4-5|0 6-7|0.2 7-8|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:54.309586 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	way	4-5
# ::node	0.0	2	2-3
# ::node	0.1	tradition	3-4
# ::node	0.2	bend-01	6-7
# ::node	0.2.0	wood	7-8
# ::root	0	way
# ::edge	bend-01	ARG1	wood	0.2	0.2.0
# ::edge	way	manner-of	bend-01	0	0.2
# ::edge	way	mod	tradition	0	0.1
# ::edge	way	quant	2	0	0.0
(MRPNode-0 / way :quant 2 :mod (MRPNode-1 / tradition) :manner-of (MRPNode-2 / bend-01 :ARG1 (MRPNode-3 / wood)))

# ::id 897
# ::snt You have a lot of answers already, but I'd like to add Curries as another solutions.
# ::tok You have a lot of answers already , but I 'd like to add Curries as another solutions .
# ::alignments 0-1|0.0.1 1-2|0.0 3-4|0.0.0.0 5-6|0.0.0 6-7|0.0.2 8-9|0 9-10|0.1.0.2 11-12|0.1 13-14|0.1.0 16-17|0.1.0.0.0 17-18|0.1.0.0+0.1.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:54.436024 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 60
# ::node	0	contrast-01	8-9
# ::node	0.0	have-03	1-2
# ::node	0.0.0	answer-01	5-6
# ::node	0.0.0.0	lot	3-4
# ::node	0.0.1	you	0-1
# ::node	0.0.2	already	6-7
# ::node	0.1	like-02	11-12
# ::node	0.1.0	add-02	13-14
# ::node	0.1.0.0	thing	17-18
# ::node	0.1.0.0.0	another	16-17
# ::node	0.1.0.0.1	solve-01	17-18
# ::node	0.1.0.1	product	14-15
# ::node	0.1.0.1.0	name	14-15
# ::node	0.1.0.1.0.0	curries	14-15
# ::node	0.1.0.2	i	9-10
# ::root	0	contrast-01
# ::edge	add-02	ARG0	i	0.1.0	0.1.0.2
# ::edge	add-02	ARG1	product	0.1.0	0.1.0.1
# ::edge	add-02	ARG1	thing	0.1.0	0.1.0.0
# ::edge	answer-01	quant	lot	0.0.0	0.0.0.0
# ::edge	contrast-01	ARG1	have-03	0	0.0
# ::edge	contrast-01	ARG2	like-02	0	0.1
# ::edge	have-03	ARG0	you	0.0	0.0.1
# ::edge	have-03	ARG1	answer-01	0.0	0.0.0
# ::edge	have-03	time	already	0.0	0.0.2
# ::edge	like-02	ARG0	i	0.1	0.1.0.2
# ::edge	like-02	ARG1	add-02	0.1	0.1.0
# ::edge	name	op1	curries	0.1.0.1.0	0.1.0.1.0.0
# ::edge	product	name	name	0.1.0.1	0.1.0.1.0
# ::edge	thing	ARG2-of	solve-01	0.1.0.0	0.1.0.0.1
# ::edge	thing	mod	another	0.1.0.0	0.1.0.0.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / have-03 :ARG1 (MRPNode-2 / answer-01 :quant (MRPNode-3 / lot)) :ARG0 (MRPNode-4 / you) :time (MRPNode-5 / already)) :ARG2 (MRPNode-6 / like-02 :ARG1 (MRPNode-7 / add-02 :ARG1 (MRPNode-8 / thing :mod (MRPNode-9 / another) :ARG2-of (MRPNode-10 / solve-01)) :ARG1 (MRPNode-11 / product :name (MRPNode-12 / name :op1 curries)) :ARG0 (MRPNode-13 / i)) :ARG0 MRPNode-13))

# ::id 898
# ::snt There is no quarantine period.
# ::tok There is no quarantine period .
# ::alignments 2-3|0.0 3-4|0.1 4-5|0 ::annotator aligner3.py ::date 2021-03-12 14:31:54.437632 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	period	4-5
# ::node	0.0	-	2-3
# ::node	0.1	quarantine	3-4
# ::root	0	period
# ::edge	period	mod	quarantine	0	0.1
# ::edge	period	polarity	-	0	0.0
(MRPNode-0 / period :polarity - :mod (MRPNode-1 / quarantine))

# ::id 899
# ::snt Yes, you should create a portfolio site to showcase what you can do and what you've done.
# ::tok Yes , you should create a portfolio site to showcase what you can do and what you 've done .
# ::alignments 3-4|0 4-5|0.0 6-7|0.0.1.0 7-8|0.0.1 9-10|0.0.2 11-12|0.0.0 12-13|0.0.0.1.0 13-14|0.0.0.1 14-15|0.0.0.1.1 17-18|0.0.0.0.0+0.0.0.0.1 18-19|0.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:54.520957 ::parser eager_oracle ::smatch 1.0 ::n_actions 68
# ::node	0	recommend-01	3-4
# ::node	0.0	create-01	4-5
# ::node	0.0.0	you	11-12
# ::node	0.0.0.0	do-02	18-19
# ::node	0.0.0.0.0	thing	17-18
# ::node	0.0.0.0.1	thing	17-18
# ::node	0.0.0.1	do-02	13-14
# ::node	0.0.0.1.0	possible-01	12-13
# ::node	0.0.0.1.1	and	14-15
# ::node	0.0.1	site	7-8
# ::node	0.0.1.0	portfolio	6-7
# ::node	0.0.2	show-01	9-10
# ::root	0	recommend-01
# ::edge	and	op2	possible-01	0.0.0.1.1	0.0.0.1.0
# ::edge	and	op2	thing	0.0.0.1.1	0.0.0.0.0
# ::edge	and	op2	thing	0.0.0.1.1	0.0.0.0.1
# ::edge	create-01	ARG0	you	0.0	0.0.0
# ::edge	create-01	ARG1	site	0.0	0.0.1
# ::edge	create-01	purpose	show-01	0.0	0.0.2
# ::edge	do-02	ARG1	and	0.0.0.1	0.0.0.1.1
# ::edge	do-02	ARG1	thing	0.0.0.0	0.0.0.0.0
# ::edge	do-02	ARG1	thing	0.0.0.0	0.0.0.0.1
# ::edge	do-02	ARG1-of	possible-01	0.0.0.1	0.0.0.1.0
# ::edge	recommend-01	ARG1	create-01	0	0.0
# ::edge	show-01	ARG0	you	0.0.2	0.0.0
# ::edge	show-01	ARG1	and	0.0.2	0.0.0.1.1
# ::edge	site	mod	portfolio	0.0.1	0.0.1.0
# ::edge	you	ARG0-of	do-02	0.0.0	0.0.0.0
# ::edge	you	ARG0-of	do-02	0.0.0	0.0.0.1
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / create-01 :ARG0 (MRPNode-2 / you :ARG0-of (MRPNode-3 / do-02 :ARG1 (MRPNode-4 / thing) :ARG1 (MRPNode-5 / thing)) :ARG0-of (MRPNode-6 / do-02 :ARG1-of (MRPNode-7 / possible-01) :ARG1 (MRPNode-11 / and :op2 MRPNode-4 :op2 MRPNode-5 :op2 MRPNode-7))) :ARG1 (MRPNode-8 / site :mod (MRPNode-9 / portfolio)) :purpose (MRPNode-10 / show-01 :ARG0 MRPNode-2 :ARG1 MRPNode-11)))

# ::id 900
# ::snt It is his job to see that you have what you need to do your job.
# ::tok It is his job to see that you have what you need to do your job .
# ::alignments 2-3|0.0.1 3-4|0 5-6|0.0 8-9|0.0.0 11-12|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0.0 14-15|0.0.0.0.0.0 15-16|0.0.0.0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:54.711407 ::parser eager_oracle ::smatch 1.0 ::n_actions 54
# ::node	0	job	3-4
# ::node	0.0	see-01	5-6
# ::node	0.0.0	have-03	8-9
# ::node	0.0.0.0	thing	11-12
# ::node	0.0.0.0.0	do-02	11-12
# ::node	0.0.0.0.0.0	you	14-15
# ::node	0.0.0.0.0.0.0	need-01	11-12
# ::node	0.0.0.0.0.0.1	job	15-16
# ::node	0.0.1	he	2-3
# ::root	0	job
# ::edge	do-02	ARG0	you	0.0.0.0.0	0.0.0.0.0.0
# ::edge	do-02	ARG1	job	0.0.0.0.0	0.0.0.0.0.0.1
# ::edge	have-03	ARG0	you	0.0.0	0.0.0.0.0.0
# ::edge	have-03	ARG1	thing	0.0.0	0.0.0.0
# ::edge	job	domain	see-01	0	0.0
# ::edge	job	poss	he	0	0.0.1
# ::edge	need-01	purpose	do-02	0.0.0.0.0.0.0	0.0.0.0.0
# ::edge	see-01	ARG0	he	0.0	0.0.1
# ::edge	see-01	ARG1	have-03	0.0	0.0.0
# ::edge	thing	ARG1-of	do-02	0.0.0.0	0.0.0.0.0
# ::edge	you	ARG0-of	need-01	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	you	poss-of	job	0.0.0.0.0.0	0.0.0.0.0.0.1
(MRPNode-0 / job :domain (MRPNode-1 / see-01 :ARG1 (MRPNode-2 / have-03 :ARG1 (MRPNode-3 / thing :ARG1-of (MRPNode-4 / do-02 :ARG0 (MRPNode-5 / you :ARG0-of (MRPNode-6 / need-01 :purpose MRPNode-4) :poss-of (MRPNode-7 / job)) :ARG1 MRPNode-7)) :ARG0 MRPNode-5) :ARG0 (MRPNode-8 / he)) :poss MRPNode-8)

# ::id 901
# ::snt No it is not.
# ::tok No it is not .
# ::alignments  ::annotator aligner3.py ::date 2021-03-12 14:31:54.712257 ::parser eager_oracle ::smatch 0.0 ::n_actions 7
# ::node	0	null	
# ::root	0	null
(n / null)

# ::id 902
# ::snt My recommendation is not to say anything, and do the best you can.
# ::tok My recommendation is not to say anything , and do the best you can .
# ::alignments 0-1|0.1 1-2|0 3-4|0.0.0.0 5-6|0.0.0 6-7|0.0.0.1 8-9|0.0 9-10|0.0.0.2.0+0.0.1+0.0.1.0 11-12|0.0.1.1+0.0.1.1.0+0.0.1.1.1.0 12-13|0.0.0.2 13-14|0.0.0.2.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:54.942344 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 66
# ::node	0	recommend-01	1-2
# ::node	0.0	and	8-9
# ::node	0.0.0	say-01	5-6
# ::node	0.0.0.0	-	3-4
# ::node	0.0.0.1	anything	6-7
# ::node	0.0.0.2	you	12-13
# ::node	0.0.0.2.0	do-02	9-10
# ::node	0.0.0.2.0.0	possible-01	13-14
# ::node	0.0.1	do-02	9-10
# ::node	0.0.1.0	imperative	9-10
# ::node	0.0.1.1	thing	11-12
# ::node	0.0.1.1.0	good-02	11-12
# ::node	0.0.1.1.1	have-degree-91	
# ::node	0.0.1.1.1.0	most	11-12
# ::node	0.1	i	0-1
# ::root	0	recommend-01
# ::edge	and	op1	say-01	0.0	0.0.0
# ::edge	and	op2	do-02	0.0	0.0.1
# ::edge	do-02	ARG0	you	0.0.1	0.0.0.2
# ::edge	do-02	ARG1	thing	0.0.1	0.0.1.1
# ::edge	do-02	ARG1-of	possible-01	0.0.0.2.0	0.0.0.2.0.0
# ::edge	do-02	mode	imperative	0.0.1	0.0.1.0
# ::edge	have-degree-91	ARG2	good-02	0.0.1.1.1	0.0.1.1.0
# ::edge	have-degree-91	ARG3	most	0.0.1.1.1	0.0.1.1.1.0
# ::edge	recommend-01	ARG0	i	0	0.1
# ::edge	recommend-01	ARG1	and	0	0.0
# ::edge	say-01	ARG0	you	0.0.0	0.0.0.2
# ::edge	say-01	ARG1	anything	0.0.0	0.0.0.1
# ::edge	say-01	polarity	-	0.0.0	0.0.0.0
# ::edge	thing	ARG1-of	good-02	0.0.1.1	0.0.1.1.0
# ::edge	thing	ARG1-of	have-degree-91	0.0.1.1	0.0.1.1.1
# ::edge	you	ARG0-of	do-02	0.0.0.2	0.0.0.2.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / say-01 :polarity - :ARG1 (MRPNode-3 / anything) :ARG0 (MRPNode-4 / you :ARG0-of (MRPNode-5 / do-02 :ARG1-of (MRPNode-6 / possible-01)))) :op2 (MRPNode-7 / do-02 :mode imperative :ARG0 MRPNode-4 :ARG1 (MRPNode-8 / thing :ARG1-of (MRPNode-9 / good-02) :ARG1-of (MRPNode-10 / have-degree-91 :ARG2 MRPNode-9 :ARG3 (MRPNode-11 / most))))) :ARG0 (MRPNode-12 / i))

# ::id 903
# ::snt You don't have to do anything to season it.
# ::tok You do n't have to do anything to season it .
# ::alignments 0-1|0.1 1-2|0.2 2-3|0.0 3-4|0 6-7|0.2.0 9-10|0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:54.974592 ::parser eager_oracle ::smatch 0.8 ::n_actions 33
# ::node	0	obligate-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	you	0-1
# ::node	0.1.0	assess-01	
# ::node	0.1.0.0	it	9-10
# ::node	0.2	do-02	1-2
# ::node	0.2.0	anything	6-7
# ::root	0	obligate-01
# ::edge	assess-01	ARG1	it	0.1.0	0.1.0.0
# ::edge	do-02	ARG0	you	0.2	0.1
# ::edge	do-02	ARG1	anything	0.2	0.2.0
# ::edge	do-02	purpose	assess-01	0.2	0.1.0
# ::edge	obligate-01	ARG1	you	0	0.1
# ::edge	obligate-01	ARG2	do-02	0	0.2
# ::edge	obligate-01	polarity	-	0	0.0
# ::edge	you	ARG0-of	assess-01	0.1	0.1.0
(MRPNode-0 / obligate-01 :polarity - :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / assess-01 :ARG1 (MRPNode-3 / it))) :ARG2 (MRPNode-4 / do-02 :ARG0 MRPNode-1 :purpose MRPNode-2 :ARG1 (MRPNode-5 / anything)))

# ::id 904
# ::snt You should tell a good story and sometimes you have to tweak reality/history to do so.
# ::tok You should tell a good story and sometimes you have to tweak reality / history to do so .
# ::alignments 0-1|0.0.0.1 1-2|0.0 2-3|0.0.0 4-5|0.0.0.0.0 5-6|0.0.0.0 6-7|0 7-8|0.1.1 9-10|0.1 11-12|0.1.0 12-13|0.1.0.0.0 13-14|0.1.0.0 14-15|0.1.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:54.992452 ::parser eager_oracle ::smatch 1.0 ::n_actions 62
# ::node	0	and	6-7
# ::node	0.0	recommend-01	1-2
# ::node	0.0.0	tell-01	2-3
# ::node	0.0.0.0	story	5-6
# ::node	0.0.0.0.0	good-02	4-5
# ::node	0.0.0.1	you	0-1
# ::node	0.1	obligate-01	9-10
# ::node	0.1.0	tweak-01	11-12
# ::node	0.1.0.0	slash	13-14
# ::node	0.1.0.0.0	reality	12-13
# ::node	0.1.0.0.1	history	14-15
# ::node	0.1.1	sometimes	7-8
# ::root	0	and
# ::edge	and	op1	recommend-01	0	0.0
# ::edge	and	op2	obligate-01	0	0.1
# ::edge	obligate-01	ARG1	you	0.1	0.0.0.1
# ::edge	obligate-01	ARG2	tweak-01	0.1	0.1.0
# ::edge	obligate-01	frequency	sometimes	0.1	0.1.1
# ::edge	recommend-01	ARG1	tell-01	0.0	0.0.0
# ::edge	slash	op1	reality	0.1.0.0	0.1.0.0.0
# ::edge	slash	op2	history	0.1.0.0	0.1.0.0.1
# ::edge	story	ARG1-of	good-02	0.0.0.0	0.0.0.0.0
# ::edge	tell-01	ARG0	you	0.0.0	0.0.0.1
# ::edge	tell-01	ARG1	story	0.0.0	0.0.0.0
# ::edge	tweak-01	ARG0	you	0.1.0	0.0.0.1
# ::edge	tweak-01	ARG1	slash	0.1.0	0.1.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / recommend-01 :ARG1 (MRPNode-2 / tell-01 :ARG1 (MRPNode-3 / story :ARG1-of (MRPNode-4 / good-02)) :ARG0 (MRPNode-6 / you))) :op2 (MRPNode-5 / obligate-01 :ARG1 MRPNode-6 :ARG2 (MRPNode-7 / tweak-01 :ARG0 MRPNode-6 :ARG1 (MRPNode-8 / slash :op1 (MRPNode-9 / reality) :op2 (MRPNode-10 / history))) :frequency (MRPNode-11 / sometimes)))

# ::id 905
# ::snt The best thing to do is to overcome the fussiness.
# ::tok The best thing to do is to overcome the fussiness .
# ::alignments 1-2|0.0 2-3|0 7-8|0.2 9-10|0.2.0 ::annotator aligner3.py ::date 2021-03-12 14:31:54.997659 ::parser eager_oracle ::smatch 0.761904761904762 ::n_actions 25
# ::node	0	thing	2-3
# ::node	0.0	good-02	1-2
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	overcome-01	7-8
# ::node	0.2.0	fuss-01	9-10
# ::root	0	thing
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	overcome-01	ARG1	fuss-01	0.2	0.2.0
# ::edge	thing	ARG1-of	good-02	0	0.0
# ::edge	thing	ARG1-of	have-degree-91	0	0.1
# ::edge	thing	domain	overcome-01	0	0.2
(MRPNode-0 / thing :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / overcome-01 :ARG1 (MRPNode-5 / fuss-01)))

# ::id 906
# ::snt "Saying ""thanks, I don't have any questions at the moment."""
# ::tok " Saying " " thanks , I do n't have any questions at the moment . " " "
# ::alignments 1-2|0.0 4-5|0.0.0 6-7|0.0.0.0 8-9|0.1.0 9-10|0.1 10-11|0.1.1.0 11-12|0.1.1 14-15|0.1.2 ::annotator aligner3.py ::date 2021-03-12 14:31:55.011867 ::parser eager_oracle ::smatch 0.823529411764706 ::n_actions 45
# ::node	0	and	
# ::node	0.0	say-01	1-2
# ::node	0.0.0	thank-01	4-5
# ::node	0.0.0.0	i	6-7
# ::node	0.1	have-03	9-10
# ::node	0.1.0	-	8-9
# ::node	0.1.1	question-01	11-12
# ::node	0.1.1.0	any	10-11
# ::node	0.1.2	moment	14-15
# ::root	0	and
# ::edge	and	op1	say-01	0	0.0
# ::edge	and	op2	have-03	0	0.1
# ::edge	have-03	ARG0	i	0.1	0.0.0.0
# ::edge	have-03	ARG1	question-01	0.1	0.1.1
# ::edge	have-03	polarity	-	0.1	0.1.0
# ::edge	have-03	time	moment	0.1	0.1.2
# ::edge	question-01	quant	any	0.1.1	0.1.1.0
# ::edge	say-01	ARG0	thank-01	0.0	0.0.0
# ::edge	thank-01	ARG0	i	0.0.0	0.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / say-01 :ARG0 (MRPNode-2 / thank-01 :ARG0 (MRPNode-6 / i))) :op2 (MRPNode-3 / have-03 :polarity - :ARG1 (MRPNode-4 / question-01 :quant (MRPNode-5 / any)) :ARG0 MRPNode-6 :time (MRPNode-7 / moment)))

# ::id 907
# ::snt You should prime it first.
# ::tok You should prime it first .
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0 3-4|0.0.0 4-5|0.0.1+0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:55.014465 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	recommend-01	1-2
# ::node	0.0	prime	2-3
# ::node	0.0.0	it	3-4
# ::node	0.0.1	ordinal-entity	4-5
# ::node	0.0.1.0	1	4-5
# ::node	0.0.2	you	0-1
# ::root	0	recommend-01
# ::edge	ordinal-entity	value	1	0.0.1	0.0.1.0
# ::edge	prime	ARG0	you	0.0	0.0.2
# ::edge	prime	ord	it	0.0	0.0.0
# ::edge	prime	ord	ordinal-entity	0.0	0.0.1
# ::edge	recommend-01	ARG1	prime	0	0.0
# ::edge	recommend-01	ARG2	you	0	0.0.2
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / prime :ord (MRPNode-2 / it) :ord (MRPNode-3 / ordinal-entity :value 1) :ARG0 (MRPNode-4 / you)) :ARG2 MRPNode-4)

# ::id 908
# ::snt What kind of floors are above?
# ::tok What kind of floors are above ?
# ::alignments 0-1|0.0.0 1-2|0.0 3-4|0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:55.016603 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	floor	3-4
# ::node	0.0	kind	1-2
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.1	above	5-6
# ::root	0	floor
# ::edge	floor	location	above	0	0.1
# ::edge	floor	mod	kind	0	0.0
# ::edge	kind	mod	amr-unknown	0.0	0.0.0
(MRPNode-0 / floor :mod (MRPNode-1 / kind :mod (MRPNode-2 / amr-unknown)) :location (MRPNode-3 / above))

# ::id 909
# ::snt It's all about adhesion.
# ::tok It 's all about adhesion .
# ::alignments 2-3|0.0 4-5|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:55.017915 ::parser eager_oracle ::smatch 0.25 ::n_actions 13
# ::node	0	concern-02	
# ::node	0.0	all	2-3
# ::node	0.1	adhesion	4-5
# ::root	0	concern-02
# ::edge	concern-02	ARG1	adhesion	0	0.1
# ::edge	concern-02	ARG1	all	0	0.0
(MRPNode-0 / concern-02 :ARG1 (MRPNode-1 / all) :ARG1 (MRPNode-2 / adhesion))

# ::id 910
# ::snt You have to know what you want to do.
# ::tok You have to know what you want to do .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1 6-7|0.0.1 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:55.076981 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 32
# ::node	0	obligate-01	1-2
# ::node	0.0	you	0-1
# ::node	0.0.0	do-02	8-9
# ::node	0.0.0.0	thing	
# ::node	0.0.1	want-01	6-7
# ::node	0.1	know-01	3-4
# ::root	0	obligate-01
# ::edge	do-02	ARG1	thing	0.0.0	0.0.0.0
# ::edge	know-01	ARG0	you	0.1	0.0
# ::edge	know-01	ARG1	thing	0.1	0.0.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	know-01	0	0.1
# ::edge	want-01	ARG1	do-02	0.0.1	0.0.0
# ::edge	you	ARG0-of	do-02	0.0	0.0.0
# ::edge	you	ARG0-of	want-01	0.0	0.0.1
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / do-02 :ARG1 (MRPNode-5 / thing)) :ARG0-of (MRPNode-3 / want-01 :ARG1 MRPNode-2)) :ARG2 (MRPNode-4 / know-01 :ARG0 MRPNode-1 :ARG1 MRPNode-5))

# ::id 911
# ::snt You will also want to remove the seeds.
# ::tok You will also want to remove the seeds .
# ::alignments 0-1|0.0.1 2-3|0.1 3-4|0 5-6|0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:55.081858 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	want-01	3-4
# ::node	0.0	remove-01	5-6
# ::node	0.0.0	seed	7-8
# ::node	0.0.1	you	0-1
# ::node	0.1	also	2-3
# ::root	0	want-01
# ::edge	remove-01	ARG0	you	0.0	0.0.1
# ::edge	remove-01	ARG1	seed	0.0	0.0.0
# ::edge	want-01	ARG0	you	0	0.0.1
# ::edge	want-01	ARG1	remove-01	0	0.0
# ::edge	want-01	mod	also	0	0.1
(MRPNode-0 / want-01 :ARG1 (MRPNode-1 / remove-01 :ARG1 (MRPNode-2 / seed) :ARG0 (MRPNode-3 / you)) :ARG0 MRPNode-3 :mod (MRPNode-4 / also))

# ::id 912
# ::snt Remember this is your degree we are talking about, its up to you what you want to do.
# ::tok Remember this is your degree we are talking about , its up to you what you want to do .
# ::alignments 0-1|0+0.0+0.1.1.0 1-2|0.1.0.1.0 4-5|0.1.0.1 5-6|0.1.0.0 7-8|0.1.0 13-14|0.1.1.1 16-17|0.1.1.1.0 18-19|0.1.1.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:55.164284 ::parser eager_oracle ::smatch 0.8333333333333334 ::n_actions 56
# ::node	0	remember-01	0-1
# ::node	0.0	imperative	0-1
# ::node	0.1	and	
# ::node	0.1.0	talk-01	7-8
# ::node	0.1.0.0	we	5-6
# ::node	0.1.0.1	degree	4-5
# ::node	0.1.0.1.0	this	1-2
# ::node	0.1.1	depend-01	
# ::node	0.1.1.0	thing	0-1
# ::node	0.1.1.1	you	13-14
# ::node	0.1.1.1.0	want-01	16-17
# ::node	0.1.1.1.0.0	do-02	18-19
# ::root	0	remember-01
# ::edge	and	op1	talk-01	0.1	0.1.0
# ::edge	and	op2	depend-01	0.1	0.1.1
# ::edge	degree	mod	this	0.1.0.1	0.1.0.1.0
# ::edge	depend-01	ARG0	thing	0.1.1	0.1.1.0
# ::edge	depend-01	ARG1	you	0.1.1	0.1.1.1
# ::edge	do-02	ARG1	thing	0.1.1.1.0.0	0.1.1.0
# ::edge	remember-01	ARG0	you	0	0.1.1.1
# ::edge	remember-01	ARG1	and	0	0.1
# ::edge	remember-01	mode	imperative	0	0.0
# ::edge	talk-01	ARG0	we	0.1.0	0.1.0.0
# ::edge	talk-01	ARG1	degree	0.1.0	0.1.0.1
# ::edge	want-01	ARG1	do-02	0.1.1.1.0	0.1.1.1.0.0
# ::edge	you	ARG0-of	do-02	0.1.1.1	0.1.1.1.0.0
# ::edge	you	ARG0-of	want-01	0.1.1.1	0.1.1.1.0
# ::edge	you	poss-of	degree	0.1.1.1	0.1.0.1
(MRPNode-0 / remember-01 :mode imperative :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / talk-01 :ARG0 (MRPNode-3 / we) :ARG1 (MRPNode-9 / degree :mod (MRPNode-10 / this))) :op2 (MRPNode-4 / depend-01 :ARG0 (MRPNode-5 / thing) :ARG1 (MRPNode-6 / you :ARG0-of (MRPNode-7 / want-01 :ARG1 (MRPNode-8 / do-02 :ARG1 MRPNode-5)) :ARG0-of MRPNode-8 :poss-of MRPNode-9))) :ARG0 MRPNode-6)

# ::id 913
# ::snt What is your paper for?
# ::tok What is your paper for ?
# ::alignments 0-1|0.0 2-3|0.1 3-4|0 ::annotator aligner3.py ::date 2021-03-12 14:31:55.165912 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	paper	3-4
# ::node	0.0	amr-unknown	0-1
# ::node	0.1	you	2-3
# ::root	0	paper
# ::edge	paper	poss	amr-unknown	0	0.0
# ::edge	paper	poss	you	0	0.1
(MRPNode-0 / paper :poss (MRPNode-1 / amr-unknown) :poss (MRPNode-2 / you))

# ::id 914
# ::snt You don't need sauce at all.
# ::tok You do n't need sauce at all .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 4-5|0.1 5-7|0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:55.172226 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	need-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	sauce	4-5
# ::node	0.2	you	0-1
# ::node	0.3	at-all	5-7
# ::root	0	need-01
# ::edge	need-01	ARG0	you	0	0.2
# ::edge	need-01	ARG1	sauce	0	0.1
# ::edge	need-01	mod	at-all	0	0.3
# ::edge	need-01	polarity	-	0	0.0
(MRPNode-0 / need-01 :polarity - :ARG1 (MRPNode-1 / sauce) :ARG0 (MRPNode-2 / you) :mod (MRPNode-3 / at-all))

# ::id 915
# ::snt To directly answer the two questions in your title.
# ::tok To directly answer the two questions in your title .
# ::alignments 1-2|0.1 2-3|0 4-5|0.0.0 5-6|0.0 7-8|0.0.1.0.0 8-9|0.0.1+0.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:55.179189 ::parser eager_oracle ::smatch 1.0 ::n_actions 35
# ::node	0	answer-01	2-3
# ::node	0.0	question-01	5-6
# ::node	0.0.0	2	4-5
# ::node	0.0.1	thing	8-9
# ::node	0.0.1.0	title-01	8-9
# ::node	0.0.1.0.0	you	7-8
# ::node	0.1	direct-02	1-2
# ::root	0	answer-01
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	answer-01	manner	direct-02	0	0.1
# ::edge	question-01	quant	2	0.0	0.0.0
# ::edge	question-01	quant	thing	0.0	0.0.1
# ::edge	thing	ARG2-of	title-01	0.0.1	0.0.1.0
# ::edge	title-01	ARG1	you	0.0.1.0	0.0.1.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :quant 2 :quant (MRPNode-2 / thing :ARG2-of (MRPNode-3 / title-01 :ARG1 (MRPNode-4 / you)))) :manner (MRPNode-5 / direct-02))

# ::id 916
# ::snt You don't have equipments/facilities to do research in B.
# ::tok You do n't have equipments / facilities to do research in B.
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 4-5|0.1.0 5-6|0.1 6-7|0.1.1 9-10|0.3 11-12|0.3.0+0.3.0.0+0.3.0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:55.188598 ::parser eager_oracle ::smatch 0.9473684210526315 ::n_actions 40
# ::node	0	have-03	3-4
# ::node	0.0	-	2-3
# ::node	0.1	slash	5-6
# ::node	0.1.0	equipment	4-5
# ::node	0.1.1	facility	6-7
# ::node	0.2	you	0-1
# ::node	0.3	research-01	9-10
# ::node	0.3.0	variable	11-12
# ::node	0.3.0.0	name	11-12
# ::node	0.3.0.0.0	b	11-12
# ::root	0	have-03
# ::edge	have-03	ARG0	you	0	0.2
# ::edge	have-03	ARG1	slash	0	0.1
# ::edge	have-03	polarity	-	0	0.0
# ::edge	have-03	purpose	research-01	0	0.3
# ::edge	name	op1	b	0.3.0.0	0.3.0.0.0
# ::edge	research-01	ARG0	you	0.3	0.2
# ::edge	research-01	location	variable	0.3	0.3.0
# ::edge	slash	op1	equipment	0.1	0.1.0
# ::edge	slash	op2	facility	0.1	0.1.1
# ::edge	variable	name	name	0.3.0	0.3.0.0
(MRPNode-0 / have-03 :polarity - :ARG1 (MRPNode-1 / slash :op1 (MRPNode-2 / equipment) :op2 (MRPNode-3 / facility)) :ARG0 (MRPNode-4 / you) :purpose (MRPNode-5 / research-01 :ARG0 MRPNode-4 :location (MRPNode-6 / variable :name (MRPNode-7 / name :op1 b))))

# ::id 917
# ::snt There are a few things I don't understand:
# ::tok There are a few things I do n't understand :
# ::alignments 3-4|0.0 4-5|0 5-6|0.1.1 7-8|0.1.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:55.195175 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	thing	4-5
# ::node	0.0	few	3-4
# ::node	0.1	understand-01	8-9
# ::node	0.1.0	-	7-8
# ::node	0.1.1	i	5-6
# ::root	0	thing
# ::edge	thing	ARG1-of	few	0	0.0
# ::edge	thing	ARG1-of	understand-01	0	0.1
# ::edge	understand-01	ARG0	i	0.1	0.1.1
# ::edge	understand-01	polarity	-	0.1	0.1.0
(MRPNode-0 / thing :ARG1-of (MRPNode-1 / few) :ARG1-of (MRPNode-2 / understand-01 :polarity - :ARG0 (MRPNode-3 / i)))

# ::id 918
# ::snt Yes, there is a reason for it.
# ::tok Yes , there is a reason for it .
# ::alignments 5-6|0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:55.196907 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	reason	5-6
# ::node	0.0	it	7-8
# ::root	0	reason
# ::edge	reason	purpose	it	0	0.0
(MRPNode-0 / reason :purpose (MRPNode-1 / it))

# ::id 919
# ::snt Yes, although they can be a bit sour.
# ::tok Yes , although they can be a bit sour .
# ::alignments 3-4|0.0.0.0 4-5|0.0 7-8|0.0.0.1 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:55.199732 ::parser eager_oracle ::smatch 0.7777777777777777 ::n_actions 25
# ::node	0	have-concession-91	
# ::node	0.0	possible-01	4-5
# ::node	0.0.0	sour	8-9
# ::node	0.0.0.0	they	3-4
# ::node	0.0.0.1	bit	7-8
# ::root	0	have-concession-91
# ::edge	have-concession-91	ARG2	possible-01	0	0.0
# ::edge	possible-01	ARG1	sour	0.0	0.0.0
# ::edge	sour	degree	bit	0.0.0	0.0.0.1
# ::edge	sour	domain	they	0.0.0	0.0.0.0
(MRPNode-0 / have-concession-91 :ARG2 (MRPNode-1 / possible-01 :ARG1 (MRPNode-2 / sour :domain (MRPNode-3 / they) :degree (MRPNode-4 / bit))))

# ::id 920
# ::snt You do not need to worry.
# ::tok You do not need to worry .
# ::alignments 0-1|0.1.0 2-3|0.0 3-4|0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:55.202229 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	need-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	worry-01	5-6
# ::node	0.1.0	you	0-1
# ::root	0	need-01
# ::edge	need-01	ARG0	you	0	0.1.0
# ::edge	need-01	ARG1	worry-01	0	0.1
# ::edge	need-01	polarity	-	0	0.0
# ::edge	worry-01	ARG1	you	0.1	0.1.0
(MRPNode-0 / need-01 :polarity - :ARG1 (MRPNode-1 / worry-01 :ARG1 (MRPNode-2 / you)) :ARG0 MRPNode-2)

# ::id 921
# ::snt Other than that you don't have a tax issue.
# ::tok Other than that you do n't have a tax issue .
# ::alignments 2-3|0.3.0 3-4|0.2 5-6|0.0 6-7|0 8-9|0.1.0 9-10|0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:55.213376 ::parser eager_oracle ::smatch 0.8181818181818181 ::n_actions 30
# ::node	0	have-03	6-7
# ::node	0.0	-	5-6
# ::node	0.1	issue-02	9-10
# ::node	0.1.0	tax-01	8-9
# ::node	0.2	you	3-4
# ::node	0.3	except-01	
# ::node	0.3.0	that	2-3
# ::root	0	have-03
# ::edge	except-01	ARG1	that	0.3	0.3.0
# ::edge	have-03	ARG0	you	0	0.2
# ::edge	have-03	ARG1	issue-02	0	0.1
# ::edge	have-03	ARG2-of	except-01	0	0.3
# ::edge	have-03	polarity	-	0	0.0
# ::edge	issue-02	ARG0	tax-01	0.1	0.1.0
(MRPNode-0 / have-03 :polarity - :ARG1 (MRPNode-1 / issue-02 :ARG0 (MRPNode-2 / tax-01)) :ARG0 (MRPNode-3 / you) :ARG2-of (MRPNode-4 / except-01 :ARG1 (MRPNode-5 / that)))

# ::id 922
# ::snt Point is: know what you want and don't be afraid to ask for it.
# ::tok Point is : know what you want and do n't be afraid to ask for it .
# ::alignments 3-4|0.0 5-6|0.0.1.0.0 6-7|0.0.1+0.0.1.0 7-8|0 9-10|0.1.0 13-14|0.1.1 ::annotator aligner3.py ::date 2021-03-12 14:31:55.219716 ::parser eager_oracle ::smatch 0.6875000000000001 ::n_actions 41
# ::node	0	and	7-8
# ::node	0.0	know-01	3-4
# ::node	0.0.0	imperative	
# ::node	0.0.1	thing	6-7
# ::node	0.0.1.0	want-01	6-7
# ::node	0.0.1.0.0	you	5-6
# ::node	0.1	fear-01	
# ::node	0.1.0	-	9-10
# ::node	0.1.1	ask-02	13-14
# ::node	0.2	have-talking-point-07	
# ::root	0	and
# ::edge	and	domain	have-talking-point-07	0	0.2
# ::edge	and	op1	know-01	0	0.0
# ::edge	and	op2	fear-01	0	0.1
# ::edge	fear-01	ARG1	ask-02	0.1	0.1.1
# ::edge	fear-01	polarity	-	0.1	0.1.0
# ::edge	have-talking-point-07	ARG0	you	0.2	0.0.1.0.0
# ::edge	have-talking-point-07	ARG3	thing	0.2	0.0.1
# ::edge	know-01	ARG0	you	0.0	0.0.1.0.0
# ::edge	know-01	ARG1	thing	0.0	0.0.1
# ::edge	know-01	mode	imperative	0.0	0.0.0
# ::edge	thing	ARG1-of	want-01	0.0.1	0.0.1.0
# ::edge	want-01	ARG0	you	0.0.1.0	0.0.1.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / know-01 :mode imperative :ARG1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / want-01 :ARG0 (MRPNode-4 / you))) :ARG0 MRPNode-4) :op2 (MRPNode-5 / fear-01 :polarity - :ARG1 (MRPNode-6 / ask-02)) :domain (MRPNode-7 / have-talking-point-07 :ARG3 MRPNode-2 :ARG0 MRPNode-4))

# ::id 923
# ::snt You're right on about the sample definition.
# ::tok You 're right on about the sample definition .
# ::alignments 0-1|0.1 2-3|0.2 6-7|0.0.0.0 7-8|0.0+0.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:55.223861 ::parser eager_oracle ::smatch 0.5555555555555556 ::n_actions 26
# ::node	0	go-on-25	
# ::node	0.0	thing	7-8
# ::node	0.0.0	define-01	7-8
# ::node	0.0.0.0	sample-01	6-7
# ::node	0.1	you	0-1
# ::node	0.2	right	2-3
# ::root	0	go-on-25
# ::edge	define-01	ARG1	sample-01	0.0.0	0.0.0.0
# ::edge	go-on-25	ARG0	you	0	0.1
# ::edge	go-on-25	ARG1	thing	0	0.0
# ::edge	go-on-25	mod	right	0	0.2
# ::edge	thing	ARG2-of	define-01	0.0	0.0.0
(MRPNode-0 / go-on-25 :ARG1 (MRPNode-1 / thing :ARG2-of (MRPNode-2 / define-01 :ARG1 (MRPNode-3 / sample-01))) :ARG0 (MRPNode-4 / you) :mod (MRPNode-5 / right))

# ::id 924
# ::snt You don't have to worry.
# ::tok You do n't have to worry .
# ::alignments 0-1|0.1 2-3|0.0 3-4|0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-12 14:31:55.226078 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	obligate-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	you	0-1
# ::node	0.2	worry-02	5-6
# ::root	0	obligate-01
# ::edge	obligate-01	ARG1	you	0	0.1
# ::edge	obligate-01	ARG2	worry-02	0	0.2
# ::edge	obligate-01	polarity	-	0	0.0
# ::edge	worry-02	ARG0	you	0.2	0.1
(MRPNode-0 / obligate-01 :polarity - :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / worry-02 :ARG0 MRPNode-1))

# ::id 925
# ::snt You're probably going to have to read various blogs to get all the information you want.
# ::tok You 're probably going to have to read various blogs to get all the information you want .
# ::alignments 0-1|0.0.0 2-3|0 5-6|0.0 7-8|0.0.1 8-9|0.0.1.0.0 9-10|0.0.1.0 11-12|0.0.0.0 12-13|0.0.0.0.0.0 14-15|0.0.0.0.0 16-17|0.0.0.1 ::annotator aligner3.py ::date 2021-03-12 14:31:55.362752 ::parser eager_oracle ::smatch 1.0 ::n_actions 56
# ::node	0	probable	2-3
# ::node	0.0	obligate-01	5-6
# ::node	0.0.0	you	0-1
# ::node	0.0.0.0	get-01	11-12
# ::node	0.0.0.0.0	information	14-15
# ::node	0.0.0.0.0.0	all	12-13
# ::node	0.0.0.1	want-01	16-17
# ::node	0.0.1	read-01	7-8
# ::node	0.0.1.0	blog	9-10
# ::node	0.0.1.0.0	various	8-9
# ::root	0	probable
# ::edge	blog	mod	various	0.0.1.0	0.0.1.0.0
# ::edge	get-01	ARG1	information	0.0.0.0	0.0.0.0.0
# ::edge	information	mod	all	0.0.0.0.0	0.0.0.0.0.0
# ::edge	obligate-01	ARG2	read-01	0.0	0.0.1
# ::edge	obligate-01	ARG2	you	0.0	0.0.0
# ::edge	probable	domain	obligate-01	0	0.0
# ::edge	read-01	ARG0	you	0.0.1	0.0.0
# ::edge	read-01	ARG1	blog	0.0.1	0.0.1.0
# ::edge	want-01	ARG1	information	0.0.0.1	0.0.0.0.0
# ::edge	you	ARG0-of	get-01	0.0.0	0.0.0.0
# ::edge	you	ARG0-of	want-01	0.0.0	0.0.0.1
(MRPNode-0 / probable :domain (MRPNode-1 / obligate-01 :ARG2 (MRPNode-2 / you :ARG0-of (MRPNode-3 / get-01 :ARG1 (MRPNode-4 / information :mod (MRPNode-5 / all))) :ARG0-of (MRPNode-6 / want-01 :ARG1 MRPNode-4)) :ARG2 (MRPNode-7 / read-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-8 / blog :mod (MRPNode-9 / various)))))

# ::id 926
# ::snt This is a part answer to your question
# ::tok This is a part answer to your question
# ::alignments 0-1|0.1 3-4|0.2 4-5|0.0 6-7|0.0.0 7-8|0 ::annotator aligner3.py ::date 2021-03-12 14:31:55.368416 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	answer-01	7-8
# ::node	0.0	question-01	4-5
# ::node	0.0.0	you	6-7
# ::node	0.1	this	0-1
# ::node	0.2	part	3-4
# ::root	0	answer-01
# ::edge	answer-01	ARG0	this	0	0.1
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	answer-01	degree	part	0	0.2
# ::edge	question-01	ARG0	you	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG0 (MRPNode-3 / this) :degree (MRPNode-4 / part))

# ::id 927
# ::snt Your best bet is research.
# ::tok Your best bet is research .
# ::alignments 0-1|0.1 1-2|0.2+0.3.0 2-3|0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:55.371015 ::parser eager_oracle ::smatch 0.761904761904762 ::n_actions 23
# ::node	0	bet-01	2-3
# ::node	0.0	research-01	4-5
# ::node	0.1	you	0-1
# ::node	0.2	good-02	1-2
# ::node	0.3	have-degree-91	
# ::node	0.3.0	most	1-2
# ::root	0	bet-01
# ::edge	bet-01	ARG0	research-01	0	0.0
# ::edge	bet-01	ARG0	you	0	0.1
# ::edge	bet-01	ARG1-of	good-02	0	0.2
# ::edge	bet-01	ARG1-of	have-degree-91	0	0.3
# ::edge	have-degree-91	ARG2	good-02	0.3	0.2
# ::edge	have-degree-91	ARG3	most	0.3	0.3.0
(MRPNode-0 / bet-01 :ARG0 (MRPNode-1 / research-01) :ARG0 (MRPNode-2 / you) :ARG1-of (MRPNode-3 / good-02) :ARG1-of (MRPNode-4 / have-degree-91 :ARG2 MRPNode-3 :ARG3 (MRPNode-5 / most)))

# ::id 928
# ::snt Yes, there is a chemical difference.
# ::tok Yes , there is a chemical difference .
# ::alignments 5-6|0.0 6-7|0 ::annotator aligner3.py ::date 2021-03-12 14:31:55.372527 ::parser eager_oracle ::smatch 1.0 ::n_actions 16
# ::node	0	differ-02	6-7
# ::node	0.0	chemical	5-6
# ::root	0	differ-02
# ::edge	differ-02	mod	chemical	0	0.0
(MRPNode-0 / differ-02 :mod (MRPNode-1 / chemical))

# ::id 929
# ::snt You don't have to do anything to season it.
# ::tok You do n't have to do anything to season it .
# ::alignments 0-1|0.1 1-2|0.2 2-3|0.0 3-4|0 6-7|0.2.0 9-10|0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:55.404112 ::parser eager_oracle ::smatch 0.8 ::n_actions 33
# ::node	0	obligate-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	you	0-1
# ::node	0.1.0	assess-01	
# ::node	0.1.0.0	it	9-10
# ::node	0.2	do-02	1-2
# ::node	0.2.0	anything	6-7
# ::root	0	obligate-01
# ::edge	assess-01	ARG1	it	0.1.0	0.1.0.0
# ::edge	do-02	ARG0	you	0.2	0.1
# ::edge	do-02	ARG1	anything	0.2	0.2.0
# ::edge	do-02	purpose	assess-01	0.2	0.1.0
# ::edge	obligate-01	ARG1	you	0	0.1
# ::edge	obligate-01	ARG2	do-02	0	0.2
# ::edge	obligate-01	polarity	-	0	0.0
# ::edge	you	ARG0-of	assess-01	0.1	0.1.0
(MRPNode-0 / obligate-01 :polarity - :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / assess-01 :ARG1 (MRPNode-3 / it))) :ARG2 (MRPNode-4 / do-02 :ARG0 MRPNode-1 :purpose MRPNode-2 :ARG1 (MRPNode-5 / anything)))

# ::id 930
# ::snt There is no code telling you that you cannot do this.
# ::tok There is no code telling you that you cannot do this .
# ::alignments 2-3|0.0+0.1.0.0 3-4|0 4-5|0.1 7-8|0.1.0.1.1 8-9|0.1.0 9-10|0.1.0.1 10-11|0.1.0.1.0 ::annotator aligner3.py ::date 2021-03-12 14:31:55.414753 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	code	3-4
# ::node	0.0	-	2-3
# ::node	0.1	tell-01	4-5
# ::node	0.1.0	possible-01	8-9
# ::node	0.1.0.0	-	2-3
# ::node	0.1.0.1	do-02	9-10
# ::node	0.1.0.1.0	this	10-11
# ::node	0.1.0.1.1	you	7-8
# ::root	0	code
# ::edge	code	ARG0-of	tell-01	0	0.1
# ::edge	code	polarity	-	0	0.0
# ::edge	do-02	ARG0	you	0.1.0.1	0.1.0.1.1
# ::edge	do-02	ARG1	this	0.1.0.1	0.1.0.1.0
# ::edge	possible-01	ARG1	do-02	0.1.0	0.1.0.1
# ::edge	possible-01	polarity	-	0.1.0	0.1.0.0
# ::edge	tell-01	ARG1	possible-01	0.1	0.1.0
# ::edge	tell-01	ARG2	you	0.1	0.1.0.1.1
(MRPNode-0 / code :polarity - :ARG0-of (MRPNode-1 / tell-01 :ARG1 (MRPNode-2 / possible-01 :polarity - :ARG1 (MRPNode-3 / do-02 :ARG1 (MRPNode-4 / this) :ARG0 (MRPNode-5 / you))) :ARG2 MRPNode-5))

# ::id 931
# ::snt Yes, you should talk to your professor.
# ::tok Yes , you should talk to your professor .
# ::alignments 3-4|0 4-5|0.0 6-7|0.0.1 7-8|0.0.1.0+0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-12 14:31:55.419028 ::parser eager_oracle ::smatch 0.88 ::n_actions 28
# ::node	0	recommend-01	3-4
# ::node	0.0	talk-01	4-5
# ::node	0.0.0	person	
# ::node	0.0.1	you	6-7
# ::node	0.0.1.0	have-rel-role-91	7-8
# ::node	0.0.1.0.0	professor	7-8
# ::root	0	recommend-01
# ::edge	have-rel-role-91	ARG0	person	0.0.1.0	0.0.0
# ::edge	have-rel-role-91	ARG2	professor	0.0.1.0	0.0.1.0.0
# ::edge	recommend-01	ARG1	talk-01	0	0.0
# ::edge	recommend-01	ARG2	you	0	0.0.1
# ::edge	talk-01	ARG0	you	0.0	0.0.1
# ::edge	talk-01	ARG2	person	0.0	0.0.0
# ::edge	you	ARG1-of	have-rel-role-91	0.0.1	0.0.1.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / talk-01 :ARG2 (MRPNode-2 / person) :ARG0 (MRPNode-3 / you :ARG1-of (MRPNode-4 / have-rel-role-91 :ARG0 MRPNode-2 :ARG2 (MRPNode-5 / professor)))) :ARG2 MRPNode-3)

# ::id 932
# ::snt You don't need sauce at all.
# ::tok You do n't need sauce at all .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 4-5|0.1 5-7|0.3 ::annotator aligner3.py ::date 2021-03-12 14:31:55.425218 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	need-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	sauce	4-5
# ::node	0.2	you	0-1
# ::node	0.3	at-all	5-7
# ::root	0	need-01
# ::edge	need-01	ARG0	you	0	0.2
# ::edge	need-01	ARG1	sauce	0	0.1
# ::edge	need-01	mod	at-all	0	0.3
# ::edge	need-01	polarity	-	0	0.0
(MRPNode-0 / need-01 :polarity - :ARG1 (MRPNode-1 / sauce) :ARG0 (MRPNode-2 / you) :mod (MRPNode-3 / at-all))

