# ::id 0
# ::snt Should I use IRA money to pay down my student loans?
# ::tok Should I use IRA money to pay down my student loans ?
# ::alignments 0-1|0 1-2|0.0.1 2-3|0.0 3-4|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 4-5|0.0.0 9-10|0.0.1.0.0+0.0.1.0.0.0 10-11|0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.429621 ::parser eager_oracle ::smatch 0.8636363636363636 ::n_actions 40
# ::node	0	recommend-01	0-1
# ::node	0.0	use-01	2-3
# ::node	0.0.0	money	4-5
# ::node	0.0.0.0	product	3-4
# ::node	0.0.0.0.0	name	3-4
# ::node	0.0.0.0.0.0	ira	3-4
# ::node	0.0.1	i	1-2
# ::node	0.0.1.0	loan-01	10-11
# ::node	0.0.1.0.0	person	9-10
# ::node	0.0.1.0.0.0	study-01	9-10
# ::node	0.0.2	pay-off-02	
# ::node	0.1	amr-unknown	
# ::root	0	recommend-01
# ::edge	i	ARG2-of	loan-01	0.0.1	0.0.1.0
# ::edge	loan-01	ARG2	person	0.0.1.0	0.0.1.0.0
# ::edge	money	source	product	0.0.0	0.0.0.0
# ::edge	name	op1	ira	0.0.0.0.0	0.0.0.0.0.0
# ::edge	pay-off-02	ARG0	i	0.0.2	0.0.1
# ::edge	pay-off-02	ARG1	loan-01	0.0.2	0.0.1.0
# ::edge	person	ARG0-of	study-01	0.0.1.0.0	0.0.1.0.0.0
# ::edge	product	name	name	0.0.0.0	0.0.0.0.0
# ::edge	recommend-01	ARG1	use-01	0	0.0
# ::edge	recommend-01	ARG2	amr-unknown	0	0.1
# ::edge	use-01	ARG0	i	0.0	0.0.1
# ::edge	use-01	ARG1	money	0.0	0.0.0
# ::edge	use-01	ARG2	pay-off-02	0.0	0.0.2
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / use-01 :ARG1 (MRPNode-2 / money :source (MRPNode-3 / product :name (MRPNode-4 / name :op1 ira))) :ARG0 (MRPNode-5 / i :ARG2-of (MRPNode-6 / loan-01 :ARG2 (MRPNode-7 / person :ARG0-of (MRPNode-8 / study-01)))) :ARG2 (MRPNode-9 / pay-off-02 :ARG0 MRPNode-5 :ARG1 MRPNode-6)) :ARG2 (MRPNode-10 / amr-unknown))

# ::id 1
# ::snt How do I keep an egg from cracking while being boiled?
# ::tok How do I keep an egg from cracking while being boiled ?
# ::alignments 0-1|0.1 2-3|0.0.1.0 3-4|0 5-6|0.0.0 7-8|0.0 10-11|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:35.434552 ::parser eager_oracle ::smatch 1.0 ::n_actions 35
# ::node	0	keep-04	3-4
# ::node	0.0	crack-02	7-8
# ::node	0.0.0	egg	5-6
# ::node	0.0.1	boil-01	10-11
# ::node	0.0.1.0	i	2-3
# ::node	0.1	amr-unknown	0-1
# ::root	0	keep-04
# ::edge	boil-01	ARG1	i	0.0.1	0.0.1.0
# ::edge	crack-02	ARG1	egg	0.0	0.0.0
# ::edge	crack-02	time	boil-01	0.0	0.0.1
# ::edge	keep-04	ARG0	i	0	0.0.1.0
# ::edge	keep-04	ARG1	crack-02	0	0.0
# ::edge	keep-04	manner	amr-unknown	0	0.1
(MRPNode-0 / keep-04 :ARG1 (MRPNode-1 / crack-02 :ARG1 (MRPNode-2 / egg) :time (MRPNode-3 / boil-01 :ARG1 (MRPNode-4 / i))) :ARG0 MRPNode-4 :manner (MRPNode-5 / amr-unknown))

# ::id 2
# ::snt How do you remove mold from a tent?
# ::tok How do you remove mold from a tent ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0 7-8|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:35.437252 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	remove-01	3-4
# ::node	0.0	mold	4-5
# ::node	0.1	you	2-3
# ::node	0.2	tent	7-8
# ::node	0.3	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	remove-01	ARG0	you	0	0.1
# ::edge	remove-01	ARG1	mold	0	0.0
# ::edge	remove-01	ARG2	tent	0	0.2
# ::edge	remove-01	manner	amr-unknown	0	0.3
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / mold) :ARG0 (MRPNode-2 / you) :ARG2 (MRPNode-3 / tent) :manner (MRPNode-4 / amr-unknown))

# ::id 3
# ::snt What could be wrong with my air conditioner?
# ::tok What could be wrong with my air conditioner ?
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 5-6|0.0.1.0 6-7|0.0.1.1 7-8|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:35.441024 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	possible-01	1-2
# ::node	0.0	wrong-02	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	conditioner	7-8
# ::node	0.0.1.0	i	5-6
# ::node	0.0.1.1	air	6-7
# ::root	0	possible-01
# ::edge	conditioner	mod	air	0.0.1	0.0.1.1
# ::edge	conditioner	mod	i	0.0.1	0.0.1.0
# ::edge	possible-01	ARG1	wrong-02	0	0.0
# ::edge	wrong-02	ARG1	amr-unknown	0.0	0.0.0
# ::edge	wrong-02	ARG2	conditioner	0.0	0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / wrong-02 :ARG1 (MRPNode-2 / amr-unknown) :ARG2 (MRPNode-3 / conditioner :mod (MRPNode-4 / i) :mod (MRPNode-5 / air))))

# ::id 4
# ::snt What language does this look like?
# ::tok What language does this look like ?
# ::alignments 0-1|0.0.0 1-2|0.0 3-4|0.1 4-5|0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.443115 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	look-02	4-5
# ::node	0.0	language	1-2
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.1	this	3-4
# ::root	0	look-02
# ::edge	language	mod	amr-unknown	0.0	0.0.0
# ::edge	look-02	ARG0	this	0	0.1
# ::edge	look-02	ARG1	language	0	0.0
(MRPNode-0 / look-02 :ARG1 (MRPNode-1 / language :mod (MRPNode-2 / amr-unknown)) :ARG0 (MRPNode-3 / this))

# ::id 5
# ::snt What more can I do to improve my credit score?
# ::tok What more can I do to improve my credit score ?
# ::alignments 0-1|0.0.1 1-2|0.0.1.0 2-3|0 3-4|0.0.0.0.1 4-5|0.0 6-7|0.0.0 8-9|0.0.0.0.0 9-10|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.451725 ::parser eager_oracle ::smatch 1.0 ::n_actions 41
# ::node	0	possible-01	2-3
# ::node	0.0	do-02	4-5
# ::node	0.0.0	improve-01	6-7
# ::node	0.0.0.0	score	9-10
# ::node	0.0.0.0.0	credit	8-9
# ::node	0.0.0.0.1	i	3-4
# ::node	0.0.1	amr-unknown	0-1
# ::node	0.0.1.0	more	1-2
# ::root	0	possible-01
# ::edge	amr-unknown	mod	more	0.0.1	0.0.1.0
# ::edge	do-02	ARG0	amr-unknown	0.0	0.0.1
# ::edge	do-02	ARG0	i	0.0	0.0.0.0.1
# ::edge	do-02	ARG1	improve-01	0.0	0.0.0
# ::edge	improve-01	ARG0	i	0.0.0	0.0.0.0.1
# ::edge	improve-01	ARG1	score	0.0.0	0.0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	score	mod	credit	0.0.0.0	0.0.0.0.0
# ::edge	score	poss	i	0.0.0.0	0.0.0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / improve-01 :ARG1 (MRPNode-3 / score :mod (MRPNode-4 / credit) :poss (MRPNode-7 / i)) :ARG0 MRPNode-7) :ARG0 (MRPNode-5 / amr-unknown :mod (MRPNode-6 / more)) :ARG0 MRPNode-7))

# ::id 6
# ::snt How to remove a ticks on my dog?
# ::tok How to remove a ticks on my dog ?
# ::alignments 0-1|0.1 2-3|0 4-5|0.0 6-7|0.0.0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.454450 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	remove-01	2-3
# ::node	0.0	tick	4-5
# ::node	0.0.0	dog	7-8
# ::node	0.0.0.0	i	6-7
# ::node	0.1	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	dog	poss	i	0.0.0	0.0.0.0
# ::edge	remove-01	ARG1	tick	0	0.0
# ::edge	remove-01	manner	amr-unknown	0	0.1
# ::edge	tick	location	dog	0.0	0.0.0
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / tick :location (MRPNode-2 / dog :poss (MRPNode-3 / i))) :manner (MRPNode-4 / amr-unknown))

# ::id 7
# ::snt How do I pump up water pressure in my shower?
# ::tok How do I pump up water pressure in my shower ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 5-6|0.0.0 6-7|0.0 9-10|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:35.459145 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	pump-01	3-4
# ::node	0.0	pressure	6-7
# ::node	0.0.0	water	5-6
# ::node	0.1	i	2-3
# ::node	0.2	shower	9-10
# ::node	0.3	amr-unknown	0-1
# ::root	0	pump-01
# ::edge	pressure	mod	water	0.0	0.0.0
# ::edge	pump-01	ARG0	i	0	0.1
# ::edge	pump-01	ARG2	shower	0	0.2
# ::edge	pump-01	manner	amr-unknown	0	0.3
# ::edge	pump-01	manner	pressure	0	0.0
(MRPNode-0 / pump-01 :manner (MRPNode-1 / pressure :mod (MRPNode-2 / water)) :ARG0 (MRPNode-3 / i) :ARG2 (MRPNode-4 / shower) :manner (MRPNode-5 / amr-unknown))

# ::id 8
# ::snt Is it possible to do a Master's in Mathematics after a Bachelor's in Economics?
# ::tok Is it possible to do a Master 's in Mathematics after a Bachelor 's in Economics ?
# ::alignments 2-3|0 4-5|0.0 9-10|0.0.0.1 10-11|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:35.465118 ::parser eager_oracle ::smatch 0.5454545454545454 ::n_actions 30
# ::node	0	possible-01	2-3
# ::node	0.0	do-02	4-5
# ::node	0.0.0	theory	
# ::node	0.0.0.0	philosophy	
# ::node	0.0.0.1	mathematics	9-10
# ::node	0.0.1	after	10-11
# ::node	0.0.1.0	philosophy	
# ::node	0.1	amr-unknown	
# ::root	0	possible-01
# ::edge	after	op1	philosophy	0.0.1	0.0.1.0
# ::edge	do-02	ARG1	theory	0.0	0.0.0
# ::edge	do-02	time	after	0.0	0.0.1
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	possible-01	time	amr-unknown	0	0.1
# ::edge	theory	topic	mathematics	0.0.0	0.0.0.1
# ::edge	theory	topic	philosophy	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / theory :topic (MRPNode-3 / philosophy) :topic (MRPNode-4 / mathematics)) :time (MRPNode-5 / after :op1 (MRPNode-6 / philosophy))) :time (MRPNode-7 / amr-unknown))

# ::id 9
# ::snt How can I help my dog adjust to a move?
# ::tok How can I help my dog adjust to a move ?
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0.1 6-7|0.0.0 9-10|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.471795 ::parser eager_oracle ::smatch 1.0 ::n_actions 35
# ::node	0	possible-01	1-2
# ::node	0.0	help-01	3-4
# ::node	0.0.0	adjust-01	6-7
# ::node	0.0.0.0	move-01	9-10
# ::node	0.0.0.1	dog	5-6
# ::node	0.0.1	i	2-3
# ::node	0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	adjust-01	ARG0	dog	0.0.0	0.0.0.1
# ::edge	adjust-01	ARG2	move-01	0.0.0	0.0.0.0
# ::edge	help-01	ARG0	i	0.0	0.0.1
# ::edge	help-01	ARG1	adjust-01	0.0	0.0.0
# ::edge	help-01	ARG2	dog	0.0	0.0.0.1
# ::edge	possible-01	ARG1	help-01	0	0.0
# ::edge	possible-01	manner	amr-unknown	0	0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / help-01 :ARG1 (MRPNode-2 / adjust-01 :ARG2 (MRPNode-3 / move-01) :ARG0 (MRPNode-5 / dog)) :ARG0 (MRPNode-4 / i) :ARG2 MRPNode-5) :manner (MRPNode-6 / amr-unknown))

# ::id 10
# ::snt How do I pump up water pressure in my shower?
# ::tok How do I pump up water pressure in my shower ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 5-6|0.0.0 6-7|0.0 9-10|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:35.476710 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	pump-01	3-4
# ::node	0.0	pressure	6-7
# ::node	0.0.0	water	5-6
# ::node	0.1	i	2-3
# ::node	0.2	shower	9-10
# ::node	0.3	amr-unknown	0-1
# ::root	0	pump-01
# ::edge	pressure	mod	water	0.0	0.0.0
# ::edge	pump-01	ARG0	i	0	0.1
# ::edge	pump-01	ARG2	shower	0	0.2
# ::edge	pump-01	manner	amr-unknown	0	0.3
# ::edge	pump-01	manner	pressure	0	0.0
(MRPNode-0 / pump-01 :manner (MRPNode-1 / pressure :mod (MRPNode-2 / water)) :ARG0 (MRPNode-3 / i) :ARG2 (MRPNode-4 / shower) :manner (MRPNode-5 / amr-unknown))

# ::id 11
# ::snt How do I make a height adjustable desk?
# ::tok How do I make a height adjustable desk ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 6-7|0.0.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.479771 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 26
# ::node	0	make-01	3-4
# ::node	0.0	desk	7-8
# ::node	0.0.0	adjust-01	6-7
# ::node	0.0.0.0	high-02	
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	make-01
# ::edge	adjust-01	ARG1	high-02	0.0.0	0.0.0.0
# ::edge	desk	ARG1-of	adjust-01	0.0	0.0.0
# ::edge	make-01	ARG0	i	0	0.1
# ::edge	make-01	ARG1	desk	0	0.0
# ::edge	make-01	manner	amr-unknown	0	0.2
(MRPNode-0 / make-01 :ARG1 (MRPNode-1 / desk :ARG1-of (MRPNode-2 / adjust-01 :ARG1 (MRPNode-3 / high-02))) :ARG0 (MRPNode-4 / i) :manner (MRPNode-5 / amr-unknown))

# ::id 12
# ::snt How can I find out why my washing machine trips the outlet?
# ::tok How can I find out why my washing machine trips the outlet ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.0+0.0.0.0 3-4|0.0 6-7|0.0.1 7-8|0.0.0.0.0.1.0 8-9|0.0.0.0.0.1 9-10|0.0.0.0.0 11-12|0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.510374 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	possible-01	1-2
# ::node	0.0	find-out-03	3-4
# ::node	0.0.0	thing	2-3
# ::node	0.0.0.0	cause-01	2-3
# ::node	0.0.0.0.0	trip-03	9-10
# ::node	0.0.0.0.0.0	outlet	11-12
# ::node	0.0.0.0.0.1	machine	8-9
# ::node	0.0.0.0.0.1.0	wash-01	7-8
# ::node	0.0.1	i	6-7
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	cause-01	ARG1	trip-03	0.0.0.0	0.0.0.0.0
# ::edge	find-out-03	ARG0	i	0.0	0.0.1
# ::edge	find-out-03	ARG1	thing	0.0	0.0.0
# ::edge	find-out-03	manner	amr-unknown	0.0	0.0.2
# ::edge	i	poss-of	machine	0.0.1	0.0.0.0.0.1
# ::edge	machine	ARG0-of	wash-01	0.0.0.0.0.1	0.0.0.0.0.1.0
# ::edge	possible-01	ARG1	find-out-03	0	0.0
# ::edge	thing	ARG0-of	cause-01	0.0.0	0.0.0.0
# ::edge	trip-03	ARG0	machine	0.0.0.0.0	0.0.0.0.0.1
# ::edge	trip-03	ARG1	outlet	0.0.0.0.0	0.0.0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / find-out-03 :ARG1 (MRPNode-2 / thing :ARG0-of (MRPNode-3 / cause-01 :ARG1 (MRPNode-4 / trip-03 :ARG1 (MRPNode-5 / outlet) :ARG0 (MRPNode-7 / machine :ARG0-of (MRPNode-8 / wash-01))))) :ARG0 (MRPNode-6 / i :poss-of MRPNode-7) :manner (MRPNode-9 / amr-unknown)))

# ::id 13
# ::snt What are the bus (coach) connections from Thessaloniki, Greece to Tbilisi, Georgia?
# ::tok What are the bus ( coach ) connections from Thessaloniki , Greece to Tbilisi , Georgia ?
# ::alignments 0-1|0.2 3-4|0.0 7-8|0 9-10|0.1+0.1.0+0.1.0.0 11-12|0.1.1+0.1.1.0+0.1.1.0.0 13-14|0.3+0.3.0+0.3.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.520750 ::parser eager_oracle ::smatch 0.8936170212765957 ::n_actions 37
# ::node	0	connect-01	7-8
# ::node	0.0	bus	3-4
# ::node	0.1	city	9-10
# ::node	0.1.0	name	9-10
# ::node	0.1.0.0	thessaloniki	9-10
# ::node	0.1.1	country	11-12
# ::node	0.1.1.0	name	11-12
# ::node	0.1.1.0.0	greece	11-12
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	city	13-14
# ::node	0.3.0	name	13-14
# ::node	0.3.0.0	tbilisi	13-14
# ::node	0.3.1	country	
# ::node	0.3.1.0	name	
# ::node	0.3.1.0.0	greece	
# ::root	0	connect-01
# ::edge	city	location	country	0.1	0.1.1
# ::edge	city	location	country	0.3	0.3.1
# ::edge	city	name	name	0.1	0.1.0
# ::edge	city	name	name	0.3	0.3.0
# ::edge	connect-01	ARG1	bus	0	0.0
# ::edge	connect-01	ARG2	city	0	0.1
# ::edge	connect-01	ARG3	amr-unknown	0	0.2
# ::edge	connect-01	ARG4	city	0	0.3
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	country	name	name	0.3.1	0.3.1.0
# ::edge	name	op1	greece	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	greece	0.3.1.0	0.3.1.0.0
# ::edge	name	op1	tbilisi	0.3.0	0.3.0.0
# ::edge	name	op1	thessaloniki	0.1.0	0.1.0.0
(MRPNode-0 / connect-01 :ARG1 (MRPNode-1 / bus) :ARG2 (MRPNode-2 / city :name (MRPNode-3 / name :op1 thessaloniki) :location (MRPNode-4 / country :name (MRPNode-5 / name :op1 greece))) :ARG3 (MRPNode-6 / amr-unknown) :ARG4 (MRPNode-7 / city :name (MRPNode-8 / name :op1 tbilisi) :location (MRPNode-9 / country :name (MRPNode-10 / name :op1 greece))))

# ::id 14
# ::snt How do I track investment performance in Quicken across rollovers?
# ::tok How do I track investment performance in Quicken across rollovers ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 4-5|0.0.0 5-6|0.0 7-8|0.0.1+0.0.1.0+0.0.1.0.0 8-9|0.3 9-10|0.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.527315 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	track-01	3-4
# ::node	0.0	perform-02	5-6
# ::node	0.0.0	invest-01	4-5
# ::node	0.0.1	company	7-8
# ::node	0.0.1.0	name	7-8
# ::node	0.0.1.0.0	quicken	7-8
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	across	8-9
# ::node	0.3.0	rollover	9-10
# ::root	0	track-01
# ::edge	across	op1	rollover	0.3	0.3.0
# ::edge	company	name	name	0.0.1	0.0.1.0
# ::edge	name	op1	quicken	0.0.1.0	0.0.1.0.0
# ::edge	perform-02	ARG0	invest-01	0.0	0.0.0
# ::edge	perform-02	location	company	0.0	0.0.1
# ::edge	track-01	ARG0	i	0	0.1
# ::edge	track-01	ARG1	perform-02	0	0.0
# ::edge	track-01	ARG2	amr-unknown	0	0.2
# ::edge	track-01	manner	across	0	0.3
(MRPNode-0 / track-01 :ARG1 (MRPNode-1 / perform-02 :ARG0 (MRPNode-2 / invest-01) :location (MRPNode-3 / company :name (MRPNode-4 / name :op1 quicken))) :ARG0 (MRPNode-5 / i) :ARG2 (MRPNode-6 / amr-unknown) :manner (MRPNode-7 / across :op1 (MRPNode-8 / rollover)))

# ::id 15
# ::snt Do I need to apply for a UK transit visa when I have a visitor visa?
# ::tok Do I need to apply for a UK transit visa when I have a visitor visa ?
# ::alignments 1-2|0.0.1 2-3|0 4-5|0.0 7-8|0.2.0.0+0.2.0.0.0+0.2.0.0.0.0 8-9|0.0.0.0 9-10|0.2.1 12-13|0.2 14-15|0.2.1.0+0.2.1.0.0 15-16|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.692592 ::parser eager_oracle ::smatch 0.8846153846153846 ::n_actions 56
# ::node	0	need-01	2-3
# ::node	0.0	apply-01	4-5
# ::node	0.0.0	visa	
# ::node	0.0.0.0	transit	8-9
# ::node	0.0.1	i	1-2
# ::node	0.1	amr-unknown	
# ::node	0.2	have-03	12-13
# ::node	0.2.0	visa	15-16
# ::node	0.2.0.0	country	7-8
# ::node	0.2.0.0.0	name	7-8
# ::node	0.2.0.0.0.0	uk	7-8
# ::node	0.2.1	visa	9-10
# ::node	0.2.1.0	person	14-15
# ::node	0.2.1.0.0	visit-01	14-15
# ::root	0	need-01
# ::edge	apply-01	ARG0	i	0.0	0.0.1
# ::edge	apply-01	ARG1	visa	0.0	0.0.0
# ::edge	country	name	name	0.2.0.0	0.2.0.0.0
# ::edge	have-03	ARG0	i	0.2	0.0.1
# ::edge	have-03	ARG1	visa	0.2	0.2.0
# ::edge	have-03	ARG1	visa	0.2	0.2.1
# ::edge	name	op1	uk	0.2.0.0.0	0.2.0.0.0.0
# ::edge	need-01	ARG0	i	0	0.0.1
# ::edge	need-01	ARG1	apply-01	0	0.0
# ::edge	need-01	time	amr-unknown	0	0.1
# ::edge	need-01	time	have-03	0	0.2
# ::edge	person	ARG0-of	visit-01	0.2.1.0	0.2.1.0.0
# ::edge	visa	mod	country	0.2.0	0.2.0.0
# ::edge	visa	mod	person	0.2.1	0.2.1.0
# ::edge	visa	mod	transit	0.0.0	0.0.0.0
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / apply-01 :ARG1 (MRPNode-2 / visa :mod (MRPNode-3 / transit)) :ARG0 (MRPNode-4 / i)) :ARG0 MRPNode-4 :time (MRPNode-5 / amr-unknown) :time (MRPNode-6 / have-03 :ARG0 MRPNode-4 :ARG1 (MRPNode-7 / visa :mod (MRPNode-8 / country :name (MRPNode-9 / name :op1 uk))) :ARG1 (MRPNode-10 / visa :mod (MRPNode-11 / person :ARG0-of (MRPNode-12 / visit-01)))))

# ::id 16
# ::snt Layover at Narita for 3 hours. Do i need a transit visa?
# ::tok Layover at Narita for 3 hours . Do i need a transit visa ?
# ::alignments 2-3|0.0.0+0.0.0.0+0.0.0.0.0 4-5|0.0.1.0 5-6|0.0.1+0.0.1.1 8-9|0.1.1 9-10|0.1 11-12|0.1.0.0 12-13|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.701378 ::parser eager_oracle ::smatch 0.7142857142857143 ::n_actions 39
# ::node	0	multi-sentence	
# ::node	0.0	drive-01	
# ::node	0.0.0	city	2-3
# ::node	0.0.0.0	name	2-3
# ::node	0.0.0.0.0	narita	2-3
# ::node	0.0.1	temporal-quantity	5-6
# ::node	0.0.1.0	3	4-5
# ::node	0.0.1.1	hour	5-6
# ::node	0.1	need-01	9-10
# ::node	0.1.0	visa	12-13
# ::node	0.1.0.0	transit	11-12
# ::node	0.1.1	i	8-9
# ::node	0.1.2	amr-unknown	
# ::root	0	multi-sentence
# ::edge	city	name	name	0.0.0	0.0.0.0
# ::edge	drive-01	ARG0	city	0.0	0.0.0
# ::edge	drive-01	duration	temporal-quantity	0.0	0.0.1
# ::edge	multi-sentence	snt1	drive-01	0	0.0
# ::edge	multi-sentence	snt2	need-01	0	0.1
# ::edge	name	op1	narita	0.0.0.0	0.0.0.0.0
# ::edge	need-01	ARG0	amr-unknown	0.1	0.1.2
# ::edge	need-01	ARG0	i	0.1	0.1.1
# ::edge	need-01	ARG1	visa	0.1	0.1.0
# ::edge	temporal-quantity	quant	3	0.0.1	0.0.1.0
# ::edge	temporal-quantity	unit	hour	0.0.1	0.0.1.1
# ::edge	visa	mod	transit	0.1.0	0.1.0.0
(MRPNode-0 / multi-sentence :snt1 (MRPNode-1 / drive-01 :ARG0 (MRPNode-2 / city :name (MRPNode-3 / name :op1 narita)) :duration (MRPNode-4 / temporal-quantity :quant 3 :unit (MRPNode-5 / hour))) :snt2 (MRPNode-6 / need-01 :ARG1 (MRPNode-7 / visa :mod (MRPNode-8 / transit)) :ARG0 (MRPNode-9 / i) :ARG0 (MRPNode-10 / amr-unknown)))

# ::id 17
# ::snt Is it ok to apply for more than one Phd student program?
# ::tok Is it ok to apply for more than one Phd student program ?
# ::alignments 2-3|0 4-5|0.0 6-7|0.0.0.0+0.0.0.0.0 8-9|0.0.0.0.0.0 10-11|0.0.0.1 11-12|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.708346 ::parser eager_oracle ::smatch 0.9285714285714286 ::n_actions 37
# ::node	0	okay-04	2-3
# ::node	0.0	apply-01	4-5
# ::node	0.0.0	program	11-12
# ::node	0.0.0.0	person	6-7
# ::node	0.0.0.0.0	more-than	6-7
# ::node	0.0.0.0.0.0	1	8-9
# ::node	0.0.0.1	study-01	10-11
# ::node	0.1	amr-unknown	
# ::root	0	okay-04
# ::edge	apply-01	ARG1	program	0.0	0.0.0
# ::edge	more-than	op1	1	0.0.0.0.0	0.0.0.0.0.0
# ::edge	okay-04	ARG1	amr-unknown	0	0.1
# ::edge	okay-04	ARG1	apply-01	0	0.0
# ::edge	person	quant	more-than	0.0.0.0	0.0.0.0.0
# ::edge	program	mod	person	0.0.0	0.0.0.0
# ::edge	program	mod	study-01	0.0.0	0.0.0.1
(MRPNode-0 / okay-04 :ARG1 (MRPNode-1 / apply-01 :ARG1 (MRPNode-2 / program :mod (MRPNode-3 / person :quant (MRPNode-4 / more-than :op1 1)) :mod (MRPNode-5 / study-01))) :ARG1 (MRPNode-6 / amr-unknown))

# ::id 18
# ::snt How do I remove paint from a wood floor?
# ::tok How do I remove paint from a wood floor ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0 7-8|0.2.0 8-9|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:35.711728 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	remove-01	3-4
# ::node	0.0	paint	4-5
# ::node	0.1	i	2-3
# ::node	0.2	floor	8-9
# ::node	0.2.0	wood	7-8
# ::node	0.3	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	floor	mod	wood	0.2	0.2.0
# ::edge	remove-01	ARG0	i	0	0.1
# ::edge	remove-01	ARG1	paint	0	0.0
# ::edge	remove-01	ARG2	floor	0	0.2
# ::edge	remove-01	manner	amr-unknown	0	0.3
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / paint) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / floor :mod (MRPNode-4 / wood)) :manner (MRPNode-5 / amr-unknown))

# ::id 19
# ::snt Does this beginning hook the reader?
# ::tok Does this beginning hook the reader ?
# ::alignments 1-2|0.1.0 2-3|0.1+0.1.1 3-4|0 5-6|0.0+0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.715236 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 29
# ::node	0	hook-01	3-4
# ::node	0.0	person	5-6
# ::node	0.0.0	read-01	5-6
# ::node	0.1	thing	2-3
# ::node	0.1.0	this	1-2
# ::node	0.1.1	begin-01	2-3
# ::node	0.2	amr-unknown	
# ::root	0	hook-01
# ::edge	hook-01	ARG0	thing	0	0.1
# ::edge	hook-01	ARG1	person	0	0.0
# ::edge	hook-01	ARG2	amr-unknown	0	0.2
# ::edge	person	ARG0-of	read-01	0.0	0.0.0
# ::edge	thing	ARG1-of	begin-01	0.1	0.1.1
# ::edge	thing	mod	this	0.1	0.1.0
(MRPNode-0 / hook-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / read-01)) :ARG0 (MRPNode-3 / thing :mod (MRPNode-4 / this) :ARG1-of (MRPNode-5 / begin-01)) :ARG2 (MRPNode-6 / amr-unknown))

# ::id 20
# ::snt How can I remove a really stuck screw?
# ::tok How can I remove a really stuck screw ?
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.0.2 3-4|0.0 5-6|0.0.1.0.0 6-7|0.0.1.0 7-8|0.0.1+0.0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:35.725370 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	possible-01	1-2
# ::node	0.0	remove-01	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	thing	7-8
# ::node	0.0.1.0	stick-01	6-7
# ::node	0.0.1.0.0	real-04	5-6
# ::node	0.0.1.1	screw-02	7-8
# ::node	0.0.2	i	2-3
# ::root	0	possible-01
# ::edge	possible-01	ARG1	remove-01	0	0.0
# ::edge	remove-01	ARG0	i	0.0	0.0.2
# ::edge	remove-01	ARG1	amr-unknown	0.0	0.0.0
# ::edge	remove-01	ARG1	thing	0.0	0.0.1
# ::edge	stick-01	ARG1-of	real-04	0.0.1.0	0.0.1.0.0
# ::edge	thing	ARG1-of	screw-02	0.0.1	0.0.1.1
# ::edge	thing	ARG1-of	stick-01	0.0.1	0.0.1.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / remove-01 :ARG1 (MRPNode-2 / amr-unknown) :ARG1 (MRPNode-3 / thing :ARG1-of (MRPNode-4 / stick-01 :ARG1-of (MRPNode-5 / real-04)) :ARG1-of (MRPNode-6 / screw-02)) :ARG0 (MRPNode-7 / i)))

# ::id 21
# ::snt What could be causing my GFCI to trip?
# ::tok What could be causing my GFCI to trip ?
# ::alignments 0-1|0.0.1 1-2|0 3-4|0.0 4-5|0.0.0.0.0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.730420 ::parser eager_oracle ::smatch 0.6153846153846153 ::n_actions 26
# ::node	0	possible-01	1-2
# ::node	0.0	cause-01	3-4
# ::node	0.0.0	trip-03	7-8
# ::node	0.0.0.0	person	
# ::node	0.0.0.0.0	have-rel-role-91	
# ::node	0.0.0.0.0.0	i	4-5
# ::node	0.0.0.0.0.1	practitioner	
# ::node	0.0.0.0.0.1.0	vice	
# ::node	0.0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	cause-01	ARG0	amr-unknown	0.0	0.0.1
# ::edge	cause-01	ARG1	trip-03	0.0	0.0.0
# ::edge	have-rel-role-91	ARG1	i	0.0.0.0.0	0.0.0.0.0.0
# ::edge	have-rel-role-91	ARG2	practitioner	0.0.0.0.0	0.0.0.0.0.1
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0.0	0.0.0.0.0
# ::edge	possible-01	ARG1	cause-01	0	0.0
# ::edge	practitioner	mod	vice	0.0.0.0.0.1	0.0.0.0.0.1.0
# ::edge	trip-03	ARG0	person	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / cause-01 :ARG1 (MRPNode-2 / trip-03 :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-rel-role-91 :ARG1 (MRPNode-5 / i) :ARG2 (MRPNode-6 / practitioner :mod (MRPNode-7 / vice))))) :ARG0 (MRPNode-8 / amr-unknown)))

# ::id 22
# ::snt How can I get my colleagues to stop interrupting me?
# ::tok How can I get my colleagues to stop interrupting me ?
# ::alignments 0-1|0.0.1 1-2|0 3-4|0.0 4-5|0.0.0 5-6|0.0.0.0+0.0.0.0.0 7-8|0.1 10-11|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.744803 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 39
# ::node	0	possible-01	1-2
# ::node	0.0	get-04	3-4
# ::node	0.0.0	i	4-5
# ::node	0.0.0.0	have-rel-role-91	5-6
# ::node	0.0.0.0.0	colleague	5-6
# ::node	0.0.0.0.1	person	
# ::node	0.0.1	amr-unknown	0-1
# ::node	0.1	stop-01	7-8
# ::node	0.1.0	interrupt-01	10-11
# ::root	0	possible-01
# ::edge	get-04	ARG0	i	0.0	0.0.0
# ::edge	get-04	manner	amr-unknown	0.0	0.0.1
# ::edge	have-rel-role-91	ARG0	person	0.0.0.0	0.0.0.0.1
# ::edge	have-rel-role-91	ARG2	colleague	0.0.0.0	0.0.0.0.0
# ::edge	i	ARG1-of	have-rel-role-91	0.0.0	0.0.0.0
# ::edge	interrupt-01	ARG0	person	0.1.0	0.0.0.0.1
# ::edge	possible-01	ARG1	get-04	0	0.0
# ::edge	possible-01	manner	stop-01	0	0.1
# ::edge	stop-01	ARG0	person	0.1	0.0.0.0.1
# ::edge	stop-01	ARG1	interrupt-01	0.1	0.1.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / get-04 :ARG0 (MRPNode-2 / i :ARG1-of (MRPNode-3 / have-rel-role-91 :ARG2 (MRPNode-4 / colleague) :ARG0 (MRPNode-8 / person))) :manner (MRPNode-5 / amr-unknown)) :manner (MRPNode-6 / stop-01 :ARG1 (MRPNode-7 / interrupt-01 :ARG0 MRPNode-8) :ARG0 MRPNode-8))

# ::id 23
# ::snt how to blackout a large bedroom window on a budget?
# ::tok how to blackout a large bedroom window on a budget ?
# ::alignments 0-1|0 4-5|0.0.0.0 5-6|0.0.0.1 6-7|0.0.0 9-10|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:35.748140 ::parser eager_oracle ::smatch 0.7000000000000001 ::n_actions 26
# ::node	0	amr-unknown	0-1
# ::node	0.0	block-01	
# ::node	0.0.0	window	6-7
# ::node	0.0.0.0	large	4-5
# ::node	0.0.0.1	bedroom	5-6
# ::node	0.0.1	budget-01	9-10
# ::root	0	amr-unknown
# ::edge	amr-unknown	manner-of	block-01	0	0.0
# ::edge	block-01	ARG1	window	0.0	0.0.0
# ::edge	block-01	ARG1-of	budget-01	0.0	0.0.1
# ::edge	window	mod	bedroom	0.0.0	0.0.0.1
# ::edge	window	mod	large	0.0.0	0.0.0.0
(MRPNode-0 / amr-unknown :manner-of (MRPNode-1 / block-01 :ARG1 (MRPNode-2 / window :mod (MRPNode-3 / large) :mod (MRPNode-4 / bedroom)) :ARG1-of (MRPNode-5 / budget-01)))

# ::id 24
# ::snt What type of pants are good for weight lifting?
# ::tok What type of pants are good for weight lifting ?
# ::alignments 0-1|0.0.0 1-2|0.0.0.0 3-4|0.0 5-6|0 7-8|0.1.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:35.752293 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	good-02	5-6
# ::node	0.0	pant	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.0.0	type	1-2
# ::node	0.1	lift-01	8-9
# ::node	0.1.0	weight	7-8
# ::root	0	good-02
# ::edge	amr-unknown	mod	type	0.0.0	0.0.0.0
# ::edge	good-02	ARG1	pant	0	0.0
# ::edge	good-02	ARG2	lift-01	0	0.1
# ::edge	lift-01	ARG1	weight	0.1	0.1.0
# ::edge	pant	mod	amr-unknown	0.0	0.0.0
(MRPNode-0 / good-02 :ARG1 (MRPNode-1 / pant :mod (MRPNode-2 / amr-unknown :mod (MRPNode-3 / type))) :ARG2 (MRPNode-4 / lift-01 :ARG1 (MRPNode-5 / weight)))

# ::id 25
# ::snt What is the difference between a Rollover IRA and a Roth IRA?
# ::tok What is the difference between a Rollover IRA and a Roth IRA ?
# ::alignments 0-1|0.0 3-4|0 6-8|0.1+0.1.0+0.1.0.0+0.1.0.1 10-11|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.757416 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	differ-02	3-4
# ::node	0.0	amr-unknown	0-1
# ::node	0.1	product	6-8
# ::node	0.1.0	name	6-8
# ::node	0.1.0.0	rollover	6-8
# ::node	0.1.0.1	ira	6-8
# ::node	0.2	product	10-11
# ::node	0.2.0	name	10-11
# ::node	0.2.0.0	roth	10-11
# ::root	0	differ-02
# ::edge	differ-02	ARG1	amr-unknown	0	0.0
# ::edge	differ-02	ARG1	product	0	0.1
# ::edge	differ-02	ARG1	product	0	0.2
# ::edge	name	op1	rollover	0.1.0	0.1.0.0
# ::edge	name	op1	roth	0.2.0	0.2.0.0
# ::edge	name	op2	ira	0.1.0	0.1.0.1
# ::edge	product	name	name	0.1	0.1.0
# ::edge	product	name	name	0.2	0.2.0
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / amr-unknown) :ARG1 (MRPNode-2 / product :name (MRPNode-3 / name :op1 rollover :op2 ira)) :ARG1 (MRPNode-4 / product :name (MRPNode-5 / name :op1 roth)))

# ::id 26
# ::snt How to deal with the child when both the parents are not on the same page?
# ::tok How to deal with the child when both the parents are not on the same page ?
# ::alignments 0-1|0.1 2-3|0.0 5-6|0.0.0 7-8|0.2.1+0.2.1.0 9-10|0.2.1.1+0.2.1.1.0 11-12|0.2.0 12-13|0.2 14-15|0.2.2.0 15-16|0.2.2 ::annotator aligner3.py ::date 2021-03-11 23:00:35.769342 ::parser eager_oracle ::smatch 0.8095238095238095 ::n_actions 52
# ::node	0	have-manner-91	
# ::node	0.0	deal-01	2-3
# ::node	0.0.0	child	5-6
# ::node	0.1	amr-unknown	0-1
# ::node	0.2	be-located-at-91	12-13
# ::node	0.2.0	-	11-12
# ::node	0.2.1	person	7-8
# ::node	0.2.1.0	both	7-8
# ::node	0.2.1.1	have-rel-role-91	9-10
# ::node	0.2.1.1.0	parent	9-10
# ::node	0.2.2	page	15-16
# ::node	0.2.2.0	same-01	14-15
# ::root	0	have-manner-91
# ::edge	be-located-at-91	ARG1	person	0.2	0.2.1
# ::edge	be-located-at-91	ARG2	page	0.2	0.2.2
# ::edge	be-located-at-91	polarity	-	0.2	0.2.0
# ::edge	deal-01	ARG1	child	0.0	0.0.0
# ::edge	have-manner-91	ARG1	deal-01	0	0.0
# ::edge	have-manner-91	ARG2	amr-unknown	0	0.1
# ::edge	have-manner-91	condition	be-located-at-91	0	0.2
# ::edge	have-rel-role-91	ARG2	parent	0.2.1.1	0.2.1.1.0
# ::edge	page	ARG1-of	same-01	0.2.2	0.2.2.0
# ::edge	person	ARG0-of	both	0.2.1	0.2.1.0
# ::edge	person	ARG0-of	have-rel-role-91	0.2.1	0.2.1.1
(MRPNode-0 / have-manner-91 :ARG1 (MRPNode-1 / deal-01 :ARG1 (MRPNode-2 / child)) :ARG2 (MRPNode-3 / amr-unknown) :condition (MRPNode-4 / be-located-at-91 :polarity - :ARG1 (MRPNode-5 / person :ARG0-of (MRPNode-6 / both) :ARG0-of (MRPNode-7 / have-rel-role-91 :ARG2 (MRPNode-8 / parent))) :ARG2 (MRPNode-9 / page :ARG1-of (MRPNode-10 / same-01))))

# ::id 27
# ::snt How do I pump up water pressure in my shower?
# ::tok How do I pump up water pressure in my shower ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 5-6|0.0.0 6-7|0.0 9-10|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:35.773960 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	pump-01	3-4
# ::node	0.0	pressure	6-7
# ::node	0.0.0	water	5-6
# ::node	0.1	i	2-3
# ::node	0.2	shower	9-10
# ::node	0.3	amr-unknown	0-1
# ::root	0	pump-01
# ::edge	pressure	mod	water	0.0	0.0.0
# ::edge	pump-01	ARG0	i	0	0.1
# ::edge	pump-01	ARG2	shower	0	0.2
# ::edge	pump-01	manner	amr-unknown	0	0.3
# ::edge	pump-01	manner	pressure	0	0.0
(MRPNode-0 / pump-01 :manner (MRPNode-1 / pressure :mod (MRPNode-2 / water)) :ARG0 (MRPNode-3 / i) :ARG2 (MRPNode-4 / shower) :manner (MRPNode-5 / amr-unknown))

# ::id 28
# ::snt Greek type D visa: Can I travel to other Schengen countries?
# ::tok Greek type D visa : Can I travel to other Schengen countries ?
# ::alignments 0-1|0.0.1.0+0.0.1.0.0 1-2|0.0.0 2-3|0.0.0.0.0 3-4|0.0 5-6|0.1 6-7|0.1.0.0 7-8|0.1.0 9-10|0.1.0.1.0 10-11|0.1.0.1.1+0.1.0.1.1.0+0.1.0.1.1.0.0 11-12|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:35.787162 ::parser eager_oracle ::smatch 0.6666666666666665 ::n_actions 42
# ::node	0	multi-sentence	
# ::node	0.0	visa	3-4
# ::node	0.0.0	type	1-2
# ::node	0.0.0.0	score-on-scale-91	
# ::node	0.0.0.0.0	d	2-3
# ::node	0.0.1	country	11-12
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	greek	0-1
# ::node	0.1	possible-01	5-6
# ::node	0.1.0	travel-01	7-8
# ::node	0.1.0.0	i	6-7
# ::node	0.1.0.1	country	
# ::node	0.1.0.1.0	other	9-10
# ::node	0.1.0.1.1	continent	10-11
# ::node	0.1.0.1.1.0	name	10-11
# ::node	0.1.0.1.1.0.0	schengen	10-11
# ::node	0.1.1	amr-unknown	
# ::root	0	multi-sentence
# ::edge	continent	name	name	0.1.0.1.1	0.1.0.1.1.0
# ::edge	country	location	continent	0.1.0.1	0.1.0.1.1
# ::edge	country	mod	other	0.1.0.1	0.1.0.1.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	multi-sentence	snt1	visa	0	0.0
# ::edge	multi-sentence	snt2	possible-01	0	0.1
# ::edge	name	op1	greek	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	schengen	0.1.0.1.1.0	0.1.0.1.1.0.0
# ::edge	possible-01	ARG1	amr-unknown	0.1	0.1.1
# ::edge	possible-01	ARG1	travel-01	0.1	0.1.0
# ::edge	score-on-scale-91	arg1	d	0.0.0.0	0.0.0.0.0
# ::edge	travel-01	ARG0	i	0.1.0	0.1.0.0
# ::edge	travel-01	ARG4	country	0.1.0	0.1.0.1
# ::edge	type	mod	score-on-scale-91	0.0.0	0.0.0.0
# ::edge	visa	mod	country	0.0	0.0.1
# ::edge	visa	mod	type	0.0	0.0.0
(MRPNode-0 / multi-sentence :snt1 (MRPNode-1 / visa :mod (MRPNode-2 / type :mod (MRPNode-3 / score-on-scale-91 :arg1 d)) :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 greek))) :snt2 (MRPNode-6 / possible-01 :ARG1 (MRPNode-7 / travel-01 :ARG0 (MRPNode-8 / i) :ARG4 (MRPNode-9 / country :mod (MRPNode-10 / other) :location (MRPNode-11 / continent :name (MRPNode-12 / name :op1 schengen)))) :ARG1 (MRPNode-13 / amr-unknown)))

# ::id 29
# ::snt What can I do about out of square rough opening for new windows?
# ::tok What can I do about out of square rough opening for new windows ?
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.2 7-8|0.0.2.0 8-9|0.0.2.0.0 9-10|0.0.1.0 11-12|0.0.1.0.0.0 12-13|0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.798573 ::parser eager_oracle ::smatch 1.0 ::n_actions 50
# ::node	0	possible-01	1-2
# ::node	0.0	do-02	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	i	2-3
# ::node	0.0.1.0	open-01	9-10
# ::node	0.0.1.0.0	window	12-13
# ::node	0.0.1.0.0.0	new-01	11-12
# ::node	0.0.2	out-06	5-6
# ::node	0.0.2.0	square	7-8
# ::node	0.0.2.0.0	rough-04	8-9
# ::root	0	possible-01
# ::edge	do-02	ARG0	i	0.0	0.0.1
# ::edge	do-02	ARG1	amr-unknown	0.0	0.0.0
# ::edge	do-02	ARG2	out-06	0.0	0.0.2
# ::edge	i	ARG0-of	open-01	0.0.1	0.0.1.0
# ::edge	open-01	ARG1	window	0.0.1.0	0.0.1.0.0
# ::edge	out-06	ARG1	i	0.0.2	0.0.1
# ::edge	out-06	ARG2	open-01	0.0.2	0.0.1.0
# ::edge	out-06	ARG2	square	0.0.2	0.0.2.0
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	square	quant	rough-04	0.0.2.0	0.0.2.0.0
# ::edge	window	ARG1-of	new-01	0.0.1.0.0	0.0.1.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / amr-unknown) :ARG0 (MRPNode-3 / i :ARG0-of (MRPNode-4 / open-01 :ARG1 (MRPNode-5 / window :ARG1-of (MRPNode-6 / new-01)))) :ARG2 (MRPNode-7 / out-06 :ARG1 MRPNode-3 :ARG2 MRPNode-4 :ARG2 (MRPNode-8 / square :quant (MRPNode-9 / rough-04)))))

# ::id 30
# ::snt How to remove construction adhesive from concrete?
# ::tok How to remove construction adhesive from concrete ?
# ::alignments 0-1|0.2 2-3|0 3-4|0.0.0 4-5|0.0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:35.801348 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	remove-01	2-3
# ::node	0.0	adhesive	4-5
# ::node	0.0.0	construct-01	3-4
# ::node	0.1	concrete	6-7
# ::node	0.2	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	adhesive	topic	construct-01	0.0	0.0.0
# ::edge	remove-01	ARG1	adhesive	0	0.0
# ::edge	remove-01	ARG2	concrete	0	0.1
# ::edge	remove-01	manner	amr-unknown	0	0.2
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / adhesive :topic (MRPNode-2 / construct-01)) :ARG2 (MRPNode-3 / concrete) :manner (MRPNode-4 / amr-unknown))

# ::id 31
# ::snt Must I enter Europe with Schengen visa from the country where I applied?
# ::tok Must I enter Europe with Schengen visa from the country where I applied ?
# ::alignments 1-2|0.0 2-3|0.1 3-4|0.1.1+0.1.1.0+0.1.1.0.0 5-6|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 6-7|0.1.0 9-10|0.0.0.0 12-13|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.813603 ::parser eager_oracle ::smatch 0.8333333333333333 ::n_actions 38
# ::node	0	obligate-01	
# ::node	0.0	i	1-2
# ::node	0.0.0	apply-01	12-13
# ::node	0.0.0.0	country	9-10
# ::node	0.1	enter-01	2-3
# ::node	0.1.0	visa	6-7
# ::node	0.1.0.0	company	5-6
# ::node	0.1.0.0.0	name	5-6
# ::node	0.1.0.0.0.0	schengen	5-6
# ::node	0.1.1	continent	3-4
# ::node	0.1.1.0	name	3-4
# ::node	0.1.1.0.0	europe	3-4
# ::node	0.2	amr-unknown	
# ::root	0	obligate-01
# ::edge	apply-01	ARG1	country	0.0.0	0.0.0.0
# ::edge	company	name	name	0.1.0.0	0.1.0.0.0
# ::edge	continent	name	name	0.1.1	0.1.1.0
# ::edge	enter-01	ARG0	i	0.1	0.0
# ::edge	enter-01	ARG1	continent	0.1	0.1.1
# ::edge	enter-01	ARG1	visa	0.1	0.1.0
# ::edge	i	ARG0-of	apply-01	0.0	0.0.0
# ::edge	name	op1	europe	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	schengen	0.1.0.0.0	0.1.0.0.0.0
# ::edge	obligate-01	ARG1	i	0	0.0
# ::edge	obligate-01	ARG2	amr-unknown	0	0.2
# ::edge	obligate-01	ARG2	enter-01	0	0.1
# ::edge	visa	mod	company	0.1.0	0.1.0.0
# ::edge	visa	mod	country	0.1.0	0.0.0.0
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / i :ARG0-of (MRPNode-2 / apply-01 :ARG1 (MRPNode-3 / country))) :ARG2 (MRPNode-4 / enter-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-5 / visa :mod MRPNode-3 :mod (MRPNode-6 / company :name (MRPNode-7 / name :op1 schengen))) :ARG1 (MRPNode-8 / continent :name (MRPNode-9 / name :op1 europe))) :ARG2 (MRPNode-10 / amr-unknown))

# ::id 32
# ::snt What could be causing my toilet to back up?
# ::tok What could be causing my toilet to back up ?
# ::alignments 0-1|0.0.1 1-2|0 3-4|0.0 4-5|0.0.0.0.0 5-6|0.0.0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.818504 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	possible-01	1-2
# ::node	0.0	cause-01	3-4
# ::node	0.0.0	back-up-04	7-8
# ::node	0.0.0.0	toilet	5-6
# ::node	0.0.0.0.0	i	4-5
# ::node	0.0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	back-up-04	ARG1	toilet	0.0.0	0.0.0.0
# ::edge	cause-01	ARG0	amr-unknown	0.0	0.0.1
# ::edge	cause-01	ARG1	back-up-04	0.0	0.0.0
# ::edge	possible-01	ARG1	cause-01	0	0.0
# ::edge	toilet	poss	i	0.0.0.0	0.0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / cause-01 :ARG1 (MRPNode-2 / back-up-04 :ARG1 (MRPNode-3 / toilet :poss (MRPNode-4 / i))) :ARG0 (MRPNode-5 / amr-unknown)))

# ::id 33
# ::snt Why is my dryer taking longer to dry clothes?
# ::tok Why is my dryer taking longer to dry clothes ?
# ::alignments 2-3|0.1.0.0.0 3-4|0.1.0.0 4-5|0+0.2 5-6|0.0.1 7-8|0.1 8-9|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:35.832202 ::parser eager_oracle ::smatch 0.6470588235294118 ::n_actions 32
# ::node	0	take-10	4-5
# ::node	0.0	have-degree-91	
# ::node	0.0.0	more	
# ::node	0.0.1	long-03	5-6
# ::node	0.1	dry-02	7-8
# ::node	0.1.0	product	
# ::node	0.1.0.0	dry-08	3-4
# ::node	0.1.0.0.0	i	2-3
# ::node	0.1.1	clothes	8-9
# ::node	0.2	cause-01	4-5
# ::node	0.2.0	amr-unknown	
# ::root	0	take-10
# ::edge	cause-01	ARG0	amr-unknown	0.2	0.2.0
# ::edge	dry-02	ARG1	clothes	0.1	0.1.1
# ::edge	dry-02	ARG1	product	0.1	0.1.0
# ::edge	dry-08	ARG1	i	0.1.0.0	0.1.0.0.0
# ::edge	have-degree-91	ARG2	long-03	0.0	0.0.1
# ::edge	have-degree-91	ARG2	more	0.0	0.0.0
# ::edge	product	ARG0-of	dry-08	0.1.0	0.1.0.0
# ::edge	take-10	ARG0	dry-02	0	0.1
# ::edge	take-10	ARG1	have-degree-91	0	0.0
# ::edge	take-10	ARG1-of	cause-01	0	0.2
(MRPNode-0 / take-10 :ARG1 (MRPNode-1 / have-degree-91 :ARG2 (MRPNode-2 / more) :ARG2 (MRPNode-3 / long-03)) :ARG0 (MRPNode-4 / dry-02 :ARG1 (MRPNode-5 / product :ARG0-of (MRPNode-6 / dry-08 :ARG1 (MRPNode-7 / i))) :ARG1 (MRPNode-8 / clothes)) :ARG1-of (MRPNode-9 / cause-01 :ARG0 (MRPNode-10 / amr-unknown)))

# ::id 34
# ::snt What are some good strength exercises for marathon runners?
# ::tok What are some good strength exercises for marathon runners ?
# ::alignments 0-1|0.0 2-3|0.3 3-4|0.2 5-6|0 7-8|0.1+0.1.0 8-9|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:35.836546 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	exercise-02	5-6
# ::node	0.0	amr-unknown	0-1
# ::node	0.1	person	7-8
# ::node	0.1.0	marathon	7-8
# ::node	0.1.1	run-02	8-9
# ::node	0.2	good-02	3-4
# ::node	0.3	some	2-3
# ::root	0	exercise-02
# ::edge	exercise-02	ARG0	person	0	0.1
# ::edge	exercise-02	ARG1	amr-unknown	0	0.0
# ::edge	exercise-02	ARG1-of	good-02	0	0.2
# ::edge	exercise-02	quant	some	0	0.3
# ::edge	person	ARG0-of	marathon	0.1	0.1.0
# ::edge	person	ARG0-of	run-02	0.1	0.1.1
(MRPNode-0 / exercise-02 :ARG1 (MRPNode-1 / amr-unknown) :ARG0 (MRPNode-2 / person :ARG0-of (MRPNode-3 / marathon) :ARG0-of (MRPNode-4 / run-02)) :ARG1-of (MRPNode-5 / good-02) :quant (MRPNode-6 / some))

# ::id 35
# ::snt Which way does the air flow through my furnace?
# ::tok Which way does the air flow through my furnace ?
# ::alignments 4-5|0.0 5-6|0 7-8|0.1.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:35.839277 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 24
# ::node	0	flow-01	5-6
# ::node	0.0	air	4-5
# ::node	0.1	furnace	8-9
# ::node	0.1.0	i	7-8
# ::node	0.2	amr-unknown	
# ::root	0	flow-01
# ::edge	flow-01	ARG1	air	0	0.0
# ::edge	flow-01	path	amr-unknown	0	0.2
# ::edge	flow-01	path	furnace	0	0.1
# ::edge	furnace	poss	i	0.1	0.1.0
(MRPNode-0 / flow-01 :ARG1 (MRPNode-1 / air) :path (MRPNode-2 / furnace :poss (MRPNode-3 / i)) :path (MRPNode-4 / amr-unknown))

# ::id 36
# ::snt Why is my washing machine making this sound?
# ::tok Why is my washing machine making this sound ?
# ::alignments 2-3|0.0.0.1 3-4|0.0.0.0 4-5|0.0.0 6-7|0.0.1 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:35.843154 ::parser eager_oracle ::smatch 0.75 ::n_actions 26
# ::node	0	cause-01	
# ::node	0.0	sound-01	7-8
# ::node	0.0.0	machine	4-5
# ::node	0.0.0.0	wash-01	3-4
# ::node	0.0.0.1	i	2-3
# ::node	0.0.1	this	6-7
# ::node	0.1	amr-unknown	
# ::root	0	cause-01
# ::edge	cause-01	ARG0	amr-unknown	0	0.1
# ::edge	cause-01	ARG1	sound-01	0	0.0
# ::edge	machine	ARG0-of	wash-01	0.0.0	0.0.0.0
# ::edge	machine	poss	i	0.0.0	0.0.0.1
# ::edge	sound-01	ARG1	machine	0.0	0.0.0
# ::edge	sound-01	ARG2	this	0.0	0.0.1
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / sound-01 :ARG1 (MRPNode-2 / machine :ARG0-of (MRPNode-3 / wash-01) :poss (MRPNode-4 / i)) :ARG2 (MRPNode-5 / this)) :ARG0 (MRPNode-6 / amr-unknown))

# ::id 37
# ::snt How do I convert a ceiling fan with 2 separate wall switches to a separate fan & light switch?
# ::tok How do I convert a ceiling fan with 2 separate wall switches to a separate fan & light switch ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 5-6|0.0.0 6-7|0.0 7-8|0.2.1 8-9|0.2.1.0.0 9-10|0.0.1.0.1 10-11|0.0.1.0.0+0.2.1.0.1 11-12|0.0.1.0+0.2.1.0 14-15|0.2.0 18-19|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:36.154626 ::parser eager_oracle ::smatch 0.9285714285714286 ::n_actions 66
# ::node	0	convert-01	3-4
# ::node	0.0	fan	6-7
# ::node	0.0.0	ceiling	5-6
# ::node	0.0.1	have-03	
# ::node	0.0.1.0	switch	11-12
# ::node	0.0.1.0.0	wall	10-11
# ::node	0.0.1.0.1	separate-02	9-10
# ::node	0.1	i	2-3
# ::node	0.2	switch	18-19
# ::node	0.2.0	separate-02	14-15
# ::node	0.2.1	and	7-8
# ::node	0.2.1.0	switch	11-12
# ::node	0.2.1.0.0	2	8-9
# ::node	0.2.1.0.1	wall	10-11
# ::node	0.3	amr-unknown	0-1
# ::root	0	convert-01
# ::edge	and	op2	switch	0.2.1	0.2.1.0
# ::edge	convert-01	ARG0	i	0	0.1
# ::edge	convert-01	ARG1	fan	0	0.0
# ::edge	convert-01	ARG2	switch	0	0.2
# ::edge	convert-01	manner	amr-unknown	0	0.3
# ::edge	fan	ARG0-of	have-03	0.0	0.0.1
# ::edge	fan	mod	ceiling	0.0	0.0.0
# ::edge	have-03	ARG1	switch	0.0.1	0.0.1.0
# ::edge	switch	ARG0-of	and	0.2	0.2.1
# ::edge	switch	ARG1-of	separate-02	0.0.1.0	0.0.1.0.1
# ::edge	switch	ARG1-of	separate-02	0.2	0.2.0
# ::edge	switch	ARG1-of	wall	0.0.1.0	0.0.1.0.0
# ::edge	switch	quant	2	0.2.1.0	0.2.1.0.0
# ::edge	switch	quant	wall	0.2.1.0	0.2.1.0.1
(MRPNode-0 / convert-01 :ARG1 (MRPNode-1 / fan :mod (MRPNode-2 / ceiling) :ARG0-of (MRPNode-3 / have-03 :ARG1 (MRPNode-4 / switch :ARG1-of (MRPNode-5 / wall) :ARG1-of (MRPNode-6 / separate-02)))) :ARG0 (MRPNode-7 / i) :ARG2 (MRPNode-8 / switch :ARG1-of (MRPNode-9 / separate-02) :ARG0-of (MRPNode-10 / and :op2 (MRPNode-11 / switch :quant 2 :quant (MRPNode-12 / wall)))) :manner (MRPNode-13 / amr-unknown))

# ::id 38
# ::snt How can I repair a towel bar with one end ripped out of the wall?
# ::tok How can I repair a towel bar with one end ripped out of the wall ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0.0 6-7|0.0.0 8-9|0.0.0.1.0.0 9-10|0.0.0.1.0 10-11|0.0.0.1 14-15|0.0.0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:36.164202 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	possible-01	1-2
# ::node	0.0	repair-01	3-4
# ::node	0.0.0	bar	6-7
# ::node	0.0.0.0	towel	5-6
# ::node	0.0.0.1	rip-01	10-11
# ::node	0.0.0.1.0	end	9-10
# ::node	0.0.0.1.0.0	1	8-9
# ::node	0.0.0.1.1	wall	14-15
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	bar	ARG1-of	rip-01	0.0.0	0.0.0.1
# ::edge	bar	mod	towel	0.0.0	0.0.0.0
# ::edge	end	quant	1	0.0.0.1.0	0.0.0.1.0.0
# ::edge	possible-01	ARG1	repair-01	0	0.0
# ::edge	repair-01	ARG0	i	0.0	0.0.1
# ::edge	repair-01	ARG1	bar	0.0	0.0.0
# ::edge	repair-01	manner	amr-unknown	0.0	0.0.2
# ::edge	rip-01	ARG1	end	0.0.0.1	0.0.0.1.0
# ::edge	rip-01	ARG2	wall	0.0.0.1	0.0.0.1.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / repair-01 :ARG1 (MRPNode-2 / bar :mod (MRPNode-3 / towel) :ARG1-of (MRPNode-4 / rip-01 :ARG1 (MRPNode-5 / end :quant 1) :ARG2 (MRPNode-6 / wall))) :ARG0 (MRPNode-7 / i) :manner (MRPNode-8 / amr-unknown)))

# ::id 39
# ::snt How can I remove a really stuck screw?
# ::tok How can I remove a really stuck screw ?
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.0.2 3-4|0.0 5-6|0.0.1.0.0 6-7|0.0.1.0 7-8|0.0.1+0.0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:36.173729 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	possible-01	1-2
# ::node	0.0	remove-01	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	thing	7-8
# ::node	0.0.1.0	stick-01	6-7
# ::node	0.0.1.0.0	real-04	5-6
# ::node	0.0.1.1	screw-02	7-8
# ::node	0.0.2	i	2-3
# ::root	0	possible-01
# ::edge	possible-01	ARG1	remove-01	0	0.0
# ::edge	remove-01	ARG0	i	0.0	0.0.2
# ::edge	remove-01	ARG1	amr-unknown	0.0	0.0.0
# ::edge	remove-01	ARG1	thing	0.0	0.0.1
# ::edge	stick-01	ARG1-of	real-04	0.0.1.0	0.0.1.0.0
# ::edge	thing	ARG1-of	screw-02	0.0.1	0.0.1.1
# ::edge	thing	ARG1-of	stick-01	0.0.1	0.0.1.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / remove-01 :ARG1 (MRPNode-2 / amr-unknown) :ARG1 (MRPNode-3 / thing :ARG1-of (MRPNode-4 / stick-01 :ARG1-of (MRPNode-5 / real-04)) :ARG1-of (MRPNode-6 / screw-02)) :ARG0 (MRPNode-7 / i)))

# ::id 40
# ::snt What are refereed and non-refereed journals?
# ::tok What are refereed and non - refereed journals ?
# ::alignments 0-1|0.2 3-4|0 5-6|0.1.0 7-8|0.0+0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:36.178879 ::parser eager_oracle ::smatch 0.8181818181818181 ::n_actions 28
# ::node	0	and	3-4
# ::node	0.0	journal	7-8
# ::node	0.0.0	require-01	
# ::node	0.1	journal	7-8
# ::node	0.1.0	-	5-6
# ::node	0.1.1	require-01	
# ::node	0.2	amr-unknown	0-1
# ::root	0	and
# ::edge	and	domain	amr-unknown	0	0.2
# ::edge	and	op1	journal	0	0.0
# ::edge	and	op2	journal	0	0.1
# ::edge	journal	ARG1-of	require-01	0.0	0.0.0
# ::edge	journal	ARG1-of	require-01	0.1	0.1.1
# ::edge	journal	polarity	-	0.1	0.1.0
(MRPNode-0 / and :op1 (MRPNode-1 / journal :ARG1-of (MRPNode-2 / require-01)) :op2 (MRPNode-3 / journal :polarity - :ARG1-of (MRPNode-4 / require-01)) :domain (MRPNode-5 / amr-unknown))

# ::id 41
# ::snt How can I prepare this old exterior wall for painting?
# ::tok How can I prepare this old exterior wall for painting ?
# ::alignments 0-1|0.0.3 1-2|0 2-3|0.0.1 3-4|0.0 4-5|0.0.0.1 5-6|0.0.0.0 6-7|0.0.0.2 7-8|0.0.0 9-10|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:36.185498 ::parser eager_oracle ::smatch 1.0 ::n_actions 41
# ::node	0	possible-01	1-2
# ::node	0.0	prepare-02	3-4
# ::node	0.0.0	wall	7-8
# ::node	0.0.0.0	old	5-6
# ::node	0.0.0.1	this	4-5
# ::node	0.0.0.2	exterior	6-7
# ::node	0.0.1	i	2-3
# ::node	0.0.2	paint-02	9-10
# ::node	0.0.3	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	possible-01	ARG1	prepare-02	0	0.0
# ::edge	prepare-02	ARG0	i	0.0	0.0.1
# ::edge	prepare-02	ARG1	wall	0.0	0.0.0
# ::edge	prepare-02	ARG2	paint-02	0.0	0.0.2
# ::edge	prepare-02	manner	amr-unknown	0.0	0.0.3
# ::edge	wall	mod	exterior	0.0.0	0.0.0.2
# ::edge	wall	mod	old	0.0.0	0.0.0.0
# ::edge	wall	mod	this	0.0.0	0.0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / prepare-02 :ARG1 (MRPNode-2 / wall :mod (MRPNode-3 / old) :mod (MRPNode-4 / this) :mod (MRPNode-5 / exterior)) :ARG0 (MRPNode-6 / i) :ARG2 (MRPNode-7 / paint-02) :manner (MRPNode-8 / amr-unknown)))

# ::id 42
# ::snt What can I do to fix store-bought mayonnaise that split?
# ::tok What can I do to fix store - bought mayonnaise that split ?
# ::alignments 0-1|0.0.1 1-2|0 2-3|0.0.0.1 3-4|0.0 5-6|0.0.0 6-7|0.0.0.0.0.0 8-9|0.0.0.0.0 9-10|0.0.0.0 11-12|0.0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:36.194828 ::parser eager_oracle ::smatch 1.0 ::n_actions 45
# ::node	0	possible-01	1-2
# ::node	0.0	do-02	3-4
# ::node	0.0.0	fix-02	5-6
# ::node	0.0.0.0	mayonnaise	9-10
# ::node	0.0.0.0.0	buy-01	8-9
# ::node	0.0.0.0.0.0	store	6-7
# ::node	0.0.0.0.1	split-01	11-12
# ::node	0.0.0.1	i	2-3
# ::node	0.0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	buy-01	ARG0	store	0.0.0.0.0	0.0.0.0.0.0
# ::edge	do-02	ARG0	i	0.0	0.0.0.1
# ::edge	do-02	ARG1	amr-unknown	0.0	0.0.1
# ::edge	do-02	ARG1	fix-02	0.0	0.0.0
# ::edge	fix-02	ARG0	i	0.0.0	0.0.0.1
# ::edge	fix-02	ARG1	mayonnaise	0.0.0	0.0.0.0
# ::edge	mayonnaise	ARG1-of	buy-01	0.0.0.0	0.0.0.0.0
# ::edge	mayonnaise	ARG1-of	split-01	0.0.0.0	0.0.0.0.1
# ::edge	possible-01	ARG1	do-02	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / fix-02 :ARG1 (MRPNode-3 / mayonnaise :ARG1-of (MRPNode-4 / buy-01 :ARG0 (MRPNode-5 / store)) :ARG1-of (MRPNode-6 / split-01)) :ARG0 (MRPNode-7 / i)) :ARG0 MRPNode-7 :ARG1 (MRPNode-8 / amr-unknown)))

# ::id 43
# ::snt Should I negotiate if I'm offered more than what I initially asked for?
# ::tok Should I negotiate if I 'm offered more than what I initially asked for ?
# ::alignments 0-1|0 1-2|0.0.0 2-3|0.0 4-5|0.0.1.0 6-7|0.0.1 7-8|0.0.1.0.0.0 9-10|0.1 10-11|0.0.0.0.0 11-12|0.0.0.0.1 12-13|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:36.272535 ::parser eager_oracle ::smatch 0.8837209302325582 ::n_actions 49
# ::node	0	recommend-01	0-1
# ::node	0.0	negotiate-01	2-3
# ::node	0.0.0	i	1-2
# ::node	0.0.0.0	ask-02	12-13
# ::node	0.0.0.0.0	thing	10-11
# ::node	0.0.0.0.1	initial	11-12
# ::node	0.0.1	offer-01	6-7
# ::node	0.0.1.0	thing	4-5
# ::node	0.0.1.0.0	have-quant-91	
# ::node	0.0.1.0.0.0	more	7-8
# ::node	0.1	amr-unknown	9-10
# ::root	0	recommend-01
# ::edge	ask-02	ARG1	thing	0.0.0.0	0.0.0.0.0
# ::edge	ask-02	time	initial	0.0.0.0	0.0.0.0.1
# ::edge	have-quant-91	ARG1	thing	0.0.1.0.0	0.0.0.0.0
# ::edge	have-quant-91	ARG3	more	0.0.1.0.0	0.0.1.0.0.0
# ::edge	i	ARG0-of	ask-02	0.0.0	0.0.0.0
# ::edge	negotiate-01	ARG0	i	0.0	0.0.0
# ::edge	negotiate-01	ARG2	offer-01	0.0	0.0.1
# ::edge	offer-01	ARG0	i	0.0.1	0.0.0
# ::edge	offer-01	ARG1	thing	0.0.1	0.0.1.0
# ::edge	recommend-01	ARG1	negotiate-01	0	0.0
# ::edge	recommend-01	ARG2	amr-unknown	0	0.1
# ::edge	thing	ARG1-of	have-quant-91	0.0.1.0	0.0.1.0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / negotiate-01 :ARG0 (MRPNode-2 / i :ARG0-of (MRPNode-3 / ask-02 :ARG1 (MRPNode-4 / thing) :time (MRPNode-5 / initial))) :ARG2 (MRPNode-6 / offer-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-7 / thing :ARG1-of (MRPNode-8 / have-quant-91 :ARG1 MRPNode-4 :ARG3 (MRPNode-9 / more))))) :ARG2 (MRPNode-10 / amr-unknown))

# ::id 44
# ::snt What does this tablature notation mean?
# ::tok What does this tablature notation mean ?
# ::alignments 0-1|0.0 2-3|0.1.0 3-4|0.1.1 4-5|0.1 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:36.275056 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	mean-01	5-6
# ::node	0.0	amr-unknown	0-1
# ::node	0.1	notation	4-5
# ::node	0.1.0	this	2-3
# ::node	0.1.1	tablature	3-4
# ::root	0	mean-01
# ::edge	mean-01	ARG1	amr-unknown	0	0.0
# ::edge	mean-01	ARG1	notation	0	0.1
# ::edge	notation	mod	tablature	0.1	0.1.1
# ::edge	notation	mod	this	0.1	0.1.0
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / amr-unknown) :ARG1 (MRPNode-2 / notation :mod (MRPNode-3 / this) :mod (MRPNode-4 / tablature)))

# ::id 45
# ::snt Why isn't the switch working to turn off my ceiling lamp after I replaced a fan w/light?
# ::tok Why is n't the switch working to turn off my ceiling lamp after I replaced a fan w / light ?
# ::alignments 2-3|0.0.0 4-5|0.0.1 5-6|0.0 7-8|0.0.3 10-11|0.0.3.0.0 11-12|0.0.3.0 12-13|0.0.2 13-14|0.0.2.0.1 14-15|0.0.2.0 16-17|0.0.2.0.2 19-20|0.0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:36.294574 ::parser eager_oracle ::smatch 0.875 ::n_actions 59
# ::node	0	cause-01	
# ::node	0.0	work-09	5-6
# ::node	0.0.0	-	2-3
# ::node	0.0.1	switch	4-5
# ::node	0.0.2	after	12-13
# ::node	0.0.2.0	replace-01	14-15
# ::node	0.0.2.0.0	light	19-20
# ::node	0.0.2.0.1	i	13-14
# ::node	0.0.2.0.2	fan	16-17
# ::node	0.0.3	turn-on-13	7-8
# ::node	0.0.3.0	lamp	11-12
# ::node	0.0.3.0.0	ceiling	10-11
# ::node	0.1	amr-unknown	
# ::root	0	cause-01
# ::edge	after	op1	replace-01	0.0.2	0.0.2.0
# ::edge	cause-01	ARG0	amr-unknown	0	0.1
# ::edge	cause-01	ARG1	work-09	0	0.0
# ::edge	lamp	mod	ceiling	0.0.3.0	0.0.3.0.0
# ::edge	replace-01	ARG0	i	0.0.2.0	0.0.2.0.1
# ::edge	replace-01	ARG1	fan	0.0.2.0	0.0.2.0.2
# ::edge	replace-01	ARG1	light	0.0.2.0	0.0.2.0.0
# ::edge	turn-on-13	ARG0	switch	0.0.3	0.0.1
# ::edge	turn-on-13	ARG1	lamp	0.0.3	0.0.3.0
# ::edge	work-09	ARG1	switch	0.0	0.0.1
# ::edge	work-09	polarity	-	0.0	0.0.0
# ::edge	work-09	purpose	turn-on-13	0.0	0.0.3
# ::edge	work-09	time	after	0.0	0.0.2
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / work-09 :polarity - :ARG1 (MRPNode-2 / switch) :time (MRPNode-3 / after :op1 (MRPNode-4 / replace-01 :ARG1 (MRPNode-5 / light) :ARG0 (MRPNode-6 / i) :ARG1 (MRPNode-7 / fan))) :purpose (MRPNode-8 / turn-on-13 :ARG0 MRPNode-2 :ARG1 (MRPNode-9 / lamp :mod (MRPNode-10 / ceiling)))) :ARG0 (MRPNode-11 / amr-unknown))

# ::id 46
# ::snt How to make good coffee in a Moka pot?
# ::tok How to make good coffee in a Moka pot ?
# ::alignments 0-1|0.2 2-3|0 3-4|0.0.0 4-5|0.0 7-8|0.1.0+0.1.0.0+0.1.0.0.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:36.298750 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	make-01	2-3
# ::node	0.0	coffee	4-5
# ::node	0.0.0	good-02	3-4
# ::node	0.1	pot	8-9
# ::node	0.1.0	ethnic-group	7-8
# ::node	0.1.0.0	name	7-8
# ::node	0.1.0.0.0	moka	7-8
# ::node	0.2	amr-unknown	0-1
# ::root	0	make-01
# ::edge	coffee	ARG1-of	good-02	0.0	0.0.0
# ::edge	ethnic-group	name	name	0.1.0	0.1.0.0
# ::edge	make-01	ARG1	coffee	0	0.0
# ::edge	make-01	location	pot	0	0.1
# ::edge	make-01	manner	amr-unknown	0	0.2
# ::edge	name	op1	moka	0.1.0.0	0.1.0.0.0
# ::edge	pot	mod	ethnic-group	0.1	0.1.0
(MRPNode-0 / make-01 :ARG1 (MRPNode-1 / coffee :ARG1-of (MRPNode-2 / good-02)) :location (MRPNode-3 / pot :mod (MRPNode-4 / ethnic-group :name (MRPNode-5 / name :op1 moka))) :manner (MRPNode-6 / amr-unknown))

# ::id 47
# ::snt What could be causing my GFCI to trip?
# ::tok What could be causing my GFCI to trip ?
# ::alignments 0-1|0.0.1 1-2|0 3-4|0.0 4-5|0.0.0.0.0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:36.303446 ::parser eager_oracle ::smatch 0.6153846153846153 ::n_actions 26
# ::node	0	possible-01	1-2
# ::node	0.0	cause-01	3-4
# ::node	0.0.0	trip-03	7-8
# ::node	0.0.0.0	person	
# ::node	0.0.0.0.0	have-rel-role-91	
# ::node	0.0.0.0.0.0	i	4-5
# ::node	0.0.0.0.0.1	practitioner	
# ::node	0.0.0.0.0.1.0	vice	
# ::node	0.0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	cause-01	ARG0	amr-unknown	0.0	0.0.1
# ::edge	cause-01	ARG1	trip-03	0.0	0.0.0
# ::edge	have-rel-role-91	ARG1	i	0.0.0.0.0	0.0.0.0.0.0
# ::edge	have-rel-role-91	ARG2	practitioner	0.0.0.0.0	0.0.0.0.0.1
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0.0	0.0.0.0.0
# ::edge	possible-01	ARG1	cause-01	0	0.0
# ::edge	practitioner	mod	vice	0.0.0.0.0.1	0.0.0.0.0.1.0
# ::edge	trip-03	ARG0	person	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / cause-01 :ARG1 (MRPNode-2 / trip-03 :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-rel-role-91 :ARG1 (MRPNode-5 / i) :ARG2 (MRPNode-6 / practitioner :mod (MRPNode-7 / vice))))) :ARG0 (MRPNode-8 / amr-unknown)))

# ::id 48
# ::snt What could be wrong with my furnace?
# ::tok What could be wrong with my furnace ?
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 5-6|0.0.1.0 6-7|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:36.306341 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	possible-01	1-2
# ::node	0.0	wrong-02	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	furnace	6-7
# ::node	0.0.1.0	i	5-6
# ::root	0	possible-01
# ::edge	furnace	poss	i	0.0.1	0.0.1.0
# ::edge	possible-01	ARG1	wrong-02	0	0.0
# ::edge	wrong-02	ARG1	amr-unknown	0.0	0.0.0
# ::edge	wrong-02	ARG2	furnace	0.0	0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / wrong-02 :ARG1 (MRPNode-2 / amr-unknown) :ARG2 (MRPNode-3 / furnace :poss (MRPNode-4 / i))))

# ::id 49
# ::snt How can I connect additional wires to a receptacle?
# ::tok How can I connect additional wires to a receptacle ?
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.0.2 3-4|0.0 4-5|0.0.1.0 5-6|0.0.1 8-9|0.0.3 ::annotator aligner3.py ::date 2021-03-11 23:00:36.310529 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	possible-01	1-2
# ::node	0.0	connect-01	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	wire	5-6
# ::node	0.0.1.0	additional	4-5
# ::node	0.0.2	i	2-3
# ::node	0.0.3	receptacle	8-9
# ::root	0	possible-01
# ::edge	connect-01	ARG0	i	0.0	0.0.2
# ::edge	connect-01	ARG1	amr-unknown	0.0	0.0.0
# ::edge	connect-01	ARG1	wire	0.0	0.0.1
# ::edge	connect-01	ARG2	receptacle	0.0	0.0.3
# ::edge	possible-01	ARG1	connect-01	0	0.0
# ::edge	wire	ARG1-of	additional	0.0.1	0.0.1.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / connect-01 :ARG1 (MRPNode-2 / amr-unknown) :ARG1 (MRPNode-3 / wire :ARG1-of (MRPNode-4 / additional)) :ARG0 (MRPNode-5 / i) :ARG2 (MRPNode-6 / receptacle)))

# ::id 50
# ::snt How can I prepare this old exterior wall for painting?
# ::tok How can I prepare this old exterior wall for painting ?
# ::alignments 0-1|0.0.3 1-2|0 2-3|0.0.1 3-4|0.0 4-5|0.0.0.1 5-6|0.0.0.0 6-7|0.0.0.2 7-8|0.0.0 9-10|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:36.317472 ::parser eager_oracle ::smatch 1.0 ::n_actions 41
# ::node	0	possible-01	1-2
# ::node	0.0	prepare-02	3-4
# ::node	0.0.0	wall	7-8
# ::node	0.0.0.0	old	5-6
# ::node	0.0.0.1	this	4-5
# ::node	0.0.0.2	exterior	6-7
# ::node	0.0.1	i	2-3
# ::node	0.0.2	paint-02	9-10
# ::node	0.0.3	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	possible-01	ARG1	prepare-02	0	0.0
# ::edge	prepare-02	ARG0	i	0.0	0.0.1
# ::edge	prepare-02	ARG1	wall	0.0	0.0.0
# ::edge	prepare-02	ARG2	paint-02	0.0	0.0.2
# ::edge	prepare-02	manner	amr-unknown	0.0	0.0.3
# ::edge	wall	mod	exterior	0.0.0	0.0.0.2
# ::edge	wall	mod	old	0.0.0	0.0.0.0
# ::edge	wall	mod	this	0.0.0	0.0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / prepare-02 :ARG1 (MRPNode-2 / wall :mod (MRPNode-3 / old) :mod (MRPNode-4 / this) :mod (MRPNode-5 / exterior)) :ARG0 (MRPNode-6 / i) :ARG2 (MRPNode-7 / paint-02) :manner (MRPNode-8 / amr-unknown)))

# ::id 51
# ::snt Why is there no water in the kitchen?
# ::tok Why is there no water in the kitchen ?
# ::alignments 3-4|0.0.0 4-5|0.0 5-6|0 7-8|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:36.319763 ::parser eager_oracle ::smatch 0.7058823529411765 ::n_actions 23
# ::node	0	cause-01	5-6
# ::node	0.0	water	4-5
# ::node	0.0.0	-	3-4
# ::node	0.0.1	kitchen	7-8
# ::node	0.1	amr-unknown	
# ::root	0	cause-01
# ::edge	cause-01	ARG0	amr-unknown	0	0.1
# ::edge	cause-01	ARG1	water	0	0.0
# ::edge	water	location	kitchen	0.0	0.0.1
# ::edge	water	polarity	-	0.0	0.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / water :polarity - :location (MRPNode-2 / kitchen)) :ARG0 (MRPNode-3 / amr-unknown))

# ::id 52
# ::snt What more can I do to improve my credit score?
# ::tok What more can I do to improve my credit score ?
# ::alignments 0-1|0.0.1 1-2|0.0.1.0 2-3|0 3-4|0.0.0.0.1 4-5|0.0 6-7|0.0.0 8-9|0.0.0.0.0 9-10|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:36.328275 ::parser eager_oracle ::smatch 1.0 ::n_actions 41
# ::node	0	possible-01	2-3
# ::node	0.0	do-02	4-5
# ::node	0.0.0	improve-01	6-7
# ::node	0.0.0.0	score	9-10
# ::node	0.0.0.0.0	credit	8-9
# ::node	0.0.0.0.1	i	3-4
# ::node	0.0.1	amr-unknown	0-1
# ::node	0.0.1.0	more	1-2
# ::root	0	possible-01
# ::edge	amr-unknown	mod	more	0.0.1	0.0.1.0
# ::edge	do-02	ARG0	amr-unknown	0.0	0.0.1
# ::edge	do-02	ARG0	i	0.0	0.0.0.0.1
# ::edge	do-02	ARG1	improve-01	0.0	0.0.0
# ::edge	improve-01	ARG0	i	0.0.0	0.0.0.0.1
# ::edge	improve-01	ARG1	score	0.0.0	0.0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	score	mod	credit	0.0.0.0	0.0.0.0.0
# ::edge	score	poss	i	0.0.0.0	0.0.0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / improve-01 :ARG1 (MRPNode-3 / score :mod (MRPNode-4 / credit) :poss (MRPNode-7 / i)) :ARG0 MRPNode-7) :ARG0 (MRPNode-5 / amr-unknown :mod (MRPNode-6 / more)) :ARG0 MRPNode-7))

# ::id 53
# ::snt Bar ware - What kind of glass is this?
# ::tok Bar ware - What kind of glass is this ?
# ::alignments 0-1|0.2.0 1-2|0.2 3-4|0.0.0.0 4-5|0.0.0 6-7|0.0 8-9|0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:36.333465 ::parser eager_oracle ::smatch 0.7142857142857143 ::n_actions 30
# ::node	0	ask-01	
# ::node	0.0	glass	6-7
# ::node	0.0.0	kind	4-5
# ::node	0.0.0.0	amr-unknown	3-4
# ::node	0.0.0.1	this	8-9
# ::node	0.1	i	
# ::node	0.2	ware	1-2
# ::node	0.2.0	bar	0-1
# ::root	0	ask-01
# ::edge	ask-01	ARG1	glass	0	0.0
# ::edge	ask-01	ARG2	i	0	0.1
# ::edge	ask-01	ARG2	ware	0	0.2
# ::edge	glass	mod	kind	0.0	0.0.0
# ::edge	kind	mod	amr-unknown	0.0.0	0.0.0.0
# ::edge	kind	mod	this	0.0.0	0.0.0.1
# ::edge	ware	mod	bar	0.2	0.2.0
(MRPNode-0 / ask-01 :ARG1 (MRPNode-1 / glass :mod (MRPNode-2 / kind :mod (MRPNode-3 / amr-unknown) :mod (MRPNode-4 / this))) :ARG2 (MRPNode-5 / i) :ARG2 (MRPNode-6 / ware :mod (MRPNode-7 / bar)))

# ::id 54
# ::snt Do I really need a redundant sump pump?
# ::tok Do I really need a redundant sump pump ?
# ::alignments 1-2|0.1 2-3|0.2 3-4|0 5-6|0.0.0 6-7|0.0.1 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:36.337215 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 29
# ::node	0	need-01	3-4
# ::node	0.0	pump	7-8
# ::node	0.0.0	redundant	5-6
# ::node	0.0.1	sump	6-7
# ::node	0.1	i	1-2
# ::node	0.2	real-04	2-3
# ::node	0.3	amr-unknown	
# ::root	0	need-01
# ::edge	need-01	ARG0	i	0	0.1
# ::edge	need-01	ARG1	pump	0	0.0
# ::edge	need-01	ARG1-of	amr-unknown	0	0.3
# ::edge	need-01	ARG1-of	real-04	0	0.2
# ::edge	pump	mod	redundant	0.0	0.0.0
# ::edge	pump	mod	sump	0.0	0.0.1
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / pump :mod (MRPNode-2 / redundant) :mod (MRPNode-3 / sump)) :ARG0 (MRPNode-4 / i) :ARG1-of (MRPNode-5 / real-04) :ARG1-of (MRPNode-6 / amr-unknown))

# ::id 55
# ::snt How can I work out how valuable I am to my boss and company?
# ::tok How can I work out how valuable I am to my boss and company ?
# ::alignments 0-1|0.1 1-2|0.0 2-3|0.0.0.0.2 3-4|0.0.0 6-7|0.0.0.0 11-12|0.0.0.0.2.0+0.0.0.0.2.0.0 12-13|0.0.0.0.0 13-14|0.0.0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:36.377662 ::parser eager_oracle ::smatch 0.7555555555555556 ::n_actions 48
# ::node	0	have-manner-91	
# ::node	0.0	possible-01	1-2
# ::node	0.0.0	work-out-02	3-4
# ::node	0.0.0.0	value-02	6-7
# ::node	0.0.0.0.0	and	12-13
# ::node	0.0.0.0.0.0	person	
# ::node	0.0.0.0.0.1	company	13-14
# ::node	0.0.0.0.1	so	
# ::node	0.0.0.0.2	i	2-3
# ::node	0.0.0.0.2.0	have-rel-role-91	11-12
# ::node	0.0.0.0.2.0.0	boss	11-12
# ::node	0.1	amr-unknown	0-1
# ::root	0	have-manner-91
# ::edge	and	op1	person	0.0.0.0.0	0.0.0.0.0.0
# ::edge	and	op2	company	0.0.0.0.0	0.0.0.0.0.1
# ::edge	have-manner-91	ARG1	possible-01	0	0.0
# ::edge	have-manner-91	ARG2	amr-unknown	0	0.1
# ::edge	have-rel-role-91	ARG0	person	0.0.0.0.2.0	0.0.0.0.0.0
# ::edge	have-rel-role-91	ARG2	boss	0.0.0.0.2.0	0.0.0.0.2.0.0
# ::edge	i	ARG1-of	company	0.0.0.0.2	0.0.0.0.0.1
# ::edge	i	ARG1-of	have-rel-role-91	0.0.0.0.2	0.0.0.0.2.0
# ::edge	possible-01	ARG1	work-out-02	0.0	0.0.0
# ::edge	value-02	ARG0	and	0.0.0.0	0.0.0.0.0
# ::edge	value-02	ARG1	i	0.0.0.0	0.0.0.0.2
# ::edge	value-02	degree	so	0.0.0.0	0.0.0.0.1
# ::edge	work-out-02	ARG0	i	0.0.0	0.0.0.0.2
# ::edge	work-out-02	ARG1	value-02	0.0.0	0.0.0.0
(MRPNode-0 / have-manner-91 :ARG1 (MRPNode-1 / possible-01 :ARG1 (MRPNode-2 / work-out-02 :ARG1 (MRPNode-3 / value-02 :ARG0 (MRPNode-4 / and :op1 (MRPNode-5 / person) :op2 (MRPNode-10 / company)) :degree (MRPNode-6 / so) :ARG1 (MRPNode-7 / i :ARG1-of (MRPNode-8 / have-rel-role-91 :ARG0 MRPNode-5 :ARG2 (MRPNode-9 / boss)) :ARG1-of MRPNode-10)) :ARG0 MRPNode-7)) :ARG2 (MRPNode-11 / amr-unknown))

# ::id 56
# ::snt Do I need to apply for ESTA?
# ::tok Do I need to apply for ESTA ?
# ::alignments 1-2|0.0.1 2-3|0 4-5|0.0 6-7|0.0.0+0.0.0.0+0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:36.381184 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 24
# ::node	0	need-01	2-3
# ::node	0.0	apply-01	4-5
# ::node	0.0.0	law	6-7
# ::node	0.0.0.0	name	6-7
# ::node	0.0.0.0.0	esta	6-7
# ::node	0.0.1	i	1-2
# ::node	0.1	amr-unknown	
# ::root	0	need-01
# ::edge	apply-01	ARG0	i	0.0	0.0.1
# ::edge	apply-01	ARG1	law	0.0	0.0.0
# ::edge	law	name	name	0.0.0	0.0.0.0
# ::edge	name	op1	esta	0.0.0.0	0.0.0.0.0
# ::edge	need-01	ARG0	amr-unknown	0	0.1
# ::edge	need-01	ARG0	i	0	0.0.1
# ::edge	need-01	ARG1	apply-01	0	0.0
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / apply-01 :ARG1 (MRPNode-2 / law :name (MRPNode-3 / name :op1 esta)) :ARG0 (MRPNode-4 / i)) :ARG0 MRPNode-4 :ARG0 (MRPNode-5 / amr-unknown))

# ::id 57
# ::snt Should I let potential employers know I have a job offer?
# ::tok Should I let potential employers know I have a job offer ?
# ::alignments 0-1|0 1-2|0.0.0.0.1 2-3|0.0 3-4|0.0.0.1.0 4-5|0.0.0.1+0.0.0.1.1 5-6|0.0.0 9-10|0.0.0.0.0 10-11|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:36.423410 ::parser eager_oracle ::smatch 0.9500000000000001 ::n_actions 44
# ::node	0	recommend-01	0-1
# ::node	0.0	let-01	2-3
# ::node	0.0.0	know-01	5-6
# ::node	0.0.0.0	offer-01	10-11
# ::node	0.0.0.0.0	job	9-10
# ::node	0.0.0.0.1	i	1-2
# ::node	0.0.0.1	person	4-5
# ::node	0.0.0.1.0	potential	3-4
# ::node	0.0.0.1.1	employ-01	4-5
# ::node	0.1	amr-unknown	
# ::root	0	recommend-01
# ::edge	know-01	ARG0	person	0.0.0	0.0.0.1
# ::edge	know-01	ARG1	offer-01	0.0.0	0.0.0.0
# ::edge	let-01	ARG0	i	0.0	0.0.0.0.1
# ::edge	let-01	ARG1	know-01	0.0	0.0.0
# ::edge	offer-01	ARG0	i	0.0.0.0	0.0.0.0.1
# ::edge	offer-01	ARG1	job	0.0.0.0	0.0.0.0.0
# ::edge	person	ARG0-of	employ-01	0.0.0.1	0.0.0.1.1
# ::edge	person	mod	potential	0.0.0.1	0.0.0.1.0
# ::edge	recommend-01	ARG1	let-01	0	0.0
# ::edge	recommend-01	ARG2	amr-unknown	0	0.1
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / let-01 :ARG1 (MRPNode-2 / know-01 :ARG1 (MRPNode-3 / offer-01 :ARG1 (MRPNode-4 / job) :ARG0 (MRPNode-8 / i)) :ARG0 (MRPNode-5 / person :mod (MRPNode-6 / potential) :ARG0-of (MRPNode-7 / employ-01))) :ARG0 MRPNode-8) :ARG2 (MRPNode-9 / amr-unknown))

# ::id 58
# ::snt How do I repair water-damaged hardwood floors?
# ::tok How do I repair water - damaged hardwood floors ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 4-5|0.0.1.0 6-7|0.0.1 7-8|0.0.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:36.428847 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	repair-01	3-4
# ::node	0.0	floor	8-9
# ::node	0.0.0	hardwood	7-8
# ::node	0.0.1	damage-01	6-7
# ::node	0.0.1.0	water	4-5
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	repair-01
# ::edge	damage-01	ARG0	water	0.0.1	0.0.1.0
# ::edge	floor	ARG1-of	damage-01	0.0	0.0.1
# ::edge	floor	mod	hardwood	0.0	0.0.0
# ::edge	repair-01	ARG0	i	0	0.1
# ::edge	repair-01	ARG1	floor	0	0.0
# ::edge	repair-01	manner	amr-unknown	0	0.2
(MRPNode-0 / repair-01 :ARG1 (MRPNode-1 / floor :mod (MRPNode-2 / hardwood) :ARG1-of (MRPNode-3 / damage-01 :ARG0 (MRPNode-4 / water))) :ARG0 (MRPNode-5 / i) :manner (MRPNode-6 / amr-unknown))

# ::id 59
# ::snt Glue underlayment to concrete: how long does it take to cure?
# ::tok Glue underlayment to concrete : how long does it take to cure ?
# ::alignments 1-2|0.0.1 3-4|0.0.1.0 5-6|0.1.0.1 9-10|0.1 11-12|0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:36.434026 ::parser eager_oracle ::smatch 0.32 ::n_actions 27
# ::node	0	multi-sentence	
# ::node	0.0	bullshit-01	
# ::node	0.0.0	imperative	
# ::node	0.0.1	underlayment	1-2
# ::node	0.0.1.0	concrete-02	3-4
# ::node	0.0.2	you	
# ::node	0.1	take-10	9-10
# ::node	0.1.0	last-01	
# ::node	0.1.0.0	cure-01	11-12
# ::node	0.1.0.1	amr-unknown	5-6
# ::root	0	multi-sentence
# ::edge	bullshit-01	ARG0	you	0.0	0.0.2
# ::edge	bullshit-01	ARG1	underlayment	0.0	0.0.1
# ::edge	bullshit-01	mode	imperative	0.0	0.0.0
# ::edge	last-01	ARG2	amr-unknown	0.1.0	0.1.0.1
# ::edge	last-01	ARG2	cure-01	0.1.0	0.1.0.0
# ::edge	multi-sentence	snt1	bullshit-01	0	0.0
# ::edge	multi-sentence	snt2	take-10	0	0.1
# ::edge	take-10	ARG1	last-01	0.1	0.1.0
# ::edge	underlayment	ARG1-of	concrete-02	0.0.1	0.0.1.0
(MRPNode-0 / multi-sentence :snt1 (MRPNode-1 / bullshit-01 :mode imperative :ARG1 (MRPNode-2 / underlayment :ARG1-of (MRPNode-3 / concrete-02)) :ARG0 (MRPNode-4 / you)) :snt2 (MRPNode-5 / take-10 :ARG1 (MRPNode-6 / last-01 :ARG2 (MRPNode-7 / cure-01) :ARG2 (MRPNode-8 / amr-unknown))))

# ::id 60
# ::snt Is it better to request a recommendation letter in person after class or by email?
# ::tok Is it better to request a recommendation letter in person after class or by email ?
# ::alignments 2-3|0.1 6-7|0.0.1 10-11|0.0.0.0 11-12|0.0.0.0.0 12-13|0.0.0 14-15|0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:36.441329 ::parser eager_oracle ::smatch 0.5161290322580645 ::n_actions 34
# ::node	0	have-degree-91	
# ::node	0.0	urgent	
# ::node	0.0.0	or	12-13
# ::node	0.0.0.0	after	10-11
# ::node	0.0.0.0.0	class	11-12
# ::node	0.0.0.1	email	14-15
# ::node	0.0.1	recommend-01	6-7
# ::node	0.1	good-02	2-3
# ::node	0.2	amr-unknown	
# ::node	0.3	more	
# ::root	0	have-degree-91
# ::edge	after	op1	class	0.0.0.0	0.0.0.0.0
# ::edge	good-02	ARG1	urgent	0.1	0.0
# ::edge	have-degree-91	ARG1	urgent	0	0.0
# ::edge	have-degree-91	ARG2	good-02	0	0.1
# ::edge	have-degree-91	ARG3	amr-unknown	0	0.2
# ::edge	have-degree-91	ARG3	more	0	0.3
# ::edge	or	op1	after	0.0.0	0.0.0.0
# ::edge	or	op2	email	0.0.0	0.0.0.1
# ::edge	urgent	ARG1-of	or	0.0	0.0.0
# ::edge	urgent	ARG1-of	recommend-01	0.0	0.0.1
(MRPNode-0 / have-degree-91 :ARG1 (MRPNode-1 / urgent :ARG1-of (MRPNode-2 / or :op1 (MRPNode-3 / after :op1 (MRPNode-4 / class)) :op2 (MRPNode-5 / email)) :ARG1-of (MRPNode-6 / recommend-01)) :ARG2 (MRPNode-7 / good-02 :ARG1 MRPNode-1) :ARG3 (MRPNode-8 / amr-unknown) :ARG3 (MRPNode-9 / more))

# ::id 61
# ::snt I have a Schengen visa but my UAE Residence visa cancelled. Can I still travel then?
# ::tok I have a Schengen visa but my UAE Residence visa cancelled . Can I still travel then ?
# ::alignments 0-1|0.0.0.1 1-2|0.0.0 3-4|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 4-5|0.0.1.0 5-6|0.0 6-7|0.1.0.0 7-9|0.0.1.0.0+0.0.1.0.0.0+0.0.1.0.0.0.0+0.0.1.0.0.0.1 9-10|0.0.0.0 10-11|0.0.1 12-13|0.1 14-15|0.1.0.1 15-16|0.1.0 16-17|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:37.402757 ::parser eager_oracle ::smatch 0.8888888888888888 ::n_actions 70
# ::node	0	multi-sentence	
# ::node	0.0	contrast-01	5-6
# ::node	0.0.0	have-03	1-2
# ::node	0.0.0.0	visa	9-10
# ::node	0.0.0.0.0	company	3-4
# ::node	0.0.0.0.0.0	name	3-4
# ::node	0.0.0.0.0.0.0	schengen	3-4
# ::node	0.0.0.1	i	0-1
# ::node	0.0.1	cancel-01	10-11
# ::node	0.0.1.0	visa	4-5
# ::node	0.0.1.0.0	spaceship	7-9
# ::node	0.0.1.0.0.0	name	7-9
# ::node	0.0.1.0.0.0.0	uae	7-9
# ::node	0.0.1.0.0.0.1	residence	7-9
# ::node	0.1	possible-01	12-13
# ::node	0.1.0	travel-01	15-16
# ::node	0.1.0.0	i	6-7
# ::node	0.1.0.1	still	14-15
# ::node	0.1.1	then	16-17
# ::node	0.1.2	amr-unknown	
# ::root	0	multi-sentence
# ::edge	cancel-01	ARG1	visa	0.0.1	0.0.1.0
# ::edge	company	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	contrast-01	ARG1	have-03	0.0	0.0.0
# ::edge	contrast-01	ARG2	cancel-01	0.0	0.0.1
# ::edge	have-03	ARG0	i	0.0.0	0.0.0.1
# ::edge	have-03	ARG1	visa	0.0.0	0.0.0.0
# ::edge	multi-sentence	snt1	contrast-01	0	0.0
# ::edge	multi-sentence	snt2	possible-01	0	0.1
# ::edge	name	op1	schengen	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op1	uae	0.0.1.0.0.0	0.0.1.0.0.0.0
# ::edge	name	op2	residence	0.0.1.0.0.0	0.0.1.0.0.0.1
# ::edge	possible-01	ARG1	travel-01	0.1	0.1.0
# ::edge	possible-01	mod	amr-unknown	0.1	0.1.2
# ::edge	possible-01	mod	then	0.1	0.1.1
# ::edge	spaceship	name	name	0.0.1.0.0	0.0.1.0.0.0
# ::edge	travel-01	ARG0	i	0.1.0	0.0.0.1
# ::edge	travel-01	mod	i	0.1.0	0.1.0.0
# ::edge	travel-01	mod	still	0.1.0	0.1.0.1
# ::edge	visa	mod	company	0.0.0.0	0.0.0.0.0
# ::edge	visa	mod	spaceship	0.0.1.0	0.0.1.0.0
(MRPNode-0 / multi-sentence :snt1 (MRPNode-1 / contrast-01 :ARG1 (MRPNode-2 / have-03 :ARG1 (MRPNode-3 / visa :mod (MRPNode-4 / company :name (MRPNode-5 / name :op1 schengen))) :ARG0 (MRPNode-6 / i)) :ARG2 (MRPNode-7 / cancel-01 :ARG1 (MRPNode-8 / visa :mod (MRPNode-9 / spaceship :name (MRPNode-10 / name :op1 uae :op2 residence))))) :snt2 (MRPNode-11 / possible-01 :ARG1 (MRPNode-12 / travel-01 :ARG0 MRPNode-6 :mod (MRPNode-13 / i) :mod (MRPNode-14 / still)) :mod (MRPNode-15 / then) :mod (MRPNode-16 / amr-unknown)))

# ::id 62
# ::snt How do I remove paint from a wood floor?
# ::tok How do I remove paint from a wood floor ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0 7-8|0.2.0 8-9|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:37.406269 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	remove-01	3-4
# ::node	0.0	paint	4-5
# ::node	0.1	i	2-3
# ::node	0.2	floor	8-9
# ::node	0.2.0	wood	7-8
# ::node	0.3	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	floor	mod	wood	0.2	0.2.0
# ::edge	remove-01	ARG0	i	0	0.1
# ::edge	remove-01	ARG1	paint	0	0.0
# ::edge	remove-01	ARG2	floor	0	0.2
# ::edge	remove-01	manner	amr-unknown	0	0.3
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / paint) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / floor :mod (MRPNode-4 / wood)) :manner (MRPNode-5 / amr-unknown))

# ::id 63
# ::snt How to apply for a Schengen visa?
# ::tok How to apply for a Schengen visa ?
# ::alignments 0-1|0.1 2-3|0.0 5-6|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.409316 ::parser eager_oracle ::smatch 0.7272727272727274 ::n_actions 21
# ::node	0	have-manner-91	
# ::node	0.0	apply-01	2-3
# ::node	0.0.0	visa	6-7
# ::node	0.0.0.0	city	5-6
# ::node	0.0.0.0.0	name	5-6
# ::node	0.0.0.0.0.0	schengen	5-6
# ::node	0.1	amr-unknown	0-1
# ::root	0	have-manner-91
# ::edge	apply-01	ARG1	visa	0.0	0.0.0
# ::edge	city	name	name	0.0.0.0	0.0.0.0.0
# ::edge	have-manner-91	ARG1	apply-01	0	0.0
# ::edge	have-manner-91	ARG2	amr-unknown	0	0.1
# ::edge	name	op1	schengen	0.0.0.0.0	0.0.0.0.0.0
# ::edge	visa	mod	city	0.0.0	0.0.0.0
(MRPNode-0 / have-manner-91 :ARG1 (MRPNode-1 / apply-01 :ARG1 (MRPNode-2 / visa :mod (MRPNode-3 / city :name (MRPNode-4 / name :op1 schengen)))) :ARG2 (MRPNode-5 / amr-unknown))

# ::id 64
# ::snt Why is my furnace blowing hot air outside through a PVC pipe?
# ::tok Why is my furnace blowing hot air outside through a PVC pipe ?
# ::alignments 2-3|0.1.0 3-4|0.1 4-5|0 5-6|0.0.0 6-7|0.0 7-8|0.3 10-11|0.4.0+0.4.0.0+0.4.0.0.0 11-12|0.4 ::annotator aligner3.py ::date 2021-03-11 23:00:37.416940 ::parser eager_oracle ::smatch 0.9047619047619047 ::n_actions 39
# ::node	0	blow-01	4-5
# ::node	0.0	air	6-7
# ::node	0.0.0	hot-05	5-6
# ::node	0.1	furnace	3-4
# ::node	0.1.0	i	2-3
# ::node	0.2	cause-01	
# ::node	0.2.0	amr-unknown	
# ::node	0.3	outside	7-8
# ::node	0.4	pipe	11-12
# ::node	0.4.0	product	10-11
# ::node	0.4.0.0	name	10-11
# ::node	0.4.0.0.0	pvc	10-11
# ::root	0	blow-01
# ::edge	air	ARG1-of	hot-05	0.0	0.0.0
# ::edge	blow-01	ARG0	furnace	0	0.1
# ::edge	blow-01	ARG1	air	0	0.0
# ::edge	blow-01	ARG1-of	cause-01	0	0.2
# ::edge	blow-01	instrument	pipe	0	0.4
# ::edge	blow-01	path	outside	0	0.3
# ::edge	cause-01	ARG0	amr-unknown	0.2	0.2.0
# ::edge	furnace	poss	i	0.1	0.1.0
# ::edge	name	op1	pvc	0.4.0.0	0.4.0.0.0
# ::edge	pipe	mod	product	0.4	0.4.0
# ::edge	product	name	name	0.4.0	0.4.0.0
(MRPNode-0 / blow-01 :ARG1 (MRPNode-1 / air :ARG1-of (MRPNode-2 / hot-05)) :ARG0 (MRPNode-3 / furnace :poss (MRPNode-4 / i)) :ARG1-of (MRPNode-5 / cause-01 :ARG0 (MRPNode-6 / amr-unknown)) :path (MRPNode-7 / outside) :instrument (MRPNode-8 / pipe :mod (MRPNode-9 / product :name (MRPNode-10 / name :op1 pvc))))

# ::id 65
# ::snt Do I need to replace my hot water tank's pressure release valve?
# ::tok Do I need to replace my hot water tank 's pressure release valve ?
# ::alignments 2-3|0 4-5|0.0 5-6|0.0.1 6-7|0.0.0.1.0 8-9|0.0.0.1 10-11|0.0.0.0.0 11-12|0.0.0.0 12-13|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.427268 ::parser eager_oracle ::smatch 0.9473684210526316 ::n_actions 43
# ::node	0	need-01	2-3
# ::node	0.0	replace-01	4-5
# ::node	0.0.0	valve	12-13
# ::node	0.0.0.0	release-01	11-12
# ::node	0.0.0.0.0	pressure	10-11
# ::node	0.0.0.1	tank	8-9
# ::node	0.0.0.1.0	hot-05	6-7
# ::node	0.0.1	i	5-6
# ::node	0.1	amr-unknown	
# ::root	0	need-01
# ::edge	i	poss-of	tank	0.0.1	0.0.0.1
# ::edge	need-01	ARG0	amr-unknown	0	0.1
# ::edge	need-01	ARG0	i	0	0.0.1
# ::edge	need-01	ARG1	replace-01	0	0.0
# ::edge	release-01	ARG1	pressure	0.0.0.0	0.0.0.0.0
# ::edge	replace-01	ARG0	i	0.0	0.0.1
# ::edge	replace-01	ARG1	valve	0.0	0.0.0
# ::edge	tank	ARG1-of	hot-05	0.0.0.1	0.0.0.1.0
# ::edge	valve	mod	release-01	0.0.0	0.0.0.0
# ::edge	valve	mod	tank	0.0.0	0.0.0.1
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / replace-01 :ARG1 (MRPNode-2 / valve :mod (MRPNode-3 / release-01 :ARG1 (MRPNode-4 / pressure)) :mod (MRPNode-6 / tank :ARG1-of (MRPNode-7 / hot-05))) :ARG0 (MRPNode-5 / i :poss-of MRPNode-6)) :ARG0 MRPNode-5 :ARG0 (MRPNode-8 / amr-unknown))

# ::id 66
# ::snt How can I stop my cat's playful yet aggressive behavior?
# ::tok How can I stop my cat 's playful yet aggressive behavior ?
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 4-5|0.0.1 5-6|0.0.1.0 7-8|0.0.2.1 9-10|0.0.2.0 10-11|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:37.436446 ::parser eager_oracle ::smatch 1.0 ::n_actions 41
# ::node	0	possible-01	1-2
# ::node	0.0	stop-01	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	i	4-5
# ::node	0.0.1.0	cat	5-6
# ::node	0.0.2	behave-01	10-11
# ::node	0.0.2.0	aggressive	9-10
# ::node	0.0.2.1	playful	7-8
# ::root	0	possible-01
# ::edge	behave-01	ARG0	cat	0.0.2	0.0.1.0
# ::edge	behave-01	ARG0	i	0.0.2	0.0.1
# ::edge	behave-01	ARG1	aggressive	0.0.2	0.0.2.0
# ::edge	behave-01	mod	playful	0.0.2	0.0.2.1
# ::edge	i	poss-of	cat	0.0.1	0.0.1.0
# ::edge	possible-01	ARG1	stop-01	0	0.0
# ::edge	stop-01	ARG1	amr-unknown	0.0	0.0.0
# ::edge	stop-01	ARG1	behave-01	0.0	0.0.2
# ::edge	stop-01	ARG1	i	0.0	0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / stop-01 :ARG1 (MRPNode-2 / amr-unknown) :ARG1 (MRPNode-3 / i :poss-of (MRPNode-4 / cat)) :ARG1 (MRPNode-5 / behave-01 :ARG0 MRPNode-3 :ARG0 MRPNode-4 :ARG1 (MRPNode-6 / aggressive) :mod (MRPNode-7 / playful))))

# ::id 67
# ::snt Which reward / benefits credit card is the best value for the money in Canada?
# ::tok Which reward / benefits credit card is the best value for the money in Canada ?
# ::alignments 1-2|0.1.0 2-3|0.1 3-4|0.1.1 8-9|0.2 9-10|0 12-13|0.0 14-15|0.0.0+0.0.0.0+0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.444476 ::parser eager_oracle ::smatch 0.8292682926829268 ::n_actions 39
# ::node	0	value-01	9-10
# ::node	0.0	money	12-13
# ::node	0.0.0	country	14-15
# ::node	0.0.0.0	name	14-15
# ::node	0.0.0.0.0	canada	14-15
# ::node	0.1	slash	2-3
# ::node	0.1.0	reward-01	1-2
# ::node	0.1.1	benefit	3-4
# ::node	0.2	good-02	8-9
# ::node	0.3	have-degree-91	
# ::node	0.3.0	most	
# ::node	0.4	amr-unknown	
# ::root	0	value-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	have-degree-91	ARG2	good-02	0.3	0.2
# ::edge	have-degree-91	ARG3	most	0.3	0.3.0
# ::edge	money	location	country	0.0	0.0.0
# ::edge	name	op1	canada	0.0.0.0	0.0.0.0.0
# ::edge	slash	op1	reward-01	0.1	0.1.0
# ::edge	slash	op2	benefit	0.1	0.1.1
# ::edge	value-01	ARG1	money	0	0.0
# ::edge	value-01	ARG1-of	good-02	0	0.2
# ::edge	value-01	ARG1-of	have-degree-91	0	0.3
# ::edge	value-01	ARG2	amr-unknown	0	0.4
# ::edge	value-01	ARG2	slash	0	0.1
(MRPNode-0 / value-01 :ARG1 (MRPNode-1 / money :location (MRPNode-2 / country :name (MRPNode-3 / name :op1 canada))) :ARG2 (MRPNode-4 / slash :op1 (MRPNode-5 / reward-01) :op2 (MRPNode-6 / benefit)) :ARG1-of (MRPNode-7 / good-02) :ARG1-of (MRPNode-8 / have-degree-91 :ARG2 MRPNode-7 :ARG3 (MRPNode-9 / most)) :ARG2 (MRPNode-10 / amr-unknown))

# ::id 68
# ::snt What is this vocal technique called?
# ::tok What is this vocal technique called ?
# ::alignments 0-1|0.1 2-3|0.0.0 3-4|0.0.1 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.446990 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	call-01	5-6
# ::node	0.0	technique	4-5
# ::node	0.0.0	this	2-3
# ::node	0.0.1	vocal	3-4
# ::node	0.1	amr-unknown	0-1
# ::root	0	call-01
# ::edge	call-01	ARG1	technique	0	0.0
# ::edge	call-01	ARG2	amr-unknown	0	0.1
# ::edge	technique	mod	this	0.0	0.0.0
# ::edge	technique	mod	vocal	0.0	0.0.1
(MRPNode-0 / call-01 :ARG1 (MRPNode-1 / technique :mod (MRPNode-2 / this) :mod (MRPNode-3 / vocal)) :ARG2 (MRPNode-4 / amr-unknown))

# ::id 69
# ::snt What is the significance of the cat?
# ::tok What is the significance of the cat ?
# ::alignments 0-1|0.1 3-4|0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.448640 ::parser eager_oracle ::smatch 1.0 ::n_actions 19
# ::node	0	significant-02	3-4
# ::node	0.0	cat	6-7
# ::node	0.1	amr-unknown	0-1
# ::root	0	significant-02
# ::edge	significant-02	ARG1	cat	0	0.0
# ::edge	significant-02	ARG3	amr-unknown	0	0.1
(MRPNode-0 / significant-02 :ARG1 (MRPNode-1 / cat) :ARG3 (MRPNode-2 / amr-unknown))

# ::id 70
# ::snt How long is the life of a shot of espresso?
# ::tok How long is the life of a shot of espresso ?
# ::alignments 0-1|0.1 4-5|0.0 7-8|0.0.0 9-10|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.451285 ::parser eager_oracle ::smatch 0.625 ::n_actions 24
# ::node	0	last-01	
# ::node	0.0	life	4-5
# ::node	0.0.0	shot	7-8
# ::node	0.0.0.0	espresso	9-10
# ::node	0.1	amr-unknown	0-1
# ::root	0	last-01
# ::edge	last-01	ARG2	amr-unknown	0	0.1
# ::edge	last-01	ARG2	life	0	0.0
# ::edge	life	poss	shot	0.0	0.0.0
# ::edge	shot	consist-of	espresso	0.0.0	0.0.0.0
(MRPNode-0 / last-01 :ARG2 (MRPNode-1 / life :poss (MRPNode-2 / shot :consist-of (MRPNode-3 / espresso))) :ARG2 (MRPNode-4 / amr-unknown))

# ::id 71
# ::snt How can I get rid of fleas?
# ::tok How can I get rid of fleas ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.1 4-5|0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.454137 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	possible-01	1-2
# ::node	0.0	rid-01	4-5
# ::node	0.0.0	flea	6-7
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	possible-01	ARG1	rid-01	0	0.0
# ::edge	rid-01	ARG0	i	0.0	0.0.1
# ::edge	rid-01	ARG1	flea	0.0	0.0.0
# ::edge	rid-01	manner	amr-unknown	0.0	0.0.2
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / rid-01 :ARG1 (MRPNode-2 / flea) :ARG0 (MRPNode-3 / i) :manner (MRPNode-4 / amr-unknown)))

# ::id 72
# ::snt Should I switch to third person or continue in first person?
# ::tok Should I switch to third person or continue in first person ?
# ::alignments 0-1|0 1-2|0.0.0.0 2-3|0.0.0 4-5|0.0.0.1.0+0.0.0.1.0.0 5-6|0.0.0.1 6-7|0.0 7-8|0.0.1 9-10|0.0.1.0.0+0.0.1.0.0.0 10-11|0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.474623 ::parser eager_oracle ::smatch 0.9545454545454545 ::n_actions 51
# ::node	0	recommend-01	0-1
# ::node	0.0	or	6-7
# ::node	0.0.0	switch-01	2-3
# ::node	0.0.0.0	i	1-2
# ::node	0.0.0.1	person	5-6
# ::node	0.0.0.1.0	ordinal-entity	4-5
# ::node	0.0.0.1.0.0	3	4-5
# ::node	0.0.1	continue-01	7-8
# ::node	0.0.1.0	person	10-11
# ::node	0.0.1.0.0	ordinal-entity	9-10
# ::node	0.0.1.0.0.0	1	9-10
# ::node	0.1	amr-unknown	
# ::root	0	recommend-01
# ::edge	continue-01	ARG0	i	0.0.1	0.0.0.0
# ::edge	continue-01	manner	person	0.0.1	0.0.1.0
# ::edge	or	op1	switch-01	0.0	0.0.0
# ::edge	or	op2	continue-01	0.0	0.0.1
# ::edge	ordinal-entity	value	1	0.0.1.0.0	0.0.1.0.0.0
# ::edge	ordinal-entity	value	3	0.0.0.1.0	0.0.0.1.0.0
# ::edge	person	ord	ordinal-entity	0.0.0.1	0.0.0.1.0
# ::edge	person	ord	ordinal-entity	0.0.1.0	0.0.1.0.0
# ::edge	recommend-01	ARG1	or	0	0.0
# ::edge	recommend-01	ARG2	amr-unknown	0	0.1
# ::edge	switch-01	ARG1	i	0.0.0	0.0.0.0
# ::edge	switch-01	ARG2	person	0.0.0	0.0.0.1
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / or :op1 (MRPNode-2 / switch-01 :ARG1 (MRPNode-3 / i) :ARG2 (MRPNode-4 / person :ord (MRPNode-5 / ordinal-entity :value 3))) :op2 (MRPNode-6 / continue-01 :ARG0 MRPNode-3 :manner (MRPNode-7 / person :ord (MRPNode-8 / ordinal-entity :value 1)))) :ARG2 (MRPNode-9 / amr-unknown))

# ::id 73
# ::snt How can I tell whether a mathematics journal seems reputable?
# ::tok How can I tell whether a mathematics journal seems reputable ?
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1 3-4|0.0 6-7|0.0.0.0.0.0 7-8|0.0.0.0.0 8-9|0.0.0 9-10|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.482688 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	possible-01	1-2
# ::node	0.0	tell-01	3-4
# ::node	0.0.0	seem-01	8-9
# ::node	0.0.0.0	repute-01	9-10
# ::node	0.0.0.0.0	journal	7-8
# ::node	0.0.0.0.0.0	mathematics	6-7
# ::node	0.0.1	i	2-3
# ::node	0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	journal	topic	mathematics	0.0.0.0.0	0.0.0.0.0.0
# ::edge	possible-01	ARG1	tell-01	0	0.0
# ::edge	possible-01	manner	amr-unknown	0	0.1
# ::edge	repute-01	ARG1	journal	0.0.0.0	0.0.0.0.0
# ::edge	seem-01	ARG1	repute-01	0.0.0	0.0.0.0
# ::edge	tell-01	ARG0	i	0.0	0.0.1
# ::edge	tell-01	ARG1	seem-01	0.0	0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / tell-01 :ARG1 (MRPNode-2 / seem-01 :ARG1 (MRPNode-3 / repute-01 :ARG1 (MRPNode-4 / journal :topic (MRPNode-5 / mathematics)))) :ARG0 (MRPNode-6 / i)) :manner (MRPNode-7 / amr-unknown))

# ::id 74
# ::snt How can I stop my pie from burning?
# ::tok How can I stop my pie from burning ?
# ::alignments 0-1|0.0.1 1-2|0 3-4|0.0 4-5|0.0.0.0.0 5-6|0.0.0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.487592 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	possible-01	1-2
# ::node	0.0	stop-01	3-4
# ::node	0.0.0	burn-01	7-8
# ::node	0.0.0.0	pie	5-6
# ::node	0.0.0.0.0	i	4-5
# ::node	0.0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	burn-01	ARG1	pie	0.0.0	0.0.0.0
# ::edge	pie	poss	i	0.0.0.0	0.0.0.0.0
# ::edge	possible-01	ARG1	stop-01	0	0.0
# ::edge	stop-01	ARG0	i	0.0	0.0.0.0.0
# ::edge	stop-01	ARG1	burn-01	0.0	0.0.0
# ::edge	stop-01	manner	amr-unknown	0.0	0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / stop-01 :ARG1 (MRPNode-2 / burn-01 :ARG1 (MRPNode-3 / pie :poss (MRPNode-4 / i))) :ARG0 MRPNode-4 :manner (MRPNode-5 / amr-unknown)))

# ::id 75
# ::snt How do I replace a broken halogen bulb in the recessed light in my bathroom?
# ::tok How do I replace a broken halogen bulb in the recessed light in my bathroom ?
# ::alignments 0-1|0.3 3-4|0 5-6|0.0.1 6-7|0.0.0 7-8|0.0 10-11|0.2.0 11-12|0.2 13-14|0.1 14-15|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.496249 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	replace-01	3-4
# ::node	0.0	bulb	7-8
# ::node	0.0.0	halogen	6-7
# ::node	0.0.1	break-01	5-6
# ::node	0.1	i	13-14
# ::node	0.1.0	bathroom	14-15
# ::node	0.2	light	11-12
# ::node	0.2.0	recess	10-11
# ::node	0.3	amr-unknown	0-1
# ::root	0	replace-01
# ::edge	bulb	ARG1-of	break-01	0.0	0.0.1
# ::edge	bulb	mod	halogen	0.0	0.0.0
# ::edge	i	poss-of	bathroom	0.1	0.1.0
# ::edge	light	ARG1-of	recess	0.2	0.2.0
# ::edge	light	location	bathroom	0.2	0.1.0
# ::edge	replace-01	ARG0	i	0	0.1
# ::edge	replace-01	ARG1	bulb	0	0.0
# ::edge	replace-01	ARG2	light	0	0.2
# ::edge	replace-01	manner	amr-unknown	0	0.3
(MRPNode-0 / replace-01 :ARG1 (MRPNode-1 / bulb :mod (MRPNode-2 / halogen) :ARG1-of (MRPNode-3 / break-01)) :ARG0 (MRPNode-4 / i :poss-of (MRPNode-5 / bathroom)) :ARG2 (MRPNode-6 / light :location MRPNode-5 :ARG1-of (MRPNode-7 / recess)) :manner (MRPNode-8 / amr-unknown))

# ::id 76
# ::snt Is it acceptable as referee to contact an author on a paper you review?
# ::tok Is it acceptable as referee to contact an author on a paper you review ?
# ::alignments 2-3|0.0 4-5|0.0.0 6-7|0.0.1 8-9|0.0.1.1+0.0.1.1.0 11-12|0.0.1.0 12-13|0.0.1.0.0.0 13-14|0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.507961 ::parser eager_oracle ::smatch 0.8333333333333334 ::n_actions 42
# ::node	0	possible-01	
# ::node	0.0	accept-01	2-3
# ::node	0.0.0	referee	4-5
# ::node	0.0.1	contact-01	6-7
# ::node	0.0.1.0	paper	11-12
# ::node	0.0.1.0.0	review-01	13-14
# ::node	0.0.1.0.0.0	you	12-13
# ::node	0.0.1.1	person	8-9
# ::node	0.0.1.1.0	author-01	8-9
# ::node	0.1	amr-unknown	
# ::root	0	possible-01
# ::edge	accept-01	ARG1	contact-01	0.0	0.0.1
# ::edge	accept-01	ARG1	referee	0.0	0.0.0
# ::edge	contact-01	ARG0	person	0.0.1	0.0.1.1
# ::edge	contact-01	ARG1	paper	0.0.1	0.0.1.0
# ::edge	paper	ARG1-of	review-01	0.0.1.0	0.0.1.0.0
# ::edge	person	ARG0-of	author-01	0.0.1.1	0.0.1.1.0
# ::edge	possible-01	ARG1	accept-01	0	0.0
# ::edge	possible-01	ARG1-of	amr-unknown	0	0.1
# ::edge	review-01	ARG0	you	0.0.1.0.0	0.0.1.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / accept-01 :ARG1 (MRPNode-2 / referee) :ARG1 (MRPNode-3 / contact-01 :ARG1 (MRPNode-4 / paper :ARG1-of (MRPNode-5 / review-01 :ARG0 (MRPNode-6 / you))) :ARG0 (MRPNode-7 / person :ARG0-of (MRPNode-8 / author-01)))) :ARG1-of (MRPNode-9 / amr-unknown))

# ::id 77
# ::snt What is a good solo to learn in the Dorian mode?
# ::tok What is a good solo to learn in the Dorian mode ?
# ::alignments 0-1|0.1 3-4|0 6-7|0.0 9-10|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 10-11|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.512329 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	good-02	3-4
# ::node	0.0	learn-01	6-7
# ::node	0.0.0	mode	10-11
# ::node	0.0.0.0	book	9-10
# ::node	0.0.0.0.0	name	9-10
# ::node	0.0.0.0.0.0	dorian	9-10
# ::node	0.1	amr-unknown	0-1
# ::root	0	good-02
# ::edge	book	name	name	0.0.0.0	0.0.0.0.0
# ::edge	good-02	ARG1	amr-unknown	0	0.1
# ::edge	good-02	ARG1	learn-01	0	0.0
# ::edge	learn-01	ARG1	mode	0.0	0.0.0
# ::edge	mode	mod	book	0.0.0	0.0.0.0
# ::edge	name	op1	dorian	0.0.0.0.0	0.0.0.0.0.0
(MRPNode-0 / good-02 :ARG1 (MRPNode-1 / learn-01 :ARG1 (MRPNode-2 / mode :mod (MRPNode-3 / book :name (MRPNode-4 / name :op1 dorian)))) :ARG1 (MRPNode-5 / amr-unknown))

# ::id 78
# ::snt How can I get rid of fleas?
# ::tok How can I get rid of fleas ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.1 4-5|0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.515357 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	possible-01	1-2
# ::node	0.0	rid-01	4-5
# ::node	0.0.0	flea	6-7
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	possible-01	ARG1	rid-01	0	0.0
# ::edge	rid-01	ARG0	i	0.0	0.0.1
# ::edge	rid-01	ARG1	flea	0.0	0.0.0
# ::edge	rid-01	manner	amr-unknown	0.0	0.0.2
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / rid-01 :ARG1 (MRPNode-2 / flea) :ARG0 (MRPNode-3 / i) :manner (MRPNode-4 / amr-unknown)))

# ::id 79
# ::snt How can I add a GFCI receptacle on a circuit with split receptacles?
# ::tok How can I add a GFCI receptacle on a circuit with split receptacles ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.0 3-4|0.0 5-6|0.1.0+0.1.0.0+0.1.0.0.0 6-7|0.1 9-10|0.0.1 11-12|0.0.1.0.0.0 12-13|0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.530490 ::parser eager_oracle ::smatch 0.909090909090909 ::n_actions 44
# ::node	0	possible-01	1-2
# ::node	0.0	add-02	3-4
# ::node	0.0.0	i	2-3
# ::node	0.0.1	circuit	9-10
# ::node	0.0.1.0	have-03	
# ::node	0.0.1.0.0	receptacle	12-13
# ::node	0.0.1.0.0.0	split-01	11-12
# ::node	0.0.2	amr-unknown	0-1
# ::node	0.1	receptacle	6-7
# ::node	0.1.0	product	5-6
# ::node	0.1.0.0	name	5-6
# ::node	0.1.0.0.0	gfci	5-6
# ::root	0	possible-01
# ::edge	add-02	ARG0	i	0.0	0.0.0
# ::edge	add-02	ARG2	circuit	0.0	0.0.1
# ::edge	add-02	manner	amr-unknown	0.0	0.0.2
# ::edge	circuit	ARG1-of	have-03	0.0.1	0.0.1.0
# ::edge	have-03	ARG1	receptacle	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	gfci	0.1.0.0	0.1.0.0.0
# ::edge	possible-01	ARG1	add-02	0	0.0
# ::edge	possible-01	manner	receptacle	0	0.1
# ::edge	product	name	name	0.1.0	0.1.0.0
# ::edge	receptacle	ARG1-of	split-01	0.0.1.0.0	0.0.1.0.0.0
# ::edge	receptacle	mod	product	0.1	0.1.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / add-02 :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / circuit :ARG1-of (MRPNode-4 / have-03 :ARG1 (MRPNode-5 / receptacle :ARG1-of (MRPNode-6 / split-01)))) :manner (MRPNode-7 / amr-unknown)) :manner (MRPNode-8 / receptacle :mod (MRPNode-9 / product :name (MRPNode-10 / name :op1 gfci))))

# ::id 80
# ::snt How does Paying credit card in full VS paying with interest will affect your credit score?
# ::tok How does Paying credit card in full VS paying with interest will affect your credit score ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0.1.0.1 4-5|0.1.0 6-7|0.1.0.0 10-11|0.1.1 12-13|0 13-14|0.0.0 14-15|0.0.1 15-16|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.574044 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	affect-01	12-13
# ::node	0.0	score	15-16
# ::node	0.0.0	you	13-14
# ::node	0.0.1	credit	14-15
# ::node	0.1	pay-01	2-3
# ::node	0.1.0	card	4-5
# ::node	0.1.0.0	full-09	6-7
# ::node	0.1.0.1	credit-02	3-4
# ::node	0.1.1	interest	10-11
# ::node	0.2	amr-unknown	0-1
# ::root	0	affect-01
# ::edge	affect-01	ARG0	pay-01	0	0.1
# ::edge	affect-01	ARG1	score	0	0.0
# ::edge	affect-01	manner	amr-unknown	0	0.2
# ::edge	card	mod	credit-02	0.1.0	0.1.0.1
# ::edge	card	mod	full-09	0.1.0	0.1.0.0
# ::edge	pay-01	ARG1	card	0.1	0.1.0
# ::edge	pay-01	manner	interest	0.1	0.1.1
# ::edge	score	mod	credit	0.0	0.0.1
# ::edge	score	mod	you	0.0	0.0.0
(MRPNode-0 / affect-01 :ARG1 (MRPNode-1 / score :mod (MRPNode-2 / you) :mod (MRPNode-3 / credit)) :ARG0 (MRPNode-4 / pay-01 :ARG1 (MRPNode-5 / card :mod (MRPNode-6 / full-09) :mod (MRPNode-7 / credit-02)) :manner (MRPNode-8 / interest)) :manner (MRPNode-9 / amr-unknown))

# ::id 81
# ::snt Should I contact a PhD student or his supervisor for potential collaboration?
# ::tok Should I contact a PhD student or his supervisor for potential collaboration ?
# ::alignments 0-1|0 1-2|0.0.1 2-3|0.0 5-6|0.0.0.0+0.0.0.0.0 6-7|0.0.0 8-9|0.0.0.1+0.0.0.1.0 10-11|0.0.2.0 11-12|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:37.584481 ::parser eager_oracle ::smatch 0.9130434782608696 ::n_actions 48
# ::node	0	recommend-01	0-1
# ::node	0.0	contact-01	2-3
# ::node	0.0.0	or	6-7
# ::node	0.0.0.0	person	5-6
# ::node	0.0.0.0.0	study-01	5-6
# ::node	0.0.0.0.0.0	doctor	
# ::node	0.0.0.1	person	8-9
# ::node	0.0.0.1.0	supervise-01	8-9
# ::node	0.0.1	i	1-2
# ::node	0.0.2	collaborate-01	11-12
# ::node	0.0.2.0	potential	10-11
# ::node	0.1	amr-unknown	
# ::root	0	recommend-01
# ::edge	collaborate-01	ARG1	or	0.0.2	0.0.0
# ::edge	collaborate-01	mod	potential	0.0.2	0.0.2.0
# ::edge	contact-01	ARG0	i	0.0	0.0.1
# ::edge	contact-01	ARG1	or	0.0	0.0.0
# ::edge	contact-01	purpose	collaborate-01	0.0	0.0.2
# ::edge	or	op1	person	0.0.0	0.0.0.0
# ::edge	or	op2	person	0.0.0	0.0.0.1
# ::edge	person	ARG0-of	study-01	0.0.0.0	0.0.0.0.0
# ::edge	person	ARG0-of	supervise-01	0.0.0.1	0.0.0.1.0
# ::edge	recommend-01	ARG1	contact-01	0	0.0
# ::edge	recommend-01	ARG2	amr-unknown	0	0.1
# ::edge	study-01	location	doctor	0.0.0.0.0	0.0.0.0.0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / contact-01 :ARG1 (MRPNode-2 / or :op1 (MRPNode-3 / person :ARG0-of (MRPNode-4 / study-01 :location (MRPNode-5 / doctor))) :op2 (MRPNode-6 / person :ARG0-of (MRPNode-7 / supervise-01))) :ARG0 (MRPNode-8 / i) :purpose (MRPNode-9 / collaborate-01 :ARG1 MRPNode-2 :mod (MRPNode-10 / potential))) :ARG2 (MRPNode-11 / amr-unknown))

# ::id 82
# ::snt How can I replace a ceiling fan light pull chain?
# ::tok How can I replace a ceiling fan light pull chain ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0.1.0 7-8|0.0.0.1 8-9|0.0.0 9-10|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.590819 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	possible-01	1-2
# ::node	0.0	replace-01	3-4
# ::node	0.0.0	pull-01	8-9
# ::node	0.0.0.0	chain	9-10
# ::node	0.0.0.1	light	7-8
# ::node	0.0.0.1.0	ceiling	5-6
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	light	mod	ceiling	0.0.0.1	0.0.0.1.0
# ::edge	possible-01	ARG1	replace-01	0	0.0
# ::edge	pull-01	ARG1	chain	0.0.0	0.0.0.0
# ::edge	pull-01	ARG1	light	0.0.0	0.0.0.1
# ::edge	replace-01	ARG0	i	0.0	0.0.1
# ::edge	replace-01	ARG1	pull-01	0.0	0.0.0
# ::edge	replace-01	ARG2	amr-unknown	0.0	0.0.2
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / replace-01 :ARG1 (MRPNode-2 / pull-01 :ARG1 (MRPNode-3 / chain) :ARG1 (MRPNode-4 / light :mod (MRPNode-5 / ceiling))) :ARG0 (MRPNode-6 / i) :ARG2 (MRPNode-7 / amr-unknown)))

# ::id 83
# ::snt How do I maintain a good relationship with my old boss after being promoted?
# ::tok How do I maintain a good relationship with my old boss after being promoted ?
# ::alignments 0-1|0.2 3-4|0 5-6|0.0.0 6-7|0.0 8-9|0.0.2 9-10|0.0.2.1.0 10-11|0.0.2.1+0.0.2.1.1 11-12|0.1 13-14|0.0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.604357 ::parser eager_oracle ::smatch 0.9130434782608696 ::n_actions 50
# ::node	0	maintain-01	3-4
# ::node	0.0	relation-03	6-7
# ::node	0.0.0	good-02	5-6
# ::node	0.0.1	person	
# ::node	0.0.2	i	8-9
# ::node	0.0.2.0	promote-01	13-14
# ::node	0.0.2.1	have-rel-role-91	10-11
# ::node	0.0.2.1.0	old	9-10
# ::node	0.0.2.1.1	boss	10-11
# ::node	0.1	after	11-12
# ::node	0.2	amr-unknown	0-1
# ::root	0	maintain-01
# ::edge	have-rel-role-91	ARG0	person	0.0.2.1	0.0.1
# ::edge	have-rel-role-91	ARG2	boss	0.0.2.1	0.0.2.1.1
# ::edge	have-rel-role-91	ARG2	old	0.0.2.1	0.0.2.1.0
# ::edge	i	ARG1-of	have-rel-role-91	0.0.2	0.0.2.1
# ::edge	i	ARG1-of	promote-01	0.0.2	0.0.2.0
# ::edge	maintain-01	ARG0	i	0	0.0.2
# ::edge	maintain-01	ARG1	relation-03	0	0.0
# ::edge	maintain-01	manner	amr-unknown	0	0.2
# ::edge	maintain-01	time	after	0	0.1
# ::edge	promote-01	ARG0	person	0.0.2.0	0.0.1
# ::edge	relation-03	ARG0	i	0.0	0.0.2
# ::edge	relation-03	ARG1-of	good-02	0.0	0.0.0
# ::edge	relation-03	ARG2	person	0.0	0.0.1
(MRPNode-0 / maintain-01 :ARG1 (MRPNode-1 / relation-03 :ARG1-of (MRPNode-2 / good-02) :ARG2 (MRPNode-3 / person) :ARG0 (MRPNode-4 / i :ARG1-of (MRPNode-5 / promote-01 :ARG0 MRPNode-3) :ARG1-of (MRPNode-6 / have-rel-role-91 :ARG0 MRPNode-3 :ARG2 (MRPNode-7 / old) :ARG2 (MRPNode-8 / boss)))) :ARG0 MRPNode-4 :time (MRPNode-9 / after) :manner (MRPNode-10 / amr-unknown))

# ::id 84
# ::snt Can I ask a company what I should wear to an interview?
# ::tok Can I ask a company what I should wear to an interview ?
# ::alignments 0-1|0 1-2|0.0.0.0.1 2-3|0.0 4-5|0.0.1 5-6|0.1 6-7|0.0.0 7-8|0.0.0.0.0 8-9|0.0.0.0 11-12|0.0.0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:37.641946 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	possible-01	0-1
# ::node	0.0	ask-01	2-3
# ::node	0.0.0	thing	6-7
# ::node	0.0.0.0	wear-01	8-9
# ::node	0.0.0.0.0	recommend-01	7-8
# ::node	0.0.0.0.1	i	1-2
# ::node	0.0.0.0.1.0	interview-01	11-12
# ::node	0.0.1	company	4-5
# ::node	0.1	amr-unknown	5-6
# ::root	0	possible-01
# ::edge	ask-01	ARG0	i	0.0	0.0.0.0.1
# ::edge	ask-01	ARG1	thing	0.0	0.0.0
# ::edge	ask-01	ARG2	company	0.0	0.0.1
# ::edge	i	ARG1-of	interview-01	0.0.0.0.1	0.0.0.0.1.0
# ::edge	interview-01	ARG2	wear-01	0.0.0.0.1.0	0.0.0.0
# ::edge	possible-01	ARG1	ask-01	0	0.0
# ::edge	possible-01	ARG2	amr-unknown	0	0.1
# ::edge	thing	ARG1-of	wear-01	0.0.0	0.0.0.0
# ::edge	wear-01	ARG0	i	0.0.0.0	0.0.0.0.1
# ::edge	wear-01	ARG1-of	recommend-01	0.0.0.0	0.0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / ask-01 :ARG1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / wear-01 :ARG1-of (MRPNode-4 / recommend-01) :ARG0 (MRPNode-5 / i :ARG1-of (MRPNode-6 / interview-01 :ARG2 MRPNode-3)))) :ARG0 MRPNode-5 :ARG2 (MRPNode-7 / company)) :ARG2 (MRPNode-8 / amr-unknown))

# ::id 85
# ::snt U.S. income tax & charitable donations: How much is income tax reduced by donations?
# ::tok U.S. income tax & charitable donations : How much is income tax reduced by donations ?
# ::alignments 0-1|0.2+0.2.0+0.2.0.0 1-2|0.0.0 2-3|0.0 4-5|0.1.0.0 5-6|0.1.0 7-8|0.1.2 11-12|0.1.1 12-13|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:38.053768 ::parser eager_oracle ::smatch 0.8 ::n_actions 40
# ::node	0	and	
# ::node	0.0	tax-01	2-3
# ::node	0.0.0	income	1-2
# ::node	0.1	reduce-01	12-13
# ::node	0.1.0	donate-01	5-6
# ::node	0.1.0.0	charitable	4-5
# ::node	0.1.1	tax-01	11-12
# ::node	0.1.2	amr-unknown	7-8
# ::node	0.2	country	0-1
# ::node	0.2.0	name	0-1
# ::node	0.2.0.0	u.s.	0-1
# ::root	0	and
# ::edge	and	domain	country	0	0.2
# ::edge	and	op1	tax-01	0	0.0
# ::edge	and	op2	reduce-01	0	0.1
# ::edge	country	name	name	0.2	0.2.0
# ::edge	donate-01	mod	charitable	0.1.0	0.1.0.0
# ::edge	name	op1	u.s.	0.2.0	0.2.0.0
# ::edge	reduce-01	ARG1	donate-01	0.1	0.1.0
# ::edge	reduce-01	ARG1	tax-01	0.1	0.1.1
# ::edge	reduce-01	ARG2	amr-unknown	0.1	0.1.2
# ::edge	tax-01	ARG3	income	0.0	0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / tax-01 :ARG3 (MRPNode-2 / income)) :op2 (MRPNode-3 / reduce-01 :ARG1 (MRPNode-4 / donate-01 :mod (MRPNode-5 / charitable)) :ARG1 (MRPNode-6 / tax-01) :ARG2 (MRPNode-7 / amr-unknown)) :domain (MRPNode-8 / country :name (MRPNode-9 / name :op1 u.s.)))

# ::id 86
# ::snt Can I connect two load lines to a GFCI receptacle?
# ::tok Can I connect two load lines to a GFCI receptacle ?
# ::alignments 0-1|0 1-2|0.0.1 2-3|0.0 3-4|0.0.0.0 4-5|0.0.0.1 5-6|0.0.0 8-9|0.0.2.0+0.0.2.0.0+0.0.2.0.0.0 9-10|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:38.060775 ::parser eager_oracle ::smatch 0.9473684210526316 ::n_actions 37
# ::node	0	possible-01	0-1
# ::node	0.0	connect-01	2-3
# ::node	0.0.0	line	5-6
# ::node	0.0.0.0	2	3-4
# ::node	0.0.0.1	load	4-5
# ::node	0.0.1	i	1-2
# ::node	0.0.2	receptacle	9-10
# ::node	0.0.2.0	product	8-9
# ::node	0.0.2.0.0	name	8-9
# ::node	0.0.2.0.0.0	gfci	8-9
# ::node	0.1	amr-unknown	
# ::root	0	possible-01
# ::edge	connect-01	ARG0	i	0.0	0.0.1
# ::edge	connect-01	ARG1	line	0.0	0.0.0
# ::edge	connect-01	ARG2	receptacle	0.0	0.0.2
# ::edge	line	mod	load	0.0.0	0.0.0.1
# ::edge	line	quant	2	0.0.0	0.0.0.0
# ::edge	name	op1	gfci	0.0.2.0.0	0.0.2.0.0.0
# ::edge	possible-01	ARG1	amr-unknown	0	0.1
# ::edge	possible-01	ARG1	connect-01	0	0.0
# ::edge	product	name	name	0.0.2.0	0.0.2.0.0
# ::edge	receptacle	mod	product	0.0.2	0.0.2.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / connect-01 :ARG1 (MRPNode-2 / line :quant 2 :mod (MRPNode-3 / load)) :ARG0 (MRPNode-4 / i) :ARG2 (MRPNode-5 / receptacle :mod (MRPNode-6 / product :name (MRPNode-7 / name :op1 gfci)))) :ARG1 (MRPNode-8 / amr-unknown))

# ::id 87
# ::snt How do I replace a broken halogen bulb in the recessed light in my bathroom?
# ::tok How do I replace a broken halogen bulb in the recessed light in my bathroom ?
# ::alignments 0-1|0.3 3-4|0 5-6|0.0.1 6-7|0.0.0 7-8|0.0 10-11|0.2.0 11-12|0.2 13-14|0.1 14-15|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:38.069666 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	replace-01	3-4
# ::node	0.0	bulb	7-8
# ::node	0.0.0	halogen	6-7
# ::node	0.0.1	break-01	5-6
# ::node	0.1	i	13-14
# ::node	0.1.0	bathroom	14-15
# ::node	0.2	light	11-12
# ::node	0.2.0	recess	10-11
# ::node	0.3	amr-unknown	0-1
# ::root	0	replace-01
# ::edge	bulb	ARG1-of	break-01	0.0	0.0.1
# ::edge	bulb	mod	halogen	0.0	0.0.0
# ::edge	i	poss-of	bathroom	0.1	0.1.0
# ::edge	light	ARG1-of	recess	0.2	0.2.0
# ::edge	light	location	bathroom	0.2	0.1.0
# ::edge	replace-01	ARG0	i	0	0.1
# ::edge	replace-01	ARG1	bulb	0	0.0
# ::edge	replace-01	ARG2	light	0	0.2
# ::edge	replace-01	manner	amr-unknown	0	0.3
(MRPNode-0 / replace-01 :ARG1 (MRPNode-1 / bulb :mod (MRPNode-2 / halogen) :ARG1-of (MRPNode-3 / break-01)) :ARG0 (MRPNode-4 / i :poss-of (MRPNode-5 / bathroom)) :ARG2 (MRPNode-6 / light :location MRPNode-5 :ARG1-of (MRPNode-7 / recess)) :manner (MRPNode-8 / amr-unknown))

# ::id 88
# ::snt How should I patch a popcorn ceiling?
# ::tok How should I patch a popcorn ceiling ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.1 5-6|0.0.0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:38.072438 ::parser eager_oracle ::smatch 0.5555555555555556 ::n_actions 22
# ::node	0	recommend-01	1-2
# ::node	0.0	achieve-01	
# ::node	0.0.0	ceiling	6-7
# ::node	0.0.0.0	popcorn	5-6
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	recommend-01
# ::edge	achieve-01	ARG0	i	0.0	0.0.1
# ::edge	achieve-01	ARG1	ceiling	0.0	0.0.0
# ::edge	achieve-01	manner	amr-unknown	0.0	0.0.2
# ::edge	ceiling	topic	popcorn	0.0.0	0.0.0.0
# ::edge	recommend-01	ARG1	achieve-01	0	0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / achieve-01 :ARG1 (MRPNode-2 / ceiling :topic (MRPNode-3 / popcorn)) :ARG0 (MRPNode-4 / i) :manner (MRPNode-5 / amr-unknown)))

# ::id 89
# ::snt What do I do if a professor at a foreign university doesn't respond to my emails?
# ::tok What do I do if a professor at a foreign university does n't respond to my emails ?
# ::alignments 0-1|0.2 3-4|0 6-7|0.1.1 9-10|0.1.1.0.0 10-11|0.1.1.0 12-13|0.1.0 13-14|0.1 15-16|0.0 16-17|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:38.086916 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	do-02	3-4
# ::node	0.0	i	15-16
# ::node	0.0.0	email-01	16-17
# ::node	0.1	respond-01	13-14
# ::node	0.1.0	-	12-13
# ::node	0.1.1	professor	6-7
# ::node	0.1.1.0	university	10-11
# ::node	0.1.1.0.0	foreign	9-10
# ::node	0.2	amr-unknown	0-1
# ::root	0	do-02
# ::edge	do-02	ARG1	amr-unknown	0	0.2
# ::edge	do-02	ARG1	i	0	0.0
# ::edge	do-02	condition	respond-01	0	0.1
# ::edge	i	ARG2-of	email-01	0.0	0.0.0
# ::edge	professor	location	university	0.1.1	0.1.1.0
# ::edge	respond-01	ARG0	professor	0.1	0.1.1
# ::edge	respond-01	polarity	-	0.1	0.1.0
# ::edge	university	mod	foreign	0.1.1.0	0.1.1.0.0
(MRPNode-0 / do-02 :ARG1 (MRPNode-1 / i :ARG2-of (MRPNode-2 / email-01)) :condition (MRPNode-3 / respond-01 :polarity - :ARG0 (MRPNode-4 / professor :location (MRPNode-5 / university :mod (MRPNode-6 / foreign)))) :ARG1 (MRPNode-7 / amr-unknown))

# ::id 90
# ::snt How can I keep my dog from barking when I don't know what he's barking at?
# ::tok How can I keep my dog from barking when I do n't know what he 's barking at ?
# ::alignments 0-1|0.1 1-2|0 3-4|0.0 5-6|0.0.0.0 7-8|0.0.0 9-10|0.0.0.1 11-12|0.0.1+0.0.1.0 12-13|0.0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:38.541969 ::parser eager_oracle ::smatch 1.0 ::n_actions 51
# ::node	0	possible-01	1-2
# ::node	0.0	keep-04	3-4
# ::node	0.0.0	bark-01	7-8
# ::node	0.0.0.0	dog	5-6
# ::node	0.0.0.1	i	9-10
# ::node	0.0.1	know-01	11-12
# ::node	0.0.1.0	-	11-12
# ::node	0.0.1.1	thing	12-13
# ::node	0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	bark-01	ARG0	dog	0.0.0	0.0.0.0
# ::edge	bark-01	ARG0	i	0.0.0	0.0.0.1
# ::edge	keep-04	ARG0	i	0.0	0.0.0.1
# ::edge	keep-04	ARG1	bark-01	0.0	0.0.0
# ::edge	keep-04	time	know-01	0.0	0.0.1
# ::edge	know-01	ARG0	i	0.0.1	0.0.0.1
# ::edge	know-01	ARG1	thing	0.0.1	0.0.1.1
# ::edge	know-01	polarity	-	0.0.1	0.0.1.0
# ::edge	possible-01	ARG1	keep-04	0	0.0
# ::edge	possible-01	manner	amr-unknown	0	0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / keep-04 :ARG1 (MRPNode-2 / bark-01 :ARG0 (MRPNode-3 / dog) :ARG0 (MRPNode-4 / i)) :ARG0 MRPNode-4 :time (MRPNode-5 / know-01 :polarity - :ARG0 MRPNode-4 :ARG1 (MRPNode-6 / thing))) :manner (MRPNode-7 / amr-unknown))

# ::id 91
# ::snt Travelling to Romania for 4 days by Schengen visa issued by Germany?
# ::tok Travelling to Romania for 4 days by Schengen visa issued by Germany ?
# ::alignments 0-1|0 2-3|0.1+0.1.0+0.1.0.0 4-5|0.2.0 5-6|0.2+0.2.1 7-8|0.0.1+0.0.1.0+0.0.1.0.0 8-9|0.0 9-10|0.0.0 11-12|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:38.554525 ::parser eager_oracle ::smatch 0.962962962962963 ::n_actions 43
# ::node	0	travel-01	0-1
# ::node	0.0	visa	8-9
# ::node	0.0.0	issue-01	9-10
# ::node	0.0.0.0	country	11-12
# ::node	0.0.0.0.0	name	11-12
# ::node	0.0.0.0.0.0	germany	11-12
# ::node	0.0.1	company	7-8
# ::node	0.0.1.0	name	7-8
# ::node	0.0.1.0.0	schengen	7-8
# ::node	0.1	country	2-3
# ::node	0.1.0	name	2-3
# ::node	0.1.0.0	romania	2-3
# ::node	0.2	temporal-quantity	5-6
# ::node	0.2.0	4	4-5
# ::node	0.2.1	day	5-6
# ::node	0.3	amr-unknown	
# ::root	0	travel-01
# ::edge	company	name	name	0.0.1	0.0.1.0
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	issue-01	ARG0	country	0.0.0	0.0.0.0
# ::edge	name	op1	germany	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	romania	0.1.0	0.1.0.0
# ::edge	name	op1	schengen	0.0.1.0	0.0.1.0.0
# ::edge	temporal-quantity	quant	4	0.2	0.2.0
# ::edge	temporal-quantity	unit	day	0.2	0.2.1
# ::edge	travel-01	ARG0	amr-unknown	0	0.3
# ::edge	travel-01	ARG0	visa	0	0.0
# ::edge	travel-01	ARG4	country	0	0.1
# ::edge	travel-01	duration	temporal-quantity	0	0.2
# ::edge	visa	mod	company	0.0	0.0.1
# ::edge	visa	mod	issue-01	0.0	0.0.0
(MRPNode-0 / travel-01 :ARG0 (MRPNode-1 / visa :mod (MRPNode-2 / issue-01 :ARG0 (MRPNode-3 / country :name (MRPNode-4 / name :op1 germany))) :mod (MRPNode-5 / company :name (MRPNode-6 / name :op1 schengen))) :ARG4 (MRPNode-7 / country :name (MRPNode-8 / name :op1 romania)) :duration (MRPNode-9 / temporal-quantity :quant 4 :unit (MRPNode-10 / day)) :ARG0 (MRPNode-11 / amr-unknown))

# ::id 92
# ::snt What is the professional way to follow up with a manager for project opportunity?
# ::tok What is the professional way to follow up with a manager for project opportunity ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.1 10-11|0.1.0+0.1.0.0 12-13|0.1.1.0 13-14|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:38.562150 ::parser eager_oracle ::smatch 1.0 ::n_actions 42
# ::node	0	way	4-5
# ::node	0.0	professional	3-4
# ::node	0.1	follow-up-03	6-7
# ::node	0.1.0	person	10-11
# ::node	0.1.0.0	manage-01	10-11
# ::node	0.1.1	opportunity	13-14
# ::node	0.1.1.0	project	12-13
# ::node	0.2	amr-unknown	0-1
# ::root	0	way
# ::edge	follow-up-03	ARG1	person	0.1	0.1.0
# ::edge	follow-up-03	purpose	opportunity	0.1	0.1.1
# ::edge	opportunity	mod	project	0.1.1	0.1.1.0
# ::edge	person	ARG0-of	manage-01	0.1.0	0.1.0.0
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	domain	follow-up-03	0	0.1
# ::edge	way	mod	professional	0	0.0
(MRPNode-0 / way :mod (MRPNode-1 / professional) :domain (MRPNode-2 / follow-up-03 :ARG1 (MRPNode-3 / person :ARG0-of (MRPNode-4 / manage-01)) :purpose (MRPNode-5 / opportunity :mod (MRPNode-6 / project))) :domain (MRPNode-7 / amr-unknown))

# ::id 93
# ::snt Why is compensation so much higher in the US than in Western Europe on average?
# ::tok Why is compensation so much higher in the US than in Western Europe on average ?
# ::alignments 2-3|0.0.1.2 3-4|0 4-5|0.0.1.0.0 5-6|0.0 8-9|0.0.0+0.0.0.0+0.0.0.0.0 11-13|0.0.1.1.1+0.0.1.1.1.0+0.0.1.1.1.0.0+0.0.1.1.1.0.1 14-15|0.0.1.1+0.0.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:38.608753 ::parser eager_oracle ::smatch 0.7547169811320755 ::n_actions 42
# ::node	0	cause-01	3-4
# ::node	0.0	high-02	5-6
# ::node	0.0.0	country	8-9
# ::node	0.0.0.0	name	8-9
# ::node	0.0.0.0.0	us	8-9
# ::node	0.0.1	have-degree-91	
# ::node	0.0.1.0	more	
# ::node	0.0.1.0.0	much	4-5
# ::node	0.0.1.0.0.0	so	
# ::node	0.0.1.1	thing	14-15
# ::node	0.0.1.1.0	average-04	14-15
# ::node	0.0.1.1.1	continent	11-13
# ::node	0.0.1.1.1.0	name	11-13
# ::node	0.0.1.1.1.0.0	western	11-13
# ::node	0.0.1.1.1.0.1	europe	11-13
# ::node	0.0.1.2	compensate-01	2-3
# ::node	0.1	amr-unknown	
# ::root	0	cause-01
# ::edge	cause-01	ARG0	amr-unknown	0	0.1
# ::edge	cause-01	ARG1	high-02	0	0.0
# ::edge	continent	name	name	0.0.1.1.1	0.0.1.1.1.0
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	have-degree-91	ARG1	compensate-01	0.0.1	0.0.1.2
# ::edge	have-degree-91	ARG3	more	0.0.1	0.0.1.0
# ::edge	have-degree-91	ARG4	thing	0.0.1	0.0.1.1
# ::edge	high-02	ARG1	compensate-01	0.0	0.0.1.2
# ::edge	high-02	ARG1	country	0.0	0.0.0
# ::edge	high-02	ARG1	have-degree-91	0.0	0.0.1
# ::edge	more	quant	much	0.0.1.0	0.0.1.0.0
# ::edge	much	degree	so	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	us	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	western	0.0.1.1.1.0	0.0.1.1.1.0.0
# ::edge	name	op2	europe	0.0.1.1.1.0	0.0.1.1.1.0.1
# ::edge	thing	ARG1-of	average-04	0.0.1.1	0.0.1.1.0
# ::edge	thing	location	continent	0.0.1.1	0.0.1.1.1
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / high-02 :ARG1 (MRPNode-2 / country :name (MRPNode-3 / name :op1 us)) :ARG1 (MRPNode-4 / have-degree-91 :ARG3 (MRPNode-5 / more :quant (MRPNode-6 / much :degree (MRPNode-7 / so))) :ARG4 (MRPNode-8 / thing :ARG1-of (MRPNode-9 / average-04) :location (MRPNode-10 / continent :name (MRPNode-11 / name :op1 western :op2 europe))) :ARG1 (MRPNode-12 / compensate-01)) :ARG1 MRPNode-12) :ARG0 (MRPNode-13 / amr-unknown))

# ::id 94
# ::snt What is the significance of the cat?
# ::tok What is the significance of the cat ?
# ::alignments 0-1|0.1 3-4|0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:38.610622 ::parser eager_oracle ::smatch 1.0 ::n_actions 19
# ::node	0	significant-02	3-4
# ::node	0.0	cat	6-7
# ::node	0.1	amr-unknown	0-1
# ::root	0	significant-02
# ::edge	significant-02	ARG1	cat	0	0.0
# ::edge	significant-02	ARG3	amr-unknown	0	0.1
(MRPNode-0 / significant-02 :ARG1 (MRPNode-1 / cat) :ARG3 (MRPNode-2 / amr-unknown))

# ::id 95
# ::snt What could be causing water pressure to build up after changing my under sink filter?
# ::tok What could be causing water pressure to build up after changing my under sink filter ?
# ::alignments 0-1|0.0.1 1-2|0 4-5|0.0.2.0 5-6|0.0.2 7-8|0.0 9-10|0.0.0 10-11|0.0.0.0 11-12|0.0.0.0.0.1 12-13|0.0.0.0.0.0 14-15|0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:38.628670 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	possible-01	1-2
# ::node	0.0	build-up-05	7-8
# ::node	0.0.0	after	9-10
# ::node	0.0.0.0	change-01	10-11
# ::node	0.0.0.0.0	filter-02	14-15
# ::node	0.0.0.0.0.0	under	12-13
# ::node	0.0.0.0.0.1	i	11-12
# ::node	0.0.1	amr-unknown	0-1
# ::node	0.0.2	pressure	5-6
# ::node	0.0.2.0	water	4-5
# ::root	0	possible-01
# ::edge	after	op1	change-01	0.0.0	0.0.0.0
# ::edge	build-up-05	ARG1	after	0.0	0.0.0
# ::edge	build-up-05	ARG1	amr-unknown	0.0	0.0.1
# ::edge	build-up-05	ARG1	pressure	0.0	0.0.2
# ::edge	change-01	ARG1	filter-02	0.0.0.0	0.0.0.0.0
# ::edge	filter-02	ARG1	i	0.0.0.0.0	0.0.0.0.0.1
# ::edge	filter-02	ARG1	under	0.0.0.0.0	0.0.0.0.0.0
# ::edge	possible-01	ARG1	build-up-05	0	0.0
# ::edge	pressure	mod	water	0.0.2	0.0.2.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / build-up-05 :ARG1 (MRPNode-2 / after :op1 (MRPNode-3 / change-01 :ARG1 (MRPNode-4 / filter-02 :ARG1 (MRPNode-5 / under) :ARG1 (MRPNode-6 / i)))) :ARG1 (MRPNode-7 / amr-unknown) :ARG1 (MRPNode-8 / pressure :mod (MRPNode-9 / water))))

# ::id 96
# ::snt How do I convert a ceiling fan with 2 separate wall switches to a separate fan & light switch?
# ::tok How do I convert a ceiling fan with 2 separate wall switches to a separate fan & light switch ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 5-6|0.0.0 6-7|0.0 7-8|0.2.1 8-9|0.2.1.0.0 9-10|0.0.1.0.1 10-11|0.0.1.0.0+0.2.1.0.1 11-12|0.0.1.0+0.2.1.0 14-15|0.2.0 18-19|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:38.987782 ::parser eager_oracle ::smatch 0.9285714285714286 ::n_actions 66
# ::node	0	convert-01	3-4
# ::node	0.0	fan	6-7
# ::node	0.0.0	ceiling	5-6
# ::node	0.0.1	have-03	
# ::node	0.0.1.0	switch	11-12
# ::node	0.0.1.0.0	wall	10-11
# ::node	0.0.1.0.1	separate-02	9-10
# ::node	0.1	i	2-3
# ::node	0.2	switch	18-19
# ::node	0.2.0	separate-02	14-15
# ::node	0.2.1	and	7-8
# ::node	0.2.1.0	switch	11-12
# ::node	0.2.1.0.0	2	8-9
# ::node	0.2.1.0.1	wall	10-11
# ::node	0.3	amr-unknown	0-1
# ::root	0	convert-01
# ::edge	and	op2	switch	0.2.1	0.2.1.0
# ::edge	convert-01	ARG0	i	0	0.1
# ::edge	convert-01	ARG1	fan	0	0.0
# ::edge	convert-01	ARG2	switch	0	0.2
# ::edge	convert-01	manner	amr-unknown	0	0.3
# ::edge	fan	ARG0-of	have-03	0.0	0.0.1
# ::edge	fan	mod	ceiling	0.0	0.0.0
# ::edge	have-03	ARG1	switch	0.0.1	0.0.1.0
# ::edge	switch	ARG0-of	and	0.2	0.2.1
# ::edge	switch	ARG1-of	separate-02	0.0.1.0	0.0.1.0.1
# ::edge	switch	ARG1-of	separate-02	0.2	0.2.0
# ::edge	switch	ARG1-of	wall	0.0.1.0	0.0.1.0.0
# ::edge	switch	quant	2	0.2.1.0	0.2.1.0.0
# ::edge	switch	quant	wall	0.2.1.0	0.2.1.0.1
(MRPNode-0 / convert-01 :ARG1 (MRPNode-1 / fan :mod (MRPNode-2 / ceiling) :ARG0-of (MRPNode-3 / have-03 :ARG1 (MRPNode-4 / switch :ARG1-of (MRPNode-5 / wall) :ARG1-of (MRPNode-6 / separate-02)))) :ARG0 (MRPNode-7 / i) :ARG2 (MRPNode-8 / switch :ARG1-of (MRPNode-9 / separate-02) :ARG0-of (MRPNode-10 / and :op2 (MRPNode-11 / switch :quant 2 :quant (MRPNode-12 / wall)))) :manner (MRPNode-13 / amr-unknown))

# ::id 97
# ::snt After a job interview, is it inappropriate if I want to talk to an employee in private?
# ::tok After a job interview , is it inappropriate if I want to talk to an employee in private ?
# ::alignments 0-1|0.3 2-3|0.3.0.0 3-4|0.3.0 7-8|0+0.0 9-10|0.1.0.2 10-11|0.1 12-13|0.1.0 15-16|0.1.0.0+0.1.0.0.0 17-18|0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.013191 ::parser eager_oracle ::smatch 0.9583333333333334 ::n_actions 61
# ::node	0	appropriate-02	7-8
# ::node	0.0	-	7-8
# ::node	0.1	want-01	10-11
# ::node	0.1.0	talk-01	12-13
# ::node	0.1.0.0	person	15-16
# ::node	0.1.0.0.0	employ-01	15-16
# ::node	0.1.0.1	private-02	17-18
# ::node	0.1.0.2	i	9-10
# ::node	0.2	amr-unknown	
# ::node	0.3	after	0-1
# ::node	0.3.0	interview-01	3-4
# ::node	0.3.0.0	job	2-3
# ::root	0	appropriate-02
# ::edge	after	op1	interview-01	0.3	0.3.0
# ::edge	appropriate-02	ARG1	amr-unknown	0	0.2
# ::edge	appropriate-02	ARG1	want-01	0	0.1
# ::edge	appropriate-02	polarity	-	0	0.0
# ::edge	appropriate-02	time	after	0	0.3
# ::edge	interview-01	ARG1	i	0.3.0	0.1.0.2
# ::edge	interview-01	ARG2	job	0.3.0	0.3.0.0
# ::edge	person	ARG1-of	employ-01	0.1.0.0	0.1.0.0.0
# ::edge	talk-01	ARG0	i	0.1.0	0.1.0.2
# ::edge	talk-01	ARG1-of	private-02	0.1.0	0.1.0.1
# ::edge	talk-01	ARG2	person	0.1.0	0.1.0.0
# ::edge	want-01	ARG0	i	0.1	0.1.0.2
# ::edge	want-01	ARG1	talk-01	0.1	0.1.0
(MRPNode-0 / appropriate-02 :polarity - :ARG1 (MRPNode-1 / want-01 :ARG1 (MRPNode-2 / talk-01 :ARG2 (MRPNode-3 / person :ARG1-of (MRPNode-4 / employ-01)) :ARG1-of (MRPNode-5 / private-02) :ARG0 (MRPNode-6 / i)) :ARG0 MRPNode-6) :ARG1 (MRPNode-7 / amr-unknown) :time (MRPNode-8 / after :op1 (MRPNode-9 / interview-01 :ARG1 MRPNode-6 :ARG2 (MRPNode-10 / job))))

# ::id 98
# ::snt How do you remove paint from hair?
# ::tok How do you remove paint from hair ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0 6-7|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:39.015927 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	remove-01	3-4
# ::node	0.0	paint	4-5
# ::node	0.1	you	2-3
# ::node	0.2	hair	6-7
# ::node	0.3	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	remove-01	ARG0	you	0	0.1
# ::edge	remove-01	ARG1	paint	0	0.0
# ::edge	remove-01	ARG2	hair	0	0.2
# ::edge	remove-01	manner	amr-unknown	0	0.3
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / paint) :ARG0 (MRPNode-2 / you) :ARG2 (MRPNode-3 / hair) :manner (MRPNode-4 / amr-unknown))

# ::id 99
# ::snt Is my U.S. driver's license valid in Europe?
# ::tok Is my U.S. driver 's license valid in Europe ?
# ::alignments 1-2|0.0.0.0 2-3|0.0.1+0.0.1.0+0.0.1.0.0 3-4|0.0.0 5-6|0.0 6-7|0 8-9|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.023695 ::parser eager_oracle ::smatch 0.9473684210526316 ::n_actions 31
# ::node	0	valid-02	6-7
# ::node	0.0	license-01	5-6
# ::node	0.0.0	drive-01	3-4
# ::node	0.0.0.0	i	1-2
# ::node	0.0.1	country	2-3
# ::node	0.0.1.0	name	2-3
# ::node	0.0.1.0.0	u.s.	2-3
# ::node	0.1	amr-unknown	
# ::node	0.2	continent	8-9
# ::node	0.2.0	name	8-9
# ::node	0.2.0.0	europe	8-9
# ::root	0	valid-02
# ::edge	continent	name	name	0.2	0.2.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	drive-01	ARG0	i	0.0.0	0.0.0.0
# ::edge	license-01	ARG1	drive-01	0.0	0.0.0
# ::edge	license-01	ARG2	country	0.0	0.0.1
# ::edge	name	op1	europe	0.2.0	0.2.0.0
# ::edge	name	op1	u.s.	0.0.1.0	0.0.1.0.0
# ::edge	valid-02	ARG1	license-01	0	0.0
# ::edge	valid-02	ARG2	amr-unknown	0	0.1
# ::edge	valid-02	location	continent	0	0.2
(MRPNode-0 / valid-02 :ARG1 (MRPNode-1 / license-01 :ARG1 (MRPNode-2 / drive-01 :ARG0 (MRPNode-3 / i)) :ARG2 (MRPNode-4 / country :name (MRPNode-5 / name :op1 u.s.))) :ARG2 (MRPNode-6 / amr-unknown) :location (MRPNode-7 / continent :name (MRPNode-8 / name :op1 europe)))

# ::id 100
# ::snt Is it safe to leave butter at room temperature?
# ::tok Is it safe to leave butter at room temperature ?
# ::alignments 2-3|0 4-5|0.0 5-6|0.0.1 7-8|0.0.0.0 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.027804 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 27
# ::node	0	safe-01	2-3
# ::node	0.0	leave-12	4-5
# ::node	0.0.0	temperature	8-9
# ::node	0.0.0.0	room	7-8
# ::node	0.0.1	butter	5-6
# ::node	0.1	amr-unknown	
# ::root	0	safe-01
# ::edge	leave-12	ARG1	butter	0.0	0.0.1
# ::edge	leave-12	ARG1	temperature	0.0	0.0.0
# ::edge	safe-01	ARG0	amr-unknown	0	0.1
# ::edge	safe-01	ARG1	leave-12	0	0.0
# ::edge	temperature	mod	room	0.0.0	0.0.0.0
(MRPNode-0 / safe-01 :ARG1 (MRPNode-1 / leave-12 :ARG1 (MRPNode-2 / temperature :mod (MRPNode-3 / room)) :ARG1 (MRPNode-4 / butter)) :ARG0 (MRPNode-5 / amr-unknown))

# ::id 101
# ::snt How do I remove paint from a wood floor?
# ::tok How do I remove paint from a wood floor ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0 7-8|0.2.0 8-9|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:39.031393 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	remove-01	3-4
# ::node	0.0	paint	4-5
# ::node	0.1	i	2-3
# ::node	0.2	floor	8-9
# ::node	0.2.0	wood	7-8
# ::node	0.3	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	floor	mod	wood	0.2	0.2.0
# ::edge	remove-01	ARG0	i	0	0.1
# ::edge	remove-01	ARG1	paint	0	0.0
# ::edge	remove-01	ARG2	floor	0	0.2
# ::edge	remove-01	manner	amr-unknown	0	0.3
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / paint) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / floor :mod (MRPNode-4 / wood)) :manner (MRPNode-5 / amr-unknown))

# ::id 102
# ::snt What causes these chips in a cement brick wall, and how can I fix them?
# ::tok What causes these chips in a cement brick wall , and how can I fix them ?
# ::alignments 0-1|0.0.1 1-2|0.0 2-3|0.0.0.0 3-4|0.0.0 6-7|0.0.0.1.0.0 7-8|0.0.0.1.0 8-9|0.0.0.1 10-11|0 12-13|0.1 13-14|0.1.0.0 14-15|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.054406 ::parser eager_oracle ::smatch 1.0 ::n_actions 55
# ::node	0	and	10-11
# ::node	0.0	cause-01	1-2
# ::node	0.0.0	chip	3-4
# ::node	0.0.0.0	this	2-3
# ::node	0.0.0.1	wall	8-9
# ::node	0.0.0.1.0	brick	7-8
# ::node	0.0.0.1.0.0	cement	6-7
# ::node	0.0.1	amr-unknown	0-1
# ::node	0.1	possible-01	12-13
# ::node	0.1.0	fix-02	14-15
# ::node	0.1.0.0	i	13-14
# ::root	0	and
# ::edge	and	op1	cause-01	0	0.0
# ::edge	and	op2	possible-01	0	0.1
# ::edge	brick	consist-of	cement	0.0.0.1.0	0.0.0.1.0.0
# ::edge	cause-01	ARG0	amr-unknown	0.0	0.0.1
# ::edge	cause-01	ARG1	chip	0.0	0.0.0
# ::edge	chip	location	wall	0.0.0	0.0.0.1
# ::edge	chip	mod	this	0.0.0	0.0.0.0
# ::edge	fix-02	ARG0	i	0.1.0	0.1.0.0
# ::edge	fix-02	ARG1	chip	0.1.0	0.0.0
# ::edge	possible-01	ARG1	fix-02	0.1	0.1.0
# ::edge	wall	consist-of	brick	0.0.0.1	0.0.0.1.0
(MRPNode-0 / and :op1 (MRPNode-1 / cause-01 :ARG1 (MRPNode-2 / chip :mod (MRPNode-3 / this) :location (MRPNode-4 / wall :consist-of (MRPNode-5 / brick :consist-of (MRPNode-6 / cement)))) :ARG0 (MRPNode-7 / amr-unknown)) :op2 (MRPNode-8 / possible-01 :ARG1 (MRPNode-9 / fix-02 :ARG1 MRPNode-2 :ARG0 (MRPNode-10 / i))))

# ::id 103
# ::snt What could be causing my toilet to back up?
# ::tok What could be causing my toilet to back up ?
# ::alignments 0-1|0.0.1 1-2|0 3-4|0.0 4-5|0.0.0.0.0 5-6|0.0.0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.059928 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	possible-01	1-2
# ::node	0.0	cause-01	3-4
# ::node	0.0.0	back-up-04	7-8
# ::node	0.0.0.0	toilet	5-6
# ::node	0.0.0.0.0	i	4-5
# ::node	0.0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	back-up-04	ARG1	toilet	0.0.0	0.0.0.0
# ::edge	cause-01	ARG0	amr-unknown	0.0	0.0.1
# ::edge	cause-01	ARG1	back-up-04	0.0	0.0.0
# ::edge	possible-01	ARG1	cause-01	0	0.0
# ::edge	toilet	poss	i	0.0.0.0	0.0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / cause-01 :ARG1 (MRPNode-2 / back-up-04 :ARG1 (MRPNode-3 / toilet :poss (MRPNode-4 / i))) :ARG0 (MRPNode-5 / amr-unknown)))

# ::id 104
# ::snt How to bake a chicken?
# ::tok How to bake a chicken ?
# ::alignments 0-1|0.1 2-3|0.0 4-5|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.061703 ::parser eager_oracle ::smatch 0.5 ::n_actions 16
# ::node	0	have-manner-91	
# ::node	0.0	bake-01	2-3
# ::node	0.0.0	chicken	4-5
# ::node	0.1	amr-unknown	0-1
# ::root	0	have-manner-91
# ::edge	bake-01	ARG1	chicken	0.0	0.0.0
# ::edge	have-manner-91	ARG1	bake-01	0	0.0
# ::edge	have-manner-91	ARG2	amr-unknown	0	0.1
(MRPNode-0 / have-manner-91 :ARG1 (MRPNode-1 / bake-01 :ARG1 (MRPNode-2 / chicken)) :ARG2 (MRPNode-3 / amr-unknown))

# ::id 105
# ::snt What kind of spider web is this - and how do I get rid of it?
# ::tok What kind of spider web is this - and how do I get rid of it ?
# ::alignments 0-1|0.0.0 1-2|0.0.1 3-4|0.0.2 4-5|0.0 7-8|0 9-10|0.1.1 11-12|0.1.0 13-14|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.079555 ::parser eager_oracle ::smatch 1.0 ::n_actions 45
# ::node	0	and	7-8
# ::node	0.0	web	4-5
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	kind	1-2
# ::node	0.0.2	spider	3-4
# ::node	0.1	rid-01	13-14
# ::node	0.1.0	i	11-12
# ::node	0.1.1	amr-unknown	9-10
# ::root	0	and
# ::edge	and	op1	web	0	0.0
# ::edge	and	op2	rid-01	0	0.1
# ::edge	rid-01	ARG0	i	0.1	0.1.0
# ::edge	rid-01	ARG1	web	0.1	0.0
# ::edge	rid-01	manner	amr-unknown	0.1	0.1.1
# ::edge	web	mod	amr-unknown	0.0	0.0.0
# ::edge	web	mod	kind	0.0	0.0.1
# ::edge	web	mod	spider	0.0	0.0.2
(MRPNode-0 / and :op1 (MRPNode-1 / web :mod (MRPNode-2 / amr-unknown) :mod (MRPNode-3 / kind) :mod (MRPNode-4 / spider)) :op2 (MRPNode-5 / rid-01 :ARG1 MRPNode-1 :ARG0 (MRPNode-6 / i) :manner (MRPNode-7 / amr-unknown)))

# ::id 106
# ::snt What goes in a student success statement for a faculty application?
# ::tok What goes in a student success statement for a faculty application ?
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0.1+0.0.0.1.0 5-6|0.0.0 6-7|0.0 9-10|0.0.0.0.0 10-11|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.088441 ::parser eager_oracle ::smatch 1.0 ::n_actions 40
# ::node	0	go-01	1-2
# ::node	0.0	state-01	6-7
# ::node	0.0.0	succeed-01	5-6
# ::node	0.0.0.0	apply-01	10-11
# ::node	0.0.0.0.0	faculty	9-10
# ::node	0.0.0.1	person	4-5
# ::node	0.0.0.1.0	study-01	4-5
# ::node	0.1	amr-unknown	0-1
# ::root	0	go-01
# ::edge	apply-01	ARG0	faculty	0.0.0.0	0.0.0.0.0
# ::edge	go-01	ARG1	state-01	0	0.0
# ::edge	go-01	ARG4	amr-unknown	0	0.1
# ::edge	person	ARG0-of	study-01	0.0.0.1	0.0.0.1.0
# ::edge	state-01	ARG3	succeed-01	0.0	0.0.0
# ::edge	succeed-01	ARG0	person	0.0.0	0.0.0.1
# ::edge	succeed-01	ARG1	apply-01	0.0.0	0.0.0.0
(MRPNode-0 / go-01 :ARG1 (MRPNode-1 / state-01 :ARG3 (MRPNode-2 / succeed-01 :ARG1 (MRPNode-3 / apply-01 :ARG0 (MRPNode-4 / faculty)) :ARG0 (MRPNode-5 / person :ARG0-of (MRPNode-6 / study-01)))) :ARG4 (MRPNode-7 / amr-unknown))

# ::id 107
# ::snt How do I make soft chapattis?
# ::tok How do I make soft chapattis ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 4-5|0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.091346 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	make-01	3-4
# ::node	0.0	chapattis	5-6
# ::node	0.0.0	soft-02	4-5
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	make-01
# ::edge	chapattis	ARG1-of	soft-02	0.0	0.0.0
# ::edge	make-01	ARG0	i	0	0.1
# ::edge	make-01	ARG1	chapattis	0	0.0
# ::edge	make-01	manner	amr-unknown	0	0.2
(MRPNode-0 / make-01 :ARG1 (MRPNode-1 / chapattis :ARG1-of (MRPNode-2 / soft-02)) :ARG0 (MRPNode-3 / i) :manner (MRPNode-4 / amr-unknown))

# ::id 108
# ::snt How should you respond to your teacher who cannot help you with a recommendation?
# ::tok How should you respond to your teacher who cannot help you with a recommendation ?
# ::alignments 1-2|0.0.0.1.1.0 2-3|0.0.0.1.1 3-4|0.0 6-7|0.0.0.0 7-8|0.0.1 8-9|0.0.0.1.0 9-10|0.0.0+0.0.0.1 13-14|0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.159921 ::parser eager_oracle ::smatch 0.975609756097561 ::n_actions 50
# ::node	0	recommend-01	13-14
# ::node	0.0	respond-01	3-4
# ::node	0.0.0	person	9-10
# ::node	0.0.0.0	teach-01	6-7
# ::node	0.0.0.1	help-01	9-10
# ::node	0.0.0.1.0	possible-01	8-9
# ::node	0.0.0.1.0.0	-	
# ::node	0.0.0.1.1	you	2-3
# ::node	0.0.0.1.1.0	recommend-01	1-2
# ::node	0.0.1	amr-unknown	7-8
# ::root	0	recommend-01
# ::edge	help-01	ARG1	recommend-01	0.0.0.1	0.0.0.1.1.0
# ::edge	help-01	ARG1-of	possible-01	0.0.0.1	0.0.0.1.0
# ::edge	help-01	ARG2	you	0.0.0.1	0.0.0.1.1
# ::edge	person	ARG0-of	help-01	0.0.0	0.0.0.1
# ::edge	person	ARG0-of	teach-01	0.0.0	0.0.0.0
# ::edge	possible-01	polarity	-	0.0.0.1.0	0.0.0.1.0.0
# ::edge	recommend-01	ARG1	respond-01	0	0.0
# ::edge	respond-01	ARG0	you	0.0	0.0.0.1.1
# ::edge	respond-01	ARG1	person	0.0	0.0.0
# ::edge	respond-01	ARG2	amr-unknown	0.0	0.0.1
# ::edge	you	ARG2-of	recommend-01	0.0.0.1.1	0.0.0.1.1.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / respond-01 :ARG1 (MRPNode-2 / person :ARG0-of (MRPNode-3 / teach-01) :ARG0-of (MRPNode-4 / help-01 :ARG1-of (MRPNode-5 / possible-01 :polarity -) :ARG2 (MRPNode-6 / you :ARG2-of (MRPNode-7 / recommend-01)) :ARG1 MRPNode-7)) :ARG0 MRPNode-6 :ARG2 (MRPNode-8 / amr-unknown)))

# ::id 109
# ::snt What should I do with my credit card debt?
# ::tok What should I do with my credit card debt ?
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 5-6|0.0.1 6-7|0.0.2.0.0 7-8|0.0.2.0 8-9|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:39.175265 ::parser eager_oracle ::smatch 1.0 ::n_actions 35
# ::node	0	recommend-01	1-2
# ::node	0.0	do-02	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	i	5-6
# ::node	0.0.2	debt	8-9
# ::node	0.0.2.0	card	7-8
# ::node	0.0.2.0.0	credit	6-7
# ::root	0	recommend-01
# ::edge	card	mod	credit	0.0.2.0	0.0.2.0.0
# ::edge	debt	mod	card	0.0.2	0.0.2.0
# ::edge	debt	poss	i	0.0.2	0.0.1
# ::edge	do-02	ARG0	i	0.0	0.0.1
# ::edge	do-02	ARG1	amr-unknown	0.0	0.0.0
# ::edge	do-02	ARG2	debt	0.0	0.0.2
# ::edge	recommend-01	ARG1	do-02	0	0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / amr-unknown) :ARG0 (MRPNode-3 / i) :ARG2 (MRPNode-4 / debt :poss MRPNode-3 :mod (MRPNode-5 / card :mod (MRPNode-6 / credit)))))

# ::id 110
# ::snt What's the best way to run a wire from inside my garage to the outside?
# ::tok What 's the best way to run a wire from inside my garage to the outside ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 8-9|0.3.0 10-11|0.3.2 11-12|0.3.2.0.0 12-13|0.3.2.0 15-16|0.3.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.196197 ::parser eager_oracle ::smatch 0.7804878048780487 ::n_actions 45
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	run-01	6-7
# ::node	0.3.0	wire	8-9
# ::node	0.3.1	and	
# ::node	0.3.1.0	outside	15-16
# ::node	0.3.2	inside	10-11
# ::node	0.3.2.0	garage	12-13
# ::node	0.3.2.0.0	i	11-12
# ::root	0	way
# ::edge	and	op2	outside	0.3.1	0.3.1.0
# ::edge	garage	poss	i	0.3.2.0	0.3.2.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	inside	op1	garage	0.3.2	0.3.2.0
# ::edge	run-01	ARG1	wire	0.3	0.3.0
# ::edge	run-01	source	and	0.3	0.3.1
# ::edge	run-01	source	inside	0.3	0.3.2
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	run-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / run-01 :ARG1 (MRPNode-6 / wire) :source (MRPNode-7 / and :op2 (MRPNode-8 / outside)) :source (MRPNode-9 / inside :op1 (MRPNode-10 / garage :poss (MRPNode-11 / i)))))

# ::id 111
# ::snt How do I stop my dog from jumping on me?
# ::tok How do I stop my dog from jumping on me ?
# ::alignments 0-1|0.2 3-4|0 4-5|0.0.0 5-6|0.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.201239 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	stop-03	3-4
# ::node	0.0	dog	5-6
# ::node	0.0.0	i	4-5
# ::node	0.1	jump-03	7-8
# ::node	0.2	amr-unknown	0-1
# ::root	0	stop-03
# ::edge	dog	poss	i	0.0	0.0.0
# ::edge	jump-03	ARG0	dog	0.1	0.0
# ::edge	stop-03	ARG0	i	0	0.0.0
# ::edge	stop-03	ARG1	dog	0	0.0
# ::edge	stop-03	ARG2	jump-03	0	0.1
# ::edge	stop-03	manner	amr-unknown	0	0.2
(MRPNode-0 / stop-03 :ARG1 (MRPNode-1 / dog :poss (MRPNode-2 / i)) :ARG0 MRPNode-2 :ARG2 (MRPNode-3 / jump-03 :ARG0 MRPNode-1) :manner (MRPNode-4 / amr-unknown))

# ::id 112
# ::snt Should I tell prospective employer that I got a raise at my current job?
# ::tok Should I tell prospective employer that I got a raise at my current job ?
# ::alignments 0-1|0 1-2|0.0.0.1.1 2-3|0.0 3-4|0.0.1.0 4-5|0.0.1+0.0.1.1 7-8|0.0.0 9-10|0.0.0.0 12-13|0.0.0.1.0 13-14|0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.217555 ::parser eager_oracle ::smatch 0.9565217391304348 ::n_actions 51
# ::node	0	recommend-01	0-1
# ::node	0.0	tell-01	2-3
# ::node	0.0.0	get-01	7-8
# ::node	0.0.0.0	raise-01	9-10
# ::node	0.0.0.1	job	13-14
# ::node	0.0.0.1.0	current	12-13
# ::node	0.0.0.1.1	i	1-2
# ::node	0.0.1	person	4-5
# ::node	0.0.1.0	prospective	3-4
# ::node	0.0.1.1	employ-01	4-5
# ::node	0.1	amr-unknown	
# ::root	0	recommend-01
# ::edge	get-01	ARG0	i	0.0.0	0.0.0.1.1
# ::edge	get-01	ARG1	raise-01	0.0.0	0.0.0.0
# ::edge	get-01	location	job	0.0.0	0.0.0.1
# ::edge	job	poss	i	0.0.0.1	0.0.0.1.1
# ::edge	job	time	current	0.0.0.1	0.0.0.1.0
# ::edge	person	ARG0-of	employ-01	0.0.1	0.0.1.1
# ::edge	person	mod	prospective	0.0.1	0.0.1.0
# ::edge	recommend-01	ARG1	tell-01	0	0.0
# ::edge	recommend-01	ARG2	amr-unknown	0	0.1
# ::edge	tell-01	ARG0	i	0.0	0.0.0.1.1
# ::edge	tell-01	ARG0	person	0.0	0.0.1
# ::edge	tell-01	ARG1	get-01	0.0	0.0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / tell-01 :ARG1 (MRPNode-2 / get-01 :ARG1 (MRPNode-3 / raise-01) :location (MRPNode-4 / job :time (MRPNode-5 / current) :poss (MRPNode-9 / i)) :ARG0 MRPNode-9) :ARG0 (MRPNode-6 / person :mod (MRPNode-7 / prospective) :ARG0-of (MRPNode-8 / employ-01)) :ARG0 MRPNode-9) :ARG2 (MRPNode-10 / amr-unknown))

# ::id 113
# ::snt How to judge the quality of my own paper?
# ::tok How to judge the quality of my own paper ?
# ::alignments 0-1|0.1 2-3|0 4-5|0.0 6-7|0.0.0.0 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.222085 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	judge-01	2-3
# ::node	0.0	quality	4-5
# ::node	0.0.0	paper	8-9
# ::node	0.0.0.0	i	6-7
# ::node	0.1	amr-unknown	0-1
# ::root	0	judge-01
# ::edge	judge-01	ARG0	amr-unknown	0	0.1
# ::edge	judge-01	ARG1	quality	0	0.0
# ::edge	paper	poss	i	0.0.0	0.0.0.0
# ::edge	quality	poss	paper	0.0	0.0.0
(MRPNode-0 / judge-01 :ARG1 (MRPNode-1 / quality :poss (MRPNode-2 / paper :poss (MRPNode-3 / i))) :ARG0 (MRPNode-4 / amr-unknown))

# ::id 114
# ::snt Is it a bad writing practice to start sentences with a verb?
# ::tok Is it a bad writing practice to start sentences with a verb ?
# ::alignments 3-4|0.1 4-5|0.0.0.0 5-6|0 7-8|0.0 8-9|0.0.0 11-12|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.227934 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 36
# ::node	0	practice-01	5-6
# ::node	0.0	start-01	7-8
# ::node	0.0.0	sentence	8-9
# ::node	0.0.0.0	write-01	4-5
# ::node	0.0.1	verb	11-12
# ::node	0.1	bad-07	3-4
# ::node	0.2	amr-unknown	
# ::root	0	practice-01
# ::edge	practice-01	ARG1	amr-unknown	0	0.2
# ::edge	practice-01	ARG1	start-01	0	0.0
# ::edge	practice-01	ARG1-of	bad-07	0	0.1
# ::edge	sentence	ARG0-of	write-01	0.0.0	0.0.0.0
# ::edge	start-01	ARG1	sentence	0.0	0.0.0
# ::edge	start-01	ARG2	verb	0.0	0.0.1
(MRPNode-0 / practice-01 :ARG1 (MRPNode-1 / start-01 :ARG1 (MRPNode-2 / sentence :ARG0-of (MRPNode-3 / write-01)) :ARG2 (MRPNode-4 / verb)) :ARG1-of (MRPNode-5 / bad-07) :ARG1 (MRPNode-6 / amr-unknown))

# ::id 115
# ::snt Schengen visa for UK citizen?
# ::tok Schengen visa for UK citizen ?
# ::alignments 0-1|0.2+0.2.0+0.2.0.0 1-2|0 3-4|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 4-5|0.0+0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.233208 ::parser eager_oracle ::smatch 0.9473684210526316 ::n_actions 29
# ::node	0	visa	1-2
# ::node	0.0	person	4-5
# ::node	0.0.0	have-org-role-91	4-5
# ::node	0.0.0.0	citizen	4-5
# ::node	0.0.0.0.0	country	3-4
# ::node	0.0.0.0.0.0	name	3-4
# ::node	0.0.0.0.0.0.0	uk	3-4
# ::node	0.1	amr-unknown	
# ::node	0.2	organization	0-1
# ::node	0.2.0	name	0-1
# ::node	0.2.0.0	schengen	0-1
# ::root	0	visa
# ::edge	citizen	mod	country	0.0.0.0	0.0.0.0.0
# ::edge	country	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	have-org-role-91	ARG1	citizen	0.0.0	0.0.0.0
# ::edge	name	op1	schengen	0.2.0	0.2.0.0
# ::edge	name	op1	uk	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	organization	name	name	0.2	0.2.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.0
# ::edge	visa	beneficiary	person	0	0.0
# ::edge	visa	mod	amr-unknown	0	0.1
# ::edge	visa	mod	organization	0	0.2
(MRPNode-0 / visa :beneficiary (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-org-role-91 :ARG1 (MRPNode-3 / citizen :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 uk))))) :mod (MRPNode-6 / amr-unknown) :mod (MRPNode-7 / organization :name (MRPNode-8 / name :op1 schengen)))

# ::id 116
# ::snt What could be wrong with my furnace?
# ::tok What could be wrong with my furnace ?
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 5-6|0.0.1.0 6-7|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.236363 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	possible-01	1-2
# ::node	0.0	wrong-02	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	furnace	6-7
# ::node	0.0.1.0	i	5-6
# ::root	0	possible-01
# ::edge	furnace	poss	i	0.0.1	0.0.1.0
# ::edge	possible-01	ARG1	wrong-02	0	0.0
# ::edge	wrong-02	ARG1	amr-unknown	0.0	0.0.0
# ::edge	wrong-02	ARG2	furnace	0.0	0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / wrong-02 :ARG1 (MRPNode-2 / amr-unknown) :ARG2 (MRPNode-3 / furnace :poss (MRPNode-4 / i))))

# ::id 117
# ::snt How do you teach a toddler not to share?
# ::tok How do you teach a toddler not to share ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0.1 6-7|0.0.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.240515 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	teach-01	3-4
# ::node	0.0	share-01	8-9
# ::node	0.0.0	-	6-7
# ::node	0.0.1	toddler	5-6
# ::node	0.1	you	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	teach-01
# ::edge	share-01	ARG0	toddler	0.0	0.0.1
# ::edge	share-01	polarity	-	0.0	0.0.0
# ::edge	teach-01	ARG0	you	0	0.1
# ::edge	teach-01	ARG1	share-01	0	0.0
# ::edge	teach-01	ARG2	toddler	0	0.0.1
# ::edge	teach-01	manner	amr-unknown	0	0.2
(MRPNode-0 / teach-01 :ARG1 (MRPNode-1 / share-01 :polarity - :ARG0 (MRPNode-3 / toddler)) :ARG0 (MRPNode-2 / you) :ARG2 MRPNode-3 :manner (MRPNode-4 / amr-unknown))

# ::id 118
# ::snt What is the best way to learn finger-picking on an acoustic guitar?
# ::tok What is the best way to learn finger - picking on an acoustic guitar ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0.1 9-10|0.3.0 12-13|0.3.0.0.0 13-14|0.3.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.257300 ::parser eager_oracle ::smatch 0.8648648648648648 ::n_actions 41
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	learn-01	6-7
# ::node	0.3.0	pick-01	9-10
# ::node	0.3.0.0	guitar	13-14
# ::node	0.3.0.0.0	acoustic	12-13
# ::node	0.3.0.1	finger	7-8
# ::root	0	way
# ::edge	guitar	mod	acoustic	0.3.0.0	0.3.0.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	learn-01	ARG1	pick-01	0.3	0.3.0
# ::edge	pick-01	instrument	finger	0.3.0	0.3.0.1
# ::edge	pick-01	instrument	guitar	0.3.0	0.3.0.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	learn-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / learn-01 :ARG1 (MRPNode-6 / pick-01 :instrument (MRPNode-7 / guitar :mod (MRPNode-8 / acoustic)) :instrument (MRPNode-9 / finger))))

# ::id 119
# ::snt How do I troubleshoot my electric oven?
# ::tok How do I troubleshoot my electric oven ?
# ::alignments 0-1|0.1 3-4|0 4-5|0.0.1 5-6|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.260958 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	trouble-01	3-4
# ::node	0.0	oven	6-7
# ::node	0.0.0	electric	5-6
# ::node	0.0.1	i	4-5
# ::node	0.1	amr-unknown	0-1
# ::root	0	trouble-01
# ::edge	oven	mod	electric	0.0	0.0.0
# ::edge	oven	poss	i	0.0	0.0.1
# ::edge	trouble-01	ARG0	i	0	0.0.1
# ::edge	trouble-01	ARG1	oven	0	0.0
# ::edge	trouble-01	manner	amr-unknown	0	0.1
(MRPNode-0 / trouble-01 :ARG1 (MRPNode-1 / oven :mod (MRPNode-2 / electric) :poss (MRPNode-3 / i)) :ARG0 MRPNode-3 :manner (MRPNode-4 / amr-unknown))

# ::id 120
# ::snt How to apply for a Schengen visa?
# ::tok How to apply for a Schengen visa ?
# ::alignments 0-1|0.1 2-3|0.0 5-6|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.264551 ::parser eager_oracle ::smatch 0.7272727272727274 ::n_actions 21
# ::node	0	have-manner-91	
# ::node	0.0	apply-01	2-3
# ::node	0.0.0	visa	6-7
# ::node	0.0.0.0	city	5-6
# ::node	0.0.0.0.0	name	5-6
# ::node	0.0.0.0.0.0	schengen	5-6
# ::node	0.1	amr-unknown	0-1
# ::root	0	have-manner-91
# ::edge	apply-01	ARG1	visa	0.0	0.0.0
# ::edge	city	name	name	0.0.0.0	0.0.0.0.0
# ::edge	have-manner-91	ARG1	apply-01	0	0.0
# ::edge	have-manner-91	ARG2	amr-unknown	0	0.1
# ::edge	name	op1	schengen	0.0.0.0.0	0.0.0.0.0.0
# ::edge	visa	mod	city	0.0.0	0.0.0.0
(MRPNode-0 / have-manner-91 :ARG1 (MRPNode-1 / apply-01 :ARG1 (MRPNode-2 / visa :mod (MRPNode-3 / city :name (MRPNode-4 / name :op1 schengen)))) :ARG2 (MRPNode-5 / amr-unknown))

# ::id 121
# ::snt How can I be sure my water softener is working?
# ::tok How can I be sure my water softener is working ?
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1 4-5|0.0 6-7|0.0.0.0.0 7-8|0.0.0.0 9-10|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.274347 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	possible-01	1-2
# ::node	0.0	sure-02	4-5
# ::node	0.0.0	work-09	9-10
# ::node	0.0.0.0	softener	7-8
# ::node	0.0.0.0.0	water	6-7
# ::node	0.0.1	i	2-3
# ::node	0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	possible-01	ARG1	sure-02	0	0.0
# ::edge	possible-01	manner	amr-unknown	0	0.1
# ::edge	softener	mod	water	0.0.0.0	0.0.0.0.0
# ::edge	sure-02	ARG0	i	0.0	0.0.1
# ::edge	sure-02	ARG1	work-09	0.0	0.0.0
# ::edge	work-09	ARG1	softener	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / sure-02 :ARG1 (MRPNode-2 / work-09 :ARG1 (MRPNode-3 / softener :mod (MRPNode-4 / water))) :ARG0 (MRPNode-5 / i)) :manner (MRPNode-6 / amr-unknown))

# ::id 122
# ::snt How do I cap a T junction on a roof ridge?
# ::tok How do I cap a T junction on a roof ridge ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 6-7|0.0 9-10|0.0.0.0 10-11|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.278565 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	cap-01	3-4
# ::node	0.0	junction	6-7
# ::node	0.0.0	ridge	10-11
# ::node	0.0.0.0	roof	9-10
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	cap-01
# ::edge	cap-01	ARG0	i	0	0.1
# ::edge	cap-01	ARG1	junction	0	0.0
# ::edge	cap-01	ARG2	amr-unknown	0	0.2
# ::edge	junction	location	ridge	0.0	0.0.0
# ::edge	ridge	mod	roof	0.0.0	0.0.0.0
(MRPNode-0 / cap-01 :ARG1 (MRPNode-1 / junction :location (MRPNode-2 / ridge :mod (MRPNode-3 / roof))) :ARG0 (MRPNode-4 / i) :ARG2 (MRPNode-5 / amr-unknown))

# ::id 123
# ::snt How do I stop my dog from jumping on me?
# ::tok How do I stop my dog from jumping on me ?
# ::alignments 0-1|0.2 3-4|0 4-5|0.0.0 5-6|0.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.283676 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	stop-03	3-4
# ::node	0.0	dog	5-6
# ::node	0.0.0	i	4-5
# ::node	0.1	jump-03	7-8
# ::node	0.2	amr-unknown	0-1
# ::root	0	stop-03
# ::edge	dog	poss	i	0.0	0.0.0
# ::edge	jump-03	ARG0	dog	0.1	0.0
# ::edge	stop-03	ARG0	i	0	0.0.0
# ::edge	stop-03	ARG1	dog	0	0.0
# ::edge	stop-03	ARG2	jump-03	0	0.1
# ::edge	stop-03	manner	amr-unknown	0	0.2
(MRPNode-0 / stop-03 :ARG1 (MRPNode-1 / dog :poss (MRPNode-2 / i)) :ARG0 MRPNode-2 :ARG2 (MRPNode-3 / jump-03 :ARG0 MRPNode-1) :manner (MRPNode-4 / amr-unknown))

# ::id 124
# ::snt How to make a strong mug of filter coffee without any Coffee machine?
# ::tok How to make a strong mug of filter coffee without any Coffee machine ?
# ::alignments 0-1|0.2 2-3|0 4-5|0.0.0.0 5-6|0.0.0 7-8|0.0.0.1 8-9|0.0 10-11|0.1.1 12-13|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.299128 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 40
# ::node	0	make-01	2-3
# ::node	0.0	coffee	8-9
# ::node	0.0.0	mug	5-6
# ::node	0.0.0.0	strong-02	4-5
# ::node	0.0.0.1	filter-02	7-8
# ::node	0.1	machine	12-13
# ::node	0.1.0	-	
# ::node	0.1.1	any	10-11
# ::node	0.1.2	convert-01	
# ::node	0.2	amr-unknown	0-1
# ::root	0	make-01
# ::edge	coffee	quant	mug	0.0	0.0.0
# ::edge	machine	mod	-	0.1	0.1.0
# ::edge	machine	mod	any	0.1	0.1.1
# ::edge	machine	source	convert-01	0.1	0.1.2
# ::edge	make-01	ARG1	coffee	0	0.0
# ::edge	make-01	manner	amr-unknown	0	0.2
# ::edge	make-01	manner	machine	0	0.1
# ::edge	mug	ARG1-of	strong-02	0.0.0	0.0.0.0
# ::edge	mug	quant	filter-02	0.0.0	0.0.0.1
(MRPNode-0 / make-01 :ARG1 (MRPNode-1 / coffee :quant (MRPNode-2 / mug :ARG1-of (MRPNode-3 / strong-02) :quant (MRPNode-4 / filter-02))) :manner (MRPNode-5 / machine :mod - :mod (MRPNode-6 / any) :source (MRPNode-7 / convert-01)) :manner (MRPNode-8 / amr-unknown))

# ::id 125
# ::snt What are the types of Guitar available and what are the pros and cons of each?
# ::tok What are the types of Guitar available and what are the pros and cons of each ?
# ::alignments 0-1|0.0.0 3-4|0.0 5-6|0.0.1.0 6-7|0.0.1 7-8|0 8-9|0.1.2 11-12|0.1.0 12-13|0.1 13-14|0.1.1 15-16|0.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.348965 ::parser eager_oracle ::smatch 1.0 ::n_actions 53
# ::node	0	and	7-8
# ::node	0.0	type	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	available-02	6-7
# ::node	0.0.1.0	Guitar	5-6
# ::node	0.1	and	12-13
# ::node	0.1.0	pro	11-12
# ::node	0.1.1	con	13-14
# ::node	0.1.1.0	each	15-16
# ::node	0.1.2	amr-unknown	8-9
# ::root	0	and
# ::edge	and	domain	amr-unknown	0.1	0.1.2
# ::edge	and	op1	pro	0.1	0.1.0
# ::edge	and	op1	type	0	0.0
# ::edge	and	op2	and	0	0.1
# ::edge	and	op2	con	0.1	0.1.1
# ::edge	available-02	ARG2	Guitar	0.0.1	0.0.1.0
# ::edge	con	mod	each	0.1.1	0.1.1.0
# ::edge	con	poss	Guitar	0.1.1	0.0.1.0
# ::edge	type	ARG2-of	available-02	0.0	0.0.1
# ::edge	type	domain	amr-unknown	0.0	0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / type :domain (MRPNode-2 / amr-unknown) :ARG2-of (MRPNode-3 / available-02 :ARG2 (MRPNode-4 / Guitar))) :op2 (MRPNode-5 / and :op1 (MRPNode-6 / pro) :op2 (MRPNode-7 / con :poss MRPNode-4 :mod (MRPNode-8 / each)) :domain (MRPNode-9 / amr-unknown)))

# ::id 126
# ::snt How do I fix a hole/gap between my shower tile and the dry wall next to it?
# ::tok How do I fix a hole / gap between my shower tile and the dry wall next to it ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 5-6|0.0.0 6-7|0.0 7-8|0.0.1 8-9|0.2 10-11|0.1.0 14-15|0.0.2.0 15-16|0.0.2 16-17|0.0.2.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.373693 ::parser eager_oracle ::smatch 1.0 ::n_actions 61
# ::node	0	fix-02	3-4
# ::node	0.0	slash	6-7
# ::node	0.0.0	hole	5-6
# ::node	0.0.1	gap	7-8
# ::node	0.0.2	wall	15-16
# ::node	0.0.2.0	dry-08	14-15
# ::node	0.0.2.1	next-to	16-17
# ::node	0.1	i	2-3
# ::node	0.1.0	shower	10-11
# ::node	0.2	between	8-9
# ::node	0.3	amr-unknown	0-1
# ::root	0	fix-02
# ::edge	fix-02	ARG0	i	0	0.1
# ::edge	fix-02	ARG1	slash	0	0.0
# ::edge	fix-02	manner	amr-unknown	0	0.3
# ::edge	fix-02	manner	between	0	0.2
# ::edge	i	poss-of	next-to	0.1	0.0.2.1
# ::edge	i	poss-of	shower	0.1	0.1.0
# ::edge	slash	location	wall	0.0	0.0.2
# ::edge	slash	op1	hole	0.0	0.0.0
# ::edge	slash	op2	gap	0.0	0.0.1
# ::edge	wall	ARG1-of	dry-08	0.0.2	0.0.2.0
# ::edge	wall	location	next-to	0.0.2	0.0.2.1
(MRPNode-0 / fix-02 :ARG1 (MRPNode-1 / slash :op1 (MRPNode-2 / hole) :op2 (MRPNode-3 / gap) :location (MRPNode-4 / wall :ARG1-of (MRPNode-5 / dry-08) :location (MRPNode-8 / next-to))) :ARG0 (MRPNode-6 / i :poss-of (MRPNode-7 / shower) :poss-of MRPNode-8) :manner (MRPNode-9 / between) :manner (MRPNode-10 / amr-unknown))

# ::id 127
# ::snt What is a good solo to learn in the Dorian mode?
# ::tok What is a good solo to learn in the Dorian mode ?
# ::alignments 0-1|0.1 3-4|0 6-7|0.0 9-10|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 10-11|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.379244 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	good-02	3-4
# ::node	0.0	learn-01	6-7
# ::node	0.0.0	mode	10-11
# ::node	0.0.0.0	book	9-10
# ::node	0.0.0.0.0	name	9-10
# ::node	0.0.0.0.0.0	dorian	9-10
# ::node	0.1	amr-unknown	0-1
# ::root	0	good-02
# ::edge	book	name	name	0.0.0.0	0.0.0.0.0
# ::edge	good-02	ARG1	amr-unknown	0	0.1
# ::edge	good-02	ARG1	learn-01	0	0.0
# ::edge	learn-01	ARG1	mode	0.0	0.0.0
# ::edge	mode	mod	book	0.0.0	0.0.0.0
# ::edge	name	op1	dorian	0.0.0.0.0	0.0.0.0.0.0
(MRPNode-0 / good-02 :ARG1 (MRPNode-1 / learn-01 :ARG1 (MRPNode-2 / mode :mod (MRPNode-3 / book :name (MRPNode-4 / name :op1 dorian)))) :ARG1 (MRPNode-5 / amr-unknown))

# ::id 128
# ::snt How do I remove paint from a wood floor?
# ::tok How do I remove paint from a wood floor ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0 7-8|0.2.0 8-9|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:39.382923 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	remove-01	3-4
# ::node	0.0	paint	4-5
# ::node	0.1	i	2-3
# ::node	0.2	floor	8-9
# ::node	0.2.0	wood	7-8
# ::node	0.3	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	floor	mod	wood	0.2	0.2.0
# ::edge	remove-01	ARG0	i	0	0.1
# ::edge	remove-01	ARG1	paint	0	0.0
# ::edge	remove-01	ARG2	floor	0	0.2
# ::edge	remove-01	manner	amr-unknown	0	0.3
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / paint) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / floor :mod (MRPNode-4 / wood)) :manner (MRPNode-5 / amr-unknown))

# ::id 129
# ::snt Would a Colombian citizen with Canadian residency need a transit visa for the UK?
# ::tok Would a Colombian citizen with Canadian residency need a transit visa for the UK ?
# ::alignments 2-3|0.1.0+0.1.0.0+0.1.0.0.0 3-4|0.1 5-6|0.1.1.0+0.1.1.0.0+0.1.1.0.0.0 6-7|0.1.1 7-8|0 9-10|0.0.0 10-11|0.0 13-14|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.398195 ::parser eager_oracle ::smatch 0.8846153846153846 ::n_actions 41
# ::node	0	need-01	7-8
# ::node	0.0	visa	10-11
# ::node	0.0.0	transit	9-10
# ::node	0.1	citizen	3-4
# ::node	0.1.0	country	2-3
# ::node	0.1.0.0	name	2-3
# ::node	0.1.0.0.0	colombia	2-3
# ::node	0.1.1	reside-01	6-7
# ::node	0.1.1.0	country	5-6
# ::node	0.1.1.0.0	name	5-6
# ::node	0.1.1.0.0.0	canada	5-6
# ::node	0.2	country	13-14
# ::node	0.2.0	name	13-14
# ::node	0.2.0.0	uk	13-14
# ::node	0.3	amr-unknown	
# ::root	0	need-01
# ::edge	citizen	ARG0-of	reside-01	0.1	0.1.1
# ::edge	citizen	mod	country	0.1	0.1.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	country	name	name	0.1.1.0	0.1.1.0.0
# ::edge	country	name	name	0.2	0.2.0
# ::edge	name	op1	canada	0.1.1.0.0	0.1.1.0.0.0
# ::edge	name	op1	colombia	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	uk	0.2.0	0.2.0.0
# ::edge	need-01	ARG0	citizen	0	0.1
# ::edge	need-01	ARG1	amr-unknown	0	0.3
# ::edge	need-01	ARG1	visa	0	0.0
# ::edge	need-01	ARG2	country	0	0.2
# ::edge	reside-01	ARG0	country	0.1.1	0.1.1.0
# ::edge	visa	mod	transit	0.0	0.0.0
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / visa :mod (MRPNode-2 / transit)) :ARG0 (MRPNode-3 / citizen :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 colombia)) :ARG0-of (MRPNode-6 / reside-01 :ARG0 (MRPNode-7 / country :name (MRPNode-8 / name :op1 canada)))) :ARG2 (MRPNode-9 / country :name (MRPNode-10 / name :op1 uk)) :ARG1 (MRPNode-11 / amr-unknown))

# ::id 130
# ::snt Is it possible to replace a switch with a receptacle?
# ::tok Is it possible to replace a switch with a receptacle ?
# ::alignments 2-3|0 4-5|0.0 6-7|0.0.0 9-10|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.401678 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 25
# ::node	0	possible-01	2-3
# ::node	0.0	replace-01	4-5
# ::node	0.0.0	switch	6-7
# ::node	0.0.1	receptacle	9-10
# ::node	0.1	amr-unknown	
# ::root	0	possible-01
# ::edge	possible-01	ARG1	amr-unknown	0	0.1
# ::edge	possible-01	ARG1	replace-01	0	0.0
# ::edge	replace-01	ARG1	switch	0.0	0.0.0
# ::edge	replace-01	ARG2	receptacle	0.0	0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / replace-01 :ARG1 (MRPNode-2 / switch) :ARG2 (MRPNode-3 / receptacle)) :ARG1 (MRPNode-4 / amr-unknown))

# ::id 131
# ::snt What is the best way to store fresh berries?
# ::tok What is the best way to store fresh berries ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0.0 8-9|0.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.411347 ::parser eager_oracle ::smatch 0.8275862068965517 ::n_actions 30
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	berry	8-9
# ::node	0.3.0.0	fresh-04	7-8
# ::root	0	way
# ::edge	berry	ARG1-of	fresh-04	0.3.0	0.3.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	store-01	ARG1	berry	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / berry :ARG1-of (MRPNode-7 / fresh-04))))

# ::id 132
# ::snt What is the best way to store fresh berries?
# ::tok What is the best way to store fresh berries ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0.0 8-9|0.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.417971 ::parser eager_oracle ::smatch 0.8275862068965517 ::n_actions 30
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	berry	8-9
# ::node	0.3.0.0	fresh-04	7-8
# ::root	0	way
# ::edge	berry	ARG1-of	fresh-04	0.3.0	0.3.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	store-01	ARG1	berry	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / berry :ARG1-of (MRPNode-7 / fresh-04))))

# ::id 133
# ::snt How long does cooked TVP keep in the fridge?
# ::tok How long does cooked TVP keep in the fridge ?
# ::alignments 0-1|0.2 3-4|0.0.0 4-5|0.0+0.0.1+0.0.1.0 5-6|0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.423062 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	keep-02	5-6
# ::node	0.0	company	4-5
# ::node	0.0.0	cook-01	3-4
# ::node	0.0.1	name	4-5
# ::node	0.0.1.0	tvp	4-5
# ::node	0.1	fridge	8-9
# ::node	0.2	amr-unknown	0-1
# ::root	0	keep-02
# ::edge	company	ARG0-of	cook-01	0.0	0.0.0
# ::edge	company	name	name	0.0	0.0.1
# ::edge	keep-02	ARG1	company	0	0.0
# ::edge	keep-02	duration	amr-unknown	0	0.2
# ::edge	keep-02	location	fridge	0	0.1
# ::edge	name	op1	tvp	0.0.1	0.0.1.0
(MRPNode-0 / keep-02 :ARG1 (MRPNode-1 / company :ARG0-of (MRPNode-2 / cook-01) :name (MRPNode-3 / name :op1 tvp)) :location (MRPNode-4 / fridge) :duration (MRPNode-5 / amr-unknown))

# ::id 134
# ::snt How do I remove paint from a wood floor?
# ::tok How do I remove paint from a wood floor ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0 7-8|0.2.0 8-9|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:39.426935 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	remove-01	3-4
# ::node	0.0	paint	4-5
# ::node	0.1	i	2-3
# ::node	0.2	floor	8-9
# ::node	0.2.0	wood	7-8
# ::node	0.3	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	floor	mod	wood	0.2	0.2.0
# ::edge	remove-01	ARG0	i	0	0.1
# ::edge	remove-01	ARG1	paint	0	0.0
# ::edge	remove-01	ARG2	floor	0	0.2
# ::edge	remove-01	manner	amr-unknown	0	0.3
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / paint) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / floor :mod (MRPNode-4 / wood)) :manner (MRPNode-5 / amr-unknown))

# ::id 135
# ::snt How can I remove a really stuck screw?
# ::tok How can I remove a really stuck screw ?
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.0.2 3-4|0.0 5-6|0.0.1.0.0 6-7|0.0.1.0 7-8|0.0.1+0.0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.439549 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	possible-01	1-2
# ::node	0.0	remove-01	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	thing	7-8
# ::node	0.0.1.0	stick-01	6-7
# ::node	0.0.1.0.0	real-04	5-6
# ::node	0.0.1.1	screw-02	7-8
# ::node	0.0.2	i	2-3
# ::root	0	possible-01
# ::edge	possible-01	ARG1	remove-01	0	0.0
# ::edge	remove-01	ARG0	i	0.0	0.0.2
# ::edge	remove-01	ARG1	amr-unknown	0.0	0.0.0
# ::edge	remove-01	ARG1	thing	0.0	0.0.1
# ::edge	stick-01	ARG1-of	real-04	0.0.1.0	0.0.1.0.0
# ::edge	thing	ARG1-of	screw-02	0.0.1	0.0.1.1
# ::edge	thing	ARG1-of	stick-01	0.0.1	0.0.1.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / remove-01 :ARG1 (MRPNode-2 / amr-unknown) :ARG1 (MRPNode-3 / thing :ARG1-of (MRPNode-4 / stick-01 :ARG1-of (MRPNode-5 / real-04)) :ARG1-of (MRPNode-6 / screw-02)) :ARG0 (MRPNode-7 / i)))

# ::id 136
# ::snt How do I reconnect a ceiling fan light chain?
# ::tok How do I reconnect a ceiling fan light chain ?
# ::alignments 0-1|0.2 2-3|0.1 5-6|0.0.0.0 7-8|0.0.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.443390 ::parser eager_oracle ::smatch 0.5555555555555556 ::n_actions 25
# ::node	0	consolidate-01	
# ::node	0.0	chain	8-9
# ::node	0.0.0	light	7-8
# ::node	0.0.0.0	ceiling	5-6
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	consolidate-01
# ::edge	chain	consist-of	light	0.0	0.0.0
# ::edge	consolidate-01	ARG0	i	0	0.1
# ::edge	consolidate-01	ARG1	chain	0	0.0
# ::edge	consolidate-01	ARG3	amr-unknown	0	0.2
# ::edge	light	mod	ceiling	0.0.0	0.0.0.0
(MRPNode-0 / consolidate-01 :ARG1 (MRPNode-1 / chain :consist-of (MRPNode-2 / light :mod (MRPNode-3 / ceiling))) :ARG0 (MRPNode-4 / i) :ARG3 (MRPNode-5 / amr-unknown))

# ::id 137
# ::snt How should I store eggs in the refrigerator?
# ::tok How should I store eggs in the refrigerator ?
# ::alignments 0-1|0.0.3 1-2|0 2-3|0.0.1 3-4|0.0 4-5|0.0.0 7-8|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:39.447431 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	recommend-01	1-2
# ::node	0.0	store-01	3-4
# ::node	0.0.0	egg	4-5
# ::node	0.0.1	i	2-3
# ::node	0.0.2	refrigerator	7-8
# ::node	0.0.3	amr-unknown	0-1
# ::root	0	recommend-01
# ::edge	recommend-01	ARG1	store-01	0	0.0
# ::edge	store-01	ARG0	i	0.0	0.0.1
# ::edge	store-01	ARG1	egg	0.0	0.0.0
# ::edge	store-01	ARG2	refrigerator	0.0	0.0.2
# ::edge	store-01	manner	amr-unknown	0.0	0.0.3
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / store-01 :ARG1 (MRPNode-2 / egg) :ARG0 (MRPNode-3 / i) :ARG2 (MRPNode-4 / refrigerator) :manner (MRPNode-5 / amr-unknown)))

# ::id 138
# ::snt What's the best way to store potatoes and maximize their shelf-life?
# ::tok What 's the best way to store potatoes and maximize their shelf - life ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3.0 7-8|0.3.0.0 8-9|0.3 9-10|0.3.1 11-12|0.3.1.0.0 13-14|0.3.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.462360 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 47
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	and	8-9
# ::node	0.3.0	store-01	6-7
# ::node	0.3.0.0	potato	7-8
# ::node	0.3.1	maximize-01	9-10
# ::node	0.3.1.0	life	13-14
# ::node	0.3.1.0.0	shelf	11-12
# ::root	0	way
# ::edge	and	op1	store-01	0.3	0.3.0
# ::edge	and	op2	maximize-01	0.3	0.3.1
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	life	mod	shelf	0.3.1.0	0.3.1.0.0
# ::edge	life	poss	potato	0.3.1.0	0.3.0.0
# ::edge	maximize-01	ARG0	potato	0.3.1	0.3.0.0
# ::edge	maximize-01	ARG1	life	0.3.1	0.3.1.0
# ::edge	store-01	ARG1	potato	0.3.0	0.3.0.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	and	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / and :op1 (MRPNode-6 / store-01 :ARG1 (MRPNode-7 / potato)) :op2 (MRPNode-8 / maximize-01 :ARG0 MRPNode-7 :ARG1 (MRPNode-9 / life :poss MRPNode-7 :mod (MRPNode-10 / shelf)))))

# ::id 139
# ::snt How do I teach my toddler to chew his food?
# ::tok How do I teach my toddler to chew his food ?
# ::alignments 0-1|0.2 3-4|0 4-5|0.1 5-6|0.1.0+0.1.0.0 7-8|0.0 9-10|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.470084 ::parser eager_oracle ::smatch 0.8484848484848484 ::n_actions 35
# ::node	0	teach-01	3-4
# ::node	0.0	chew-01	7-8
# ::node	0.0.0	food	9-10
# ::node	0.0.0.0	person	
# ::node	0.1	i	4-5
# ::node	0.1.0	have-rel-role-91	5-6
# ::node	0.1.0.0	toddler	5-6
# ::node	0.2	amr-unknown	0-1
# ::root	0	teach-01
# ::edge	chew-01	ARG0	person	0.0	0.0.0.0
# ::edge	chew-01	ARG1	food	0.0	0.0.0
# ::edge	food	poss	person	0.0.0	0.0.0.0
# ::edge	have-rel-role-91	ARG0	person	0.1.0	0.0.0.0
# ::edge	have-rel-role-91	ARG2	toddler	0.1.0	0.1.0.0
# ::edge	i	ARG1-of	have-rel-role-91	0.1	0.1.0
# ::edge	teach-01	ARG0	i	0	0.1
# ::edge	teach-01	ARG1	chew-01	0	0.0
# ::edge	teach-01	ARG2	person	0	0.0.0.0
# ::edge	teach-01	manner	amr-unknown	0	0.2
(MRPNode-0 / teach-01 :ARG1 (MRPNode-1 / chew-01 :ARG1 (MRPNode-2 / food :poss (MRPNode-6 / person)) :ARG0 MRPNode-6) :ARG0 (MRPNode-3 / i :ARG1-of (MRPNode-4 / have-rel-role-91 :ARG2 (MRPNode-5 / toddler) :ARG0 MRPNode-6)) :ARG2 MRPNode-6 :manner (MRPNode-7 / amr-unknown))

# ::id 140
# ::snt How can I replace a ceiling fan light pull chain?
# ::tok How can I replace a ceiling fan light pull chain ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0.1.0 7-8|0.0.0.1 8-9|0.0.0 9-10|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.477689 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	possible-01	1-2
# ::node	0.0	replace-01	3-4
# ::node	0.0.0	pull-01	8-9
# ::node	0.0.0.0	chain	9-10
# ::node	0.0.0.1	light	7-8
# ::node	0.0.0.1.0	ceiling	5-6
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	light	mod	ceiling	0.0.0.1	0.0.0.1.0
# ::edge	possible-01	ARG1	replace-01	0	0.0
# ::edge	pull-01	ARG1	chain	0.0.0	0.0.0.0
# ::edge	pull-01	ARG1	light	0.0.0	0.0.0.1
# ::edge	replace-01	ARG0	i	0.0	0.0.1
# ::edge	replace-01	ARG1	pull-01	0.0	0.0.0
# ::edge	replace-01	ARG2	amr-unknown	0.0	0.0.2
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / replace-01 :ARG1 (MRPNode-2 / pull-01 :ARG1 (MRPNode-3 / chain) :ARG1 (MRPNode-4 / light :mod (MRPNode-5 / ceiling))) :ARG0 (MRPNode-6 / i) :ARG2 (MRPNode-7 / amr-unknown)))

# ::id 141
# ::snt How can I repair my two sloping concrete slabs?
# ::tok How can I repair my two sloping concrete slabs ?
# ::alignments 0-1|0.1 1-2|0 3-4|0.0 4-5|0.0.0.3 5-6|0.0.0.0 7-8|0.0.0.2 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.484721 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 34
# ::node	0	possible-01	1-2
# ::node	0.0	repair-01	3-4
# ::node	0.0.0	slab	8-9
# ::node	0.0.0.0	2	5-6
# ::node	0.0.0.1	cool-01	
# ::node	0.0.0.2	concrete	7-8
# ::node	0.0.0.3	i	4-5
# ::node	0.1	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	possible-01	ARG1	repair-01	0	0.0
# ::edge	possible-01	manner	amr-unknown	0	0.1
# ::edge	repair-01	ARG0	i	0.0	0.0.0.3
# ::edge	repair-01	ARG1	slab	0.0	0.0.0
# ::edge	slab	ARG1-of	cool-01	0.0.0	0.0.0.1
# ::edge	slab	poss	i	0.0.0	0.0.0.3
# ::edge	slab	quant	2	0.0.0	0.0.0.0
# ::edge	slab	quant	concrete	0.0.0	0.0.0.2
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / repair-01 :ARG1 (MRPNode-2 / slab :quant 2 :ARG1-of (MRPNode-3 / cool-01) :quant (MRPNode-4 / concrete) :poss (MRPNode-5 / i)) :ARG0 MRPNode-5) :manner (MRPNode-6 / amr-unknown))

# ::id 142
# ::snt Where can I find a good vocabulary list?
# ::tok Where can I find a good vocabulary list ?
# ::alignments 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0+0.0.0.0 6-7|0.0.0.1.0 7-8|0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.494995 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 33
# ::node	0	possible-01	1-2
# ::node	0.0	find-01	3-4
# ::node	0.0.0	thing	5-6
# ::node	0.0.0.0	good-02	5-6
# ::node	0.0.0.1	list-01	7-8
# ::node	0.0.0.1.0	vocabulary	6-7
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	
# ::root	0	possible-01
# ::edge	find-01	ARG0	i	0.0	0.0.1
# ::edge	find-01	ARG1	thing	0.0	0.0.0
# ::edge	find-01	location	amr-unknown	0.0	0.0.2
# ::edge	list-01	ARG1	vocabulary	0.0.0.1	0.0.0.1.0
# ::edge	possible-01	ARG1	find-01	0	0.0
# ::edge	thing	ARG2-of	good-02	0.0.0	0.0.0.0
# ::edge	thing	ARG2-of	list-01	0.0.0	0.0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / find-01 :ARG1 (MRPNode-2 / thing :ARG2-of (MRPNode-3 / good-02) :ARG2-of (MRPNode-4 / list-01 :ARG1 (MRPNode-5 / vocabulary))) :ARG0 (MRPNode-6 / i) :location (MRPNode-7 / amr-unknown)))

# ::id 143
# ::snt How can I repair my floors' finish?
# ::tok How can I repair my floors ' finish ?
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 4-5|0.0.1.0.0 5-6|0.0.1.0 7-8|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.502411 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	possible-01	1-2
# ::node	0.0	repair-01	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	finish-01	7-8
# ::node	0.0.1.0	floor	5-6
# ::node	0.0.1.0.0	i	4-5
# ::root	0	possible-01
# ::edge	finish-01	ARG1	floor	0.0.1	0.0.1.0
# ::edge	floor	poss	i	0.0.1.0	0.0.1.0.0
# ::edge	possible-01	ARG1	repair-01	0	0.0
# ::edge	repair-01	ARG0	i	0.0	0.0.1.0.0
# ::edge	repair-01	ARG1	amr-unknown	0.0	0.0.0
# ::edge	repair-01	ARG1	finish-01	0.0	0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / repair-01 :ARG1 (MRPNode-2 / amr-unknown) :ARG1 (MRPNode-3 / finish-01 :ARG1 (MRPNode-4 / floor :poss (MRPNode-5 / i))) :ARG0 MRPNode-5))

# ::id 144
# ::snt How do I secure an old aluminum/glass sliding door?
# ::tok How do I secure an old aluminum / glass sliding door ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0.0 6-7|0.0.1.0 8-9|0.0.1.1 9-10|0.0.1 10-11|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.509903 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	secure-02	3-4
# ::node	0.0	door	10-11
# ::node	0.0.0	old	5-6
# ::node	0.0.1	slide-01	9-10
# ::node	0.0.1.0	aluminum	6-7
# ::node	0.0.1.1	glass	8-9
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	secure-02
# ::edge	door	mod	old	0.0	0.0.0
# ::edge	door	mod	slide-01	0.0	0.0.1
# ::edge	secure-02	ARG0	i	0	0.1
# ::edge	secure-02	ARG1	door	0	0.0
# ::edge	secure-02	manner	amr-unknown	0	0.2
# ::edge	slide-01	ARG1	aluminum	0.0.1	0.0.1.0
# ::edge	slide-01	ARG1	glass	0.0.1	0.0.1.1
(MRPNode-0 / secure-02 :ARG1 (MRPNode-1 / door :mod (MRPNode-2 / old) :mod (MRPNode-3 / slide-01 :ARG1 (MRPNode-4 / aluminum) :ARG1 (MRPNode-5 / glass))) :ARG0 (MRPNode-6 / i) :manner (MRPNode-7 / amr-unknown))

# ::id 145
# ::snt How can I stop this Shower faucet leak?
# ::tok How can I stop this Shower faucet leak ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.1 3-4|0.0 4-5|0.0.0.1 5-6|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 6-7|0.0.0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.517169 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	possible-01	1-2
# ::node	0.0	stop-01	3-4
# ::node	0.0.0	leak-01	7-8
# ::node	0.0.0.0	faucet	6-7
# ::node	0.0.0.0.0	person	5-6
# ::node	0.0.0.0.0.0	name	5-6
# ::node	0.0.0.0.0.0.0	shower	5-6
# ::node	0.0.0.1	this	4-5
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	faucet	poss	person	0.0.0.0	0.0.0.0.0
# ::edge	leak-01	ARG1	faucet	0.0.0	0.0.0.0
# ::edge	leak-01	mod	this	0.0.0	0.0.0.1
# ::edge	name	op1	shower	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	person	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	possible-01	ARG1	stop-01	0	0.0
# ::edge	stop-01	ARG0	i	0.0	0.0.1
# ::edge	stop-01	ARG1	leak-01	0.0	0.0.0
# ::edge	stop-01	manner	amr-unknown	0.0	0.0.2
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / stop-01 :ARG1 (MRPNode-2 / leak-01 :ARG1 (MRPNode-3 / faucet :poss (MRPNode-4 / person :name (MRPNode-5 / name :op1 shower))) :mod (MRPNode-6 / this)) :ARG0 (MRPNode-7 / i) :manner (MRPNode-8 / amr-unknown)))

# ::id 146
# ::snt How do I remove paint from a wood floor?
# ::tok How do I remove paint from a wood floor ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0 7-8|0.2.0 8-9|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:39.521982 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	remove-01	3-4
# ::node	0.0	paint	4-5
# ::node	0.1	i	2-3
# ::node	0.2	floor	8-9
# ::node	0.2.0	wood	7-8
# ::node	0.3	amr-unknown	0-1
# ::root	0	remove-01
# ::edge	floor	mod	wood	0.2	0.2.0
# ::edge	remove-01	ARG0	i	0	0.1
# ::edge	remove-01	ARG1	paint	0	0.0
# ::edge	remove-01	ARG2	floor	0	0.2
# ::edge	remove-01	manner	amr-unknown	0	0.3
(MRPNode-0 / remove-01 :ARG1 (MRPNode-1 / paint) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / floor :mod (MRPNode-4 / wood)) :manner (MRPNode-5 / amr-unknown))

# ::id 147
# ::snt Which part of the GRE is more important to admissions committees?
# ::tok Which part of the GRE is more important to admissions committees ?
# ::alignments 2-3|0 4-5|0.0.0+0.0.0.0+0.0.0.0.0 6-7|0.2 7-8|0.0 9-10|0.0.1.0 10-11|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.529634 ::parser eager_oracle ::smatch 0.9375 ::n_actions 33
# ::node	0	have-degree-91	2-3
# ::node	0.0	important-01	7-8
# ::node	0.0.0	organization	4-5
# ::node	0.0.0.0	name	4-5
# ::node	0.0.0.0.0	gre	4-5
# ::node	0.0.1	committee	10-11
# ::node	0.0.1.0	admit-02	9-10
# ::node	0.1	amr-unknown	
# ::node	0.2	more	6-7
# ::root	0	have-degree-91
# ::edge	committee	ARG0-of	admit-02	0.0.1	0.0.1.0
# ::edge	have-degree-91	ARG1	important-01	0	0.0
# ::edge	have-degree-91	ARG3	amr-unknown	0	0.1
# ::edge	have-degree-91	ARG3	more	0	0.2
# ::edge	important-01	ARG2	committee	0.0	0.0.1
# ::edge	important-01	ARG2	organization	0.0	0.0.0
# ::edge	name	op1	gre	0.0.0.0	0.0.0.0.0
# ::edge	organization	name	name	0.0.0	0.0.0.0
(MRPNode-0 / have-degree-91 :ARG1 (MRPNode-1 / important-01 :ARG2 (MRPNode-2 / organization :name (MRPNode-3 / name :op1 gre)) :ARG2 (MRPNode-4 / committee :ARG0-of (MRPNode-5 / admit-02))) :ARG3 (MRPNode-6 / amr-unknown) :ARG3 (MRPNode-7 / more))

# ::id 148
# ::snt Is there a way to find out if I need a transit visa for a layover in the UK?
# ::tok Is there a way to find out if I need a transit visa for a layover in the UK ?
# ::alignments 3-4|0 5-6|0.0 8-9|0.0.0.0.1 9-10|0.0.0.0 11-12|0.0.0.0.0.0 12-13|0.0.0.0.0 15-16|0.0.0.0.2 18-19|0.0.0.0.2.0+0.0.0.0.2.0.0+0.0.0.0.2.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.550276 ::parser eager_oracle ::smatch 0.8636363636363635 ::n_actions 46
# ::node	0	way	3-4
# ::node	0.0	find-out-03	5-6
# ::node	0.0.0	truth-value	
# ::node	0.0.0.0	need-01	9-10
# ::node	0.0.0.0.0	visa	12-13
# ::node	0.0.0.0.0.0	transit	11-12
# ::node	0.0.0.0.1	i	8-9
# ::node	0.0.0.0.2	layover	15-16
# ::node	0.0.0.0.2.0	country	18-19
# ::node	0.0.0.0.2.0.0	name	18-19
# ::node	0.0.0.0.2.0.0.0	uk	18-19
# ::node	0.1	amr-unknown	
# ::root	0	way
# ::edge	country	name	name	0.0.0.0.2.0	0.0.0.0.2.0.0
# ::edge	find-out-03	ARG1	truth-value	0.0	0.0.0
# ::edge	layover	ARG0	i	0.0.0.0.2	0.0.0.0.1
# ::edge	layover	location	country	0.0.0.0.2	0.0.0.0.2.0
# ::edge	name	op1	uk	0.0.0.0.2.0.0	0.0.0.0.2.0.0.0
# ::edge	need-01	ARG0	i	0.0.0.0	0.0.0.0.1
# ::edge	need-01	ARG1	visa	0.0.0.0	0.0.0.0.0
# ::edge	need-01	purpose	layover	0.0.0.0	0.0.0.0.2
# ::edge	truth-value	polarity-of	need-01	0.0.0	0.0.0.0
# ::edge	visa	mod	transit	0.0.0.0.0	0.0.0.0.0.0
# ::edge	way	manner-of	amr-unknown	0	0.1
# ::edge	way	manner-of	find-out-03	0	0.0
(MRPNode-0 / way :manner-of (MRPNode-1 / find-out-03 :ARG1 (MRPNode-2 / truth-value :polarity-of (MRPNode-3 / need-01 :ARG1 (MRPNode-4 / visa :mod (MRPNode-5 / transit)) :ARG0 (MRPNode-6 / i) :purpose (MRPNode-7 / layover :ARG0 MRPNode-6 :location (MRPNode-8 / country :name (MRPNode-9 / name :op1 uk)))))) :manner-of (MRPNode-10 / amr-unknown))

# ::id 149
# ::snt How long does cooked TVP keep in the fridge?
# ::tok How long does cooked TVP keep in the fridge ?
# ::alignments 0-1|0.2 3-4|0.0.0 4-5|0.0+0.0.1+0.0.1.0 5-6|0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.557272 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	keep-02	5-6
# ::node	0.0	company	4-5
# ::node	0.0.0	cook-01	3-4
# ::node	0.0.1	name	4-5
# ::node	0.0.1.0	tvp	4-5
# ::node	0.1	fridge	8-9
# ::node	0.2	amr-unknown	0-1
# ::root	0	keep-02
# ::edge	company	ARG0-of	cook-01	0.0	0.0.0
# ::edge	company	name	name	0.0	0.0.1
# ::edge	keep-02	ARG1	company	0	0.0
# ::edge	keep-02	duration	amr-unknown	0	0.2
# ::edge	keep-02	location	fridge	0	0.1
# ::edge	name	op1	tvp	0.0.1	0.0.1.0
(MRPNode-0 / keep-02 :ARG1 (MRPNode-1 / company :ARG0-of (MRPNode-2 / cook-01) :name (MRPNode-3 / name :op1 tvp)) :location (MRPNode-4 / fridge) :duration (MRPNode-5 / amr-unknown))

# ::id 150
# ::snt Is it appropriate to call a professor for a recommendation on the weekend?
# ::tok Is it appropriate to call a professor for a recommendation on the weekend ?
# ::alignments 2-3|0 4-5|0.0 6-7|0.0.0 9-10|0.0.1 12-13|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:39.565420 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 31
# ::node	0	appropriate-02	2-3
# ::node	0.0	call-02	4-5
# ::node	0.0.0	professor	6-7
# ::node	0.0.1	recommend-01	9-10
# ::node	0.0.2	weekend	12-13
# ::node	0.1	amr-unknown	
# ::root	0	appropriate-02
# ::edge	appropriate-02	ARG1	amr-unknown	0	0.1
# ::edge	appropriate-02	ARG1	call-02	0	0.0
# ::edge	call-02	ARG1	professor	0.0	0.0.0
# ::edge	call-02	time	recommend-01	0.0	0.0.1
# ::edge	call-02	time	weekend	0.0	0.0.2
(MRPNode-0 / appropriate-02 :ARG1 (MRPNode-1 / call-02 :ARG1 (MRPNode-2 / professor) :time (MRPNode-3 / recommend-01) :time (MRPNode-4 / weekend)) :ARG1 (MRPNode-5 / amr-unknown))

# ::id 151
# ::snt How can I work out how valuable I am to my boss and company?
# ::tok How can I work out how valuable I am to my boss and company ?
# ::alignments 0-1|0.1 1-2|0.0 2-3|0.0.0.0.2 3-4|0.0.0 6-7|0.0.0.0 11-12|0.0.0.0.2.0+0.0.0.0.2.0.0 12-13|0.0.0.0.0 13-14|0.0.0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.639406 ::parser eager_oracle ::smatch 0.7555555555555556 ::n_actions 48
# ::node	0	have-manner-91	
# ::node	0.0	possible-01	1-2
# ::node	0.0.0	work-out-02	3-4
# ::node	0.0.0.0	value-02	6-7
# ::node	0.0.0.0.0	and	12-13
# ::node	0.0.0.0.0.0	person	
# ::node	0.0.0.0.0.1	company	13-14
# ::node	0.0.0.0.1	so	
# ::node	0.0.0.0.2	i	2-3
# ::node	0.0.0.0.2.0	have-rel-role-91	11-12
# ::node	0.0.0.0.2.0.0	boss	11-12
# ::node	0.1	amr-unknown	0-1
# ::root	0	have-manner-91
# ::edge	and	op1	person	0.0.0.0.0	0.0.0.0.0.0
# ::edge	and	op2	company	0.0.0.0.0	0.0.0.0.0.1
# ::edge	have-manner-91	ARG1	possible-01	0	0.0
# ::edge	have-manner-91	ARG2	amr-unknown	0	0.1
# ::edge	have-rel-role-91	ARG0	person	0.0.0.0.2.0	0.0.0.0.0.0
# ::edge	have-rel-role-91	ARG2	boss	0.0.0.0.2.0	0.0.0.0.2.0.0
# ::edge	i	ARG1-of	company	0.0.0.0.2	0.0.0.0.0.1
# ::edge	i	ARG1-of	have-rel-role-91	0.0.0.0.2	0.0.0.0.2.0
# ::edge	possible-01	ARG1	work-out-02	0.0	0.0.0
# ::edge	value-02	ARG0	and	0.0.0.0	0.0.0.0.0
# ::edge	value-02	ARG1	i	0.0.0.0	0.0.0.0.2
# ::edge	value-02	degree	so	0.0.0.0	0.0.0.0.1
# ::edge	work-out-02	ARG0	i	0.0.0	0.0.0.0.2
# ::edge	work-out-02	ARG1	value-02	0.0.0	0.0.0.0
(MRPNode-0 / have-manner-91 :ARG1 (MRPNode-1 / possible-01 :ARG1 (MRPNode-2 / work-out-02 :ARG1 (MRPNode-3 / value-02 :ARG0 (MRPNode-4 / and :op1 (MRPNode-5 / person) :op2 (MRPNode-10 / company)) :degree (MRPNode-6 / so) :ARG1 (MRPNode-7 / i :ARG1-of (MRPNode-8 / have-rel-role-91 :ARG0 MRPNode-5 :ARG2 (MRPNode-9 / boss)) :ARG1-of MRPNode-10)) :ARG0 MRPNode-7)) :ARG2 (MRPNode-11 / amr-unknown))

# ::id 152
# ::snt Why do you need to peel peaches to can them?
# ::tok Why do you need to peel peaches to can them ?
# ::alignments 2-3|0.0.1.0 3-4|0+0.1 6-7|0.0.0 8-9|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.653553 ::parser eager_oracle ::smatch 0.7142857142857143 ::n_actions 30
# ::node	0	need-01	3-4
# ::node	0.0	pierce-01	
# ::node	0.0.0	peach	6-7
# ::node	0.0.1	can-01	8-9
# ::node	0.0.1.0	you	2-3
# ::node	0.1	cause-01	3-4
# ::node	0.1.0	amr-unknown	
# ::root	0	need-01
# ::edge	can-01	ARG0	you	0.0.1	0.0.1.0
# ::edge	can-01	ARG1	peach	0.0.1	0.0.0
# ::edge	cause-01	ARG0	amr-unknown	0.1	0.1.0
# ::edge	need-01	ARG0	you	0	0.0.1.0
# ::edge	need-01	ARG1	pierce-01	0	0.0
# ::edge	need-01	ARG1-of	cause-01	0	0.1
# ::edge	pierce-01	ARG0	you	0.0	0.0.1.0
# ::edge	pierce-01	ARG1	peach	0.0	0.0.0
# ::edge	pierce-01	purpose	can-01	0.0	0.0.1
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / pierce-01 :ARG1 (MRPNode-2 / peach) :purpose (MRPNode-3 / can-01 :ARG1 MRPNode-2 :ARG0 (MRPNode-4 / you)) :ARG0 MRPNode-4) :ARG0 MRPNode-4 :ARG1-of (MRPNode-5 / cause-01 :ARG0 (MRPNode-6 / amr-unknown)))

# ::id 153
# ::snt How do I increase the height of a sliding glass door lock?
# ::tok How do I increase the height of a sliding glass door lock ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 8-9|0.0.0.0.0 10-11|0.0.0.0 11-12|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.663303 ::parser eager_oracle ::smatch 0.8461538461538461 ::n_actions 32
# ::node	0	increase-01	3-4
# ::node	0.0	high-02	
# ::node	0.0.0	lock	11-12
# ::node	0.0.0.0	door	10-11
# ::node	0.0.0.0.0	slide-01	8-9
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	increase-01
# ::edge	door	mod	slide-01	0.0.0.0	0.0.0.0.0
# ::edge	high-02	ARG1	lock	0.0	0.0.0
# ::edge	increase-01	ARG0	i	0	0.1
# ::edge	increase-01	ARG1	high-02	0	0.0
# ::edge	increase-01	manner	amr-unknown	0	0.2
# ::edge	lock	mod	door	0.0.0	0.0.0.0
(MRPNode-0 / increase-01 :ARG1 (MRPNode-1 / high-02 :ARG1 (MRPNode-2 / lock :mod (MRPNode-3 / door :mod (MRPNode-4 / slide-01)))) :ARG0 (MRPNode-5 / i) :manner (MRPNode-6 / amr-unknown))

# ::id 154
# ::snt "What does it mean by a ""research university""?"
# ::tok " What does it mean by a " " research university " " ? "
# ::alignments 1-2|0.2 3-4|0.1 4-5|0 9-10|0.0.0 10-11|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.667746 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	mean-01	4-5
# ::node	0.0	university	10-11
# ::node	0.0.0	research-01	9-10
# ::node	0.1	it	3-4
# ::node	0.2	amr-unknown	1-2
# ::root	0	mean-01
# ::edge	mean-01	ARG0	it	0	0.1
# ::edge	mean-01	ARG1	university	0	0.0
# ::edge	mean-01	ARG2	amr-unknown	0	0.2
# ::edge	university	mod	research-01	0.0	0.0.0
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / university :mod (MRPNode-2 / research-01)) :ARG0 (MRPNode-3 / it) :ARG2 (MRPNode-4 / amr-unknown))

# ::id 155
# ::snt How do I clean a very dirty refrigerator?
# ::tok How do I clean a very dirty refrigerator ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0.0.0 6-7|0.0.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.673443 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	clean-01	3-4
# ::node	0.0	refrigerator	7-8
# ::node	0.0.0	dirty-02	6-7
# ::node	0.0.0.0	very	5-6
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	clean-01
# ::edge	clean-01	ARG0	i	0	0.1
# ::edge	clean-01	ARG1	refrigerator	0	0.0
# ::edge	clean-01	manner	amr-unknown	0	0.2
# ::edge	dirty-02	degree	very	0.0.0	0.0.0.0
# ::edge	refrigerator	ARG1-of	dirty-02	0.0	0.0.0
(MRPNode-0 / clean-01 :ARG1 (MRPNode-1 / refrigerator :ARG1-of (MRPNode-2 / dirty-02 :degree (MRPNode-3 / very))) :ARG0 (MRPNode-4 / i) :manner (MRPNode-5 / amr-unknown))

# ::id 156
# ::snt How do I wire a bathroom exhaust fan/light to two switches?
# ::tok How do I wire a bathroom exhaust fan / light to two switches ?
# ::alignments 0-1|0.0 2-3|0.1.1 3-4|0.1 5-6|0.1.0.0.0.0 6-7|0.1.0.0.0 7-8|0.1.0.0 8-9|0.1.0 9-10|0.1.0.1 11-12|0.1.2.0 12-13|0.1.2 ::annotator aligner3.py ::date 2021-03-11 23:00:39.684662 ::parser eager_oracle ::smatch 0.8571428571428572 ::n_actions 47
# ::node	0	have-manner-91	
# ::node	0.0	amr-unknown	0-1
# ::node	0.1	wire-02	3-4
# ::node	0.1.0	slash	8-9
# ::node	0.1.0.0	fan	7-8
# ::node	0.1.0.0.0	exhaust	6-7
# ::node	0.1.0.0.0.0	bathroom	5-6
# ::node	0.1.0.1	light	9-10
# ::node	0.1.1	i	2-3
# ::node	0.1.2	switch	12-13
# ::node	0.1.2.0	2	11-12
# ::root	0	have-manner-91
# ::edge	exhaust	location	bathroom	0.1.0.0.0	0.1.0.0.0.0
# ::edge	fan	mod	exhaust	0.1.0.0	0.1.0.0.0
# ::edge	have-manner-91	ARG1	amr-unknown	0	0.0
# ::edge	have-manner-91	ARG1	wire-02	0	0.1
# ::edge	light	mod	exhaust	0.1.0.1	0.1.0.0.0
# ::edge	slash	op1	fan	0.1.0	0.1.0.0
# ::edge	slash	op2	light	0.1.0	0.1.0.1
# ::edge	switch	quant	2	0.1.2	0.1.2.0
# ::edge	wire-02	ARG0	i	0.1	0.1.1
# ::edge	wire-02	ARG1	slash	0.1	0.1.0
# ::edge	wire-02	ARG2	switch	0.1	0.1.2
(MRPNode-0 / have-manner-91 :ARG1 (MRPNode-1 / amr-unknown) :ARG1 (MRPNode-2 / wire-02 :ARG1 (MRPNode-3 / slash :op1 (MRPNode-4 / fan :mod (MRPNode-5 / exhaust :location (MRPNode-6 / bathroom))) :op2 (MRPNode-7 / light :mod MRPNode-5)) :ARG0 (MRPNode-8 / i) :ARG2 (MRPNode-9 / switch :quant 2)))

# ::id 157
# ::snt How should I cite a screenshot in APA style for my student paper?
# ::tok How should I cite a screenshot in APA style for my student paper ?
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.1 3-4|0.0 5-6|0.0.1 7-8|0.0.1.0.0+0.0.1.0.0.0+0.0.1.0.0.0.0 8-9|0.0.1.0 11-12|0.1.0.0+0.1.0.0.0 12-13|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.707834 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	recommend-01	1-2
# ::node	0.0	cite-01	3-4
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	screenshot	5-6
# ::node	0.0.1.0	style	8-9
# ::node	0.0.1.0.0	law	7-8
# ::node	0.0.1.0.0.0	name	7-8
# ::node	0.0.1.0.0.0.0	apa	7-8
# ::node	0.1	i	2-3
# ::node	0.1.0	paper	12-13
# ::node	0.1.0.0	person	11-12
# ::node	0.1.0.0.0	study-01	11-12
# ::root	0	recommend-01
# ::edge	cite-01	ARG1	amr-unknown	0.0	0.0.0
# ::edge	cite-01	ARG1	screenshot	0.0	0.0.1
# ::edge	i	poss-of	paper	0.1	0.1.0
# ::edge	law	name	name	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	apa	0.0.1.0.0.0	0.0.1.0.0.0.0
# ::edge	paper	mod	person	0.1.0	0.1.0.0
# ::edge	person	ARG0-of	study-01	0.1.0.0	0.1.0.0.0
# ::edge	recommend-01	ARG1	cite-01	0	0.0
# ::edge	recommend-01	manner	i	0	0.1
# ::edge	screenshot	mod	style	0.0.1	0.0.1.0
# ::edge	style	mod	law	0.0.1.0	0.0.1.0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / cite-01 :ARG1 (MRPNode-2 / amr-unknown) :ARG1 (MRPNode-3 / screenshot :mod (MRPNode-4 / style :mod (MRPNode-5 / law :name (MRPNode-6 / name :op1 apa))))) :manner (MRPNode-7 / i :poss-of (MRPNode-8 / paper :mod (MRPNode-9 / person :ARG0-of (MRPNode-10 / study-01)))))

# ::id 158
# ::snt How do you teach a toddler not to share?
# ::tok How do you teach a toddler not to share ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 5-6|0.0.1 6-7|0.0.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.712587 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	teach-01	3-4
# ::node	0.0	share-01	8-9
# ::node	0.0.0	-	6-7
# ::node	0.0.1	toddler	5-6
# ::node	0.1	you	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	teach-01
# ::edge	share-01	ARG0	toddler	0.0	0.0.1
# ::edge	share-01	polarity	-	0.0	0.0.0
# ::edge	teach-01	ARG0	you	0	0.1
# ::edge	teach-01	ARG1	share-01	0	0.0
# ::edge	teach-01	ARG2	toddler	0	0.0.1
# ::edge	teach-01	manner	amr-unknown	0	0.2
(MRPNode-0 / teach-01 :ARG1 (MRPNode-1 / share-01 :polarity - :ARG0 (MRPNode-3 / toddler)) :ARG0 (MRPNode-2 / you) :ARG2 MRPNode-3 :manner (MRPNode-4 / amr-unknown))

# ::id 159
# ::snt Why doesn't my cat lick me?
# ::tok Why does n't my cat lick me ?
# ::alignments 2-3|0.0 3-4|0.1 4-5|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:39.716780 ::parser eager_oracle ::smatch 0.0 ::n_actions 17
# ::node	0	bully-01	
# ::node	0.0	-	2-3
# ::node	0.1	i	3-4
# ::node	0.2	cat	4-5
# ::node	0.3	cause-01	
# ::node	0.3.0	amr-unknown	
# ::root	0	bully-01
# ::edge	bully-01	ARG0	cat	0	0.2
# ::edge	bully-01	ARG1	i	0	0.1
# ::edge	bully-01	ARG1-of	cause-01	0	0.3
# ::edge	bully-01	polarity	-	0	0.0
# ::edge	cause-01	ARG0	amr-unknown	0.3	0.3.0
(MRPNode-0 / bully-01 :polarity - :ARG1 (MRPNode-1 / i) :ARG0 (MRPNode-2 / cat) :ARG1-of (MRPNode-3 / cause-01 :ARG0 (MRPNode-4 / amr-unknown)))

# ::id 160
# ::snt How do I repair this broken pipe?
# ::tok How do I repair this broken pipe ?
# ::alignments 0-1|0.2 2-3|0.1 3-4|0 4-5|0.0.0 5-6|0.0.1 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.721655 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	repair-01	3-4
# ::node	0.0	pipe	6-7
# ::node	0.0.0	this	4-5
# ::node	0.0.1	break-01	5-6
# ::node	0.1	i	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	repair-01
# ::edge	pipe	ARG1-of	break-01	0.0	0.0.1
# ::edge	pipe	mod	this	0.0	0.0.0
# ::edge	repair-01	ARG0	i	0	0.1
# ::edge	repair-01	ARG1	pipe	0	0.0
# ::edge	repair-01	manner	amr-unknown	0	0.2
(MRPNode-0 / repair-01 :ARG1 (MRPNode-1 / pipe :mod (MRPNode-2 / this) :ARG1-of (MRPNode-3 / break-01)) :ARG0 (MRPNode-4 / i) :manner (MRPNode-5 / amr-unknown))

# ::id 161
# ::snt What type of lag bolts should I use for a deck?
# ::tok What type of lag bolts should I use for a deck ?
# ::alignments 0-1|0.0.0.1.0 1-2|0.0.0.1 3-4|0.0.0.0 4-5|0.0.0 5-6|0 6-7|0.0.1 7-8|0.0 10-11|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:39.732322 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	recommend-01	5-6
# ::node	0.0	use-01	7-8
# ::node	0.0.0	bolt	4-5
# ::node	0.0.0.0	lag	3-4
# ::node	0.0.0.1	type	1-2
# ::node	0.0.0.1.0	amr-unknown	0-1
# ::node	0.0.1	i	6-7
# ::node	0.0.2	deck	10-11
# ::root	0	recommend-01
# ::edge	bolt	mod	lag	0.0.0	0.0.0.0
# ::edge	bolt	mod	type	0.0.0	0.0.0.1
# ::edge	recommend-01	ARG1	use-01	0	0.0
# ::edge	type	mod	amr-unknown	0.0.0.1	0.0.0.1.0
# ::edge	use-01	ARG0	i	0.0	0.0.1
# ::edge	use-01	ARG1	bolt	0.0	0.0.0
# ::edge	use-01	ARG2	deck	0.0	0.0.2
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / use-01 :ARG1 (MRPNode-2 / bolt :mod (MRPNode-3 / lag) :mod (MRPNode-4 / type :mod (MRPNode-5 / amr-unknown))) :ARG0 (MRPNode-6 / i) :ARG2 (MRPNode-7 / deck)))

# ::id 162
# ::snt How do I paint art onto a wall?
# ::tok How do I paint art onto a wall ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0 7-8|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:39.736525 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	paint-02	3-4
# ::node	0.0	art	4-5
# ::node	0.1	i	2-3
# ::node	0.2	wall	7-8
# ::node	0.3	amr-unknown	0-1
# ::root	0	paint-02
# ::edge	paint-02	ARG0	i	0	0.1
# ::edge	paint-02	ARG1	art	0	0.0
# ::edge	paint-02	ARG2	wall	0	0.2
# ::edge	paint-02	manner	amr-unknown	0	0.3
(MRPNode-0 / paint-02 :ARG1 (MRPNode-1 / art) :ARG0 (MRPNode-2 / i) :ARG2 (MRPNode-3 / wall) :manner (MRPNode-4 / amr-unknown))

# ::id 163
# ::snt What's the best way to introduce a chinchilla to a household with cats?
# ::tok What 's the best way to introduce a chinchilla to a household with cats ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 8-9|0.3.0 11-12|0.3.1 13-14|0.3.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.749618 ::parser eager_oracle ::smatch 0.7272727272727273 ::n_actions 37
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	introduce-01	6-7
# ::node	0.3.0	chinchilla	8-9
# ::node	0.3.1	household	11-12
# ::node	0.3.1.0	have-03	
# ::node	0.3.1.0.0	cat	13-14
# ::root	0	way
# ::edge	have-03	ARG1	cat	0.3.1.0	0.3.1.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	household	ARG0-of	have-03	0.3.1	0.3.1.0
# ::edge	introduce-01	ARG1	chinchilla	0.3	0.3.0
# ::edge	introduce-01	ARG2	household	0.3	0.3.1
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	introduce-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / introduce-01 :ARG1 (MRPNode-6 / chinchilla) :ARG2 (MRPNode-7 / household :ARG0-of (MRPNode-8 / have-03 :ARG1 (MRPNode-9 / cat)))))

# ::id 164
# ::snt What is the best way to store fresh berries?
# ::tok What is the best way to store fresh berries ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0.0 8-9|0.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.760177 ::parser eager_oracle ::smatch 0.8275862068965517 ::n_actions 30
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	berry	8-9
# ::node	0.3.0.0	fresh-04	7-8
# ::root	0	way
# ::edge	berry	ARG1-of	fresh-04	0.3.0	0.3.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	store-01	ARG1	berry	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / berry :ARG1-of (MRPNode-7 / fresh-04))))

# ::id 165
# ::snt What does it mean to write a song in a certain key?
# ::tok What does it mean to write a song in a certain key ?
# ::alignments 0-1|0.1 3-4|0 5-6|0.0 7-8|0.0.0 10-11|0.0.1.0 11-12|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.767200 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	mean-01	3-4
# ::node	0.0	write-01	5-6
# ::node	0.0.0	song	7-8
# ::node	0.0.1	key	11-12
# ::node	0.0.1.0	certain	10-11
# ::node	0.1	amr-unknown	0-1
# ::root	0	mean-01
# ::edge	key	mod	certain	0.0.1	0.0.1.0
# ::edge	mean-01	ARG1	write-01	0	0.0
# ::edge	mean-01	ARG2	amr-unknown	0	0.1
# ::edge	write-01	ARG1	song	0.0	0.0.0
# ::edge	write-01	manner	key	0.0	0.0.1
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / write-01 :ARG1 (MRPNode-2 / song) :manner (MRPNode-3 / key :mod (MRPNode-4 / certain))) :ARG2 (MRPNode-5 / amr-unknown))

# ::id 166
# ::snt How long should I wait between grout application and sealant?
# ::tok How long should I wait between grout application and sealant ?
# ::alignments 0-1|0.0.2 2-3|0 3-4|0.0.0 4-5|0.0 5-6|0.0.1 6-7|0.0.1.0.0 7-8|0.0.1.0 9-10|0.0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.775319 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	recommend-01	2-3
# ::node	0.0	wait-01	4-5
# ::node	0.0.0	i	3-4
# ::node	0.0.1	between	5-6
# ::node	0.0.1.0	application	7-8
# ::node	0.0.1.0.0	grout	6-7
# ::node	0.0.1.1	sealant	9-10
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	recommend-01
# ::edge	application	mod	grout	0.0.1.0	0.0.1.0.0
# ::edge	between	op1	application	0.0.1	0.0.1.0
# ::edge	between	op2	sealant	0.0.1	0.0.1.1
# ::edge	recommend-01	ARG1	wait-01	0	0.0
# ::edge	wait-01	ARG1	i	0.0	0.0.0
# ::edge	wait-01	ARG2	between	0.0	0.0.1
# ::edge	wait-01	manner	amr-unknown	0.0	0.0.2
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / wait-01 :ARG1 (MRPNode-2 / i) :ARG2 (MRPNode-3 / between :op1 (MRPNode-4 / application :mod (MRPNode-5 / grout)) :op2 (MRPNode-6 / sealant)) :manner (MRPNode-7 / amr-unknown)))

# ::id 167
# ::snt How long can you keep chocolate in the freezer?
# ::tok How long can you keep chocolate in the freezer ?
# ::alignments 0-1|0.0.3 2-3|0 3-4|0.0.1 4-5|0.0 5-6|0.0.0 8-9|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:39.780203 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	possible-01	2-3
# ::node	0.0	keep-01	4-5
# ::node	0.0.0	chocolate	5-6
# ::node	0.0.1	you	3-4
# ::node	0.0.2	freezer	8-9
# ::node	0.0.3	amr-unknown	0-1
# ::root	0	possible-01
# ::edge	keep-01	ARG0	you	0.0	0.0.1
# ::edge	keep-01	ARG1	chocolate	0.0	0.0.0
# ::edge	keep-01	duration	amr-unknown	0.0	0.0.3
# ::edge	keep-01	location	freezer	0.0	0.0.2
# ::edge	possible-01	ARG1	keep-01	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / keep-01 :ARG1 (MRPNode-2 / chocolate) :ARG0 (MRPNode-3 / you) :location (MRPNode-4 / freezer) :duration (MRPNode-5 / amr-unknown)))

# ::id 168
# ::snt How do I prepare this porous interior wall for paint?
# ::tok How do I prepare this porous interior wall for paint ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0.1 5-6|0.0.0 6-7|0.0.2 7-8|0.0 9-10|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:39.790381 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	prepare-02	3-4
# ::node	0.0	wall	7-8
# ::node	0.0.0	porous	5-6
# ::node	0.0.1	this	4-5
# ::node	0.0.2	interior	6-7
# ::node	0.1	i	2-3
# ::node	0.2	paint	9-10
# ::node	0.3	amr-unknown	0-1
# ::root	0	prepare-02
# ::edge	prepare-02	ARG0	i	0	0.1
# ::edge	prepare-02	ARG1	wall	0	0.0
# ::edge	prepare-02	ARG2	paint	0	0.2
# ::edge	prepare-02	manner	amr-unknown	0	0.3
# ::edge	wall	mod	interior	0.0	0.0.2
# ::edge	wall	mod	porous	0.0	0.0.0
# ::edge	wall	mod	this	0.0	0.0.1
(MRPNode-0 / prepare-02 :ARG1 (MRPNode-1 / wall :mod (MRPNode-2 / porous) :mod (MRPNode-3 / this) :mod (MRPNode-4 / interior)) :ARG0 (MRPNode-5 / i) :ARG2 (MRPNode-6 / paint) :manner (MRPNode-7 / amr-unknown))

# ::id 169
# ::snt How do I prepare this porous interior wall for paint?
# ::tok How do I prepare this porous interior wall for paint ?
# ::alignments 0-1|0.3 2-3|0.1 3-4|0 4-5|0.0.1 5-6|0.0.0 6-7|0.0.2 7-8|0.0 9-10|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:39.798452 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	prepare-02	3-4
# ::node	0.0	wall	7-8
# ::node	0.0.0	porous	5-6
# ::node	0.0.1	this	4-5
# ::node	0.0.2	interior	6-7
# ::node	0.1	i	2-3
# ::node	0.2	paint	9-10
# ::node	0.3	amr-unknown	0-1
# ::root	0	prepare-02
# ::edge	prepare-02	ARG0	i	0	0.1
# ::edge	prepare-02	ARG1	wall	0	0.0
# ::edge	prepare-02	ARG2	paint	0	0.2
# ::edge	prepare-02	manner	amr-unknown	0	0.3
# ::edge	wall	mod	interior	0.0	0.0.2
# ::edge	wall	mod	porous	0.0	0.0.0
# ::edge	wall	mod	this	0.0	0.0.1
(MRPNode-0 / prepare-02 :ARG1 (MRPNode-1 / wall :mod (MRPNode-2 / porous) :mod (MRPNode-3 / this) :mod (MRPNode-4 / interior)) :ARG0 (MRPNode-5 / i) :ARG2 (MRPNode-6 / paint) :manner (MRPNode-7 / amr-unknown))

# ::id 170
# ::snt What is the best way to repair a cracked bathtub?
# ::tok What is the best way to repair a cracked bathtub ?
# ::alignments 0-1|0.3 3-4|0.0 4-5|0 6-7|0.2 8-9|0.2.0.0 9-10|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.808452 ::parser eager_oracle ::smatch 0.8275862068965517 ::n_actions 31
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	repair-01	6-7
# ::node	0.2.0	bathtub	9-10
# ::node	0.2.0.0	crack-02	8-9
# ::node	0.3	amr-unknown	0-1
# ::root	0	way
# ::edge	bathtub	ARG1-of	crack-02	0.2.0	0.2.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	repair-01	ARG1	bathtub	0.2	0.2.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.3
# ::edge	way	domain	repair-01	0	0.2
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / repair-01 :ARG1 (MRPNode-5 / bathtub :ARG1-of (MRPNode-6 / crack-02))) :domain (MRPNode-7 / amr-unknown))

# ::id 171
# ::snt What's the best way to store asparagus?
# ::tok What 's the best way to store asparagus ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.813555 ::parser eager_oracle ::smatch 0.8 ::n_actions 26
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	asparagus	7-8
# ::root	0	way
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	store-01	ARG1	asparagus	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / asparagus)))

# ::id 172
# ::snt What kind of socket is this?
# ::tok What kind of socket is this ?
# ::alignments 0-1|0.0.0 1-2|0.0 3-4|0 5-6|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.816290 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	socket	3-4
# ::node	0.0	kind	1-2
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	this	5-6
# ::root	0	socket
# ::edge	kind	mod	amr-unknown	0.0	0.0.0
# ::edge	kind	mod	this	0.0	0.0.1
# ::edge	socket	mod	kind	0	0.0
(MRPNode-0 / socket :mod (MRPNode-1 / kind :mod (MRPNode-2 / amr-unknown) :mod (MRPNode-3 / this)))

# ::id 173
# ::snt What is the difference between a stock and a bond?
# ::tok What is the difference between a stock and a bond ?
# ::alignments 0-1|0.2 3-4|0 6-7|0.0 9-10|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.819282 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	differ-02	3-4
# ::node	0.0	stock	6-7
# ::node	0.1	bond	9-10
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	stock	0	0.0
# ::edge	differ-02	ARG2	bond	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / stock) :ARG2 (MRPNode-2 / bond) :ARG3 (MRPNode-3 / amr-unknown))

# ::id 174
# ::snt What is the best way to toast pecans?
# ::tok What is the best way to toast pecans ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.826454 ::parser eager_oracle ::smatch 0.8 ::n_actions 26
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	toast	6-7
# ::node	0.3.0	pecan	7-8
# ::root	0	way
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	toast	mod	pecan	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	toast	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / toast :mod (MRPNode-6 / pecan)))

# ::id 175
# ::snt What is the best way to repair a cracked bathtub?
# ::tok What is the best way to repair a cracked bathtub ?
# ::alignments 0-1|0.3 3-4|0.0 4-5|0 6-7|0.2 8-9|0.2.0.0 9-10|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.834155 ::parser eager_oracle ::smatch 0.8275862068965517 ::n_actions 31
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	repair-01	6-7
# ::node	0.2.0	bathtub	9-10
# ::node	0.2.0.0	crack-02	8-9
# ::node	0.3	amr-unknown	0-1
# ::root	0	way
# ::edge	bathtub	ARG1-of	crack-02	0.2.0	0.2.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	repair-01	ARG1	bathtub	0.2	0.2.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.3
# ::edge	way	domain	repair-01	0	0.2
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / repair-01 :ARG1 (MRPNode-5 / bathtub :ARG1-of (MRPNode-6 / crack-02))) :domain (MRPNode-7 / amr-unknown))

# ::id 176
# ::snt What is the best way to store fresh berries?
# ::tok What is the best way to store fresh berries ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0.0 8-9|0.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.842291 ::parser eager_oracle ::smatch 0.8275862068965517 ::n_actions 30
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	berry	8-9
# ::node	0.3.0.0	fresh-04	7-8
# ::root	0	way
# ::edge	berry	ARG1-of	fresh-04	0.3.0	0.3.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	store-01	ARG1	berry	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / berry :ARG1-of (MRPNode-7 / fresh-04))))

# ::id 177
# ::snt Where can I find a good vocabulary list?
# ::tok Where can I find a good vocabulary list ?
# ::alignments 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0+0.0.0.0 6-7|0.0.0.1.0 7-8|0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.851552 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 33
# ::node	0	possible-01	1-2
# ::node	0.0	find-01	3-4
# ::node	0.0.0	thing	5-6
# ::node	0.0.0.0	good-02	5-6
# ::node	0.0.0.1	list-01	7-8
# ::node	0.0.0.1.0	vocabulary	6-7
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	
# ::root	0	possible-01
# ::edge	find-01	ARG0	i	0.0	0.0.1
# ::edge	find-01	ARG1	thing	0.0	0.0.0
# ::edge	find-01	location	amr-unknown	0.0	0.0.2
# ::edge	list-01	ARG1	vocabulary	0.0.0.1	0.0.0.1.0
# ::edge	possible-01	ARG1	find-01	0	0.0
# ::edge	thing	ARG2-of	good-02	0.0.0	0.0.0.0
# ::edge	thing	ARG2-of	list-01	0.0.0	0.0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / find-01 :ARG1 (MRPNode-2 / thing :ARG2-of (MRPNode-3 / good-02) :ARG2-of (MRPNode-4 / list-01 :ARG1 (MRPNode-5 / vocabulary))) :ARG0 (MRPNode-6 / i) :location (MRPNode-7 / amr-unknown)))

# ::id 178
# ::snt What is the difference between assertive and non-assertive words?
# ::tok What is the difference between assertive and non - assertive words ?
# ::alignments 0-1|0.2 3-4|0 5-6|0.1.0 7-8|0.0.0.0 9-10|0.0.0 10-11|0.0+0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.863118 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	differ-02	3-4
# ::node	0.0	word	10-11
# ::node	0.0.0	assertive	9-10
# ::node	0.0.0.0	-	7-8
# ::node	0.1	word	10-11
# ::node	0.1.0	assertive	5-6
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	assertive	polarity	-	0.0.0	0.0.0.0
# ::edge	differ-02	ARG1	word	0	0.0
# ::edge	differ-02	ARG2	word	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
# ::edge	word	ARG0-of	assertive	0.0	0.0.0
# ::edge	word	mod	assertive	0.1	0.1.0
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / word :ARG0-of (MRPNode-2 / assertive :polarity -)) :ARG2 (MRPNode-3 / word :mod (MRPNode-4 / assertive)) :ARG3 (MRPNode-5 / amr-unknown))

# ::id 179
# ::snt What if I don't have enough work sample for an interview?
# ::tok What if I do n't have enough work sample for an interview ?
# ::alignments 0-1|0.0 2-3|0.1.1 4-5|0.1.0 5-6|0+0.1+0.1.2.0 6-7|0.1.2.0.0 7-8|0.1.2.1 8-9|0.1.2 11-12|0.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.911628 ::parser eager_oracle ::smatch 0.8571428571428572 ::n_actions 50
# ::node	0	have-condition-91	5-6
# ::node	0.0	amr-unknown	0-1
# ::node	0.1	have-03	5-6
# ::node	0.1.0	-	4-5
# ::node	0.1.1	i	2-3
# ::node	0.1.1.0	interview-01	11-12
# ::node	0.1.2	sample-01	8-9
# ::node	0.1.2.0	have-quant-91	5-6
# ::node	0.1.2.0.0	enough	6-7
# ::node	0.1.2.1	work-01	7-8
# ::root	0	have-condition-91
# ::edge	have-03	ARG0	i	0.1	0.1.1
# ::edge	have-03	ARG1	sample-01	0.1	0.1.2
# ::edge	have-03	arg1	-	0.1	0.1.0
# ::edge	have-condition-91	ARG1	amr-unknown	0	0.0
# ::edge	have-condition-91	ARG2	have-03	0	0.1
# ::edge	have-quant-91	ARG3	enough	0.1.2.0	0.1.2.0.0
# ::edge	i	ARG1-of	interview-01	0.1.1	0.1.1.0
# ::edge	sample-01	ARG1	have-quant-91	0.1.2	0.1.2.0
# ::edge	sample-01	ARG1	interview-01	0.1.2	0.1.1.0
# ::edge	sample-01	ARG1	work-01	0.1.2	0.1.2.1
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / amr-unknown) :ARG2 (MRPNode-2 / have-03 :arg1 - :ARG0 (MRPNode-3 / i :ARG1-of (MRPNode-4 / interview-01)) :ARG1 (MRPNode-5 / sample-01 :ARG1 MRPNode-4 :ARG1 (MRPNode-6 / have-quant-91 :ARG3 (MRPNode-7 / enough)) :ARG1 (MRPNode-8 / work-01))))

# ::id 180
# ::snt What is the best way to store fresh berries?
# ::tok What is the best way to store fresh berries ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0.0 8-9|0.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.918584 ::parser eager_oracle ::smatch 0.8275862068965517 ::n_actions 30
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	berry	8-9
# ::node	0.3.0.0	fresh-04	7-8
# ::root	0	way
# ::edge	berry	ARG1-of	fresh-04	0.3.0	0.3.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	store-01	ARG1	berry	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / berry :ARG1-of (MRPNode-7 / fresh-04))))

# ::id 181
# ::snt What is the best way to clean your clothes dryer exhaust?
# ::tok What is the best way to clean your clothes dryer exhaust ?
# ::alignments 0-1|0.3 3-4|0.0+0.1.0 4-5|0 6-7|0.2 7-8|0.2.0.0 8-9|0.2.1.0.0 10-11|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.933373 ::parser eager_oracle ::smatch 0.6857142857142856 ::n_actions 37
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	3-4
# ::node	0.2	clean-01	6-7
# ::node	0.2.0	exhaust	10-11
# ::node	0.2.0.0	you	7-8
# ::node	0.2.1	cause-01	
# ::node	0.2.1.0	product	
# ::node	0.2.1.0.0	clothe-01	8-9
# ::node	0.3	amr-unknown	0-1
# ::root	0	way
# ::edge	cause-01	ARG1	product	0.2.1	0.2.1.0
# ::edge	clean-01	ARG1	cause-01	0.2	0.2.1
# ::edge	clean-01	ARG1	exhaust	0.2	0.2.0
# ::edge	exhaust	poss	you	0.2.0	0.2.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	product	ARG0-of	clothe-01	0.2.1.0	0.2.1.0.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.3
# ::edge	way	domain	clean-01	0	0.2
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / clean-01 :ARG1 (MRPNode-5 / exhaust :poss (MRPNode-6 / you)) :ARG1 (MRPNode-7 / cause-01 :ARG1 (MRPNode-8 / product :ARG0-of (MRPNode-9 / clothe-01)))) :domain (MRPNode-10 / amr-unknown))

# ::id 182
# ::snt What is the best way to treat feline ringworm?
# ::tok What is the best way to treat feline ringworm ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0.0 8-9|0.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.939107 ::parser eager_oracle ::smatch 0.8275862068965517 ::n_actions 30
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	treat-03	6-7
# ::node	0.3.0	ringworm	8-9
# ::node	0.3.0.0	feline	7-8
# ::root	0	way
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	ringworm	mod	feline	0.3.0	0.3.0.0
# ::edge	treat-03	ARG1	ringworm	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	treat-03	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / treat-03 :ARG1 (MRPNode-6 / ringworm :mod (MRPNode-7 / feline))))

# ::id 183
# ::snt What's the best way to seal around this faucet?
# ::tok What 's the best way to seal around this faucet ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0 8-9|0.3.0.0.0 9-10|0.3.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.945926 ::parser eager_oracle ::smatch 0.8484848484848484 ::n_actions 34
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	seal-01	6-7
# ::node	0.3.0	around	7-8
# ::node	0.3.0.0	faucet	9-10
# ::node	0.3.0.0.0	this	8-9
# ::root	0	way
# ::edge	around	op1	faucet	0.3.0	0.3.0.0
# ::edge	faucet	mod	this	0.3.0.0	0.3.0.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	seal-01	location	around	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	seal-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / seal-01 :location (MRPNode-6 / around :op1 (MRPNode-7 / faucet :mod (MRPNode-8 / this)))))

# ::id 184
# ::snt What is the difference between a stock and a bond?
# ::tok What is the difference between a stock and a bond ?
# ::alignments 0-1|0.2 3-4|0 6-7|0.0 9-10|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.948845 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	differ-02	3-4
# ::node	0.0	stock	6-7
# ::node	0.1	bond	9-10
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	stock	0	0.0
# ::edge	differ-02	ARG2	bond	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / stock) :ARG2 (MRPNode-2 / bond) :ARG3 (MRPNode-3 / amr-unknown))

# ::id 185
# ::snt What is the difference between shawarma and gyros?
# ::tok What is the difference between shawarma and gyros ?
# ::alignments 0-1|0.2 3-4|0 5-6|0.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.951362 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	differ-02	3-4
# ::node	0.0	shawarma	5-6
# ::node	0.1	gyro	7-8
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	shawarma	0	0.0
# ::edge	differ-02	ARG2	gyro	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / shawarma) :ARG2 (MRPNode-2 / gyro) :ARG3 (MRPNode-3 / amr-unknown))

# ::id 186
# ::snt What is the best way to apply Shellac-based primer?
# ::tok What is the best way to apply Shellac - based primer ?
# ::alignments 0-1|0.1 3-4|0.0.0 4-5|0 6-7|0.2 7-8|0.2.0.0.0+0.2.0.0.0.0+0.2.0.0.0.0.0 9-10|0.2.0.0 10-11|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.960970 ::parser eager_oracle ::smatch 0.8333333333333333 ::n_actions 34
# ::node	0	way	4-5
# ::node	0.0	have-degree-91	
# ::node	0.0.0	good-02	3-4
# ::node	0.0.1	most	
# ::node	0.1	amr-unknown	0-1
# ::node	0.2	apply-02	6-7
# ::node	0.2.0	primer	10-11
# ::node	0.2.0.0	base-02	9-10
# ::node	0.2.0.0.0	company	7-8
# ::node	0.2.0.0.0.0	name	7-8
# ::node	0.2.0.0.0.0.0	shellac	7-8
# ::root	0	way
# ::edge	apply-02	ARG1	primer	0.2	0.2.0
# ::edge	base-02	ARG2	company	0.2.0.0	0.2.0.0.0
# ::edge	company	name	name	0.2.0.0.0	0.2.0.0.0.0
# ::edge	have-degree-91	ARG2	good-02	0.0	0.0.0
# ::edge	have-degree-91	ARG3	most	0.0	0.0.1
# ::edge	name	op1	shellac	0.2.0.0.0.0	0.2.0.0.0.0.0
# ::edge	primer	ARG1-of	base-02	0.2.0	0.2.0.0
# ::edge	way	domain	amr-unknown	0	0.1
# ::edge	way	manner-of	apply-02	0	0.2
# ::edge	way	manner-of	have-degree-91	0	0.0
(MRPNode-0 / way :manner-of (MRPNode-1 / have-degree-91 :ARG2 (MRPNode-2 / good-02) :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / apply-02 :ARG1 (MRPNode-6 / primer :ARG1-of (MRPNode-7 / base-02 :ARG2 (MRPNode-8 / company :name (MRPNode-9 / name :op1 shellac))))))

# ::id 187
# ::snt What's the best way to store asparagus?
# ::tok What 's the best way to store asparagus ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.965672 ::parser eager_oracle ::smatch 0.8 ::n_actions 26
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	asparagus	7-8
# ::root	0	way
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	store-01	ARG1	asparagus	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / asparagus)))

# ::id 188
# ::snt What is the difference between a filler word and a discourse marker?
# ::tok What is the difference between a filler word and a discourse marker ?
# ::alignments 0-1|0.2 3-4|0 6-7|0.0.0 7-8|0.0 10-11|0.1.0 11-12|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.970870 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	differ-02	3-4
# ::node	0.0	word	7-8
# ::node	0.0.0	filler	6-7
# ::node	0.1	marker	11-12
# ::node	0.1.0	discourse-01	10-11
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	word	0	0.0
# ::edge	differ-02	ARG2	marker	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
# ::edge	marker	topic	discourse-01	0.1	0.1.0
# ::edge	word	mod	filler	0.0	0.0.0
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / word :mod (MRPNode-2 / filler)) :ARG2 (MRPNode-3 / marker :topic (MRPNode-4 / discourse-01)) :ARG3 (MRPNode-5 / amr-unknown))

# ::id 189
# ::snt What is this vocal technique called?
# ::tok What is this vocal technique called ?
# ::alignments 0-1|0.1 2-3|0.0.0 3-4|0.0.1 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.973957 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	call-01	5-6
# ::node	0.0	technique	4-5
# ::node	0.0.0	this	2-3
# ::node	0.0.1	vocal	3-4
# ::node	0.1	amr-unknown	0-1
# ::root	0	call-01
# ::edge	call-01	ARG1	technique	0	0.0
# ::edge	call-01	ARG2	amr-unknown	0	0.1
# ::edge	technique	mod	this	0.0	0.0.0
# ::edge	technique	mod	vocal	0.0	0.0.1
(MRPNode-0 / call-01 :ARG1 (MRPNode-1 / technique :mod (MRPNode-2 / this) :mod (MRPNode-3 / vocal)) :ARG2 (MRPNode-4 / amr-unknown))

# ::id 190
# ::snt What kind of socket is this?
# ::tok What kind of socket is this ?
# ::alignments 0-1|0.0.0 1-2|0.0 3-4|0 5-6|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.976627 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	socket	3-4
# ::node	0.0	kind	1-2
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	this	5-6
# ::root	0	socket
# ::edge	kind	mod	amr-unknown	0.0	0.0.0
# ::edge	kind	mod	this	0.0	0.0.1
# ::edge	socket	mod	kind	0	0.0
(MRPNode-0 / socket :mod (MRPNode-1 / kind :mod (MRPNode-2 / amr-unknown) :mod (MRPNode-3 / this)))

# ::id 191
# ::snt What is the best way to toast pecans?
# ::tok What is the best way to toast pecans ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.981186 ::parser eager_oracle ::smatch 0.8 ::n_actions 26
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	toast	6-7
# ::node	0.3.0	pecan	7-8
# ::root	0	way
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	toast	mod	pecan	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	toast	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / toast :mod (MRPNode-6 / pecan)))

# ::id 192
# ::snt What is the actual difference between Graduate and Undergraduate texts?
# ::tok What is the actual difference between Graduate and Undergraduate texts ?
# ::alignments 0-1|0.3 3-4|0.2 4-5|0 6-7|0.0.0 8-9|0.1.0 9-10|0.0+0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:39.990184 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	differ-02	4-5
# ::node	0.0	text	9-10
# ::node	0.0.0	graduate-01	6-7
# ::node	0.1	text	9-10
# ::node	0.1.0	Undergraduate	8-9
# ::node	0.2	actual-02	3-4
# ::node	0.3	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	text	0	0.0
# ::edge	differ-02	ARG1-of	actual-02	0	0.2
# ::edge	differ-02	ARG1-of	text	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.3
# ::edge	text	mod	Undergraduate	0.1	0.1.0
# ::edge	text	mod	graduate-01	0.0	0.0.0
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / text :mod (MRPNode-2 / graduate-01)) :ARG1-of (MRPNode-3 / text :mod (MRPNode-4 / Undergraduate)) :ARG1-of (MRPNode-5 / actual-02) :ARG3 (MRPNode-6 / amr-unknown))

# ::id 193
# ::snt What is the difference between EFTA and the EU?
# ::tok What is the difference between EFTA and the EU ?
# ::alignments 0-1|0.2 3-4|0 5-6|0.1+0.1.0+0.1.0.0 8-9|0.0+0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:39.994425 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	differ-02	3-4
# ::node	0.0	organization	8-9
# ::node	0.0.0	name	8-9
# ::node	0.0.0.0	eu	8-9
# ::node	0.1	organization	5-6
# ::node	0.1.0	name	5-6
# ::node	0.1.0.0	efta	5-6
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	organization	0	0.0
# ::edge	differ-02	ARG1	organization	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
# ::edge	name	op1	efta	0.1.0	0.1.0.0
# ::edge	name	op1	eu	0.0.0	0.0.0.0
# ::edge	organization	name	name	0.0	0.0.0
# ::edge	organization	name	name	0.1	0.1.0
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / organization :name (MRPNode-2 / name :op1 eu)) :ARG1 (MRPNode-3 / organization :name (MRPNode-4 / name :op1 efta)) :ARG3 (MRPNode-5 / amr-unknown))

# ::id 194
# ::snt What is the best way to store fresh berries?
# ::tok What is the best way to store fresh berries ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0.0 8-9|0.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.001151 ::parser eager_oracle ::smatch 0.8275862068965517 ::n_actions 30
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	store-01	6-7
# ::node	0.3.0	berry	8-9
# ::node	0.3.0.0	fresh-04	7-8
# ::root	0	way
# ::edge	berry	ARG1-of	fresh-04	0.3.0	0.3.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	store-01	ARG1	berry	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	store-01	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / store-01 :ARG1 (MRPNode-6 / berry :ARG1-of (MRPNode-7 / fresh-04))))

# ::id 195
# ::snt What is the difference between a stock and a bond?
# ::tok What is the difference between a stock and a bond ?
# ::alignments 0-1|0.2 3-4|0 6-7|0.0 9-10|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.004513 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	differ-02	3-4
# ::node	0.0	stock	6-7
# ::node	0.1	bond	9-10
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	stock	0	0.0
# ::edge	differ-02	ARG2	bond	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / stock) :ARG2 (MRPNode-2 / bond) :ARG3 (MRPNode-3 / amr-unknown))

# ::id 196
# ::snt What is the best way to toast pecans?
# ::tok What is the best way to toast pecans ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3 7-8|0.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.009678 ::parser eager_oracle ::smatch 0.8 ::n_actions 26
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	toast	6-7
# ::node	0.3.0	pecan	7-8
# ::root	0	way
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	toast	mod	pecan	0.3	0.3.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	toast	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / toast :mod (MRPNode-6 / pecan)))

# ::id 197
# ::snt What kind of socket is this?
# ::tok What kind of socket is this ?
# ::alignments 0-1|0.0.0 1-2|0.0 3-4|0 5-6|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.012163 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	socket	3-4
# ::node	0.0	kind	1-2
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	this	5-6
# ::root	0	socket
# ::edge	kind	mod	amr-unknown	0.0	0.0.0
# ::edge	kind	mod	this	0.0	0.0.1
# ::edge	socket	mod	kind	0	0.0
(MRPNode-0 / socket :mod (MRPNode-1 / kind :mod (MRPNode-2 / amr-unknown) :mod (MRPNode-3 / this)))

# ::id 198
# ::snt "What does the term ""Out of the Furnace"" refer to?"
# ::tok " What does the term " " Out of the Furnace " " refer to ? "
# ::alignments 1-2|0.0 4-5|0.1 7-8|0.1.0 10-11|0.1.0.0 13-14|0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.016799 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	refer-01	13-14
# ::node	0.0	amr-unknown	1-2
# ::node	0.1	term	4-5
# ::node	0.1.0	out-05	7-8
# ::node	0.1.0.0	Furnace	10-11
# ::root	0	refer-01
# ::edge	out-05	ARG2	Furnace	0.1.0	0.1.0.0
# ::edge	refer-01	ARG0	term	0	0.1
# ::edge	refer-01	ARG1	amr-unknown	0	0.0
# ::edge	term	mod	out-05	0.1	0.1.0
(MRPNode-0 / refer-01 :ARG1 (MRPNode-1 / amr-unknown) :ARG0 (MRPNode-2 / term :mod (MRPNode-3 / out-05 :ARG2 (MRPNode-4 / Furnace))))

# ::id 199
# ::snt "What was the meaning of ""21 grams""?"
# ::tok " What was the meaning of " " 21 grams " " ? "
# ::alignments 1-2|0.1 4-5|0 8-9|0.0.0 9-10|0.0+0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.020681 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	mean-01	4-5
# ::node	0.0	mass-quantity	9-10
# ::node	0.0.0	21	8-9
# ::node	0.0.1	gram	9-10
# ::node	0.1	amr-unknown	1-2
# ::root	0	mean-01
# ::edge	mass-quantity	quant	21	0.0	0.0.0
# ::edge	mass-quantity	unit	gram	0.0	0.0.1
# ::edge	mean-01	ARG1	mass-quantity	0	0.0
# ::edge	mean-01	ARG2	amr-unknown	0	0.1
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / mass-quantity :quant 21 :unit (MRPNode-2 / gram)) :ARG2 (MRPNode-3 / amr-unknown))

# ::id 200
# ::snt What is the difference between shawarma and gyros?
# ::tok What is the difference between shawarma and gyros ?
# ::alignments 0-1|0.2 3-4|0 5-6|0.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.023483 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	differ-02	3-4
# ::node	0.0	shawarma	5-6
# ::node	0.1	gyro	7-8
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	shawarma	0	0.0
# ::edge	differ-02	ARG2	gyro	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / shawarma) :ARG2 (MRPNode-2 / gyro) :ARG3 (MRPNode-3 / amr-unknown))

# ::id 201
# ::snt What is the significance of the cat?
# ::tok What is the significance of the cat ?
# ::alignments 0-1|0.1 3-4|0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.025554 ::parser eager_oracle ::smatch 1.0 ::n_actions 19
# ::node	0	significant-02	3-4
# ::node	0.0	cat	6-7
# ::node	0.1	amr-unknown	0-1
# ::root	0	significant-02
# ::edge	significant-02	ARG1	cat	0	0.0
# ::edge	significant-02	ARG3	amr-unknown	0	0.1
(MRPNode-0 / significant-02 :ARG1 (MRPNode-1 / cat) :ARG3 (MRPNode-2 / amr-unknown))

# ::id 202
# ::snt What kind of spider web is this - and how do I get rid of it?
# ::tok What kind of spider web is this - and how do I get rid of it ?
# ::alignments 0-1|0.0.0 1-2|0.0.1 3-4|0.0.2 4-5|0.0 7-8|0 9-10|0.1.1 11-12|0.1.0 13-14|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.043648 ::parser eager_oracle ::smatch 1.0 ::n_actions 45
# ::node	0	and	7-8
# ::node	0.0	web	4-5
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	kind	1-2
# ::node	0.0.2	spider	3-4
# ::node	0.1	rid-01	13-14
# ::node	0.1.0	i	11-12
# ::node	0.1.1	amr-unknown	9-10
# ::root	0	and
# ::edge	and	op1	web	0	0.0
# ::edge	and	op2	rid-01	0	0.1
# ::edge	rid-01	ARG0	i	0.1	0.1.0
# ::edge	rid-01	ARG1	web	0.1	0.0
# ::edge	rid-01	manner	amr-unknown	0.1	0.1.1
# ::edge	web	mod	amr-unknown	0.0	0.0.0
# ::edge	web	mod	kind	0.0	0.0.1
# ::edge	web	mod	spider	0.0	0.0.2
(MRPNode-0 / and :op1 (MRPNode-1 / web :mod (MRPNode-2 / amr-unknown) :mod (MRPNode-3 / kind) :mod (MRPNode-4 / spider)) :op2 (MRPNode-5 / rid-01 :ARG1 MRPNode-1 :ARG0 (MRPNode-6 / i) :manner (MRPNode-7 / amr-unknown)))

# ::id 203
# ::snt What's the best way to store potatoes and maximize their shelf-life?
# ::tok What 's the best way to store potatoes and maximize their shelf - life ?
# ::alignments 0-1|0.2 3-4|0.0 4-5|0 6-7|0.3.0 7-8|0.3.0.0 8-9|0.3 9-10|0.3.1 11-12|0.3.1.0.0 13-14|0.3.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.058180 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 47
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	
# ::node	0.2	amr-unknown	0-1
# ::node	0.3	and	8-9
# ::node	0.3.0	store-01	6-7
# ::node	0.3.0.0	potato	7-8
# ::node	0.3.1	maximize-01	9-10
# ::node	0.3.1.0	life	13-14
# ::node	0.3.1.0.0	shelf	11-12
# ::root	0	way
# ::edge	and	op1	store-01	0.3	0.3.0
# ::edge	and	op2	maximize-01	0.3	0.3.1
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	life	mod	shelf	0.3.1.0	0.3.1.0.0
# ::edge	life	poss	potato	0.3.1.0	0.3.0.0
# ::edge	maximize-01	ARG0	potato	0.3.1	0.3.0.0
# ::edge	maximize-01	ARG1	life	0.3.1	0.3.1.0
# ::edge	store-01	ARG1	potato	0.3.0	0.3.0.0
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	domain	amr-unknown	0	0.2
# ::edge	way	manner-of	and	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / amr-unknown) :manner-of (MRPNode-5 / and :op1 (MRPNode-6 / store-01 :ARG1 (MRPNode-7 / potato)) :op2 (MRPNode-8 / maximize-01 :ARG0 MRPNode-7 :ARG1 (MRPNode-9 / life :poss MRPNode-7 :mod (MRPNode-10 / shelf)))))

# ::id 204
# ::snt What is the difference between a stock and a bond?
# ::tok What is the difference between a stock and a bond ?
# ::alignments 0-1|0.2 3-4|0 6-7|0.0 9-10|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.061106 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	differ-02	3-4
# ::node	0.0	stock	6-7
# ::node	0.1	bond	9-10
# ::node	0.2	amr-unknown	0-1
# ::root	0	differ-02
# ::edge	differ-02	ARG1	stock	0	0.0
# ::edge	differ-02	ARG2	bond	0	0.1
# ::edge	differ-02	ARG3	amr-unknown	0	0.2
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / stock) :ARG2 (MRPNode-2 / bond) :ARG3 (MRPNode-3 / amr-unknown))

# ::id 205
# ::snt What is the difference between mono and stereo?
# ::tok What is the difference between mono and stereo ?
# ::alignments 0-1|0.0 3-4|0 5-6|0.1 7-8|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:40.063618 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	differ-02	3-4
# ::node	0.0	amr-unknown	0-1
# ::node	0.1	mono	5-6
# ::node	0.2	stereo	7-8
# ::root	0	differ-02
# ::edge	differ-02	ARG1	amr-unknown	0	0.0
# ::edge	differ-02	ARG2	mono	0	0.1
# ::edge	differ-02	ARG2	stereo	0	0.2
(MRPNode-0 / differ-02 :ARG1 (MRPNode-1 / amr-unknown) :ARG2 (MRPNode-2 / mono) :ARG2 (MRPNode-3 / stereo))

# ::id 206
# ::snt What is the best way to store my sleeping bag for long periods of time?
# ::tok What is the best way to store my sleeping bag for long periods of time ?
# ::alignments 0-1|0.3 3-4|0.0+0.1.0 4-5|0 6-7|0.2 7-8|0.2.0.1 8-9|0.2.0.0 9-10|0.2.0 11-12|0.2.1.0 12-13|0.2.1 13-14|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.079748 ::parser eager_oracle ::smatch 1.0 ::n_actions 56
# ::node	0	way	4-5
# ::node	0.0	good-02	3-4
# ::node	0.1	have-degree-91	13-14
# ::node	0.1.0	most	3-4
# ::node	0.2	store-01	6-7
# ::node	0.2.0	bag	9-10
# ::node	0.2.0.0	sleep-01	8-9
# ::node	0.2.0.1	i	7-8
# ::node	0.2.1	period	12-13
# ::node	0.2.1.0	long-03	11-12
# ::node	0.3	amr-unknown	0-1
# ::root	0	way
# ::edge	bag	poss	i	0.2.0	0.2.0.1
# ::edge	bag	poss	sleep-01	0.2.0	0.2.0.0
# ::edge	have-degree-91	ARG2	good-02	0.1	0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	period	ARG1-of	long-03	0.2.1	0.2.1.0
# ::edge	store-01	ARG1	bag	0.2	0.2.0
# ::edge	store-01	duration	period	0.2	0.2.1
# ::edge	way	ARG1-of	good-02	0	0.0
# ::edge	way	domain	amr-unknown	0	0.3
# ::edge	way	domain	have-degree-91	0	0.1
# ::edge	way	domain	store-01	0	0.2
(MRPNode-0 / way :ARG1-of (MRPNode-1 / good-02) :domain (MRPNode-2 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-3 / most)) :domain (MRPNode-4 / store-01 :ARG1 (MRPNode-5 / bag :poss (MRPNode-6 / sleep-01) :poss (MRPNode-7 / i)) :duration (MRPNode-8 / period :ARG1-of (MRPNode-9 / long-03))) :domain (MRPNode-10 / amr-unknown))

# ::id 207
# ::snt To explain further vector space models, basically a document is characterized by a vector.
# ::tok To explain further vector space models , basically a document is characterized by a vector .
# ::alignments 1-2|0.2 2-3|0.2.0.1 3-4|0.2.0.0.0 4-5|0.2.0.0 5-6|0.2.0 7-8|0.3 9-10|0.0 11-12|0 14-15|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.104015 ::parser eager_oracle ::smatch 1.0 ::n_actions 45
# ::node	0	characterize-01	11-12
# ::node	0.0	document	9-10
# ::node	0.1	vector	14-15
# ::node	0.2	explain-01	1-2
# ::node	0.2.0	model-01	5-6
# ::node	0.2.0.0	space	4-5
# ::node	0.2.0.0.0	vector	3-4
# ::node	0.2.0.1	further	2-3
# ::node	0.3	basic	7-8
# ::root	0	characterize-01
# ::edge	characterize-01	ARG0	vector	0	0.1
# ::edge	characterize-01	ARG1	document	0	0.0
# ::edge	characterize-01	mod	basic	0	0.3
# ::edge	characterize-01	mod	explain-01	0	0.2
# ::edge	explain-01	ARG1	model-01	0.2	0.2.0
# ::edge	model-01	mod	further	0.2.0	0.2.0.1
# ::edge	model-01	mod	space	0.2.0	0.2.0.0
# ::edge	space	mod	vector	0.2.0.0	0.2.0.0.0
(MRPNode-0 / characterize-01 :ARG1 (MRPNode-1 / document) :ARG0 (MRPNode-2 / vector) :mod (MRPNode-3 / explain-01 :ARG1 (MRPNode-4 / model-01 :mod (MRPNode-5 / space :mod (MRPNode-6 / vector)) :mod (MRPNode-7 / further))) :mod (MRPNode-8 / basic))

# ::id 208
# ::snt The differing application has a direct influence on what the definition of the term means.
# ::tok The differing application has a direct influence on what the definition of the term means .
# ::alignments 1-2|0.1.0 2-3|0.1 5-6|0.2 6-7|0 10-11|0.0.0.0 13-14|0.0.0.0.0 14-15|0.0+0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.114167 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	influence-01	6-7
# ::node	0.0	thing	14-15
# ::node	0.0.0	mean-01	14-15
# ::node	0.0.0.0	define-01	10-11
# ::node	0.0.0.0.0	term	13-14
# ::node	0.1	apply-02	2-3
# ::node	0.1.0	differ-01	1-2
# ::node	0.2	direct-02	5-6
# ::root	0	influence-01
# ::edge	apply-02	ARG1-of	differ-01	0.1	0.1.0
# ::edge	define-01	ARG1	term	0.0.0.0	0.0.0.0.0
# ::edge	influence-01	ARG0	apply-02	0	0.1
# ::edge	influence-01	ARG1	thing	0	0.0
# ::edge	influence-01	ARG1-of	direct-02	0	0.2
# ::edge	mean-01	ARG1	define-01	0.0.0	0.0.0.0
# ::edge	thing	ARG2-of	mean-01	0.0	0.0.0
(MRPNode-0 / influence-01 :ARG1 (MRPNode-1 / thing :ARG2-of (MRPNode-2 / mean-01 :ARG1 (MRPNode-3 / define-01 :ARG1 (MRPNode-4 / term)))) :ARG0 (MRPNode-5 / apply-02 :ARG1-of (MRPNode-6 / differ-01)) :ARG1-of (MRPNode-7 / direct-02))

# ::id 209
# ::snt "Thus, the ""program"" is the optimal plan of action that is being produced."
# ::tok " Thus , the " " program " " is the optimal plan of action that is being produced . "
# ::alignments 6-7|0.0.3 11-12|0.0.2 12-13|0.0 14-15|0.0.0 18-19|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.121197 ::parser eager_oracle ::smatch 0.8181818181818182 ::n_actions 38
# ::node	0	cause-01	
# ::node	0.0	plan-01	12-13
# ::node	0.0.0	act-02	14-15
# ::node	0.0.1	produce-01	18-19
# ::node	0.0.2	optimal	11-12
# ::node	0.0.3	program	6-7
# ::root	0	cause-01
# ::edge	cause-01	ARG1	plan-01	0	0.0
# ::edge	plan-01	ARG1	act-02	0.0	0.0.0
# ::edge	plan-01	domain	program	0.0	0.0.3
# ::edge	plan-01	mod	optimal	0.0	0.0.2
# ::edge	plan-01	mod	produce-01	0.0	0.0.1
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / plan-01 :ARG1 (MRPNode-2 / act-02) :mod (MRPNode-3 / produce-01) :mod (MRPNode-4 / optimal) :domain (MRPNode-5 / program)))

# ::id 210
# ::snt "Thus, the ""program"" is the optimal plan for action that is produced."
# ::tok " Thus , the " " program " " is the optimal plan for action that is produced . "
# ::alignments 6-7|0.0.1 11-12|0.0.2 12-13|0.0 13-14|0 14-15|0.0.0 17-18|0.0.3 ::annotator aligner3.py ::date 2021-03-11 23:00:40.128425 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 41
# ::node	0	cause-01	13-14
# ::node	0.0	plan-01	12-13
# ::node	0.0.0	act-02	14-15
# ::node	0.0.1	program	6-7
# ::node	0.0.2	optimal	11-12
# ::node	0.0.3	produce-01	17-18
# ::root	0	cause-01
# ::edge	cause-01	ARG1	plan-01	0	0.0
# ::edge	plan-01	ARG1	act-02	0.0	0.0.0
# ::edge	plan-01	ARG1-of	produce-01	0.0	0.0.3
# ::edge	plan-01	mod	optimal	0.0	0.0.2
# ::edge	plan-01	mod	program	0.0	0.0.1
# ::edge	produce-01	ARG1	act-02	0.0.3	0.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / plan-01 :ARG1 (MRPNode-2 / act-02) :mod (MRPNode-3 / program) :mod (MRPNode-4 / optimal) :ARG1-of (MRPNode-5 / produce-01 :ARG1 MRPNode-2)))

# ::id 211
# ::snt P(B) (a.k.a. the normalizing constant) is the prior or marginal probability of B.
# ::tok P ( B ) ( a.k.a. the normalizing constant ) is the prior or marginal probability of B.
# ::alignments 8-9|0.2 12-13|0.0.0 13-14|0 14-15|0.1.0 15-16|0.0+0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.134951 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 42
# ::node	0	or	13-14
# ::node	0.0	probability	15-16
# ::node	0.0.0	prior	12-13
# ::node	0.1	probability	15-16
# ::node	0.1.0	marginal-02	14-15
# ::node	0.2	constant	8-9
# ::node	0.2.0	limit-01	
# ::root	0	or
# ::edge	constant	domain	limit-01	0.2	0.2.0
# ::edge	or	domain	constant	0	0.2
# ::edge	or	op1	probability	0	0.0
# ::edge	or	op2	probability	0	0.1
# ::edge	probability	ARG1-of	marginal-02	0.1	0.1.0
# ::edge	probability	mod	prior	0.0	0.0.0
(MRPNode-0 / or :op1 (MRPNode-1 / probability :mod (MRPNode-2 / prior)) :op2 (MRPNode-3 / probability :ARG1-of (MRPNode-4 / marginal-02)) :domain (MRPNode-5 / constant :domain (MRPNode-6 / limit-01)))

# ::id 212
# ::snt In general, we can solve a problem with optimal substructure using a three-step process: 1.
# ::tok In general , we can solve a problem with optimal substructure using a three - step process : 1 .
# ::alignments 1-2|0.1.2 3-4|0.1.1 4-5|0 5-6|0.1 7-8|0.1.0 9-10|0.1.0.0.0 10-11|0.1.0.0 11-12|0.1.3 13-14|0.1.3.0.0.0 15-16|0.1.3.0.0 16-17|0.1.3.0 18-19|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.165221 ::parser eager_oracle ::smatch 0.9361702127659574 ::n_actions 62
# ::node	0	possible-01	4-5
# ::node	0.0	1	18-19
# ::node	0.1	solve-01	5-6
# ::node	0.1.0	problem	7-8
# ::node	0.1.0.0	substructure	10-11
# ::node	0.1.0.0.0	optimal	9-10
# ::node	0.1.1	we	3-4
# ::node	0.1.2	general-02	1-2
# ::node	0.1.3	use-01	11-12
# ::node	0.1.3.0	process-02	16-17
# ::node	0.1.3.0.0	step-01	15-16
# ::node	0.1.3.0.0.0	3	13-14
# ::root	0	possible-01
# ::edge	possible-01	ARG1	solve-01	0	0.1
# ::edge	possible-01	li	1	0	0.0
# ::edge	problem	topic	substructure	0.1.0	0.1.0.0
# ::edge	process-02	ARG1	step-01	0.1.3.0	0.1.3.0.0
# ::edge	solve-01	ARG0	we	0.1	0.1.1
# ::edge	solve-01	ARG1	problem	0.1	0.1.0
# ::edge	solve-01	ARG1-of	general-02	0.1	0.1.2
# ::edge	solve-01	manner	use-01	0.1	0.1.3
# ::edge	step-01	quant	3	0.1.3.0.0	0.1.3.0.0.0
# ::edge	substructure	mod	optimal	0.1.0.0	0.1.0.0.0
# ::edge	use-01	ARG0	we	0.1.3	0.1.1
# ::edge	use-01	ARG1	process-02	0.1.3	0.1.3.0
(MRPNode-0 / possible-01 :li 1 :ARG1 (MRPNode-1 / solve-01 :ARG1 (MRPNode-2 / problem :topic (MRPNode-3 / substructure :mod (MRPNode-4 / optimal))) :ARG0 (MRPNode-5 / we) :ARG1-of (MRPNode-6 / general-02) :manner (MRPNode-7 / use-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-8 / process-02 :ARG1 (MRPNode-9 / step-01 :quant 3)))))

# ::id 213
# ::snt One of its uses is calculating posterior probabilities given observations.
# ::tok One of its uses is calculating posterior probabilities given observations .
# ::alignments 0-1|0.0.1 1-2|0.0 2-3|0.0.0 3-4|0 5-6|0.1 7-8|0.1.0 8-9|0.1.1.0 9-10|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.180371 ::parser eager_oracle ::smatch 0.9411764705882353 ::n_actions 37
# ::node	0	use-01	3-4
# ::node	0.0	include-91	1-2
# ::node	0.0.0	it	2-3
# ::node	0.0.1	one	0-1
# ::node	0.1	calculate-01	5-6
# ::node	0.1.0	probability	7-8
# ::node	0.1.0.0	determine-01	
# ::node	0.1.1	observe-01	9-10
# ::node	0.1.1.0	give-14	8-9
# ::root	0	use-01
# ::edge	calculate-01	ARG1	probability	0.1	0.1.0
# ::edge	calculate-01	manner	observe-01	0.1	0.1.1
# ::edge	include-91	ARG2	it	0.0	0.0.0
# ::edge	include-91	ARG2	one	0.0	0.0.1
# ::edge	observe-01	ARG1-of	give-14	0.1.1	0.1.1.0
# ::edge	probability	mod	determine-01	0.1.0	0.1.0.0
# ::edge	use-01	ARG1	include-91	0	0.0
# ::edge	use-01	ARG2	calculate-01	0	0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / include-91 :ARG2 (MRPNode-2 / it) :ARG2 (MRPNode-3 / one)) :ARG2 (MRPNode-4 / calculate-01 :ARG1 (MRPNode-5 / probability :mod (MRPNode-6 / determine-01)) :manner (MRPNode-7 / observe-01 :ARG1-of (MRPNode-8 / give-14))))

# ::id 214
# ::snt The way that a 'term' is defined depends on the application.
# ::tok The way that a ' term ' is defined depends on the application .
# ::alignments 1-2|0.0 5-6|0.0.0.0 8-9|0.0.0 9-10|0 12-13|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.184829 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	depend-01	9-10
# ::node	0.0	way	1-2
# ::node	0.0.0	define-01	8-9
# ::node	0.0.0.0	term	5-6
# ::node	0.1	application	12-13
# ::root	0	depend-01
# ::edge	define-01	ARG1	term	0.0.0	0.0.0.0
# ::edge	depend-01	ARG1	application	0	0.1
# ::edge	depend-01	ARG1	way	0	0.0
# ::edge	way	manner-of	define-01	0.0	0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / way :manner-of (MRPNode-2 / define-01 :ARG1 (MRPNode-3 / term))) :ARG1 (MRPNode-4 / application))

# ::id 215
# ::snt Its first application was in the SMART Information Retrieval System.
# ::tok Its first application was in the SMART Information Retrieval System .
# ::alignments 0-1|0.0 2-3|0 6-10|0.1+0.1.0+0.1.0.0+0.1.0.1+0.1.0.2+0.1.0.3 ::annotator aligner3.py ::date 2021-03-11 23:00:40.190391 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 22
# ::node	0	apply-02	2-3
# ::node	0.0	it	0-1
# ::node	0.1	thing	6-10
# ::node	0.1.0	name	6-10
# ::node	0.1.0.0	smart	6-10
# ::node	0.1.0.1	information	6-10
# ::node	0.1.0.2	retrieval	6-10
# ::node	0.1.0.3	system	6-10
# ::node	0.2	ordinal-entity	
# ::node	0.2.0	1	
# ::root	0	apply-02
# ::edge	apply-02	ARG1	it	0	0.0
# ::edge	apply-02	ARG2	thing	0	0.1
# ::edge	apply-02	ord	ordinal-entity	0	0.2
# ::edge	name	op1	smart	0.1.0	0.1.0.0
# ::edge	name	op2	information	0.1.0	0.1.0.1
# ::edge	name	op3	retrieval	0.1.0	0.1.0.2
# ::edge	name	op4	system	0.1.0	0.1.0.3
# ::edge	ordinal-entity	value	1	0.2	0.2.0
# ::edge	thing	name	name	0.1	0.1.0
(MRPNode-0 / apply-02 :ARG1 (MRPNode-1 / it) :ARG2 (MRPNode-2 / thing :name (MRPNode-3 / name :op1 smart :op2 information :op3 retrieval :op4 system)) :ord (MRPNode-4 / ordinal-entity :value 1))

# ::id 216
# ::snt Thus, the program is the best plan for action that is produced.
# ::tok Thus , the program is the best plan for action that is produced .
# ::alignments 3-4|0.0.1 6-7|0.0.2.0+0.0.2.1 7-8|0.0 8-9|0 9-10|0.0.0 12-13|0.0.3 ::annotator aligner3.py ::date 2021-03-11 23:00:40.197971 ::parser eager_oracle ::smatch 0.7333333333333334 ::n_actions 37
# ::node	0	cause-01	8-9
# ::node	0.0	plan-01	7-8
# ::node	0.0.0	act-02	9-10
# ::node	0.0.1	program	3-4
# ::node	0.0.2	have-degree-91	
# ::node	0.0.2.0	most	6-7
# ::node	0.0.2.1	good-02	6-7
# ::node	0.0.3	produce-01	12-13
# ::root	0	cause-01
# ::edge	cause-01	ARG1	plan-01	0	0.0
# ::edge	have-degree-91	ARG2	good-02	0.0.2	0.0.2.1
# ::edge	have-degree-91	ARG3	most	0.0.2	0.0.2.0
# ::edge	plan-01	ARG1	act-02	0.0	0.0.0
# ::edge	plan-01	ARG1-of	good-02	0.0	0.0.2.1
# ::edge	plan-01	ARG1-of	have-degree-91	0.0	0.0.2
# ::edge	plan-01	ARG1-of	produce-01	0.0	0.0.3
# ::edge	plan-01	ARG1-of	program	0.0	0.0.1
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / plan-01 :ARG1 (MRPNode-2 / act-02) :ARG1-of (MRPNode-3 / program) :ARG1-of (MRPNode-4 / have-degree-91 :ARG3 (MRPNode-5 / most) :ARG2 (MRPNode-6 / good-02)) :ARG1-of MRPNode-6 :ARG1-of (MRPNode-7 / produce-01)))

# ::id 217
# ::snt It is usually used to calculate posterior probabilities given observations.
# ::tok It is usually used to calculate posterior probabilities given observations .
# ::alignments 0-1|0.0 2-3|0.1 3-4|0 5-6|0.2 7-8|0.2.0 8-9|0.2.1.0 9-10|0.2.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.205758 ::parser eager_oracle ::smatch 0.9375 ::n_actions 36
# ::node	0	use-01	3-4
# ::node	0.0	it	0-1
# ::node	0.1	usual	2-3
# ::node	0.2	calculate-01	5-6
# ::node	0.2.0	probability	7-8
# ::node	0.2.0.0	differ-02	
# ::node	0.2.1	observe-01	9-10
# ::node	0.2.1.0	give-01	8-9
# ::root	0	use-01
# ::edge	calculate-01	ARG0	it	0.2	0.0
# ::edge	calculate-01	ARG1	observe-01	0.2	0.2.1
# ::edge	calculate-01	ARG1	probability	0.2	0.2.0
# ::edge	observe-01	ARG1-of	give-01	0.2.1	0.2.1.0
# ::edge	probability	mod	differ-02	0.2.0	0.2.0.0
# ::edge	use-01	ARG1	it	0	0.0
# ::edge	use-01	ARG2	calculate-01	0	0.2
# ::edge	use-01	mod	usual	0	0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / it) :mod (MRPNode-2 / usual) :ARG2 (MRPNode-3 / calculate-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-4 / probability :mod (MRPNode-5 / differ-02)) :ARG1 (MRPNode-6 / observe-01 :ARG1-of (MRPNode-7 / give-01))))

# ::id 218
# ::snt The methodology takes much less time rather than naive methods.
# ::tok The methodology takes much less time rather than naive methods .
# ::alignments 1-2|0.1 2-3|0 3-4|0.0.1.0.0 4-5|0.0.1.0 5-6|0.0 8-9|0.0.0.0.0 9-10|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.250054 ::parser eager_oracle ::smatch 0.75 ::n_actions 32
# ::node	0	take-10	2-3
# ::node	0.0	time	5-6
# ::node	0.0.0	instead-of-91	
# ::node	0.0.0.0	method	9-10
# ::node	0.0.0.0.0	naive	8-9
# ::node	0.0.1	have-quant-91	
# ::node	0.0.1.0	less	4-5
# ::node	0.0.1.0.0	much	3-4
# ::node	0.1	methodology	1-2
# ::root	0	take-10
# ::edge	have-quant-91	ARG3	less	0.0.1	0.0.1.0
# ::edge	instead-of-91	ARG2	method	0.0.0	0.0.0.0
# ::edge	less	quant	much	0.0.1.0	0.0.1.0.0
# ::edge	method	mod	naive	0.0.0.0	0.0.0.0.0
# ::edge	take-10	ARG0	methodology	0	0.1
# ::edge	take-10	ARG1	time	0	0.0
# ::edge	time	ARG1-of	have-quant-91	0.0	0.0.1
# ::edge	time	ARG1-of	instead-of-91	0.0	0.0.0
(MRPNode-0 / take-10 :ARG1 (MRPNode-1 / time :ARG1-of (MRPNode-2 / instead-of-91 :ARG2 (MRPNode-3 / method :mod (MRPNode-4 / naive))) :ARG1-of (MRPNode-5 / have-quant-91 :ARG3 (MRPNode-6 / less :quant (MRPNode-7 / much)))) :ARG0 (MRPNode-8 / methodology))

# ::id 219
# ::snt The methodology takes much less time rather than naive methods.
# ::tok The methodology takes much less time rather than naive methods .
# ::alignments 1-2|0.1 2-3|0 3-4|0.0.1.0.0 4-5|0.0.1.0 5-6|0.0 8-9|0.0.0.0.0 9-10|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.290313 ::parser eager_oracle ::smatch 0.75 ::n_actions 32
# ::node	0	take-10	2-3
# ::node	0.0	time	5-6
# ::node	0.0.0	instead-of-91	
# ::node	0.0.0.0	method	9-10
# ::node	0.0.0.0.0	naive	8-9
# ::node	0.0.1	have-quant-91	
# ::node	0.0.1.0	less	4-5
# ::node	0.0.1.0.0	much	3-4
# ::node	0.1	methodology	1-2
# ::root	0	take-10
# ::edge	have-quant-91	ARG3	less	0.0.1	0.0.1.0
# ::edge	instead-of-91	ARG2	method	0.0.0	0.0.0.0
# ::edge	less	quant	much	0.0.1.0	0.0.1.0.0
# ::edge	method	mod	naive	0.0.0.0	0.0.0.0.0
# ::edge	take-10	ARG0	methodology	0	0.1
# ::edge	take-10	ARG1	time	0	0.0
# ::edge	time	ARG1-of	have-quant-91	0.0	0.0.1
# ::edge	time	ARG1-of	instead-of-91	0.0	0.0.0
(MRPNode-0 / take-10 :ARG1 (MRPNode-1 / time :ARG1-of (MRPNode-2 / instead-of-91 :ARG2 (MRPNode-3 / method :mod (MRPNode-4 / naive))) :ARG1-of (MRPNode-5 / have-quant-91 :ARG3 (MRPNode-6 / less :quant (MRPNode-7 / much)))) :ARG0 (MRPNode-8 / methodology))

# ::id 220
# ::snt The definition of term is dependent on the application.
# ::tok The definition of term is dependent on the application .
# ::alignments 1-2|0.1 3-4|0.1.0 5-6|0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.293818 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	depend-01	5-6
# ::node	0.0	apply-02	8-9
# ::node	0.1	define-01	1-2
# ::node	0.1.0	term	3-4
# ::root	0	depend-01
# ::edge	define-01	ARG1	term	0.1	0.1.0
# ::edge	depend-01	ARG0	define-01	0	0.1
# ::edge	depend-01	ARG1	apply-02	0	0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / apply-02) :ARG0 (MRPNode-2 / define-01 :ARG1 (MRPNode-3 / term)))

# ::id 221
# ::snt Whilst Bayesians describe probabilities in terms of beliefs and degrees of uncertainty.
# ::tok Whilst Bayesians describe probabilities in terms of beliefs and degrees of uncertainty .
# ::alignments 1-2|0.0.1+0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 2-3|0.0 3-4|0.0.0 7-8|0.0.2.0+0.0.2.0.0 8-9|0.0.2 9-10|0.0.2.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.306939 ::parser eager_oracle ::smatch 0.8372093023255814 ::n_actions 41
# ::node	0	contrast-01	
# ::node	0.0	describe-01	2-3
# ::node	0.0.0	probability	3-4
# ::node	0.0.1	person	1-2
# ::node	0.0.1.0	world-region	1-2
# ::node	0.0.1.0.0	name	1-2
# ::node	0.0.1.0.0.0	bayesians	1-2
# ::node	0.0.2	and	8-9
# ::node	0.0.2.0	thing	7-8
# ::node	0.0.2.0.0	believe-01	7-8
# ::node	0.0.2.1	degree	9-10
# ::node	0.0.2.1.0	know-01	
# ::node	0.0.2.1.0.0	-	
# ::root	0	contrast-01
# ::edge	and	op1	thing	0.0.2	0.0.2.0
# ::edge	and	op2	degree	0.0.2	0.0.2.1
# ::edge	contrast-01	ARG2	describe-01	0	0.0
# ::edge	degree	degree-of	know-01	0.0.2.1	0.0.2.1.0
# ::edge	describe-01	ARG0	person	0.0	0.0.1
# ::edge	describe-01	ARG1	probability	0.0	0.0.0
# ::edge	describe-01	ARG2	and	0.0	0.0.2
# ::edge	know-01	polarity	-	0.0.2.1.0	0.0.2.1.0.0
# ::edge	name	op1	bayesians	0.0.1.0.0	0.0.1.0.0.0
# ::edge	person	mod	world-region	0.0.1	0.0.1.0
# ::edge	thing	ARG1-of	believe-01	0.0.2.0	0.0.2.0.0
# ::edge	world-region	name	name	0.0.1.0	0.0.1.0.0
(MRPNode-0 / contrast-01 :ARG2 (MRPNode-1 / describe-01 :ARG1 (MRPNode-2 / probability) :ARG0 (MRPNode-3 / person :mod (MRPNode-4 / world-region :name (MRPNode-5 / name :op1 bayesians))) :ARG2 (MRPNode-6 / and :op1 (MRPNode-7 / thing :ARG1-of (MRPNode-8 / believe-01)) :op2 (MRPNode-9 / degree :degree-of (MRPNode-10 / know-01 :polarity -)))))

# ::id 222
# ::snt It is used in information filtering, information retrieval, indexing and relevancy rankings.
# ::tok It is used in information filtering , information retrieval , indexing and relevancy rankings .
# ::alignments 0-1|0.0 2-3|0 4-5|0.1.1.0 5-6|0.1.0 7-8|0.1.0.0 8-9|0.1.1 11-12|0.1 12-13|0.1.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.324257 ::parser eager_oracle ::smatch 0.8333333333333333 ::n_actions 42
# ::node	0	use-01	2-3
# ::node	0.0	it	0-1
# ::node	0.1	and	11-12
# ::node	0.1.0	filter-02	5-6
# ::node	0.1.0.0	information	7-8
# ::node	0.1.1	retrieve-01	8-9
# ::node	0.1.1.0	information	4-5
# ::node	0.1.2	model-01	
# ::node	0.1.3	track-01	
# ::node	0.1.3.0	relevant-01	12-13
# ::root	0	use-01
# ::edge	and	op1	filter-02	0.1	0.1.0
# ::edge	and	op2	retrieve-01	0.1	0.1.1
# ::edge	and	op3	model-01	0.1	0.1.2
# ::edge	and	op4	track-01	0.1	0.1.3
# ::edge	filter-02	ARG1	information	0.1.0	0.1.0.0
# ::edge	retrieve-01	ARG1	information	0.1.1	0.1.0.0
# ::edge	retrieve-01	ARG1	information	0.1.1	0.1.1.0
# ::edge	track-01	ARG1-of	relevant-01	0.1.3	0.1.3.0
# ::edge	use-01	ARG1	it	0	0.0
# ::edge	use-01	ARG2	and	0	0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / it) :ARG2 (MRPNode-2 / and :op1 (MRPNode-3 / filter-02 :ARG1 (MRPNode-4 / information)) :op2 (MRPNode-5 / retrieve-01 :ARG1 MRPNode-4 :ARG1 (MRPNode-6 / information)) :op3 (MRPNode-7 / model-01) :op4 (MRPNode-8 / track-01 :ARG1-of (MRPNode-9 / relevant-01))))

# ::id 223
# ::snt Several different ways of computing these values, also known as (term) weights, have been developed.
# ::tok Several different ways of computing these values , also known as ( term ) weights , have been developed .
# ::alignments 0-1|0.0.0 1-2|0.0.1 2-3|0.0 5-6|0.0.2.0.1 6-7|0.0.2.0 8-9|0.0.2.0.0.0 9-10|0.0.2.0.0 14-15|0.0.2.0.0.1 18-19|0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.349668 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 48
# ::node	0	develop-02	18-19
# ::node	0.0	way	2-3
# ::node	0.0.0	several	0-1
# ::node	0.0.1	differ-02	1-2
# ::node	0.0.2	copy-01	
# ::node	0.0.2.0	value	6-7
# ::node	0.0.2.0.0	know-02	9-10
# ::node	0.0.2.0.0.0	also	8-9
# ::node	0.0.2.0.0.1	weight	14-15
# ::node	0.0.2.0.1	this	5-6
# ::root	0	develop-02
# ::edge	copy-01	ARG1	value	0.0.2	0.0.2.0
# ::edge	develop-02	ARG1	way	0	0.0
# ::edge	know-02	ARG2	weight	0.0.2.0.0	0.0.2.0.0.1
# ::edge	know-02	mod	also	0.0.2.0.0	0.0.2.0.0.0
# ::edge	value	mod	know-02	0.0.2.0	0.0.2.0.0
# ::edge	value	mod	this	0.0.2.0	0.0.2.0.1
# ::edge	way	ARG1-of	differ-02	0.0	0.0.1
# ::edge	way	manner-of	copy-01	0.0	0.0.2
# ::edge	way	quant	several	0.0	0.0.0
(MRPNode-0 / develop-02 :ARG1 (MRPNode-1 / way :quant (MRPNode-2 / several) :ARG1-of (MRPNode-3 / differ-02) :manner-of (MRPNode-4 / copy-01 :ARG1 (MRPNode-5 / value :mod (MRPNode-6 / know-02 :mod (MRPNode-7 / also) :ARG2 (MRPNode-8 / weight)) :mod (MRPNode-9 / this)))))

# ::id 224
# ::snt If a term exists in a document, its value in the vector is not equal to zero.
# ::tok If a term exists in a document , its value in the vector is not equal to zero .
# ::alignments 2-3|0.3.0 3-4|0.3 6-7|0.3.1 9-10|0.1+0.1.0 12-13|0.1.0.0 14-15|0.0 15-16|0 17-18|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:40.359548 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	equal-01	15-16
# ::node	0.0	-	14-15
# ::node	0.1	thing	9-10
# ::node	0.1.0	value-01	9-10
# ::node	0.1.0.0	vector	12-13
# ::node	0.2	zero	17-18
# ::node	0.3	exist-01	3-4
# ::node	0.3.0	term	2-3
# ::node	0.3.1	document	6-7
# ::root	0	equal-01
# ::edge	equal-01	ARG1	thing	0	0.1
# ::edge	equal-01	ARG2	zero	0	0.2
# ::edge	equal-01	condition	exist-01	0	0.3
# ::edge	equal-01	polarity	-	0	0.0
# ::edge	exist-01	ARG1	term	0.3	0.3.0
# ::edge	exist-01	location	document	0.3	0.3.1
# ::edge	thing	ARG2-of	value-01	0.1	0.1.0
# ::edge	value-01	location	vector	0.1.0	0.1.0.0
(MRPNode-0 / equal-01 :polarity - :ARG1 (MRPNode-1 / thing :ARG2-of (MRPNode-2 / value-01 :location (MRPNode-3 / vector))) :ARG2 (MRPNode-4 / zero) :condition (MRPNode-5 / exist-01 :ARG1 (MRPNode-6 / term) :location (MRPNode-7 / document)))

# ::id 225
# ::snt A hyperlink to a page counts as a vote of support.
# ::tok A hyperlink to a page counts as a vote of support .
# ::alignments 1-2|0.0 4-5|0.0.0 5-6|0 8-9|0.1 10-11|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.363824 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	count-04	5-6
# ::node	0.0	hyperlink	1-2
# ::node	0.0.0	page	4-5
# ::node	0.1	vote-01	8-9
# ::node	0.1.0	support-01	10-11
# ::root	0	count-04
# ::edge	count-04	ARG1	hyperlink	0	0.0
# ::edge	count-04	ARG2	vote-01	0	0.1
# ::edge	hyperlink	destination	page	0.0	0.0.0
# ::edge	vote-01	ARG1	support-01	0.1	0.1.0
(MRPNode-0 / count-04 :ARG1 (MRPNode-1 / hyperlink :destination (MRPNode-2 / page)) :ARG2 (MRPNode-3 / vote-01 :ARG1 (MRPNode-4 / support-01)))

# ::id 226
# ::snt For instance, a finalized schedule of events at an exhibition is sometimes called a program.
# ::tok For instance , a finalized schedule of events at an exhibition is sometimes called a program .
# ::alignments 4-5|0.0.2.1 5-6|0.0.2 7-8|0.0.2.0 10-11|0.0.2.0.0 12-13|0.0.1 13-14|0.0 15-16|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.373534 ::parser eager_oracle ::smatch 0.8666666666666666 ::n_actions 40
# ::node	0	exemplify-01	
# ::node	0.0	call-01	13-14
# ::node	0.0.0	program	15-16
# ::node	0.0.1	sometimes	12-13
# ::node	0.0.2	schedule-01	5-6
# ::node	0.0.2.0	event	7-8
# ::node	0.0.2.0.0	exhibit-01	10-11
# ::node	0.0.2.1	finalize-01	4-5
# ::root	0	exemplify-01
# ::edge	call-01	ARG1	program	0.0	0.0.0
# ::edge	call-01	ARG1	schedule-01	0.0	0.0.2
# ::edge	call-01	frequency	sometimes	0.0	0.0.1
# ::edge	event	location	exhibit-01	0.0.2.0	0.0.2.0.0
# ::edge	exemplify-01	ARG0	call-01	0	0.0
# ::edge	schedule-01	ARG1	event	0.0.2	0.0.2.0
# ::edge	schedule-01	ARG1-of	finalize-01	0.0.2	0.0.2.1
(MRPNode-0 / exemplify-01 :ARG0 (MRPNode-1 / call-01 :ARG1 (MRPNode-2 / program) :frequency (MRPNode-3 / sometimes) :ARG1 (MRPNode-4 / schedule-01 :ARG1 (MRPNode-5 / event :location (MRPNode-6 / exhibit-01)) :ARG1-of (MRPNode-7 / finalize-01))))

# ::id 227
# ::snt Nevertheless, the patent is assigned to the University of Stanford and not to Google.
# ::tok Nevertheless , the patent is assigned to the University of Stanford and not to Google .
# ::alignments 3-4|0.0.0.1 5-6|0.0.1 8-11|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.1+0.0.0.0.0.2 11-12|0.0 12-13|0.0.1.0 14-15|0.0.1.1+0.0.1.1.0+0.0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.384684 ::parser eager_oracle ::smatch 0.8181818181818181 ::n_actions 38
# ::node	0	have-concession-91	
# ::node	0.0	and	11-12
# ::node	0.0.0	assign-01	
# ::node	0.0.0.0	university	8-11
# ::node	0.0.0.0.0	name	8-11
# ::node	0.0.0.0.0.0	university	8-11
# ::node	0.0.0.0.0.1	of	8-11
# ::node	0.0.0.0.0.2	stanford	8-11
# ::node	0.0.0.1	patent-01	3-4
# ::node	0.0.1	assign-01	5-6
# ::node	0.0.1.0	-	12-13
# ::node	0.0.1.1	company	14-15
# ::node	0.0.1.1.0	name	14-15
# ::node	0.0.1.1.0.0	google	14-15
# ::root	0	have-concession-91
# ::edge	and	op1	assign-01	0.0	0.0.0
# ::edge	and	op2	assign-01	0.0	0.0.1
# ::edge	assign-01	ARG1	patent-01	0.0.0	0.0.0.1
# ::edge	assign-01	ARG1	patent-01	0.0.1	0.0.0.1
# ::edge	assign-01	ARG1	university	0.0.0	0.0.0.0
# ::edge	assign-01	ARG1	university	0.0.1	0.0.0.0
# ::edge	assign-01	ARG2	company	0.0.1	0.0.1.1
# ::edge	assign-01	polarity	-	0.0.1	0.0.1.0
# ::edge	company	name	name	0.0.1.1	0.0.1.1.0
# ::edge	have-concession-91	ARG1	and	0	0.0
# ::edge	name	op1	google	0.0.1.1.0	0.0.1.1.0.0
# ::edge	name	op1	university	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op2	of	0.0.0.0.0	0.0.0.0.0.1
# ::edge	name	op3	stanford	0.0.0.0.0	0.0.0.0.0.2
# ::edge	university	name	name	0.0.0.0	0.0.0.0.0
(MRPNode-0 / have-concession-91 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / assign-01 :ARG1 (MRPNode-3 / university :name (MRPNode-4 / name :op1 university :op2 of :op3 stanford)) :ARG1 (MRPNode-5 / patent-01)) :op2 (MRPNode-6 / assign-01 :polarity - :ARG1 MRPNode-3 :ARG1 MRPNode-5 :ARG2 (MRPNode-7 / company :name (MRPNode-8 / name :op1 google)))))

# ::id 228
# ::snt The definition of term depends on the application.
# ::tok The definition of term depends on the application .
# ::alignments 1-2|0.1 3-4|0.1.0 4-5|0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.388719 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	depend-01	4-5
# ::node	0.0	apply-02	7-8
# ::node	0.1	define-01	1-2
# ::node	0.1.0	term	3-4
# ::root	0	depend-01
# ::edge	define-01	ARG1	term	0.1	0.1.0
# ::edge	depend-01	ARG0	define-01	0	0.1
# ::edge	depend-01	ARG1	apply-02	0	0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / apply-02) :ARG0 (MRPNode-2 / define-01 :ARG1 (MRPNode-3 / term)))

# ::id 229
# ::snt Inheritance is a method of forming new classes using predefined classes.
# ::tok Inheritance is a method of forming new classes using predefined classes .
# ::alignments 0-1|0.1 3-4|0 5-6|0.0 6-7|0.0.0.0 7-8|0.0.0 8-9|0.0.1 10-11|0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.400915 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 35
# ::node	0	method	3-4
# ::node	0.0	form-01	5-6
# ::node	0.0.0	class	7-8
# ::node	0.0.0.0	new-01	6-7
# ::node	0.0.1	use-01	8-9
# ::node	0.0.1.0	class	10-11
# ::node	0.0.1.0.0	define-01	
# ::node	0.1	inherit-01	0-1
# ::root	0	method
# ::edge	class	ARG1-of	define-01	0.0.1.0	0.0.1.0.0
# ::edge	class	ARG1-of	new-01	0.0.0	0.0.0.0
# ::edge	form-01	ARG1	class	0.0	0.0.0
# ::edge	form-01	manner	use-01	0.0	0.0.1
# ::edge	method	domain	form-01	0	0.0
# ::edge	method	domain	inherit-01	0	0.1
# ::edge	use-01	ARG1	class	0.0.1	0.0.1.0
(MRPNode-0 / method :domain (MRPNode-1 / form-01 :ARG1 (MRPNode-2 / class :ARG1-of (MRPNode-3 / new-01)) :manner (MRPNode-4 / use-01 :ARG1 (MRPNode-5 / class :ARG1-of (MRPNode-6 / define-01)))) :domain (MRPNode-7 / inherit-01))

# ::id 230
# ::snt Thus, the program is the best plan for action that is produced.
# ::tok Thus , the program is the best plan for action that is produced .
# ::alignments 3-4|0.0.1 6-7|0.0.2.0+0.0.2.1 7-8|0.0 8-9|0 9-10|0.0.0 12-13|0.0.3 ::annotator aligner3.py ::date 2021-03-11 23:00:40.410993 ::parser eager_oracle ::smatch 0.7333333333333334 ::n_actions 37
# ::node	0	cause-01	8-9
# ::node	0.0	plan-01	7-8
# ::node	0.0.0	act-02	9-10
# ::node	0.0.1	program	3-4
# ::node	0.0.2	have-degree-91	
# ::node	0.0.2.0	most	6-7
# ::node	0.0.2.1	good-02	6-7
# ::node	0.0.3	produce-01	12-13
# ::root	0	cause-01
# ::edge	cause-01	ARG1	plan-01	0	0.0
# ::edge	have-degree-91	ARG2	good-02	0.0.2	0.0.2.1
# ::edge	have-degree-91	ARG3	most	0.0.2	0.0.2.0
# ::edge	plan-01	ARG1	act-02	0.0	0.0.0
# ::edge	plan-01	ARG1-of	good-02	0.0	0.0.2.1
# ::edge	plan-01	ARG1-of	have-degree-91	0.0	0.0.2
# ::edge	plan-01	ARG1-of	produce-01	0.0	0.0.3
# ::edge	plan-01	ARG1-of	program	0.0	0.0.1
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / plan-01 :ARG1 (MRPNode-2 / act-02) :ARG1-of (MRPNode-3 / program) :ARG1-of (MRPNode-4 / have-degree-91 :ARG3 (MRPNode-5 / most) :ARG2 (MRPNode-6 / good-02)) :ARG1-of MRPNode-6 :ARG1-of (MRPNode-7 / produce-01)))

# ::id 231
# ::snt "Therefore, the ""program"" is the optimal plan for action that is produced."
# ::tok " Therefore , the " " program " " is the optimal plan for action that is produced . "
# ::alignments 6-7|0.0.1 11-12|0.0.2 12-13|0.0 13-14|0 14-15|0.0.0 17-18|0.0.3 ::annotator aligner3.py ::date 2021-03-11 23:00:40.420124 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 41
# ::node	0	cause-01	13-14
# ::node	0.0	plan-01	12-13
# ::node	0.0.0	act-02	14-15
# ::node	0.0.1	program	6-7
# ::node	0.0.2	optimal	11-12
# ::node	0.0.3	produce-01	17-18
# ::root	0	cause-01
# ::edge	cause-01	ARG1	plan-01	0	0.0
# ::edge	plan-01	ARG1	act-02	0.0	0.0.0
# ::edge	plan-01	ARG1-of	produce-01	0.0	0.0.3
# ::edge	plan-01	mod	optimal	0.0	0.0.2
# ::edge	plan-01	mod	program	0.0	0.0.1
# ::edge	produce-01	ARG1	act-02	0.0.3	0.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / plan-01 :ARG1 (MRPNode-2 / act-02) :mod (MRPNode-3 / program) :mod (MRPNode-4 / optimal) :ARG1-of (MRPNode-5 / produce-01 :ARG1 MRPNode-2)))

# ::id 232
# ::snt If a term appears in the document, the terms value in the vector is non-zero.
# ::tok If a term appears in the document , the terms value in the vector is non - zero .
# ::alignments 2-3|0.1.0 3-4|0.1 6-7|0.1.1 10-11|0.0.1 13-14|0.0.1.0 15-16|0.0.0 17-18|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.431985 ::parser eager_oracle ::smatch 0.7857142857142856 ::n_actions 41
# ::node	0	have-condition-91	
# ::node	0.0	zero	17-18
# ::node	0.0.0	-	15-16
# ::node	0.0.1	value	10-11
# ::node	0.0.1.0	vector	13-14
# ::node	0.1	appear-01	3-4
# ::node	0.1.0	term	2-3
# ::node	0.1.1	document	6-7
# ::root	0	have-condition-91
# ::edge	appear-01	ARG1	term	0.1	0.1.0
# ::edge	appear-01	location	document	0.1	0.1.1
# ::edge	have-condition-91	ARG1	zero	0	0.0
# ::edge	have-condition-91	ARG2	appear-01	0	0.1
# ::edge	value	location	vector	0.0.1	0.0.1.0
# ::edge	zero	domain	value	0.0	0.0.1
# ::edge	zero	polarity	-	0.0	0.0.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / zero :polarity - :domain (MRPNode-2 / value :location (MRPNode-3 / vector))) :ARG2 (MRPNode-4 / appear-01 :ARG1 (MRPNode-5 / term) :location (MRPNode-6 / document)))

# ::id 233
# ::snt The vector space model has some limitations: 1.
# ::tok The vector space model has some limitations : 1 .
# ::alignments 1-2|0.1.0.0 2-3|0.1.0 3-4|0.1 6-7|0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.435662 ::parser eager_oracle ::smatch 0.8421052631578948 ::n_actions 27
# ::node	0	limit-01	6-7
# ::node	0.0	1	8-9
# ::node	0.1	model	3-4
# ::node	0.1.0	space	2-3
# ::node	0.1.0.0	vector	1-2
# ::root	0	limit-01
# ::edge	limit-01	ARG1	model	0	0.1
# ::edge	limit-01	li	1	0	0.0
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / limit-01 :li 1 :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / space :mod (MRPNode-3 / vector))))

# ::id 234
# ::snt The vector space model has the following limitations: 1.
# ::tok The vector space model has the following limitations : 1 .
# ::alignments 1-2|0.1.0.0 2-3|0.1.0 3-4|0.1 6-7|0.2 7-8|0 9-10|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.440841 ::parser eager_oracle ::smatch 0.8695652173913043 ::n_actions 31
# ::node	0	limit-01	7-8
# ::node	0.0	1	9-10
# ::node	0.1	model	3-4
# ::node	0.1.0	space	2-3
# ::node	0.1.0.0	vector	1-2
# ::node	0.2	follow-01	6-7
# ::root	0	limit-01
# ::edge	limit-01	ARG1	model	0	0.1
# ::edge	limit-01	ARG1-of	follow-01	0	0.2
# ::edge	limit-01	li	1	0	0.0
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / limit-01 :li 1 :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG1-of (MRPNode-4 / follow-01))

# ::id 235
# ::snt Typically terms are single words, keywords, or longer phrases.
# ::tok Typically terms are single words , keywords , or longer phrases .
# ::alignments 0-1|0.0.0 1-2|0.3 3-4|0.0.1 4-5|0.0 6-7|0.1 8-9|0 9-10|0.2.0.1 10-11|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:40.454522 ::parser eager_oracle ::smatch 0.8648648648648648 ::n_actions 39
# ::node	0	or	8-9
# ::node	0.0	word-01	4-5
# ::node	0.0.0	typical-02	0-1
# ::node	0.0.1	single-02	3-4
# ::node	0.1	keyword	6-7
# ::node	0.2	phrase	10-11
# ::node	0.2.0	have-degree-91	
# ::node	0.2.0.0	more	
# ::node	0.2.0.1	long-03	9-10
# ::node	0.3	term	1-2
# ::root	0	or
# ::edge	have-degree-91	ARG2	long-03	0.2.0	0.2.0.1
# ::edge	have-degree-91	ARG3	more	0.2.0	0.2.0.0
# ::edge	or	domain	term	0	0.3
# ::edge	or	op1	word-01	0	0.0
# ::edge	or	op2	keyword	0	0.1
# ::edge	or	op3	phrase	0	0.2
# ::edge	phrase	ARG1-of	have-degree-91	0.2	0.2.0
# ::edge	phrase	ARG1-of	long-03	0.2	0.2.0.1
# ::edge	word-01	ARG1-of	single-02	0.0	0.0.1
# ::edge	word-01	ARG1-of	typical-02	0.0	0.0.0
(MRPNode-0 / or :op1 (MRPNode-1 / word-01 :ARG1-of (MRPNode-2 / typical-02) :ARG1-of (MRPNode-3 / single-02)) :op2 (MRPNode-4 / keyword) :op3 (MRPNode-5 / phrase :ARG1-of (MRPNode-6 / have-degree-91 :ARG3 (MRPNode-7 / more) :ARG2 (MRPNode-8 / long-03)) :ARG1-of MRPNode-8) :domain (MRPNode-9 / term))

# ::id 236
# ::snt It does not take into account any information about B and therefore is considered “prior”.
# ::tok It does not take into account any information about B and therefore is considered " prior " .
# ::alignments 0-1|0.0.0 2-3|0.1.0 3-4|0.1 6-7|0.1.1.0 7-8|0.1.1 9-10|0.1.1.1+0.1.1.1.0+0.1.1.1.0.0+0.1.1.1.0.0.0 13-14|0.0 15-16|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.467144 ::parser eager_oracle ::smatch 0.8571428571428572 ::n_actions 47
# ::node	0	cause-01	
# ::node	0.0	consider-02	13-14
# ::node	0.0.0	it	0-1
# ::node	0.0.1	prior	15-16
# ::node	0.1	take-into-account-04	3-4
# ::node	0.1.0	-	2-3
# ::node	0.1.1	information	7-8
# ::node	0.1.1.0	any	6-7
# ::node	0.1.1.1	person	9-10
# ::node	0.1.1.1.0	variable	9-10
# ::node	0.1.1.1.0.0	name	9-10
# ::node	0.1.1.1.0.0.0	b	9-10
# ::root	0	cause-01
# ::edge	cause-01	ARG0	take-into-account-04	0	0.1
# ::edge	cause-01	ARG1	consider-02	0	0.0
# ::edge	consider-02	ARG1	it	0.0	0.0.0
# ::edge	consider-02	ARG2	prior	0.0	0.0.1
# ::edge	information	topic	any	0.1.1	0.1.1.0
# ::edge	information	topic	person	0.1.1	0.1.1.1
# ::edge	name	op1	b	0.1.1.1.0.0	0.1.1.1.0.0.0
# ::edge	person	mod	variable	0.1.1.1	0.1.1.1.0
# ::edge	take-into-account-04	ARG1	information	0.1	0.1.1
# ::edge	take-into-account-04	polarity	-	0.1	0.1.0
# ::edge	variable	name	name	0.1.1.1.0	0.1.1.1.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / consider-02 :ARG1 (MRPNode-2 / it) :ARG2 (MRPNode-3 / prior)) :ARG0 (MRPNode-4 / take-into-account-04 :polarity - :ARG1 (MRPNode-5 / information :topic (MRPNode-6 / any) :topic (MRPNode-7 / person :mod (MRPNode-8 / variable :name (MRPNode-9 / name :op1 b))))))

# ::id 237
# ::snt A document is represented as a vector and each dimension corresponds to a separate term.
# ::tok A document is represented as a vector and each dimension corresponds to a separate term .
# ::alignments 1-2|0.0.0 3-4|0.0 6-7|0.0.1 7-8|0 8-9|0.1.0.0 9-10|0.1.0 10-11|0.1 13-14|0.1.1.0 14-15|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.477824 ::parser eager_oracle ::smatch 1.0 ::n_actions 45
# ::node	0	and	7-8
# ::node	0.0	represent-01	3-4
# ::node	0.0.0	document	1-2
# ::node	0.0.1	vector	6-7
# ::node	0.1	correspond-02	10-11
# ::node	0.1.0	dimension	9-10
# ::node	0.1.0.0	each	8-9
# ::node	0.1.1	term	14-15
# ::node	0.1.1.0	separate-02	13-14
# ::root	0	and
# ::edge	and	op1	represent-01	0	0.0
# ::edge	and	op2	correspond-02	0	0.1
# ::edge	correspond-02	ARG1	dimension	0.1	0.1.0
# ::edge	correspond-02	ARG2	term	0.1	0.1.1
# ::edge	dimension	mod	each	0.1.0	0.1.0.0
# ::edge	represent-01	ARG1	document	0.0	0.0.0
# ::edge	represent-01	ARG2	vector	0.0	0.0.1
# ::edge	term	ARG1-of	separate-02	0.1.1	0.1.1.0
(MRPNode-0 / and :op1 (MRPNode-1 / represent-01 :ARG1 (MRPNode-2 / document) :ARG2 (MRPNode-3 / vector)) :op2 (MRPNode-4 / correspond-02 :ARG1 (MRPNode-5 / dimension :mod (MRPNode-6 / each)) :ARG2 (MRPNode-7 / term :ARG1-of (MRPNode-8 / separate-02))))

# ::id 238
# ::snt Since it is a formal theorem, Bayes' theorem holds in all popular interpretations of probability.
# ::tok Since it is a formal theorem , Bayes ' theorem holds in all popular interpretations of probability .
# ::alignments 0-1|0 4-5|0.1.1 5-6|0.1 7-8|0.1.0+0.1.0.0+0.1.0.0.0 10-11|0.0 12-13|0.0.0.0 13-14|0.0.0.1 14-15|0.0.0 16-17|0.0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:40.495750 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	cause-01	0-1
# ::node	0.0	hold-01	10-11
# ::node	0.0.0	interpret-01	14-15
# ::node	0.0.0.0	all	12-13
# ::node	0.0.0.1	popular-02	13-14
# ::node	0.0.0.2	probability	16-17
# ::node	0.1	theorem	5-6
# ::node	0.1.0	person	7-8
# ::node	0.1.0.0	name	7-8
# ::node	0.1.0.0.0	bayes	7-8
# ::node	0.1.1	formal	4-5
# ::root	0	cause-01
# ::edge	cause-01	ARG0	theorem	0	0.1
# ::edge	cause-01	ARG1	hold-01	0	0.0
# ::edge	hold-01	location	interpret-01	0.0	0.0.0
# ::edge	interpret-01	ARG1	all	0.0.0	0.0.0.0
# ::edge	interpret-01	ARG1	probability	0.0.0	0.0.0.2
# ::edge	interpret-01	ARG1-of	popular-02	0.0.0	0.0.0.1
# ::edge	name	op1	bayes	0.1.0.0	0.1.0.0.0
# ::edge	person	name	name	0.1.0	0.1.0.0
# ::edge	theorem	mod	formal	0.1	0.1.1
# ::edge	theorem	mod	person	0.1	0.1.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / hold-01 :location (MRPNode-2 / interpret-01 :ARG1 (MRPNode-3 / all) :ARG1-of (MRPNode-4 / popular-02) :ARG1 (MRPNode-5 / probability))) :ARG0 (MRPNode-6 / theorem :mod (MRPNode-7 / person :name (MRPNode-8 / name :op1 bayes)) :mod (MRPNode-9 / formal)))

# ::id 239
# ::snt The methodology takes much less time rather than naive methods.
# ::tok The methodology takes much less time rather than naive methods .
# ::alignments 1-2|0.1 2-3|0 3-4|0.0.1.0.0 4-5|0.0.1.0 5-6|0.0 8-9|0.0.0.0.0 9-10|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.534196 ::parser eager_oracle ::smatch 0.75 ::n_actions 32
# ::node	0	take-10	2-3
# ::node	0.0	time	5-6
# ::node	0.0.0	instead-of-91	
# ::node	0.0.0.0	method	9-10
# ::node	0.0.0.0.0	naive	8-9
# ::node	0.0.1	have-quant-91	
# ::node	0.0.1.0	less	4-5
# ::node	0.0.1.0.0	much	3-4
# ::node	0.1	methodology	1-2
# ::root	0	take-10
# ::edge	have-quant-91	ARG3	less	0.0.1	0.0.1.0
# ::edge	instead-of-91	ARG2	method	0.0.0	0.0.0.0
# ::edge	less	quant	much	0.0.1.0	0.0.1.0.0
# ::edge	method	mod	naive	0.0.0.0	0.0.0.0.0
# ::edge	take-10	ARG0	methodology	0	0.1
# ::edge	take-10	ARG1	time	0	0.0
# ::edge	time	ARG1-of	have-quant-91	0.0	0.0.1
# ::edge	time	ARG1-of	instead-of-91	0.0	0.0.0
(MRPNode-0 / take-10 :ARG1 (MRPNode-1 / time :ARG1-of (MRPNode-2 / instead-of-91 :ARG2 (MRPNode-3 / method :mod (MRPNode-4 / naive))) :ARG1-of (MRPNode-5 / have-quant-91 :ARG3 (MRPNode-6 / less :quant (MRPNode-7 / much)))) :ARG0 (MRPNode-8 / methodology))

# ::id 240
# ::snt Typically terms are keywords, single words or longer phrases.
# ::tok Typically terms are keywords , single words or longer phrases .
# ::alignments 0-1|0.3 1-2|0.0.0 3-4|0.0 5-6|0.1.0 6-7|0.1 7-8|0 8-9|0.2.0 9-10|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:40.548300 ::parser eager_oracle ::smatch 0.8648648648648648 ::n_actions 37
# ::node	0	or	7-8
# ::node	0.0	keyword	3-4
# ::node	0.0.0	term	1-2
# ::node	0.1	word-01	6-7
# ::node	0.1.0	single-02	5-6
# ::node	0.2	phrase-01	9-10
# ::node	0.2.0	long-03	8-9
# ::node	0.2.1	have-degree-91	
# ::node	0.2.1.0	more	
# ::node	0.3	typical-02	0-1
# ::root	0	or
# ::edge	have-degree-91	ARG2	long-03	0.2.1	0.2.0
# ::edge	have-degree-91	ARG3	more	0.2.1	0.2.1.0
# ::edge	keyword	domain	term	0.0	0.0.0
# ::edge	or	domain	typical-02	0	0.3
# ::edge	or	op1	keyword	0	0.0
# ::edge	or	op2	word-01	0	0.1
# ::edge	or	op3	phrase-01	0	0.2
# ::edge	phrase-01	ARG1-of	have-degree-91	0.2	0.2.1
# ::edge	phrase-01	ARG1-of	long-03	0.2	0.2.0
# ::edge	word-01	ARG1-of	single-02	0.1	0.1.0
(MRPNode-0 / or :op1 (MRPNode-1 / keyword :domain (MRPNode-2 / term)) :op2 (MRPNode-3 / word-01 :ARG1-of (MRPNode-4 / single-02)) :op3 (MRPNode-5 / phrase-01 :ARG1-of (MRPNode-6 / long-03) :ARG1-of (MRPNode-7 / have-degree-91 :ARG2 MRPNode-6 :ARG3 (MRPNode-8 / more))) :domain (MRPNode-9 / typical-02))

# ::id 241
# ::snt Construct an optimal solution from computed values.
# ::tok Construct an optimal solution from computed values .
# ::alignments 0-1|0 2-3|0.0.0 3-4|0.0+0.0.1 5-6|0.2.0 6-7|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:40.552768 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 29
# ::node	0	construct-01	0-1
# ::node	0.0	thing	3-4
# ::node	0.0.0	optimal	2-3
# ::node	0.0.1	solve-01	3-4
# ::node	0.1	you	
# ::node	0.2	value	6-7
# ::node	0.2.0	compile-01	5-6
# ::root	0	construct-01
# ::edge	construct-01	ARG1	thing	0	0.0
# ::edge	construct-01	ARG2	value	0	0.2
# ::edge	construct-01	ARG2	you	0	0.1
# ::edge	thing	ARG2-of	solve-01	0.0	0.0.1
# ::edge	thing	mod	optimal	0.0	0.0.0
# ::edge	value	ARG1-of	compile-01	0.2	0.2.0
(MRPNode-0 / construct-01 :ARG1 (MRPNode-1 / thing :mod (MRPNode-2 / optimal) :ARG2-of (MRPNode-3 / solve-01)) :ARG2 (MRPNode-4 / you) :ARG2 (MRPNode-5 / value :ARG1-of (MRPNode-6 / compile-01)))

# ::id 242
# ::snt Several different ways of computing these values, additionally known as (term) weights, have been developed.
# ::tok Several different ways of computing these values , additionally known as ( term ) weights , have been developed .
# ::alignments 0-1|0.0.0 1-2|0.0.1 2-3|0.0 5-6|0.0.2.0.0 6-7|0.0.2.0 8-9|0.0.2.0.1.1 9-10|0.0.2.0.1 14-15|0.0.2.0.1.0 18-19|0 ::annotator aligner3.py ::date 2021-03-11 23:00:40.580074 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 48
# ::node	0	develop-02	18-19
# ::node	0.0	way	2-3
# ::node	0.0.0	several	0-1
# ::node	0.0.1	differ-02	1-2
# ::node	0.0.2	copy-01	
# ::node	0.0.2.0	value	6-7
# ::node	0.0.2.0.0	this	5-6
# ::node	0.0.2.0.1	know-02	9-10
# ::node	0.0.2.0.1.0	weight	14-15
# ::node	0.0.2.0.1.1	additional	8-9
# ::root	0	develop-02
# ::edge	copy-01	ARG1	value	0.0.2	0.0.2.0
# ::edge	develop-02	ARG1	way	0	0.0
# ::edge	know-02	mod	additional	0.0.2.0.1	0.0.2.0.1.1
# ::edge	know-02	mod	weight	0.0.2.0.1	0.0.2.0.1.0
# ::edge	value	ARG1-of	know-02	0.0.2.0	0.0.2.0.1
# ::edge	value	mod	this	0.0.2.0	0.0.2.0.0
# ::edge	way	ARG1-of	differ-02	0.0	0.0.1
# ::edge	way	manner-of	copy-01	0.0	0.0.2
# ::edge	way	quant	several	0.0	0.0.0
(MRPNode-0 / develop-02 :ARG1 (MRPNode-1 / way :quant (MRPNode-2 / several) :ARG1-of (MRPNode-3 / differ-02) :manner-of (MRPNode-4 / copy-01 :ARG1 (MRPNode-5 / value :mod (MRPNode-6 / this) :ARG1-of (MRPNode-7 / know-02 :mod (MRPNode-8 / weight) :mod (MRPNode-9 / additional))))))

# ::id 243
# ::snt In general, dynamic programming is used on optimisation problems, where the most efficient solution is needed.
# ::tok In general , dynamic programming is used on optimisation problems , where the most efficient solution is needed .
# ::alignments 1-2|0.1 3-4|0.0.0 4-5|0.0 6-7|0 9-10|0.2 13-14|0.2.1.0.1.0 14-15|0.2.1.0+0.2.1.0.0 15-16|0.2.1.0.2 17-18|0.2.1 ::annotator aligner3.py ::date 2021-03-11 23:00:40.597254 ::parser eager_oracle ::smatch 0.8372093023255813 ::n_actions 51
# ::node	0	use-01	6-7
# ::node	0.0	program-01	4-5
# ::node	0.0.0	dynamic	3-4
# ::node	0.1	general-02	1-2
# ::node	0.2	problem	9-10
# ::node	0.2.0	exist-01	
# ::node	0.2.1	need-01	17-18
# ::node	0.2.1.0	thing	14-15
# ::node	0.2.1.0.0	efficient-01	14-15
# ::node	0.2.1.0.1	have-degree-91	
# ::node	0.2.1.0.1.0	most	13-14
# ::node	0.2.1.0.2	solve-01	15-16
# ::root	0	use-01
# ::edge	have-degree-91	ARG2	efficient-01	0.2.1.0.1	0.2.1.0.0
# ::edge	have-degree-91	ARG3	most	0.2.1.0.1	0.2.1.0.1.0
# ::edge	need-01	ARG1	thing	0.2.1	0.2.1.0
# ::edge	problem	location-of	need-01	0.2	0.2.1
# ::edge	problem	topic	exist-01	0.2	0.2.0
# ::edge	program-01	mod	dynamic	0.0	0.0.0
# ::edge	thing	ARG1-of	efficient-01	0.2.1.0	0.2.1.0.0
# ::edge	thing	ARG1-of	have-degree-91	0.2.1.0	0.2.1.0.1
# ::edge	thing	ARG2-of	solve-01	0.2.1.0	0.2.1.0.2
# ::edge	use-01	ARG1	program-01	0	0.0
# ::edge	use-01	ARG1-of	general-02	0	0.1
# ::edge	use-01	ARG2	problem	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / program-01 :mod (MRPNode-2 / dynamic)) :ARG1-of (MRPNode-3 / general-02) :ARG2 (MRPNode-4 / problem :topic (MRPNode-5 / exist-01) :location-of (MRPNode-6 / need-01 :ARG1 (MRPNode-7 / thing :ARG1-of (MRPNode-8 / efficient-01) :ARG1-of (MRPNode-9 / have-degree-91 :ARG2 MRPNode-8 :ARG3 (MRPNode-10 / most)) :ARG2-of (MRPNode-11 / solve-01)))))

# ::id 244
# ::snt One of the best known schemes is tf-idf weighting (see the example below).
# ::tok One of the best known schemes is tf - idf weighting ( see the example below ) .
# ::alignments 0-1|0.0.0 1-2|0.0+0.0.0.0+0.0.0.0.0.0.1 3-4|0.0.0.0.0.0.0+0.0.0.0.0.0.1.0 4-5|0.0.0.0.0.0 5-6|0.0.0.0.0+0.0.1 12-13|0.1+0.1.0+0.1.2 14-15|0.1.1 15-16|0.1.1.0 17-18|0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.227260 ::parser eager_oracle ::smatch 0.8923076923076922 ::n_actions 75
# ::node	0	multi-sentence	17-18
# ::node	0.0	have-mod-91	1-2
# ::node	0.0.0	thing	0-1
# ::node	0.0.0.0	include-91	1-2
# ::node	0.0.0.0.0	scheme	5-6
# ::node	0.0.0.0.0.0	know-02	4-5
# ::node	0.0.0.0.0.0.0	good-02	3-4
# ::node	0.0.0.0.0.0.1	have-degree-91	1-2
# ::node	0.0.0.0.0.0.1.0	most	3-4
# ::node	0.0.1	scheme	5-6
# ::node	0.0.1.0	name	7-11
# ::node	0.0.1.0.0	tf	7-11
# ::node	0.0.1.0.1	weighting	7-11
# ::node	0.1	see-01	12-13
# ::node	0.1.0	imperative	12-13
# ::node	0.1.1	exemplify-01	14-15
# ::node	0.1.1.0	below	15-16
# ::node	0.1.2	you	12-13
# ::root	0	multi-sentence
# ::edge	exemplify-01	ARG0	below	0.1.1	0.1.1.0
# ::edge	have-degree-91	ARG2	good-02	0.0.0.0.0.0.1	0.0.0.0.0.0.0
# ::edge	have-degree-91	ARG3	most	0.0.0.0.0.0.1	0.0.0.0.0.0.1.0
# ::edge	have-mod-91	ARG1	scheme	0.0	0.0.1
# ::edge	have-mod-91	ARG1	thing	0.0	0.0.0
# ::edge	include-91	ARG2	scheme	0.0.0.0	0.0.0.0.0
# ::edge	know-02	ARG1-of	good-02	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	know-02	ARG1-of	have-degree-91	0.0.0.0.0.0	0.0.0.0.0.0.1
# ::edge	multi-sentence	snt1	have-mod-91	0	0.0
# ::edge	multi-sentence	snt2	see-01	0	0.1
# ::edge	name	op1	tf	0.0.1.0	0.0.1.0.0
# ::edge	name	op2	weighting	0.0.1.0	0.0.1.0.1
# ::edge	scheme	ARG1-of	know-02	0.0.0.0.0	0.0.0.0.0.0
# ::edge	scheme	name	name	0.0.1	0.0.1.0
# ::edge	see-01	ARG0	you	0.1	0.1.2
# ::edge	see-01	ARG1	exemplify-01	0.1	0.1.1
# ::edge	see-01	mode	imperative	0.1	0.1.0
# ::edge	thing	ARG1-of	include-91	0.0.0	0.0.0.0
(MRPNode-0 / multi-sentence :snt1 (MRPNode-1 / have-mod-91 :ARG1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / include-91 :ARG2 (MRPNode-4 / scheme :ARG1-of (MRPNode-5 / know-02 :ARG1-of (MRPNode-6 / good-02) :ARG1-of (MRPNode-7 / have-degree-91 :ARG2 MRPNode-6 :ARG3 (MRPNode-8 / most)))))) :ARG1 (MRPNode-9 / scheme :name (MRPNode-10 / name :op1 tf :op2 weighting))) :snt2 (MRPNode-11 / see-01 :mode imperative :ARG1 (MRPNode-12 / exemplify-01 :ARG0 (MRPNode-13 / below)) :ARG0 (MRPNode-14 / you)))

# ::id 245
# ::snt For instance, a events schedule at an exhibition is sometimes called a program.
# ::tok For instance , a events schedule at an exhibition is sometimes called a program .
# ::alignments 4-5|0.0.0.0 5-6|0.0.0 8-9|0.0.0.0.0 10-11|0.0.2 11-12|0.0 13-14|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:41.233809 ::parser eager_oracle ::smatch 0.8461538461538461 ::n_actions 36
# ::node	0	exemplify-01	
# ::node	0.0	call-01	11-12
# ::node	0.0.0	schedule-01	5-6
# ::node	0.0.0.0	event	4-5
# ::node	0.0.0.0.0	exhibit-01	8-9
# ::node	0.0.1	program	13-14
# ::node	0.0.2	sometimes	10-11
# ::root	0	exemplify-01
# ::edge	call-01	ARG1	schedule-01	0.0	0.0.0
# ::edge	call-01	ARG2	program	0.0	0.0.1
# ::edge	call-01	frequency	sometimes	0.0	0.0.2
# ::edge	event	location	exhibit-01	0.0.0.0	0.0.0.0.0
# ::edge	exemplify-01	ARG0	call-01	0	0.0
# ::edge	schedule-01	ARG1	event	0.0.0	0.0.0.0
(MRPNode-0 / exemplify-01 :ARG0 (MRPNode-1 / call-01 :ARG1 (MRPNode-2 / schedule-01 :ARG1 (MRPNode-3 / event :location (MRPNode-4 / exhibit-01))) :ARG2 (MRPNode-5 / program) :frequency (MRPNode-6 / sometimes)))

# ::id 246
# ::snt Define value of optimal solution recursively.
# ::tok Define value of optimal solution recursively .
# ::alignments 0-1|0+0.0+0.2 1-2|0.1+0.1.0 3-4|0.1.0.0.0 4-5|0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.238717 ::parser eager_oracle ::smatch 0.9285714285714286 ::n_actions 33
# ::node	0	define-01	0-1
# ::node	0.0	imperative	0-1
# ::node	0.1	thing	1-2
# ::node	0.1.0	value-01	1-2
# ::node	0.1.0.0	solution	4-5
# ::node	0.1.0.0.0	optimal	3-4
# ::node	0.2	you	0-1
# ::node	0.3	arbitrary-02	
# ::root	0	define-01
# ::edge	define-01	ARG0	you	0	0.2
# ::edge	define-01	ARG1	thing	0	0.1
# ::edge	define-01	manner	arbitrary-02	0	0.3
# ::edge	define-01	mode	imperative	0	0.0
# ::edge	solution	mod	optimal	0.1.0.0	0.1.0.0.0
# ::edge	thing	ARG2-of	value-01	0.1	0.1.0
# ::edge	value-01	ARG1	solution	0.1.0	0.1.0.0
(MRPNode-0 / define-01 :mode imperative :ARG1 (MRPNode-1 / thing :ARG2-of (MRPNode-2 / value-01 :ARG1 (MRPNode-3 / solution :mod (MRPNode-4 / optimal)))) :ARG0 (MRPNode-5 / you) :manner (MRPNode-6 / arbitrary-02))

# ::id 247
# ::snt It was first used in the SMART Information Retrieval System.
# ::tok It was first used in the SMART Information Retrieval System .
# ::alignments 0-1|0.0 3-4|0 6-10|0.1+0.1.0+0.1.0.0+0.1.0.1+0.1.0.2+0.1.0.3 ::annotator aligner3.py ::date 2021-03-11 23:00:41.243844 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 22
# ::node	0	use-01	3-4
# ::node	0.0	it	0-1
# ::node	0.1	thing	6-10
# ::node	0.1.0	name	6-10
# ::node	0.1.0.0	smart	6-10
# ::node	0.1.0.1	information	6-10
# ::node	0.1.0.2	retrieval	6-10
# ::node	0.1.0.3	system	6-10
# ::node	0.2	ordinal-entity	
# ::node	0.2.0	1	
# ::root	0	use-01
# ::edge	name	op1	smart	0.1.0	0.1.0.0
# ::edge	name	op2	information	0.1.0	0.1.0.1
# ::edge	name	op3	retrieval	0.1.0	0.1.0.2
# ::edge	name	op4	system	0.1.0	0.1.0.3
# ::edge	ordinal-entity	value	1	0.2	0.2.0
# ::edge	thing	name	name	0.1	0.1.0
# ::edge	use-01	ARG1	it	0	0.0
# ::edge	use-01	ARG2	thing	0	0.1
# ::edge	use-01	ord	ordinal-entity	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / it) :ARG2 (MRPNode-2 / thing :name (MRPNode-3 / name :op1 smart :op2 information :op3 retrieval :op4 system)) :ord (MRPNode-4 / ordinal-entity :value 1))

# ::id 248
# ::snt The value of a vector is non-zero if a term occurs in the document.
# ::tok The value of a vector is non - zero if a term occurs in the document .
# ::alignments 1-2|0.0.1+0.0.1.0 2-3|0 4-5|0.0.1.0.0 6-7|0.0.0 8-9|0.0.2 11-12|0.1.0 13-14|0.1 15-16|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:41.257497 ::parser eager_oracle ::smatch 0.7878787878787878 ::n_actions 45
# ::node	0	have-condition-91	2-3
# ::node	0.0	equal-01	
# ::node	0.0.0	-	6-7
# ::node	0.0.1	thing	1-2
# ::node	0.0.1.0	value-01	1-2
# ::node	0.0.1.0.0	vector	4-5
# ::node	0.0.2	zero	8-9
# ::node	0.1	be-located-at-91	13-14
# ::node	0.1.0	term	11-12
# ::node	0.1.1	document	15-16
# ::root	0	have-condition-91
# ::edge	be-located-at-91	ARG1	term	0.1	0.1.0
# ::edge	be-located-at-91	ARG2	document	0.1	0.1.1
# ::edge	equal-01	ARG1	thing	0.0	0.0.1
# ::edge	equal-01	ARG2	zero	0.0	0.0.2
# ::edge	equal-01	polarity	-	0.0	0.0.0
# ::edge	have-condition-91	ARG1	equal-01	0	0.0
# ::edge	have-condition-91	ARG2	be-located-at-91	0	0.1
# ::edge	thing	ARG2-of	value-01	0.0.1	0.0.1.0
# ::edge	value-01	ARG1	vector	0.0.1.0	0.0.1.0.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / equal-01 :polarity - :ARG1 (MRPNode-2 / thing :ARG2-of (MRPNode-3 / value-01 :ARG1 (MRPNode-4 / vector))) :ARG2 (MRPNode-5 / zero)) :ARG2 (MRPNode-6 / be-located-at-91 :ARG1 (MRPNode-7 / term) :ARG2 (MRPNode-8 / document)))

# ::id 249
# ::snt Several different ways of computing these values, also known as (term) weights, have been developed.
# ::tok Several different ways of computing these values , also known as ( term ) weights , have been developed .
# ::alignments 0-1|0.0.0 1-2|0.0.1 2-3|0.0 5-6|0.0.2.0.1 6-7|0.0.2.0 8-9|0.0.2.0.0.0 9-10|0.0.2.0.0 14-15|0.0.2.0.0.1 18-19|0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.285629 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 48
# ::node	0	develop-02	18-19
# ::node	0.0	way	2-3
# ::node	0.0.0	several	0-1
# ::node	0.0.1	differ-02	1-2
# ::node	0.0.2	copy-01	
# ::node	0.0.2.0	value	6-7
# ::node	0.0.2.0.0	know-02	9-10
# ::node	0.0.2.0.0.0	also	8-9
# ::node	0.0.2.0.0.1	weight	14-15
# ::node	0.0.2.0.1	this	5-6
# ::root	0	develop-02
# ::edge	copy-01	ARG1	value	0.0.2	0.0.2.0
# ::edge	develop-02	ARG1	way	0	0.0
# ::edge	know-02	ARG2	weight	0.0.2.0.0	0.0.2.0.0.1
# ::edge	know-02	mod	also	0.0.2.0.0	0.0.2.0.0.0
# ::edge	value	mod	know-02	0.0.2.0	0.0.2.0.0
# ::edge	value	mod	this	0.0.2.0	0.0.2.0.1
# ::edge	way	ARG1-of	differ-02	0.0	0.0.1
# ::edge	way	manner-of	copy-01	0.0	0.0.2
# ::edge	way	quant	several	0.0	0.0.0
(MRPNode-0 / develop-02 :ARG1 (MRPNode-1 / way :quant (MRPNode-2 / several) :ARG1-of (MRPNode-3 / differ-02) :manner-of (MRPNode-4 / copy-01 :ARG1 (MRPNode-5 / value :mod (MRPNode-6 / know-02 :mod (MRPNode-7 / also) :ARG2 (MRPNode-8 / weight)) :mod (MRPNode-9 / this)))))

# ::id 250
# ::snt Several different ways of computing these values, also known as (term) weights, have been developed.
# ::tok Several different ways of computing these values , also known as ( term ) weights , have been developed .
# ::alignments 0-1|0.0.0 1-2|0.0.1 2-3|0.0 5-6|0.0.2.0.1 6-7|0.0.2.0 8-9|0.0.2.0.0.0 9-10|0.0.2.0.0 14-15|0.0.2.0.0.1 18-19|0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.313408 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 48
# ::node	0	develop-02	18-19
# ::node	0.0	way	2-3
# ::node	0.0.0	several	0-1
# ::node	0.0.1	differ-02	1-2
# ::node	0.0.2	copy-01	
# ::node	0.0.2.0	value	6-7
# ::node	0.0.2.0.0	know-02	9-10
# ::node	0.0.2.0.0.0	also	8-9
# ::node	0.0.2.0.0.1	weight	14-15
# ::node	0.0.2.0.1	this	5-6
# ::root	0	develop-02
# ::edge	copy-01	ARG1	value	0.0.2	0.0.2.0
# ::edge	develop-02	ARG1	way	0	0.0
# ::edge	know-02	ARG2	weight	0.0.2.0.0	0.0.2.0.0.1
# ::edge	know-02	mod	also	0.0.2.0.0	0.0.2.0.0.0
# ::edge	value	mod	know-02	0.0.2.0	0.0.2.0.0
# ::edge	value	mod	this	0.0.2.0	0.0.2.0.1
# ::edge	way	ARG1-of	differ-02	0.0	0.0.1
# ::edge	way	manner-of	copy-01	0.0	0.0.2
# ::edge	way	quant	several	0.0	0.0.0
(MRPNode-0 / develop-02 :ARG1 (MRPNode-1 / way :quant (MRPNode-2 / several) :ARG1-of (MRPNode-3 / differ-02) :manner-of (MRPNode-4 / copy-01 :ARG1 (MRPNode-5 / value :mod (MRPNode-6 / know-02 :mod (MRPNode-7 / also) :ARG2 (MRPNode-8 / weight)) :mod (MRPNode-9 / this)))))

# ::id 251
# ::snt These subproblems are not, however, independent.
# ::tok These subproblems are not , however , independent .
# ::alignments 0-1|0.0.1.0 1-2|0.0.1 3-4|0.0.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.316542 ::parser eager_oracle ::smatch 0.75 ::n_actions 23
# ::node	0	have-concession-91	
# ::node	0.0	depend-01	7-8
# ::node	0.0.0	-	3-4
# ::node	0.0.1	subproblem	1-2
# ::node	0.0.1.0	this	0-1
# ::root	0	have-concession-91
# ::edge	depend-01	ARG0	subproblem	0.0	0.0.1
# ::edge	depend-01	polarity	-	0.0	0.0.0
# ::edge	have-concession-91	ARG1	depend-01	0	0.0
# ::edge	subproblem	mod	this	0.0.1	0.0.1.0
(MRPNode-0 / have-concession-91 :ARG1 (MRPNode-1 / depend-01 :polarity - :ARG0 (MRPNode-2 / subproblem :mod (MRPNode-3 / this))))

# ::id 252
# ::snt The key to Dynamic Programming is to find the structure of optimal solutions.
# ::tok The key to Dynamic Programming is to find the structure of optimal solutions .
# ::alignments 1-2|0 7-8|0.1 9-10|0.1.0 11-12|0.1.0.0.0 12-13|0.1.0.0+0.1.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:41.326103 ::parser eager_oracle ::smatch 0.7499999999999999 ::n_actions 35
# ::node	0	key-02	1-2
# ::node	0.0	figure-out-05	
# ::node	0.0.0	product	3-5
# ::node	0.0.0.0	name	3-5
# ::node	0.0.0.0.0	dynamic	3-5
# ::node	0.0.0.0.1	programming	3-5
# ::node	0.1	find-01	7-8
# ::node	0.1.0	structure-01	9-10
# ::node	0.1.0.0	thing	12-13
# ::node	0.1.0.0.0	optimal	11-12
# ::node	0.1.0.0.1	solve-01	12-13
# ::root	0	key-02
# ::edge	figure-out-05	manner	product	0.0	0.0.0
# ::edge	find-01	ARG1	structure-01	0.1	0.1.0
# ::edge	key-02	ARG1	figure-out-05	0	0.0
# ::edge	key-02	ARG2	find-01	0	0.1
# ::edge	name	op1	dynamic	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	programming	0.0.0.0	0.0.0.0.1
# ::edge	product	name	name	0.0.0	0.0.0.0
# ::edge	structure-01	ARG1	thing	0.1.0	0.1.0.0
# ::edge	thing	ARG2-of	solve-01	0.1.0.0	0.1.0.0.1
# ::edge	thing	mod	optimal	0.1.0.0	0.1.0.0.0
(MRPNode-0 / key-02 :ARG1 (MRPNode-1 / figure-out-05 :manner (MRPNode-2 / product :name (MRPNode-3 / name :op1 dynamic :op2 programming))) :ARG2 (MRPNode-4 / find-01 :ARG1 (MRPNode-5 / structure-01 :ARG1 (MRPNode-6 / thing :mod (MRPNode-7 / optimal) :ARG2-of (MRPNode-8 / solve-01)))))

# ::id 253
# ::snt Bayes Theorem is a mathematical formula used to calculate conditional probabilities.
# ::tok Bayes Theorem is a mathematical formula used to calculate conditional probabilities .
# ::alignments 0-2|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0+0.0.0.1.0.1 4-5|0.1 5-6|0 6-7|0.0 8-9|0.0.0 9-10|0.0.0.0.0 10-11|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.333226 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	formula	5-6
# ::node	0.0	use-01	6-7
# ::node	0.0.0	calculate-01	8-9
# ::node	0.0.0.0	probability	10-11
# ::node	0.0.0.0.0	conditional	9-10
# ::node	0.0.0.1	thing	0-2
# ::node	0.0.0.1.0	name	0-2
# ::node	0.0.0.1.0.0	bayes	0-2
# ::node	0.0.0.1.0.1	theorem	0-2
# ::node	0.1	mathematics	4-5
# ::root	0	formula
# ::edge	calculate-01	ARG0	thing	0.0.0	0.0.0.1
# ::edge	calculate-01	ARG1	probability	0.0.0	0.0.0.0
# ::edge	formula	domain	thing	0	0.0.0.1
# ::edge	formula	mod	mathematics	0	0.1
# ::edge	formula	mod	use-01	0	0.0
# ::edge	name	op1	bayes	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op2	theorem	0.0.0.1.0	0.0.0.1.0.1
# ::edge	probability	mod	conditional	0.0.0.0	0.0.0.0.0
# ::edge	thing	name	name	0.0.0.1	0.0.0.1.0
# ::edge	use-01	ARG2	calculate-01	0.0	0.0.0
(MRPNode-0 / formula :mod (MRPNode-1 / use-01 :ARG2 (MRPNode-2 / calculate-01 :ARG1 (MRPNode-3 / probability :mod (MRPNode-4 / conditional)) :ARG0 (MRPNode-6 / thing :name (MRPNode-7 / name :op1 bayes :op2 theorem)))) :mod (MRPNode-5 / mathematics) :domain MRPNode-6)

# ::id 254
# ::snt Construct an optimal solution from computed values.
# ::tok Construct an optimal solution from computed values .
# ::alignments 0-1|0 2-3|0.0.0 3-4|0.0+0.0.1 5-6|0.2.0 6-7|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:41.337490 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 29
# ::node	0	construct-01	0-1
# ::node	0.0	thing	3-4
# ::node	0.0.0	optimal	2-3
# ::node	0.0.1	solve-01	3-4
# ::node	0.1	you	
# ::node	0.2	value	6-7
# ::node	0.2.0	compile-01	5-6
# ::root	0	construct-01
# ::edge	construct-01	ARG1	thing	0	0.0
# ::edge	construct-01	ARG2	value	0	0.2
# ::edge	construct-01	ARG2	you	0	0.1
# ::edge	thing	ARG2-of	solve-01	0.0	0.0.1
# ::edge	thing	mod	optimal	0.0	0.0.0
# ::edge	value	ARG1-of	compile-01	0.2	0.2.0
(MRPNode-0 / construct-01 :ARG1 (MRPNode-1 / thing :mod (MRPNode-2 / optimal) :ARG2-of (MRPNode-3 / solve-01)) :ARG2 (MRPNode-4 / you) :ARG2 (MRPNode-5 / value :ARG1-of (MRPNode-6 / compile-01)))

# ::id 255
# ::snt The theorem is often used when we have observations and wish to compute posterior probabilities.
# ::tok The theorem is often used when we have observations and wish to compute posterior probabilities .
# ::alignments 1-2|0.0 3-4|0.2 4-5|0 6-7|0.1.0.1 7-8|0.1.0 8-9|0.1.0.0 9-10|0.1 10-11|0.1.1 12-13|0.1.1.0 14-15|0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.352041 ::parser eager_oracle ::smatch 0.9565217391304348 ::n_actions 51
# ::node	0	use-01	4-5
# ::node	0.0	theorem	1-2
# ::node	0.1	and	9-10
# ::node	0.1.0	have-03	7-8
# ::node	0.1.0.0	observe-01	8-9
# ::node	0.1.0.1	we	6-7
# ::node	0.1.1	wish-01	10-11
# ::node	0.1.1.0	comprehend-01	12-13
# ::node	0.1.1.0.0	probability	14-15
# ::node	0.1.1.0.0.0	differ-02	
# ::node	0.2	often	3-4
# ::root	0	use-01
# ::edge	and	op1	have-03	0.1	0.1.0
# ::edge	and	op2	wish-01	0.1	0.1.1
# ::edge	comprehend-01	ARG0	we	0.1.1.0	0.1.0.1
# ::edge	comprehend-01	ARG1	probability	0.1.1.0	0.1.1.0.0
# ::edge	have-03	ARG0	we	0.1.0	0.1.0.1
# ::edge	have-03	ARG1	observe-01	0.1.0	0.1.0.0
# ::edge	probability	ARG1-of	differ-02	0.1.1.0.0	0.1.1.0.0.0
# ::edge	use-01	ARG1	theorem	0	0.0
# ::edge	use-01	frequency	often	0	0.2
# ::edge	use-01	time	and	0	0.1
# ::edge	wish-01	ARG0	we	0.1.1	0.1.0.1
# ::edge	wish-01	ARG1	comprehend-01	0.1.1	0.1.1.0
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / theorem) :time (MRPNode-2 / and :op1 (MRPNode-3 / have-03 :ARG1 (MRPNode-4 / observe-01) :ARG0 (MRPNode-5 / we)) :op2 (MRPNode-6 / wish-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-7 / comprehend-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-8 / probability :ARG1-of (MRPNode-9 / differ-02))))) :frequency (MRPNode-10 / often))

# ::id 256
# ::snt P(B) is the prior or marginal probability of B, and acts to normalise the probability.
# ::tok P ( B ) is the prior or marginal probability of B , and acts to normalise the probability .
# ::alignments 2-3|0.0.2+0.0.2.0+0.0.2.0.0+0.0.2.0.0.0 6-7|0.0.0 8-9|0.0.1 9-10|0.1.0.0 13-14|0 14-15|0.1 16-17|0.1.0 18-19|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.373079 ::parser eager_oracle ::smatch 1.0 ::n_actions 60
# ::node	0	and	13-14
# ::node	0.0	probability	18-19
# ::node	0.0.0	prior	6-7
# ::node	0.0.1	marginal-02	8-9
# ::node	0.0.2	person	2-3
# ::node	0.0.2.0	variable	2-3
# ::node	0.0.2.0.0	name	2-3
# ::node	0.0.2.0.0.0	b	2-3
# ::node	0.1	act-01	14-15
# ::node	0.1.0	normalize-01	16-17
# ::node	0.1.0.0	probability	9-10
# ::root	0	and
# ::edge	act-01	ARG0	person	0.1	0.0.2
# ::edge	act-01	ARG1	normalize-01	0.1	0.1.0
# ::edge	and	op1	probability	0	0.0
# ::edge	and	op2	act-01	0	0.1
# ::edge	name	op1	b	0.0.2.0.0	0.0.2.0.0.0
# ::edge	normalize-01	ARG0	person	0.1.0	0.0.2
# ::edge	normalize-01	ARG1	probability	0.1.0	0.1.0.0
# ::edge	person	mod	variable	0.0.2	0.0.2.0
# ::edge	probability	domain	marginal-02	0.0	0.0.1
# ::edge	probability	domain	person	0.0	0.0.2
# ::edge	probability	mod	prior	0.0	0.0.0
# ::edge	variable	name	name	0.0.2.0	0.0.2.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / probability :mod (MRPNode-2 / prior) :domain (MRPNode-3 / marginal-02) :domain (MRPNode-4 / person :mod (MRPNode-5 / variable :name (MRPNode-6 / name :op1 b)))) :op2 (MRPNode-7 / act-01 :ARG0 MRPNode-4 :ARG1 (MRPNode-8 / normalize-01 :ARG0 MRPNode-4 :ARG1 (MRPNode-9 / probability))))

# ::id 257
# ::snt In probability theory, Bayes' theorem relates the conditional and marginal probabilities of two random events.
# ::tok In probability theory , Bayes ' theorem relates the conditional and marginal probabilities of two random events .
# ::alignments 1-2|0.2.0 2-3|0.2 4-5|0.1.1+0.1.1.0+0.1.1.0.0 6-7|0.1 7-8|0 9-10|0.0.0.0 10-11|0.0 11-12|0.0.1.0 12-13|0.0.1 14-15|0.1.0.0 15-16|0.1.0.1 16-17|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.471552 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 57
# ::node	0	relate-01	7-8
# ::node	0.0	and	10-11
# ::node	0.0.0	probability	
# ::node	0.0.0.0	condition-01	9-10
# ::node	0.0.1	probability	12-13
# ::node	0.0.1.0	marginal-02	11-12
# ::node	0.1	theorem	6-7
# ::node	0.1.0	event	16-17
# ::node	0.1.0.0	2	14-15
# ::node	0.1.0.1	random	15-16
# ::node	0.1.1	person	4-5
# ::node	0.1.1.0	name	4-5
# ::node	0.1.1.0.0	bayes	4-5
# ::node	0.2	theory	2-3
# ::node	0.2.0	probability	1-2
# ::root	0	relate-01
# ::edge	and	op1	probability	0.0	0.0.0
# ::edge	and	op2	probability	0.0	0.0.1
# ::edge	event	quant	2	0.1.0	0.1.0.0
# ::edge	event	quant	random	0.1.0	0.1.0.1
# ::edge	name	op1	bayes	0.1.1.0	0.1.1.0.0
# ::edge	person	name	name	0.1.1	0.1.1.0
# ::edge	probability	ARG1-of	condition-01	0.0.0	0.0.0.0
# ::edge	probability	ARG1-of	marginal-02	0.0.1	0.0.1.0
# ::edge	relate-01	ARG0	theorem	0	0.1
# ::edge	relate-01	ARG1	and	0	0.0
# ::edge	relate-01	location	theory	0	0.2
# ::edge	theorem	poss	event	0.1	0.1.0
# ::edge	theorem	poss	person	0.1	0.1.1
# ::edge	theory	mod	probability	0.2	0.2.0
(MRPNode-0 / relate-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / probability :ARG1-of (MRPNode-3 / condition-01)) :op2 (MRPNode-4 / probability :ARG1-of (MRPNode-5 / marginal-02))) :ARG0 (MRPNode-6 / theorem :poss (MRPNode-7 / event :quant 2 :quant (MRPNode-8 / random)) :poss (MRPNode-9 / person :name (MRPNode-10 / name :op1 bayes))) :location (MRPNode-11 / theory :mod (MRPNode-12 / probability)))

# ::id 258
# ::snt Programming, in this sense, means finding an acceptable plan of action.
# ::tok Programming , in this sense , means finding an acceptable plan of action .
# ::alignments 3-4|0.2.0 4-5|0.2 6-7|0 7-8|0.1 9-10|0.1.0.0 10-11|0.1.0 12-13|0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:41.481900 ::parser eager_oracle ::smatch 0.8750000000000001 ::n_actions 37
# ::node	0	mean-01	6-7
# ::node	0.0	design-01	
# ::node	0.1	find-01	7-8
# ::node	0.1.0	plan-01	10-11
# ::node	0.1.0.0	accept-01	9-10
# ::node	0.1.0.0.0	possible-01	
# ::node	0.1.0.1	act-02	12-13
# ::node	0.2	sense	4-5
# ::node	0.2.0	this	3-4
# ::root	0	mean-01
# ::edge	accept-01	ARG1-of	possible-01	0.1.0.0	0.1.0.0.0
# ::edge	find-01	ARG1	plan-01	0.1	0.1.0
# ::edge	mean-01	ARG1	design-01	0	0.0
# ::edge	mean-01	ARG2	find-01	0	0.1
# ::edge	mean-01	mod	sense	0	0.2
# ::edge	plan-01	ARG1	accept-01	0.1.0	0.1.0.0
# ::edge	plan-01	ARG1	act-02	0.1.0	0.1.0.1
# ::edge	sense	mod	this	0.2	0.2.0
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / design-01) :ARG2 (MRPNode-2 / find-01 :ARG1 (MRPNode-3 / plan-01 :ARG1 (MRPNode-4 / accept-01 :ARG1-of (MRPNode-5 / possible-01)) :ARG1 (MRPNode-6 / act-02))) :mod (MRPNode-7 / sense :mod (MRPNode-8 / this)))

# ::id 259
# ::snt The vector space model has some limitations: 1.
# ::tok The vector space model has some limitations : 1 .
# ::alignments 1-2|0.1.0.0 2-3|0.1.0 3-4|0.1 6-7|0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.485528 ::parser eager_oracle ::smatch 0.8421052631578948 ::n_actions 27
# ::node	0	limit-01	6-7
# ::node	0.0	1	8-9
# ::node	0.1	model	3-4
# ::node	0.1.0	space	2-3
# ::node	0.1.0.0	vector	1-2
# ::root	0	limit-01
# ::edge	limit-01	ARG1	model	0	0.1
# ::edge	limit-01	li	1	0	0.0
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / limit-01 :li 1 :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / space :mod (MRPNode-3 / vector))))

# ::id 260
# ::snt Using the vector space model for Information Retrieval models all pages and queries as high-dimensional sparse vectors.
# ::tok Using the vector space model for Information Retrieval models all pages and queries as high - dimensional sparse vectors .
# ::alignments 0-1|0.1 2-3|0.2 3-4|0.1.0.0 4-5|0 6-8|0.1.0.1+0.1.0.1.0+0.1.0.1.1 8-9|0.1.0 9-10|0.0.1 10-11|0.0.0 11-12|0.0 12-13|0.0.2 14-15|0.2.0.0 16-17|0.2.0 17-18|0.2.1 18-19|0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.800543 ::parser eager_oracle ::smatch 1.0 ::n_actions 74
# ::node	0	model-01	4-5
# ::node	0.0	and	11-12
# ::node	0.0.0	page	10-11
# ::node	0.0.1	all	9-10
# ::node	0.0.2	query-01	12-13
# ::node	0.1	use-01	0-1
# ::node	0.1.0	model	8-9
# ::node	0.1.0.0	space	3-4
# ::node	0.1.0.0.0	vector	18-19
# ::node	0.1.0.1	name	6-8
# ::node	0.1.0.1.0	information	6-8
# ::node	0.1.0.1.1	retrieval	6-8
# ::node	0.2	vector	2-3
# ::node	0.2.0	dimensional	16-17
# ::node	0.2.0.0	high-02	14-15
# ::node	0.2.1	sparse	17-18
# ::root	0	model-01
# ::edge	and	op1	page	0.0	0.0.0
# ::edge	and	op2	all	0.0	0.0.1
# ::edge	and	op2	query-01	0.0	0.0.2
# ::edge	dimensional	ARG1-of	high-02	0.2.0	0.2.0.0
# ::edge	model	mod	space	0.1.0	0.1.0.0
# ::edge	model	purpose	name	0.1.0	0.1.0.1
# ::edge	model-01	ARG0	use-01	0	0.1
# ::edge	model-01	ARG1	and	0	0.0
# ::edge	model-01	ARG2	vector	0	0.2
# ::edge	name	op1	information	0.1.0.1	0.1.0.1.0
# ::edge	name	op2	retrieval	0.1.0.1	0.1.0.1.1
# ::edge	space	mod	vector	0.1.0.0	0.1.0.0.0
# ::edge	use-01	ARG1	model	0.1	0.1.0
# ::edge	vector	mod	dimensional	0.2	0.2.0
# ::edge	vector	mod	sparse	0.2	0.2.1
(MRPNode-0 / model-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / page) :op2 (MRPNode-3 / all) :op2 (MRPNode-4 / query-01)) :ARG0 (MRPNode-5 / use-01 :ARG1 (MRPNode-6 / model :mod (MRPNode-7 / space :mod (MRPNode-8 / vector)) :purpose (MRPNode-9 / name :op1 information :op2 retrieval))) :ARG2 (MRPNode-10 / vector :mod (MRPNode-11 / dimensional :ARG1-of (MRPNode-12 / high-02)) :mod (MRPNode-13 / sparse)))

# ::id 261
# ::snt One of the most famous schemes is tf-idf weighting.
# ::tok One of the most famous schemes is tf - idf weighting .
# ::alignments 0-1|0.1 1-2|0+0.0.0 3-4|0.0.0.2 5-6|0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.807667 ::parser eager_oracle ::smatch 0.7142857142857143 ::n_actions 35
# ::node	0	include-91	1-2
# ::node	0.0	scheme	5-6
# ::node	0.0.0	have-degree-91	1-2
# ::node	0.0.0.0	scheme	5-6
# ::node	0.0.0.1	fame-01	
# ::node	0.0.0.2	most	3-4
# ::node	0.0.1	name	10-11
# ::node	0.0.1.0	weighting	10-11
# ::node	0.1	thing	0-1
# ::root	0	include-91
# ::edge	have-degree-91	ARG2	fame-01	0.0.0	0.0.0.1
# ::edge	have-degree-91	ARG3	most	0.0.0	0.0.0.2
# ::edge	have-degree-91	arg5	scheme	0.0.0	0.0.0.0
# ::edge	include-91	ARG1	scheme	0	0.0
# ::edge	include-91	ARG2	thing	0	0.1
# ::edge	name	op2	weighting	0.0.1	0.0.1.0
# ::edge	scheme	ARG1-of	have-degree-91	0.0	0.0.0
# ::edge	scheme	name	name	0.0	0.0.1
(MRPNode-0 / include-91 :ARG1 (MRPNode-1 / scheme :ARG1-of (MRPNode-2 / have-degree-91 :arg5 scheme :ARG2 (MRPNode-3 / fame-01) :ARG3 (MRPNode-4 / most)) :name (MRPNode-5 / name :op2 weighting)) :ARG2 (MRPNode-6 / thing))

# ::id 262
# ::snt Vector space representation results in the loss of the order which the terms are in the document.
# ::tok Vector space representation results in the loss of the order which the terms are in the document .
# ::alignments 0-1|0.0.0.0 1-2|0.0.0 2-3|0.0 3-4|0 9-10|0.1.0 12-13|0.1.0.0 16-17|0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.816542 ::parser eager_oracle ::smatch 0.8666666666666666 ::n_actions 40
# ::node	0	result-01	3-4
# ::node	0.0	represent-01	2-3
# ::node	0.0.0	space	1-2
# ::node	0.0.0.0	vector	0-1
# ::node	0.1	lose-02	
# ::node	0.1.0	order	9-10
# ::node	0.1.0.0	term	12-13
# ::node	0.1.0.0.0	document	16-17
# ::root	0	result-01
# ::edge	lose-02	ARG1	order	0.1	0.1.0
# ::edge	order	location-of	term	0.1.0	0.1.0.0
# ::edge	represent-01	ARG1	space	0.0	0.0.0
# ::edge	result-01	ARG1	represent-01	0	0.0
# ::edge	result-01	ARG2	lose-02	0	0.1
# ::edge	space	mod	vector	0.0.0	0.0.0.0
# ::edge	term	location	document	0.1.0.0	0.1.0.0.0
(MRPNode-0 / result-01 :ARG1 (MRPNode-1 / represent-01 :ARG1 (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG2 (MRPNode-4 / lose-02 :ARG1 (MRPNode-5 / order :location-of (MRPNode-6 / term :location (MRPNode-7 / document)))))

# ::id 263
# ::snt Other ways of computing these values, or weights, have been developed.
# ::tok Other ways of computing these values , or weights , have been developed .
# ::alignments 0-1|0.0.0 1-2|0.0 3-4|0.0.1 4-5|0.0.1.0.0.0 5-6|0.0.1.0.0 7-8|0.0.1.0 8-9|0.0.1.0.1 12-13|0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.825306 ::parser eager_oracle ::smatch 1.0 ::n_actions 40
# ::node	0	develop-02	12-13
# ::node	0.0	way	1-2
# ::node	0.0.0	other	0-1
# ::node	0.0.1	comprise-01	3-4
# ::node	0.0.1.0	or	7-8
# ::node	0.0.1.0.0	value	5-6
# ::node	0.0.1.0.0.0	this	4-5
# ::node	0.0.1.0.1	weight	8-9
# ::root	0	develop-02
# ::edge	comprise-01	ARG1	or	0.0.1	0.0.1.0
# ::edge	develop-02	ARG1	way	0	0.0
# ::edge	or	op1	value	0.0.1.0	0.0.1.0.0
# ::edge	or	op2	weight	0.0.1.0	0.0.1.0.1
# ::edge	value	mod	this	0.0.1.0.0	0.0.1.0.0.0
# ::edge	way	manner-of	comprise-01	0.0	0.0.1
# ::edge	way	mod	other	0.0	0.0.0
(MRPNode-0 / develop-02 :ARG1 (MRPNode-1 / way :mod (MRPNode-2 / other) :manner-of (MRPNode-3 / comprise-01 :ARG1 (MRPNode-4 / or :op1 (MRPNode-5 / value :mod (MRPNode-6 / this)) :op2 (MRPNode-7 / weight)))))

# ::id 264
# ::snt It is usually be used to compute posterior probabilities given observations.
# ::tok It is usually be used to compute posterior probabilities given observations .
# ::alignments 0-1|0.0 2-3|0.1 4-5|0 6-7|0.2 8-9|0.2.0 9-10|0.2.1.0 10-11|0.2.1 ::annotator aligner3.py ::date 2021-03-11 23:00:41.834509 ::parser eager_oracle ::smatch 0.9375 ::n_actions 37
# ::node	0	use-01	4-5
# ::node	0.0	it	0-1
# ::node	0.1	usual	2-3
# ::node	0.2	compile-01	6-7
# ::node	0.2.0	probability	8-9
# ::node	0.2.0.0	differ-02	
# ::node	0.2.1	observe-01	10-11
# ::node	0.2.1.0	give-01	9-10
# ::root	0	use-01
# ::edge	compile-01	ARG0	it	0.2	0.0
# ::edge	compile-01	ARG1	probability	0.2	0.2.0
# ::edge	compile-01	ARG1-of	observe-01	0.2	0.2.1
# ::edge	observe-01	ARG1-of	give-01	0.2.1	0.2.1.0
# ::edge	probability	mod	differ-02	0.2.0	0.2.0.0
# ::edge	use-01	ARG1	it	0	0.0
# ::edge	use-01	ARG2	compile-01	0	0.2
# ::edge	use-01	mod	usual	0	0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / it) :mod (MRPNode-2 / usual) :ARG2 (MRPNode-3 / compile-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-4 / probability :mod (MRPNode-5 / differ-02)) :ARG1-of (MRPNode-6 / observe-01 :ARG1-of (MRPNode-7 / give-01))))

# ::id 265
# ::snt In computer science; dynamic programming is a way of solving problems consist of overlapping subproblems and optimal substructure.
# ::tok In computer science ; dynamic programming is a way of solving problems consist of overlapping subproblems and optimal substructure .
# ::alignments 1-2|0.0.0 2-3|0.0 4-5|0.1.0 5-6|0.1 8-9|0 10-11|0.2 15-16|0.2.0.0 16-17|0.2.0 17-18|0.2.0.1.0 18-19|0.2.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:41.850852 ::parser eager_oracle ::smatch 0.9523809523809523 ::n_actions 52
# ::node	0	way	8-9
# ::node	0.0	science	2-3
# ::node	0.0.0	computer	1-2
# ::node	0.1	program-01	5-6
# ::node	0.1.0	dynamic	4-5
# ::node	0.2	solve-01	10-11
# ::node	0.2.0	and	16-17
# ::node	0.2.0.0	subproblem	15-16
# ::node	0.2.0.0.0	coverage-06	
# ::node	0.2.0.1	substructure	18-19
# ::node	0.2.0.1.0	optimal	17-18
# ::root	0	way
# ::edge	and	op1	subproblem	0.2.0	0.2.0.0
# ::edge	and	op2	substructure	0.2.0	0.2.0.1
# ::edge	program-01	mod	dynamic	0.1	0.1.0
# ::edge	science	mod	computer	0.0	0.0.0
# ::edge	solve-01	ARG1	and	0.2	0.2.0
# ::edge	subproblem	ARG1-of	coverage-06	0.2.0.0	0.2.0.0.0
# ::edge	substructure	mod	optimal	0.2.0.1	0.2.0.1.0
# ::edge	way	domain	program-01	0	0.1
# ::edge	way	domain	science	0	0.0
# ::edge	way	manner-of	solve-01	0	0.2
(MRPNode-0 / way :domain (MRPNode-1 / science :mod (MRPNode-2 / computer)) :domain (MRPNode-3 / program-01 :mod (MRPNode-4 / dynamic)) :manner-of (MRPNode-5 / solve-01 :ARG1 (MRPNode-6 / and :op1 (MRPNode-7 / subproblem :ARG1-of (MRPNode-8 / coverage-06)) :op2 (MRPNode-9 / substructure :mod (MRPNode-10 / optimal)))))

# ::id 266
# ::snt The most popular is tf-idf weighting.
# ::tok The most popular is tf - idf weighting .
# ::alignments 1-2|0.0.0.0.0 2-3|0.1 4-5|0.0.1+0.0.1.0+0.0.1.0.0 7-8|0.0.0+0.0.0.1+0.0.0.1.0+0.0.0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:41.856899 ::parser eager_oracle ::smatch 0.4444444444444444 ::n_actions 20
# ::node	0	have-degree-91	
# ::node	0.0	high-02	
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	have-degree-91	
# ::node	0.0.0.0.0	most	1-2
# ::node	0.0.0.1	name	7-8
# ::node	0.0.0.1.0	tf	7-8
# ::node	0.0.0.1.1	weighting	7-8
# ::node	0.0.1	thing	4-5
# ::node	0.0.1.0	name	4-5
# ::node	0.0.1.0.0	tf	4-5
# ::node	0.1	popular-02	2-3
# ::node	0.2	most	
# ::root	0	have-degree-91
# ::edge	have-degree-91	ARG1	high-02	0	0.0
# ::edge	have-degree-91	ARG2	popular-02	0	0.1
# ::edge	have-degree-91	ARG3	most	0	0.2
# ::edge	have-degree-91	ARG3	most	0.0.0.0	0.0.0.0.0
# ::edge	high-02	ARG1	thing	0.0	0.0.0
# ::edge	high-02	ARG1	thing	0.0	0.0.1
# ::edge	name	op1	tf	0.0.0.1	0.0.0.1.0
# ::edge	name	op1	tf	0.0.1.0	0.0.1.0.0
# ::edge	name	op2	weighting	0.0.0.1	0.0.0.1.1
# ::edge	popular-02	ARG1	high-02	0.1	0.0
# ::edge	thing	ARG1-of	have-degree-91	0.0.0	0.0.0.0
# ::edge	thing	name	name	0.0.0	0.0.0.1
# ::edge	thing	name	name	0.0.1	0.0.1.0
(MRPNode-0 / have-degree-91 :ARG1 (MRPNode-1 / high-02 :ARG1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / have-degree-91 :ARG3 (MRPNode-4 / most)) :name (MRPNode-5 / name :op1 tf :op2 weighting)) :ARG1 (MRPNode-6 / thing :name (MRPNode-7 / name :op1 tf))) :ARG2 (MRPNode-8 / popular-02 :ARG1 MRPNode-1) :ARG3 (MRPNode-9 / most))

# ::id 267
# ::snt Construct an optimal solution from computed values.
# ::tok Construct an optimal solution from computed values .
# ::alignments 0-1|0 2-3|0.0.0 3-4|0.0+0.0.1 5-6|0.2.0 6-7|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:41.861081 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 29
# ::node	0	construct-01	0-1
# ::node	0.0	thing	3-4
# ::node	0.0.0	optimal	2-3
# ::node	0.0.1	solve-01	3-4
# ::node	0.1	you	
# ::node	0.2	value	6-7
# ::node	0.2.0	compile-01	5-6
# ::root	0	construct-01
# ::edge	construct-01	ARG1	thing	0	0.0
# ::edge	construct-01	ARG2	value	0	0.2
# ::edge	construct-01	ARG2	you	0	0.1
# ::edge	thing	ARG2-of	solve-01	0.0	0.0.1
# ::edge	thing	mod	optimal	0.0	0.0.0
# ::edge	value	ARG1-of	compile-01	0.2	0.2.0
(MRPNode-0 / construct-01 :ARG1 (MRPNode-1 / thing :mod (MRPNode-2 / optimal) :ARG2-of (MRPNode-3 / solve-01)) :ARG2 (MRPNode-4 / you) :ARG2 (MRPNode-5 / value :ARG1-of (MRPNode-6 / compile-01)))

# ::id 268
# ::snt This is a much quicker method than other more naive methods.
# ::tok This is a much quicker method than other more naive methods .
# ::alignments 0-1|0.0.0 3-4|0.2+0.2.0+0.3.1.1+0.3.1.1.0 4-5|0.1 5-6|0.3 7-8|0.3.0 9-10|0.3.1.0 10-11|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.906068 ::parser eager_oracle ::smatch 0.6363636363636364 ::n_actions 43
# ::node	0	have-degree-91	
# ::node	0.0	method	10-11
# ::node	0.0.0	this	0-1
# ::node	0.1	quick-02	4-5
# ::node	0.2	more	3-4
# ::node	0.2.0	much	3-4
# ::node	0.3	method	5-6
# ::node	0.3.0	other	7-8
# ::node	0.3.1	have-degree-91	
# ::node	0.3.1.0	naive	9-10
# ::node	0.3.1.1	more	3-4
# ::node	0.3.1.1.0	much	3-4
# ::root	0	have-degree-91
# ::edge	have-degree-91	ARG1	method	0	0.0
# ::edge	have-degree-91	ARG2	naive	0.3.1	0.3.1.0
# ::edge	have-degree-91	ARG2	quick-02	0	0.1
# ::edge	have-degree-91	ARG3	more	0	0.2
# ::edge	have-degree-91	ARG3	more	0.3.1	0.3.1.1
# ::edge	have-degree-91	ARG4	method	0	0.3
# ::edge	method	ARG1-of	have-degree-91	0.3	0.3.1
# ::edge	method	mod	other	0.3	0.3.0
# ::edge	method	mod	this	0.0	0.0.0
# ::edge	more	quant	much	0.2	0.2.0
# ::edge	more	quant	much	0.3.1.1	0.3.1.1.0
# ::edge	quick-02	ARG1	method	0.1	0.0
(MRPNode-0 / have-degree-91 :ARG1 (MRPNode-1 / method :mod (MRPNode-2 / this)) :ARG2 (MRPNode-3 / quick-02 :ARG1 MRPNode-1) :ARG3 (MRPNode-4 / more :quant (MRPNode-5 / much)) :ARG4 (MRPNode-6 / method :mod (MRPNode-7 / other) :ARG1-of (MRPNode-8 / have-degree-91 :ARG2 (MRPNode-9 / naive) :ARG3 (MRPNode-10 / more :quant (MRPNode-11 / much)))))

# ::id 269
# ::snt Inheritance in object oriented programming is a way to form new classes using classes that have already been defined.
# ::tok Inheritance in object oriented programming is a way to form new classes using classes that have already been defined .
# ::alignments 0-1|0.1 2-3|0.1.0.0.0 3-4|0.1.0.0 4-5|0.1.0 7-8|0 9-10|0.0 10-11|0.0.0.0 11-12|0.0.0 12-13|0.0.1 13-14|0.0.1.0 16-17|0.0.1.0.0.0 18-19|0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.938743 ::parser eager_oracle ::smatch 1.0 ::n_actions 58
# ::node	0	way	7-8
# ::node	0.0	form-01	9-10
# ::node	0.0.0	class	11-12
# ::node	0.0.0.0	new-01	10-11
# ::node	0.0.1	use-01	12-13
# ::node	0.0.1.0	class	13-14
# ::node	0.0.1.0.0	define-01	18-19
# ::node	0.0.1.0.0.0	already	16-17
# ::node	0.1	inherit-01	0-1
# ::node	0.1.0	program-01	4-5
# ::node	0.1.0.0	orient-01	3-4
# ::node	0.1.0.0.0	object	2-3
# ::root	0	way
# ::edge	class	ARG1-of	define-01	0.0.1.0	0.0.1.0.0
# ::edge	class	ARG1-of	new-01	0.0.0	0.0.0.0
# ::edge	define-01	time	already	0.0.1.0.0	0.0.1.0.0.0
# ::edge	form-01	ARG1	class	0.0	0.0.0
# ::edge	form-01	manner	use-01	0.0	0.0.1
# ::edge	inherit-01	ARG1	program-01	0.1	0.1.0
# ::edge	orient-01	ARG2	object	0.1.0.0	0.1.0.0.0
# ::edge	program-01	ARG2	orient-01	0.1.0	0.1.0.0
# ::edge	use-01	ARG1	class	0.0.1	0.0.1.0
# ::edge	way	domain	form-01	0	0.0
# ::edge	way	domain	inherit-01	0	0.1
(MRPNode-0 / way :domain (MRPNode-1 / form-01 :ARG1 (MRPNode-2 / class :ARG1-of (MRPNode-3 / new-01)) :manner (MRPNode-4 / use-01 :ARG1 (MRPNode-5 / class :ARG1-of (MRPNode-6 / define-01 :time (MRPNode-7 / already))))) :domain (MRPNode-8 / inherit-01 :ARG1 (MRPNode-9 / program-01 :ARG2 (MRPNode-10 / orient-01 :ARG2 (MRPNode-11 / object)))))

# ::id 270
# ::snt However, the vector space model has limitations.
# ::tok However , the vector space model has limitations .
# ::alignments 3-4|0.0.0.0.0 4-5|0.0.0.0 5-6|0.0.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.943241 ::parser eager_oracle ::smatch 0.7777777777777777 ::n_actions 23
# ::node	0	contrast-01	
# ::node	0.0	limit-01	7-8
# ::node	0.0.0	model	5-6
# ::node	0.0.0.0	space	4-5
# ::node	0.0.0.0.0	vector	3-4
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	limit-01	0	0.0
# ::edge	limit-01	ARG1	model	0.0	0.0.0
# ::edge	model	mod	space	0.0.0	0.0.0.0
# ::edge	space	mod	vector	0.0.0.0	0.0.0.0.0
(MRPNode-0 / contrast-01 :ARG2 (MRPNode-1 / limit-01 :ARG1 (MRPNode-2 / model :mod (MRPNode-3 / space :mod (MRPNode-4 / vector)))))

# ::id 271
# ::snt Programming, in this sense, means finding an acceptable plan of action.
# ::tok Programming , in this sense , means finding an acceptable plan of action .
# ::alignments 3-4|0.2.0 4-5|0.2 6-7|0 7-8|0.1 9-10|0.1.0.0 10-11|0.1.0 12-13|0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:41.955084 ::parser eager_oracle ::smatch 0.8750000000000001 ::n_actions 37
# ::node	0	mean-01	6-7
# ::node	0.0	design-01	
# ::node	0.1	find-01	7-8
# ::node	0.1.0	plan-01	10-11
# ::node	0.1.0.0	accept-01	9-10
# ::node	0.1.0.0.0	possible-01	
# ::node	0.1.0.1	act-02	12-13
# ::node	0.2	sense	4-5
# ::node	0.2.0	this	3-4
# ::root	0	mean-01
# ::edge	accept-01	ARG1-of	possible-01	0.1.0.0	0.1.0.0.0
# ::edge	find-01	ARG1	plan-01	0.1	0.1.0
# ::edge	mean-01	ARG1	design-01	0	0.0
# ::edge	mean-01	ARG2	find-01	0	0.1
# ::edge	mean-01	mod	sense	0	0.2
# ::edge	plan-01	ARG1	accept-01	0.1.0	0.1.0.0
# ::edge	plan-01	ARG1	act-02	0.1.0	0.1.0.1
# ::edge	sense	mod	this	0.2	0.2.0
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / design-01) :ARG2 (MRPNode-2 / find-01 :ARG1 (MRPNode-3 / plan-01 :ARG1 (MRPNode-4 / accept-01 :ARG1-of (MRPNode-5 / possible-01)) :ARG1 (MRPNode-6 / act-02))) :mod (MRPNode-7 / sense :mod (MRPNode-8 / this)))

# ::id 272
# ::snt Dynamic Programming solves problems by combining the solutions of subproblems.
# ::tok Dynamic Programming solves problems by combining the solutions of subproblems .
# ::alignments 0-1|0.1.0 1-2|0.1 2-3|0 3-4|0.0 5-6|0.2 7-8|0.2.0+0.2.0.0 9-10|0.2.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.969622 ::parser eager_oracle ::smatch 1.0 ::n_actions 40
# ::node	0	solve-01	2-3
# ::node	0.0	problem	3-4
# ::node	0.1	program-01	1-2
# ::node	0.1.0	dynamic	0-1
# ::node	0.2	combine-01	5-6
# ::node	0.2.0	thing	7-8
# ::node	0.2.0.0	solve-01	7-8
# ::node	0.2.0.0.0	subproblem	9-10
# ::root	0	solve-01
# ::edge	combine-01	ARG0	program-01	0.2	0.1
# ::edge	combine-01	ARG1	thing	0.2	0.2.0
# ::edge	program-01	mod	dynamic	0.1	0.1.0
# ::edge	solve-01	ARG0	program-01	0	0.1
# ::edge	solve-01	ARG1	problem	0	0.0
# ::edge	solve-01	ARG1	subproblem	0.2.0.0	0.2.0.0.0
# ::edge	solve-01	manner	combine-01	0	0.2
# ::edge	thing	ARG2-of	solve-01	0.2.0	0.2.0.0
(MRPNode-0 / solve-01 :ARG1 (MRPNode-1 / problem) :ARG0 (MRPNode-2 / program-01 :mod (MRPNode-3 / dynamic)) :manner (MRPNode-4 / combine-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-5 / thing :ARG2-of (MRPNode-6 / solve-01 :ARG1 (MRPNode-7 / subproblem)))))

# ::id 273
# ::snt Subclasses are said to extend or specialise their superclasses.
# ::tok Subclasses are said to extend or specialise their superclasses .
# ::alignments 0-1|0.0.0.1 2-3|0 4-5|0.0.0 5-6|0.0 6-7|0.0.1 8-9|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:41.974918 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	say-01	2-3
# ::node	0.0	or	5-6
# ::node	0.0.0	extend-01	4-5
# ::node	0.0.0.0	superclass	8-9
# ::node	0.0.0.1	subclass	0-1
# ::node	0.0.1	specialize-01	6-7
# ::root	0	say-01
# ::edge	extend-01	ARG0	subclass	0.0.0	0.0.0.1
# ::edge	extend-01	ARG1	superclass	0.0.0	0.0.0.0
# ::edge	or	op1	extend-01	0.0	0.0.0
# ::edge	or	op2	specialize-01	0.0	0.0.1
# ::edge	say-01	ARG1	or	0	0.0
# ::edge	specialize-01	ARG0	subclass	0.0.1	0.0.0.1
# ::edge	specialize-01	ARG1	superclass	0.0.1	0.0.0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / or :op1 (MRPNode-2 / extend-01 :ARG1 (MRPNode-3 / superclass) :ARG0 (MRPNode-4 / subclass)) :op2 (MRPNode-5 / specialize-01 :ARG1 MRPNode-3 :ARG0 MRPNode-4)))

# ::id 274
# ::snt It is often used to compute posterior probabilities given observations.
# ::tok It is often used to compute posterior probabilities given observations .
# ::alignments 0-1|0.0.2 2-3|0.1 3-4|0 5-6|0.0 7-8|0.0.0 8-9|0.0.1.0 9-10|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:41.981963 ::parser eager_oracle ::smatch 0.9375 ::n_actions 36
# ::node	0	use-01	3-4
# ::node	0.0	compile-01	5-6
# ::node	0.0.0	probability	7-8
# ::node	0.0.0.0	differ-02	
# ::node	0.0.1	observe-01	9-10
# ::node	0.0.1.0	give-01	8-9
# ::node	0.0.2	it	0-1
# ::node	0.1	often	2-3
# ::root	0	use-01
# ::edge	compile-01	ARG0	it	0.0	0.0.2
# ::edge	compile-01	ARG1	probability	0.0	0.0.0
# ::edge	compile-01	ARG1-of	observe-01	0.0	0.0.1
# ::edge	observe-01	ARG1-of	give-01	0.0.1	0.0.1.0
# ::edge	probability	mod	differ-02	0.0.0	0.0.0.0
# ::edge	use-01	ARG1	compile-01	0	0.0
# ::edge	use-01	ARG1	it	0	0.0.2
# ::edge	use-01	frequency	often	0	0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / compile-01 :ARG1 (MRPNode-2 / probability :mod (MRPNode-3 / differ-02)) :ARG1-of (MRPNode-4 / observe-01 :ARG1-of (MRPNode-5 / give-01)) :ARG0 (MRPNode-6 / it)) :ARG1 MRPNode-6 :frequency (MRPNode-7 / often))

# ::id 275
# ::snt Every dimension is precisely related to a separate term.
# ::tok Every dimension is precisely related to a separate term .
# ::alignments 0-1|0.0.0 1-2|0.0 3-4|0.2 4-5|0 7-8|0.1.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:41.985866 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	relate-01	4-5
# ::node	0.0	dimension	1-2
# ::node	0.0.0	every	0-1
# ::node	0.1	term	8-9
# ::node	0.1.0	separate-02	7-8
# ::node	0.2	precise	3-4
# ::root	0	relate-01
# ::edge	dimension	mod	every	0.0	0.0.0
# ::edge	relate-01	ARG1	dimension	0	0.0
# ::edge	relate-01	ARG2	term	0	0.1
# ::edge	relate-01	manner	precise	0	0.2
# ::edge	term	ARG1-of	separate-02	0.1	0.1.0
(MRPNode-0 / relate-01 :ARG1 (MRPNode-1 / dimension :mod (MRPNode-2 / every)) :ARG2 (MRPNode-3 / term :ARG1-of (MRPNode-4 / separate-02)) :manner (MRPNode-5 / precise))

# ::id 276
# ::snt Construct an optimal solution from computed values.
# ::tok Construct an optimal solution from computed values .
# ::alignments 0-1|0 2-3|0.0.0 3-4|0.0+0.0.1 5-6|0.2.0 6-7|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:41.990641 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 29
# ::node	0	construct-01	0-1
# ::node	0.0	thing	3-4
# ::node	0.0.0	optimal	2-3
# ::node	0.0.1	solve-01	3-4
# ::node	0.1	you	
# ::node	0.2	value	6-7
# ::node	0.2.0	compile-01	5-6
# ::root	0	construct-01
# ::edge	construct-01	ARG1	thing	0	0.0
# ::edge	construct-01	ARG2	value	0	0.2
# ::edge	construct-01	ARG2	you	0	0.1
# ::edge	thing	ARG2-of	solve-01	0.0	0.0.1
# ::edge	thing	mod	optimal	0.0	0.0.0
# ::edge	value	ARG1-of	compile-01	0.2	0.2.0
(MRPNode-0 / construct-01 :ARG1 (MRPNode-1 / thing :mod (MRPNode-2 / optimal) :ARG2-of (MRPNode-3 / solve-01)) :ARG2 (MRPNode-4 / you) :ARG2 (MRPNode-5 / value :ARG1-of (MRPNode-6 / compile-01)))

# ::id 277
# ::snt Every dimension is precisely related to a separate term.
# ::tok Every dimension is precisely related to a separate term .
# ::alignments 0-1|0.0.0 1-2|0.0 3-4|0.2 4-5|0 7-8|0.1.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:41.994596 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	relate-01	4-5
# ::node	0.0	dimension	1-2
# ::node	0.0.0	every	0-1
# ::node	0.1	term	8-9
# ::node	0.1.0	separate-02	7-8
# ::node	0.2	precise	3-4
# ::root	0	relate-01
# ::edge	dimension	mod	every	0.0	0.0.0
# ::edge	relate-01	ARG1	dimension	0	0.0
# ::edge	relate-01	ARG2	term	0	0.1
# ::edge	relate-01	manner	precise	0	0.2
# ::edge	term	ARG1-of	separate-02	0.1	0.1.0
(MRPNode-0 / relate-01 :ARG1 (MRPNode-1 / dimension :mod (MRPNode-2 / every)) :ARG2 (MRPNode-3 / term :ARG1-of (MRPNode-4 / separate-02)) :manner (MRPNode-5 / precise))

# ::id 278
# ::snt The most popular is tf-idf weighting.
# ::tok The most popular is tf - idf weighting .
# ::alignments 1-2|0.0.0.0.0 2-3|0.1 4-5|0.0.1+0.0.1.0+0.0.1.0.0 7-8|0.0.0+0.0.0.1+0.0.0.1.0+0.0.0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:41.999513 ::parser eager_oracle ::smatch 0.4444444444444444 ::n_actions 20
# ::node	0	have-degree-91	
# ::node	0.0	high-02	
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	have-degree-91	
# ::node	0.0.0.0.0	most	1-2
# ::node	0.0.0.1	name	7-8
# ::node	0.0.0.1.0	tf	7-8
# ::node	0.0.0.1.1	weighting	7-8
# ::node	0.0.1	thing	4-5
# ::node	0.0.1.0	name	4-5
# ::node	0.0.1.0.0	tf	4-5
# ::node	0.1	popular-02	2-3
# ::node	0.2	most	
# ::root	0	have-degree-91
# ::edge	have-degree-91	ARG1	high-02	0	0.0
# ::edge	have-degree-91	ARG2	popular-02	0	0.1
# ::edge	have-degree-91	ARG3	most	0	0.2
# ::edge	have-degree-91	ARG3	most	0.0.0.0	0.0.0.0.0
# ::edge	high-02	ARG1	thing	0.0	0.0.0
# ::edge	high-02	ARG1	thing	0.0	0.0.1
# ::edge	name	op1	tf	0.0.0.1	0.0.0.1.0
# ::edge	name	op1	tf	0.0.1.0	0.0.1.0.0
# ::edge	name	op2	weighting	0.0.0.1	0.0.0.1.1
# ::edge	popular-02	ARG1	high-02	0.1	0.0
# ::edge	thing	ARG1-of	have-degree-91	0.0.0	0.0.0.0
# ::edge	thing	name	name	0.0.0	0.0.0.1
# ::edge	thing	name	name	0.0.1	0.0.1.0
(MRPNode-0 / have-degree-91 :ARG1 (MRPNode-1 / high-02 :ARG1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / have-degree-91 :ARG3 (MRPNode-4 / most)) :name (MRPNode-5 / name :op1 tf :op2 weighting)) :ARG1 (MRPNode-6 / thing :name (MRPNode-7 / name :op1 tf))) :ARG2 (MRPNode-8 / popular-02 :ARG1 MRPNode-1) :ARG3 (MRPNode-9 / most))

# ::id 279
# ::snt The theorem is often used when we have observations and wish to compute posterior probabilities.
# ::tok The theorem is often used when we have observations and wish to compute posterior probabilities .
# ::alignments 1-2|0.0 3-4|0.2 4-5|0 6-7|0.1.0.1 7-8|0.1.0 8-9|0.1.0.0 9-10|0.1 10-11|0.1.1 12-13|0.1.1.0 14-15|0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.013468 ::parser eager_oracle ::smatch 0.9565217391304348 ::n_actions 51
# ::node	0	use-01	4-5
# ::node	0.0	theorem	1-2
# ::node	0.1	and	9-10
# ::node	0.1.0	have-03	7-8
# ::node	0.1.0.0	observe-01	8-9
# ::node	0.1.0.1	we	6-7
# ::node	0.1.1	wish-01	10-11
# ::node	0.1.1.0	comprehend-01	12-13
# ::node	0.1.1.0.0	probability	14-15
# ::node	0.1.1.0.0.0	differ-02	
# ::node	0.2	often	3-4
# ::root	0	use-01
# ::edge	and	op1	have-03	0.1	0.1.0
# ::edge	and	op2	wish-01	0.1	0.1.1
# ::edge	comprehend-01	ARG0	we	0.1.1.0	0.1.0.1
# ::edge	comprehend-01	ARG1	probability	0.1.1.0	0.1.1.0.0
# ::edge	have-03	ARG0	we	0.1.0	0.1.0.1
# ::edge	have-03	ARG1	observe-01	0.1.0	0.1.0.0
# ::edge	probability	ARG1-of	differ-02	0.1.1.0.0	0.1.1.0.0.0
# ::edge	use-01	ARG1	theorem	0	0.0
# ::edge	use-01	frequency	often	0	0.2
# ::edge	use-01	time	and	0	0.1
# ::edge	wish-01	ARG0	we	0.1.1	0.1.0.1
# ::edge	wish-01	ARG1	comprehend-01	0.1.1	0.1.1.0
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / theorem) :time (MRPNode-2 / and :op1 (MRPNode-3 / have-03 :ARG1 (MRPNode-4 / observe-01) :ARG0 (MRPNode-5 / we)) :op2 (MRPNode-6 / wish-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-7 / comprehend-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-8 / probability :ARG1-of (MRPNode-9 / differ-02))))) :frequency (MRPNode-10 / often))

# ::id 280
# ::snt Overlapping subproblems means that the same subproblems are used to solve many different larger problems.
# ::tok Overlapping subproblems means that the same subproblems are used to solve many different larger problems .
# ::alignments 0-1|0.0 2-3|0 5-6|0.1.0.0 6-7|0.1.0 8-9|0.1 10-11|0.1.1 11-12|0.1.1.0.2 12-13|0.1.1.0.1 13-14|0.1.1.0.0.0 14-15|0.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.047143 ::parser eager_oracle ::smatch 0.8636363636363636 ::n_actions 49
# ::node	0	mean-01	2-3
# ::node	0.0	overlap	0-1
# ::node	0.1	use-01	8-9
# ::node	0.1.0	subproblem	6-7
# ::node	0.1.0.0	same-01	5-6
# ::node	0.1.1	solve-01	10-11
# ::node	0.1.1.0	problem	14-15
# ::node	0.1.1.0.0	have-degree-91	
# ::node	0.1.1.0.0.0	large	13-14
# ::node	0.1.1.0.0.1	more	
# ::node	0.1.1.0.1	differ-02	12-13
# ::node	0.1.1.0.2	many	11-12
# ::root	0	mean-01
# ::edge	have-degree-91	ARG3	large	0.1.1.0.0	0.1.1.0.0.0
# ::edge	have-degree-91	ARG3	more	0.1.1.0.0	0.1.1.0.0.1
# ::edge	mean-01	ARG1	overlap	0	0.0
# ::edge	mean-01	ARG2	use-01	0	0.1
# ::edge	problem	ARG1-of	differ-02	0.1.1.0	0.1.1.0.1
# ::edge	problem	ARG1-of	have-degree-91	0.1.1.0	0.1.1.0.0
# ::edge	problem	quant	many	0.1.1.0	0.1.1.0.2
# ::edge	solve-01	ARG0	subproblem	0.1.1	0.1.0
# ::edge	solve-01	ARG1	problem	0.1.1	0.1.1.0
# ::edge	subproblem	ARG1-of	same-01	0.1.0	0.1.0.0
# ::edge	use-01	ARG1	subproblem	0.1	0.1.0
# ::edge	use-01	ARG2	solve-01	0.1	0.1.1
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / overlap) :ARG2 (MRPNode-2 / use-01 :ARG1 (MRPNode-3 / subproblem :ARG1-of (MRPNode-4 / same-01)) :ARG2 (MRPNode-5 / solve-01 :ARG0 MRPNode-3 :ARG1 (MRPNode-6 / problem :ARG1-of (MRPNode-7 / have-degree-91 :ARG3 (MRPNode-8 / large) :ARG3 (MRPNode-9 / more)) :ARG1-of (MRPNode-10 / differ-02) :quant (MRPNode-11 / many)))))

# ::id 281
# ::snt The differing application has a direct influence on what the definition of the term means.
# ::tok The differing application has a direct influence on what the definition of the term means .
# ::alignments 1-2|0.1.0 2-3|0.1 5-6|0.2 6-7|0 10-11|0.0.0.0 13-14|0.0.0.0.0 14-15|0.0+0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.056910 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	influence-01	6-7
# ::node	0.0	thing	14-15
# ::node	0.0.0	mean-01	14-15
# ::node	0.0.0.0	define-01	10-11
# ::node	0.0.0.0.0	term	13-14
# ::node	0.1	apply-02	2-3
# ::node	0.1.0	differ-01	1-2
# ::node	0.2	direct-02	5-6
# ::root	0	influence-01
# ::edge	apply-02	ARG1-of	differ-01	0.1	0.1.0
# ::edge	define-01	ARG1	term	0.0.0.0	0.0.0.0.0
# ::edge	influence-01	ARG0	apply-02	0	0.1
# ::edge	influence-01	ARG1	thing	0	0.0
# ::edge	influence-01	ARG1-of	direct-02	0	0.2
# ::edge	mean-01	ARG1	define-01	0.0.0	0.0.0.0
# ::edge	thing	ARG2-of	mean-01	0.0	0.0.0
(MRPNode-0 / influence-01 :ARG1 (MRPNode-1 / thing :ARG2-of (MRPNode-2 / mean-01 :ARG1 (MRPNode-3 / define-01 :ARG1 (MRPNode-4 / term)))) :ARG0 (MRPNode-5 / apply-02 :ARG1-of (MRPNode-6 / differ-01)) :ARG1-of (MRPNode-7 / direct-02))

# ::id 282
# ::snt The method takes much less time than naive methods.
# ::tok The method takes much less time than naive methods .
# ::alignments 1-2|0.1 2-3|0 3-4|0.0.0.0.0 4-5|0.0.0.0 5-6|0.0 7-8|0.0.0.1.0 8-9|0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:42.076141 ::parser eager_oracle ::smatch 0.7999999999999999 ::n_actions 31
# ::node	0	take-10	2-3
# ::node	0.0	time	5-6
# ::node	0.0.0	have-quant-91	
# ::node	0.0.0.0	less	4-5
# ::node	0.0.0.0.0	much	3-4
# ::node	0.0.0.1	method	8-9
# ::node	0.0.0.1.0	naive	7-8
# ::node	0.1	method	1-2
# ::root	0	take-10
# ::edge	have-quant-91	ARG3	less	0.0.0	0.0.0.0
# ::edge	have-quant-91	ARG4	method	0.0.0	0.0.0.1
# ::edge	less	quant	much	0.0.0.0	0.0.0.0.0
# ::edge	method	mod	naive	0.0.0.1	0.0.0.1.0
# ::edge	take-10	ARG0	method	0	0.1
# ::edge	take-10	ARG1	time	0	0.0
# ::edge	time	ARG1-of	have-quant-91	0.0	0.0.0
(MRPNode-0 / take-10 :ARG1 (MRPNode-1 / time :ARG1-of (MRPNode-2 / have-quant-91 :ARG3 (MRPNode-3 / less :quant (MRPNode-4 / much)) :ARG4 (MRPNode-5 / method :mod (MRPNode-6 / naive)))) :ARG0 (MRPNode-7 / method))

# ::id 283
# ::snt In probability theory, Bayes' theorem relates the conditional and marginal probabilities of two random events.
# ::tok In probability theory , Bayes ' theorem relates the conditional and marginal probabilities of two random events .
# ::alignments 1-2|0.2.0 2-3|0.2 4-5|0.1.1+0.1.1.0+0.1.1.0.0 6-7|0.1 7-8|0 9-10|0.0.0.0 10-11|0.0 11-12|0.0.1.0 12-13|0.0.1 14-15|0.1.0.0 15-16|0.1.0.1 16-17|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.173266 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 57
# ::node	0	relate-01	7-8
# ::node	0.0	and	10-11
# ::node	0.0.0	probability	
# ::node	0.0.0.0	condition-01	9-10
# ::node	0.0.1	probability	12-13
# ::node	0.0.1.0	marginal-02	11-12
# ::node	0.1	theorem	6-7
# ::node	0.1.0	event	16-17
# ::node	0.1.0.0	2	14-15
# ::node	0.1.0.1	random	15-16
# ::node	0.1.1	person	4-5
# ::node	0.1.1.0	name	4-5
# ::node	0.1.1.0.0	bayes	4-5
# ::node	0.2	theory	2-3
# ::node	0.2.0	probability	1-2
# ::root	0	relate-01
# ::edge	and	op1	probability	0.0	0.0.0
# ::edge	and	op2	probability	0.0	0.0.1
# ::edge	event	quant	2	0.1.0	0.1.0.0
# ::edge	event	quant	random	0.1.0	0.1.0.1
# ::edge	name	op1	bayes	0.1.1.0	0.1.1.0.0
# ::edge	person	name	name	0.1.1	0.1.1.0
# ::edge	probability	ARG1-of	condition-01	0.0.0	0.0.0.0
# ::edge	probability	ARG1-of	marginal-02	0.0.1	0.0.1.0
# ::edge	relate-01	ARG0	theorem	0	0.1
# ::edge	relate-01	ARG1	and	0	0.0
# ::edge	relate-01	location	theory	0	0.2
# ::edge	theorem	poss	event	0.1	0.1.0
# ::edge	theorem	poss	person	0.1	0.1.1
# ::edge	theory	mod	probability	0.2	0.2.0
(MRPNode-0 / relate-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / probability :ARG1-of (MRPNode-3 / condition-01)) :op2 (MRPNode-4 / probability :ARG1-of (MRPNode-5 / marginal-02))) :ARG0 (MRPNode-6 / theorem :poss (MRPNode-7 / event :quant 2 :quant (MRPNode-8 / random)) :poss (MRPNode-9 / person :name (MRPNode-10 / name :op1 bayes))) :location (MRPNode-11 / theory :mod (MRPNode-12 / probability)))

# ::id 284
# ::snt Bayes’ theorem was names after Rev Thomas Bayes and is a method used in probability theory.
# ::tok Bayes ' theorem was names after Rev Thomas Bayes and is a method used in probability theory .
# ::alignments 0-1|0.0.0.0+0.0.0.0.0 2-3|0.0.0 4-5|0.0 7-9|0.0.1+0.0.1.1+0.0.1.1.0+0.0.1.1.1 9-10|0 12-13|0.1 13-14|0.1.0 15-16|0.1.0.0.0 16-17|0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.199858 ::parser eager_oracle ::smatch 0.92 ::n_actions 47
# ::node	0	and	9-10
# ::node	0.0	name-02	4-5
# ::node	0.0.0	theorem	2-3
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	bayes	0-1
# ::node	0.0.1	person	7-9
# ::node	0.0.1.0	have-org-role-91	
# ::node	0.0.1.0.0	reverend	
# ::node	0.0.1.1	name	7-9
# ::node	0.0.1.1.0	thomas	7-9
# ::node	0.0.1.1.1	bayes	7-9
# ::node	0.1	method	12-13
# ::node	0.1.0	use-01	13-14
# ::node	0.1.0.0	theory	16-17
# ::node	0.1.0.0.0	probability	15-16
# ::root	0	and
# ::edge	and	op1	name-02	0	0.0
# ::edge	and	op2	method	0	0.1
# ::edge	have-org-role-91	ARG2	reverend	0.0.1.0	0.0.1.0.0
# ::edge	method	ARG1-of	use-01	0.1	0.1.0
# ::edge	name	op1	bayes	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	thomas	0.0.1.1	0.0.1.1.0
# ::edge	name	op2	bayes	0.0.1.1	0.0.1.1.1
# ::edge	name-02	ARG1	theorem	0.0	0.0.0
# ::edge	name-02	ARG2	person	0.0	0.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.0.1	0.0.1.0
# ::edge	person	name	name	0.0.1	0.0.1.1
# ::edge	theorem	name	name	0.0.0	0.0.0.0
# ::edge	theory	mod	probability	0.1.0.0	0.1.0.0.0
# ::edge	use-01	ARG2	theory	0.1.0	0.1.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / name-02 :ARG1 (MRPNode-2 / theorem :name (MRPNode-3 / name :op1 bayes)) :ARG2 (MRPNode-4 / person :ARG0-of (MRPNode-5 / have-org-role-91 :ARG2 (MRPNode-6 / reverend)) :name (MRPNode-7 / name :op1 thomas :op2 bayes))) :op2 (MRPNode-8 / method :ARG1-of (MRPNode-9 / use-01 :ARG2 (MRPNode-10 / theory :mod (MRPNode-11 / probability)))))

# ::id 285
# ::snt "It is ""previous"" in the sense that it does not take into account any information about B."
# ::tok " It is " " previous " " in the sense that it does not take into account any information about B. "
# ::alignments 1-2|0.0.0.2 5-6|0 14-15|0.0.0.0 15-16|0.0.0 18-19|0.0.0.1.0 19-20|0.0.0.1 21-22|0.0.0.1.1.0+0.0.0.1.1.0.0+0.0.0.1.1.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.212928 ::parser eager_oracle ::smatch 0.7368421052631577 ::n_actions 46
# ::node	0	previous	5-6
# ::node	0.0	mean-01	
# ::node	0.0.0	take-into-account-04	15-16
# ::node	0.0.0.0	-	14-15
# ::node	0.0.0.1	information	19-20
# ::node	0.0.0.1.0	any	18-19
# ::node	0.0.0.1.1	thing	
# ::node	0.0.0.1.1.0	variable	21-22
# ::node	0.0.0.1.1.0.0	name	21-22
# ::node	0.0.0.1.1.0.0.0	b	21-22
# ::node	0.0.0.2	it	1-2
# ::root	0	previous
# ::edge	information	topic	any	0.0.0.1	0.0.0.1.0
# ::edge	information	topic	thing	0.0.0.1	0.0.0.1.1
# ::edge	mean-01	ARG2	take-into-account-04	0.0	0.0.0
# ::edge	name	op1	b	0.0.0.1.1.0.0	0.0.0.1.1.0.0.0
# ::edge	previous	ARG1-of	mean-01	0	0.0
# ::edge	previous	domain	it	0	0.0.0.2
# ::edge	take-into-account-04	ARG0	it	0.0.0	0.0.0.2
# ::edge	take-into-account-04	ARG1	information	0.0.0	0.0.0.1
# ::edge	take-into-account-04	polarity	-	0.0.0	0.0.0.0
# ::edge	thing	mod	variable	0.0.0.1.1	0.0.0.1.1.0
# ::edge	variable	name	name	0.0.0.1.1.0	0.0.0.1.1.0.0
(MRPNode-0 / previous :ARG1-of (MRPNode-1 / mean-01 :ARG2 (MRPNode-2 / take-into-account-04 :polarity - :ARG1 (MRPNode-3 / information :topic (MRPNode-4 / any) :topic (MRPNode-5 / thing :mod (MRPNode-6 / variable :name (MRPNode-7 / name :op1 b)))) :ARG0 (MRPNode-8 / it))) :domain MRPNode-8)

# ::id 286
# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
# ::tok When a document is represented as a vector , each dimension corresponds to a separate term .
# ::alignments 2-3|0.2.0 4-5|0.2 7-8|0.2.1 9-10|0.1.0 10-11|0.1 11-12|0 14-15|0.0.0 15-16|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.221788 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	correspond-02	11-12
# ::node	0.0	term	15-16
# ::node	0.0.0	separate-02	14-15
# ::node	0.1	dimension	10-11
# ::node	0.1.0	each	9-10
# ::node	0.2	represent-01	4-5
# ::node	0.2.0	document	2-3
# ::node	0.2.1	vector	7-8
# ::root	0	correspond-02
# ::edge	correspond-02	ARG1	dimension	0	0.1
# ::edge	correspond-02	ARG1	term	0	0.0
# ::edge	correspond-02	time	represent-01	0	0.2
# ::edge	dimension	mod	each	0.1	0.1.0
# ::edge	represent-01	ARG1	document	0.2	0.2.0
# ::edge	represent-01	ARG2	vector	0.2	0.2.1
# ::edge	term	ARG1-of	separate-02	0.0	0.0.0
(MRPNode-0 / correspond-02 :ARG1 (MRPNode-1 / term :ARG1-of (MRPNode-2 / separate-02)) :ARG1 (MRPNode-3 / dimension :mod (MRPNode-4 / each)) :time (MRPNode-5 / represent-01 :ARG1 (MRPNode-6 / document) :ARG2 (MRPNode-7 / vector)))

# ::id 287
# ::snt The theorem is often used when we have observations and wish to compute posterior probabilities.
# ::tok The theorem is often used when we have observations and wish to compute posterior probabilities .
# ::alignments 1-2|0.0 3-4|0.2 4-5|0 6-7|0.1.0.1 7-8|0.1.0 8-9|0.1.0.0 9-10|0.1 10-11|0.1.1 12-13|0.1.1.0 14-15|0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.235982 ::parser eager_oracle ::smatch 0.9565217391304348 ::n_actions 51
# ::node	0	use-01	4-5
# ::node	0.0	theorem	1-2
# ::node	0.1	and	9-10
# ::node	0.1.0	have-03	7-8
# ::node	0.1.0.0	observe-01	8-9
# ::node	0.1.0.1	we	6-7
# ::node	0.1.1	wish-01	10-11
# ::node	0.1.1.0	comprehend-01	12-13
# ::node	0.1.1.0.0	probability	14-15
# ::node	0.1.1.0.0.0	differ-02	
# ::node	0.2	often	3-4
# ::root	0	use-01
# ::edge	and	op1	have-03	0.1	0.1.0
# ::edge	and	op2	wish-01	0.1	0.1.1
# ::edge	comprehend-01	ARG0	we	0.1.1.0	0.1.0.1
# ::edge	comprehend-01	ARG1	probability	0.1.1.0	0.1.1.0.0
# ::edge	have-03	ARG0	we	0.1.0	0.1.0.1
# ::edge	have-03	ARG1	observe-01	0.1.0	0.1.0.0
# ::edge	probability	ARG1-of	differ-02	0.1.1.0.0	0.1.1.0.0.0
# ::edge	use-01	ARG1	theorem	0	0.0
# ::edge	use-01	frequency	often	0	0.2
# ::edge	use-01	time	and	0	0.1
# ::edge	wish-01	ARG0	we	0.1.1	0.1.0.1
# ::edge	wish-01	ARG1	comprehend-01	0.1.1	0.1.1.0
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / theorem) :time (MRPNode-2 / and :op1 (MRPNode-3 / have-03 :ARG1 (MRPNode-4 / observe-01) :ARG0 (MRPNode-5 / we)) :op2 (MRPNode-6 / wish-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-7 / comprehend-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-8 / probability :ARG1-of (MRPNode-9 / differ-02))))) :frequency (MRPNode-10 / often))

# ::id 288
# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
# ::tok When a document is represented as a vector , each dimension corresponds to a separate term .
# ::alignments 2-3|0.2.0 4-5|0.2 7-8|0.2.1 9-10|0.1.0 10-11|0.1 11-12|0 14-15|0.0.0 15-16|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.244632 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	correspond-02	11-12
# ::node	0.0	term	15-16
# ::node	0.0.0	separate-02	14-15
# ::node	0.1	dimension	10-11
# ::node	0.1.0	each	9-10
# ::node	0.2	represent-01	4-5
# ::node	0.2.0	document	2-3
# ::node	0.2.1	vector	7-8
# ::root	0	correspond-02
# ::edge	correspond-02	ARG1	dimension	0	0.1
# ::edge	correspond-02	ARG1	term	0	0.0
# ::edge	correspond-02	time	represent-01	0	0.2
# ::edge	dimension	mod	each	0.1	0.1.0
# ::edge	represent-01	ARG1	document	0.2	0.2.0
# ::edge	represent-01	ARG2	vector	0.2	0.2.1
# ::edge	term	ARG1-of	separate-02	0.0	0.0.0
(MRPNode-0 / correspond-02 :ARG1 (MRPNode-1 / term :ARG1-of (MRPNode-2 / separate-02)) :ARG1 (MRPNode-3 / dimension :mod (MRPNode-4 / each)) :time (MRPNode-5 / represent-01 :ARG1 (MRPNode-6 / document) :ARG2 (MRPNode-7 / vector)))

# ::id 289
# ::snt In computer science; dynamic programming is a way of solving problems consist of overlapping subproblems and optimal substructure.
# ::tok In computer science ; dynamic programming is a way of solving problems consist of overlapping subproblems and optimal substructure .
# ::alignments 1-2|0.0.0 2-3|0.0 4-5|0.1.0 5-6|0.1 8-9|0 10-11|0.2 15-16|0.2.0.0 16-17|0.2.0 17-18|0.2.0.1.0 18-19|0.2.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:42.262527 ::parser eager_oracle ::smatch 0.9523809523809523 ::n_actions 52
# ::node	0	way	8-9
# ::node	0.0	science	2-3
# ::node	0.0.0	computer	1-2
# ::node	0.1	program-01	5-6
# ::node	0.1.0	dynamic	4-5
# ::node	0.2	solve-01	10-11
# ::node	0.2.0	and	16-17
# ::node	0.2.0.0	subproblem	15-16
# ::node	0.2.0.0.0	coverage-06	
# ::node	0.2.0.1	substructure	18-19
# ::node	0.2.0.1.0	optimal	17-18
# ::root	0	way
# ::edge	and	op1	subproblem	0.2.0	0.2.0.0
# ::edge	and	op2	substructure	0.2.0	0.2.0.1
# ::edge	program-01	mod	dynamic	0.1	0.1.0
# ::edge	science	mod	computer	0.0	0.0.0
# ::edge	solve-01	ARG1	and	0.2	0.2.0
# ::edge	subproblem	ARG1-of	coverage-06	0.2.0.0	0.2.0.0.0
# ::edge	substructure	mod	optimal	0.2.0.1	0.2.0.1.0
# ::edge	way	domain	program-01	0	0.1
# ::edge	way	domain	science	0	0.0
# ::edge	way	manner-of	solve-01	0	0.2
(MRPNode-0 / way :domain (MRPNode-1 / science :mod (MRPNode-2 / computer)) :domain (MRPNode-3 / program-01 :mod (MRPNode-4 / dynamic)) :manner-of (MRPNode-5 / solve-01 :ARG1 (MRPNode-6 / and :op1 (MRPNode-7 / subproblem :ARG1-of (MRPNode-8 / coverage-06)) :op2 (MRPNode-9 / substructure :mod (MRPNode-10 / optimal)))))

# ::id 290
# ::snt For instance, a finalized schedule of events at an exhibition is sometimes called a program.
# ::tok For instance , a finalized schedule of events at an exhibition is sometimes called a program .
# ::alignments 4-5|0.0.2.1 5-6|0.0.2 7-8|0.0.2.0 10-11|0.0.2.0.0 12-13|0.0.1 13-14|0.0 15-16|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.272176 ::parser eager_oracle ::smatch 0.8666666666666666 ::n_actions 40
# ::node	0	exemplify-01	
# ::node	0.0	call-01	13-14
# ::node	0.0.0	program	15-16
# ::node	0.0.1	sometimes	12-13
# ::node	0.0.2	schedule-01	5-6
# ::node	0.0.2.0	event	7-8
# ::node	0.0.2.0.0	exhibit-01	10-11
# ::node	0.0.2.1	finalize-01	4-5
# ::root	0	exemplify-01
# ::edge	call-01	ARG1	program	0.0	0.0.0
# ::edge	call-01	ARG1	schedule-01	0.0	0.0.2
# ::edge	call-01	frequency	sometimes	0.0	0.0.1
# ::edge	event	location	exhibit-01	0.0.2.0	0.0.2.0.0
# ::edge	exemplify-01	ARG0	call-01	0	0.0
# ::edge	schedule-01	ARG1	event	0.0.2	0.0.2.0
# ::edge	schedule-01	ARG1-of	finalize-01	0.0.2	0.0.2.1
(MRPNode-0 / exemplify-01 :ARG0 (MRPNode-1 / call-01 :ARG1 (MRPNode-2 / program) :frequency (MRPNode-3 / sometimes) :ARG1 (MRPNode-4 / schedule-01 :ARG1 (MRPNode-5 / event :location (MRPNode-6 / exhibit-01)) :ARG1-of (MRPNode-7 / finalize-01))))

# ::id 291
# ::snt Since the PageRank is the most important algorithms which is used in the Google engine.
# ::tok Since the PageRank is the most important algorithms which is used in the Google engine .
# ::alignments 0-1|0 2-3|0.0.2+0.0.2.0+0.0.2.0.0 5-6|0.0.1.0 6-7|0.0.1.1 7-8|0.0 10-11|0.0.0 13-14|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 14-15|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.288494 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 41
# ::node	0	cause-01	0-1
# ::node	0.0	algorithm	7-8
# ::node	0.0.0	use-01	10-11
# ::node	0.0.0.0	engine	14-15
# ::node	0.0.0.0.0	company	13-14
# ::node	0.0.0.0.0.0	name	13-14
# ::node	0.0.0.0.0.0.0	google	13-14
# ::node	0.0.1	have-degree-91	
# ::node	0.0.1.0	most	5-6
# ::node	0.0.1.1	important-01	6-7
# ::node	0.0.2	publication	2-3
# ::node	0.0.2.0	name	2-3
# ::node	0.0.2.0.0	pagerank	2-3
# ::root	0	cause-01
# ::edge	algorithm	ARG1-of	have-degree-91	0.0	0.0.1
# ::edge	algorithm	ARG1-of	important-01	0.0	0.0.1.1
# ::edge	algorithm	ARG1-of	use-01	0.0	0.0.0
# ::edge	algorithm	domain	publication	0.0	0.0.2
# ::edge	cause-01	ARG0	algorithm	0	0.0
# ::edge	company	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	engine	mod	company	0.0.0.0	0.0.0.0.0
# ::edge	have-degree-91	ARG2	important-01	0.0.1	0.0.1.1
# ::edge	have-degree-91	ARG3	most	0.0.1	0.0.1.0
# ::edge	name	op1	google	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op1	pagerank	0.0.2.0	0.0.2.0.0
# ::edge	publication	name	name	0.0.2	0.0.2.0
# ::edge	use-01	ARG2	engine	0.0.0	0.0.0.0
(MRPNode-0 / cause-01 :ARG0 (MRPNode-1 / algorithm :ARG1-of (MRPNode-2 / use-01 :ARG2 (MRPNode-3 / engine :mod (MRPNode-4 / company :name (MRPNode-5 / name :op1 google)))) :ARG1-of (MRPNode-6 / have-degree-91 :ARG3 (MRPNode-7 / most) :ARG2 (MRPNode-8 / important-01)) :ARG1-of MRPNode-8 :domain (MRPNode-9 / publication :name (MRPNode-10 / name :op1 pagerank))))

# ::id 292
# ::snt In the vector space model a document is represented as a vector.
# ::tok In the vector space model a document is represented as a vector .
# ::alignments 2-3|0.2.0.0 3-4|0.2.0 4-5|0.2 6-7|0.0 8-9|0 11-12|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:42.297596 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	represent-01	8-9
# ::node	0.0	document	6-7
# ::node	0.1	vector	11-12
# ::node	0.2	model-01	4-5
# ::node	0.2.0	space	3-4
# ::node	0.2.0.0	vector	2-3
# ::root	0	represent-01
# ::edge	model-01	ARG1	space	0.2	0.2.0
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	represent-01	location	model-01	0	0.2
# ::edge	space	mod	vector	0.2.0	0.2.0.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document) :ARG2 (MRPNode-2 / vector) :location (MRPNode-3 / model-01 :ARG1 (MRPNode-4 / space :mod (MRPNode-5 / vector))))

# ::id 293
# ::snt So the same rule applies with keywords and indeed longer phrases.
# ::tok So the same rule applies with keywords and indeed longer phrases .
# ::alignments 0-1|0 2-3|0.0.0.0 3-4|0.0.0 4-5|0.0 5-6|0.0.1 6-7|0.0.1.0 8-9|0.0.1.0.0 9-10|0.0.1.1.0.1 10-11|0.0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:42.311691 ::parser eager_oracle ::smatch 0.878048780487805 ::n_actions 41
# ::node	0	cause-01	0-1
# ::node	0.0	apply-02	4-5
# ::node	0.0.0	rule-01	3-4
# ::node	0.0.0.0	same-01	2-3
# ::node	0.0.1	and	5-6
# ::node	0.0.1.0	keyword	6-7
# ::node	0.0.1.0.0	indeed	8-9
# ::node	0.0.1.1	phrase	10-11
# ::node	0.0.1.1.0	have-degree-91	
# ::node	0.0.1.1.0.0	more	
# ::node	0.0.1.1.0.1	long-03	9-10
# ::root	0	cause-01
# ::edge	and	op1	keyword	0.0.1	0.0.1.0
# ::edge	and	op2	phrase	0.0.1	0.0.1.1
# ::edge	apply-02	ARG1	rule-01	0.0	0.0.0
# ::edge	apply-02	ARG2	and	0.0	0.0.1
# ::edge	cause-01	ARG1	apply-02	0	0.0
# ::edge	have-degree-91	ARG2	long-03	0.0.1.1.0	0.0.1.1.0.1
# ::edge	have-degree-91	ARG3	more	0.0.1.1.0	0.0.1.1.0.0
# ::edge	keyword	mod	indeed	0.0.1.0	0.0.1.0.0
# ::edge	phrase	ARG1-of	have-degree-91	0.0.1.1	0.0.1.1.0
# ::edge	phrase	ARG1-of	long-03	0.0.1.1	0.0.1.1.0.1
# ::edge	rule-01	ARG1-of	same-01	0.0.0	0.0.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / apply-02 :ARG1 (MRPNode-2 / rule-01 :ARG1-of (MRPNode-3 / same-01)) :ARG2 (MRPNode-4 / and :op1 (MRPNode-5 / keyword :mod (MRPNode-6 / indeed)) :op2 (MRPNode-7 / phrase :ARG1-of (MRPNode-8 / have-degree-91 :ARG3 (MRPNode-9 / more) :ARG2 (MRPNode-10 / long-03)) :ARG1-of MRPNode-10))))

# ::id 294
# ::snt Inheritance is a basic concept in object oriented programming.
# ::tok Inheritance is a basic concept in object oriented programming .
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 3-4|0.0 4-5|0 6-7|0.2.0.0 7-8|0.2.0 8-9|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:42.316948 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	concept	4-5
# ::node	0.0	basic	3-4
# ::node	0.1	medical-condition	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	inheritance	0-1
# ::node	0.2	program-01	8-9
# ::node	0.2.0	orient-01	7-8
# ::node	0.2.0.0	object	6-7
# ::root	0	concept
# ::edge	concept	domain	medical-condition	0	0.1
# ::edge	concept	mod	basic	0	0.0
# ::edge	concept	topic	program-01	0	0.2
# ::edge	medical-condition	name	name	0.1	0.1.0
# ::edge	name	op1	inheritance	0.1.0	0.1.0.0
# ::edge	orient-01	ARG2	object	0.2.0	0.2.0.0
# ::edge	program-01	ARG1-of	orient-01	0.2	0.2.0
(MRPNode-0 / concept :mod (MRPNode-1 / basic) :domain (MRPNode-2 / medical-condition :name (MRPNode-3 / name :op1 inheritance)) :topic (MRPNode-4 / program-01 :ARG1-of (MRPNode-5 / orient-01 :ARG2 (MRPNode-6 / object))))

# ::id 295
# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
# ::tok A document is represented as a vector , with each dimension corresponding to a separate term .
# ::alignments 1-2|0.0 3-4|0 6-7|0.1 9-10|0.2.0.0.0 10-11|0.2.0.0 11-12|0.2.0 14-15|0.2.0.1.0 15-16|0.2.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:42.330643 ::parser eager_oracle ::smatch 0.8823529411764706 ::n_actions 42
# ::node	0	represent-01	3-4
# ::node	0.0	document	1-2
# ::node	0.1	vector	6-7
# ::node	0.2	accompany-01	
# ::node	0.2.0	correspond-02	11-12
# ::node	0.2.0.0	dimension	10-11
# ::node	0.2.0.0.0	each	9-10
# ::node	0.2.0.1	term	15-16
# ::node	0.2.0.1.0	separate-02	14-15
# ::root	0	represent-01
# ::edge	accompany-01	ARG1	correspond-02	0.2	0.2.0
# ::edge	correspond-02	ARG1	dimension	0.2.0	0.2.0.0
# ::edge	correspond-02	ARG2	term	0.2.0	0.2.0.1
# ::edge	dimension	mod	each	0.2.0.0	0.2.0.0.0
# ::edge	represent-01	ARG0-of	accompany-01	0	0.2
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	term	ARG1-of	separate-02	0.2.0.1	0.2.0.1.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document) :ARG2 (MRPNode-2 / vector) :ARG0-of (MRPNode-3 / accompany-01 :ARG1 (MRPNode-4 / correspond-02 :ARG1 (MRPNode-5 / dimension :mod (MRPNode-6 / each)) :ARG2 (MRPNode-7 / term :ARG1-of (MRPNode-8 / separate-02)))))

# ::id 296
# ::snt In probability theory, Bayes' theorem relates the conditional and marginal probabilities of two random events.
# ::tok In probability theory , Bayes ' theorem relates the conditional and marginal probabilities of two random events .
# ::alignments 1-2|0.2.0 2-3|0.2 4-5|0.1.1+0.1.1.0+0.1.1.0.0 6-7|0.1 7-8|0 9-10|0.0.0.0 10-11|0.0 11-12|0.0.1.0 12-13|0.0.1 14-15|0.1.0.0 15-16|0.1.0.1 16-17|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.460017 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 57
# ::node	0	relate-01	7-8
# ::node	0.0	and	10-11
# ::node	0.0.0	probability	
# ::node	0.0.0.0	condition-01	9-10
# ::node	0.0.1	probability	12-13
# ::node	0.0.1.0	marginal-02	11-12
# ::node	0.1	theorem	6-7
# ::node	0.1.0	event	16-17
# ::node	0.1.0.0	2	14-15
# ::node	0.1.0.1	random	15-16
# ::node	0.1.1	person	4-5
# ::node	0.1.1.0	name	4-5
# ::node	0.1.1.0.0	bayes	4-5
# ::node	0.2	theory	2-3
# ::node	0.2.0	probability	1-2
# ::root	0	relate-01
# ::edge	and	op1	probability	0.0	0.0.0
# ::edge	and	op2	probability	0.0	0.0.1
# ::edge	event	quant	2	0.1.0	0.1.0.0
# ::edge	event	quant	random	0.1.0	0.1.0.1
# ::edge	name	op1	bayes	0.1.1.0	0.1.1.0.0
# ::edge	person	name	name	0.1.1	0.1.1.0
# ::edge	probability	ARG1-of	condition-01	0.0.0	0.0.0.0
# ::edge	probability	ARG1-of	marginal-02	0.0.1	0.0.1.0
# ::edge	relate-01	ARG0	theorem	0	0.1
# ::edge	relate-01	ARG1	and	0	0.0
# ::edge	relate-01	location	theory	0	0.2
# ::edge	theorem	poss	event	0.1	0.1.0
# ::edge	theorem	poss	person	0.1	0.1.1
# ::edge	theory	mod	probability	0.2	0.2.0
(MRPNode-0 / relate-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / probability :ARG1-of (MRPNode-3 / condition-01)) :op2 (MRPNode-4 / probability :ARG1-of (MRPNode-5 / marginal-02))) :ARG0 (MRPNode-6 / theorem :poss (MRPNode-7 / event :quant 2 :quant (MRPNode-8 / random)) :poss (MRPNode-9 / person :name (MRPNode-10 / name :op1 bayes))) :location (MRPNode-11 / theory :mod (MRPNode-12 / probability)))

# ::id 297
# ::snt A website’s page rank, is how ‘important’ it is on the web.
# ::tok A website 's page rank , is how ' important ' it is on the web .
# ::alignments 1-2|0.1 3-4|0.0.0.0 4-5|0.0+0.0.0 9-10|0 15-16|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:42.468446 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	important-01	9-10
# ::node	0.0	thing	4-5
# ::node	0.0.0	rank-01	4-5
# ::node	0.0.0.0	page	3-4
# ::node	0.1	website	1-2
# ::node	0.2	web	15-16
# ::root	0	important-01
# ::edge	important-01	ARG1	thing	0	0.0
# ::edge	important-01	location	web	0	0.2
# ::edge	important-01	location	website	0	0.1
# ::edge	rank-01	ARG1	page	0.0.0	0.0.0.0
# ::edge	thing	ARG3-of	rank-01	0.0	0.0.0
(MRPNode-0 / important-01 :ARG1 (MRPNode-1 / thing :ARG3-of (MRPNode-2 / rank-01 :ARG1 (MRPNode-3 / page))) :location (MRPNode-4 / website) :location (MRPNode-5 / web))

# ::id 298
# ::snt If the term doesn’t occur within the document, the value in the vector is zero.
# ::tok If the term does n't occur within the document , the value in the vector is zero .
# ::alignments 2-3|0.1.1 4-5|0.1.0 6-7|0.1.2 8-9|0.1.2.0 11-12|0.0 12-13|0.1 14-15|0.0.0 16-17|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:42.477633 ::parser eager_oracle ::smatch 0.7272727272727272 ::n_actions 44
# ::node	0	have-condition-91	
# ::node	0.0	value	11-12
# ::node	0.0.0	vector	14-15
# ::node	0.0.1	zero	16-17
# ::node	0.1	be-located-at-91	12-13
# ::node	0.1.0	-	4-5
# ::node	0.1.1	term	2-3
# ::node	0.1.2	within	6-7
# ::node	0.1.2.0	document	8-9
# ::root	0	have-condition-91
# ::edge	be-located-at-91	ARG1	term	0.1	0.1.1
# ::edge	be-located-at-91	ARG2	within	0.1	0.1.2
# ::edge	be-located-at-91	arg2	-	0.1	0.1.0
# ::edge	have-condition-91	ARG1	value	0	0.0
# ::edge	have-condition-91	ARG2	be-located-at-91	0	0.1
# ::edge	value	quant	vector	0.0	0.0.0
# ::edge	value	quant	zero	0.0	0.0.1
# ::edge	within	op1	document	0.1.2	0.1.2.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / value :quant (MRPNode-2 / vector) :quant (MRPNode-3 / zero)) :ARG2 (MRPNode-4 / be-located-at-91 :arg2 - :ARG1 (MRPNode-5 / term) :ARG2 (MRPNode-6 / within :op1 (MRPNode-7 / document))))

# ::id 299
# ::snt They also inherit the attributes and methods of its superclass.
# ::tok They also inherit the attributes and methods of its superclass .
# ::alignments 0-1|0.0.1.0 1-2|0.1 2-3|0 4-5|0.0.0 5-6|0.0 6-7|0.0.1 9-10|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:42.483539 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	inherit-01	2-3
# ::node	0.0	and	5-6
# ::node	0.0.0	attribute-01	4-5
# ::node	0.0.1	method	6-7
# ::node	0.0.1.0	they	0-1
# ::node	0.0.2	superclass	9-10
# ::node	0.1	also	1-2
# ::root	0	inherit-01
# ::edge	and	op1	attribute-01	0.0	0.0.0
# ::edge	and	op2	method	0.0	0.0.1
# ::edge	and	poss	superclass	0.0	0.0.2
# ::edge	inherit-01	ARG0	they	0	0.0.1.0
# ::edge	inherit-01	ARG1	and	0	0.0
# ::edge	inherit-01	mod	also	0	0.1
# ::edge	method	poss	they	0.0.1	0.0.1.0
# ::edge	superclass	poss	they	0.0.2	0.0.1.0
(MRPNode-0 / inherit-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / attribute-01) :op2 (MRPNode-3 / method :poss (MRPNode-5 / they)) :poss (MRPNode-4 / superclass :poss MRPNode-5)) :ARG0 MRPNode-5 :mod (MRPNode-6 / also))

# ::id 300
# ::snt Bayes’ theorem was names after Rev Thomas Bayes and is a method used in probability theory.
# ::tok Bayes ' theorem was names after Rev Thomas Bayes and is a method used in probability theory .
# ::alignments 0-1|0.0.0.0+0.0.0.0.0 2-3|0.0.0 4-5|0.0 7-9|0.0.1+0.0.1.1+0.0.1.1.0+0.0.1.1.1 9-10|0 12-13|0.1 13-14|0.1.0 15-16|0.1.0.0.0 16-17|0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.511973 ::parser eager_oracle ::smatch 0.92 ::n_actions 47
# ::node	0	and	9-10
# ::node	0.0	name-02	4-5
# ::node	0.0.0	theorem	2-3
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	bayes	0-1
# ::node	0.0.1	person	7-9
# ::node	0.0.1.0	have-org-role-91	
# ::node	0.0.1.0.0	reverend	
# ::node	0.0.1.1	name	7-9
# ::node	0.0.1.1.0	thomas	7-9
# ::node	0.0.1.1.1	bayes	7-9
# ::node	0.1	method	12-13
# ::node	0.1.0	use-01	13-14
# ::node	0.1.0.0	theory	16-17
# ::node	0.1.0.0.0	probability	15-16
# ::root	0	and
# ::edge	and	op1	name-02	0	0.0
# ::edge	and	op2	method	0	0.1
# ::edge	have-org-role-91	ARG2	reverend	0.0.1.0	0.0.1.0.0
# ::edge	method	ARG1-of	use-01	0.1	0.1.0
# ::edge	name	op1	bayes	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	thomas	0.0.1.1	0.0.1.1.0
# ::edge	name	op2	bayes	0.0.1.1	0.0.1.1.1
# ::edge	name-02	ARG1	theorem	0.0	0.0.0
# ::edge	name-02	ARG2	person	0.0	0.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.0.1	0.0.1.0
# ::edge	person	name	name	0.0.1	0.0.1.1
# ::edge	theorem	name	name	0.0.0	0.0.0.0
# ::edge	theory	mod	probability	0.1.0.0	0.1.0.0.0
# ::edge	use-01	ARG2	theory	0.1.0	0.1.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / name-02 :ARG1 (MRPNode-2 / theorem :name (MRPNode-3 / name :op1 bayes)) :ARG2 (MRPNode-4 / person :ARG0-of (MRPNode-5 / have-org-role-91 :ARG2 (MRPNode-6 / reverend)) :name (MRPNode-7 / name :op1 thomas :op2 bayes))) :op2 (MRPNode-8 / method :ARG1-of (MRPNode-9 / use-01 :ARG2 (MRPNode-10 / theory :mod (MRPNode-11 / probability)))))

# ::id 301
# ::snt It is also called the posterior probability because it is derived from or depends upon the specified value of B.
# ::tok It is also called the posterior probability because it is derived from or depends upon the specified value of B.
# ::alignments 2-3|0.1 3-4|0 5-6|0.3 7-8|0.2 8-9|0.0 10-11|0.0.0 12-13|0.2.0 13-14|0.0.1 16-17|0.0.0.0.0 17-18|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.537893 ::parser eager_oracle ::smatch 1.0 ::n_actions 58
# ::node	0	call-01	3-4
# ::node	0.0	it	8-9
# ::node	0.0.0	derive-01	10-11
# ::node	0.0.0.0	value	17-18
# ::node	0.0.0.0.0	specify-01	16-17
# ::node	0.0.1	depend-01	13-14
# ::node	0.1	also	2-3
# ::node	0.2	cause-01	7-8
# ::node	0.2.0	or	12-13
# ::node	0.3	posterior	5-6
# ::root	0	call-01
# ::edge	call-01	ARG1	it	0	0.0
# ::edge	call-01	ARG1-of	cause-01	0	0.2
# ::edge	call-01	ARG2	posterior	0	0.3
# ::edge	call-01	mod	also	0	0.1
# ::edge	cause-01	ARG0	or	0.2	0.2.0
# ::edge	depend-01	ARG1	value	0.0.1	0.0.0.0
# ::edge	derive-01	ARG2	value	0.0.0	0.0.0.0
# ::edge	it	ARG0-of	depend-01	0.0	0.0.1
# ::edge	it	ARG1-of	derive-01	0.0	0.0.0
# ::edge	or	op2	depend-01	0.2.0	0.0.1
# ::edge	value	ARG1-of	specify-01	0.0.0.0	0.0.0.0.0
(MRPNode-0 / call-01 :ARG1 (MRPNode-1 / it :ARG1-of (MRPNode-2 / derive-01 :ARG2 (MRPNode-3 / value :ARG1-of (MRPNode-4 / specify-01))) :ARG0-of (MRPNode-5 / depend-01 :ARG1 MRPNode-3)) :mod (MRPNode-6 / also) :ARG1-of (MRPNode-7 / cause-01 :ARG0 (MRPNode-8 / or :op2 MRPNode-5)) :ARG2 (MRPNode-9 / posterior))

# ::id 302
# ::snt One of the best known schemes is tf-idf weighting, proposed by Salton, Wong and Yang.
# ::tok One of the best known schemes is tf - idf weighting , proposed by Salton , Wong and Yang .
# ::alignments 1-2|0.1 3-4|0.1.0.0 5-6|0.1.0 7-11|0.2+0.2.0+0.2.0.0+0.2.0.1 12-13|0+0.0 14-15|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 16-17|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 17-18|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.617929 ::parser eager_oracle ::smatch 0.7941176470588235 ::n_actions 50
# ::node	0	thing	12-13
# ::node	0.0	propose-01	12-13
# ::node	0.0.0	and	17-18
# ::node	0.0.0.0	person	14-15
# ::node	0.0.0.0.0	name	14-15
# ::node	0.0.0.0.0.0	salton	14-15
# ::node	0.0.0.1	person	16-17
# ::node	0.0.0.1.0	name	16-17
# ::node	0.0.0.1.0.0	wong	16-17
# ::node	0.0.0.2	person	
# ::node	0.1	include-91	1-2
# ::node	0.1.0	scheme	5-6
# ::node	0.1.0.0	good-02	3-4
# ::node	0.1.0.1	have-degree-91	
# ::node	0.1.0.1.0	most	
# ::node	0.1.0.2	name	
# ::node	0.1.0.2.0	salton	
# ::node	0.2	scheme	7-11
# ::node	0.2.0	name	7-11
# ::node	0.2.0.0	tf	7-11
# ::node	0.2.0.1	weighting	7-11
# ::root	0	thing
# ::edge	and	op1	person	0.0.0	0.0.0.0
# ::edge	and	op2	person	0.0.0	0.0.0.1
# ::edge	and	op3	person	0.0.0	0.0.0.2
# ::edge	have-degree-91	ARG2	good-02	0.1.0.1	0.1.0.0
# ::edge	have-degree-91	ARG3	most	0.1.0.1	0.1.0.1.0
# ::edge	include-91	ARG2	scheme	0.1	0.1.0
# ::edge	name	op1	salton	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	salton	0.1.0.2	0.1.0.2.0
# ::edge	name	op1	tf	0.2.0	0.2.0.0
# ::edge	name	op1	wong	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op2	weighting	0.2.0	0.2.0.1
# ::edge	person	name	name	0.0.0.0	0.0.0.0.0
# ::edge	person	name	name	0.0.0.1	0.0.0.1.0
# ::edge	propose-01	ARG0	and	0.0	0.0.0
# ::edge	scheme	ARG1-of	good-02	0.1.0	0.1.0.0
# ::edge	scheme	ARG1-of	have-degree-91	0.1.0	0.1.0.1
# ::edge	scheme	name	name	0.1.0	0.1.0.2
# ::edge	scheme	name	name	0.2	0.2.0
# ::edge	thing	ARG1-of	include-91	0	0.1
# ::edge	thing	ARG1-of	propose-01	0	0.0
# ::edge	thing	domain	scheme	0	0.2
(MRPNode-0 / thing :ARG1-of (MRPNode-1 / propose-01 :ARG0 (MRPNode-2 / and :op1 (MRPNode-3 / person :name (MRPNode-4 / name :op1 salton)) :op2 (MRPNode-5 / person :name (MRPNode-6 / name :op1 wong)) :op3 (MRPNode-7 / person))) :ARG1-of (MRPNode-8 / include-91 :ARG2 (MRPNode-9 / scheme :ARG1-of (MRPNode-10 / good-02) :ARG1-of (MRPNode-11 / have-degree-91 :ARG2 MRPNode-10 :ARG3 (MRPNode-12 / most)) :name (MRPNode-13 / name :op1 salton))) :domain (MRPNode-14 / scheme :name (MRPNode-15 / name :op1 tf :op2 weighting)))

# ::id 303
# ::snt The vector space model has the following limitations: 1.
# ::tok The vector space model has the following limitations : 1 .
# ::alignments 1-2|0.1.0.0 2-3|0.1.0 3-4|0.1 6-7|0.2 7-8|0 9-10|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.624261 ::parser eager_oracle ::smatch 0.8695652173913043 ::n_actions 31
# ::node	0	limit-01	7-8
# ::node	0.0	1	9-10
# ::node	0.1	model	3-4
# ::node	0.1.0	space	2-3
# ::node	0.1.0.0	vector	1-2
# ::node	0.2	follow-01	6-7
# ::root	0	limit-01
# ::edge	limit-01	ARG1	model	0	0.1
# ::edge	limit-01	ARG1-of	follow-01	0	0.2
# ::edge	limit-01	li	1	0	0.0
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / limit-01 :li 1 :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG1-of (MRPNode-4 / follow-01))

# ::id 304
# ::snt It is intended to help reuse existing code with little or no modification.
# ::tok It is intended to help reuse existing code with little or no modification .
# ::alignments 2-3|0 4-5|0.0 6-7|0.0.0.0.0 7-8|0.0.0.0 9-10|0.0.0.1.0.0 10-11|0.0.0.1 11-12|0.0.0.1.1.0 12-13|0.0.0.1.0+0.0.0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:42.633725 ::parser eager_oracle ::smatch 0.8333333333333333 ::n_actions 44
# ::node	0	intend-01	2-3
# ::node	0.0	help-01	4-5
# ::node	0.0.0	repair-01	
# ::node	0.0.0.0	code	7-8
# ::node	0.0.0.0.0	exist-01	6-7
# ::node	0.0.0.1	or	10-11
# ::node	0.0.0.1.0	modify-01	12-13
# ::node	0.0.0.1.0.0	little	9-10
# ::node	0.0.0.1.1	modify-01	12-13
# ::node	0.0.0.1.1.0	-	11-12
# ::root	0	intend-01
# ::edge	code	ARG1-of	exist-01	0.0.0.0	0.0.0.0.0
# ::edge	help-01	ARG1	repair-01	0.0	0.0.0
# ::edge	intend-01	ARG1	help-01	0	0.0
# ::edge	modify-01	degree	little	0.0.0.1.0	0.0.0.1.0.0
# ::edge	modify-01	polarity	-	0.0.0.1.1	0.0.0.1.1.0
# ::edge	or	op1	modify-01	0.0.0.1	0.0.0.1.0
# ::edge	or	op2	modify-01	0.0.0.1	0.0.0.1.1
# ::edge	repair-01	ARG1	code	0.0.0	0.0.0.0
# ::edge	repair-01	instrument	or	0.0.0	0.0.0.1
(MRPNode-0 / intend-01 :ARG1 (MRPNode-1 / help-01 :ARG1 (MRPNode-2 / repair-01 :ARG1 (MRPNode-3 / code :ARG1-of (MRPNode-4 / exist-01)) :instrument (MRPNode-5 / or :op1 (MRPNode-6 / modify-01 :degree (MRPNode-7 / little)) :op2 (MRPNode-8 / modify-01 :polarity -)))))

# ::id 305
# ::snt The vector is then constucted of the frequency of eacher word (dimension).
# ::tok The vector is then constucted of the frequency of eacher word ( dimension ) .
# ::alignments 1-2|0.1 3-4|0.2 9-10|0.0.0.0.0 10-11|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.640924 ::parser eager_oracle ::smatch 0.4 ::n_actions 27
# ::node	0	incinerate-01	
# ::node	0.0	thing	
# ::node	0.0.0	rate-entity-91	
# ::node	0.0.0.0	word	10-11
# ::node	0.0.0.0.0	eacher	9-10
# ::node	0.1	vector	1-2
# ::node	0.2	then	3-4
# ::root	0	incinerate-01
# ::edge	incinerate-01	ARG1	thing	0	0.0
# ::edge	incinerate-01	time	then	0	0.2
# ::edge	incinerate-01	time	vector	0	0.1
# ::edge	rate-entity-91	ARG1	word	0.0.0	0.0.0.0
# ::edge	thing	frequency-of	rate-entity-91	0.0	0.0.0
# ::edge	word	mod	eacher	0.0.0.0	0.0.0.0.0
(MRPNode-0 / incinerate-01 :ARG1 (MRPNode-1 / thing :frequency-of (MRPNode-2 / rate-entity-91 :ARG1 (MRPNode-3 / word :mod (MRPNode-4 / eacher)))) :time (MRPNode-5 / vector) :time (MRPNode-6 / then))

# ::id 306
# ::snt The PageRank depends on the PageRank rating and number of all pages that have links to it.
# ::tok The PageRank depends on the PageRank rating and number of all pages that have links to it .
# ::alignments 1-2|0.1+0.1.1+0.1.1.0 2-3|0 6-7|0.0.0 7-8|0.0 8-9|0.0.1 10-11|0.0.1.0.0 11-12|0.0.1.0 14-15|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.659071 ::parser eager_oracle ::smatch 1.0 ::n_actions 46
# ::node	0	depend-01	2-3
# ::node	0.0	and	7-8
# ::node	0.0.0	rate-01	6-7
# ::node	0.0.1	number	8-9
# ::node	0.0.1.0	page	11-12
# ::node	0.0.1.0.0	all	10-11
# ::node	0.1	publication	1-2
# ::node	0.1.0	link-01	14-15
# ::node	0.1.1	name	1-2
# ::node	0.1.1.0	pagerank	1-2
# ::root	0	depend-01
# ::edge	and	op1	rate-01	0.0	0.0.0
# ::edge	and	op2	number	0.0	0.0.1
# ::edge	depend-01	ARG0	publication	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	link-01	ARG1	page	0.1.0	0.0.1.0
# ::edge	name	op1	pagerank	0.1.1	0.1.1.0
# ::edge	number	quant-of	page	0.0.1	0.0.1.0
# ::edge	page	mod	all	0.0.1.0	0.0.1.0.0
# ::edge	publication	ARG1-of	link-01	0.1	0.1.0
# ::edge	publication	name	name	0.1	0.1.1
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / rate-01) :op2 (MRPNode-3 / number :quant-of (MRPNode-4 / page :mod (MRPNode-5 / all)))) :ARG0 (MRPNode-6 / publication :ARG1-of (MRPNode-7 / link-01 :ARG1 MRPNode-4) :name (MRPNode-8 / name :op1 pagerank)))

# ::id 307
# ::snt Single words, keywords and occasionally longer phrases are used for terms.
# ::tok Single words , keywords and occasionally longer phrases are used for terms .
# ::alignments 0-1|0.0.0.0 1-2|0.0.0 3-4|0.0.1 4-5|0.0 5-6|0.0.2.2 6-7|0.0.2.1 7-8|0.0.2 9-10|0 11-12|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:42.677208 ::parser eager_oracle ::smatch 0.9 ::n_actions 42
# ::node	0	use-01	9-10
# ::node	0.0	and	4-5
# ::node	0.0.0	word	1-2
# ::node	0.0.0.0	single-02	0-1
# ::node	0.0.1	keyword	3-4
# ::node	0.0.2	phrase	7-8
# ::node	0.0.2.0	have-degree-91	
# ::node	0.0.2.0.0	more	
# ::node	0.0.2.1	long-03	6-7
# ::node	0.0.2.2	occasional	5-6
# ::node	0.1	term	11-12
# ::root	0	use-01
# ::edge	and	op1	word	0.0	0.0.0
# ::edge	and	op2	keyword	0.0	0.0.1
# ::edge	and	op3	phrase	0.0	0.0.2
# ::edge	have-degree-91	ARG3	more	0.0.2.0	0.0.2.0.0
# ::edge	phrase	ARG1-of	have-degree-91	0.0.2	0.0.2.0
# ::edge	phrase	ARG1-of	long-03	0.0.2	0.0.2.1
# ::edge	phrase	frequency	occasional	0.0.2	0.0.2.2
# ::edge	use-01	ARG1	and	0	0.0
# ::edge	use-01	ARG2	term	0	0.1
# ::edge	word	ARG1-of	single-02	0.0.0	0.0.0.0
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / word :ARG1-of (MRPNode-3 / single-02)) :op2 (MRPNode-4 / keyword) :op3 (MRPNode-5 / phrase :ARG1-of (MRPNode-6 / have-degree-91 :ARG3 (MRPNode-7 / more)) :ARG1-of (MRPNode-8 / long-03) :frequency (MRPNode-9 / occasional))) :ARG2 (MRPNode-10 / term))

# ::id 308
# ::snt The idea of inheritance is to reuse the existing code with little or no modification at all.
# ::tok The idea of inheritance is to reuse the existing code with little or no modification at all .
# ::alignments 1-2|0.1 3-4|0.1.0 6-7|0 8-9|0.0.0 9-10|0.0 11-12|0.2.0.1 12-13|0.2 13-14|0.2.1.0 14-15|0.2.0+0.2.1 15-17|0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.687981 ::parser eager_oracle ::smatch 1.0 ::n_actions 58
# ::node	0	reuse	6-7
# ::node	0.0	code	9-10
# ::node	0.0.0	exist-01	8-9
# ::node	0.1	idea	1-2
# ::node	0.1.0	inherit-01	3-4
# ::node	0.2	or	12-13
# ::node	0.2.0	modify-01	14-15
# ::node	0.2.0.0	at-all	15-17
# ::node	0.2.0.1	little	11-12
# ::node	0.2.1	modify-01	14-15
# ::node	0.2.1.0	-	13-14
# ::root	0	reuse
# ::edge	code	ARG1-of	exist-01	0.0	0.0.0
# ::edge	idea	topic	inherit-01	0.1	0.1.0
# ::edge	modify-01	degree	little	0.2.0	0.2.0.1
# ::edge	modify-01	mod	at-all	0.2.0	0.2.0.0
# ::edge	modify-01	polarity	-	0.2.1	0.2.1.0
# ::edge	or	op1	modify-01	0.2	0.2.0
# ::edge	or	op2	modify-01	0.2	0.2.1
# ::edge	reuse	domain	code	0	0.0
# ::edge	reuse	domain	idea	0	0.1
# ::edge	reuse	manner	or	0	0.2
(MRPNode-0 / reuse :domain (MRPNode-1 / code :ARG1-of (MRPNode-2 / exist-01)) :domain (MRPNode-3 / idea :topic (MRPNode-4 / inherit-01)) :manner (MRPNode-5 / or :op1 (MRPNode-6 / modify-01 :mod (MRPNode-7 / at-all) :degree (MRPNode-8 / little)) :op2 (MRPNode-9 / modify-01 :polarity -)))

# ::id 309
# ::snt It is valid in all common interpretations of probability.
# ::tok It is valid in all common interpretations of probability .
# ::alignments 0-1|0.0 2-3|0 4-5|0.1.2 5-6|0.1.1 6-7|0.1 8-9|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.692704 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	valid-02	2-3
# ::node	0.0	it	0-1
# ::node	0.1	interpret-01	6-7
# ::node	0.1.0	probability	8-9
# ::node	0.1.1	common	5-6
# ::node	0.1.2	all	4-5
# ::root	0	valid-02
# ::edge	interpret-01	ARG1	probability	0.1	0.1.0
# ::edge	interpret-01	mod	all	0.1	0.1.2
# ::edge	interpret-01	mod	common	0.1	0.1.1
# ::edge	valid-02	ARG1	it	0	0.0
# ::edge	valid-02	ARG2	interpret-01	0	0.1
(MRPNode-0 / valid-02 :ARG1 (MRPNode-1 / it) :ARG2 (MRPNode-2 / interpret-01 :ARG1 (MRPNode-3 / probability) :mod (MRPNode-4 / common) :mod (MRPNode-5 / all)))

# ::id 310
# ::snt The value of a vector is non-zero if a term occurs in the document.
# ::tok The value of a vector is non - zero if a term occurs in the document .
# ::alignments 1-2|0.0.1+0.0.1.0 2-3|0 4-5|0.0.1.0.0 6-7|0.0.0 8-9|0.0.2 11-12|0.1.0 13-14|0.1 15-16|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:42.703988 ::parser eager_oracle ::smatch 0.7878787878787878 ::n_actions 45
# ::node	0	have-condition-91	2-3
# ::node	0.0	equal-01	
# ::node	0.0.0	-	6-7
# ::node	0.0.1	thing	1-2
# ::node	0.0.1.0	value-01	1-2
# ::node	0.0.1.0.0	vector	4-5
# ::node	0.0.2	zero	8-9
# ::node	0.1	be-located-at-91	13-14
# ::node	0.1.0	term	11-12
# ::node	0.1.1	document	15-16
# ::root	0	have-condition-91
# ::edge	be-located-at-91	ARG1	term	0.1	0.1.0
# ::edge	be-located-at-91	ARG2	document	0.1	0.1.1
# ::edge	equal-01	ARG1	thing	0.0	0.0.1
# ::edge	equal-01	ARG2	zero	0.0	0.0.2
# ::edge	equal-01	polarity	-	0.0	0.0.0
# ::edge	have-condition-91	ARG1	equal-01	0	0.0
# ::edge	have-condition-91	ARG2	be-located-at-91	0	0.1
# ::edge	thing	ARG2-of	value-01	0.0.1	0.0.1.0
# ::edge	value-01	ARG1	vector	0.0.1.0	0.0.1.0.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / equal-01 :polarity - :ARG1 (MRPNode-2 / thing :ARG2-of (MRPNode-3 / value-01 :ARG1 (MRPNode-4 / vector))) :ARG2 (MRPNode-5 / zero)) :ARG2 (MRPNode-6 / be-located-at-91 :ARG1 (MRPNode-7 / term) :ARG2 (MRPNode-8 / document)))

# ::id 311
# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
# ::tok When a document is represented as a vector , each dimension corresponds to a separate term .
# ::alignments 2-3|0.2.0 4-5|0.2 7-8|0.2.1 9-10|0.1.0 10-11|0.1 11-12|0 14-15|0.0.0 15-16|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.712486 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	correspond-02	11-12
# ::node	0.0	term	15-16
# ::node	0.0.0	separate-02	14-15
# ::node	0.1	dimension	10-11
# ::node	0.1.0	each	9-10
# ::node	0.2	represent-01	4-5
# ::node	0.2.0	document	2-3
# ::node	0.2.1	vector	7-8
# ::root	0	correspond-02
# ::edge	correspond-02	ARG1	dimension	0	0.1
# ::edge	correspond-02	ARG1	term	0	0.0
# ::edge	correspond-02	time	represent-01	0	0.2
# ::edge	dimension	mod	each	0.1	0.1.0
# ::edge	represent-01	ARG1	document	0.2	0.2.0
# ::edge	represent-01	ARG2	vector	0.2	0.2.1
# ::edge	term	ARG1-of	separate-02	0.0	0.0.0
(MRPNode-0 / correspond-02 :ARG1 (MRPNode-1 / term :ARG1-of (MRPNode-2 / separate-02)) :ARG1 (MRPNode-3 / dimension :mod (MRPNode-4 / each)) :time (MRPNode-5 / represent-01 :ARG1 (MRPNode-6 / document) :ARG2 (MRPNode-7 / vector)))

# ::id 312
# ::snt Inheritance is an important feature in object orientated programming.
# ::tok Inheritance is an important feature in object orientated programming .
# ::alignments 3-4|0.0 4-5|0 6-7|0.1.0.0 7-8|0.1.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:42.716946 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 27
# ::node	0	feature	4-5
# ::node	0.0	important-01	3-4
# ::node	0.1	programming	8-9
# ::node	0.1.0	orient-01	7-8
# ::node	0.1.0.0	object	6-7
# ::node	0.2	influence-01	
# ::root	0	feature
# ::edge	feature	ARG1-of	important-01	0	0.0
# ::edge	feature	domain	influence-01	0	0.2
# ::edge	feature	domain	programming	0	0.1
# ::edge	orient-01	ARG2	object	0.1.0	0.1.0.0
# ::edge	programming	ARG1-of	orient-01	0.1	0.1.0
(MRPNode-0 / feature :ARG1-of (MRPNode-1 / important-01) :domain (MRPNode-2 / programming :ARG1-of (MRPNode-3 / orient-01 :ARG2 (MRPNode-4 / object))) :domain (MRPNode-5 / influence-01))

# ::id 313
# ::snt So in essence it is a popularity contest between WebPages.
# ::tok So in essence it is a popularity contest between WebPages .
# ::alignments 0-1|0 2-3|0.0.1 3-4|0.0.0 6-7|0.0.2 7-8|0.0 8-9|0.0.3 9-10|0.0.3.0+0.0.3.0.0+0.0.3.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.733940 ::parser eager_oracle ::smatch 0.8717948717948718 ::n_actions 34
# ::node	0	cause-01	0-1
# ::node	0.0	contest-02	7-8
# ::node	0.0.0	it	3-4
# ::node	0.0.1	essence	2-3
# ::node	0.0.2	popularity	6-7
# ::node	0.0.3	between	8-9
# ::node	0.0.3.0	company	9-10
# ::node	0.0.3.0.0	name	9-10
# ::node	0.0.3.0.0.0	webpages	9-10
# ::node	0.0.3.1	company	
# ::node	0.0.3.1.0	name	
# ::node	0.0.3.1.0.0	webpages	
# ::root	0	cause-01
# ::edge	between	op1	company	0.0.3	0.0.3.0
# ::edge	between	op2	company	0.0.3	0.0.3.1
# ::edge	cause-01	ARG1	contest-02	0	0.0
# ::edge	company	name	name	0.0.3.0	0.0.3.0.0
# ::edge	company	name	name	0.0.3.1	0.0.3.1.0
# ::edge	contest-02	ARG0	between	0.0	0.0.3
# ::edge	contest-02	ARG1	it	0.0	0.0.0
# ::edge	contest-02	ARG3	popularity	0.0	0.0.2
# ::edge	contest-02	mod	essence	0.0	0.0.1
# ::edge	name	op1	webpages	0.0.3.0.0	0.0.3.0.0.0
# ::edge	name	op1	webpages	0.0.3.1.0	0.0.3.1.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / contest-02 :ARG1 (MRPNode-2 / it) :mod (MRPNode-3 / essence) :ARG3 (MRPNode-4 / popularity) :ARG0 (MRPNode-5 / between :op1 (MRPNode-6 / company :name (MRPNode-7 / name :op1 webpages)) :op2 (MRPNode-8 / company :name (MRPNode-9 / name :op1 webpages)))))

# ::id 314
# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
# ::tok The basic idea is to represent each document as a vector of certain weighted word frequencies .
# ::alignments 1-2|0.1.0 2-3|0.1 5-6|0 6-7|0.0.0 7-8|0.0 10-11|0.2 12-13|0.2.0.0 13-14|0.2.0.2 14-15|0.2.0.1 15-16|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.747082 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	represent-01	5-6
# ::node	0.0	document	7-8
# ::node	0.0.0	each	6-7
# ::node	0.1	idea	2-3
# ::node	0.1.0	basic	1-2
# ::node	0.2	vector	10-11
# ::node	0.2.0	frequency	15-16
# ::node	0.2.0.0	certain	12-13
# ::node	0.2.0.1	word	14-15
# ::node	0.2.0.2	weight-01	13-14
# ::root	0	represent-01
# ::edge	document	mod	each	0.0	0.0.0
# ::edge	frequency	ARG1-of	weight-01	0.2.0	0.2.0.2
# ::edge	frequency	ARG1-of	word	0.2.0	0.2.0.1
# ::edge	frequency	mod	certain	0.2.0	0.2.0.0
# ::edge	idea	mod	basic	0.1	0.1.0
# ::edge	represent-01	ARG0	idea	0	0.1
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.2
# ::edge	vector	consist-of	frequency	0.2	0.2.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document :mod (MRPNode-2 / each)) :ARG0 (MRPNode-3 / idea :mod (MRPNode-4 / basic)) :ARG2 (MRPNode-5 / vector :consist-of (MRPNode-6 / frequency :mod (MRPNode-7 / certain) :ARG1-of (MRPNode-8 / word) :ARG1-of (MRPNode-9 / weight-01))))

# ::id 315
# ::snt Object oriented programming is a style of programming that supports encapsulation, inheritance, and polymorphism.
# ::tok Object oriented programming is a style of programming that supports encapsulation , inheritance , and polymorphism .
# ::alignments 0-1|0.2.0 1-2|0.2 2-3|0 5-6|0.0 9-10|0.1 12-13|0.1.0.1+0.1.0.1.0 14-15|0.1.0 15-16|0.1.0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.762676 ::parser eager_oracle ::smatch 0.8 ::n_actions 46
# ::node	0	program-01	2-3
# ::node	0.0	style	5-6
# ::node	0.1	support-01	9-10
# ::node	0.1.0	and	14-15
# ::node	0.1.0.0	thing	
# ::node	0.1.0.0.0	copy-01	
# ::node	0.1.0.1	thing	12-13
# ::node	0.1.0.1.0	inherit-01	12-13
# ::node	0.1.0.2	thing	
# ::node	0.1.0.2.0	polymorphism	15-16
# ::node	0.2	orient-01	1-2
# ::node	0.2.0	object	0-1
# ::root	0	program-01
# ::edge	and	op1	thing	0.1.0	0.1.0.0
# ::edge	and	op2	thing	0.1.0	0.1.0.1
# ::edge	and	op3	thing	0.1.0	0.1.0.2
# ::edge	orient-01	ARG3	object	0.2	0.2.0
# ::edge	program-01	ARG0-of	support-01	0	0.1
# ::edge	program-01	domain	orient-01	0	0.2
# ::edge	program-01	mod	style	0	0.0
# ::edge	support-01	ARG1	and	0.1	0.1.0
# ::edge	thing	ARG2-of	copy-01	0.1.0.0	0.1.0.0.0
# ::edge	thing	ARG2-of	inherit-01	0.1.0.1	0.1.0.1.0
# ::edge	thing	mod	polymorphism	0.1.0.2	0.1.0.2.0
(MRPNode-0 / program-01 :mod (MRPNode-1 / style) :ARG0-of (MRPNode-2 / support-01 :ARG1 (MRPNode-3 / and :op1 (MRPNode-4 / thing :ARG2-of (MRPNode-5 / copy-01)) :op2 (MRPNode-6 / thing :ARG2-of (MRPNode-7 / inherit-01)) :op3 (MRPNode-8 / thing :mod (MRPNode-9 / polymorphism)))) :domain (MRPNode-10 / orient-01 :ARG3 (MRPNode-11 / object)))

# ::id 316
# ::snt The vector space model has some limitations: 1.
# ::tok The vector space model has some limitations : 1 .
# ::alignments 1-2|0.1.0.0 2-3|0.1.0 3-4|0.1 6-7|0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.766347 ::parser eager_oracle ::smatch 0.8421052631578948 ::n_actions 27
# ::node	0	limit-01	6-7
# ::node	0.0	1	8-9
# ::node	0.1	model	3-4
# ::node	0.1.0	space	2-3
# ::node	0.1.0.0	vector	1-2
# ::root	0	limit-01
# ::edge	limit-01	ARG1	model	0	0.1
# ::edge	limit-01	li	1	0	0.0
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / limit-01 :li 1 :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / space :mod (MRPNode-3 / vector))))

# ::id 317
# ::snt The theorem is often used when we have observations and wish to compute posterior probabilities.
# ::tok The theorem is often used when we have observations and wish to compute posterior probabilities .
# ::alignments 1-2|0.0 3-4|0.2 4-5|0 6-7|0.1.0.1 7-8|0.1.0 8-9|0.1.0.0 9-10|0.1 10-11|0.1.1 12-13|0.1.1.0 14-15|0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:42.783437 ::parser eager_oracle ::smatch 0.9565217391304348 ::n_actions 51
# ::node	0	use-01	4-5
# ::node	0.0	theorem	1-2
# ::node	0.1	and	9-10
# ::node	0.1.0	have-03	7-8
# ::node	0.1.0.0	observe-01	8-9
# ::node	0.1.0.1	we	6-7
# ::node	0.1.1	wish-01	10-11
# ::node	0.1.1.0	comprehend-01	12-13
# ::node	0.1.1.0.0	probability	14-15
# ::node	0.1.1.0.0.0	differ-02	
# ::node	0.2	often	3-4
# ::root	0	use-01
# ::edge	and	op1	have-03	0.1	0.1.0
# ::edge	and	op2	wish-01	0.1	0.1.1
# ::edge	comprehend-01	ARG0	we	0.1.1.0	0.1.0.1
# ::edge	comprehend-01	ARG1	probability	0.1.1.0	0.1.1.0.0
# ::edge	have-03	ARG0	we	0.1.0	0.1.0.1
# ::edge	have-03	ARG1	observe-01	0.1.0	0.1.0.0
# ::edge	probability	ARG1-of	differ-02	0.1.1.0.0	0.1.1.0.0.0
# ::edge	use-01	ARG1	theorem	0	0.0
# ::edge	use-01	frequency	often	0	0.2
# ::edge	use-01	time	and	0	0.1
# ::edge	wish-01	ARG0	we	0.1.1	0.1.0.1
# ::edge	wish-01	ARG1	comprehend-01	0.1.1	0.1.1.0
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / theorem) :time (MRPNode-2 / and :op1 (MRPNode-3 / have-03 :ARG1 (MRPNode-4 / observe-01) :ARG0 (MRPNode-5 / we)) :op2 (MRPNode-6 / wish-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-7 / comprehend-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-8 / probability :ARG1-of (MRPNode-9 / differ-02))))) :frequency (MRPNode-10 / often))

# ::id 318
# ::snt One of the best known schemes is tf-idf weighting (see the example below).
# ::tok One of the best known schemes is tf - idf weighting ( see the example below ) .
# ::alignments 0-1|0.0.0 1-2|0.0+0.0.0.0+0.0.0.0.0.0.1 3-4|0.0.0.0.0.0.0+0.0.0.0.0.0.1.0 4-5|0.0.0.0.0.0 5-6|0.0.0.0.0+0.0.1 12-13|0.1+0.1.0+0.1.2 14-15|0.1.1 15-16|0.1.1.0 17-18|0 ::annotator aligner3.py ::date 2021-03-11 23:00:43.434999 ::parser eager_oracle ::smatch 0.8923076923076922 ::n_actions 75
# ::node	0	multi-sentence	17-18
# ::node	0.0	have-mod-91	1-2
# ::node	0.0.0	thing	0-1
# ::node	0.0.0.0	include-91	1-2
# ::node	0.0.0.0.0	scheme	5-6
# ::node	0.0.0.0.0.0	know-02	4-5
# ::node	0.0.0.0.0.0.0	good-02	3-4
# ::node	0.0.0.0.0.0.1	have-degree-91	1-2
# ::node	0.0.0.0.0.0.1.0	most	3-4
# ::node	0.0.1	scheme	5-6
# ::node	0.0.1.0	name	7-11
# ::node	0.0.1.0.0	tf	7-11
# ::node	0.0.1.0.1	weighting	7-11
# ::node	0.1	see-01	12-13
# ::node	0.1.0	imperative	12-13
# ::node	0.1.1	exemplify-01	14-15
# ::node	0.1.1.0	below	15-16
# ::node	0.1.2	you	12-13
# ::root	0	multi-sentence
# ::edge	exemplify-01	ARG0	below	0.1.1	0.1.1.0
# ::edge	have-degree-91	ARG2	good-02	0.0.0.0.0.0.1	0.0.0.0.0.0.0
# ::edge	have-degree-91	ARG3	most	0.0.0.0.0.0.1	0.0.0.0.0.0.1.0
# ::edge	have-mod-91	ARG1	scheme	0.0	0.0.1
# ::edge	have-mod-91	ARG1	thing	0.0	0.0.0
# ::edge	include-91	ARG2	scheme	0.0.0.0	0.0.0.0.0
# ::edge	know-02	ARG1-of	good-02	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	know-02	ARG1-of	have-degree-91	0.0.0.0.0.0	0.0.0.0.0.0.1
# ::edge	multi-sentence	snt1	have-mod-91	0	0.0
# ::edge	multi-sentence	snt2	see-01	0	0.1
# ::edge	name	op1	tf	0.0.1.0	0.0.1.0.0
# ::edge	name	op2	weighting	0.0.1.0	0.0.1.0.1
# ::edge	scheme	ARG1-of	know-02	0.0.0.0.0	0.0.0.0.0.0
# ::edge	scheme	name	name	0.0.1	0.0.1.0
# ::edge	see-01	ARG0	you	0.1	0.1.2
# ::edge	see-01	ARG1	exemplify-01	0.1	0.1.1
# ::edge	see-01	mode	imperative	0.1	0.1.0
# ::edge	thing	ARG1-of	include-91	0.0.0	0.0.0.0
(MRPNode-0 / multi-sentence :snt1 (MRPNode-1 / have-mod-91 :ARG1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / include-91 :ARG2 (MRPNode-4 / scheme :ARG1-of (MRPNode-5 / know-02 :ARG1-of (MRPNode-6 / good-02) :ARG1-of (MRPNode-7 / have-degree-91 :ARG2 MRPNode-6 :ARG3 (MRPNode-8 / most)))))) :ARG1 (MRPNode-9 / scheme :name (MRPNode-10 / name :op1 tf :op2 weighting))) :snt2 (MRPNode-11 / see-01 :mode imperative :ARG1 (MRPNode-12 / exemplify-01 :ARG0 (MRPNode-13 / below)) :ARG0 (MRPNode-14 / you)))

# ::id 319
# ::snt It is therefore used to create relationships between one object and another.
# ::tok It is therefore used to create relationships between one object and another .
# ::alignments 0-1|0.0.0 3-4|0.0 5-6|0.0.1 6-7|0.0.1.0 8-9|0.0.1.0.0.0 9-10|0.0.1.0.0+0.0.1.0.1 11-12|0.0.1.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:43.463330 ::parser eager_oracle ::smatch 0.8888888888888888 ::n_actions 42
# ::node	0	cause-01	
# ::node	0.0	use-01	3-4
# ::node	0.0.0	it	0-1
# ::node	0.0.1	create-01	5-6
# ::node	0.0.1.0	relation-03	6-7
# ::node	0.0.1.0.0	object	9-10
# ::node	0.0.1.0.0.0	one	8-9
# ::node	0.0.1.0.1	object	9-10
# ::node	0.0.1.0.1.0	another	11-12
# ::root	0	cause-01
# ::edge	cause-01	ARG1	use-01	0	0.0
# ::edge	create-01	ARG0	it	0.0.1	0.0.0
# ::edge	create-01	ARG1	relation-03	0.0.1	0.0.1.0
# ::edge	object	mod	another	0.0.1.0.1	0.0.1.0.1.0
# ::edge	object	mod	one	0.0.1.0.0	0.0.1.0.0.0
# ::edge	relation-03	ARG1	object	0.0.1.0	0.0.1.0.0
# ::edge	relation-03	ARG2	object	0.0.1.0	0.0.1.0.1
# ::edge	use-01	ARG1	it	0.0	0.0.0
# ::edge	use-01	ARG2	create-01	0.0	0.0.1
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / use-01 :ARG1 (MRPNode-2 / it) :ARG2 (MRPNode-3 / create-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-4 / relation-03 :ARG1 (MRPNode-5 / object :mod (MRPNode-6 / one)) :ARG2 (MRPNode-7 / object :mod (MRPNode-8 / another))))))

# ::id 320
# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
# ::tok When a document is represented as a vector , each dimension corresponds to a separate term .
# ::alignments 2-3|0.2.0 4-5|0.2 7-8|0.2.1 9-10|0.1.0 10-11|0.1 11-12|0 14-15|0.0.0 15-16|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:43.472036 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	correspond-02	11-12
# ::node	0.0	term	15-16
# ::node	0.0.0	separate-02	14-15
# ::node	0.1	dimension	10-11
# ::node	0.1.0	each	9-10
# ::node	0.2	represent-01	4-5
# ::node	0.2.0	document	2-3
# ::node	0.2.1	vector	7-8
# ::root	0	correspond-02
# ::edge	correspond-02	ARG1	dimension	0	0.1
# ::edge	correspond-02	ARG1	term	0	0.0
# ::edge	correspond-02	time	represent-01	0	0.2
# ::edge	dimension	mod	each	0.1	0.1.0
# ::edge	represent-01	ARG1	document	0.2	0.2.0
# ::edge	represent-01	ARG2	vector	0.2	0.2.1
# ::edge	term	ARG1-of	separate-02	0.0	0.0.0
(MRPNode-0 / correspond-02 :ARG1 (MRPNode-1 / term :ARG1-of (MRPNode-2 / separate-02)) :ARG1 (MRPNode-3 / dimension :mod (MRPNode-4 / each)) :time (MRPNode-5 / represent-01 :ARG1 (MRPNode-6 / document) :ARG2 (MRPNode-7 / vector)))

# ::id 321
# ::snt If a term appears in the document then its value in the vector is non-zero.
# ::tok If a term appears in the document then its value in the vector is non - zero .
# ::alignments 2-3|0.0.1.1 3-4|0.1 6-7|0.1.0 9-10|0.0.1 12-13|0.0.1.0 14-15|0.0.0 16-17|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:43.481233 ::parser eager_oracle ::smatch 0.7999999999999999 ::n_actions 41
# ::node	0	have-condition-91	
# ::node	0.0	zero	16-17
# ::node	0.0.0	-	14-15
# ::node	0.0.1	value	9-10
# ::node	0.0.1.0	vector	12-13
# ::node	0.0.1.1	term	2-3
# ::node	0.1	appear-01	3-4
# ::node	0.1.0	document	6-7
# ::root	0	have-condition-91
# ::edge	appear-01	ARG1	term	0.1	0.0.1.1
# ::edge	appear-01	location	document	0.1	0.1.0
# ::edge	have-condition-91	ARG1	zero	0	0.0
# ::edge	have-condition-91	ARG2	appear-01	0	0.1
# ::edge	value	location	vector	0.0.1	0.0.1.0
# ::edge	value	poss	term	0.0.1	0.0.1.1
# ::edge	zero	domain	value	0.0	0.0.1
# ::edge	zero	polarity	-	0.0	0.0.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / zero :polarity - :domain (MRPNode-2 / value :location (MRPNode-3 / vector) :poss (MRPNode-5 / term))) :ARG2 (MRPNode-4 / appear-01 :ARG1 MRPNode-5 :location (MRPNode-6 / document)))

# ::id 322
# ::snt If a term exists in a document, its value in the vector is not equal to zero.
# ::tok If a term exists in a document , its value in the vector is not equal to zero .
# ::alignments 2-3|0.3.0 3-4|0.3 6-7|0.3.1 9-10|0.1+0.1.0 12-13|0.1.0.0 14-15|0.0 15-16|0 17-18|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:43.491208 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	equal-01	15-16
# ::node	0.0	-	14-15
# ::node	0.1	thing	9-10
# ::node	0.1.0	value-01	9-10
# ::node	0.1.0.0	vector	12-13
# ::node	0.2	zero	17-18
# ::node	0.3	exist-01	3-4
# ::node	0.3.0	term	2-3
# ::node	0.3.1	document	6-7
# ::root	0	equal-01
# ::edge	equal-01	ARG1	thing	0	0.1
# ::edge	equal-01	ARG2	zero	0	0.2
# ::edge	equal-01	condition	exist-01	0	0.3
# ::edge	equal-01	polarity	-	0	0.0
# ::edge	exist-01	ARG1	term	0.3	0.3.0
# ::edge	exist-01	location	document	0.3	0.3.1
# ::edge	thing	ARG2-of	value-01	0.1	0.1.0
# ::edge	value-01	location	vector	0.1.0	0.1.0.0
(MRPNode-0 / equal-01 :polarity - :ARG1 (MRPNode-1 / thing :ARG2-of (MRPNode-2 / value-01 :location (MRPNode-3 / vector))) :ARG2 (MRPNode-4 / zero) :condition (MRPNode-5 / exist-01 :ARG1 (MRPNode-6 / term) :location (MRPNode-7 / document)))

# ::id 323
# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
# ::tok A document is represented as a vector , with each dimension corresponding to a separate term .
# ::alignments 1-2|0.0 3-4|0 6-7|0.1 9-10|0.2.0.0.0 10-11|0.2.0.0 11-12|0.2.0 14-15|0.2.0.1.0 15-16|0.2.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:43.500597 ::parser eager_oracle ::smatch 0.8823529411764706 ::n_actions 42
# ::node	0	represent-01	3-4
# ::node	0.0	document	1-2
# ::node	0.1	vector	6-7
# ::node	0.2	accompany-01	
# ::node	0.2.0	correspond-02	11-12
# ::node	0.2.0.0	dimension	10-11
# ::node	0.2.0.0.0	each	9-10
# ::node	0.2.0.1	term	15-16
# ::node	0.2.0.1.0	separate-02	14-15
# ::root	0	represent-01
# ::edge	accompany-01	ARG1	correspond-02	0.2	0.2.0
# ::edge	correspond-02	ARG1	dimension	0.2.0	0.2.0.0
# ::edge	correspond-02	ARG2	term	0.2.0	0.2.0.1
# ::edge	dimension	mod	each	0.2.0.0	0.2.0.0.0
# ::edge	represent-01	ARG0-of	accompany-01	0	0.2
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	term	ARG1-of	separate-02	0.2.0.1	0.2.0.1.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document) :ARG2 (MRPNode-2 / vector) :ARG0-of (MRPNode-3 / accompany-01 :ARG1 (MRPNode-4 / correspond-02 :ARG1 (MRPNode-5 / dimension :mod (MRPNode-6 / each)) :ARG2 (MRPNode-7 / term :ARG1-of (MRPNode-8 / separate-02)))))

# ::id 324
# ::snt A document is represented as a vector.
# ::tok A document is represented as a vector .
# ::alignments 1-2|0.0 3-4|0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:43.502831 ::parser eager_oracle ::smatch 1.0 ::n_actions 19
# ::node	0	represent-01	3-4
# ::node	0.0	document	1-2
# ::node	0.1	vector	6-7
# ::root	0	represent-01
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document) :ARG2 (MRPNode-2 / vector))

# ::id 325
# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
# ::tok A document is represented as a vector , with each dimension corresponding to a separate term .
# ::alignments 1-2|0.0 3-4|0 6-7|0.1 9-10|0.2.0.0.0 10-11|0.2.0.0 11-12|0.2.0 14-15|0.2.0.1.0 15-16|0.2.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:43.513192 ::parser eager_oracle ::smatch 0.8823529411764706 ::n_actions 42
# ::node	0	represent-01	3-4
# ::node	0.0	document	1-2
# ::node	0.1	vector	6-7
# ::node	0.2	accompany-01	
# ::node	0.2.0	correspond-02	11-12
# ::node	0.2.0.0	dimension	10-11
# ::node	0.2.0.0.0	each	9-10
# ::node	0.2.0.1	term	15-16
# ::node	0.2.0.1.0	separate-02	14-15
# ::root	0	represent-01
# ::edge	accompany-01	ARG1	correspond-02	0.2	0.2.0
# ::edge	correspond-02	ARG1	dimension	0.2.0	0.2.0.0
# ::edge	correspond-02	ARG2	term	0.2.0	0.2.0.1
# ::edge	dimension	mod	each	0.2.0.0	0.2.0.0.0
# ::edge	represent-01	ARG0-of	accompany-01	0	0.2
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	term	ARG1-of	separate-02	0.2.0.1	0.2.0.1.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document) :ARG2 (MRPNode-2 / vector) :ARG0-of (MRPNode-3 / accompany-01 :ARG1 (MRPNode-4 / correspond-02 :ARG1 (MRPNode-5 / dimension :mod (MRPNode-6 / each)) :ARG2 (MRPNode-7 / term :ARG1-of (MRPNode-8 / separate-02)))))

# ::id 326
# ::snt To derive the theorem, we begin with the definition of conditional probability.
# ::tok To derive the theorem , we begin with the definition of conditional probability .
# ::alignments 1-2|0.2 3-4|0.2.0 5-6|0.1 6-7|0 9-10|0.0 11-12|0.0.0.0 12-13|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:43.520088 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	begin-01	6-7
# ::node	0.0	define-01	9-10
# ::node	0.0.0	probability	12-13
# ::node	0.0.0.0	condition-01	11-12
# ::node	0.1	we	5-6
# ::node	0.2	derive-01	1-2
# ::node	0.2.0	theorem	3-4
# ::root	0	begin-01
# ::edge	begin-01	ARG0	we	0	0.1
# ::edge	begin-01	ARG1	define-01	0	0.0
# ::edge	begin-01	purpose	derive-01	0	0.2
# ::edge	define-01	ARG1	probability	0.0	0.0.0
# ::edge	derive-01	ARG0	we	0.2	0.1
# ::edge	derive-01	ARG1	theorem	0.2	0.2.0
# ::edge	probability	mod	condition-01	0.0.0	0.0.0.0
(MRPNode-0 / begin-01 :ARG1 (MRPNode-1 / define-01 :ARG1 (MRPNode-2 / probability :mod (MRPNode-3 / condition-01))) :ARG0 (MRPNode-4 / we) :purpose (MRPNode-5 / derive-01 :ARG0 MRPNode-4 :ARG1 (MRPNode-6 / theorem)))

# ::id 327
# ::snt Characterise structure of an optimal solution.
# ::tok Characterise structure of an optimal solution .
# ::alignments 0-1|0 1-2|0.0 4-5|0.0.0.0 5-6|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:43.523036 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	characteristic-02	0-1
# ::node	0.0	structure	1-2
# ::node	0.0.0	solve-01	5-6
# ::node	0.0.0.0	optimal	4-5
# ::root	0	characteristic-02
# ::edge	characteristic-02	ARG1	structure	0	0.0
# ::edge	solve-01	mod	optimal	0.0.0	0.0.0.0
# ::edge	structure	poss	solve-01	0.0	0.0.0
(MRPNode-0 / characteristic-02 :ARG1 (MRPNode-1 / structure :poss (MRPNode-2 / solve-01 :mod (MRPNode-3 / optimal))))

# ::id 328
# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
# ::tok When a document is represented as a vector , each dimension corresponds to a separate term .
# ::alignments 2-3|0.2.0 4-5|0.2 7-8|0.2.1 9-10|0.1.0 10-11|0.1 11-12|0 14-15|0.0.0 15-16|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:43.531225 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	correspond-02	11-12
# ::node	0.0	term	15-16
# ::node	0.0.0	separate-02	14-15
# ::node	0.1	dimension	10-11
# ::node	0.1.0	each	9-10
# ::node	0.2	represent-01	4-5
# ::node	0.2.0	document	2-3
# ::node	0.2.1	vector	7-8
# ::root	0	correspond-02
# ::edge	correspond-02	ARG1	dimension	0	0.1
# ::edge	correspond-02	ARG1	term	0	0.0
# ::edge	correspond-02	time	represent-01	0	0.2
# ::edge	dimension	mod	each	0.1	0.1.0
# ::edge	represent-01	ARG1	document	0.2	0.2.0
# ::edge	represent-01	ARG2	vector	0.2	0.2.1
# ::edge	term	ARG1-of	separate-02	0.0	0.0.0
(MRPNode-0 / correspond-02 :ARG1 (MRPNode-1 / term :ARG1-of (MRPNode-2 / separate-02)) :ARG1 (MRPNode-3 / dimension :mod (MRPNode-4 / each)) :time (MRPNode-5 / represent-01 :ARG1 (MRPNode-6 / document) :ARG2 (MRPNode-7 / vector)))

# ::id 329
# ::snt Break up the problem different smaller subproblems.
# ::tok Break up the problem different smaller subproblems .
# ::alignments 0-1|0+0.0+0.2 4-5|0.1.0 5-6|0.1.1.0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:43.534992 ::parser eager_oracle ::smatch 0.7499999999999999 ::n_actions 29
# ::node	0	break-up-08	0-1
# ::node	0.0	imperative	0-1
# ::node	0.1	subproblem	6-7
# ::node	0.1.0	differ-02	4-5
# ::node	0.1.1	have-degree-91	
# ::node	0.1.1.0	small	5-6
# ::node	0.1.1.1	more	
# ::node	0.2	you	0-1
# ::root	0	break-up-08
# ::edge	break-up-08	ARG0	you	0	0.2
# ::edge	break-up-08	ARG1	subproblem	0	0.1
# ::edge	break-up-08	mode	imperative	0	0.0
# ::edge	have-degree-91	ARG2	small	0.1.1	0.1.1.0
# ::edge	have-degree-91	ARG3	more	0.1.1	0.1.1.1
# ::edge	subproblem	ARG1-of	differ-02	0.1	0.1.0
# ::edge	subproblem	ARG1-of	have-degree-91	0.1	0.1.1
(MRPNode-0 / break-up-08 :mode imperative :ARG1 (MRPNode-1 / subproblem :ARG1-of (MRPNode-2 / differ-02) :ARG1-of (MRPNode-3 / have-degree-91 :ARG2 (MRPNode-4 / small) :ARG3 (MRPNode-5 / more))) :ARG0 (MRPNode-6 / you))

# ::id 330
# ::snt P(A) is the probability of the student being a girl (which is 2/5).
# ::tok P ( A ) is the probability of the student being a girl ( which is 2/5 ) .
# ::alignments 2-3|0.1.0 6-7|0 9-10|0.2.0+0.2.0.0 12-13|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:43.544059 ::parser eager_oracle ::smatch 0.6399999999999999 ::n_actions 36
# ::node	0	probable	6-7
# ::node	0.0	age-01	
# ::node	0.0.0	product-of	
# ::node	0.0.0.0	25	
# ::node	0.0.0.1	1	
# ::node	0.1	score-on-scale-91	
# ::node	0.1.0	a	2-3
# ::node	0.2	girl	12-13
# ::node	0.2.0	person	9-10
# ::node	0.2.0.0	study-01	9-10
# ::root	0	probable
# ::edge	age-01	ARG2	product-of	0.0	0.0.0
# ::edge	girl	domain	person	0.2	0.2.0
# ::edge	person	ARG0-of	study-01	0.2.0	0.2.0.0
# ::edge	probable	ARG1-of	age-01	0	0.0
# ::edge	probable	domain	girl	0	0.2
# ::edge	probable	domain	score-on-scale-91	0	0.1
# ::edge	product-of	op1	25	0.0.0	0.0.0.0
# ::edge	product-of	op2	1	0.0.0	0.0.0.1
# ::edge	score-on-scale-91	arg1	a	0.1	0.1.0
(MRPNode-0 / probable :ARG1-of (MRPNode-1 / age-01 :ARG2 (MRPNode-2 / product-of :op1 25 :op2 1)) :domain (MRPNode-3 / score-on-scale-91 :arg1 a) :domain (MRPNode-4 / girl :domain (MRPNode-5 / person :ARG0-of (MRPNode-6 / study-01))))

# ::id 331
# ::snt This is highly used in dynamic programming.
# ::tok This is highly used in dynamic programming .
# ::alignments 0-1|0.0 2-3|0.1 3-4|0 5-6|0.2.0 6-7|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:43.547357 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	use-01	3-4
# ::node	0.0	this	0-1
# ::node	0.1	high-02	2-3
# ::node	0.2	program-01	6-7
# ::node	0.2.0	dynamic	5-6
# ::root	0	use-01
# ::edge	program-01	mod	dynamic	0.2	0.2.0
# ::edge	use-01	ARG1	this	0	0.0
# ::edge	use-01	ARG2	high-02	0	0.1
# ::edge	use-01	ARG2	program-01	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / this) :ARG2 (MRPNode-2 / high-02) :ARG2 (MRPNode-3 / program-01 :mod (MRPNode-4 / dynamic)))

# ::id 332
# ::snt A term which occurs in the document has a value in the vector of non-zero.
# ::tok A term which occurs in the document has a value in the vector of non - zero .
# ::alignments 1-2|0.0 6-7|0.0.0 9-10|0 12-13|0.1 14-15|0.1.0.0 16-17|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:43.555647 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	value-01	9-10
# ::node	0.0	term	1-2
# ::node	0.0.0	document	6-7
# ::node	0.1	vector	12-13
# ::node	0.1.0	zero	16-17
# ::node	0.1.0.0	-	14-15
# ::root	0	value-01
# ::edge	term	location	document	0.0	0.0.0
# ::edge	value-01	ARG1	term	0	0.0
# ::edge	value-01	location	vector	0	0.1
# ::edge	vector	consist-of	zero	0.1	0.1.0
# ::edge	zero	polarity	-	0.1.0	0.1.0.0
(MRPNode-0 / value-01 :ARG1 (MRPNode-1 / term :location (MRPNode-2 / document)) :location (MRPNode-3 / vector :consist-of (MRPNode-4 / zero :polarity -)))

# ::id 333
# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
# ::tok When a document is represented as a vector , each dimension corresponds to a separate term .
# ::alignments 2-3|0.2.0 4-5|0.2 7-8|0.2.1 9-10|0.1.0 10-11|0.1 11-12|0 14-15|0.0.0 15-16|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:43.566483 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	correspond-02	11-12
# ::node	0.0	term	15-16
# ::node	0.0.0	separate-02	14-15
# ::node	0.1	dimension	10-11
# ::node	0.1.0	each	9-10
# ::node	0.2	represent-01	4-5
# ::node	0.2.0	document	2-3
# ::node	0.2.1	vector	7-8
# ::root	0	correspond-02
# ::edge	correspond-02	ARG1	dimension	0	0.1
# ::edge	correspond-02	ARG1	term	0	0.0
# ::edge	correspond-02	time	represent-01	0	0.2
# ::edge	dimension	mod	each	0.1	0.1.0
# ::edge	represent-01	ARG1	document	0.2	0.2.0
# ::edge	represent-01	ARG2	vector	0.2	0.2.1
# ::edge	term	ARG1-of	separate-02	0.0	0.0.0
(MRPNode-0 / correspond-02 :ARG1 (MRPNode-1 / term :ARG1-of (MRPNode-2 / separate-02)) :ARG1 (MRPNode-3 / dimension :mod (MRPNode-4 / each)) :time (MRPNode-5 / represent-01 :ARG1 (MRPNode-6 / document) :ARG2 (MRPNode-7 / vector)))

# ::id 334
# ::snt Terms are basically the words or any indexing unit used to identify the contents of a text.
# ::tok Terms are basically the words or any indexing unit used to identify the contents of a text .
# ::alignments 0-1|0.3 2-3|0.2 4-5|0.0 5-6|0 6-7|0.1.0 8-9|0.1 9-10|0.1.1 11-12|0.1.1.0 13-14|0.1.1.0.0+0.1.1.0.0.0 16-17|0.1.1.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:43.581063 ::parser eager_oracle ::smatch 0.9565217391304348 ::n_actions 54
# ::node	0	or	5-6
# ::node	0.0	word	4-5
# ::node	0.1	unit	8-9
# ::node	0.1.0	any	6-7
# ::node	0.1.1	use-01	9-10
# ::node	0.1.1.0	identify-01	11-12
# ::node	0.1.1.0.0	thing	13-14
# ::node	0.1.1.0.0.0	contain-01	13-14
# ::node	0.1.1.0.0.0.0	text	16-17
# ::node	0.1.2	define-01	
# ::node	0.2	basic	2-3
# ::node	0.3	term	0-1
# ::root	0	or
# ::edge	contain-01	ARG0	text	0.1.1.0.0.0	0.1.1.0.0.0.0
# ::edge	identify-01	ARG1	thing	0.1.1.0	0.1.1.0.0
# ::edge	or	domain	basic	0	0.2
# ::edge	or	domain	term	0	0.3
# ::edge	or	op1	word	0	0.0
# ::edge	or	op2	unit	0	0.1
# ::edge	thing	ARG1-of	contain-01	0.1.1.0.0	0.1.1.0.0.0
# ::edge	unit	ARG0-of	define-01	0.1	0.1.2
# ::edge	unit	ARG0-of	use-01	0.1	0.1.1
# ::edge	unit	mod	any	0.1	0.1.0
# ::edge	use-01	ARG2	identify-01	0.1.1	0.1.1.0
(MRPNode-0 / or :op1 (MRPNode-1 / word) :op2 (MRPNode-2 / unit :mod (MRPNode-3 / any) :ARG0-of (MRPNode-4 / use-01 :ARG2 (MRPNode-5 / identify-01 :ARG1 (MRPNode-6 / thing :ARG1-of (MRPNode-7 / contain-01 :ARG0 (MRPNode-8 / text))))) :ARG0-of (MRPNode-9 / define-01)) :domain (MRPNode-10 / basic) :domain (MRPNode-11 / term))

# ::id 335
# ::snt The vector space model are the documents which are represented as “bags of words”.
# ::tok The vector space model are the documents which are represented as " bags of words " .
# ::alignments 1-2|0.1.0.0 2-3|0.1.0 3-4|0.1 6-7|0 9-10|0.0 12-13|0.0.0 14-15|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:43.590894 ::parser eager_oracle ::smatch 1.0 ::n_actions 40
# ::node	0	document	6-7
# ::node	0.0	represent-01	9-10
# ::node	0.0.0	bag	12-13
# ::node	0.0.0.0	word	14-15
# ::node	0.1	model	3-4
# ::node	0.1.0	space	2-3
# ::node	0.1.0.0	vector	1-2
# ::root	0	document
# ::edge	bag	consist-of	word	0.0.0	0.0.0.0
# ::edge	document	ARG1-of	represent-01	0	0.0
# ::edge	document	domain	model	0	0.1
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	represent-01	ARG2	bag	0.0	0.0.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / document :ARG1-of (MRPNode-1 / represent-01 :ARG2 (MRPNode-2 / bag :consist-of (MRPNode-3 / word))) :domain (MRPNode-4 / model :mod (MRPNode-5 / space :mod (MRPNode-6 / vector))))

# ::id 336
# ::snt When any sub-problem is met again, it can be found and re-used to solve another problem.
# ::tok When any sub - problem is met again , it can be found and re - used to solve another problem .
# ::alignments 1-2|0.0.0.0.0 2-3|0.0.0.0.1 4-5|0.0.0.0 6-7|0.1 7-8|0.1.0 10-11|0 12-13|0.0.0 13-14|0.0 16-17|0.0.1 18-19|0.0.1.0 19-20|0.0.1.0.0.0 20-21|0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:43.746604 ::parser eager_oracle ::smatch 1.0 ::n_actions 64
# ::node	0	possible-01	10-11
# ::node	0.0	and	13-14
# ::node	0.0.0	find-01	12-13
# ::node	0.0.0.0	problem	4-5
# ::node	0.0.0.0.0	any	1-2
# ::node	0.0.0.0.1	sub	2-3
# ::node	0.0.1	use-01	16-17
# ::node	0.0.1.0	solve-01	18-19
# ::node	0.0.1.0.0	problem	20-21
# ::node	0.0.1.0.0.0	another	19-20
# ::node	0.1	meet-01	6-7
# ::node	0.1.0	again	7-8
# ::root	0	possible-01
# ::edge	and	op1	find-01	0.0	0.0.0
# ::edge	and	op2	use-01	0.0	0.0.1
# ::edge	find-01	ARG1	problem	0.0.0	0.0.0.0
# ::edge	meet-01	ARG1	problem	0.1	0.0.0.0
# ::edge	meet-01	mod	again	0.1	0.1.0
# ::edge	possible-01	ARG1	and	0	0.0
# ::edge	possible-01	time	meet-01	0	0.1
# ::edge	problem	mod	another	0.0.1.0.0	0.0.1.0.0.0
# ::edge	problem	mod	any	0.0.0.0	0.0.0.0.0
# ::edge	problem	mod	sub	0.0.0.0	0.0.0.0.1
# ::edge	solve-01	ARG1	problem	0.0.1.0	0.0.0.0
# ::edge	solve-01	ARG1	problem	0.0.1.0	0.0.1.0.0
# ::edge	use-01	ARG2	solve-01	0.0.1	0.0.1.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / find-01 :ARG1 (MRPNode-8 / problem :mod (MRPNode-9 / any) :mod (MRPNode-10 / sub))) :op2 (MRPNode-3 / use-01 :ARG2 (MRPNode-4 / solve-01 :ARG1 (MRPNode-5 / problem :mod (MRPNode-6 / another)) :ARG1 MRPNode-8))) :time (MRPNode-7 / meet-01 :ARG1 MRPNode-8 :mod (MRPNode-11 / again)))

# ::id 337
# ::snt The vector space model are the documents which are represented as “bags of words”.
# ::tok The vector space model are the documents which are represented as " bags of words " .
# ::alignments 1-2|0.1.0.0 2-3|0.1.0 3-4|0.1 6-7|0 9-10|0.0 12-13|0.0.0 14-15|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:43.754928 ::parser eager_oracle ::smatch 1.0 ::n_actions 40
# ::node	0	document	6-7
# ::node	0.0	represent-01	9-10
# ::node	0.0.0	bag	12-13
# ::node	0.0.0.0	word	14-15
# ::node	0.1	model	3-4
# ::node	0.1.0	space	2-3
# ::node	0.1.0.0	vector	1-2
# ::root	0	document
# ::edge	bag	consist-of	word	0.0.0	0.0.0.0
# ::edge	document	ARG1-of	represent-01	0	0.0
# ::edge	document	domain	model	0	0.1
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	represent-01	ARG2	bag	0.0	0.0.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / document :ARG1-of (MRPNode-1 / represent-01 :ARG2 (MRPNode-2 / bag :consist-of (MRPNode-3 / word))) :domain (MRPNode-4 / model :mod (MRPNode-5 / space :mod (MRPNode-6 / vector))))

# ::id 338
# ::snt This is highly used in dynamic programming.
# ::tok This is highly used in dynamic programming .
# ::alignments 0-1|0.0 2-3|0.1 3-4|0 5-6|0.2.0 6-7|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:43.758484 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	use-01	3-4
# ::node	0.0	this	0-1
# ::node	0.1	high-02	2-3
# ::node	0.2	program-01	6-7
# ::node	0.2.0	dynamic	5-6
# ::root	0	use-01
# ::edge	program-01	mod	dynamic	0.2	0.2.0
# ::edge	use-01	ARG1	this	0	0.0
# ::edge	use-01	ARG2	high-02	0	0.1
# ::edge	use-01	ARG2	program-01	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / this) :ARG2 (MRPNode-2 / high-02) :ARG2 (MRPNode-3 / program-01 :mod (MRPNode-4 / dynamic)))

# ::id 339
# ::snt The differing application has a direct influence on what the definition of the term means.
# ::tok The differing application has a direct influence on what the definition of the term means .
# ::alignments 1-2|0.1.0 2-3|0.1 5-6|0.2 6-7|0 10-11|0.0.0.0 13-14|0.0.0.0.0 14-15|0.0+0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:43.767632 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	influence-01	6-7
# ::node	0.0	thing	14-15
# ::node	0.0.0	mean-01	14-15
# ::node	0.0.0.0	define-01	10-11
# ::node	0.0.0.0.0	term	13-14
# ::node	0.1	apply-02	2-3
# ::node	0.1.0	differ-01	1-2
# ::node	0.2	direct-02	5-6
# ::root	0	influence-01
# ::edge	apply-02	ARG1-of	differ-01	0.1	0.1.0
# ::edge	define-01	ARG1	term	0.0.0.0	0.0.0.0.0
# ::edge	influence-01	ARG0	apply-02	0	0.1
# ::edge	influence-01	ARG1	thing	0	0.0
# ::edge	influence-01	ARG1-of	direct-02	0	0.2
# ::edge	mean-01	ARG1	define-01	0.0.0	0.0.0.0
# ::edge	thing	ARG2-of	mean-01	0.0	0.0.0
(MRPNode-0 / influence-01 :ARG1 (MRPNode-1 / thing :ARG2-of (MRPNode-2 / mean-01 :ARG1 (MRPNode-3 / define-01 :ARG1 (MRPNode-4 / term)))) :ARG0 (MRPNode-5 / apply-02 :ARG1-of (MRPNode-6 / differ-01)) :ARG1-of (MRPNode-7 / direct-02))

# ::id 340
# ::snt As a formal theorem, Bayes' theorem is valid in all common interpretations of probability.
# ::tok As a formal theorem , Bayes ' theorem is valid in all common interpretations of probability .
# ::alignments 2-3|0.0.0 3-4|0.0 5-6|0.0.1+0.0.1.0+0.0.1.0.0 9-10|0 11-12|0.1.1 13-14|0.1 15-16|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:43.779929 ::parser eager_oracle ::smatch 0.9444444444444444 ::n_actions 40
# ::node	0	valid-02	9-10
# ::node	0.0	theorem	3-4
# ::node	0.0.0	formal	2-3
# ::node	0.0.1	person	5-6
# ::node	0.0.1.0	name	5-6
# ::node	0.0.1.0.0	bayes	5-6
# ::node	0.1	interpret-01	13-14
# ::node	0.1.0	probability	15-16
# ::node	0.1.1	all	11-12
# ::node	0.1.2	share-01	
# ::root	0	valid-02
# ::edge	interpret-01	ARG1	probability	0.1	0.1.0
# ::edge	interpret-01	ARG1-of	share-01	0.1	0.1.2
# ::edge	interpret-01	mod	all	0.1	0.1.1
# ::edge	name	op1	bayes	0.0.1.0	0.0.1.0.0
# ::edge	person	name	name	0.0.1	0.0.1.0
# ::edge	theorem	mod	formal	0.0	0.0.0
# ::edge	theorem	poss	person	0.0	0.0.1
# ::edge	valid-02	ARG1	theorem	0	0.0
# ::edge	valid-02	ARG2	interpret-01	0	0.1
(MRPNode-0 / valid-02 :ARG1 (MRPNode-1 / theorem :mod (MRPNode-2 / formal) :poss (MRPNode-3 / person :name (MRPNode-4 / name :op1 bayes))) :ARG2 (MRPNode-5 / interpret-01 :ARG1 (MRPNode-6 / probability) :mod (MRPNode-7 / all) :ARG1-of (MRPNode-8 / share-01)))

# ::id 341
# ::snt It is mainly used to calculate the probability of one event’s outcome given that a previous event happened.
# ::tok It is mainly used to calculate the probability of one event 's outcome given that a previous event happened .
# ::alignments 0-1|0.0 2-3|0.1 3-4|0 5-6|0.2 7-8|0.2.0 9-10|0.2.0.0.0.0 10-11|0.2.0.0.0 12-13|0.2.0.0 13-14|0.3 16-17|0.3.0.0 17-18|0.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:43.816479 ::parser eager_oracle ::smatch 1.0 ::n_actions 55
# ::node	0	use-01	3-4
# ::node	0.0	it	0-1
# ::node	0.1	main	2-3
# ::node	0.2	calculate-01	5-6
# ::node	0.2.0	probable	7-8
# ::node	0.2.0.0	outcome	12-13
# ::node	0.2.0.0.0	event	10-11
# ::node	0.2.0.0.0.0	1	9-10
# ::node	0.3	give-01	13-14
# ::node	0.3.0	event	17-18
# ::node	0.3.0.0	previous	16-17
# ::root	0	use-01
# ::edge	calculate-01	ARG1	probable	0.2	0.2.0
# ::edge	event	mod	previous	0.3.0	0.3.0.0
# ::edge	event	quant	1	0.2.0.0.0	0.2.0.0.0.0
# ::edge	give-01	ARG1	event	0.3	0.3.0
# ::edge	outcome	poss	event	0.2.0.0	0.2.0.0.0
# ::edge	probable	domain	outcome	0.2.0	0.2.0.0
# ::edge	use-01	ARG1	it	0	0.0
# ::edge	use-01	ARG1-of	give-01	0	0.3
# ::edge	use-01	ARG2	calculate-01	0	0.2
# ::edge	use-01	mod	main	0	0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / it) :mod (MRPNode-2 / main) :ARG2 (MRPNode-3 / calculate-01 :ARG1 (MRPNode-4 / probable :domain (MRPNode-5 / outcome :poss (MRPNode-6 / event :quant 1)))) :ARG1-of (MRPNode-7 / give-01 :ARG1 (MRPNode-8 / event :mod (MRPNode-9 / previous))))

# ::id 342
# ::snt The algebraic model for representing text documents and objects as vectors of identifiers is called the vector space model.
# ::tok The algebraic model for representing text documents and objects as vectors of identifiers is called the vector space model .
# ::alignments 2-3|0.0 4-5|0.0.1 5-6|0.0.1.0.0.0 6-7|0.0.1.0.0 8-9|0.0.1.0.1 9-10|0.0.1.0 10-11|0.0.1.1 12-13|0.0.1.1.0 14-15|0 16-17|0.1.0.0 17-18|0.1.0 18-19|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.021485 ::parser eager_oracle ::smatch 0.9615384615384615 ::n_actions 60
# ::node	0	call-01	14-15
# ::node	0.0	model	2-3
# ::node	0.0.0	electronics	
# ::node	0.0.1	represent-01	4-5
# ::node	0.0.1.0	and	9-10
# ::node	0.0.1.0.0	document	6-7
# ::node	0.0.1.0.0.0	text	5-6
# ::node	0.0.1.0.1	object	8-9
# ::node	0.0.1.1	vector	10-11
# ::node	0.0.1.1.0	identify-01	12-13
# ::node	0.1	model	18-19
# ::node	0.1.0	space	17-18
# ::node	0.1.0.0	vector	16-17
# ::root	0	call-01
# ::edge	and	op1	document	0.0.1.0	0.0.1.0.0
# ::edge	and	op2	object	0.0.1.0	0.0.1.0.1
# ::edge	call-01	ARG1	model	0	0.0
# ::edge	call-01	ARG1	model	0	0.1
# ::edge	document	mod	text	0.0.1.0.0	0.0.1.0.0.0
# ::edge	model	mod	electronics	0.0	0.0.0
# ::edge	model	mod	represent-01	0.0	0.0.1
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	object	location	text	0.0.1.0.1	0.0.1.0.0.0
# ::edge	represent-01	ARG1	and	0.0.1	0.0.1.0
# ::edge	represent-01	ARG2	vector	0.0.1	0.0.1.1
# ::edge	space	mod	vector	0.1.0	0.1.0.0
# ::edge	vector	ARG0-of	identify-01	0.0.1.1	0.0.1.1.0
(MRPNode-0 / call-01 :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / electronics) :mod (MRPNode-3 / represent-01 :ARG1 (MRPNode-4 / and :op1 (MRPNode-5 / document :mod (MRPNode-6 / text)) :op2 (MRPNode-7 / object :location MRPNode-6)) :ARG2 (MRPNode-8 / vector :ARG0-of (MRPNode-9 / identify-01)))) :ARG1 (MRPNode-10 / model :mod (MRPNode-11 / space :mod (MRPNode-12 / vector))))

# ::id 343
# ::snt It is used in information filtering, information retrieval, indexing and relevancy rankings.
# ::tok It is used in information filtering , information retrieval , indexing and relevancy rankings .
# ::alignments 0-1|0.0 2-3|0 4-5|0.1.1.0 5-6|0.1.0 7-8|0.1.0.0 8-9|0.1.1 11-12|0.1 12-13|0.1.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.037756 ::parser eager_oracle ::smatch 0.8333333333333333 ::n_actions 42
# ::node	0	use-01	2-3
# ::node	0.0	it	0-1
# ::node	0.1	and	11-12
# ::node	0.1.0	filter-02	5-6
# ::node	0.1.0.0	information	7-8
# ::node	0.1.1	retrieve-01	8-9
# ::node	0.1.1.0	information	4-5
# ::node	0.1.2	model-01	
# ::node	0.1.3	track-01	
# ::node	0.1.3.0	relevant-01	12-13
# ::root	0	use-01
# ::edge	and	op1	filter-02	0.1	0.1.0
# ::edge	and	op2	retrieve-01	0.1	0.1.1
# ::edge	and	op3	model-01	0.1	0.1.2
# ::edge	and	op4	track-01	0.1	0.1.3
# ::edge	filter-02	ARG1	information	0.1.0	0.1.0.0
# ::edge	retrieve-01	ARG1	information	0.1.1	0.1.0.0
# ::edge	retrieve-01	ARG1	information	0.1.1	0.1.1.0
# ::edge	track-01	ARG1-of	relevant-01	0.1.3	0.1.3.0
# ::edge	use-01	ARG1	it	0	0.0
# ::edge	use-01	ARG2	and	0	0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / it) :ARG2 (MRPNode-2 / and :op1 (MRPNode-3 / filter-02 :ARG1 (MRPNode-4 / information)) :op2 (MRPNode-5 / retrieve-01 :ARG1 MRPNode-4 :ARG1 (MRPNode-6 / information)) :op3 (MRPNode-7 / model-01) :op4 (MRPNode-8 / track-01 :ARG1-of (MRPNode-9 / relevant-01))))

# ::id 344
# ::snt Vector space representation results in the loss of the order which the terms are in the document.
# ::tok Vector space representation results in the loss of the order which the terms are in the document .
# ::alignments 0-1|0.0.0.0 1-2|0.0.0 2-3|0.0 3-4|0 9-10|0.1.0 12-13|0.1.0.0 16-17|0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.046581 ::parser eager_oracle ::smatch 0.8666666666666666 ::n_actions 40
# ::node	0	result-01	3-4
# ::node	0.0	represent-01	2-3
# ::node	0.0.0	space	1-2
# ::node	0.0.0.0	vector	0-1
# ::node	0.1	lose-02	
# ::node	0.1.0	order	9-10
# ::node	0.1.0.0	term	12-13
# ::node	0.1.0.0.0	document	16-17
# ::root	0	result-01
# ::edge	lose-02	ARG1	order	0.1	0.1.0
# ::edge	order	location-of	term	0.1.0	0.1.0.0
# ::edge	represent-01	ARG1	space	0.0	0.0.0
# ::edge	result-01	ARG1	represent-01	0	0.0
# ::edge	result-01	ARG2	lose-02	0	0.1
# ::edge	space	mod	vector	0.0.0	0.0.0.0
# ::edge	term	location	document	0.1.0.0	0.1.0.0.0
(MRPNode-0 / result-01 :ARG1 (MRPNode-1 / represent-01 :ARG1 (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG2 (MRPNode-4 / lose-02 :ARG1 (MRPNode-5 / order :location-of (MRPNode-6 / term :location (MRPNode-7 / document)))))

# ::id 345
# ::snt Inheritance in object oriented programming is a way to form new classes using classes that have already been defined.
# ::tok Inheritance in object oriented programming is a way to form new classes using classes that have already been defined .
# ::alignments 0-1|0.1 2-3|0.1.0.0.0 3-4|0.1.0.0 4-5|0.1.0 7-8|0 9-10|0.0 10-11|0.0.0.0 11-12|0.0.0 12-13|0.0.1 13-14|0.0.1.0 16-17|0.0.1.0.0.0 18-19|0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.077742 ::parser eager_oracle ::smatch 1.0 ::n_actions 58
# ::node	0	way	7-8
# ::node	0.0	form-01	9-10
# ::node	0.0.0	class	11-12
# ::node	0.0.0.0	new-01	10-11
# ::node	0.0.1	use-01	12-13
# ::node	0.0.1.0	class	13-14
# ::node	0.0.1.0.0	define-01	18-19
# ::node	0.0.1.0.0.0	already	16-17
# ::node	0.1	inherit-01	0-1
# ::node	0.1.0	program-01	4-5
# ::node	0.1.0.0	orient-01	3-4
# ::node	0.1.0.0.0	object	2-3
# ::root	0	way
# ::edge	class	ARG1-of	define-01	0.0.1.0	0.0.1.0.0
# ::edge	class	ARG1-of	new-01	0.0.0	0.0.0.0
# ::edge	define-01	time	already	0.0.1.0.0	0.0.1.0.0.0
# ::edge	form-01	ARG1	class	0.0	0.0.0
# ::edge	form-01	manner	use-01	0.0	0.0.1
# ::edge	inherit-01	ARG1	program-01	0.1	0.1.0
# ::edge	orient-01	ARG2	object	0.1.0.0	0.1.0.0.0
# ::edge	program-01	ARG2	orient-01	0.1.0	0.1.0.0
# ::edge	use-01	ARG1	class	0.0.1	0.0.1.0
# ::edge	way	domain	form-01	0	0.0
# ::edge	way	domain	inherit-01	0	0.1
(MRPNode-0 / way :domain (MRPNode-1 / form-01 :ARG1 (MRPNode-2 / class :ARG1-of (MRPNode-3 / new-01)) :manner (MRPNode-4 / use-01 :ARG1 (MRPNode-5 / class :ARG1-of (MRPNode-6 / define-01 :time (MRPNode-7 / already))))) :domain (MRPNode-8 / inherit-01 :ARG1 (MRPNode-9 / program-01 :ARG2 (MRPNode-10 / orient-01 :ARG2 (MRPNode-11 / object)))))

# ::id 346
# ::snt The algebraic model for representing text documents and objects as vectors of identifiers is called the vector space model.
# ::tok The algebraic model for representing text documents and objects as vectors of identifiers is called the vector space model .
# ::alignments 2-3|0.0 4-5|0.0.1 5-6|0.0.1.0.0.0 6-7|0.0.1.0.0 8-9|0.0.1.0.1 9-10|0.0.1.0 10-11|0.0.1.1 12-13|0.0.1.1.0 14-15|0 16-17|0.1.0.0 17-18|0.1.0 18-19|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.274799 ::parser eager_oracle ::smatch 0.9615384615384615 ::n_actions 60
# ::node	0	call-01	14-15
# ::node	0.0	model	2-3
# ::node	0.0.0	electronics	
# ::node	0.0.1	represent-01	4-5
# ::node	0.0.1.0	and	9-10
# ::node	0.0.1.0.0	document	6-7
# ::node	0.0.1.0.0.0	text	5-6
# ::node	0.0.1.0.1	object	8-9
# ::node	0.0.1.1	vector	10-11
# ::node	0.0.1.1.0	identify-01	12-13
# ::node	0.1	model	18-19
# ::node	0.1.0	space	17-18
# ::node	0.1.0.0	vector	16-17
# ::root	0	call-01
# ::edge	and	op1	document	0.0.1.0	0.0.1.0.0
# ::edge	and	op2	object	0.0.1.0	0.0.1.0.1
# ::edge	call-01	ARG1	model	0	0.0
# ::edge	call-01	ARG1	model	0	0.1
# ::edge	document	mod	text	0.0.1.0.0	0.0.1.0.0.0
# ::edge	model	mod	electronics	0.0	0.0.0
# ::edge	model	mod	represent-01	0.0	0.0.1
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	object	location	text	0.0.1.0.1	0.0.1.0.0.0
# ::edge	represent-01	ARG1	and	0.0.1	0.0.1.0
# ::edge	represent-01	ARG2	vector	0.0.1	0.0.1.1
# ::edge	space	mod	vector	0.1.0	0.1.0.0
# ::edge	vector	ARG0-of	identify-01	0.0.1.1	0.0.1.1.0
(MRPNode-0 / call-01 :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / electronics) :mod (MRPNode-3 / represent-01 :ARG1 (MRPNode-4 / and :op1 (MRPNode-5 / document :mod (MRPNode-6 / text)) :op2 (MRPNode-7 / object :location MRPNode-6)) :ARG2 (MRPNode-8 / vector :ARG0-of (MRPNode-9 / identify-01)))) :ARG1 (MRPNode-10 / model :mod (MRPNode-11 / space :mod (MRPNode-12 / vector))))

# ::id 347
# ::snt Secondly to define the value of the optimal solution recursively.
# ::tok Secondly to define the value of the optimal solution recursively .
# ::alignments 2-3|0 4-5|0.1 7-8|0.1.0.0 8-9|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.278844 ::parser eager_oracle ::smatch 0.8421052631578948 ::n_actions 25
# ::node	0	define-01	2-3
# ::node	0.0	2	
# ::node	0.1	value-01	4-5
# ::node	0.1.0	solution	8-9
# ::node	0.1.0.0	optimal	7-8
# ::node	0.2	correlate-01	
# ::root	0	define-01
# ::edge	define-01	ARG1	value-01	0	0.1
# ::edge	define-01	ARG1-of	correlate-01	0	0.2
# ::edge	define-01	li	2	0	0.0
# ::edge	solution	mod	optimal	0.1.0	0.1.0.0
# ::edge	value-01	ARG1	solution	0.1	0.1.0
(MRPNode-0 / define-01 :li 2 :ARG1 (MRPNode-1 / value-01 :ARG1 (MRPNode-2 / solution :mod (MRPNode-3 / optimal))) :ARG1-of (MRPNode-4 / correlate-01))

# ::id 348
# ::snt There are two main approaches for dynamic programming.
# ::tok There are two main approaches for dynamic programming .
# ::alignments 2-3|0.0 3-4|0.1 4-5|0 6-7|0.2.0 7-8|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:44.282139 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	approach-02	4-5
# ::node	0.0	2	2-3
# ::node	0.1	main	3-4
# ::node	0.2	program-01	7-8
# ::node	0.2.0	dynamic	6-7
# ::root	0	approach-02
# ::edge	approach-02	ARG1	main	0	0.1
# ::edge	approach-02	ARG1	program-01	0	0.2
# ::edge	approach-02	quant	2	0	0.0
# ::edge	program-01	mod	dynamic	0.2	0.2.0
(MRPNode-0 / approach-02 :quant 2 :ARG1 (MRPNode-1 / main) :ARG1 (MRPNode-2 / program-01 :mod (MRPNode-3 / dynamic)))

# ::id 349
# ::snt P(A), or the probability that the student is a girl regardless of any other information.
# ::tok P ( A ) , or the probability that the student is a girl regardless of any other information .
# ::alignments 5-6|0 7-8|0.1 10-11|0.1.0.0+0.1.0.0.0 13-14|0.1.0 14-15|0.1.1 16-17|0.1.1.0.1 17-18|0.1.1.0.0 18-19|0.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.292720 ::parser eager_oracle ::smatch 0.9473684210526316 ::n_actions 50
# ::node	0	or	5-6
# ::node	0.0	exemplify-01	
# ::node	0.1	probable	7-8
# ::node	0.1.0	girl	13-14
# ::node	0.1.0.0	person	10-11
# ::node	0.1.0.0.0	study-01	10-11
# ::node	0.1.1	regardless-91	14-15
# ::node	0.1.1.0	information	18-19
# ::node	0.1.1.0.0	other	17-18
# ::node	0.1.1.0.1	any	16-17
# ::root	0	or
# ::edge	girl	domain	person	0.1.0	0.1.0.0
# ::edge	information	mod	any	0.1.1.0	0.1.1.0.1
# ::edge	information	mod	other	0.1.1.0	0.1.1.0.0
# ::edge	or	op1	exemplify-01	0	0.0
# ::edge	or	op2	probable	0	0.1
# ::edge	person	ARG0-of	study-01	0.1.0.0	0.1.0.0.0
# ::edge	probable	ARG1-of	regardless-91	0.1	0.1.1
# ::edge	probable	domain	girl	0.1	0.1.0
# ::edge	regardless-91	ARG2	information	0.1.1	0.1.1.0
(MRPNode-0 / or :op1 (MRPNode-1 / exemplify-01) :op2 (MRPNode-2 / probable :domain (MRPNode-3 / girl :domain (MRPNode-4 / person :ARG0-of (MRPNode-5 / study-01))) :ARG1-of (MRPNode-6 / regardless-91 :ARG2 (MRPNode-7 / information :mod (MRPNode-8 / other) :mod (MRPNode-9 / any)))))

# ::id 350
# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
# ::tok In vector space model , the documents from which the information is to be retrieved are represented as vectors .
# ::alignments 1-2|0.2.0.0 2-3|0.2.0 3-4|0.2 6-7|0.0 10-11|0.0.0.0 14-15|0.0.0 16-17|0 18-19|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.307003 ::parser eager_oracle ::smatch 1.0 ::n_actions 46
# ::node	0	represent-01	16-17
# ::node	0.0	document	6-7
# ::node	0.0.0	retrieve-01	14-15
# ::node	0.0.0.0	information	10-11
# ::node	0.1	vector	18-19
# ::node	0.2	model-01	3-4
# ::node	0.2.0	space	2-3
# ::node	0.2.0.0	vector	1-2
# ::root	0	represent-01
# ::edge	document	ARG1-of	retrieve-01	0.0	0.0.0
# ::edge	model-01	ARG2	space	0.2	0.2.0
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	represent-01	location	model-01	0	0.2
# ::edge	retrieve-01	ARG1	information	0.0.0	0.0.0.0
# ::edge	space	mod	vector	0.2.0	0.2.0.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document :ARG1-of (MRPNode-2 / retrieve-01 :ARG1 (MRPNode-3 / information))) :ARG2 (MRPNode-4 / vector) :location (MRPNode-5 / model-01 :ARG2 (MRPNode-6 / space :mod (MRPNode-7 / vector))))

# ::id 351
# ::snt A term which occurs in the document has a value in the vector of non-zero.
# ::tok A term which occurs in the document has a value in the vector of non - zero .
# ::alignments 1-2|0.0 6-7|0.0.0 9-10|0 12-13|0.1 14-15|0.1.0.0 16-17|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.313482 ::parser eager_oracle ::smatch 1.0 ::n_actions 38
# ::node	0	value-01	9-10
# ::node	0.0	term	1-2
# ::node	0.0.0	document	6-7
# ::node	0.1	vector	12-13
# ::node	0.1.0	zero	16-17
# ::node	0.1.0.0	-	14-15
# ::root	0	value-01
# ::edge	term	location	document	0.0	0.0.0
# ::edge	value-01	ARG1	term	0	0.0
# ::edge	value-01	location	vector	0	0.1
# ::edge	vector	consist-of	zero	0.1	0.1.0
# ::edge	zero	polarity	-	0.1.0	0.1.0.0
(MRPNode-0 / value-01 :ARG1 (MRPNode-1 / term :location (MRPNode-2 / document)) :location (MRPNode-3 / vector :consist-of (MRPNode-4 / zero :polarity -)))

# ::id 352
# ::snt Vector space representation results in the loss of the order which the terms are in the document.
# ::tok Vector space representation results in the loss of the order which the terms are in the document .
# ::alignments 0-1|0.0.0.0 1-2|0.0.0 2-3|0.0 3-4|0 9-10|0.1.0 12-13|0.1.0.0 16-17|0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.323301 ::parser eager_oracle ::smatch 0.8666666666666666 ::n_actions 40
# ::node	0	result-01	3-4
# ::node	0.0	represent-01	2-3
# ::node	0.0.0	space	1-2
# ::node	0.0.0.0	vector	0-1
# ::node	0.1	lose-02	
# ::node	0.1.0	order	9-10
# ::node	0.1.0.0	term	12-13
# ::node	0.1.0.0.0	document	16-17
# ::root	0	result-01
# ::edge	lose-02	ARG1	order	0.1	0.1.0
# ::edge	order	location-of	term	0.1.0	0.1.0.0
# ::edge	represent-01	ARG1	space	0.0	0.0.0
# ::edge	result-01	ARG1	represent-01	0	0.0
# ::edge	result-01	ARG2	lose-02	0	0.1
# ::edge	space	mod	vector	0.0.0	0.0.0.0
# ::edge	term	location	document	0.1.0.0	0.1.0.0.0
(MRPNode-0 / result-01 :ARG1 (MRPNode-1 / represent-01 :ARG1 (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG2 (MRPNode-4 / lose-02 :ARG1 (MRPNode-5 / order :location-of (MRPNode-6 / term :location (MRPNode-7 / document)))))

# ::id 353
# ::snt A page that is linked to by many pages with high PageRank receives a high rank itself.
# ::tok A page that is linked to by many pages with high PageRank receives a high rank itself .
# ::alignments 1-2|0.1 4-5|0.1.0 7-8|0.1.0.0.1 8-9|0.1.0.0 10-11|0.1.0.0.0.0.0 11-12|0.1.0.0.0.0+0.1.0.0.0.0.1+0.1.0.0.0.0.1.0 12-13|0 14-15|0.0.1 15-16|0.0+0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.436457 ::parser eager_oracle ::smatch 0.9166666666666666 ::n_actions 50
# ::node	0	receive-01	12-13
# ::node	0.0	thing	15-16
# ::node	0.0.0	rank-01	15-16
# ::node	0.0.1	high-02	14-15
# ::node	0.1	page	1-2
# ::node	0.1.0	link-01	4-5
# ::node	0.1.0.0	page	8-9
# ::node	0.1.0.0.0	have-03	
# ::node	0.1.0.0.0.0	publication	11-12
# ::node	0.1.0.0.0.0.0	high-02	10-11
# ::node	0.1.0.0.0.0.1	name	11-12
# ::node	0.1.0.0.0.0.1.0	pagerank	11-12
# ::node	0.1.0.0.1	many	7-8
# ::root	0	receive-01
# ::edge	have-03	ARG1	publication	0.1.0.0.0	0.1.0.0.0.0
# ::edge	link-01	ARG0	page	0.1.0	0.1.0.0
# ::edge	name	op1	pagerank	0.1.0.0.0.0.1	0.1.0.0.0.0.1.0
# ::edge	page	ARG1-of	link-01	0.1	0.1.0
# ::edge	page	quant	have-03	0.1.0.0	0.1.0.0.0
# ::edge	page	quant	many	0.1.0.0	0.1.0.0.1
# ::edge	publication	ARG1-of	high-02	0.1.0.0.0.0	0.1.0.0.0.0.0
# ::edge	publication	name	name	0.1.0.0.0.0	0.1.0.0.0.0.1
# ::edge	receive-01	ARG0	page	0	0.1
# ::edge	receive-01	ARG1	thing	0	0.0
# ::edge	thing	ARG1-of	high-02	0.0	0.0.1
# ::edge	thing	ARG1-of	rank-01	0.0	0.0.0
(MRPNode-0 / receive-01 :ARG1 (MRPNode-1 / thing :ARG1-of (MRPNode-2 / rank-01) :ARG1-of (MRPNode-3 / high-02)) :ARG0 (MRPNode-4 / page :ARG1-of (MRPNode-5 / link-01 :ARG0 (MRPNode-6 / page :quant (MRPNode-7 / have-03 :ARG1 (MRPNode-8 / publication :ARG1-of (MRPNode-9 / high-02) :name (MRPNode-10 / name :op1 pagerank))) :quant (MRPNode-11 / many)))))

# ::id 354
# ::snt The PageRank is computed iteratively, and it is found that the PageRank values converge fairly rapidly.
# ::tok The PageRank is computed iteratively , and it is found that the PageRank values converge fairly rapidly .
# ::alignments 1-2|0.0.1+0.0.1.0+0.0.1.0.0 3-4|0.0 4-5|0.0.0 6-7|0 9-10|0.1 13-14|0.0.1.1 14-15|0.1.0 15-16|0.1.0.0.0 16-17|0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.449709 ::parser eager_oracle ::smatch 1.0 ::n_actions 51
# ::node	0	and	6-7
# ::node	0.0	compile-01	3-4
# ::node	0.0.0	iteratively	4-5
# ::node	0.0.1	publication	1-2
# ::node	0.0.1.0	name	1-2
# ::node	0.0.1.0.0	pagerank	1-2
# ::node	0.0.1.1	value	13-14
# ::node	0.1	find-01	9-10
# ::node	0.1.0	converge	14-15
# ::node	0.1.0.0	rapid	16-17
# ::node	0.1.0.0.0	fair-04	15-16
# ::root	0	and
# ::edge	and	op1	compile-01	0	0.0
# ::edge	and	op2	find-01	0	0.1
# ::edge	compile-01	ARG1	publication	0.0	0.0.1
# ::edge	compile-01	manner	iteratively	0.0	0.0.0
# ::edge	converge	ARG1	publication	0.1.0	0.0.1
# ::edge	converge	manner	rapid	0.1.0	0.1.0.0
# ::edge	find-01	ARG1	converge	0.1	0.1.0
# ::edge	name	op1	pagerank	0.0.1.0	0.0.1.0.0
# ::edge	publication	ARG1-of	value	0.0.1	0.0.1.1
# ::edge	publication	name	name	0.0.1	0.0.1.0
# ::edge	rapid	ARG1-of	fair-04	0.1.0.0	0.1.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / compile-01 :manner (MRPNode-2 / iteratively) :ARG1 (MRPNode-3 / publication :name (MRPNode-4 / name :op1 pagerank) :ARG1-of (MRPNode-5 / value))) :op2 (MRPNode-6 / find-01 :ARG1 (MRPNode-7 / converge :ARG1 MRPNode-3 :manner (MRPNode-8 / rapid :ARG1-of (MRPNode-9 / fair-04)))))

# ::id 355
# ::snt In the vector space model a document is represented as a vector.
# ::tok In the vector space model a document is represented as a vector .
# ::alignments 2-3|0.2.0.0 3-4|0.2.0 4-5|0.2 6-7|0.0 8-9|0 11-12|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.458718 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	represent-01	8-9
# ::node	0.0	document	6-7
# ::node	0.1	vector	11-12
# ::node	0.2	model-01	4-5
# ::node	0.2.0	space	3-4
# ::node	0.2.0.0	vector	2-3
# ::root	0	represent-01
# ::edge	model-01	ARG1	space	0.2	0.2.0
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	represent-01	location	model-01	0	0.2
# ::edge	space	mod	vector	0.2.0	0.2.0.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document) :ARG2 (MRPNode-2 / vector) :location (MRPNode-3 / model-01 :ARG1 (MRPNode-4 / space :mod (MRPNode-5 / vector))))

# ::id 356
# ::snt If a term appears in the document, the terms value in the vector is non-zero.
# ::tok If a term appears in the document , the terms value in the vector is non - zero .
# ::alignments 2-3|0.1.0 3-4|0.1 6-7|0.1.1 10-11|0.0.1 13-14|0.0.1.0 15-16|0.0.0 17-18|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.470300 ::parser eager_oracle ::smatch 0.7857142857142856 ::n_actions 41
# ::node	0	have-condition-91	
# ::node	0.0	zero	17-18
# ::node	0.0.0	-	15-16
# ::node	0.0.1	value	10-11
# ::node	0.0.1.0	vector	13-14
# ::node	0.1	appear-01	3-4
# ::node	0.1.0	term	2-3
# ::node	0.1.1	document	6-7
# ::root	0	have-condition-91
# ::edge	appear-01	ARG1	term	0.1	0.1.0
# ::edge	appear-01	location	document	0.1	0.1.1
# ::edge	have-condition-91	ARG1	zero	0	0.0
# ::edge	have-condition-91	ARG2	appear-01	0	0.1
# ::edge	value	location	vector	0.0.1	0.0.1.0
# ::edge	zero	domain	value	0.0	0.0.1
# ::edge	zero	polarity	-	0.0	0.0.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / zero :polarity - :domain (MRPNode-2 / value :location (MRPNode-3 / vector))) :ARG2 (MRPNode-4 / appear-01 :ARG1 (MRPNode-5 / term) :location (MRPNode-6 / document)))

# ::id 357
# ::snt Finally, the order in which the terms appear in the document is lost in the vector space representation.
# ::tok Finally , the order in which the terms appear in the document is lost in the vector space representation .
# ::alignments 0-1|0.2 3-4|0.0 7-8|0.0.0.0 8-9|0.0.0 11-12|0.0.0.1 13-14|0 16-17|0.1.0.0 17-18|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.482300 ::parser eager_oracle ::smatch 0.8823529411764706 ::n_actions 45
# ::node	0	lose-02	13-14
# ::node	0.0	order	3-4
# ::node	0.0.0	appear-01	8-9
# ::node	0.0.0.0	term	7-8
# ::node	0.0.0.1	document	11-12
# ::node	0.1	enter-02	
# ::node	0.1.0	space	17-18
# ::node	0.1.0.0	vector	16-17
# ::node	0.2	final	0-1
# ::root	0	lose-02
# ::edge	appear-01	ARG1	term	0.0.0	0.0.0.0
# ::edge	appear-01	location	document	0.0.0	0.0.0.1
# ::edge	enter-02	ARG1	space	0.1	0.1.0
# ::edge	lose-02	ARG1	order	0	0.0
# ::edge	lose-02	mod	enter-02	0	0.1
# ::edge	lose-02	mod	final	0	0.2
# ::edge	order	time-of	appear-01	0.0	0.0.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / lose-02 :ARG1 (MRPNode-1 / order :time-of (MRPNode-2 / appear-01 :ARG1 (MRPNode-3 / term) :location (MRPNode-4 / document))) :mod (MRPNode-5 / enter-02 :ARG1 (MRPNode-6 / space :mod (MRPNode-7 / vector))) :mod (MRPNode-8 / final))

# ::id 358
# ::snt Following this, each web page is given a ranking of 0-10 according to its relevance to a search.
# ::tok Following this , each web page is given a ranking of 0-10 according to its relevance to a search .
# ::alignments 0-1|0.1 1-2|0.1.0 3-4|0.0.0 4-5|0.0.2 5-6|0.0 7-8|0 9-10|0.2 15-16|0.0.1 18-19|0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.496106 ::parser eager_oracle ::smatch 0.9047619047619047 ::n_actions 53
# ::node	0	give-01	7-8
# ::node	0.0	page	5-6
# ::node	0.0.0	each	3-4
# ::node	0.0.1	relevant-01	15-16
# ::node	0.0.1.0	search-01	18-19
# ::node	0.0.2	web	4-5
# ::node	0.1	follow-01	0-1
# ::node	0.1.0	this	1-2
# ::node	0.2	rank-01	9-10
# ::node	0.2.0	between	
# ::node	0.2.0.0	0	
# ::node	0.2.0.1	10	
# ::root	0	give-01
# ::edge	between	op1	0	0.2.0	0.2.0.0
# ::edge	between	op2	10	0.2.0	0.2.0.1
# ::edge	follow-01	ARG2	this	0.1	0.1.0
# ::edge	give-01	ARG1	follow-01	0	0.1
# ::edge	give-01	ARG1	page	0	0.0
# ::edge	give-01	ARG1	rank-01	0	0.2
# ::edge	page	ARG1-of	relevant-01	0.0	0.0.1
# ::edge	page	mod	each	0.0	0.0.0
# ::edge	page	mod	web	0.0	0.0.2
# ::edge	rank-01	ARG1	page	0.2	0.0
# ::edge	rank-01	ARG1-of	between	0.2	0.2.0
# ::edge	relevant-01	ARG2	search-01	0.0.1	0.0.1.0
(MRPNode-0 / give-01 :ARG1 (MRPNode-1 / page :mod (MRPNode-2 / each) :ARG1-of (MRPNode-3 / relevant-01 :ARG2 (MRPNode-4 / search-01)) :mod (MRPNode-5 / web)) :ARG1 (MRPNode-6 / follow-01 :ARG2 (MRPNode-7 / this)) :ARG1 (MRPNode-8 / rank-01 :ARG1 MRPNode-1 :ARG1-of (MRPNode-9 / between :op1 0 :op2 10)))

# ::id 359
# ::snt Lucky Joe likes to predict the colour of the ball he selects and he is 80% accurate.
# ::tok Lucky Joe likes to predict the colour of the ball he selects and he is 80 % accurate .
# ::alignments 0-2|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0+0.0.0.1.0.1 2-3|0.0 4-5|0.0.0 6-7|0.0.0.0 9-10|0.0.0.0.0 11-12|0.0.0.1.1 12-13|0 15-16|0.1.0.0 16-17|0.1.0 17-18|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.509715 ::parser eager_oracle ::smatch 0.9642857142857143 ::n_actions 61
# ::node	0	and	12-13
# ::node	0.0	like-01	2-3
# ::node	0.0.0	predict-01	4-5
# ::node	0.0.0.0	color	6-7
# ::node	0.0.0.0.0	ball	9-10
# ::node	0.0.0.1	person	0-2
# ::node	0.0.0.1.0	name	0-2
# ::node	0.0.0.1.0.0	lucky	0-2
# ::node	0.0.0.1.0.1	joe	0-2
# ::node	0.0.0.1.1	select-01	11-12
# ::node	0.1	accurate	17-18
# ::node	0.1.0	percentage-entity	16-17
# ::node	0.1.0.0	80	15-16
# ::root	0	and
# ::edge	accurate	degree	percentage-entity	0.1	0.1.0
# ::edge	accurate	domain	person	0.1	0.0.0.1
# ::edge	accurate	domain	predict-01	0.1	0.0.0
# ::edge	and	op1	like-01	0	0.0
# ::edge	and	op2	accurate	0	0.1
# ::edge	color	poss	ball	0.0.0.0	0.0.0.0.0
# ::edge	like-01	ARG0	person	0.0	0.0.0.1
# ::edge	like-01	ARG1	predict-01	0.0	0.0.0
# ::edge	name	op1	lucky	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op2	joe	0.0.0.1.0	0.0.0.1.0.1
# ::edge	percentage-entity	value	80	0.1.0	0.1.0.0
# ::edge	person	ARG0-of	name	0.0.0.1	0.0.0.1.0
# ::edge	person	ARG0-of	select-01	0.0.0.1	0.0.0.1.1
# ::edge	predict-01	ARG0	person	0.0.0	0.0.0.1
# ::edge	predict-01	ARG1	color	0.0.0	0.0.0.0
# ::edge	select-01	ARG1	ball	0.0.0.1.1	0.0.0.0.0
# ::edge	select-01	ARG1	color	0.0.0.1.1	0.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / like-01 :ARG1 (MRPNode-2 / predict-01 :ARG1 (MRPNode-3 / color :poss (MRPNode-4 / ball)) :ARG0 (MRPNode-5 / person :ARG0-of (MRPNode-6 / name :op1 lucky :op2 joe) :ARG0-of (MRPNode-7 / select-01 :ARG1 MRPNode-3 :ARG1 MRPNode-4))) :ARG0 MRPNode-5) :op2 (MRPNode-8 / accurate :domain MRPNode-2 :domain MRPNode-5 :degree (MRPNode-9 / percentage-entity :value 80)))

# ::id 360
# ::snt In probability theory, Bayes' theorem relates the conditional and marginal probabilities of two random events.
# ::tok In probability theory , Bayes ' theorem relates the conditional and marginal probabilities of two random events .
# ::alignments 1-2|0.2.0 2-3|0.2 4-5|0.1.1+0.1.1.0+0.1.1.0.0 6-7|0.1 7-8|0 9-10|0.0.0.0 10-11|0.0 11-12|0.0.1.0 12-13|0.0.1 14-15|0.1.0.0 15-16|0.1.0.1 16-17|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.612032 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 57
# ::node	0	relate-01	7-8
# ::node	0.0	and	10-11
# ::node	0.0.0	probability	
# ::node	0.0.0.0	condition-01	9-10
# ::node	0.0.1	probability	12-13
# ::node	0.0.1.0	marginal-02	11-12
# ::node	0.1	theorem	6-7
# ::node	0.1.0	event	16-17
# ::node	0.1.0.0	2	14-15
# ::node	0.1.0.1	random	15-16
# ::node	0.1.1	person	4-5
# ::node	0.1.1.0	name	4-5
# ::node	0.1.1.0.0	bayes	4-5
# ::node	0.2	theory	2-3
# ::node	0.2.0	probability	1-2
# ::root	0	relate-01
# ::edge	and	op1	probability	0.0	0.0.0
# ::edge	and	op2	probability	0.0	0.0.1
# ::edge	event	quant	2	0.1.0	0.1.0.0
# ::edge	event	quant	random	0.1.0	0.1.0.1
# ::edge	name	op1	bayes	0.1.1.0	0.1.1.0.0
# ::edge	person	name	name	0.1.1	0.1.1.0
# ::edge	probability	ARG1-of	condition-01	0.0.0	0.0.0.0
# ::edge	probability	ARG1-of	marginal-02	0.0.1	0.0.1.0
# ::edge	relate-01	ARG0	theorem	0	0.1
# ::edge	relate-01	ARG1	and	0	0.0
# ::edge	relate-01	location	theory	0	0.2
# ::edge	theorem	poss	event	0.1	0.1.0
# ::edge	theorem	poss	person	0.1	0.1.1
# ::edge	theory	mod	probability	0.2	0.2.0
(MRPNode-0 / relate-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / probability :ARG1-of (MRPNode-3 / condition-01)) :op2 (MRPNode-4 / probability :ARG1-of (MRPNode-5 / marginal-02))) :ARG0 (MRPNode-6 / theorem :poss (MRPNode-7 / event :quant 2 :quant (MRPNode-8 / random)) :poss (MRPNode-9 / person :name (MRPNode-10 / name :op1 bayes))) :location (MRPNode-11 / theory :mod (MRPNode-12 / probability)))

# ::id 361
# ::snt Outbound, links from your page to others.
# ::tok Outbound , links from your page to others .
# ::alignments 0-1|0.0 2-3|0 4-5|0.1.0 5-6|0.1 7-8|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:44.615245 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	link-01	2-3
# ::node	0.0	Outbound	0-1
# ::node	0.1	page	5-6
# ::node	0.1.0	you	4-5
# ::node	0.2	other	7-8
# ::root	0	link-01
# ::edge	link-01	ARG2	Outbound	0	0.0
# ::edge	link-01	ARG2	other	0	0.2
# ::edge	link-01	ARG2	page	0	0.1
# ::edge	page	poss	you	0.1	0.1.0
(MRPNode-0 / link-01 :ARG2 (MRPNode-1 / Outbound) :ARG2 (MRPNode-2 / page :poss (MRPNode-3 / you)) :ARG2 (MRPNode-4 / other))

# ::id 362
# ::snt Vector space representation results in the loss of the order which the terms are in the document.
# ::tok Vector space representation results in the loss of the order which the terms are in the document .
# ::alignments 0-1|0.0.0.0 1-2|0.0.0 2-3|0.0 3-4|0 9-10|0.1.0 12-13|0.1.0.0 16-17|0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.624728 ::parser eager_oracle ::smatch 0.8666666666666666 ::n_actions 40
# ::node	0	result-01	3-4
# ::node	0.0	represent-01	2-3
# ::node	0.0.0	space	1-2
# ::node	0.0.0.0	vector	0-1
# ::node	0.1	lose-02	
# ::node	0.1.0	order	9-10
# ::node	0.1.0.0	term	12-13
# ::node	0.1.0.0.0	document	16-17
# ::root	0	result-01
# ::edge	lose-02	ARG1	order	0.1	0.1.0
# ::edge	order	location-of	term	0.1.0	0.1.0.0
# ::edge	represent-01	ARG1	space	0.0	0.0.0
# ::edge	result-01	ARG1	represent-01	0	0.0
# ::edge	result-01	ARG2	lose-02	0	0.1
# ::edge	space	mod	vector	0.0.0	0.0.0.0
# ::edge	term	location	document	0.1.0.0	0.1.0.0.0
(MRPNode-0 / result-01 :ARG1 (MRPNode-1 / represent-01 :ARG1 (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG2 (MRPNode-4 / lose-02 :ARG1 (MRPNode-5 / order :location-of (MRPNode-6 / term :location (MRPNode-7 / document)))))

# ::id 363
# ::snt If a term appears in the document, the terms value in the vector is non-zero.
# ::tok If a term appears in the document , the terms value in the vector is non - zero .
# ::alignments 2-3|0.1.0 3-4|0.1 6-7|0.1.1 10-11|0.0.1 13-14|0.0.1.0 15-16|0.0.0 17-18|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.637700 ::parser eager_oracle ::smatch 0.7857142857142856 ::n_actions 41
# ::node	0	have-condition-91	
# ::node	0.0	zero	17-18
# ::node	0.0.0	-	15-16
# ::node	0.0.1	value	10-11
# ::node	0.0.1.0	vector	13-14
# ::node	0.1	appear-01	3-4
# ::node	0.1.0	term	2-3
# ::node	0.1.1	document	6-7
# ::root	0	have-condition-91
# ::edge	appear-01	ARG1	term	0.1	0.1.0
# ::edge	appear-01	location	document	0.1	0.1.1
# ::edge	have-condition-91	ARG1	zero	0	0.0
# ::edge	have-condition-91	ARG2	appear-01	0	0.1
# ::edge	value	location	vector	0.0.1	0.0.1.0
# ::edge	zero	domain	value	0.0	0.0.1
# ::edge	zero	polarity	-	0.0	0.0.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / zero :polarity - :domain (MRPNode-2 / value :location (MRPNode-3 / vector))) :ARG2 (MRPNode-4 / appear-01 :ARG1 (MRPNode-5 / term) :location (MRPNode-6 / document)))

# ::id 364
# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
# ::tok In vector space model , the documents from which the information is to be retrieved are represented as vectors .
# ::alignments 1-2|0.2.0.0 2-3|0.2.0 3-4|0.2 6-7|0.0 10-11|0.0.0.0 14-15|0.0.0 16-17|0 18-19|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.651565 ::parser eager_oracle ::smatch 1.0 ::n_actions 46
# ::node	0	represent-01	16-17
# ::node	0.0	document	6-7
# ::node	0.0.0	retrieve-01	14-15
# ::node	0.0.0.0	information	10-11
# ::node	0.1	vector	18-19
# ::node	0.2	model-01	3-4
# ::node	0.2.0	space	2-3
# ::node	0.2.0.0	vector	1-2
# ::root	0	represent-01
# ::edge	document	ARG1-of	retrieve-01	0.0	0.0.0
# ::edge	model-01	ARG2	space	0.2	0.2.0
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	represent-01	location	model-01	0	0.2
# ::edge	retrieve-01	ARG1	information	0.0.0	0.0.0.0
# ::edge	space	mod	vector	0.2.0	0.2.0.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document :ARG1-of (MRPNode-2 / retrieve-01 :ARG1 (MRPNode-3 / information))) :ARG2 (MRPNode-4 / vector) :location (MRPNode-5 / model-01 :ARG2 (MRPNode-6 / space :mod (MRPNode-7 / vector))))

# ::id 365
# ::snt The value of a vector is non-zero if a term occurs in the document.
# ::tok The value of a vector is non - zero if a term occurs in the document .
# ::alignments 1-2|0.0.1+0.0.1.0 2-3|0 4-5|0.0.1.0.0 6-7|0.0.0 8-9|0.0.2 11-12|0.1.0 13-14|0.1 15-16|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.663787 ::parser eager_oracle ::smatch 0.7878787878787878 ::n_actions 45
# ::node	0	have-condition-91	2-3
# ::node	0.0	equal-01	
# ::node	0.0.0	-	6-7
# ::node	0.0.1	thing	1-2
# ::node	0.0.1.0	value-01	1-2
# ::node	0.0.1.0.0	vector	4-5
# ::node	0.0.2	zero	8-9
# ::node	0.1	be-located-at-91	13-14
# ::node	0.1.0	term	11-12
# ::node	0.1.1	document	15-16
# ::root	0	have-condition-91
# ::edge	be-located-at-91	ARG1	term	0.1	0.1.0
# ::edge	be-located-at-91	ARG2	document	0.1	0.1.1
# ::edge	equal-01	ARG1	thing	0.0	0.0.1
# ::edge	equal-01	ARG2	zero	0.0	0.0.2
# ::edge	equal-01	polarity	-	0.0	0.0.0
# ::edge	have-condition-91	ARG1	equal-01	0	0.0
# ::edge	have-condition-91	ARG2	be-located-at-91	0	0.1
# ::edge	thing	ARG2-of	value-01	0.0.1	0.0.1.0
# ::edge	value-01	ARG1	vector	0.0.1.0	0.0.1.0.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / equal-01 :polarity - :ARG1 (MRPNode-2 / thing :ARG2-of (MRPNode-3 / value-01 :ARG1 (MRPNode-4 / vector))) :ARG2 (MRPNode-5 / zero)) :ARG2 (MRPNode-6 / be-located-at-91 :ARG1 (MRPNode-7 / term) :ARG2 (MRPNode-8 / document)))

# ::id 366
# ::snt Other possible uses for vector space models are indexing and also to rank the relevancy of differing documents.
# ::tok Other possible uses for vector space models are indexing and also to rank the relevancy of differing documents .
# ::alignments 0-1|0.1 1-2|0.2 2-3|0 4-5|0.0.0.0.0 5-6|0.0.0.0 6-7|0.0.0 9-10|0.0 10-11|0.0.1.1 12-13|0.0.1 14-15|0.0.1.0 16-17|0.0.1.0.0.0 17-18|0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.685085 ::parser eager_oracle ::smatch 1.0 ::n_actions 57
# ::node	0	use-01	2-3
# ::node	0.0	and	9-10
# ::node	0.0.0	model-01	6-7
# ::node	0.0.0.0	space	5-6
# ::node	0.0.0.0.0	vector	4-5
# ::node	0.0.1	rank-01	12-13
# ::node	0.0.1.0	relevant-01	14-15
# ::node	0.0.1.0.0	document	17-18
# ::node	0.0.1.0.0.0	differ-02	16-17
# ::node	0.0.1.1	also	10-11
# ::node	0.1	other	0-1
# ::node	0.2	possible-01	1-2
# ::root	0	use-01
# ::edge	and	op1	model-01	0.0	0.0.0
# ::edge	and	op2	rank-01	0.0	0.0.1
# ::edge	document	ARG1-of	differ-02	0.0.1.0.0	0.0.1.0.0.0
# ::edge	model-01	ARG1	space	0.0.0	0.0.0.0
# ::edge	rank-01	ARG1	relevant-01	0.0.1	0.0.1.0
# ::edge	rank-01	mod	also	0.0.1	0.0.1.1
# ::edge	relevant-01	ARG1	document	0.0.1.0	0.0.1.0.0
# ::edge	space	mod	vector	0.0.0.0	0.0.0.0.0
# ::edge	use-01	ARG1	and	0	0.0
# ::edge	use-01	ARG1-of	possible-01	0	0.2
# ::edge	use-01	mod	other	0	0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / model-01 :ARG1 (MRPNode-3 / space :mod (MRPNode-4 / vector))) :op2 (MRPNode-5 / rank-01 :ARG1 (MRPNode-6 / relevant-01 :ARG1 (MRPNode-7 / document :ARG1-of (MRPNode-8 / differ-02))) :mod (MRPNode-9 / also))) :mod (MRPNode-10 / other) :ARG1-of (MRPNode-11 / possible-01))

# ::id 367
# ::snt The correct answer can be computed using Bayes' theorem.
# ::tok The correct answer can be computed using Bayes ' theorem .
# ::alignments 1-2|0.0.0+0.0.0.0 2-3|0.0.0.1 3-4|0 5-6|0.0 6-7|0.0.1 7-8|0.0.1.0.0+0.0.1.0.0.0+0.0.1.0.0.0.0 9-10|0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.694923 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	possible-01	3-4
# ::node	0.0	compile-01	5-6
# ::node	0.0.0	thing	1-2
# ::node	0.0.0.0	correct-02	1-2
# ::node	0.0.0.1	answer-01	2-3
# ::node	0.0.1	use-01	6-7
# ::node	0.0.1.0	theorem	9-10
# ::node	0.0.1.0.0	person	7-8
# ::node	0.0.1.0.0.0	name	7-8
# ::node	0.0.1.0.0.0.0	bayes	7-8
# ::root	0	possible-01
# ::edge	compile-01	ARG1	thing	0.0	0.0.0
# ::edge	compile-01	manner	use-01	0.0	0.0.1
# ::edge	name	op1	bayes	0.0.1.0.0.0	0.0.1.0.0.0.0
# ::edge	person	name	name	0.0.1.0.0	0.0.1.0.0.0
# ::edge	possible-01	ARG1	compile-01	0	0.0
# ::edge	theorem	poss	person	0.0.1.0	0.0.1.0.0
# ::edge	thing	ARG1-of	correct-02	0.0.0	0.0.0.0
# ::edge	thing	ARG2-of	answer-01	0.0.0	0.0.0.1
# ::edge	use-01	ARG1	theorem	0.0.1	0.0.1.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / compile-01 :ARG1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / correct-02) :ARG2-of (MRPNode-4 / answer-01)) :manner (MRPNode-5 / use-01 :ARG1 (MRPNode-6 / theorem :poss (MRPNode-7 / person :name (MRPNode-8 / name :op1 bayes))))))

# ::id 368
# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
# ::tok The basic idea is to represent each document as a vector of certain weighted word frequencies .
# ::alignments 1-2|0.1.0 2-3|0.1 5-6|0 6-7|0.0.0 7-8|0.0 10-11|0.2 12-13|0.2.0.0 13-14|0.2.0.2 14-15|0.2.0.1 15-16|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.707133 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	represent-01	5-6
# ::node	0.0	document	7-8
# ::node	0.0.0	each	6-7
# ::node	0.1	idea	2-3
# ::node	0.1.0	basic	1-2
# ::node	0.2	vector	10-11
# ::node	0.2.0	frequency	15-16
# ::node	0.2.0.0	certain	12-13
# ::node	0.2.0.1	word	14-15
# ::node	0.2.0.2	weight-01	13-14
# ::root	0	represent-01
# ::edge	document	mod	each	0.0	0.0.0
# ::edge	frequency	ARG1-of	weight-01	0.2.0	0.2.0.2
# ::edge	frequency	ARG1-of	word	0.2.0	0.2.0.1
# ::edge	frequency	mod	certain	0.2.0	0.2.0.0
# ::edge	idea	mod	basic	0.1	0.1.0
# ::edge	represent-01	ARG0	idea	0	0.1
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.2
# ::edge	vector	consist-of	frequency	0.2	0.2.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document :mod (MRPNode-2 / each)) :ARG0 (MRPNode-3 / idea :mod (MRPNode-4 / basic)) :ARG2 (MRPNode-5 / vector :consist-of (MRPNode-6 / frequency :mod (MRPNode-7 / certain) :ARG1-of (MRPNode-8 / word) :ARG1-of (MRPNode-9 / weight-01))))

# ::id 369
# ::snt P(B) is the prior or marginal probability of B, and acts as a normalizing constant.
# ::tok P ( B ) is the prior or marginal probability of B , and acts as a normalizing constant .
# ::alignments 0-3|0.0.0+0.0.0.0+0.0.0.0.0 6-7|0.0.0.1 7-8|0.0 8-9|0.0.1.0 9-10|0.0.1 11-12|0.0.1.1+0.0.1.1.0+0.0.1.1.0.0 13-14|0 14-15|0.1 17-18|0.1.0.0 18-19|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.730915 ::parser eager_oracle ::smatch 0.9259259259259259 ::n_actions 52
# ::node	0	and	13-14
# ::node	0.0	or	7-8
# ::node	0.0.0	thing	0-3
# ::node	0.0.0.0	name	0-3
# ::node	0.0.0.0.0	"p(b"	0-3
# ::node	0.0.0.1	prior	6-7
# ::node	0.0.1	probability	9-10
# ::node	0.0.1.0	marginal-02	8-9
# ::node	0.0.1.1	person	11-12
# ::node	0.0.1.1.0	name	11-12
# ::node	0.0.1.1.0.0	b	11-12
# ::node	0.1	act-01	14-15
# ::node	0.1.0	constant	18-19
# ::node	0.1.0.0	normalize-01	17-18
# ::root	0	and
# ::edge	act-01	ARG1	constant	0.1	0.1.0
# ::edge	and	op1	or	0	0.0
# ::edge	and	op2	act-01	0	0.1
# ::edge	constant	ARG0-of	normalize-01	0.1.0	0.1.0.0
# ::edge	name	op1	"p(b"	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	b	0.0.1.1.0	0.0.1.1.0.0
# ::edge	or	op1	thing	0.0	0.0.0
# ::edge	or	op2	probability	0.0	0.0.1
# ::edge	person	name	name	0.0.1.1	0.0.1.1.0
# ::edge	probability	domain	marginal-02	0.0.1	0.0.1.0
# ::edge	probability	domain	person	0.0.1	0.0.1.1
# ::edge	thing	domain	prior	0.0.0	0.0.0.1
# ::edge	thing	name	name	0.0.0	0.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / or :op1 (MRPNode-2 / thing :name (MRPNode-3 / name :op1 "p(b") :domain (MRPNode-4 / prior)) :op2 (MRPNode-5 / probability :domain (MRPNode-6 / marginal-02) :domain (MRPNode-7 / person :name (MRPNode-8 / name :op1 b)))) :op2 (MRPNode-9 / act-01 :ARG1 (MRPNode-10 / constant :ARG0-of (MRPNode-11 / normalize-01))))

# ::id 370
# ::snt This method is used in the Google Toolbar, which reports back actual site visits to Google.
# ::tok This method is used in the Google Toolbar , which reports back actual site visits to Google .
# ::alignments 0-1|0.0.0 1-2|0.0 3-4|0 6-7|0.1.0.0.2+0.1.0.0.2.0+0.1.0.0.2.0.0 10-11|0.1.0 11-12|0.1.0.1 12-13|0.1.0.0.1 13-14|0.1.0.0.0 14-15|0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.748145 ::parser eager_oracle ::smatch 0.8333333333333334 ::n_actions 46
# ::node	0	use-01	3-4
# ::node	0.0	method	1-2
# ::node	0.0.0	this	0-1
# ::node	0.1	company	
# ::node	0.1.0	report-01	10-11
# ::node	0.1.0.0	visit-01	14-15
# ::node	0.1.0.0.0	site	13-14
# ::node	0.1.0.0.1	actual-02	12-13
# ::node	0.1.0.0.2	company	6-7
# ::node	0.1.0.0.2.0	name	6-7
# ::node	0.1.0.0.2.0.0	google	6-7
# ::node	0.1.0.1	back	11-12
# ::node	0.1.1	name	
# ::node	0.1.1.0	google	
# ::node	0.1.1.1	toolbar	
# ::root	0	use-01
# ::edge	company	ARG0-of	report-01	0.1	0.1.0
# ::edge	company	name	name	0.1	0.1.1
# ::edge	company	name	name	0.1.0.0.2	0.1.0.0.2.0
# ::edge	method	mod	this	0.0	0.0.0
# ::edge	name	op1	google	0.1.0.0.2.0	0.1.0.0.2.0.0
# ::edge	name	op1	google	0.1.1	0.1.1.0
# ::edge	name	op2	toolbar	0.1.1	0.1.1.1
# ::edge	report-01	ARG1	visit-01	0.1.0	0.1.0.0
# ::edge	report-01	mod	back	0.1.0	0.1.0.1
# ::edge	use-01	ARG1	method	0	0.0
# ::edge	use-01	ARG2	company	0	0.1
# ::edge	visit-01	ARG1	company	0.1.0.0	0.1.0.0.2
# ::edge	visit-01	ARG1	site	0.1.0.0	0.1.0.0.0
# ::edge	visit-01	ARG1-of	actual-02	0.1.0.0	0.1.0.0.1
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / method :mod (MRPNode-2 / this)) :ARG2 (MRPNode-3 / company :ARG0-of (MRPNode-4 / report-01 :ARG1 (MRPNode-5 / visit-01 :ARG1 (MRPNode-6 / site) :ARG1-of (MRPNode-7 / actual-02) :ARG1 (MRPNode-8 / company :name (MRPNode-9 / name :op1 google))) :mod (MRPNode-10 / back)) :name (MRPNode-11 / name :op1 google :op2 toolbar)))

# ::id 371
# ::snt P(B) is the prior or marginal probability of B, and acts to normalise the probability.
# ::tok P ( B ) is the prior or marginal probability of B , and acts to normalise the probability .
# ::alignments 2-3|0.0.2+0.0.2.0+0.0.2.0.0+0.0.2.0.0.0 6-7|0.0.0 8-9|0.0.1 9-10|0.1.0.0 13-14|0 14-15|0.1 16-17|0.1.0 18-19|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.774067 ::parser eager_oracle ::smatch 1.0 ::n_actions 60
# ::node	0	and	13-14
# ::node	0.0	probability	18-19
# ::node	0.0.0	prior	6-7
# ::node	0.0.1	marginal-02	8-9
# ::node	0.0.2	person	2-3
# ::node	0.0.2.0	variable	2-3
# ::node	0.0.2.0.0	name	2-3
# ::node	0.0.2.0.0.0	b	2-3
# ::node	0.1	act-01	14-15
# ::node	0.1.0	normalize-01	16-17
# ::node	0.1.0.0	probability	9-10
# ::root	0	and
# ::edge	act-01	ARG0	person	0.1	0.0.2
# ::edge	act-01	ARG1	normalize-01	0.1	0.1.0
# ::edge	and	op1	probability	0	0.0
# ::edge	and	op2	act-01	0	0.1
# ::edge	name	op1	b	0.0.2.0.0	0.0.2.0.0.0
# ::edge	normalize-01	ARG0	person	0.1.0	0.0.2
# ::edge	normalize-01	ARG1	probability	0.1.0	0.1.0.0
# ::edge	person	mod	variable	0.0.2	0.0.2.0
# ::edge	probability	domain	marginal-02	0.0	0.0.1
# ::edge	probability	domain	person	0.0	0.0.2
# ::edge	probability	mod	prior	0.0	0.0.0
# ::edge	variable	name	name	0.0.2.0	0.0.2.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / probability :mod (MRPNode-2 / prior) :domain (MRPNode-3 / marginal-02) :domain (MRPNode-4 / person :mod (MRPNode-5 / variable :name (MRPNode-6 / name :op1 b)))) :op2 (MRPNode-7 / act-01 :ARG0 MRPNode-4 :ARG1 (MRPNode-8 / normalize-01 :ARG0 MRPNode-4 :ARG1 (MRPNode-9 / probability))))

# ::id 372
# ::snt The order in which terms appear in the document is lost in a vector space representation.
# ::tok The order in which terms appear in the document is lost in a vector space representation .
# ::alignments 1-2|0.0 4-5|0.0.0.0 5-6|0.0.0 8-9|0.0.0.1 10-11|0 13-14|0.1.0.0 14-15|0.1.0 15-16|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.782655 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	lose-02	10-11
# ::node	0.0	order	1-2
# ::node	0.0.0	appear-01	5-6
# ::node	0.0.0.0	term	4-5
# ::node	0.0.0.1	document	8-9
# ::node	0.1	representation-02	15-16
# ::node	0.1.0	space	14-15
# ::node	0.1.0.0	vector	13-14
# ::root	0	lose-02
# ::edge	appear-01	ARG1	term	0.0.0	0.0.0.0
# ::edge	appear-01	location	document	0.0.0	0.0.0.1
# ::edge	lose-02	ARG1	order	0	0.0
# ::edge	lose-02	location	representation-02	0	0.1
# ::edge	order	time-of	appear-01	0.0	0.0.0
# ::edge	representation-02	ARG0	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / lose-02 :ARG1 (MRPNode-1 / order :time-of (MRPNode-2 / appear-01 :ARG1 (MRPNode-3 / term) :location (MRPNode-4 / document))) :location (MRPNode-5 / representation-02 :ARG0 (MRPNode-6 / space :mod (MRPNode-7 / vector))))

# ::id 373
# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
# ::tok The basic idea is to represent each document as a vector of certain weighted word frequencies .
# ::alignments 1-2|0.1.0 2-3|0.1 5-6|0 6-7|0.0.0 7-8|0.0 10-11|0.2 12-13|0.2.0.0 13-14|0.2.0.2 14-15|0.2.0.1 15-16|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.794751 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	represent-01	5-6
# ::node	0.0	document	7-8
# ::node	0.0.0	each	6-7
# ::node	0.1	idea	2-3
# ::node	0.1.0	basic	1-2
# ::node	0.2	vector	10-11
# ::node	0.2.0	frequency	15-16
# ::node	0.2.0.0	certain	12-13
# ::node	0.2.0.1	word	14-15
# ::node	0.2.0.2	weight-01	13-14
# ::root	0	represent-01
# ::edge	document	mod	each	0.0	0.0.0
# ::edge	frequency	ARG1-of	weight-01	0.2.0	0.2.0.2
# ::edge	frequency	ARG1-of	word	0.2.0	0.2.0.1
# ::edge	frequency	mod	certain	0.2.0	0.2.0.0
# ::edge	idea	mod	basic	0.1	0.1.0
# ::edge	represent-01	ARG0	idea	0	0.1
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.2
# ::edge	vector	consist-of	frequency	0.2	0.2.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document :mod (MRPNode-2 / each)) :ARG0 (MRPNode-3 / idea :mod (MRPNode-4 / basic)) :ARG2 (MRPNode-5 / vector :consist-of (MRPNode-6 / frequency :mod (MRPNode-7 / certain) :ARG1-of (MRPNode-8 / word) :ARG1-of (MRPNode-9 / weight-01))))

# ::id 374
# ::snt Java allows object inheritance.
# ::tok Java allows object inheritance .
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.0 3-4|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.797832 ::parser eager_oracle ::smatch 1.0 ::n_actions 19
# ::node	0	allow-01	1-2
# ::node	0.0	inherit-01	3-4
# ::node	0.0.0	object	2-3
# ::node	0.1	company	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	java	0-1
# ::root	0	allow-01
# ::edge	allow-01	ARG0	company	0	0.1
# ::edge	allow-01	ARG1	inherit-01	0	0.0
# ::edge	company	name	name	0.1	0.1.0
# ::edge	inherit-01	ARG1	object	0.0	0.0.0
# ::edge	name	op1	java	0.1.0	0.1.0.0
(MRPNode-0 / allow-01 :ARG1 (MRPNode-1 / inherit-01 :ARG1 (MRPNode-2 / object)) :ARG0 (MRPNode-3 / company :name (MRPNode-4 / name :op1 java)))

# ::id 375
# ::snt Virtual attributes and methods can be shadowed/overridden.
# ::tok Virtual attributes and methods can be shadowed / overridden .
# ::alignments 0-1|0.0.0.2 1-2|0.0.0.0+0.0.0.0.0 2-3|0.0.0 3-4|0.0.0.1 4-5|0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.802468 ::parser eager_oracle ::smatch 1.0 ::n_actions 35
# ::node	0	possible-01	4-5
# ::node	0.0	shadow	6-7
# ::node	0.0.0	and	2-3
# ::node	0.0.0.0	thing	1-2
# ::node	0.0.0.0.0	attribute-01	1-2
# ::node	0.0.0.1	method	3-4
# ::node	0.0.0.2	virtual	0-1
# ::root	0	possible-01
# ::edge	and	op1	thing	0.0.0	0.0.0.0
# ::edge	and	op2	method	0.0.0	0.0.0.1
# ::edge	and	poss	virtual	0.0.0	0.0.0.2
# ::edge	possible-01	ARG1	shadow	0	0.0
# ::edge	shadow	domain	and	0.0	0.0.0
# ::edge	thing	ARG1-of	attribute-01	0.0.0.0	0.0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / shadow :domain (MRPNode-2 / and :op1 (MRPNode-3 / thing :ARG1-of (MRPNode-4 / attribute-01)) :op2 (MRPNode-5 / method) :poss (MRPNode-6 / virtual))))

# ::id 376
# ::snt In the vector space model a document is represented as a vector.
# ::tok In the vector space model a document is represented as a vector .
# ::alignments 2-3|0.2.0.0 3-4|0.2.0 4-5|0.2 6-7|0.0 8-9|0 11-12|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.810772 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	represent-01	8-9
# ::node	0.0	document	6-7
# ::node	0.1	vector	11-12
# ::node	0.2	model-01	4-5
# ::node	0.2.0	space	3-4
# ::node	0.2.0.0	vector	2-3
# ::root	0	represent-01
# ::edge	model-01	ARG1	space	0.2	0.2.0
# ::edge	represent-01	ARG1	document	0	0.0
# ::edge	represent-01	ARG2	vector	0	0.1
# ::edge	represent-01	location	model-01	0	0.2
# ::edge	space	mod	vector	0.2.0	0.2.0.0
(MRPNode-0 / represent-01 :ARG1 (MRPNode-1 / document) :ARG2 (MRPNode-2 / vector) :location (MRPNode-3 / model-01 :ARG1 (MRPNode-4 / space :mod (MRPNode-5 / vector))))

# ::id 377
# ::snt The peropos of inheritance in object oriented programming is to minimize the reuse of existing code without modification.
# ::tok The peropos of inheritance in object oriented programming is to minimize the reuse of existing code without modification .
# ::alignments 3-4|0.1 5-6|0.1.0.0.0 6-7|0.1.0.0 7-8|0.1.0 10-11|0.0 13-14|0 14-15|0.0.0.0.0 15-16|0.0.0.0 16-17|0.0.0.1.0 17-18|0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.827381 ::parser eager_oracle ::smatch 0.8500000000000001 ::n_actions 49
# ::node	0	have-mod-91	13-14
# ::node	0.0	minimize-01	10-11
# ::node	0.0.0	rewrite-01	
# ::node	0.0.0.0	code	15-16
# ::node	0.0.0.0.0	exist-01	14-15
# ::node	0.0.0.1	modify-01	17-18
# ::node	0.0.0.1.0	-	16-17
# ::node	0.1	inherit-01	3-4
# ::node	0.1.0	program-01	7-8
# ::node	0.1.0.0	orient-01	6-7
# ::node	0.1.0.0.0	object	5-6
# ::root	0	have-mod-91
# ::edge	code	ARG1-of	exist-01	0.0.0.0	0.0.0.0.0
# ::edge	have-mod-91	ARG1	inherit-01	0	0.1
# ::edge	have-mod-91	ARG1	minimize-01	0	0.0
# ::edge	inherit-01	ARG1	program-01	0.1	0.1.0
# ::edge	minimize-01	ARG1	rewrite-01	0.0	0.0.0
# ::edge	modify-01	polarity	-	0.0.0.1	0.0.0.1.0
# ::edge	orient-01	ARG2	object	0.1.0.0	0.1.0.0.0
# ::edge	program-01	ARG1-of	orient-01	0.1.0	0.1.0.0
# ::edge	rewrite-01	ARG1	code	0.0.0	0.0.0.0
# ::edge	rewrite-01	manner	modify-01	0.0.0	0.0.0.1
(MRPNode-0 / have-mod-91 :ARG1 (MRPNode-1 / minimize-01 :ARG1 (MRPNode-2 / rewrite-01 :ARG1 (MRPNode-3 / code :ARG1-of (MRPNode-4 / exist-01)) :manner (MRPNode-5 / modify-01 :polarity -))) :ARG1 (MRPNode-6 / inherit-01 :ARG1 (MRPNode-7 / program-01 :ARG1-of (MRPNode-8 / orient-01 :ARG2 (MRPNode-9 / object)))))

# ::id 378
# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
# ::tok When a document is represented as a vector , each dimension corresponds to a separate term .
# ::alignments 2-3|0.2.0 4-5|0.2 7-8|0.2.1 9-10|0.1.0 10-11|0.1 11-12|0 14-15|0.0.0 15-16|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.835298 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	correspond-02	11-12
# ::node	0.0	term	15-16
# ::node	0.0.0	separate-02	14-15
# ::node	0.1	dimension	10-11
# ::node	0.1.0	each	9-10
# ::node	0.2	represent-01	4-5
# ::node	0.2.0	document	2-3
# ::node	0.2.1	vector	7-8
# ::root	0	correspond-02
# ::edge	correspond-02	ARG1	dimension	0	0.1
# ::edge	correspond-02	ARG1	term	0	0.0
# ::edge	correspond-02	time	represent-01	0	0.2
# ::edge	dimension	mod	each	0.1	0.1.0
# ::edge	represent-01	ARG1	document	0.2	0.2.0
# ::edge	represent-01	ARG2	vector	0.2	0.2.1
# ::edge	term	ARG1-of	separate-02	0.0	0.0.0
(MRPNode-0 / correspond-02 :ARG1 (MRPNode-1 / term :ARG1-of (MRPNode-2 / separate-02)) :ARG1 (MRPNode-3 / dimension :mod (MRPNode-4 / each)) :time (MRPNode-5 / represent-01 :ARG1 (MRPNode-6 / document) :ARG2 (MRPNode-7 / vector)))

# ::id 379
# ::snt The vector space model is one of these methods, and it is an algebraic model.
# ::tok The vector space model is one of these methods , and it is an algebraic model .
# ::alignments 1-2|0.0.1.0.0 2-3|0.0.1.0 3-4|0.0.1 6-7|0.0 7-8|0.0.0.0 8-9|0.0.0 10-11|0 14-15|0.1.0 15-16|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.856224 ::parser eager_oracle ::smatch 1.0 ::n_actions 46
# ::node	0	and	10-11
# ::node	0.0	include-91	6-7
# ::node	0.0.0	method	8-9
# ::node	0.0.0.0	this	7-8
# ::node	0.0.1	model	3-4
# ::node	0.0.1.0	space	2-3
# ::node	0.0.1.0.0	vector	1-2
# ::node	0.1	model	15-16
# ::node	0.1.0	algebraic	14-15
# ::root	0	and
# ::edge	and	op1	include-91	0	0.0
# ::edge	and	op2	model	0	0.1
# ::edge	include-91	ARG1	method	0.0	0.0.0
# ::edge	include-91	ARG1	model	0.0	0.0.1
# ::edge	method	mod	this	0.0.0	0.0.0.0
# ::edge	model	mod	algebraic	0.1	0.1.0
# ::edge	model	mod	space	0.0.1	0.0.1.0
# ::edge	space	mod	vector	0.0.1.0	0.0.1.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / include-91 :ARG1 (MRPNode-2 / method :mod (MRPNode-3 / this)) :ARG1 (MRPNode-4 / model :mod (MRPNode-5 / space :mod (MRPNode-6 / vector)))) :op2 (MRPNode-7 / model :mod (MRPNode-8 / algebraic)))

# ::id 380
# ::snt The vector space model has several disadvantages.
# ::tok The vector space model has several disadvantages .
# ::alignments 1-2|0.1.0.0 2-3|0.1.0 3-4|0.1 5-6|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:44.859499 ::parser eager_oracle ::smatch 0.5882352941176471 ::n_actions 21
# ::node	0	advantage-01	
# ::node	0.0	-	
# ::node	0.1	model	3-4
# ::node	0.1.0	space	2-3
# ::node	0.1.0.0	vector	1-2
# ::node	0.2	several	5-6
# ::root	0	advantage-01
# ::edge	advantage-01	ARG1	model	0	0.1
# ::edge	advantage-01	ARG3	several	0	0.2
# ::edge	advantage-01	polarity	-	0	0.0
# ::edge	model	mod	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / advantage-01 :polarity - :ARG1 (MRPNode-1 / model :mod (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG3 (MRPNode-4 / several))

# ::id 381
# ::snt The peropos of inheritance in object oriented programming is to minimize the reuse of existing code without modification.
# ::tok The peropos of inheritance in object oriented programming is to minimize the reuse of existing code without modification .
# ::alignments 3-4|0.1 5-6|0.1.0.0.0 6-7|0.1.0.0 7-8|0.1.0 10-11|0.0 13-14|0 14-15|0.0.0.0.0 15-16|0.0.0.0 16-17|0.0.0.1.0 17-18|0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.876334 ::parser eager_oracle ::smatch 0.8500000000000001 ::n_actions 49
# ::node	0	have-mod-91	13-14
# ::node	0.0	minimize-01	10-11
# ::node	0.0.0	rewrite-01	
# ::node	0.0.0.0	code	15-16
# ::node	0.0.0.0.0	exist-01	14-15
# ::node	0.0.0.1	modify-01	17-18
# ::node	0.0.0.1.0	-	16-17
# ::node	0.1	inherit-01	3-4
# ::node	0.1.0	program-01	7-8
# ::node	0.1.0.0	orient-01	6-7
# ::node	0.1.0.0.0	object	5-6
# ::root	0	have-mod-91
# ::edge	code	ARG1-of	exist-01	0.0.0.0	0.0.0.0.0
# ::edge	have-mod-91	ARG1	inherit-01	0	0.1
# ::edge	have-mod-91	ARG1	minimize-01	0	0.0
# ::edge	inherit-01	ARG1	program-01	0.1	0.1.0
# ::edge	minimize-01	ARG1	rewrite-01	0.0	0.0.0
# ::edge	modify-01	polarity	-	0.0.0.1	0.0.0.1.0
# ::edge	orient-01	ARG2	object	0.1.0.0	0.1.0.0.0
# ::edge	program-01	ARG1-of	orient-01	0.1.0	0.1.0.0
# ::edge	rewrite-01	ARG1	code	0.0.0	0.0.0.0
# ::edge	rewrite-01	manner	modify-01	0.0.0	0.0.0.1
(MRPNode-0 / have-mod-91 :ARG1 (MRPNode-1 / minimize-01 :ARG1 (MRPNode-2 / rewrite-01 :ARG1 (MRPNode-3 / code :ARG1-of (MRPNode-4 / exist-01)) :manner (MRPNode-5 / modify-01 :polarity -))) :ARG1 (MRPNode-6 / inherit-01 :ARG1 (MRPNode-7 / program-01 :ARG1-of (MRPNode-8 / orient-01 :ARG2 (MRPNode-9 / object)))))

# ::id 382
# ::snt The order in which the terms appear in the document is lost in the vector space representation.
# ::tok The order in which the terms appear in the document is lost in the vector space representation .
# ::alignments 1-2|0.0 5-6|0.0.0.0 6-7|0.0.0 9-10|0.0.0.1 11-12|0 14-15|0.1.0.0 15-16|0.1.0 16-17|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.884787 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	lose-02	11-12
# ::node	0.0	order	1-2
# ::node	0.0.0	appear-01	6-7
# ::node	0.0.0.0	term	5-6
# ::node	0.0.0.1	document	9-10
# ::node	0.1	representation-02	16-17
# ::node	0.1.0	space	15-16
# ::node	0.1.0.0	vector	14-15
# ::root	0	lose-02
# ::edge	appear-01	ARG1	term	0.0.0	0.0.0.0
# ::edge	appear-01	location	document	0.0.0	0.0.0.1
# ::edge	lose-02	ARG1	order	0	0.0
# ::edge	lose-02	location	representation-02	0	0.1
# ::edge	order	time-of	appear-01	0.0	0.0.0
# ::edge	representation-02	ARG0	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / lose-02 :ARG1 (MRPNode-1 / order :time-of (MRPNode-2 / appear-01 :ARG1 (MRPNode-3 / term) :location (MRPNode-4 / document))) :location (MRPNode-5 / representation-02 :ARG0 (MRPNode-6 / space :mod (MRPNode-7 / vector))))

# ::id 383
# ::snt The value of a vector is non-zero if a term occurs in the document.
# ::tok The value of a vector is non - zero if a term occurs in the document .
# ::alignments 1-2|0.0.1+0.0.1.0 2-3|0 4-5|0.0.1.0.0 6-7|0.0.0 8-9|0.0.2 11-12|0.1.0 13-14|0.1 15-16|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.896628 ::parser eager_oracle ::smatch 0.7878787878787878 ::n_actions 45
# ::node	0	have-condition-91	2-3
# ::node	0.0	equal-01	
# ::node	0.0.0	-	6-7
# ::node	0.0.1	thing	1-2
# ::node	0.0.1.0	value-01	1-2
# ::node	0.0.1.0.0	vector	4-5
# ::node	0.0.2	zero	8-9
# ::node	0.1	be-located-at-91	13-14
# ::node	0.1.0	term	11-12
# ::node	0.1.1	document	15-16
# ::root	0	have-condition-91
# ::edge	be-located-at-91	ARG1	term	0.1	0.1.0
# ::edge	be-located-at-91	ARG2	document	0.1	0.1.1
# ::edge	equal-01	ARG1	thing	0.0	0.0.1
# ::edge	equal-01	ARG2	zero	0.0	0.0.2
# ::edge	equal-01	polarity	-	0.0	0.0.0
# ::edge	have-condition-91	ARG1	equal-01	0	0.0
# ::edge	have-condition-91	ARG2	be-located-at-91	0	0.1
# ::edge	thing	ARG2-of	value-01	0.0.1	0.0.1.0
# ::edge	value-01	ARG1	vector	0.0.1.0	0.0.1.0.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / equal-01 :polarity - :ARG1 (MRPNode-2 / thing :ARG2-of (MRPNode-3 / value-01 :ARG1 (MRPNode-4 / vector))) :ARG2 (MRPNode-5 / zero)) :ARG2 (MRPNode-6 / be-located-at-91 :ARG1 (MRPNode-7 / term) :ARG2 (MRPNode-8 / document)))

# ::id 384
# ::snt The similarity measures largely identify the retrieval efficiency of a particular information retrieval system.
# ::tok The similarity measures largely identify the retrieval efficiency of a particular information retrieval system .
# ::alignments 2-3|0.1 3-4|0.2 4-5|0 7-8|0.0.0 10-11|0.0.0.0.0 11-12|0.0.0.0.1.0 12-13|0.0.0.0.1 13-14|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.909907 ::parser eager_oracle ::smatch 0.8333333333333334 ::n_actions 40
# ::node	0	identify-01	4-5
# ::node	0.0	rely-01	
# ::node	0.0.0	efficient-01	7-8
# ::node	0.0.0.0	system	13-14
# ::node	0.0.0.0.0	particular	10-11
# ::node	0.0.0.0.1	retrieve-01	12-13
# ::node	0.0.0.0.1.0	information	11-12
# ::node	0.1	measure-01	2-3
# ::node	0.1.0	resemble-01	
# ::node	0.2	large	3-4
# ::root	0	identify-01
# ::edge	efficient-01	ARG1	system	0.0.0	0.0.0.0
# ::edge	identify-01	ARG0	measure-01	0	0.1
# ::edge	identify-01	ARG1	rely-01	0	0.0
# ::edge	identify-01	degree	large	0	0.2
# ::edge	measure-01	ARG1-of	resemble-01	0.1	0.1.0
# ::edge	rely-01	ARG1	efficient-01	0.0	0.0.0
# ::edge	retrieve-01	ARG1	information	0.0.0.0.1	0.0.0.0.1.0
# ::edge	system	ARG0-of	retrieve-01	0.0.0.0	0.0.0.0.1
# ::edge	system	mod	particular	0.0.0.0	0.0.0.0.0
(MRPNode-0 / identify-01 :ARG1 (MRPNode-1 / rely-01 :ARG1 (MRPNode-2 / efficient-01 :ARG1 (MRPNode-3 / system :mod (MRPNode-4 / particular) :ARG0-of (MRPNode-5 / retrieve-01 :ARG1 (MRPNode-6 / information))))) :ARG0 (MRPNode-7 / measure-01 :ARG1-of (MRPNode-8 / resemble-01)) :degree (MRPNode-9 / large))

# ::id 385
# ::snt The vector space model is one of these methods, and it is an algebraic model.
# ::tok The vector space model is one of these methods , and it is an algebraic model .
# ::alignments 1-2|0.0.1.0.0 2-3|0.0.1.0 3-4|0.0.1 6-7|0.0 7-8|0.0.0.0 8-9|0.0.0 10-11|0 14-15|0.1.0 15-16|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.925915 ::parser eager_oracle ::smatch 1.0 ::n_actions 46
# ::node	0	and	10-11
# ::node	0.0	include-91	6-7
# ::node	0.0.0	method	8-9
# ::node	0.0.0.0	this	7-8
# ::node	0.0.1	model	3-4
# ::node	0.0.1.0	space	2-3
# ::node	0.0.1.0.0	vector	1-2
# ::node	0.1	model	15-16
# ::node	0.1.0	algebraic	14-15
# ::root	0	and
# ::edge	and	op1	include-91	0	0.0
# ::edge	and	op2	model	0	0.1
# ::edge	include-91	ARG1	method	0.0	0.0.0
# ::edge	include-91	ARG1	model	0.0	0.0.1
# ::edge	method	mod	this	0.0.0	0.0.0.0
# ::edge	model	mod	algebraic	0.1	0.1.0
# ::edge	model	mod	space	0.0.1	0.0.1.0
# ::edge	space	mod	vector	0.0.1.0	0.0.1.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / include-91 :ARG1 (MRPNode-2 / method :mod (MRPNode-3 / this)) :ARG1 (MRPNode-4 / model :mod (MRPNode-5 / space :mod (MRPNode-6 / vector)))) :op2 (MRPNode-7 / model :mod (MRPNode-8 / algebraic)))

# ::id 386
# ::snt Generalise the structure of an optimal solution 2.
# ::tok Generalise the structure of an optimal solution 2 .
# ::alignments 0-1|0 2-3|0.0 5-6|0.0.0.1 6-7|0.0.0+0.0.0.2 7-8|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:44.929782 ::parser eager_oracle ::smatch 0.9166666666666666 ::n_actions 30
# ::node	0	generalize-01	0-1
# ::node	0.0	structure-01	2-3
# ::node	0.0.0	thing	6-7
# ::node	0.0.0.0	2	7-8
# ::node	0.0.0.1	optimal	5-6
# ::node	0.0.0.2	solve-01	6-7
# ::node	0.1	you	
# ::root	0	generalize-01
# ::edge	generalize-01	ARG0	you	0	0.1
# ::edge	generalize-01	ARG1	structure-01	0	0.0
# ::edge	structure-01	ARG1	thing	0.0	0.0.0
# ::edge	thing	ARG2-of	solve-01	0.0.0	0.0.0.2
# ::edge	thing	mod	optimal	0.0.0	0.0.0.1
# ::edge	thing	quant	2	0.0.0	0.0.0.0
(MRPNode-0 / generalize-01 :ARG1 (MRPNode-1 / structure-01 :ARG1 (MRPNode-2 / thing :quant 2 :mod (MRPNode-3 / optimal) :ARG2-of (MRPNode-4 / solve-01))) :ARG0 (MRPNode-5 / you))

# ::id 387
# ::snt The vector space model is one of these methods, and it is an algebraic model.
# ::tok The vector space model is one of these methods , and it is an algebraic model .
# ::alignments 1-2|0.0.1.0.0 2-3|0.0.1.0 3-4|0.0.1 6-7|0.0 7-8|0.0.0.0 8-9|0.0.0 10-11|0 14-15|0.1.0 15-16|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.946948 ::parser eager_oracle ::smatch 1.0 ::n_actions 46
# ::node	0	and	10-11
# ::node	0.0	include-91	6-7
# ::node	0.0.0	method	8-9
# ::node	0.0.0.0	this	7-8
# ::node	0.0.1	model	3-4
# ::node	0.0.1.0	space	2-3
# ::node	0.0.1.0.0	vector	1-2
# ::node	0.1	model	15-16
# ::node	0.1.0	algebraic	14-15
# ::root	0	and
# ::edge	and	op1	include-91	0	0.0
# ::edge	and	op2	model	0	0.1
# ::edge	include-91	ARG1	method	0.0	0.0.0
# ::edge	include-91	ARG1	model	0.0	0.0.1
# ::edge	method	mod	this	0.0.0	0.0.0.0
# ::edge	model	mod	algebraic	0.1	0.1.0
# ::edge	model	mod	space	0.0.1	0.0.1.0
# ::edge	space	mod	vector	0.0.1.0	0.0.1.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / include-91 :ARG1 (MRPNode-2 / method :mod (MRPNode-3 / this)) :ARG1 (MRPNode-4 / model :mod (MRPNode-5 / space :mod (MRPNode-6 / vector)))) :op2 (MRPNode-7 / model :mod (MRPNode-8 / algebraic)))

# ::id 388
# ::snt If the term doesn’t occur within the document, the value in the vector is zero.
# ::tok If the term does n't occur within the document , the value in the vector is zero .
# ::alignments 2-3|0.1.1 4-5|0.1.0 6-7|0.1.2 8-9|0.1.2.0 11-12|0.0 12-13|0.1 14-15|0.0.0 16-17|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:44.954777 ::parser eager_oracle ::smatch 0.7272727272727272 ::n_actions 44
# ::node	0	have-condition-91	
# ::node	0.0	value	11-12
# ::node	0.0.0	vector	14-15
# ::node	0.0.1	zero	16-17
# ::node	0.1	be-located-at-91	12-13
# ::node	0.1.0	-	4-5
# ::node	0.1.1	term	2-3
# ::node	0.1.2	within	6-7
# ::node	0.1.2.0	document	8-9
# ::root	0	have-condition-91
# ::edge	be-located-at-91	ARG1	term	0.1	0.1.1
# ::edge	be-located-at-91	ARG2	within	0.1	0.1.2
# ::edge	be-located-at-91	arg2	-	0.1	0.1.0
# ::edge	have-condition-91	ARG1	value	0	0.0
# ::edge	have-condition-91	ARG2	be-located-at-91	0	0.1
# ::edge	value	quant	vector	0.0	0.0.0
# ::edge	value	quant	zero	0.0	0.0.1
# ::edge	within	op1	document	0.1.2	0.1.2.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / value :quant (MRPNode-2 / vector) :quant (MRPNode-3 / zero)) :ARG2 (MRPNode-4 / be-located-at-91 :arg2 - :ARG1 (MRPNode-5 / term) :ARG2 (MRPNode-6 / within :op1 (MRPNode-7 / document))))

# ::id 389
# ::snt In probability theory, the prior and conditional probabilities of two random events are related by Bayes' theorem.
# ::tok In probability theory , the prior and conditional probabilities of two random events are related by Bayes ' theorem .
# ::alignments 1-2|0.2.2 2-3|0.2 5-6|0.1.0 6-7|0.1 7-8|0.1.1.0 8-9|0.2.1 10-11|0.2.0.0 11-12|0.2.0.1 12-13|0.2.0 14-15|0 16-17|0.0.0+0.0.0.0+0.0.0.0.0 18-19|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.136358 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 59
# ::node	0	relate-01	14-15
# ::node	0.0	theorem	18-19
# ::node	0.0.0	person	16-17
# ::node	0.0.0.0	name	16-17
# ::node	0.0.0.0.0	bayes	16-17
# ::node	0.1	and	6-7
# ::node	0.1.0	prior	5-6
# ::node	0.1.1	probability	
# ::node	0.1.1.0	condition-01	7-8
# ::node	0.2	theory	2-3
# ::node	0.2.0	event	12-13
# ::node	0.2.0.0	2	10-11
# ::node	0.2.0.1	random	11-12
# ::node	0.2.1	probability	8-9
# ::node	0.2.2	probability	1-2
# ::root	0	relate-01
# ::edge	and	op1	prior	0.1	0.1.0
# ::edge	and	op2	probability	0.1	0.1.1
# ::edge	event	mod	random	0.2.0	0.2.0.1
# ::edge	event	quant	2	0.2.0	0.2.0.0
# ::edge	name	op1	bayes	0.0.0.0	0.0.0.0.0
# ::edge	person	name	name	0.0.0	0.0.0.0
# ::edge	probability	mod	condition-01	0.1.1	0.1.1.0
# ::edge	relate-01	ARG1	and	0	0.1
# ::edge	relate-01	ARG1	theorem	0	0.0
# ::edge	relate-01	location	theory	0	0.2
# ::edge	theorem	poss	person	0.0	0.0.0
# ::edge	theory	mod	event	0.2	0.2.0
# ::edge	theory	mod	probability	0.2	0.2.1
# ::edge	theory	mod	probability	0.2	0.2.2
(MRPNode-0 / relate-01 :ARG1 (MRPNode-1 / theorem :poss (MRPNode-2 / person :name (MRPNode-3 / name :op1 bayes))) :ARG1 (MRPNode-4 / and :op1 (MRPNode-5 / prior) :op2 (MRPNode-6 / probability :mod (MRPNode-7 / condition-01))) :location (MRPNode-8 / theory :mod (MRPNode-9 / event :quant 2 :mod (MRPNode-10 / random)) :mod (MRPNode-11 / probability) :mod (MRPNode-12 / probability)))

# ::id 390
# ::snt The order in which terms appear in the document is lost in a vector space representation.
# ::tok The order in which terms appear in the document is lost in a vector space representation .
# ::alignments 1-2|0.0 4-5|0.0.0.0 5-6|0.0.0 8-9|0.0.0.1 10-11|0 13-14|0.1.0.0 14-15|0.1.0 15-16|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:45.145503 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	lose-02	10-11
# ::node	0.0	order	1-2
# ::node	0.0.0	appear-01	5-6
# ::node	0.0.0.0	term	4-5
# ::node	0.0.0.1	document	8-9
# ::node	0.1	representation-02	15-16
# ::node	0.1.0	space	14-15
# ::node	0.1.0.0	vector	13-14
# ::root	0	lose-02
# ::edge	appear-01	ARG1	term	0.0.0	0.0.0.0
# ::edge	appear-01	location	document	0.0.0	0.0.0.1
# ::edge	lose-02	ARG1	order	0	0.0
# ::edge	lose-02	location	representation-02	0	0.1
# ::edge	order	time-of	appear-01	0.0	0.0.0
# ::edge	representation-02	ARG0	space	0.1	0.1.0
# ::edge	space	mod	vector	0.1.0	0.1.0.0
(MRPNode-0 / lose-02 :ARG1 (MRPNode-1 / order :time-of (MRPNode-2 / appear-01 :ARG1 (MRPNode-3 / term) :location (MRPNode-4 / document))) :location (MRPNode-5 / representation-02 :ARG0 (MRPNode-6 / space :mod (MRPNode-7 / vector))))

# ::id 391
# ::snt Inheritance is one of the basic concepts of Object Oriented Programming.
# ::tok Inheritance is one of the basic concepts of Object Oriented Programming .
# ::alignments 3-4|0.0 5-6|0.0.0.0 6-7|0+0.0.0 8-9|0.0.0.1.0.0 10-11|0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:45.152503 ::parser eager_oracle ::smatch 0.7692307692307693 ::n_actions 34
# ::node	0	concept	6-7
# ::node	0.0	include-91	3-4
# ::node	0.0.0	concept	6-7
# ::node	0.0.0.0	basic	5-6
# ::node	0.0.0.1	program-01	10-11
# ::node	0.0.0.1.0	integrate-01	
# ::node	0.0.0.1.0.0	object	8-9
# ::node	0.1	influence-01	
# ::root	0	concept
# ::edge	concept	ARG1-of	include-91	0	0.0
# ::edge	concept	domain	influence-01	0	0.1
# ::edge	concept	mod	basic	0.0.0	0.0.0.0
# ::edge	concept	part-of	program-01	0.0.0	0.0.0.1
# ::edge	include-91	ARG2	concept	0.0	0.0.0
# ::edge	integrate-01	ARG2	object	0.0.0.1.0	0.0.0.1.0.0
# ::edge	program-01	ARG1-of	integrate-01	0.0.0.1	0.0.0.1.0
(MRPNode-0 / concept :ARG1-of (MRPNode-1 / include-91 :ARG2 (MRPNode-2 / concept :mod (MRPNode-3 / basic) :part-of (MRPNode-4 / program-01 :ARG1-of (MRPNode-5 / integrate-01 :ARG2 (MRPNode-6 / object))))) :domain (MRPNode-7 / influence-01))

# ::id 392
# ::snt This can be useful when the number of times a word appears is not considered important.
# ::tok This can be useful when the number of times a word appears is not considered important .
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 6-7|0.1.1.0 10-11|0.1.1.0.0.0 11-12|0.1.1.0.0 13-14|0.1.0 14-15|0.1 15-16|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:45.163497 ::parser eager_oracle ::smatch 1.0 ::n_actions 48
# ::node	0	possible-01	1-2
# ::node	0.0	useful-05	3-4
# ::node	0.0.0	this	0-1
# ::node	0.1	consider-01	14-15
# ::node	0.1.0	-	13-14
# ::node	0.1.1	important-01	15-16
# ::node	0.1.1.0	number	6-7
# ::node	0.1.1.0.0	appear-01	11-12
# ::node	0.1.1.0.0.0	word	10-11
# ::root	0	possible-01
# ::edge	appear-01	ARG1	word	0.1.1.0.0	0.1.1.0.0.0
# ::edge	consider-01	ARG1	important-01	0.1	0.1.1
# ::edge	consider-01	polarity	-	0.1	0.1.0
# ::edge	important-01	ARG1	number	0.1.1	0.1.1.0
# ::edge	number	quant-of	appear-01	0.1.1.0	0.1.1.0.0
# ::edge	possible-01	ARG1	useful-05	0	0.0
# ::edge	possible-01	condition	consider-01	0	0.1
# ::edge	useful-05	ARG1	this	0.0	0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / useful-05 :ARG1 (MRPNode-2 / this)) :condition (MRPNode-3 / consider-01 :polarity - :ARG1 (MRPNode-4 / important-01 :ARG1 (MRPNode-5 / number :quant-of (MRPNode-6 / appear-01 :ARG1 (MRPNode-7 / word))))))

# ::id 393
# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
# ::tok The easiest way to look at inheritance is as an " ... is a kind of " relationship .
# ::alignments 1-2|0.0 2-3|0 4-5|0.2 6-7|0.2.0 14-15|0.3.0 15-16|0.1 17-18|0.3 ::annotator aligner3.py ::date 2021-03-11 23:00:45.174847 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 43
# ::node	0	way	2-3
# ::node	0.0	simple-02	1-2
# ::node	0.1	have-degree-91	15-16
# ::node	0.1.0	more	
# ::node	0.2	look-01	4-5
# ::node	0.2.0	inherit-01	6-7
# ::node	0.3	relation-03	17-18
# ::node	0.3.0	kind	14-15
# ::root	0	way
# ::edge	have-degree-91	ARG3	more	0.1	0.1.0
# ::edge	look-01	ARG1	inherit-01	0.2	0.2.0
# ::edge	relation-03	mod	kind	0.3	0.3.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	ARG1-of	simple-02	0	0.0
# ::edge	way	domain	look-01	0	0.2
# ::edge	way	domain	relation-03	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / simple-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG3 (MRPNode-3 / more)) :domain (MRPNode-4 / look-01 :ARG1 (MRPNode-5 / inherit-01)) :domain (MRPNode-6 / relation-03 :mod (MRPNode-7 / kind)))

# ::id 394
# ::snt Vector space representation results in the loss of the order which the terms are in the document.
# ::tok Vector space representation results in the loss of the order which the terms are in the document .
# ::alignments 0-1|0.0.0.0 1-2|0.0.0 2-3|0.0 3-4|0 9-10|0.1.0 12-13|0.1.0.0 16-17|0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.183210 ::parser eager_oracle ::smatch 0.8666666666666666 ::n_actions 40
# ::node	0	result-01	3-4
# ::node	0.0	represent-01	2-3
# ::node	0.0.0	space	1-2
# ::node	0.0.0.0	vector	0-1
# ::node	0.1	lose-02	
# ::node	0.1.0	order	9-10
# ::node	0.1.0.0	term	12-13
# ::node	0.1.0.0.0	document	16-17
# ::root	0	result-01
# ::edge	lose-02	ARG1	order	0.1	0.1.0
# ::edge	order	location-of	term	0.1.0	0.1.0.0
# ::edge	represent-01	ARG1	space	0.0	0.0.0
# ::edge	result-01	ARG1	represent-01	0	0.0
# ::edge	result-01	ARG2	lose-02	0	0.1
# ::edge	space	mod	vector	0.0.0	0.0.0.0
# ::edge	term	location	document	0.1.0.0	0.1.0.0.0
(MRPNode-0 / result-01 :ARG1 (MRPNode-1 / represent-01 :ARG1 (MRPNode-2 / space :mod (MRPNode-3 / vector))) :ARG2 (MRPNode-4 / lose-02 :ARG1 (MRPNode-5 / order :location-of (MRPNode-6 / term :location (MRPNode-7 / document)))))

# ::id 395
# ::snt "Thus, the ""program"" is the optimal plan for action that is produced."
# ::tok " Thus , the " " program " " is the optimal plan for action that is produced . "
# ::alignments 6-7|0.0.1 11-12|0.0.2 12-13|0.0 13-14|0 14-15|0.0.0 17-18|0.0.3 ::annotator aligner3.py ::date 2021-03-11 23:00:45.190236 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 41
# ::node	0	cause-01	13-14
# ::node	0.0	plan-01	12-13
# ::node	0.0.0	act-02	14-15
# ::node	0.0.1	program	6-7
# ::node	0.0.2	optimal	11-12
# ::node	0.0.3	produce-01	17-18
# ::root	0	cause-01
# ::edge	cause-01	ARG1	plan-01	0	0.0
# ::edge	plan-01	ARG1	act-02	0.0	0.0.0
# ::edge	plan-01	ARG1-of	produce-01	0.0	0.0.3
# ::edge	plan-01	mod	optimal	0.0	0.0.2
# ::edge	plan-01	mod	program	0.0	0.0.1
# ::edge	produce-01	ARG1	act-02	0.0.3	0.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / plan-01 :ARG1 (MRPNode-2 / act-02) :mod (MRPNode-3 / program) :mod (MRPNode-4 / optimal) :ARG1-of (MRPNode-5 / produce-01 :ARG1 MRPNode-2)))

# ::id 396
# ::snt "It doesn't take into account any information about B, so it is ""prior""."
# ::tok " It does n't take into account any information about B , so it is " " prior " " . "
# ::alignments 1-2|0.0.0 3-4|0.1.0 4-5|0.1 7-8|0.1.1.0 8-9|0.1.1 10-11|0.1.1.1+0.1.1.1.0+0.1.1.1.0.0 12-13|0 17-18|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.206481 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	cause-01	12-13
# ::node	0.0	prior	17-18
# ::node	0.0.0	it	1-2
# ::node	0.1	take-into-account-04	4-5
# ::node	0.1.0	-	3-4
# ::node	0.1.1	information	8-9
# ::node	0.1.1.0	any	7-8
# ::node	0.1.1.1	person	10-11
# ::node	0.1.1.1.0	name	10-11
# ::node	0.1.1.1.0.0	b	10-11
# ::root	0	cause-01
# ::edge	cause-01	ARG0	take-into-account-04	0	0.1
# ::edge	cause-01	ARG1	prior	0	0.0
# ::edge	information	topic	any	0.1.1	0.1.1.0
# ::edge	information	topic	person	0.1.1	0.1.1.1
# ::edge	name	op1	b	0.1.1.1.0	0.1.1.1.0.0
# ::edge	person	name	name	0.1.1.1	0.1.1.1.0
# ::edge	prior	domain	it	0.0	0.0.0
# ::edge	take-into-account-04	ARG1	information	0.1	0.1.1
# ::edge	take-into-account-04	polarity	-	0.1	0.1.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / prior :domain (MRPNode-2 / it)) :ARG0 (MRPNode-3 / take-into-account-04 :polarity - :ARG1 (MRPNode-4 / information :topic (MRPNode-5 / any) :topic (MRPNode-6 / person :name (MRPNode-7 / name :op1 b)))))

# ::id 397
# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tok This means that inheritance is used when types have common factors and these would be put into the superclass .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1.0 5-6|0.1 7-8|0.1.1.0.1 8-9|0.1.1.0 9-10|0.1.1.0.0.0 10-11|0.1.1.0.0 11-12|0.1.1 15-16|0.1.1.1 18-19|0.1.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.274733 ::parser eager_oracle ::smatch 1.0 ::n_actions 57
# ::node	0	mean-01	1-2
# ::node	0.0	this	0-1
# ::node	0.1	use-01	5-6
# ::node	0.1.0	inherit-01	3-4
# ::node	0.1.1	and	11-12
# ::node	0.1.1.0	have-03	8-9
# ::node	0.1.1.0.0	factor	10-11
# ::node	0.1.1.0.0.0	common	9-10
# ::node	0.1.1.0.1	type	7-8
# ::node	0.1.1.1	put-01	15-16
# ::node	0.1.1.1.0	superclass	18-19
# ::root	0	mean-01
# ::edge	and	op1	have-03	0.1.1	0.1.1.0
# ::edge	and	op2	put-01	0.1.1	0.1.1.1
# ::edge	factor	mod	common	0.1.1.0.0	0.1.1.0.0.0
# ::edge	have-03	ARG0	type	0.1.1.0	0.1.1.0.1
# ::edge	have-03	ARG1	factor	0.1.1.0	0.1.1.0.0
# ::edge	mean-01	ARG1	this	0	0.0
# ::edge	mean-01	ARG2	use-01	0	0.1
# ::edge	put-01	ARG1	type	0.1.1.1	0.1.1.0.1
# ::edge	put-01	ARG2	superclass	0.1.1.1	0.1.1.1.0
# ::edge	use-01	ARG1	inherit-01	0.1	0.1.0
# ::edge	use-01	time	and	0.1	0.1.1
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / this) :ARG2 (MRPNode-2 / use-01 :ARG1 (MRPNode-3 / inherit-01) :time (MRPNode-4 / and :op1 (MRPNode-5 / have-03 :ARG1 (MRPNode-6 / factor :mod (MRPNode-7 / common)) :ARG0 (MRPNode-8 / type)) :op2 (MRPNode-9 / put-01 :ARG1 MRPNode-8 :ARG2 (MRPNode-10 / superclass)))))

# ::id 398
# ::snt Thus, the program is the best plan for action that is produced.
# ::tok Thus , the program is the best plan for action that is produced .
# ::alignments 3-4|0.0.1 6-7|0.0.2.0+0.0.2.1 7-8|0.0 8-9|0 9-10|0.0.0 12-13|0.0.3 ::annotator aligner3.py ::date 2021-03-11 23:00:45.281230 ::parser eager_oracle ::smatch 0.7333333333333334 ::n_actions 37
# ::node	0	cause-01	8-9
# ::node	0.0	plan-01	7-8
# ::node	0.0.0	act-02	9-10
# ::node	0.0.1	program	3-4
# ::node	0.0.2	have-degree-91	
# ::node	0.0.2.0	most	6-7
# ::node	0.0.2.1	good-02	6-7
# ::node	0.0.3	produce-01	12-13
# ::root	0	cause-01
# ::edge	cause-01	ARG1	plan-01	0	0.0
# ::edge	have-degree-91	ARG2	good-02	0.0.2	0.0.2.1
# ::edge	have-degree-91	ARG3	most	0.0.2	0.0.2.0
# ::edge	plan-01	ARG1	act-02	0.0	0.0.0
# ::edge	plan-01	ARG1-of	good-02	0.0	0.0.2.1
# ::edge	plan-01	ARG1-of	have-degree-91	0.0	0.0.2
# ::edge	plan-01	ARG1-of	produce-01	0.0	0.0.3
# ::edge	plan-01	ARG1-of	program	0.0	0.0.1
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / plan-01 :ARG1 (MRPNode-2 / act-02) :ARG1-of (MRPNode-3 / program) :ARG1-of (MRPNode-4 / have-degree-91 :ARG3 (MRPNode-5 / most) :ARG2 (MRPNode-6 / good-02)) :ARG1-of MRPNode-6 :ARG1-of (MRPNode-7 / produce-01)))

# ::id 399
# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tok This means that inheritance is used when types have common factors and these would be put into the superclass .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1.0 5-6|0.1 7-8|0.1.1.0.1 8-9|0.1.1.0 9-10|0.1.1.0.0.0 10-11|0.1.1.0.0 11-12|0.1.1 15-16|0.1.1.1 18-19|0.1.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.350562 ::parser eager_oracle ::smatch 1.0 ::n_actions 57
# ::node	0	mean-01	1-2
# ::node	0.0	this	0-1
# ::node	0.1	use-01	5-6
# ::node	0.1.0	inherit-01	3-4
# ::node	0.1.1	and	11-12
# ::node	0.1.1.0	have-03	8-9
# ::node	0.1.1.0.0	factor	10-11
# ::node	0.1.1.0.0.0	common	9-10
# ::node	0.1.1.0.1	type	7-8
# ::node	0.1.1.1	put-01	15-16
# ::node	0.1.1.1.0	superclass	18-19
# ::root	0	mean-01
# ::edge	and	op1	have-03	0.1.1	0.1.1.0
# ::edge	and	op2	put-01	0.1.1	0.1.1.1
# ::edge	factor	mod	common	0.1.1.0.0	0.1.1.0.0.0
# ::edge	have-03	ARG0	type	0.1.1.0	0.1.1.0.1
# ::edge	have-03	ARG1	factor	0.1.1.0	0.1.1.0.0
# ::edge	mean-01	ARG1	this	0	0.0
# ::edge	mean-01	ARG2	use-01	0	0.1
# ::edge	put-01	ARG1	type	0.1.1.1	0.1.1.0.1
# ::edge	put-01	ARG2	superclass	0.1.1.1	0.1.1.1.0
# ::edge	use-01	ARG1	inherit-01	0.1	0.1.0
# ::edge	use-01	time	and	0.1	0.1.1
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / this) :ARG2 (MRPNode-2 / use-01 :ARG1 (MRPNode-3 / inherit-01) :time (MRPNode-4 / and :op1 (MRPNode-5 / have-03 :ARG1 (MRPNode-6 / factor :mod (MRPNode-7 / common)) :ARG0 (MRPNode-8 / type)) :op2 (MRPNode-9 / put-01 :ARG1 MRPNode-8 :ARG2 (MRPNode-10 / superclass)))))

# ::id 400
# ::snt Occasionally it is advantageous to differentiate between these uses, as it is not necessarily noticeable from context.
# ::tok Occasionally it is advantageous to differentiate between these uses , as it is not necessarily noticeable from context .
# ::alignments 0-1|0.2 3-4|0+0.1 5-6|0.0 7-8|0.0.0.0 8-9|0.0.0 10-11|0.1.0.1.0 13-14|0.1.0.0 15-16|0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:45.361861 ::parser eager_oracle ::smatch 0.8571428571428572 ::n_actions 47
# ::node	0	advantage-01	3-4
# ::node	0.0	differentiate-01	5-6
# ::node	0.0.0	use-01	8-9
# ::node	0.0.0.0	this	7-8
# ::node	0.1	cause-01	3-4
# ::node	0.1.0	possible-01	
# ::node	0.1.0.0	-	13-14
# ::node	0.1.0.1	notice-01	15-16
# ::node	0.1.0.1.0	context	10-11
# ::node	0.2	occasional	0-1
# ::root	0	advantage-01
# ::edge	advantage-01	ARG1	differentiate-01	0	0.0
# ::edge	advantage-01	ARG1-of	cause-01	0	0.1
# ::edge	advantage-01	frequency	occasional	0	0.2
# ::edge	cause-01	ARG0	possible-01	0.1	0.1.0
# ::edge	differentiate-01	ARG1	use-01	0.0	0.0.0
# ::edge	notice-01	source	context	0.1.0.1	0.1.0.1.0
# ::edge	possible-01	ARG1	notice-01	0.1.0	0.1.0.1
# ::edge	possible-01	polarity	-	0.1.0	0.1.0.0
# ::edge	use-01	mod	this	0.0.0	0.0.0.0
(MRPNode-0 / advantage-01 :ARG1 (MRPNode-1 / differentiate-01 :ARG1 (MRPNode-2 / use-01 :mod (MRPNode-3 / this))) :ARG1-of (MRPNode-4 / cause-01 :ARG0 (MRPNode-5 / possible-01 :polarity - :ARG1 (MRPNode-6 / notice-01 :source (MRPNode-7 / context)))) :frequency (MRPNode-8 / occasional))

# ::id 401
# ::snt Occasionally it is advantageous to differentiate between these uses, as it is not necessarily noticeable from context.
# ::tok Occasionally it is advantageous to differentiate between these uses , as it is not necessarily noticeable from context .
# ::alignments 0-1|0.2 3-4|0+0.1 5-6|0.0 7-8|0.0.0.0 8-9|0.0.0 10-11|0.1.0.1.0 13-14|0.1.0.0 15-16|0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:45.373142 ::parser eager_oracle ::smatch 0.8571428571428572 ::n_actions 47
# ::node	0	advantage-01	3-4
# ::node	0.0	differentiate-01	5-6
# ::node	0.0.0	use-01	8-9
# ::node	0.0.0.0	this	7-8
# ::node	0.1	cause-01	3-4
# ::node	0.1.0	possible-01	
# ::node	0.1.0.0	-	13-14
# ::node	0.1.0.1	notice-01	15-16
# ::node	0.1.0.1.0	context	10-11
# ::node	0.2	occasional	0-1
# ::root	0	advantage-01
# ::edge	advantage-01	ARG1	differentiate-01	0	0.0
# ::edge	advantage-01	ARG1-of	cause-01	0	0.1
# ::edge	advantage-01	frequency	occasional	0	0.2
# ::edge	cause-01	ARG0	possible-01	0.1	0.1.0
# ::edge	differentiate-01	ARG1	use-01	0.0	0.0.0
# ::edge	notice-01	source	context	0.1.0.1	0.1.0.1.0
# ::edge	possible-01	ARG1	notice-01	0.1.0	0.1.0.1
# ::edge	possible-01	polarity	-	0.1.0	0.1.0.0
# ::edge	use-01	mod	this	0.0.0	0.0.0.0
(MRPNode-0 / advantage-01 :ARG1 (MRPNode-1 / differentiate-01 :ARG1 (MRPNode-2 / use-01 :mod (MRPNode-3 / this))) :ARG1-of (MRPNode-4 / cause-01 :ARG0 (MRPNode-5 / possible-01 :polarity - :ARG1 (MRPNode-6 / notice-01 :source (MRPNode-7 / context)))) :frequency (MRPNode-8 / occasional))

# ::id 402
# ::snt Mathematicians use the word to describe a set of rules which anyone can follow to solve a problem.
# ::tok Mathematicians use the word to describe a set of rules which anyone can follow to solve a problem .
# ::alignments 0-1|0.1 1-2|0 3-4|0.0 5-6|0.2 7-8|0.2.0 9-10|0.2.0.0 11-12|0.2.0.1.0 12-13|0.2.0.1.1 13-14|0.2.0.1 15-16|0.2.0.1.2 17-18|0.2.0.1.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.389489 ::parser eager_oracle ::smatch 1.0 ::n_actions 58
# ::node	0	use-01	1-2
# ::node	0.0	word	3-4
# ::node	0.1	mathematician	0-1
# ::node	0.2	describe-01	5-6
# ::node	0.2.0	set	7-8
# ::node	0.2.0.0	rule	9-10
# ::node	0.2.0.1	follow-02	13-14
# ::node	0.2.0.1.0	anyone	11-12
# ::node	0.2.0.1.1	possible-01	12-13
# ::node	0.2.0.1.2	solve-01	15-16
# ::node	0.2.0.1.2.0	problem	17-18
# ::root	0	use-01
# ::edge	describe-01	ARG0	mathematician	0.2	0.1
# ::edge	describe-01	ARG1	set	0.2	0.2.0
# ::edge	follow-02	ARG0	anyone	0.2.0.1	0.2.0.1.0
# ::edge	follow-02	ARG1-of	possible-01	0.2.0.1	0.2.0.1.1
# ::edge	follow-02	purpose	solve-01	0.2.0.1	0.2.0.1.2
# ::edge	set	ARG1-of	follow-02	0.2.0	0.2.0.1
# ::edge	set	consist-of	rule	0.2.0	0.2.0.0
# ::edge	solve-01	ARG0	anyone	0.2.0.1.2	0.2.0.1.0
# ::edge	solve-01	ARG1	problem	0.2.0.1.2	0.2.0.1.2.0
# ::edge	use-01	ARG0	mathematician	0	0.1
# ::edge	use-01	ARG1	word	0	0.0
# ::edge	use-01	ARG2	describe-01	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / word) :ARG0 (MRPNode-2 / mathematician) :ARG2 (MRPNode-3 / describe-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-4 / set :consist-of (MRPNode-5 / rule) :ARG1-of (MRPNode-6 / follow-02 :ARG0 (MRPNode-7 / anyone) :ARG1-of (MRPNode-8 / possible-01) :purpose (MRPNode-9 / solve-01 :ARG0 MRPNode-7 :ARG1 (MRPNode-10 / problem))))))

# ::id 403
# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tok This means that inheritance is used when types have common factors and these would be put into the superclass .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1.0 5-6|0.1 7-8|0.1.1.0.1 8-9|0.1.1.0 9-10|0.1.1.0.0.0 10-11|0.1.1.0.0 11-12|0.1.1 15-16|0.1.1.1 18-19|0.1.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.456955 ::parser eager_oracle ::smatch 1.0 ::n_actions 57
# ::node	0	mean-01	1-2
# ::node	0.0	this	0-1
# ::node	0.1	use-01	5-6
# ::node	0.1.0	inherit-01	3-4
# ::node	0.1.1	and	11-12
# ::node	0.1.1.0	have-03	8-9
# ::node	0.1.1.0.0	factor	10-11
# ::node	0.1.1.0.0.0	common	9-10
# ::node	0.1.1.0.1	type	7-8
# ::node	0.1.1.1	put-01	15-16
# ::node	0.1.1.1.0	superclass	18-19
# ::root	0	mean-01
# ::edge	and	op1	have-03	0.1.1	0.1.1.0
# ::edge	and	op2	put-01	0.1.1	0.1.1.1
# ::edge	factor	mod	common	0.1.1.0.0	0.1.1.0.0.0
# ::edge	have-03	ARG0	type	0.1.1.0	0.1.1.0.1
# ::edge	have-03	ARG1	factor	0.1.1.0	0.1.1.0.0
# ::edge	mean-01	ARG1	this	0	0.0
# ::edge	mean-01	ARG2	use-01	0	0.1
# ::edge	put-01	ARG1	type	0.1.1.1	0.1.1.0.1
# ::edge	put-01	ARG2	superclass	0.1.1.1	0.1.1.1.0
# ::edge	use-01	ARG1	inherit-01	0.1	0.1.0
# ::edge	use-01	time	and	0.1	0.1.1
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / this) :ARG2 (MRPNode-2 / use-01 :ARG1 (MRPNode-3 / inherit-01) :time (MRPNode-4 / and :op1 (MRPNode-5 / have-03 :ARG1 (MRPNode-6 / factor :mod (MRPNode-7 / common)) :ARG0 (MRPNode-8 / type)) :op2 (MRPNode-9 / put-01 :ARG1 MRPNode-8 :ARG2 (MRPNode-10 / superclass)))))

# ::id 404
# ::snt Most of these languages provide an “extend” keyword, which is used to subclass another.
# ::tok Most of these languages provide an " extend " keyword , which is used to subclass another .
# ::alignments 0-1|0.1.1 1-2|0.1.0 2-3|0.1.0.0.0 3-4|0.1+0.1.0.0 4-5|0 7-8|0.0.0 9-10|0.0 13-14|0.0.1 15-16|0.0.1.1 16-17|0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.469801 ::parser eager_oracle ::smatch 1.0 ::n_actions 59
# ::node	0	provide-01	4-5
# ::node	0.0	keyword	9-10
# ::node	0.0.0	extend-01	7-8
# ::node	0.0.1	use-01	13-14
# ::node	0.0.1.0	another	16-17
# ::node	0.0.1.1	subclass	15-16
# ::node	0.1	language	3-4
# ::node	0.1.0	include-91	1-2
# ::node	0.1.0.0	language	3-4
# ::node	0.1.0.0.0	this	2-3
# ::node	0.1.1	most	0-1
# ::root	0	provide-01
# ::edge	include-91	ARG2	language	0.1.0	0.1.0.0
# ::edge	keyword	ARG1-of	extend-01	0.0	0.0.0
# ::edge	keyword	ARG1-of	subclass	0.0	0.0.1.1
# ::edge	keyword	ARG1-of	use-01	0.0	0.0.1
# ::edge	language	ARG1-of	include-91	0.1	0.1.0
# ::edge	language	mod	this	0.1.0.0	0.1.0.0.0
# ::edge	language	quant	most	0.1	0.1.1
# ::edge	provide-01	ARG0	language	0	0.1
# ::edge	provide-01	ARG1	keyword	0	0.0
# ::edge	use-01	ARG2	another	0.0.1	0.0.1.0
# ::edge	use-01	ARG2	subclass	0.0.1	0.0.1.1
(MRPNode-0 / provide-01 :ARG1 (MRPNode-1 / keyword :ARG1-of (MRPNode-2 / extend-01) :ARG1-of (MRPNode-3 / use-01 :ARG2 (MRPNode-4 / another) :ARG2 (MRPNode-5 / subclass)) :ARG1-of MRPNode-5) :ARG0 (MRPNode-6 / language :ARG1-of (MRPNode-7 / include-91 :ARG2 (MRPNode-8 / language :mod (MRPNode-9 / this))) :quant (MRPNode-10 / most)))

# ::id 405
# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tok This means that inheritance is used when types have common factors and these would be put into the superclass .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1.0 5-6|0.1 7-8|0.1.1.0.1 8-9|0.1.1.0 9-10|0.1.1.0.0.0 10-11|0.1.1.0.0 11-12|0.1.1 15-16|0.1.1.1 18-19|0.1.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.538406 ::parser eager_oracle ::smatch 1.0 ::n_actions 57
# ::node	0	mean-01	1-2
# ::node	0.0	this	0-1
# ::node	0.1	use-01	5-6
# ::node	0.1.0	inherit-01	3-4
# ::node	0.1.1	and	11-12
# ::node	0.1.1.0	have-03	8-9
# ::node	0.1.1.0.0	factor	10-11
# ::node	0.1.1.0.0.0	common	9-10
# ::node	0.1.1.0.1	type	7-8
# ::node	0.1.1.1	put-01	15-16
# ::node	0.1.1.1.0	superclass	18-19
# ::root	0	mean-01
# ::edge	and	op1	have-03	0.1.1	0.1.1.0
# ::edge	and	op2	put-01	0.1.1	0.1.1.1
# ::edge	factor	mod	common	0.1.1.0.0	0.1.1.0.0.0
# ::edge	have-03	ARG0	type	0.1.1.0	0.1.1.0.1
# ::edge	have-03	ARG1	factor	0.1.1.0	0.1.1.0.0
# ::edge	mean-01	ARG1	this	0	0.0
# ::edge	mean-01	ARG2	use-01	0	0.1
# ::edge	put-01	ARG1	type	0.1.1.1	0.1.1.0.1
# ::edge	put-01	ARG2	superclass	0.1.1.1	0.1.1.1.0
# ::edge	use-01	ARG1	inherit-01	0.1	0.1.0
# ::edge	use-01	time	and	0.1	0.1.1
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / this) :ARG2 (MRPNode-2 / use-01 :ARG1 (MRPNode-3 / inherit-01) :time (MRPNode-4 / and :op1 (MRPNode-5 / have-03 :ARG1 (MRPNode-6 / factor :mod (MRPNode-7 / common)) :ARG0 (MRPNode-8 / type)) :op2 (MRPNode-9 / put-01 :ARG1 MRPNode-8 :ARG2 (MRPNode-10 / superclass)))))

# ::id 406
# ::snt This can be useful when the number of times a word appears is not considered important.
# ::tok This can be useful when the number of times a word appears is not considered important .
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 6-7|0.1.1.0 10-11|0.1.1.0.0.0 11-12|0.1.1.0.0 13-14|0.1.0 14-15|0.1 15-16|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:45.550205 ::parser eager_oracle ::smatch 1.0 ::n_actions 48
# ::node	0	possible-01	1-2
# ::node	0.0	useful-05	3-4
# ::node	0.0.0	this	0-1
# ::node	0.1	consider-01	14-15
# ::node	0.1.0	-	13-14
# ::node	0.1.1	important-01	15-16
# ::node	0.1.1.0	number	6-7
# ::node	0.1.1.0.0	appear-01	11-12
# ::node	0.1.1.0.0.0	word	10-11
# ::root	0	possible-01
# ::edge	appear-01	ARG1	word	0.1.1.0.0	0.1.1.0.0.0
# ::edge	consider-01	ARG1	important-01	0.1	0.1.1
# ::edge	consider-01	polarity	-	0.1	0.1.0
# ::edge	important-01	ARG1	number	0.1.1	0.1.1.0
# ::edge	number	quant-of	appear-01	0.1.1.0	0.1.1.0.0
# ::edge	possible-01	ARG1	useful-05	0	0.0
# ::edge	possible-01	condition	consider-01	0	0.1
# ::edge	useful-05	ARG1	this	0.0	0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / useful-05 :ARG1 (MRPNode-2 / this)) :condition (MRPNode-3 / consider-01 :polarity - :ARG1 (MRPNode-4 / important-01 :ARG1 (MRPNode-5 / number :quant-of (MRPNode-6 / appear-01 :ARG1 (MRPNode-7 / word))))))

# ::id 407
# ::snt There is also Conditional Probability which is usually interested in the way variables relate to each other.
# ::tok There is also Conditional Probability which is usually interested in the way variables relate to each other .
# ::alignments 2-3|0.1 3-5|0.0+0.0.0+0.0.0.0+0.0.0.1 7-8|0.2 8-9|0 11-12|0.3 12-13|0.3.0.0 13-14|0.3.0 15-16|0.3.0.1.0 16-17|0.3.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:45.564554 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	interest-01	8-9
# ::node	0.0	thing	3-5
# ::node	0.0.0	name	3-5
# ::node	0.0.0.0	conditional	3-5
# ::node	0.0.0.1	probability	3-5
# ::node	0.1	also	2-3
# ::node	0.2	usual	7-8
# ::node	0.3	way	11-12
# ::node	0.3.0	relate-01	13-14
# ::node	0.3.0.0	variable	12-13
# ::node	0.3.0.1	other	16-17
# ::node	0.3.0.1.0	each	15-16
# ::root	0	interest-01
# ::edge	interest-01	ARG2	way	0	0.3
# ::edge	interest-01	mod	also	0	0.1
# ::edge	interest-01	mod	thing	0	0.0
# ::edge	interest-01	mod	usual	0	0.2
# ::edge	name	op1	conditional	0.0.0	0.0.0.0
# ::edge	name	op2	probability	0.0.0	0.0.0.1
# ::edge	other	mod	each	0.3.0.1	0.3.0.1.0
# ::edge	relate-01	ARG1	variable	0.3.0	0.3.0.0
# ::edge	relate-01	ARG2	other	0.3.0	0.3.0.1
# ::edge	thing	name	name	0.0	0.0.0
# ::edge	way	manner-of	relate-01	0.3	0.3.0
(MRPNode-0 / interest-01 :mod (MRPNode-1 / thing :name (MRPNode-2 / name :op1 conditional :op2 probability)) :mod (MRPNode-3 / also) :mod (MRPNode-4 / usual) :ARG2 (MRPNode-5 / way :manner-of (MRPNode-6 / relate-01 :ARG1 (MRPNode-7 / variable) :ARG2 (MRPNode-8 / other :mod (MRPNode-9 / each)))))

# ::id 408
# ::snt To achieve this, the programmer has to note generalisations and similarities about various aspects of the program.
# ::tok To achieve this , the programmer has to note generalisations and similarities about various aspects of the program .
# ::alignments 1-2|0.2 2-3|0.2.0 5-6|0.0+0.0.0 8-9|0.1 9-10|0.1.0.0 10-11|0.1.0 13-14|0.1.0.1.0.0 14-15|0.1.0.1.0 17-18|0.1.0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:45.592902 ::parser eager_oracle ::smatch 0.7755102040816326 ::n_actions 52
# ::node	0	obligate-01	
# ::node	0.0	person	5-6
# ::node	0.0.0	program-01	5-6
# ::node	0.1	note-01	8-9
# ::node	0.1.0	and	10-11
# ::node	0.1.0.0	generalize-01	9-10
# ::node	0.1.0.1	resemble-01	
# ::node	0.1.0.1.0	aspect	14-15
# ::node	0.1.0.1.0.0	various	13-14
# ::node	0.1.0.1.0.1	program	17-18
# ::node	0.2	achieve-01	1-2
# ::node	0.2.0	this	2-3
# ::root	0	obligate-01
# ::edge	achieve-01	ARG0	person	0.2	0.0
# ::edge	achieve-01	ARG1	this	0.2	0.2.0
# ::edge	and	op1	generalize-01	0.1.0	0.1.0.0
# ::edge	and	op2	resemble-01	0.1.0	0.1.0.1
# ::edge	and	topic	aspect	0.1.0	0.1.0.1.0
# ::edge	aspect	mod	various	0.1.0.1.0	0.1.0.1.0.0
# ::edge	aspect	part-of	program	0.1.0.1.0	0.1.0.1.0.1
# ::edge	note-01	ARG0	person	0.1	0.0
# ::edge	note-01	ARG1	and	0.1	0.1.0
# ::edge	obligate-01	ARG1	person	0	0.0
# ::edge	obligate-01	ARG2	note-01	0	0.1
# ::edge	obligate-01	purpose	achieve-01	0	0.2
# ::edge	person	ARG0-of	program-01	0.0	0.0.0
# ::edge	resemble-01	ARG1	aspect	0.1.0.1	0.1.0.1.0
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / program-01)) :ARG2 (MRPNode-3 / note-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-4 / and :op1 (MRPNode-5 / generalize-01) :op2 (MRPNode-6 / resemble-01 :ARG1 (MRPNode-7 / aspect :mod (MRPNode-8 / various) :part-of (MRPNode-9 / program))) :topic MRPNode-7)) :purpose (MRPNode-10 / achieve-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-11 / this)))

# ::id 409
# ::snt The method can be abused when people deliberately link to sites in order to raise a site's PageRank.
# ::tok The method can be abused when people deliberately link to sites in order to raise a site 's PageRank .
# ::alignments 1-2|0.0.1 2-3|0 4-5|0.0 6-7|0.0.0.2.1 7-8|0.0.0.1 8-9|0.0.0 10-11|0.0.0.2.0.1 14-15|0.0.0.2 16-17|0.0.0.0 18-19|0.0.0.2.0+0.0.0.2.0.0+0.0.0.2.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.619184 ::parser eager_oracle ::smatch 1.0 ::n_actions 59
# ::node	0	possible-01	2-3
# ::node	0.0	abuse-02	4-5
# ::node	0.0.0	link-01	8-9
# ::node	0.0.0.0	site	16-17
# ::node	0.0.0.1	deliberate-01	7-8
# ::node	0.0.0.2	raise-01	14-15
# ::node	0.0.0.2.0	publication	18-19
# ::node	0.0.0.2.0.0	name	18-19
# ::node	0.0.0.2.0.0.0	pagerank	18-19
# ::node	0.0.0.2.0.1	site	10-11
# ::node	0.0.0.2.1	person	6-7
# ::node	0.0.1	method	1-2
# ::root	0	possible-01
# ::edge	abuse-02	ARG1	link-01	0.0	0.0.0
# ::edge	abuse-02	ARG1	method	0.0	0.0.1
# ::edge	link-01	ARG0	deliberate-01	0.0.0	0.0.0.1
# ::edge	link-01	ARG0	person	0.0.0	0.0.0.2.1
# ::edge	link-01	ARG1	site	0.0.0	0.0.0.0
# ::edge	link-01	purpose	raise-01	0.0.0	0.0.0.2
# ::edge	name	op1	pagerank	0.0.0.2.0.0	0.0.0.2.0.0.0
# ::edge	possible-01	ARG1	abuse-02	0	0.0
# ::edge	publication	name	name	0.0.0.2.0	0.0.0.2.0.0
# ::edge	publication	poss	site	0.0.0.2.0	0.0.0.2.0.1
# ::edge	raise-01	ARG0	person	0.0.0.2	0.0.0.2.1
# ::edge	raise-01	ARG1	publication	0.0.0.2	0.0.0.2.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / abuse-02 :ARG1 (MRPNode-2 / link-01 :ARG1 (MRPNode-3 / site) :ARG0 (MRPNode-4 / deliberate-01) :purpose (MRPNode-5 / raise-01 :ARG1 (MRPNode-6 / publication :name (MRPNode-7 / name :op1 pagerank) :poss (MRPNode-8 / site)) :ARG0 (MRPNode-9 / person)) :ARG0 MRPNode-9) :ARG1 (MRPNode-10 / method)))

# ::id 410
# ::snt Google’s payoff is that it gets to track the behaviour of actual users.
# ::tok Google 's payoff is that it gets to track the behaviour of actual users .
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 6-7|0.1 8-9|0.0.1 10-11|0.0.1.0 12-13|0.0.1.0.0+0.0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.629969 ::parser eager_oracle ::smatch 0.7894736842105262 ::n_actions 37
# ::node	0	price-01	
# ::node	0.0	company	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	google	0-1
# ::node	0.0.1	track-01	8-9
# ::node	0.0.1.0	behave-01	10-11
# ::node	0.0.1.0.0	person	12-13
# ::node	0.0.1.0.0.0	actual-02	12-13
# ::node	0.0.1.0.0.1	use-01	
# ::node	0.1	get-22	6-7
# ::root	0	price-01
# ::edge	behave-01	ARG0	person	0.0.1.0	0.0.1.0.0
# ::edge	company	ARG0-of	track-01	0.0	0.0.1
# ::edge	company	name	name	0.0	0.0.0
# ::edge	get-22	ARG0	company	0.1	0.0
# ::edge	get-22	ARG1	track-01	0.1	0.0.1
# ::edge	name	op1	google	0.0.0	0.0.0.0
# ::edge	person	ARG0-of	use-01	0.0.1.0.0	0.0.1.0.0.1
# ::edge	person	ARG1-of	actual-02	0.0.1.0.0	0.0.1.0.0.0
# ::edge	price-01	ARG1	company	0	0.0
# ::edge	price-01	ARG2	get-22	0	0.1
# ::edge	track-01	ARG1	behave-01	0.0.1	0.0.1.0
(MRPNode-0 / price-01 :ARG1 (MRPNode-1 / company :name (MRPNode-2 / name :op1 google) :ARG0-of (MRPNode-3 / track-01 :ARG1 (MRPNode-4 / behave-01 :ARG0 (MRPNode-5 / person :ARG1-of (MRPNode-6 / actual-02) :ARG0-of (MRPNode-7 / use-01))))) :ARG2 (MRPNode-8 / get-22 :ARG0 MRPNode-1 :ARG1 MRPNode-3))

# ::id 411
# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tok This means that inheritance is used when types have common factors and these would be put into the superclass .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1.0 5-6|0.1 7-8|0.1.1.0.1 8-9|0.1.1.0 9-10|0.1.1.0.0.0 10-11|0.1.1.0.0 11-12|0.1.1 15-16|0.1.1.1 18-19|0.1.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.703321 ::parser eager_oracle ::smatch 1.0 ::n_actions 57
# ::node	0	mean-01	1-2
# ::node	0.0	this	0-1
# ::node	0.1	use-01	5-6
# ::node	0.1.0	inherit-01	3-4
# ::node	0.1.1	and	11-12
# ::node	0.1.1.0	have-03	8-9
# ::node	0.1.1.0.0	factor	10-11
# ::node	0.1.1.0.0.0	common	9-10
# ::node	0.1.1.0.1	type	7-8
# ::node	0.1.1.1	put-01	15-16
# ::node	0.1.1.1.0	superclass	18-19
# ::root	0	mean-01
# ::edge	and	op1	have-03	0.1.1	0.1.1.0
# ::edge	and	op2	put-01	0.1.1	0.1.1.1
# ::edge	factor	mod	common	0.1.1.0.0	0.1.1.0.0.0
# ::edge	have-03	ARG0	type	0.1.1.0	0.1.1.0.1
# ::edge	have-03	ARG1	factor	0.1.1.0	0.1.1.0.0
# ::edge	mean-01	ARG1	this	0	0.0
# ::edge	mean-01	ARG2	use-01	0	0.1
# ::edge	put-01	ARG1	type	0.1.1.1	0.1.1.0.1
# ::edge	put-01	ARG2	superclass	0.1.1.1	0.1.1.1.0
# ::edge	use-01	ARG1	inherit-01	0.1	0.1.0
# ::edge	use-01	time	and	0.1	0.1.1
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / this) :ARG2 (MRPNode-2 / use-01 :ARG1 (MRPNode-3 / inherit-01) :time (MRPNode-4 / and :op1 (MRPNode-5 / have-03 :ARG1 (MRPNode-6 / factor :mod (MRPNode-7 / common)) :ARG0 (MRPNode-8 / type)) :op2 (MRPNode-9 / put-01 :ARG1 MRPNode-8 :ARG2 (MRPNode-10 / superclass)))))

# ::id 412
# ::snt "Thus, the ""program"" is the optimal plan of action that is being produced."
# ::tok " Thus , the " " program " " is the optimal plan of action that is being produced . "
# ::alignments 6-7|0.0.3 11-12|0.0.2 12-13|0.0 14-15|0.0.0 18-19|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:45.710090 ::parser eager_oracle ::smatch 0.8181818181818182 ::n_actions 38
# ::node	0	cause-01	
# ::node	0.0	plan-01	12-13
# ::node	0.0.0	act-02	14-15
# ::node	0.0.1	produce-01	18-19
# ::node	0.0.2	optimal	11-12
# ::node	0.0.3	program	6-7
# ::root	0	cause-01
# ::edge	cause-01	ARG1	plan-01	0	0.0
# ::edge	plan-01	ARG1	act-02	0.0	0.0.0
# ::edge	plan-01	domain	program	0.0	0.0.3
# ::edge	plan-01	mod	optimal	0.0	0.0.2
# ::edge	plan-01	mod	produce-01	0.0	0.0.1
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / plan-01 :ARG1 (MRPNode-2 / act-02) :mod (MRPNode-3 / produce-01) :mod (MRPNode-4 / optimal) :domain (MRPNode-5 / program)))

# ::id 413
# ::snt To achieve this, the programmer has to note generalisations and similarities about various aspects of the program.
# ::tok To achieve this , the programmer has to note generalisations and similarities about various aspects of the program .
# ::alignments 1-2|0.2 2-3|0.2.0 5-6|0.0+0.0.0 8-9|0.1 9-10|0.1.0.0 10-11|0.1.0 13-14|0.1.0.1.0.0 14-15|0.1.0.1.0 17-18|0.1.0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:45.737587 ::parser eager_oracle ::smatch 0.7755102040816326 ::n_actions 52
# ::node	0	obligate-01	
# ::node	0.0	person	5-6
# ::node	0.0.0	program-01	5-6
# ::node	0.1	note-01	8-9
# ::node	0.1.0	and	10-11
# ::node	0.1.0.0	generalize-01	9-10
# ::node	0.1.0.1	resemble-01	
# ::node	0.1.0.1.0	aspect	14-15
# ::node	0.1.0.1.0.0	various	13-14
# ::node	0.1.0.1.0.1	program	17-18
# ::node	0.2	achieve-01	1-2
# ::node	0.2.0	this	2-3
# ::root	0	obligate-01
# ::edge	achieve-01	ARG0	person	0.2	0.0
# ::edge	achieve-01	ARG1	this	0.2	0.2.0
# ::edge	and	op1	generalize-01	0.1.0	0.1.0.0
# ::edge	and	op2	resemble-01	0.1.0	0.1.0.1
# ::edge	and	topic	aspect	0.1.0	0.1.0.1.0
# ::edge	aspect	mod	various	0.1.0.1.0	0.1.0.1.0.0
# ::edge	aspect	part-of	program	0.1.0.1.0	0.1.0.1.0.1
# ::edge	note-01	ARG0	person	0.1	0.0
# ::edge	note-01	ARG1	and	0.1	0.1.0
# ::edge	obligate-01	ARG1	person	0	0.0
# ::edge	obligate-01	ARG2	note-01	0	0.1
# ::edge	obligate-01	purpose	achieve-01	0	0.2
# ::edge	person	ARG0-of	program-01	0.0	0.0.0
# ::edge	resemble-01	ARG1	aspect	0.1.0.1	0.1.0.1.0
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / program-01)) :ARG2 (MRPNode-3 / note-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-4 / and :op1 (MRPNode-5 / generalize-01) :op2 (MRPNode-6 / resemble-01 :ARG1 (MRPNode-7 / aspect :mod (MRPNode-8 / various) :part-of (MRPNode-9 / program))) :topic MRPNode-7)) :purpose (MRPNode-10 / achieve-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-11 / this)))

# ::id 414
# ::snt This can be useful when the number of times a word appears is not considered important.
# ::tok This can be useful when the number of times a word appears is not considered important .
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 6-7|0.1.1.0 10-11|0.1.1.0.0.0 11-12|0.1.1.0.0 13-14|0.1.0 14-15|0.1 15-16|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:45.748611 ::parser eager_oracle ::smatch 1.0 ::n_actions 48
# ::node	0	possible-01	1-2
# ::node	0.0	useful-05	3-4
# ::node	0.0.0	this	0-1
# ::node	0.1	consider-01	14-15
# ::node	0.1.0	-	13-14
# ::node	0.1.1	important-01	15-16
# ::node	0.1.1.0	number	6-7
# ::node	0.1.1.0.0	appear-01	11-12
# ::node	0.1.1.0.0.0	word	10-11
# ::root	0	possible-01
# ::edge	appear-01	ARG1	word	0.1.1.0.0	0.1.1.0.0.0
# ::edge	consider-01	ARG1	important-01	0.1	0.1.1
# ::edge	consider-01	polarity	-	0.1	0.1.0
# ::edge	important-01	ARG1	number	0.1.1	0.1.1.0
# ::edge	number	quant-of	appear-01	0.1.1.0	0.1.1.0.0
# ::edge	possible-01	ARG1	useful-05	0	0.0
# ::edge	possible-01	condition	consider-01	0	0.1
# ::edge	useful-05	ARG1	this	0.0	0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / useful-05 :ARG1 (MRPNode-2 / this)) :condition (MRPNode-3 / consider-01 :polarity - :ARG1 (MRPNode-4 / important-01 :ARG1 (MRPNode-5 / number :quant-of (MRPNode-6 / appear-01 :ARG1 (MRPNode-7 / word))))))

# ::id 415
# ::snt Mathematicians use the word to describe a set of rules which anyone can follow to solve a problem.
# ::tok Mathematicians use the word to describe a set of rules which anyone can follow to solve a problem .
# ::alignments 0-1|0.1 1-2|0 3-4|0.0 5-6|0.2 7-8|0.2.0 9-10|0.2.0.0 11-12|0.2.0.1.0 12-13|0.2.0.1.1 13-14|0.2.0.1 15-16|0.2.0.1.2 17-18|0.2.0.1.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.768252 ::parser eager_oracle ::smatch 1.0 ::n_actions 58
# ::node	0	use-01	1-2
# ::node	0.0	word	3-4
# ::node	0.1	mathematician	0-1
# ::node	0.2	describe-01	5-6
# ::node	0.2.0	set	7-8
# ::node	0.2.0.0	rule	9-10
# ::node	0.2.0.1	follow-02	13-14
# ::node	0.2.0.1.0	anyone	11-12
# ::node	0.2.0.1.1	possible-01	12-13
# ::node	0.2.0.1.2	solve-01	15-16
# ::node	0.2.0.1.2.0	problem	17-18
# ::root	0	use-01
# ::edge	describe-01	ARG0	mathematician	0.2	0.1
# ::edge	describe-01	ARG1	set	0.2	0.2.0
# ::edge	follow-02	ARG0	anyone	0.2.0.1	0.2.0.1.0
# ::edge	follow-02	ARG1-of	possible-01	0.2.0.1	0.2.0.1.1
# ::edge	follow-02	purpose	solve-01	0.2.0.1	0.2.0.1.2
# ::edge	set	ARG1-of	follow-02	0.2.0	0.2.0.1
# ::edge	set	consist-of	rule	0.2.0	0.2.0.0
# ::edge	solve-01	ARG0	anyone	0.2.0.1.2	0.2.0.1.0
# ::edge	solve-01	ARG1	problem	0.2.0.1.2	0.2.0.1.2.0
# ::edge	use-01	ARG0	mathematician	0	0.1
# ::edge	use-01	ARG1	word	0	0.0
# ::edge	use-01	ARG2	describe-01	0	0.2
(MRPNode-0 / use-01 :ARG1 (MRPNode-1 / word) :ARG0 (MRPNode-2 / mathematician) :ARG2 (MRPNode-3 / describe-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-4 / set :consist-of (MRPNode-5 / rule) :ARG1-of (MRPNode-6 / follow-02 :ARG0 (MRPNode-7 / anyone) :ARG1-of (MRPNode-8 / possible-01) :purpose (MRPNode-9 / solve-01 :ARG0 MRPNode-7 :ARG1 (MRPNode-10 / problem))))))

# ::id 416
# ::snt The other method is the top down approach which is a method that combines memorization and recursion.
# ::tok The other method is the top down approach which is a method that combines memorization and recursion .
# ::alignments 1-2|0.0 2-3|0 6-7|0.1.0 7-8|0.1 13-14|0.2 14-15|0.2.1 15-16|0.2.0 16-17|0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.778123 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	method	2-3
# ::node	0.0	other	1-2
# ::node	0.1	approach-02	7-8
# ::node	0.1.0	down	6-7
# ::node	0.2	combine-01	13-14
# ::node	0.2.0	and	15-16
# ::node	0.2.0.0	recursion	16-17
# ::node	0.2.1	memorization	14-15
# ::root	0	method
# ::edge	and	op2	recursion	0.2.0	0.2.0.0
# ::edge	approach-02	mod	down	0.1	0.1.0
# ::edge	combine-01	ARG1	and	0.2	0.2.0
# ::edge	combine-01	ARG1	memorization	0.2	0.2.1
# ::edge	method	ARG0-of	combine-01	0	0.2
# ::edge	method	domain	approach-02	0	0.1
# ::edge	method	mod	other	0	0.0
(MRPNode-0 / method :mod (MRPNode-1 / other) :domain (MRPNode-2 / approach-02 :mod (MRPNode-3 / down)) :ARG0-of (MRPNode-4 / combine-01 :ARG1 (MRPNode-5 / and :op2 (MRPNode-6 / recursion)) :ARG1 (MRPNode-7 / memorization)))

# ::id 417
# ::snt P(A), or the probability that the student is a girl regardless of any other information.
# ::tok P ( A ) , or the probability that the student is a girl regardless of any other information .
# ::alignments 5-6|0 7-8|0.1 10-11|0.1.0.0+0.1.0.0.0 13-14|0.1.0 14-15|0.1.1 16-17|0.1.1.0.1 17-18|0.1.1.0.0 18-19|0.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.789530 ::parser eager_oracle ::smatch 0.9473684210526316 ::n_actions 50
# ::node	0	or	5-6
# ::node	0.0	exemplify-01	
# ::node	0.1	probable	7-8
# ::node	0.1.0	girl	13-14
# ::node	0.1.0.0	person	10-11
# ::node	0.1.0.0.0	study-01	10-11
# ::node	0.1.1	regardless-91	14-15
# ::node	0.1.1.0	information	18-19
# ::node	0.1.1.0.0	other	17-18
# ::node	0.1.1.0.1	any	16-17
# ::root	0	or
# ::edge	girl	domain	person	0.1.0	0.1.0.0
# ::edge	information	mod	any	0.1.1.0	0.1.1.0.1
# ::edge	information	mod	other	0.1.1.0	0.1.1.0.0
# ::edge	or	op1	exemplify-01	0	0.0
# ::edge	or	op2	probable	0	0.1
# ::edge	person	ARG0-of	study-01	0.1.0.0	0.1.0.0.0
# ::edge	probable	ARG1-of	regardless-91	0.1	0.1.1
# ::edge	probable	domain	girl	0.1	0.1.0
# ::edge	regardless-91	ARG2	information	0.1.1	0.1.1.0
(MRPNode-0 / or :op1 (MRPNode-1 / exemplify-01) :op2 (MRPNode-2 / probable :domain (MRPNode-3 / girl :domain (MRPNode-4 / person :ARG0-of (MRPNode-5 / study-01))) :ARG1-of (MRPNode-6 / regardless-91 :ARG2 (MRPNode-7 / information :mod (MRPNode-8 / other) :mod (MRPNode-9 / any)))))

# ::id 418
# ::snt To achieve this, the programmer has to note generalisations and similarities about various aspects of the program.
# ::tok To achieve this , the programmer has to note generalisations and similarities about various aspects of the program .
# ::alignments 1-2|0.2 2-3|0.2.0 5-6|0.0+0.0.0 8-9|0.1 9-10|0.1.0.0 10-11|0.1.0 13-14|0.1.0.1.0.0 14-15|0.1.0.1.0 17-18|0.1.0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:45.814069 ::parser eager_oracle ::smatch 0.7755102040816326 ::n_actions 52
# ::node	0	obligate-01	
# ::node	0.0	person	5-6
# ::node	0.0.0	program-01	5-6
# ::node	0.1	note-01	8-9
# ::node	0.1.0	and	10-11
# ::node	0.1.0.0	generalize-01	9-10
# ::node	0.1.0.1	resemble-01	
# ::node	0.1.0.1.0	aspect	14-15
# ::node	0.1.0.1.0.0	various	13-14
# ::node	0.1.0.1.0.1	program	17-18
# ::node	0.2	achieve-01	1-2
# ::node	0.2.0	this	2-3
# ::root	0	obligate-01
# ::edge	achieve-01	ARG0	person	0.2	0.0
# ::edge	achieve-01	ARG1	this	0.2	0.2.0
# ::edge	and	op1	generalize-01	0.1.0	0.1.0.0
# ::edge	and	op2	resemble-01	0.1.0	0.1.0.1
# ::edge	and	topic	aspect	0.1.0	0.1.0.1.0
# ::edge	aspect	mod	various	0.1.0.1.0	0.1.0.1.0.0
# ::edge	aspect	part-of	program	0.1.0.1.0	0.1.0.1.0.1
# ::edge	note-01	ARG0	person	0.1	0.0
# ::edge	note-01	ARG1	and	0.1	0.1.0
# ::edge	obligate-01	ARG1	person	0	0.0
# ::edge	obligate-01	ARG2	note-01	0	0.1
# ::edge	obligate-01	purpose	achieve-01	0	0.2
# ::edge	person	ARG0-of	program-01	0.0	0.0.0
# ::edge	resemble-01	ARG1	aspect	0.1.0.1	0.1.0.1.0
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / program-01)) :ARG2 (MRPNode-3 / note-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-4 / and :op1 (MRPNode-5 / generalize-01) :op2 (MRPNode-6 / resemble-01 :ARG1 (MRPNode-7 / aspect :mod (MRPNode-8 / various) :part-of (MRPNode-9 / program))) :topic MRPNode-7)) :purpose (MRPNode-10 / achieve-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-11 / this)))

# ::id 419
# ::snt However an object cannot be cast to a class which is no relative of it.
# ::tok However an object cannot be cast to a class which is no relative of it .
# ::alignments 2-3|0.0.1.0 3-4|0.0 5-6|0.0.1 8-9|0.0.1.0.0.1 11-12|0.0.0+0.0.1.0.0.0 12-13|0.0.1.0.0 13-14|0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.821290 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	have-concession-91	13-14
# ::node	0.0	possible-01	3-4
# ::node	0.0.0	-	11-12
# ::node	0.0.1	cast-01	5-6
# ::node	0.0.1.0	object	2-3
# ::node	0.0.1.0.0	related-04	12-13
# ::node	0.0.1.0.0.0	-	11-12
# ::node	0.0.1.0.0.1	class	8-9
# ::root	0	have-concession-91
# ::edge	cast-01	ARG1	object	0.0.1	0.0.1.0
# ::edge	cast-01	ARG2	class	0.0.1	0.0.1.0.0.1
# ::edge	have-concession-91	ARG1	possible-01	0	0.0
# ::edge	object	ARG1-of	related-04	0.0.1.0	0.0.1.0.0
# ::edge	possible-01	ARG1	cast-01	0.0	0.0.1
# ::edge	possible-01	polarity	-	0.0	0.0.0
# ::edge	related-04	ARG2	class	0.0.1.0.0	0.0.1.0.0.1
# ::edge	related-04	polarity	-	0.0.1.0.0	0.0.1.0.0.0
(MRPNode-0 / have-concession-91 :ARG1 (MRPNode-1 / possible-01 :polarity - :ARG1 (MRPNode-2 / cast-01 :ARG1 (MRPNode-3 / object :ARG1-of (MRPNode-4 / related-04 :polarity - :ARG2 (MRPNode-5 / class))) :ARG2 MRPNode-5)))

# ::id 420
# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tok This means that inheritance is used when types have common factors and these would be put into the superclass .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1.0 5-6|0.1 7-8|0.1.1.0.1 8-9|0.1.1.0 9-10|0.1.1.0.0.0 10-11|0.1.1.0.0 11-12|0.1.1 15-16|0.1.1.1 18-19|0.1.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.894186 ::parser eager_oracle ::smatch 1.0 ::n_actions 57
# ::node	0	mean-01	1-2
# ::node	0.0	this	0-1
# ::node	0.1	use-01	5-6
# ::node	0.1.0	inherit-01	3-4
# ::node	0.1.1	and	11-12
# ::node	0.1.1.0	have-03	8-9
# ::node	0.1.1.0.0	factor	10-11
# ::node	0.1.1.0.0.0	common	9-10
# ::node	0.1.1.0.1	type	7-8
# ::node	0.1.1.1	put-01	15-16
# ::node	0.1.1.1.0	superclass	18-19
# ::root	0	mean-01
# ::edge	and	op1	have-03	0.1.1	0.1.1.0
# ::edge	and	op2	put-01	0.1.1	0.1.1.1
# ::edge	factor	mod	common	0.1.1.0.0	0.1.1.0.0.0
# ::edge	have-03	ARG0	type	0.1.1.0	0.1.1.0.1
# ::edge	have-03	ARG1	factor	0.1.1.0	0.1.1.0.0
# ::edge	mean-01	ARG1	this	0	0.0
# ::edge	mean-01	ARG2	use-01	0	0.1
# ::edge	put-01	ARG1	type	0.1.1.1	0.1.1.0.1
# ::edge	put-01	ARG2	superclass	0.1.1.1	0.1.1.1.0
# ::edge	use-01	ARG1	inherit-01	0.1	0.1.0
# ::edge	use-01	time	and	0.1	0.1.1
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / this) :ARG2 (MRPNode-2 / use-01 :ARG1 (MRPNode-3 / inherit-01) :time (MRPNode-4 / and :op1 (MRPNode-5 / have-03 :ARG1 (MRPNode-6 / factor :mod (MRPNode-7 / common)) :ARG0 (MRPNode-8 / type)) :op2 (MRPNode-9 / put-01 :ARG1 MRPNode-8 :ARG2 (MRPNode-10 / superclass)))))

# ::id 421
# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tok This means that inheritance is used when types have common factors and these would be put into the superclass .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1.0 5-6|0.1 7-8|0.1.1.0.1 8-9|0.1.1.0 9-10|0.1.1.0.0.0 10-11|0.1.1.0.0 11-12|0.1.1 15-16|0.1.1.1 18-19|0.1.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.962706 ::parser eager_oracle ::smatch 1.0 ::n_actions 57
# ::node	0	mean-01	1-2
# ::node	0.0	this	0-1
# ::node	0.1	use-01	5-6
# ::node	0.1.0	inherit-01	3-4
# ::node	0.1.1	and	11-12
# ::node	0.1.1.0	have-03	8-9
# ::node	0.1.1.0.0	factor	10-11
# ::node	0.1.1.0.0.0	common	9-10
# ::node	0.1.1.0.1	type	7-8
# ::node	0.1.1.1	put-01	15-16
# ::node	0.1.1.1.0	superclass	18-19
# ::root	0	mean-01
# ::edge	and	op1	have-03	0.1.1	0.1.1.0
# ::edge	and	op2	put-01	0.1.1	0.1.1.1
# ::edge	factor	mod	common	0.1.1.0.0	0.1.1.0.0.0
# ::edge	have-03	ARG0	type	0.1.1.0	0.1.1.0.1
# ::edge	have-03	ARG1	factor	0.1.1.0	0.1.1.0.0
# ::edge	mean-01	ARG1	this	0	0.0
# ::edge	mean-01	ARG2	use-01	0	0.1
# ::edge	put-01	ARG1	type	0.1.1.1	0.1.1.0.1
# ::edge	put-01	ARG2	superclass	0.1.1.1	0.1.1.1.0
# ::edge	use-01	ARG1	inherit-01	0.1	0.1.0
# ::edge	use-01	time	and	0.1	0.1.1
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / this) :ARG2 (MRPNode-2 / use-01 :ARG1 (MRPNode-3 / inherit-01) :time (MRPNode-4 / and :op1 (MRPNode-5 / have-03 :ARG1 (MRPNode-6 / factor :mod (MRPNode-7 / common)) :ARG0 (MRPNode-8 / type)) :op2 (MRPNode-9 / put-01 :ARG1 MRPNode-8 :ARG2 (MRPNode-10 / superclass)))))

# ::id 422
# ::snt The way that a 'term' is defined depends on the application.
# ::tok The way that a ' term ' is defined depends on the application .
# ::alignments 1-2|0.0 5-6|0.0.0.0 8-9|0.0.0 9-10|0 12-13|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:45.967012 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	depend-01	9-10
# ::node	0.0	way	1-2
# ::node	0.0.0	define-01	8-9
# ::node	0.0.0.0	term	5-6
# ::node	0.1	application	12-13
# ::root	0	depend-01
# ::edge	define-01	ARG1	term	0.0.0	0.0.0.0
# ::edge	depend-01	ARG1	application	0	0.1
# ::edge	depend-01	ARG1	way	0	0.0
# ::edge	way	manner-of	define-01	0.0	0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / way :manner-of (MRPNode-2 / define-01 :ARG1 (MRPNode-3 / term))) :ARG1 (MRPNode-4 / application))

# ::id 423
# ::snt "Therefore, the ""program"" is the optimal plan for action that is produced."
# ::tok " Therefore , the " " program " " is the optimal plan for action that is produced . "
# ::alignments 6-7|0.0.1 11-12|0.0.2 12-13|0.0 13-14|0 14-15|0.0.0 17-18|0.0.3 ::annotator aligner3.py ::date 2021-03-11 23:00:45.973969 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 41
# ::node	0	cause-01	13-14
# ::node	0.0	plan-01	12-13
# ::node	0.0.0	act-02	14-15
# ::node	0.0.1	program	6-7
# ::node	0.0.2	optimal	11-12
# ::node	0.0.3	produce-01	17-18
# ::root	0	cause-01
# ::edge	cause-01	ARG1	plan-01	0	0.0
# ::edge	plan-01	ARG1	act-02	0.0	0.0.0
# ::edge	plan-01	ARG1-of	produce-01	0.0	0.0.3
# ::edge	plan-01	mod	optimal	0.0	0.0.2
# ::edge	plan-01	mod	program	0.0	0.0.1
# ::edge	produce-01	ARG1	act-02	0.0.3	0.0.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / plan-01 :ARG1 (MRPNode-2 / act-02) :mod (MRPNode-3 / program) :mod (MRPNode-4 / optimal) :ARG1-of (MRPNode-5 / produce-01 :ARG1 MRPNode-2)))

# ::id 424
# ::snt Without a proof of correctness, such an algorithm is likely to fail.
# ::tok Without a proof of correctness , such an algorithm is likely to fail .
# ::alignments 4-5|0.1.1 6-7|0.0.0.0 8-9|0.0.0 10-11|0 12-13|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.979442 ::parser eager_oracle ::smatch 0.761904761904762 ::n_actions 31
# ::node	0	likely-01	10-11
# ::node	0.0	fail-01	12-13
# ::node	0.0.0	algorithm	8-9
# ::node	0.0.0.0	such	6-7
# ::node	0.1	prove-01	
# ::node	0.1.0	-	
# ::node	0.1.1	correct-02	4-5
# ::root	0	likely-01
# ::edge	algorithm	mod	such	0.0.0	0.0.0.0
# ::edge	fail-01	ARG1	algorithm	0.0	0.0.0
# ::edge	likely-01	ARG1	fail-01	0	0.0
# ::edge	likely-01	condition	prove-01	0	0.1
# ::edge	prove-01	ARG1	correct-02	0.1	0.1.1
# ::edge	prove-01	polarity	-	0.1	0.1.0
(MRPNode-0 / likely-01 :ARG1 (MRPNode-1 / fail-01 :ARG1 (MRPNode-2 / algorithm :mod (MRPNode-3 / such))) :condition (MRPNode-4 / prove-01 :polarity - :ARG1 (MRPNode-5 / correct-02)))

# ::id 425
# ::snt The other method is the top down approach which is a method that combines memorization and recursion.
# ::tok The other method is the top down approach which is a method that combines memorization and recursion .
# ::alignments 1-2|0.0 2-3|0 6-7|0.1.0 7-8|0.1 13-14|0.2 14-15|0.2.1 15-16|0.2.0 16-17|0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:45.988969 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	method	2-3
# ::node	0.0	other	1-2
# ::node	0.1	approach-02	7-8
# ::node	0.1.0	down	6-7
# ::node	0.2	combine-01	13-14
# ::node	0.2.0	and	15-16
# ::node	0.2.0.0	recursion	16-17
# ::node	0.2.1	memorization	14-15
# ::root	0	method
# ::edge	and	op2	recursion	0.2.0	0.2.0.0
# ::edge	approach-02	mod	down	0.1	0.1.0
# ::edge	combine-01	ARG1	and	0.2	0.2.0
# ::edge	combine-01	ARG1	memorization	0.2	0.2.1
# ::edge	method	ARG0-of	combine-01	0	0.2
# ::edge	method	domain	approach-02	0	0.1
# ::edge	method	mod	other	0	0.0
(MRPNode-0 / method :mod (MRPNode-1 / other) :domain (MRPNode-2 / approach-02 :mod (MRPNode-3 / down)) :ARG0-of (MRPNode-4 / combine-01 :ARG1 (MRPNode-5 / and :op2 (MRPNode-6 / recursion)) :ARG1 (MRPNode-7 / memorization)))

# ::id 426
# ::snt Thus, the program is the best plan for action that is produced.
# ::tok Thus , the program is the best plan for action that is produced .
# ::alignments 3-4|0.0.1 6-7|0.0.2.0+0.0.2.1 7-8|0.0 8-9|0 9-10|0.0.0 12-13|0.0.3 ::annotator aligner3.py ::date 2021-03-11 23:00:45.995801 ::parser eager_oracle ::smatch 0.7333333333333334 ::n_actions 37
# ::node	0	cause-01	8-9
# ::node	0.0	plan-01	7-8
# ::node	0.0.0	act-02	9-10
# ::node	0.0.1	program	3-4
# ::node	0.0.2	have-degree-91	
# ::node	0.0.2.0	most	6-7
# ::node	0.0.2.1	good-02	6-7
# ::node	0.0.3	produce-01	12-13
# ::root	0	cause-01
# ::edge	cause-01	ARG1	plan-01	0	0.0
# ::edge	have-degree-91	ARG2	good-02	0.0.2	0.0.2.1
# ::edge	have-degree-91	ARG3	most	0.0.2	0.0.2.0
# ::edge	plan-01	ARG1	act-02	0.0	0.0.0
# ::edge	plan-01	ARG1-of	good-02	0.0	0.0.2.1
# ::edge	plan-01	ARG1-of	have-degree-91	0.0	0.0.2
# ::edge	plan-01	ARG1-of	produce-01	0.0	0.0.3
# ::edge	plan-01	ARG1-of	program	0.0	0.0.1
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / plan-01 :ARG1 (MRPNode-2 / act-02) :ARG1-of (MRPNode-3 / program) :ARG1-of (MRPNode-4 / have-degree-91 :ARG3 (MRPNode-5 / most) :ARG2 (MRPNode-6 / good-02)) :ARG1-of MRPNode-6 :ARG1-of (MRPNode-7 / produce-01)))

# ::id 427
# ::snt This can be useful when the number of times a word appears is not considered important.
# ::tok This can be useful when the number of times a word appears is not considered important .
# ::alignments 0-1|0.0.0 1-2|0 3-4|0.0 6-7|0.1.1.0 10-11|0.1.1.0.0.0 11-12|0.1.1.0.0 13-14|0.1.0 14-15|0.1 15-16|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.006720 ::parser eager_oracle ::smatch 1.0 ::n_actions 48
# ::node	0	possible-01	1-2
# ::node	0.0	useful-05	3-4
# ::node	0.0.0	this	0-1
# ::node	0.1	consider-01	14-15
# ::node	0.1.0	-	13-14
# ::node	0.1.1	important-01	15-16
# ::node	0.1.1.0	number	6-7
# ::node	0.1.1.0.0	appear-01	11-12
# ::node	0.1.1.0.0.0	word	10-11
# ::root	0	possible-01
# ::edge	appear-01	ARG1	word	0.1.1.0.0	0.1.1.0.0.0
# ::edge	consider-01	ARG1	important-01	0.1	0.1.1
# ::edge	consider-01	polarity	-	0.1	0.1.0
# ::edge	important-01	ARG1	number	0.1.1	0.1.1.0
# ::edge	number	quant-of	appear-01	0.1.1.0	0.1.1.0.0
# ::edge	possible-01	ARG1	useful-05	0	0.0
# ::edge	possible-01	condition	consider-01	0	0.1
# ::edge	useful-05	ARG1	this	0.0	0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / useful-05 :ARG1 (MRPNode-2 / this)) :condition (MRPNode-3 / consider-01 :polarity - :ARG1 (MRPNode-4 / important-01 :ARG1 (MRPNode-5 / number :quant-of (MRPNode-6 / appear-01 :ARG1 (MRPNode-7 / word))))))

# ::id 428
# ::snt Then, using this, the best overall path can be found, thereby demonstrating the dynamic programming principle.
# ::tok Then , using this , the best overall path can be found , thereby demonstrating the dynamic programming principle .
# ::alignments 0-1|0.0.0.1 2-3|0.0.0.2 3-4|0.0.0.2.0 6-7|0.0.0.0.1 7-8|0.0.0.0.0 8-9|0.0.0.0 9-10|0.0 11-12|0.0.0 14-15|0.1 16-17|0.1.0.0.0 17-18|0.1.0.0 18-19|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.032493 ::parser eager_oracle ::smatch 0.7999999999999999 ::n_actions 58
# ::node	0	cause-01	
# ::node	0.0	possible-01	9-10
# ::node	0.0.0	find-01	11-12
# ::node	0.0.0.0	path	8-9
# ::node	0.0.0.0.0	overall	7-8
# ::node	0.0.0.0.1	good-02	6-7
# ::node	0.0.0.0.2	have-degree-91	
# ::node	0.0.0.0.2.0	most	
# ::node	0.0.0.1	then	0-1
# ::node	0.0.0.2	use-01	2-3
# ::node	0.0.0.2.0	this	3-4
# ::node	0.1	demonstrate-01	14-15
# ::node	0.1.0	principle	18-19
# ::node	0.1.0.0	program-01	17-18
# ::node	0.1.0.0.0	dynamic	16-17
# ::root	0	cause-01
# ::edge	cause-01	ARG0	demonstrate-01	0	0.1
# ::edge	cause-01	ARG1	possible-01	0	0.0
# ::edge	demonstrate-01	ARG1	principle	0.1	0.1.0
# ::edge	find-01	ARG1	path	0.0.0	0.0.0.0
# ::edge	find-01	manner	use-01	0.0.0	0.0.0.2
# ::edge	find-01	time	then	0.0.0	0.0.0.1
# ::edge	have-degree-91	ARG2	good-02	0.0.0.0.2	0.0.0.0.1
# ::edge	have-degree-91	ARG3	most	0.0.0.0.2	0.0.0.0.2.0
# ::edge	path	ARG1-of	good-02	0.0.0.0	0.0.0.0.1
# ::edge	path	ARG1-of	have-degree-91	0.0.0.0	0.0.0.0.2
# ::edge	path	mod	overall	0.0.0.0	0.0.0.0.0
# ::edge	possible-01	ARG1	find-01	0.0	0.0.0
# ::edge	principle	mod	program-01	0.1.0	0.1.0.0
# ::edge	program-01	mod	dynamic	0.1.0.0	0.1.0.0.0
# ::edge	use-01	ARG1	this	0.0.0.2	0.0.0.2.0
(MRPNode-0 / cause-01 :ARG1 (MRPNode-1 / possible-01 :ARG1 (MRPNode-2 / find-01 :ARG1 (MRPNode-3 / path :mod (MRPNode-4 / overall) :ARG1-of (MRPNode-5 / good-02) :ARG1-of (MRPNode-6 / have-degree-91 :ARG2 MRPNode-5 :ARG3 (MRPNode-7 / most))) :time (MRPNode-8 / then) :manner (MRPNode-9 / use-01 :ARG1 (MRPNode-10 / this)))) :ARG0 (MRPNode-11 / demonstrate-01 :ARG1 (MRPNode-12 / principle :mod (MRPNode-13 / program-01 :mod (MRPNode-14 / dynamic)))))

# ::id 429
# ::snt To achieve this, the programmer has to note generalisations and similarities about various aspects of the program.
# ::tok To achieve this , the programmer has to note generalisations and similarities about various aspects of the program .
# ::alignments 1-2|0.2 2-3|0.2.0 5-6|0.0+0.0.0 8-9|0.1 9-10|0.1.0.0 10-11|0.1.0 13-14|0.1.0.1.0.0 14-15|0.1.0.1.0 17-18|0.1.0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.055752 ::parser eager_oracle ::smatch 0.7755102040816326 ::n_actions 52
# ::node	0	obligate-01	
# ::node	0.0	person	5-6
# ::node	0.0.0	program-01	5-6
# ::node	0.1	note-01	8-9
# ::node	0.1.0	and	10-11
# ::node	0.1.0.0	generalize-01	9-10
# ::node	0.1.0.1	resemble-01	
# ::node	0.1.0.1.0	aspect	14-15
# ::node	0.1.0.1.0.0	various	13-14
# ::node	0.1.0.1.0.1	program	17-18
# ::node	0.2	achieve-01	1-2
# ::node	0.2.0	this	2-3
# ::root	0	obligate-01
# ::edge	achieve-01	ARG0	person	0.2	0.0
# ::edge	achieve-01	ARG1	this	0.2	0.2.0
# ::edge	and	op1	generalize-01	0.1.0	0.1.0.0
# ::edge	and	op2	resemble-01	0.1.0	0.1.0.1
# ::edge	and	topic	aspect	0.1.0	0.1.0.1.0
# ::edge	aspect	mod	various	0.1.0.1.0	0.1.0.1.0.0
# ::edge	aspect	part-of	program	0.1.0.1.0	0.1.0.1.0.1
# ::edge	note-01	ARG0	person	0.1	0.0
# ::edge	note-01	ARG1	and	0.1	0.1.0
# ::edge	obligate-01	ARG1	person	0	0.0
# ::edge	obligate-01	ARG2	note-01	0	0.1
# ::edge	obligate-01	purpose	achieve-01	0	0.2
# ::edge	person	ARG0-of	program-01	0.0	0.0.0
# ::edge	resemble-01	ARG1	aspect	0.1.0.1	0.1.0.1.0
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / program-01)) :ARG2 (MRPNode-3 / note-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-4 / and :op1 (MRPNode-5 / generalize-01) :op2 (MRPNode-6 / resemble-01 :ARG1 (MRPNode-7 / aspect :mod (MRPNode-8 / various) :part-of (MRPNode-9 / program))) :topic MRPNode-7)) :purpose (MRPNode-10 / achieve-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-11 / this)))

# ::id 430
# ::snt The further down an inheritance tree you get, the more specific the classes become.
# ::tok The further down an inheritance tree you get , the more specific the classes become .
# ::alignments 2-3|0.0.0.0.0.1 4-5|0.0.0.0.1 5-6|0.0.0.0 6-7|0.0.0.0.0.0 7-8|0.0.0.0.0 10-11|0.0 11-12|0.1.0.0 13-14|0.1.0.0.0 14-15|0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.070448 ::parser eager_oracle ::smatch 0.6190476190476191 ::n_actions 42
# ::node	0	correlate-91	
# ::node	0.0	more	10-11
# ::node	0.0.0	have-quant-91	
# ::node	0.0.0.0	tree	5-6
# ::node	0.0.0.0.0	get-05	7-8
# ::node	0.0.0.0.0.0	you	6-7
# ::node	0.0.0.0.0.1	down	2-3
# ::node	0.0.0.0.1	inherit-01	4-5
# ::node	0.1	more	
# ::node	0.1.0	have-quant-91	
# ::node	0.1.0.0	specific-02	11-12
# ::node	0.1.0.0.0	class	13-14
# ::node	0.1.0.1	become-01	14-15
# ::root	0	correlate-91
# ::edge	correlate-91	ARG1	more	0	0.0
# ::edge	correlate-91	ARG2	more	0	0.1
# ::edge	get-05	ARG0	you	0.0.0.0.0	0.0.0.0.0.0
# ::edge	get-05	ARG2	down	0.0.0.0.0	0.0.0.0.0.1
# ::edge	have-quant-91	ARG1	become-01	0.1.0	0.1.0.1
# ::edge	have-quant-91	ARG1	specific-02	0.1.0	0.1.0.0
# ::edge	have-quant-91	ARG1	tree	0.0.0	0.0.0.0
# ::edge	more	ARG3-of	have-quant-91	0.0	0.0.0
# ::edge	more	ARG3-of	have-quant-91	0.1	0.1.0
# ::edge	specific-02	ARG1	class	0.1.0.0	0.1.0.0.0
# ::edge	tree	mod	get-05	0.0.0.0	0.0.0.0.0
# ::edge	tree	mod	inherit-01	0.0.0.0	0.0.0.0.1
(MRPNode-0 / correlate-91 :ARG1 (MRPNode-1 / more :ARG3-of (MRPNode-2 / have-quant-91 :ARG1 (MRPNode-3 / tree :mod (MRPNode-4 / get-05 :ARG0 (MRPNode-5 / you) :ARG2 (MRPNode-6 / down)) :mod (MRPNode-7 / inherit-01)))) :ARG2 (MRPNode-8 / more :ARG3-of (MRPNode-9 / have-quant-91 :ARG1 (MRPNode-10 / specific-02 :ARG1 (MRPNode-11 / class)) :ARG1 (MRPNode-12 / become-01))))

# ::id 431
# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
# ::tok The easiest way to look at inheritance is as an " ... is a kind of " relationship .
# ::alignments 1-2|0.0 2-3|0 4-5|0.2 6-7|0.2.0 14-15|0.3.0 15-16|0.1 17-18|0.3 ::annotator aligner3.py ::date 2021-03-11 23:00:46.081433 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 43
# ::node	0	way	2-3
# ::node	0.0	simple-02	1-2
# ::node	0.1	have-degree-91	15-16
# ::node	0.1.0	more	
# ::node	0.2	look-01	4-5
# ::node	0.2.0	inherit-01	6-7
# ::node	0.3	relation-03	17-18
# ::node	0.3.0	kind	14-15
# ::root	0	way
# ::edge	have-degree-91	ARG3	more	0.1	0.1.0
# ::edge	look-01	ARG1	inherit-01	0.2	0.2.0
# ::edge	relation-03	mod	kind	0.3	0.3.0
# ::edge	way	ARG1-of	have-degree-91	0	0.1
# ::edge	way	ARG1-of	simple-02	0	0.0
# ::edge	way	domain	look-01	0	0.2
# ::edge	way	domain	relation-03	0	0.3
(MRPNode-0 / way :ARG1-of (MRPNode-1 / simple-02) :ARG1-of (MRPNode-2 / have-degree-91 :ARG3 (MRPNode-3 / more)) :domain (MRPNode-4 / look-01 :ARG1 (MRPNode-5 / inherit-01)) :domain (MRPNode-6 / relation-03 :mod (MRPNode-7 / kind)))

# ::id 432
# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tok This means that inheritance is used when types have common factors and these would be put into the superclass .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1.0 5-6|0.1 7-8|0.1.1.0.1 8-9|0.1.1.0 9-10|0.1.1.0.0.0 10-11|0.1.1.0.0 11-12|0.1.1 15-16|0.1.1.1 18-19|0.1.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.146495 ::parser eager_oracle ::smatch 1.0 ::n_actions 57
# ::node	0	mean-01	1-2
# ::node	0.0	this	0-1
# ::node	0.1	use-01	5-6
# ::node	0.1.0	inherit-01	3-4
# ::node	0.1.1	and	11-12
# ::node	0.1.1.0	have-03	8-9
# ::node	0.1.1.0.0	factor	10-11
# ::node	0.1.1.0.0.0	common	9-10
# ::node	0.1.1.0.1	type	7-8
# ::node	0.1.1.1	put-01	15-16
# ::node	0.1.1.1.0	superclass	18-19
# ::root	0	mean-01
# ::edge	and	op1	have-03	0.1.1	0.1.1.0
# ::edge	and	op2	put-01	0.1.1	0.1.1.1
# ::edge	factor	mod	common	0.1.1.0.0	0.1.1.0.0.0
# ::edge	have-03	ARG0	type	0.1.1.0	0.1.1.0.1
# ::edge	have-03	ARG1	factor	0.1.1.0	0.1.1.0.0
# ::edge	mean-01	ARG1	this	0	0.0
# ::edge	mean-01	ARG2	use-01	0	0.1
# ::edge	put-01	ARG1	type	0.1.1.1	0.1.1.0.1
# ::edge	put-01	ARG2	superclass	0.1.1.1	0.1.1.1.0
# ::edge	use-01	ARG1	inherit-01	0.1	0.1.0
# ::edge	use-01	time	and	0.1	0.1.1
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / this) :ARG2 (MRPNode-2 / use-01 :ARG1 (MRPNode-3 / inherit-01) :time (MRPNode-4 / and :op1 (MRPNode-5 / have-03 :ARG1 (MRPNode-6 / factor :mod (MRPNode-7 / common)) :ARG0 (MRPNode-8 / type)) :op2 (MRPNode-9 / put-01 :ARG1 MRPNode-8 :ARG2 (MRPNode-10 / superclass)))))

# ::id 433
# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tok This means that inheritance is used when types have common factors and these would be put into the superclass .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1.0 5-6|0.1 7-8|0.1.1.0.1 8-9|0.1.1.0 9-10|0.1.1.0.0.0 10-11|0.1.1.0.0 11-12|0.1.1 15-16|0.1.1.1 18-19|0.1.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.212425 ::parser eager_oracle ::smatch 1.0 ::n_actions 57
# ::node	0	mean-01	1-2
# ::node	0.0	this	0-1
# ::node	0.1	use-01	5-6
# ::node	0.1.0	inherit-01	3-4
# ::node	0.1.1	and	11-12
# ::node	0.1.1.0	have-03	8-9
# ::node	0.1.1.0.0	factor	10-11
# ::node	0.1.1.0.0.0	common	9-10
# ::node	0.1.1.0.1	type	7-8
# ::node	0.1.1.1	put-01	15-16
# ::node	0.1.1.1.0	superclass	18-19
# ::root	0	mean-01
# ::edge	and	op1	have-03	0.1.1	0.1.1.0
# ::edge	and	op2	put-01	0.1.1	0.1.1.1
# ::edge	factor	mod	common	0.1.1.0.0	0.1.1.0.0.0
# ::edge	have-03	ARG0	type	0.1.1.0	0.1.1.0.1
# ::edge	have-03	ARG1	factor	0.1.1.0	0.1.1.0.0
# ::edge	mean-01	ARG1	this	0	0.0
# ::edge	mean-01	ARG2	use-01	0	0.1
# ::edge	put-01	ARG1	type	0.1.1.1	0.1.1.0.1
# ::edge	put-01	ARG2	superclass	0.1.1.1	0.1.1.1.0
# ::edge	use-01	ARG1	inherit-01	0.1	0.1.0
# ::edge	use-01	time	and	0.1	0.1.1
(MRPNode-0 / mean-01 :ARG1 (MRPNode-1 / this) :ARG2 (MRPNode-2 / use-01 :ARG1 (MRPNode-3 / inherit-01) :time (MRPNode-4 / and :op1 (MRPNode-5 / have-03 :ARG1 (MRPNode-6 / factor :mod (MRPNode-7 / common)) :ARG0 (MRPNode-8 / type)) :op2 (MRPNode-9 / put-01 :ARG1 MRPNode-8 :ARG2 (MRPNode-10 / superclass)))))

# ::id 434
# ::snt Spain Princess Testifies in Historic Fraud Probe
# ::tok Spain Princess Testifies in Historic Fraud Probe
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1+0.1.1+0.1.1.0 2-3|0 4-7|0.0.0+0.0.0.0+0.0.0.1+0.0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:46.218079 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 28
# ::node	0	testify-01	2-3
# ::node	0.0	thing	
# ::node	0.0.0	name	4-7
# ::node	0.0.0.0	historic	4-7
# ::node	0.0.0.1	fraud	4-7
# ::node	0.0.0.2	probe	4-7
# ::node	0.1	person	1-2
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	spain	0-1
# ::node	0.1.1	have-org-role-91	1-2
# ::node	0.1.1.0	prince	1-2
# ::root	0	testify-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	prince	0.1.1	0.1.1.0
# ::edge	name	op1	historic	0.0.0	0.0.0.0
# ::edge	name	op1	spain	0.1.0.0	0.1.0.0.0
# ::edge	name	op2	fraud	0.0.0	0.0.0.1
# ::edge	name	op3	probe	0.0.0	0.0.0.2
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.1
# ::edge	person	mod	country	0.1	0.1.0
# ::edge	testify-01	ARG0	person	0	0.1
# ::edge	testify-01	ARG1	thing	0	0.0
# ::edge	thing	mod	name	0.0	0.0.0
(MRPNode-0 / testify-01 :ARG1 (MRPNode-1 / thing :mod (MRPNode-2 / name :op1 historic :op2 fraud :op3 probe)) :ARG0 (MRPNode-3 / person :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 spain)) :ARG0-of (MRPNode-6 / have-org-role-91 :ARG2 (MRPNode-7 / prince))))

# ::id 435
# ::snt Senate confirms Obama nominee to key appeals court
# ::tok Senate confirms Obama nominee to key appeals court
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.0+0.0.0.0+0.0.0.0.0 3-4|0.0 5-6|0.0.1.1 6-7|0.0.1.0 7-8|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.225436 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	confirm-01	1-2
# ::node	0.0	nominate-01	3-4
# ::node	0.0.0	person	2-3
# ::node	0.0.0.0	name	2-3
# ::node	0.0.0.0.0	obama	2-3
# ::node	0.0.1	court	7-8
# ::node	0.0.1.0	appeal-01	6-7
# ::node	0.0.1.1	key-02	5-6
# ::node	0.1	government-organization	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	senate	0-1
# ::root	0	confirm-01
# ::edge	confirm-01	ARG0	government-organization	0	0.1
# ::edge	confirm-01	ARG1	nominate-01	0	0.0
# ::edge	court	ARG1-of	key-02	0.0.1	0.0.1.1
# ::edge	court	mod	appeal-01	0.0.1	0.0.1.0
# ::edge	government-organization	name	name	0.1	0.1.0
# ::edge	name	op1	obama	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	senate	0.1.0	0.1.0.0
# ::edge	nominate-01	ARG1	person	0.0	0.0.0
# ::edge	nominate-01	ARG2	court	0.0	0.0.1
# ::edge	person	name	name	0.0.0	0.0.0.0
(MRPNode-0 / confirm-01 :ARG1 (MRPNode-1 / nominate-01 :ARG1 (MRPNode-2 / person :name (MRPNode-3 / name :op1 obama)) :ARG2 (MRPNode-4 / court :mod (MRPNode-5 / appeal-01) :ARG1-of (MRPNode-6 / key-02))) :ARG0 (MRPNode-7 / government-organization :name (MRPNode-8 / name :op1 senate)))

# ::id 436
# ::snt U.N. rights chief presses Egypt on Mursi detention
# ::tok U.N. rights chief presses Egypt on Mursi detention
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 1-2|0.1.0.1.0 2-3|0.1+0.1.0+0.1.0.1 3-4|0 4-5|0.0+0.0.0+0.0.0.0 6-7|0.2.0+0.2.0.0+0.2.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.234973 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 38
# ::node	0	press-01	3-4
# ::node	0.0	country	4-5
# ::node	0.0.0	name	4-5
# ::node	0.0.0.0	egypt	4-5
# ::node	0.1	person	2-3
# ::node	0.1.0	have-org-role-91	2-3
# ::node	0.1.0.0	organization	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	u.n.	0-1
# ::node	0.1.0.1	chief	2-3
# ::node	0.1.0.1.0	right-05	1-2
# ::node	0.2	detain-01	
# ::node	0.2.0	person	6-7
# ::node	0.2.0.0	name	6-7
# ::node	0.2.0.0.0	mursi	6-7
# ::root	0	press-01
# ::edge	chief	purpose	right-05	0.1.0.1	0.1.0.1.0
# ::edge	country	name	name	0.0	0.0.0
# ::edge	detain-01	ARG1	person	0.2	0.2.0
# ::edge	have-org-role-91	ARG1	organization	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	chief	0.1.0	0.1.0.1
# ::edge	name	op1	egypt	0.0.0	0.0.0.0
# ::edge	name	op1	mursi	0.2.0.0	0.2.0.0.0
# ::edge	name	op1	u.n.	0.1.0.0.0	0.1.0.0.0.0
# ::edge	organization	name	name	0.1.0.0	0.1.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	person	name	name	0.2.0	0.2.0.0
# ::edge	press-01	ARG0	person	0	0.1
# ::edge	press-01	ARG1	country	0	0.0
# ::edge	press-01	ARG2	detain-01	0	0.2
(MRPNode-0 / press-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 egypt)) :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-org-role-91 :ARG1 (MRPNode-5 / organization :name (MRPNode-6 / name :op1 u.n.)) :ARG2 (MRPNode-7 / chief :purpose (MRPNode-8 / right-05)))) :ARG2 (MRPNode-9 / detain-01 :ARG1 (MRPNode-10 / person :name (MRPNode-11 / name :op1 mursi))))

# ::id 437
# ::snt US Senate confirms Janet Yellen as US Federal Reserve chief
# ::tok US Senate confirms Janet Yellen as US Federal Reserve chief
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1+0.1.1+0.1.1.0 2-3|0 3-5|0.0+0.0.0+0.0.0.0+0.0.0.1 7-9|0.0.1+0.0.1.0+0.0.1.0.0+0.0.1.0.0.0+0.0.1.0.0.1 9-10|0.0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.246731 ::parser eager_oracle ::smatch 0.9285714285714286 ::n_actions 34
# ::node	0	confirm-01	2-3
# ::node	0.0	person	3-5
# ::node	0.0.0	name	3-5
# ::node	0.0.0.0	janet	3-5
# ::node	0.0.0.1	yellen	3-5
# ::node	0.0.1	have-org-role-91	7-9
# ::node	0.0.1.0	government-organization	7-9
# ::node	0.0.1.0.0	name	7-9
# ::node	0.0.1.0.0.0	federal	7-9
# ::node	0.0.1.0.0.1	reserve	7-9
# ::node	0.0.1.1	chief	9-10
# ::node	0.1	government-organization	1-2
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	us	0-1
# ::node	0.1.1	name	1-2
# ::node	0.1.1.0	senate	1-2
# ::root	0	confirm-01
# ::edge	confirm-01	ARG0	government-organization	0	0.1
# ::edge	confirm-01	ARG1	person	0	0.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	government-organization	mod	country	0.1	0.1.0
# ::edge	government-organization	name	name	0.0.1.0	0.0.1.0.0
# ::edge	government-organization	name	name	0.1	0.1.1
# ::edge	have-org-role-91	ARG2	chief	0.0.1	0.0.1.1
# ::edge	have-org-role-91	ARG2	government-organization	0.0.1	0.0.1.0
# ::edge	name	op1	federal	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	janet	0.0.0	0.0.0.0
# ::edge	name	op1	senate	0.1.1	0.1.1.0
# ::edge	name	op1	us	0.1.0.0	0.1.0.0.0
# ::edge	name	op2	yellen	0.0.0	0.0.0.1
# ::edge	name	op3	reserve	0.0.1.0.0	0.0.1.0.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.1
# ::edge	person	ARG0-of	name	0.0	0.0.0
(MRPNode-0 / confirm-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / name :op1 janet :op2 yellen) :ARG0-of (MRPNode-3 / have-org-role-91 :ARG2 (MRPNode-4 / government-organization :name (MRPNode-5 / name :op1 federal :op3 reserve)) :ARG2 (MRPNode-6 / chief))) :ARG0 (MRPNode-7 / government-organization :mod (MRPNode-8 / country :name (MRPNode-9 / name :op1 us)) :name (MRPNode-10 / name :op1 senate)))

# ::id 438
# ::snt Syrian Rebel Groups Battle Each Other in North
# ::tok Syrian Rebel Groups Battle Each Other in North
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 3-4|0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.251085 ::parser eager_oracle ::smatch 0.5833333333333334 ::n_actions 18
# ::node	0	battle-01	3-4
# ::node	0.0	military	
# ::node	0.0.0	name	
# ::node	0.0.0.0	each	
# ::node	0.0.0.1	groups	
# ::node	0.0.1	country	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	syria	0-1
# ::node	0.1	north	7-8
# ::root	0	battle-01
# ::edge	battle-01	ARG1	military	0	0.0
# ::edge	battle-01	location	north	0	0.1
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	military	mod	country	0.0	0.0.1
# ::edge	military	mod	name	0.0	0.0.0
# ::edge	name	op1	each	0.0.0	0.0.0.0
# ::edge	name	op1	syria	0.0.1.0	0.0.1.0.0
# ::edge	name	op2	groups	0.0.0	0.0.0.1
(MRPNode-0 / battle-01 :ARG1 (MRPNode-1 / military :mod (MRPNode-2 / name :op1 each :op2 groups) :mod (MRPNode-3 / country :name (MRPNode-4 / name :op1 syria))) :location (MRPNode-5 / north))

# ::id 439
# ::snt Rocks, Tear Gas Fly as Thai Protests Heat Up
# ::tok Rocks , Tear Gas Fly as Thai Protests Heat Up
# ::alignments 0-1|0.0 5-6|0 7-8|0.2.1 8-9|0.2+0.2.0+0.2.2 ::annotator aligner3.py ::date 2021-03-11 23:00:46.260215 ::parser eager_oracle ::smatch 0.6060606060606061 ::n_actions 32
# ::node	0	and	5-6
# ::node	0.0	rock	0-1
# ::node	0.1	flame-01	
# ::node	0.1.0	rain-01	
# ::node	0.1.0.0	imperative	
# ::node	0.2	heat-01	8-9
# ::node	0.2.0	imperative	8-9
# ::node	0.2.1	protest-01	7-8
# ::node	0.2.1.0	country	6-7
# ::node	0.2.1.0.0	name	6-7
# ::node	0.2.1.0.0.0	thailand	6-7
# ::node	0.2.2	you	8-9
# ::root	0	and
# ::edge	and	op1	rock	0	0.0
# ::edge	and	op2	flame-01	0	0.1
# ::edge	and	op3	heat-01	0	0.2
# ::edge	country	name	name	0.2.1.0	0.2.1.0.0
# ::edge	flame-01	ARG1	rain-01	0.1	0.1.0
# ::edge	heat-01	ARG0	you	0.2	0.2.2
# ::edge	heat-01	ARG1	protest-01	0.2	0.2.1
# ::edge	heat-01	mode	imperative	0.2	0.2.0
# ::edge	name	op1	thailand	0.2.1.0.0	0.2.1.0.0.0
# ::edge	protest-01	ARG1	country	0.2.1	0.2.1.0
# ::edge	rain-01	mode	imperative	0.1.0	0.1.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / rock) :op2 (MRPNode-2 / flame-01 :ARG1 (MRPNode-3 / rain-01 :mode imperative)) :op3 (MRPNode-4 / heat-01 :mode imperative :ARG1 (MRPNode-5 / protest-01 :ARG1 (MRPNode-6 / country :name (MRPNode-7 / name :op1 thailand))) :ARG0 (MRPNode-8 / you)))

# ::id 440
# ::snt Boston bombing suspect buried in Virginia
# ::tok Boston bombing suspect buried in Virginia
# ::alignments 0-1|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 1-2|0.0+0.0.0 2-3|0.0.1 3-4|0 5-6|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.266028 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	bury-01	3-4
# ::node	0.0	person	1-2
# ::node	0.0.0	bomb-01	1-2
# ::node	0.0.0.0	city	0-1
# ::node	0.0.0.0.0	name	0-1
# ::node	0.0.0.0.0.0	boston	0-1
# ::node	0.0.1	suspect-01	2-3
# ::node	0.1	state	5-6
# ::node	0.1.0	name	5-6
# ::node	0.1.0.0	virginia	5-6
# ::root	0	bury-01
# ::edge	bomb-01	location	city	0.0.0	0.0.0.0
# ::edge	bury-01	ARG1	person	0	0.0
# ::edge	bury-01	ARG2	state	0	0.1
# ::edge	city	name	name	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	boston	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	virginia	0.1.0	0.1.0.0
# ::edge	person	ARG2-of	bomb-01	0.0	0.0.0
# ::edge	person	ARG2-of	suspect-01	0.0	0.0.1
# ::edge	state	name	name	0.1	0.1.0
(MRPNode-0 / bury-01 :ARG1 (MRPNode-1 / person :ARG2-of (MRPNode-2 / bomb-01 :location (MRPNode-3 / city :name (MRPNode-4 / name :op1 boston))) :ARG2-of (MRPNode-5 / suspect-01)) :ARG2 (MRPNode-6 / state :name (MRPNode-7 / name :op1 virginia)))

# ::id 441
# ::snt Six dead in Philippine restaurant blast
# ::tok Six dead in Philippine restaurant blast
# ::alignments 0-1|0.0+0.0.0 3-4|0.1.0+0.1.0.0+0.1.0.0.0 4-5|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.269188 ::parser eager_oracle ::smatch 0.6363636363636365 ::n_actions 20
# ::node	0	die-01	
# ::node	0.0	person	0-1
# ::node	0.0.0	6	0-1
# ::node	0.1	restaurant	4-5
# ::node	0.1.0	country	3-4
# ::node	0.1.0.0	name	3-4
# ::node	0.1.0.0.0	philippines	3-4
# ::root	0	die-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	die-01	ARG1	person	0	0.0
# ::edge	die-01	location	restaurant	0	0.1
# ::edge	name	op1	philippines	0.1.0.0	0.1.0.0.0
# ::edge	person	quant	6	0.0	0.0.0
# ::edge	restaurant	location	country	0.1	0.1.0
(MRPNode-0 / die-01 :ARG1 (MRPNode-1 / person :quant 6) :location (MRPNode-2 / restaurant :location (MRPNode-3 / country :name (MRPNode-4 / name :op1 philippines))))

# ::id 442
# ::snt China army newspaper hits out at US's PRISM programme
# ::tok China army newspaper hits out at US 's PRISM programme
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.0.0+0.0.0.0 2-3|0.0 6-7|0.1.1+0.1.1.0+0.1.1.0.0 9-10|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.275939 ::parser eager_oracle ::smatch 0.8333333333333333 ::n_actions 27
# ::node	0	go-out-17	
# ::node	0.0	newspaper	2-3
# ::node	0.0.0	name	1-2
# ::node	0.0.0.0	army	1-2
# ::node	0.1	program	9-10
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	china	0-1
# ::node	0.1.1	country	6-7
# ::node	0.1.1.0	name	6-7
# ::node	0.1.1.0.0	us	6-7
# ::root	0	go-out-17
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	go-out-17	ARG1	newspaper	0	0.0
# ::edge	go-out-17	ARG1	program	0	0.1
# ::edge	name	op1	army	0.0.0	0.0.0.0
# ::edge	name	op1	china	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	us	0.1.1.0	0.1.1.0.0
# ::edge	newspaper	name	name	0.0	0.0.0
# ::edge	program	poss	country	0.1	0.1.0
# ::edge	program	poss	country	0.1	0.1.1
(MRPNode-0 / go-out-17 :ARG1 (MRPNode-1 / newspaper :name (MRPNode-2 / name :op1 army)) :ARG1 (MRPNode-3 / program :poss (MRPNode-4 / country :name (MRPNode-5 / name :op1 china)) :poss (MRPNode-6 / country :name (MRPNode-7 / name :op1 us))))

# ::id 443
# ::snt Two killed in Bahrain car explosion
# ::tok Two killed in Bahrain car explosion
# ::alignments 0-1|0.0+0.0.0 1-2|0 3-4|0.1.0.0.0+0.1.0.0.0.0+0.1.0.0.0.0.0 4-5|0.1.0.0 5-6|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.281640 ::parser eager_oracle ::smatch 0.8666666666666666 ::n_actions 26
# ::node	0	kill-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	2	0-1
# ::node	0.1	cause-01	
# ::node	0.1.0	explode-01	5-6
# ::node	0.1.0.0	car	4-5
# ::node	0.1.0.0.0	country	3-4
# ::node	0.1.0.0.0.0	name	3-4
# ::node	0.1.0.0.0.0.0	bahrain	3-4
# ::root	0	kill-01
# ::edge	car	location	country	0.1.0.0	0.1.0.0.0
# ::edge	cause-01	ARG0	explode-01	0.1	0.1.0
# ::edge	country	name	name	0.1.0.0.0	0.1.0.0.0.0
# ::edge	explode-01	ARG1	car	0.1.0	0.1.0.0
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	ARG1-of	cause-01	0	0.1
# ::edge	name	op1	bahrain	0.1.0.0.0.0	0.1.0.0.0.0.0
# ::edge	person	quant	2	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 2) :ARG1-of (MRPNode-2 / cause-01 :ARG0 (MRPNode-3 / explode-01 :ARG1 (MRPNode-4 / car :location (MRPNode-5 / country :name (MRPNode-6 / name :op1 bahrain))))))

# ::id 444
# ::snt Russia warns it will respond if interests attacked in Ukraine
# ::tok Russia warns it will respond if interests attacked in Ukraine
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 1-2|0 4-5|0.0 6-7|0.0.0.0 7-8|0.0.0 9-10|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.290058 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	warn-01	1-2
# ::node	0.0	respond-01	4-5
# ::node	0.0.0	attack-01	7-8
# ::node	0.0.0.0	interest	6-7
# ::node	0.0.0.1	country	9-10
# ::node	0.0.0.1.0	name	9-10
# ::node	0.0.0.1.0.0	ukraine	9-10
# ::node	0.0.1	country	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	russia	0-1
# ::root	0	warn-01
# ::edge	attack-01	ARG1	interest	0.0.0	0.0.0.0
# ::edge	attack-01	location	country	0.0.0	0.0.0.1
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	name	op1	russia	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	ukraine	0.0.0.1.0	0.0.0.1.0.0
# ::edge	respond-01	ARG0	country	0.0	0.0.1
# ::edge	respond-01	condition	attack-01	0.0	0.0.0
# ::edge	warn-01	ARG0	country	0	0.0.1
# ::edge	warn-01	ARG1	respond-01	0	0.0
(MRPNode-0 / warn-01 :ARG1 (MRPNode-1 / respond-01 :condition (MRPNode-2 / attack-01 :ARG1 (MRPNode-3 / interest) :location (MRPNode-4 / country :name (MRPNode-5 / name :op1 ukraine))) :ARG0 (MRPNode-6 / country :name (MRPNode-7 / name :op1 russia))) :ARG0 MRPNode-6)

# ::id 445
# ::snt Couple marry in the UK's first Scientology wedding
# ::tok Couple marry in the UK 's first Scientology wedding
# ::alignments 0-1|0.0 1-2|0 4-5|0.1.1.1+0.1.1.1.0+0.1.1.1.0.0 7-8|0.1.1+0.1.1.0+0.1.1.0.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.296179 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 26
# ::node	0	marry-01	1-2
# ::node	0.0	couple	0-1
# ::node	0.1	wed-01	8-9
# ::node	0.1.0	ordinal-entity	
# ::node	0.1.0.0	1	
# ::node	0.1.1	city	7-8
# ::node	0.1.1.0	name	7-8
# ::node	0.1.1.0.0	scientology	7-8
# ::node	0.1.1.1	country	4-5
# ::node	0.1.1.1.0	name	4-5
# ::node	0.1.1.1.0.0	uk	4-5
# ::root	0	marry-01
# ::edge	city	location	country	0.1.1	0.1.1.1
# ::edge	city	name	name	0.1.1	0.1.1.0
# ::edge	country	name	name	0.1.1.1	0.1.1.1.0
# ::edge	marry-01	ARG1	couple	0	0.0
# ::edge	marry-01	ARG2	wed-01	0	0.1
# ::edge	name	op1	scientology	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	uk	0.1.1.1.0	0.1.1.1.0.0
# ::edge	ordinal-entity	value	1	0.1.0	0.1.0.0
# ::edge	wed-01	mod	city	0.1	0.1.1
# ::edge	wed-01	mod	ordinal-entity	0.1	0.1.0
(MRPNode-0 / marry-01 :ARG1 (MRPNode-1 / couple) :ARG2 (MRPNode-2 / wed-01 :mod (MRPNode-3 / ordinal-entity :value 1) :mod (MRPNode-4 / city :name (MRPNode-5 / name :op1 scientology) :location (MRPNode-6 / country :name (MRPNode-7 / name :op1 uk)))))

# ::id 446
# ::snt Russian opposition leader under house arrest
# ::tok Russian opposition leader under house arrest
# ::alignments 0-1|0.0+0.0.0+0.0.0.0+0.0.0.0.0 1-2|0.0.1.0 2-3|0.0.1 4-5|0.1 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.300910 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 27
# ::node	0	arrest-01	5-6
# ::node	0.0	person	0-1
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	russia	0-1
# ::node	0.0.1	lead-02	2-3
# ::node	0.0.1.0	oppose-01	1-2
# ::node	0.1	house	4-5
# ::root	0	arrest-01
# ::edge	arrest-01	ARG1	person	0	0.0
# ::edge	arrest-01	location	house	0	0.1
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	lead-02	ARG1	oppose-01	0.0.1	0.0.1.0
# ::edge	name	op1	russia	0.0.0.0	0.0.0.0.0
# ::edge	person	ARG0-of	country	0.0	0.0.0
# ::edge	person	ARG0-of	lead-02	0.0	0.0.1
(MRPNode-0 / arrest-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / country :name (MRPNode-3 / name :op1 russia)) :ARG0-of (MRPNode-4 / lead-02 :ARG1 (MRPNode-5 / oppose-01))) :location (MRPNode-6 / house))

# ::id 447
# ::snt Senate confirms Janet Yellen as chair of US Federal Reserve
# ::tok Senate confirms Janet Yellen as chair of US Federal Reserve
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-4|0.0.2+0.0.2.0+0.0.2.0.0+0.0.2.0.1 5-6|0.0+0.0.0 7-10|0.0.1+0.0.1.0+0.0.1.0.0+0.0.1.0.1+0.0.1.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:46.311268 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	confirm-01	1-2
# ::node	0.0	have-org-role-91	5-6
# ::node	0.0.0	chairman	5-6
# ::node	0.0.1	government-organization	7-10
# ::node	0.0.1.0	name	7-10
# ::node	0.0.1.0.0	us	7-10
# ::node	0.0.1.0.1	federal	7-10
# ::node	0.0.1.0.2	reserve	7-10
# ::node	0.0.2	person	2-4
# ::node	0.0.2.0	name	2-4
# ::node	0.0.2.0.0	janet	2-4
# ::node	0.0.2.0.1	yellen	2-4
# ::node	0.1	government-organization	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	senate	0-1
# ::root	0	confirm-01
# ::edge	confirm-01	ARG0	government-organization	0	0.1
# ::edge	confirm-01	ARG1	have-org-role-91	0	0.0
# ::edge	confirm-01	ARG2	person	0	0.0.2
# ::edge	government-organization	name	name	0.0.1	0.0.1.0
# ::edge	government-organization	name	name	0.1	0.1.0
# ::edge	have-org-role-91	ARG0	person	0.0	0.0.2
# ::edge	have-org-role-91	ARG1	government-organization	0.0	0.0.1
# ::edge	have-org-role-91	ARG2	chairman	0.0	0.0.0
# ::edge	name	op1	janet	0.0.2.0	0.0.2.0.0
# ::edge	name	op1	senate	0.1.0	0.1.0.0
# ::edge	name	op1	us	0.0.1.0	0.0.1.0.0
# ::edge	name	op2	federal	0.0.1.0	0.0.1.0.1
# ::edge	name	op2	yellen	0.0.2.0	0.0.2.0.1
# ::edge	name	op3	reserve	0.0.1.0	0.0.1.0.2
# ::edge	person	name	name	0.0.2	0.0.2.0
(MRPNode-0 / confirm-01 :ARG1 (MRPNode-1 / have-org-role-91 :ARG2 (MRPNode-2 / chairman) :ARG1 (MRPNode-3 / government-organization :name (MRPNode-4 / name :op1 us :op2 federal :op3 reserve)) :ARG0 (MRPNode-7 / person :name (MRPNode-8 / name :op1 janet :op2 yellen))) :ARG0 (MRPNode-5 / government-organization :name (MRPNode-6 / name :op1 senate)) :ARG2 MRPNode-7)

# ::id 448
# ::snt Venezuela lawmakers brawl amid election tensions
# ::tok Venezuela lawmakers brawl amid election tensions
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 4-5|0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.315029 ::parser eager_oracle ::smatch 0.5833333333333334 ::n_actions 16
# ::node	0	duel-01	
# ::node	0.0	tension	5-6
# ::node	0.0.0	elect-01	4-5
# ::node	0.1	person	
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	venezuela	0-1
# ::node	0.1.1	legislate-01	
# ::root	0	duel-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	duel-01	ARG0	person	0	0.1
# ::edge	duel-01	ARG0	tension	0	0.0
# ::edge	name	op1	venezuela	0.1.0.0	0.1.0.0.0
# ::edge	person	ARG0-of	legislate-01	0.1	0.1.1
# ::edge	person	mod	country	0.1	0.1.0
# ::edge	tension	mod	elect-01	0.0	0.0.0
(MRPNode-0 / duel-01 :ARG0 (MRPNode-1 / tension :mod (MRPNode-2 / elect-01)) :ARG0 (MRPNode-3 / person :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 venezuela)) :ARG0-of (MRPNode-6 / legislate-01)))

# ::id 449
# ::snt North Korea Warns Foreigners in South, Advising Evacuation
# ::tok North Korea Warns Foreigners in South , Advising Evacuation
# ::alignments 0-2|0.0+0.0.0+0.0.0.0+0.0.0.1 3-4|0.1.1.0.0+0.1.1.0.0.0 5-6|0.1+0.1.0+0.1.0.0+0.1.0.0.0+0.1.0.0.1 8-9|0.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.326293 ::parser eager_oracle ::smatch 0.744186046511628 ::n_actions 29
# ::node	0	war-01	
# ::node	0.0	country	0-2
# ::node	0.0.0	name	0-2
# ::node	0.0.0.0	north	0-2
# ::node	0.0.0.1	korea	0-2
# ::node	0.1	person	5-6
# ::node	0.1.0	country	5-6
# ::node	0.1.0.0	name	5-6
# ::node	0.1.0.0.0	south	5-6
# ::node	0.1.0.0.1	korea	5-6
# ::node	0.1.1	intervene-01	
# ::node	0.1.1.0	evacuate-01	8-9
# ::node	0.1.1.0.0	person	3-4
# ::node	0.1.1.0.0.0	foreign	3-4
# ::root	0	war-01
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	evacuate-01	ARG1	person	0.1.1.0	0.1.1.0.0
# ::edge	intervene-01	ARG1	evacuate-01	0.1.1	0.1.1.0
# ::edge	name	op1	north	0.0.0	0.0.0.0
# ::edge	name	op1	south	0.1.0.0	0.1.0.0.0
# ::edge	name	op2	korea	0.0.0	0.0.0.1
# ::edge	name	op2	korea	0.1.0.0	0.1.0.0.1
# ::edge	person	ARG0-of	country	0.1	0.1.0
# ::edge	person	ARG0-of	intervene-01	0.1	0.1.1
# ::edge	person	mod	foreign	0.1.1.0.0	0.1.1.0.0.0
# ::edge	war-01	ARG1	country	0	0.0
# ::edge	war-01	ARG1	person	0	0.1
(MRPNode-0 / war-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 north :op2 korea)) :ARG1 (MRPNode-3 / person :ARG0-of (MRPNode-4 / country :name (MRPNode-5 / name :op1 south :op2 korea)) :ARG0-of (MRPNode-6 / intervene-01 :ARG1 (MRPNode-7 / evacuate-01 :ARG1 (MRPNode-8 / person :mod (MRPNode-9 / foreign))))))

# ::id 450
# ::snt Israel confirms strike on Syria targeted weapons
# ::tok Israel confirms strike on Syria targeted weapons
# ::alignments 0-1|0.0.2+0.0.2.0+0.0.2.0.0 1-2|0 2-3|0.0 4-5|0.0.0+0.0.0.0+0.0.0.0.0 5-6|0.0.1 6-7|0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.333263 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	confirm-01	1-2
# ::node	0.0	strike-01	2-3
# ::node	0.0.0	country	4-5
# ::node	0.0.0.0	name	4-5
# ::node	0.0.0.0.0	syria	4-5
# ::node	0.0.1	target-01	5-6
# ::node	0.0.1.0	weapon	6-7
# ::node	0.0.2	country	0-1
# ::node	0.0.2.0	name	0-1
# ::node	0.0.2.0.0	israel	0-1
# ::root	0	confirm-01
# ::edge	confirm-01	ARG0	country	0	0.0.2
# ::edge	confirm-01	ARG1	strike-01	0	0.0
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.0.2	0.0.2.0
# ::edge	name	op1	israel	0.0.2.0	0.0.2.0.0
# ::edge	name	op1	syria	0.0.0.0	0.0.0.0.0
# ::edge	strike-01	ARG0	country	0.0	0.0.2
# ::edge	strike-01	ARG1	country	0.0	0.0.0
# ::edge	strike-01	ARG2	target-01	0.0	0.0.1
# ::edge	target-01	ARG1	weapon	0.0.1	0.0.1.0
(MRPNode-0 / confirm-01 :ARG1 (MRPNode-1 / strike-01 :ARG1 (MRPNode-2 / country :name (MRPNode-3 / name :op1 syria)) :ARG2 (MRPNode-4 / target-01 :ARG1 (MRPNode-5 / weapon)) :ARG0 (MRPNode-6 / country :name (MRPNode-7 / name :op1 israel))) :ARG0 MRPNode-6)

# ::id 451
# ::snt Death toll in Syria now tops 100,000
# ::tok Death toll in Syria now tops 100,000
# ::alignments 0-1|0.1.0 1-2|0.1 3-4|0.1.1+0.1.1.0+0.1.1.0.0 4-5|0.2 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.337978 ::parser eager_oracle ::smatch 0.962962962962963 ::n_actions 24
# ::node	0	top-01	5-6
# ::node	0.0	100000	
# ::node	0.1	toll	1-2
# ::node	0.1.0	die-01	0-1
# ::node	0.1.1	country	3-4
# ::node	0.1.1.0	name	3-4
# ::node	0.1.1.0.0	syria	3-4
# ::node	0.2	now	4-5
# ::root	0	top-01
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	name	op1	syria	0.1.1.0	0.1.1.0.0
# ::edge	toll	location	country	0.1	0.1.1
# ::edge	toll	mod	die-01	0.1	0.1.0
# ::edge	top-01	ARG1	toll	0	0.1
# ::edge	top-01	arg2	100000	0	0.0
# ::edge	top-01	time	now	0	0.2
(MRPNode-0 / top-01 :arg2 100000 :ARG1 (MRPNode-1 / toll :mod (MRPNode-2 / die-01) :location (MRPNode-3 / country :name (MRPNode-4 / name :op1 syria))) :time (MRPNode-5 / now))

# ::id 452
# ::snt Iran Nuclear Talks Enter Third Day
# ::tok Iran Nuclear Talks Enter Third Day
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 1-2|0.1.0 2-3|0.1 3-4|0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.343146 ::parser eager_oracle ::smatch 0.896551724137931 ::n_actions 24
# ::node	0	enter-01	3-4
# ::node	0.0	day	5-6
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	iran	0-1
# ::node	0.0.1	ordinal-entity	
# ::node	0.0.1.0	3	
# ::node	0.1	talk-01	2-3
# ::node	0.1.0	nucleus	1-2
# ::root	0	enter-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	day	ord	country	0.0	0.0.0
# ::edge	day	ord	ordinal-entity	0.0	0.0.1
# ::edge	enter-01	ARG0	talk-01	0	0.1
# ::edge	enter-01	ARG1	day	0	0.0
# ::edge	name	op1	iran	0.0.0.0	0.0.0.0.0
# ::edge	ordinal-entity	value	3	0.0.1	0.0.1.0
# ::edge	talk-01	mod	nucleus	0.1	0.1.0
(MRPNode-0 / enter-01 :ARG1 (MRPNode-1 / day :ord (MRPNode-2 / country :name (MRPNode-3 / name :op1 iran)) :ord (MRPNode-4 / ordinal-entity :value 3)) :ARG0 (MRPNode-5 / talk-01 :mod (MRPNode-6 / nucleus)))

# ::id 453
# ::snt Jurors find Jodi Arias eligible for death penalty
# ::tok Jurors find Jodi Arias eligible for death penalty
# ::alignments 0-1|0.1 1-2|0 4-5|0.0 5-6|0.0.1 6-7|0.0.0.1.0 7-8|0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.350286 ::parser eager_oracle ::smatch 0.7499999999999999 ::n_actions 28
# ::node	0	find-02	1-2
# ::node	0.0	qualify-02	4-5
# ::node	0.0.0	person	2-4
# ::node	0.0.0.0	name	2-4
# ::node	0.0.0.0.0	jodi	2-4
# ::node	0.0.0.0.1	arias	2-4
# ::node	0.0.0.1	penalize-01	7-8
# ::node	0.0.0.1.0	die-01	6-7
# ::node	0.0.1	cause-01	5-6
# ::node	0.1	juror	0-1
# ::root	0	find-02
# ::edge	cause-01	ARG0	penalize-01	0.0.1	0.0.0.1
# ::edge	cause-01	ARG1	person	0.0.1	0.0.0
# ::edge	find-02	ARG0	juror	0	0.1
# ::edge	find-02	ARG1	qualify-02	0	0.0
# ::edge	name	op1	jodi	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	arias	0.0.0.0	0.0.0.0.1
# ::edge	penalize-01	manner	die-01	0.0.0.1	0.0.0.1.0
# ::edge	person	ARG1-of	name	0.0.0	0.0.0.0
# ::edge	person	ARG1-of	penalize-01	0.0.0	0.0.0.1
# ::edge	qualify-02	ARG1	person	0.0	0.0.0
# ::edge	qualify-02	ARG2	cause-01	0.0	0.0.1
(MRPNode-0 / find-02 :ARG1 (MRPNode-1 / qualify-02 :ARG1 (MRPNode-2 / person :ARG1-of (MRPNode-3 / name :op1 jodi :op2 arias) :ARG1-of (MRPNode-4 / penalize-01 :manner (MRPNode-5 / die-01))) :ARG2 (MRPNode-6 / cause-01 :ARG1 MRPNode-2 :ARG0 MRPNode-4)) :ARG0 (MRPNode-7 / juror))

# ::id 454
# ::snt Over 100 dead as typhoon slams central Philippines
# ::tok Over 100 dead as typhoon slams central Philippines
# ::alignments 0-1|0.2.0+0.2.0.0 1-2|0.2.0.0.0 4-5|0.1 5-6|0 6-7|0.0.1 7-8|0.0+0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.356304 ::parser eager_oracle ::smatch 0.8823529411764706 ::n_actions 31
# ::node	0	slam-02	5-6
# ::node	0.0	country	7-8
# ::node	0.0.0	name	7-8
# ::node	0.0.0.0	philippines	7-8
# ::node	0.0.1	center	6-7
# ::node	0.1	typhoon	4-5
# ::node	0.2	die-01	
# ::node	0.2.0	person	0-1
# ::node	0.2.0.0	over	0-1
# ::node	0.2.0.0.0	100	1-2
# ::root	0	slam-02
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	part	center	0.0	0.0.1
# ::edge	die-01	ARG1	person	0.2	0.2.0
# ::edge	name	op1	philippines	0.0.0	0.0.0.0
# ::edge	over	op1	100	0.2.0.0	0.2.0.0.0
# ::edge	person	quant	over	0.2.0	0.2.0.0
# ::edge	slam-02	ARG0	typhoon	0	0.1
# ::edge	slam-02	ARG1	country	0	0.0
# ::edge	slam-02	ARG1	die-01	0	0.2
(MRPNode-0 / slam-02 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 philippines) :part (MRPNode-3 / center)) :ARG0 (MRPNode-4 / typhoon) :ARG1 (MRPNode-5 / die-01 :ARG1 (MRPNode-6 / person :quant (MRPNode-7 / over :op1 100))))

# ::id 455
# ::snt US Supreme Court limits president's recess appointments power
# ::tok US Supreme Court limits president 's recess appointments power
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-3|0.1+0.1.1+0.1.1.0+0.1.1.1 3-4|0 4-5|0.0.0+0.0.0.0+0.0.0.0.0 6-7|0.0.1 8-9|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.365674 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	limit-01	3-4
# ::node	0.0	power-01	8-9
# ::node	0.0.0	person	4-5
# ::node	0.0.0.0	have-org-role-91	4-5
# ::node	0.0.0.0.0	president	4-5
# ::node	0.0.1	recess	6-7
# ::node	0.1	government-organization	1-3
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	us	0-1
# ::node	0.1.1	name	1-3
# ::node	0.1.1.0	supreme	1-3
# ::node	0.1.1.1	court	1-3
# ::root	0	limit-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	government-organization	mod	country	0.1	0.1.0
# ::edge	government-organization	name	name	0.1	0.1.1
# ::edge	have-org-role-91	ARG2	president	0.0.0.0	0.0.0.0.0
# ::edge	limit-01	ARG0	government-organization	0	0.1
# ::edge	limit-01	ARG1	power-01	0	0.0
# ::edge	name	op1	supreme	0.1.1	0.1.1.0
# ::edge	name	op1	us	0.1.0.0	0.1.0.0.0
# ::edge	name	op2	court	0.1.1	0.1.1.1
# ::edge	person	ARG0-of	have-org-role-91	0.0.0	0.0.0.0
# ::edge	power-01	ARG1	person	0.0	0.0.0
# ::edge	power-01	ARG2	recess	0.0	0.0.1
(MRPNode-0 / limit-01 :ARG1 (MRPNode-1 / power-01 :ARG1 (MRPNode-2 / person :ARG0-of (MRPNode-3 / have-org-role-91 :ARG2 (MRPNode-4 / president))) :ARG2 (MRPNode-5 / recess)) :ARG0 (MRPNode-6 / government-organization :mod (MRPNode-7 / country :name (MRPNode-8 / name :op1 us)) :name (MRPNode-9 / name :op1 supreme :op2 court)))

# ::id 456
# ::snt What makes India vote? Jaipur Lit Fest debates
# ::tok What makes India vote ? Jaipur Lit Fest debates
# ::alignments 0-1|0.0 1-2|0.0.0 2-3|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 3-4|0.0.0.0 5-8|0.1+0.1.0+0.1.0.0+0.1.0.1 8-9|0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.372822 ::parser eager_oracle ::smatch 0.9230769230769231 ::n_actions 29
# ::node	0	debate-01	8-9
# ::node	0.0	amr-unknown	0-1
# ::node	0.0.0	make-02	1-2
# ::node	0.0.0.0	vote-01	3-4
# ::node	0.0.0.0.0	country	2-3
# ::node	0.0.0.0.0.0	name	2-3
# ::node	0.0.0.0.0.0.0	india	2-3
# ::node	0.1	team	5-8
# ::node	0.1.0	name	5-8
# ::node	0.1.0.0	jaipur	5-8
# ::node	0.1.0.1	fest	5-8
# ::root	0	debate-01
# ::edge	amr-unknown	ARG0-of	make-02	0.0	0.0.0
# ::edge	country	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	debate-01	ARG0	amr-unknown	0	0.0
# ::edge	debate-01	ARG0	team	0	0.1
# ::edge	make-02	ARG1	vote-01	0.0.0	0.0.0.0
# ::edge	name	op1	india	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op1	jaipur	0.1.0	0.1.0.0
# ::edge	name	op2	fest	0.1.0	0.1.0.1
# ::edge	team	name	name	0.1	0.1.0
# ::edge	vote-01	ARG0	country	0.0.0.0	0.0.0.0.0
(MRPNode-0 / debate-01 :ARG0 (MRPNode-1 / amr-unknown :ARG0-of (MRPNode-2 / make-02 :ARG1 (MRPNode-3 / vote-01 :ARG0 (MRPNode-4 / country :name (MRPNode-5 / name :op1 india))))) :ARG0 (MRPNode-6 / team :name (MRPNode-7 / name :op1 jaipur :op2 fest)))

# ::id 457
# ::snt Hamas Urges Hizbullah to Pull Fighters Out of Syria
# ::tok Hamas Urges Hizbullah to Pull Fighters Out of Syria
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 2-3|0.1+0.1.0+0.1.0.0 4-5|0.2 5-6|0.2.0.1 8-9|0.2.0+0.2.0.0+0.2.0.0.0+0.2.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.382609 ::parser eager_oracle ::smatch 0.9583333333333334 ::n_actions 34
# ::node	0	urge-01	1-2
# ::node	0.0	organization	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	hamas	0-1
# ::node	0.1	person	2-3
# ::node	0.1.0	name	2-3
# ::node	0.1.0.0	hizbullah	2-3
# ::node	0.2	pull-out-02	4-5
# ::node	0.2.0	person	8-9
# ::node	0.2.0.0	country	8-9
# ::node	0.2.0.0.0	name	8-9
# ::node	0.2.0.0.0.0	syria	8-9
# ::node	0.2.0.1	fight-01	5-6
# ::root	0	urge-01
# ::edge	country	name	name	0.2.0.0	0.2.0.0.0
# ::edge	name	op1	hamas	0.0.0	0.0.0.0
# ::edge	name	op1	hizbullah	0.1.0	0.1.0.0
# ::edge	name	op1	syria	0.2.0.0.0	0.2.0.0.0.0
# ::edge	organization	name	name	0.0	0.0.0
# ::edge	person	ARG0-of	country	0.2.0	0.2.0.0
# ::edge	person	ARG0-of	fight-01	0.2.0	0.2.0.1
# ::edge	person	ARG0-of	name	0.1	0.1.0
# ::edge	pull-out-02	ARG0	person	0.2	0.1
# ::edge	pull-out-02	ARG1	person	0.2	0.2.0
# ::edge	urge-01	ARG0	person	0	0.1
# ::edge	urge-01	ARG1	organization	0	0.0
# ::edge	urge-01	ARG2	pull-out-02	0	0.2
(MRPNode-0 / urge-01 :ARG1 (MRPNode-1 / organization :name (MRPNode-2 / name :op1 hamas)) :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / name :op1 hizbullah)) :ARG2 (MRPNode-5 / pull-out-02 :ARG0 MRPNode-3 :ARG1 (MRPNode-6 / person :ARG0-of (MRPNode-7 / country :name (MRPNode-8 / name :op1 syria)) :ARG0-of (MRPNode-9 / fight-01))))

# ::id 458
# ::snt Stocks edge lower following retail earnings
# ::tok Stocks edge lower following retail earnings
# ::alignments 0-1|0.0.0.1 2-3|0.0 3-4|0.1 4-5|0.1.0.0 5-6|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.387029 ::parser eager_oracle ::smatch 0.48 ::n_actions 21
# ::node	0	verge-01	
# ::node	0.0	low-04	2-3
# ::node	0.0.0	have-degree-91	
# ::node	0.0.0.0	more	
# ::node	0.0.0.1	stock	0-1
# ::node	0.1	follow-01	3-4
# ::node	0.1.0	earn-01	5-6
# ::node	0.1.0.0	retail-01	4-5
# ::root	0	verge-01
# ::edge	earn-01	mod	retail-01	0.1.0	0.1.0.0
# ::edge	follow-01	ARG2	earn-01	0.1	0.1.0
# ::edge	have-degree-91	ARG1	stock	0.0.0	0.0.0.1
# ::edge	have-degree-91	ARG3	more	0.0.0	0.0.0.0
# ::edge	low-04	ARG2-of	have-degree-91	0.0	0.0.0
# ::edge	verge-01	ARG1	low-04	0	0.0
# ::edge	verge-01	ARG1	stock	0	0.0.0.1
# ::edge	verge-01	ARG1-of	follow-01	0	0.1
(MRPNode-0 / verge-01 :ARG1 (MRPNode-1 / low-04 :ARG2-of (MRPNode-2 / have-degree-91 :ARG3 (MRPNode-3 / more) :ARG1 (MRPNode-4 / stock))) :ARG1 MRPNode-4 :ARG1-of (MRPNode-5 / follow-01 :ARG2 (MRPNode-6 / earn-01 :mod (MRPNode-7 / retail-01))))

# ::id 459
# ::snt Mt Gox reveals 200,000 'forgotten' bitcoin haul
# ::tok Mt Gox reveals 200,000 ' forgotten ' bitcoin haul
# ::alignments 0-2|0.1+0.1.0+0.1.0.0+0.1.0.1 2-3|0 5-6|0.0.1 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.391355 ::parser eager_oracle ::smatch 0.9600000000000001 ::n_actions 23
# ::node	0	reveal-01	2-3
# ::node	0.0	bitcoin	7-8
# ::node	0.0.0	200000	
# ::node	0.0.1	forget-01	5-6
# ::node	0.1	person	0-2
# ::node	0.1.0	name	0-2
# ::node	0.1.0.0	mt	0-2
# ::node	0.1.0.1	gox	0-2
# ::root	0	reveal-01
# ::edge	bitcoin	ARG1-of	forget-01	0.0	0.0.1
# ::edge	bitcoin	quant	200000	0.0	0.0.0
# ::edge	name	op1	mt	0.1.0	0.1.0.0
# ::edge	name	op2	gox	0.1.0	0.1.0.1
# ::edge	person	name	name	0.1	0.1.0
# ::edge	reveal-01	ARG0	person	0	0.1
# ::edge	reveal-01	ARG1	bitcoin	0	0.0
(MRPNode-0 / reveal-01 :ARG1 (MRPNode-1 / bitcoin :quant 200000 :ARG1-of (MRPNode-2 / forget-01)) :ARG0 (MRPNode-3 / person :name (MRPNode-4 / name :op1 mt :op2 gox)))

# ::id 460
# ::snt Chinese lunar rover lands on moon
# ::tok Chinese lunar rover lands on moon
# ::alignments 1-2|0.0.1 2-3|0.0 3-4|0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.396987 ::parser eager_oracle ::smatch 0.761904761904762 ::n_actions 20
# ::node	0	land-01	3-4
# ::node	0.0	rover	2-3
# ::node	0.0.0	country	
# ::node	0.0.1	moon	1-2
# ::node	0.0.2	name	0-1
# ::node	0.0.2.0	china	0-1
# ::node	0.1	moon	5-6
# ::root	0	land-01
# ::edge	land-01	ARG1	rover	0	0.0
# ::edge	land-01	location	moon	0	0.1
# ::edge	name	op1	china	0.0.2	0.0.2.0
# ::edge	rover	mod	country	0.0	0.0.0
# ::edge	rover	mod	moon	0.0	0.0.1
# ::edge	rover	mod	name	0.0	0.0.2
(MRPNode-0 / land-01 :ARG1 (MRPNode-1 / rover :mod (MRPNode-2 / country) :mod (MRPNode-3 / moon) :mod (MRPNode-4 / name :op1 china)) :location (MRPNode-5 / moon))

# ::id 461
# ::snt Spain approves new restrictive abortion law
# ::tok Spain approves new restrictive abortion law
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.1 3-4|0.0.0 4-5|0.0.2 5-6|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.400887 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	approve-01	1-2
# ::node	0.0	law	5-6
# ::node	0.0.0	restrictive	3-4
# ::node	0.0.1	new-01	2-3
# ::node	0.0.2	abort-01	4-5
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	spain	0-1
# ::root	0	approve-01
# ::edge	approve-01	ARG0	country	0	0.1
# ::edge	approve-01	ARG1	law	0	0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	law	ARG1-of	new-01	0.0	0.0.1
# ::edge	law	mod	restrictive	0.0	0.0.0
# ::edge	law	topic	abort-01	0.0	0.0.2
# ::edge	name	op1	spain	0.1.0	0.1.0.0
(MRPNode-0 / approve-01 :ARG1 (MRPNode-1 / law :mod (MRPNode-2 / restrictive) :ARG1-of (MRPNode-3 / new-01) :topic (MRPNode-4 / abort-01)) :ARG0 (MRPNode-5 / country :name (MRPNode-6 / name :op1 spain)))

# ::id 462
# ::snt German ambassador's Athens residence shot at
# ::tok German ambassador 's Athens residence shot at
# ::alignments 0-1|0.0.0.0.0.0+0.0.0.0.0.0.0+0.0.0.0.0.0.0.0 1-2|0.0.0+0.0.0.0+0.0.0.0.0 3-4|0.0.1+0.0.1.0+0.0.1.0.0 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.407139 ::parser eager_oracle ::smatch 0.9500000000000001 ::n_actions 33
# ::node	0	shoot-02	5-6
# ::node	0.0	reside-01	4-5
# ::node	0.0.0	person	1-2
# ::node	0.0.0.0	have-org-role-91	1-2
# ::node	0.0.0.0.0	ambassador	1-2
# ::node	0.0.0.0.0.0	country	0-1
# ::node	0.0.0.0.0.0.0	name	0-1
# ::node	0.0.0.0.0.0.0.0	germany	0-1
# ::node	0.0.1	city	3-4
# ::node	0.0.1.0	name	3-4
# ::node	0.0.1.0.0	athens	3-4
# ::root	0	shoot-02
# ::edge	ambassador	mod	country	0.0.0.0.0	0.0.0.0.0.0
# ::edge	city	name	name	0.0.1	0.0.1.0
# ::edge	country	name	name	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	have-org-role-91	ARG1	ambassador	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	athens	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	germany	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0.0	0.0.0.0
# ::edge	reside-01	ARG0	person	0.0	0.0.0
# ::edge	reside-01	location	city	0.0	0.0.1
# ::edge	shoot-02	ARG1	reside-01	0	0.0
(MRPNode-0 / shoot-02 :ARG1 (MRPNode-1 / reside-01 :ARG0 (MRPNode-2 / person :ARG0-of (MRPNode-3 / have-org-role-91 :ARG1 (MRPNode-4 / ambassador :mod (MRPNode-5 / country :name (MRPNode-6 / name :op1 germany))))) :location (MRPNode-7 / city :name (MRPNode-8 / name :op1 athens))))

# ::id 463
# ::snt Napolitano elected for second term as Italy president
# ::tok Napolitano elected for second term as Italy president
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 4-5|0.1 6-7|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 7-8|0.0.1+0.0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.413674 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 30
# ::node	0	elect-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	napolitano	0-1
# ::node	0.0.1	have-org-role-91	7-8
# ::node	0.0.1.0	country	6-7
# ::node	0.0.1.0.0	name	6-7
# ::node	0.0.1.0.0.0	italy	6-7
# ::node	0.0.1.1	president	7-8
# ::node	0.1	term	4-5
# ::node	0.1.0	ordinal-entity	
# ::node	0.1.0.0	2	
# ::root	0	elect-01
# ::edge	country	name	name	0.0.1.0	0.0.1.0.0
# ::edge	elect-01	ARG1	person	0	0.0
# ::edge	elect-01	ARG2	term	0	0.1
# ::edge	have-org-role-91	ARG1	country	0.0.1	0.0.1.0
# ::edge	have-org-role-91	ARG2	president	0.0.1	0.0.1.1
# ::edge	name	op1	italy	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	napolitano	0.0.0	0.0.0.0
# ::edge	ordinal-entity	value	2	0.1.0	0.1.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.1
# ::edge	person	name	name	0.0	0.0.0
# ::edge	term	ord	ordinal-entity	0.1	0.1.0
(MRPNode-0 / elect-01 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 napolitano) :ARG0-of (MRPNode-3 / have-org-role-91 :ARG1 (MRPNode-4 / country :name (MRPNode-5 / name :op1 italy)) :ARG2 (MRPNode-6 / president))) :ARG2 (MRPNode-7 / term :ord (MRPNode-8 / ordinal-entity :value 2)))

# ::id 464
# ::snt North Korea says to put US citizen on trial
# ::tok North Korea says to put US citizen on trial
# ::alignments 0-2|0.0.1+0.0.1.0+0.0.1.0.0+0.0.1.0.1 2-3|0 4-5|0.0 5-6|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 6-7|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.420556 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 28
# ::node	0	say-01	2-3
# ::node	0.0	put-01	4-5
# ::node	0.0.0	try-02	
# ::node	0.0.0.0	citizen	6-7
# ::node	0.0.0.0.0	country	5-6
# ::node	0.0.0.0.0.0	name	5-6
# ::node	0.0.0.0.0.0.0	us	5-6
# ::node	0.0.1	country	0-2
# ::node	0.0.1.0	name	0-2
# ::node	0.0.1.0.0	north	0-2
# ::node	0.0.1.0.1	korea	0-2
# ::root	0	say-01
# ::edge	citizen	mod	country	0.0.0.0	0.0.0.0.0
# ::edge	country	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	name	op1	north	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	us	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op2	korea	0.0.1.0	0.0.1.0.1
# ::edge	put-01	ARG0	country	0.0	0.0.1
# ::edge	put-01	ARG1	citizen	0.0	0.0.0.0
# ::edge	put-01	ARG1	try-02	0.0	0.0.0
# ::edge	say-01	ARG0	country	0	0.0.1
# ::edge	say-01	ARG1	put-01	0	0.0
# ::edge	try-02	ARG1	citizen	0.0.0	0.0.0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / put-01 :ARG1 (MRPNode-2 / try-02 :ARG1 (MRPNode-3 / citizen :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 us)))) :ARG1 MRPNode-3 :ARG0 (MRPNode-6 / country :name (MRPNode-7 / name :op1 north :op2 korea))) :ARG0 MRPNode-6)

# ::id 465
# ::snt Mandela spends third day in hospital
# ::tok Mandela spends third day in hospital
# ::alignments 1-2|0 2-3|0.0.0+0.0.0.0 3-4|0.0 4-5|0.2 5-6|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.424334 ::parser eager_oracle ::smatch 0.7857142857142858 ::n_actions 27
# ::node	0	spend-02	1-2
# ::node	0.0	day	3-4
# ::node	0.0.0	ordinal-entity	2-3
# ::node	0.0.0.0	3	2-3
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	mandela	0-1
# ::node	0.2	be-located-at-91	4-5
# ::node	0.2.0	hospital	5-6
# ::root	0	spend-02
# ::edge	be-located-at-91	ARG1	person	0.2	0.1
# ::edge	be-located-at-91	ARG2	hospital	0.2	0.2.0
# ::edge	day	ord	ordinal-entity	0.0	0.0.0
# ::edge	name	op1	mandela	0.1.0	0.1.0.0
# ::edge	ordinal-entity	value	3	0.0.0	0.0.0.0
# ::edge	person	name	name	0.1	0.1.0
# ::edge	spend-02	ARG0	person	0	0.1
# ::edge	spend-02	ARG1	day	0	0.0
# ::edge	spend-02	ARG2	be-located-at-91	0	0.2
(MRPNode-0 / spend-02 :ARG1 (MRPNode-1 / day :ord (MRPNode-2 / ordinal-entity :value 3)) :ARG0 (MRPNode-3 / person :name (MRPNode-4 / name :op1 mandela)) :ARG2 (MRPNode-5 / be-located-at-91 :ARG1 MRPNode-3 :ARG2 (MRPNode-6 / hospital)))

# ::id 466
# ::snt Murray ends 77-year wait for British win
# ::tok Murray ends 77 - year wait for British win
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 4-5|0.0.1.1 5-6|0.0 7-8|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.430485 ::parser eager_oracle ::smatch 0.8108108108108109 ::n_actions 28
# ::node	0	end-01	1-2
# ::node	0.0	wait-01	5-6
# ::node	0.0.0	win-01	8-9
# ::node	0.0.0.0	country	7-8
# ::node	0.0.0.0.0	name	7-8
# ::node	0.0.0.0.0.0	britain	7-8
# ::node	0.0.1	temporal-quantity	
# ::node	0.0.1.0	15	
# ::node	0.0.1.1	year	4-5
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	murray	0-1
# ::root	0	end-01
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	end-01	ARG0	person	0	0.1
# ::edge	end-01	ARG1	wait-01	0	0.0
# ::edge	name	op1	britain	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	murray	0.1.0	0.1.0.0
# ::edge	person	name	name	0.1	0.1.0
# ::edge	temporal-quantity	quant	15	0.0.1	0.0.1.0
# ::edge	temporal-quantity	quant	year	0.0.1	0.0.1.1
# ::edge	wait-01	ARG2	win-01	0.0	0.0.0
# ::edge	wait-01	duration	temporal-quantity	0.0	0.0.1
# ::edge	win-01	ARG0	country	0.0.0	0.0.0.0
(MRPNode-0 / end-01 :ARG1 (MRPNode-1 / wait-01 :ARG2 (MRPNode-2 / win-01 :ARG0 (MRPNode-3 / country :name (MRPNode-4 / name :op1 britain))) :duration (MRPNode-5 / temporal-quantity :quant 15 :quant (MRPNode-6 / year))) :ARG0 (MRPNode-7 / person :name (MRPNode-8 / name :op1 murray)))

# ::id 467
# ::snt Pope calls for action on climate change in draft encyclical
# ::tok Pope calls for action on climate change in draft encyclical
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 5-6|0.0.0.0 6-7|0.0.0 8-9|0.2.0 9-10|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:46.436969 ::parser eager_oracle ::smatch 0.8749999999999999 ::n_actions 29
# ::node	0	call-03	1-2
# ::node	0.0	act-02	
# ::node	0.0.0	change-01	6-7
# ::node	0.0.0.0	climate	5-6
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	pope	0-1
# ::node	0.2	encyclical	9-10
# ::node	0.2.0	draft-01	8-9
# ::root	0	call-03
# ::edge	act-02	ARG1	change-01	0.0	0.0.0
# ::edge	call-03	ARG0	person	0	0.1
# ::edge	call-03	ARG1	act-02	0	0.0
# ::edge	call-03	location	encyclical	0	0.2
# ::edge	change-01	ARG1	climate	0.0.0	0.0.0.0
# ::edge	encyclical	ARG1-of	draft-01	0.2	0.2.0
# ::edge	name	op1	pope	0.1.0	0.1.0.0
# ::edge	person	name	name	0.1	0.1.0
(MRPNode-0 / call-03 :ARG1 (MRPNode-1 / act-02 :ARG1 (MRPNode-2 / change-01 :ARG1 (MRPNode-3 / climate))) :ARG0 (MRPNode-4 / person :name (MRPNode-5 / name :op1 pope)) :location (MRPNode-6 / encyclical :ARG1-of (MRPNode-7 / draft-01)))

# ::id 468
# ::snt Who Is Jihadi John?
# ::tok Who Is Jihadi John ?
# ::alignments 0-1|0.1 2-4|0+0.0+0.0.0+0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.438809 ::parser eager_oracle ::smatch 1.0 ::n_actions 13
# ::node	0	person	2-4
# ::node	0.0	name	2-4
# ::node	0.0.0	jihadi	2-4
# ::node	0.0.1	john	2-4
# ::node	0.1	amr-unknown	0-1
# ::root	0	person
# ::edge	name	op1	jihadi	0.0	0.0.0
# ::edge	name	op2	john	0.0	0.0.1
# ::edge	person	domain	amr-unknown	0	0.1
# ::edge	person	name	name	0	0.0
(MRPNode-0 / person :name (MRPNode-1 / name :op1 jihadi :op2 john) :domain (MRPNode-2 / amr-unknown))

# ::id 469
# ::snt Iran, IAEA Officials Meet Ahead of March Nuclear Deadline
# ::tok Iran , IAEA Officials Meet Ahead of March Nuclear Deadline
# ::alignments 0-1|0.2+0.2.0+0.2.0.0 2-3|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 3-4|0.0+0.0.0+0.0.0.1 4-5|0 5-6|0.1 7-8|0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.468688 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	meet-03	4-5
# ::node	0.0	person	3-4
# ::node	0.0.0	have-org-role-91	3-4
# ::node	0.0.0.0	organization	2-3
# ::node	0.0.0.0.0	name	2-3
# ::node	0.0.0.0.0.0	iaea	2-3
# ::node	0.0.0.1	official	3-4
# ::node	0.1	ahead	5-6
# ::node	0.1.0	date-entity	7-8
# ::node	0.1.0.0	3	7-8
# ::node	0.2	country	0-1
# ::node	0.2.0	name	0-1
# ::node	0.2.0.0	iran	0-1
# ::root	0	meet-03
# ::edge	ahead	op1	date-entity	0.1	0.1.0
# ::edge	country	name	name	0.2	0.2.0
# ::edge	date-entity	month	3	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG1	organization	0.0.0	0.0.0.0
# ::edge	have-org-role-91	ARG2	official	0.0.0	0.0.0.1
# ::edge	meet-03	ARG0	country	0	0.2
# ::edge	meet-03	ARG1	person	0	0.0
# ::edge	meet-03	time	ahead	0	0.1
# ::edge	name	op1	iaea	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	iran	0.2.0	0.2.0.0
# ::edge	organization	name	name	0.0.0.0	0.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.0
(MRPNode-0 / meet-03 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-org-role-91 :ARG1 (MRPNode-3 / organization :name (MRPNode-4 / name :op1 iaea)) :ARG2 (MRPNode-5 / official))) :time (MRPNode-6 / ahead :op1 (MRPNode-7 / date-entity :month 3)) :ARG0 (MRPNode-8 / country :name (MRPNode-9 / name :op1 iran)))

# ::id 470
# ::snt U.S., EU Widen Sanctions On Russia
# ::tok U.S. , EU Widen Sanctions On Russia
# ::alignments 0-1|0.3+0.3.0 2-3|0.1+0.1.0+0.1.0.0 4-5|0 6-7|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.473832 ::parser eager_oracle ::smatch 0.9375 ::n_actions 21
# ::node	0	sanction-02	4-5
# ::node	0.0	country	
# ::node	0.1	organization	2-3
# ::node	0.1.0	name	2-3
# ::node	0.1.0.0	eu	2-3
# ::node	0.2	country	6-7
# ::node	0.2.0	name	6-7
# ::node	0.2.0.0	russia	6-7
# ::node	0.3	name	0-1
# ::node	0.3.0	u.s.	0-1
# ::root	0	sanction-02
# ::edge	country	name	name	0.2	0.2.0
# ::edge	name	op1	eu	0.1.0	0.1.0.0
# ::edge	name	op1	russia	0.2.0	0.2.0.0
# ::edge	name	op1	u.s.	0.3	0.3.0
# ::edge	organization	name	name	0.1	0.1.0
# ::edge	sanction-02	ARG0	organization	0	0.1
# ::edge	sanction-02	ARG1	country	0	0.0
# ::edge	sanction-02	ARG1-of	country	0	0.2
# ::edge	sanction-02	ARG1-of	name	0	0.3
(MRPNode-0 / sanction-02 :ARG1 (MRPNode-1 / country) :ARG0 (MRPNode-2 / organization :name (MRPNode-3 / name :op1 eu)) :ARG1-of (MRPNode-4 / country :name (MRPNode-5 / name :op1 russia)) :ARG1-of (MRPNode-6 / name :op1 u.s.))

# ::id 471
# ::snt US Attorney General Holder resigns
# ::tok US Attorney General Holder resigns
# ::alignments 0-1|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 1-2|0.0.1+0.0.1.1 2-3|0.0.1.1.0 3-4|0.0+0.0.0+0.0.0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.478556 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	resign-01	4-5
# ::node	0.0	person	3-4
# ::node	0.0.0	name	3-4
# ::node	0.0.0.0	holder	3-4
# ::node	0.0.1	have-org-role-91	1-2
# ::node	0.0.1.0	country	0-1
# ::node	0.0.1.0.0	name	0-1
# ::node	0.0.1.0.0.0	us	0-1
# ::node	0.0.1.1	attorney	1-2
# ::node	0.0.1.1.0	general	2-3
# ::root	0	resign-01
# ::edge	attorney	mod	general	0.0.1.1	0.0.1.1.0
# ::edge	country	name	name	0.0.1.0	0.0.1.0.0
# ::edge	have-org-role-91	ARG1	country	0.0.1	0.0.1.0
# ::edge	have-org-role-91	ARG2	attorney	0.0.1	0.0.1.1
# ::edge	name	op1	holder	0.0.0	0.0.0.0
# ::edge	name	op1	us	0.0.1.0.0	0.0.1.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.1
# ::edge	person	name	name	0.0	0.0.0
# ::edge	resign-01	ARG0	person	0	0.0
(MRPNode-0 / resign-01 :ARG0 (MRPNode-1 / person :name (MRPNode-2 / name :op1 holder) :ARG0-of (MRPNode-3 / have-org-role-91 :ARG1 (MRPNode-4 / country :name (MRPNode-5 / name :op1 us)) :ARG2 (MRPNode-6 / attorney :mod (MRPNode-7 / general)))))

# ::id 472
# ::snt AbbVie Sours on $55B Shire Deal After Tax Changes
# ::tok AbbVie Sours on $ 55B Shire Deal After Tax Changes
# ::alignments 0-1|0.0.2+0.0.2.0 6-7|0.0 7-8|0.0.0 8-9|0.0.0.0.0 9-10|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.486218 ::parser eager_oracle ::smatch 0.6451612903225806 ::n_actions 27
# ::node	0	support-01	
# ::node	0.0	deal-01	6-7
# ::node	0.0.0	after	7-8
# ::node	0.0.0.0	change-01	9-10
# ::node	0.0.0.0.0	tax-01	8-9
# ::node	0.0.1	monetary-quantity	
# ::node	0.0.1.0	500000000000	
# ::node	0.0.1.1	dollar	
# ::node	0.0.2	name	0-1
# ::node	0.0.2.0	abbvie	0-1
# ::node	0.1	person	
# ::root	0	support-01
# ::edge	after	op1	change-01	0.0.0	0.0.0.0
# ::edge	change-01	ARG1	tax-01	0.0.0.0	0.0.0.0.0
# ::edge	deal-01	ARG2	monetary-quantity	0.0	0.0.1
# ::edge	deal-01	ARG2	name	0.0	0.0.2
# ::edge	deal-01	time	after	0.0	0.0.0
# ::edge	monetary-quantity	quant	500000000000	0.0.1	0.0.1.0
# ::edge	monetary-quantity	quant	dollar	0.0.1	0.0.1.1
# ::edge	name	op1	abbvie	0.0.2	0.0.2.0
# ::edge	support-01	ARG0	person	0	0.1
# ::edge	support-01	ARG1	deal-01	0	0.0
(MRPNode-0 / support-01 :ARG1 (MRPNode-1 / deal-01 :time (MRPNode-2 / after :op1 (MRPNode-3 / change-01 :ARG1 (MRPNode-4 / tax-01))) :ARG2 (MRPNode-5 / monetary-quantity :quant 500000000000 :quant (MRPNode-6 / dollar)) :ARG2 (MRPNode-7 / name :op1 abbvie)) :ARG0 (MRPNode-8 / person))

# ::id 473
# ::snt Hawaii preps for first hurricane in 22 years
# ::tok Hawaii preps for first hurricane in 22 years
# ::alignments 3-4|0.0.0+0.0.0.0 4-5|0.0 6-7|0.0.0.1.0 7-8|0.0.0.1+0.0.0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.491557 ::parser eager_oracle ::smatch 0.6666666666666667 ::n_actions 31
# ::node	0	report-01	
# ::node	0.0	hurricane	4-5
# ::node	0.0.0	ordinal-entity	3-4
# ::node	0.0.0.0	1	3-4
# ::node	0.0.0.1	temporal-quantity	7-8
# ::node	0.0.0.1.0	22	6-7
# ::node	0.0.0.1.1	year	7-8
# ::node	0.1	state	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	hawaii	0-1
# ::root	0	report-01
# ::edge	hurricane	ord	ordinal-entity	0.0	0.0.0
# ::edge	name	op1	hawaii	0.1.0	0.1.0.0
# ::edge	ordinal-entity	range	temporal-quantity	0.0.0	0.0.0.1
# ::edge	ordinal-entity	value	1	0.0.0	0.0.0.0
# ::edge	report-01	ARG0	state	0	0.1
# ::edge	report-01	ARG1	hurricane	0	0.0
# ::edge	state	name	name	0.1	0.1.0
# ::edge	temporal-quantity	quant	22	0.0.0.1	0.0.0.1.0
# ::edge	temporal-quantity	unit	year	0.0.0.1	0.0.0.1.1
(MRPNode-0 / report-01 :ARG1 (MRPNode-1 / hurricane :ord (MRPNode-2 / ordinal-entity :value 1 :range (MRPNode-3 / temporal-quantity :quant 22 :unit (MRPNode-4 / year)))) :ARG0 (MRPNode-5 / state :name (MRPNode-6 / name :op1 hawaii)))

# ::id 474
# ::snt Oil falls in Asian trade
# ::tok Oil falls in Asian trade
# ::alignments 0-1|0.0 1-2|0 3-4|0.1.0+0.1.0.0+0.1.0.0.0 4-5|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.494567 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 19
# ::node	0	fall-01	1-2
# ::node	0.0	oil	0-1
# ::node	0.1	trade-01	4-5
# ::node	0.1.0	continent	3-4
# ::node	0.1.0.0	name	3-4
# ::node	0.1.0.0.0	asia	3-4
# ::root	0	fall-01
# ::edge	continent	name	name	0.1.0	0.1.0.0
# ::edge	fall-01	ARG1	oil	0	0.0
# ::edge	fall-01	location	trade-01	0	0.1
# ::edge	name	op1	asia	0.1.0.0	0.1.0.0.0
# ::edge	trade-01	location	continent	0.1	0.1.0
(MRPNode-0 / fall-01 :ARG1 (MRPNode-1 / oil) :location (MRPNode-2 / trade-01 :location (MRPNode-3 / continent :name (MRPNode-4 / name :op1 asia))))

# ::id 475
# ::snt Driver backs into stroller with child, drives off
# ::tok Driver backs into stroller with child , drives off
# ::alignments 1-2|0.0 4-5|0 5-6|0.0.0+0.0.0.0+0.0.0.0.0 7-8|0.1+0.1.0+0.1.0.0 8-9|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.506332 ::parser eager_oracle ::smatch 0.9230769230769231 ::n_actions 44
# ::node	0	and	4-5
# ::node	0.0	back-off-11	1-2
# ::node	0.0.0	person	5-6
# ::node	0.0.0.0	have-rel-role-91	5-6
# ::node	0.0.0.0.0	child	5-6
# ::node	0.1	drive-01	7-8
# ::node	0.1.0	person	7-8
# ::node	0.1.0.0	drive-01	7-8
# ::node	0.1.1	off	8-9
# ::root	0	and
# ::edge	and	op1	back-off-11	0	0.0
# ::edge	and	op2	drive-01	0	0.1
# ::edge	back-off-11	ARG1	person	0.0	0.0.0
# ::edge	drive-01	ARG0	person	0.1	0.0.0
# ::edge	drive-01	ARG1	person	0.1	0.1.0
# ::edge	drive-01	direction	off	0.1	0.1.1
# ::edge	have-rel-role-91	ARG2	child	0.0.0.0	0.0.0.0.0
# ::edge	person	ARG0-of	drive-01	0.1.0	0.1.0.0
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0	0.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / back-off-11 :ARG1 (MRPNode-2 / person :ARG0-of (MRPNode-3 / have-rel-role-91 :ARG2 (MRPNode-4 / child)))) :op2 (MRPNode-5 / drive-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-6 / person :ARG0-of (MRPNode-7 / drive-01)) :direction (MRPNode-8 / off)))

# ::id 476
# ::snt Uganda's president signs anti-gay bill
# ::tok Uganda 's president signs anti - gay bill
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 2-3|0.1+0.1.0+0.1.0.1 3-4|0 4-5|0.0.0 6-7|0.0.0.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.513856 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	sign-01	3-4
# ::node	0.0	bill	7-8
# ::node	0.0.0	oppose-01	4-5
# ::node	0.0.0.0	gay-01	6-7
# ::node	0.1	person	2-3
# ::node	0.1.0	have-org-role-91	2-3
# ::node	0.1.0.0	country	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	uganda	0-1
# ::node	0.1.0.1	president	2-3
# ::root	0	sign-01
# ::edge	bill	ARG0-of	oppose-01	0.0	0.0.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	president	0.1.0	0.1.0.1
# ::edge	name	op1	uganda	0.1.0.0.0	0.1.0.0.0.0
# ::edge	oppose-01	ARG1	gay-01	0.0.0	0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	sign-01	ARG0	person	0	0.1
# ::edge	sign-01	ARG1	bill	0	0.0
(MRPNode-0 / sign-01 :ARG1 (MRPNode-1 / bill :ARG0-of (MRPNode-2 / oppose-01 :ARG1 (MRPNode-3 / gay-01))) :ARG0 (MRPNode-4 / person :ARG0-of (MRPNode-5 / have-org-role-91 :ARG1 (MRPNode-6 / country :name (MRPNode-7 / name :op1 uganda)) :ARG2 (MRPNode-8 / president))))

# ::id 477
# ::snt Silvio Berlusconi expelled from Italy's parliament
# ::tok Silvio Berlusconi expelled from Italy 's parliament
# ::alignments 0-2|0.0+0.0.0+0.0.0.0+0.0.0.1 2-3|0 4-5|0.1.0+0.1.0.0+0.1.0.0.0 6-7|0.1+0.1.1+0.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.518689 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	expel-01	2-3
# ::node	0.0	person	0-2
# ::node	0.0.0	name	0-2
# ::node	0.0.0.0	silvio	0-2
# ::node	0.0.0.1	berlusconi	0-2
# ::node	0.1	government-organization	6-7
# ::node	0.1.0	country	4-5
# ::node	0.1.0.0	name	4-5
# ::node	0.1.0.0.0	italy	4-5
# ::node	0.1.1	name	6-7
# ::node	0.1.1.0	parliament	6-7
# ::root	0	expel-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	expel-01	ARG1	person	0	0.0
# ::edge	expel-01	ARG2	government-organization	0	0.1
# ::edge	government-organization	name	name	0.1	0.1.1
# ::edge	government-organization	poss	country	0.1	0.1.0
# ::edge	name	op1	italy	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	parliament	0.1.1	0.1.1.0
# ::edge	name	op1	silvio	0.0.0	0.0.0.0
# ::edge	name	op2	berlusconi	0.0.0	0.0.0.1
# ::edge	person	name	name	0.0	0.0.0
(MRPNode-0 / expel-01 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 silvio :op2 berlusconi)) :ARG2 (MRPNode-3 / government-organization :poss (MRPNode-4 / country :name (MRPNode-5 / name :op1 italy)) :name (MRPNode-6 / name :op1 parliament)))

# ::id 478
# ::snt Hosni Mubarak retrial adjourned until 8 June
# ::tok Hosni Mubarak retrial adjourned until 8 June
# ::alignments 0-2|0.0.0+0.0.0.0+0.0.0.0.0+0.0.0.0.1 4-5|0.1 5-7|0.1.0+0.1.0.0+0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.529361 ::parser eager_oracle ::smatch 0.6428571428571429 ::n_actions 17
# ::node	0	uphold-01	
# ::node	0.0	marry-01	
# ::node	0.0.0	person	0-2
# ::node	0.0.0.0	name	0-2
# ::node	0.0.0.0.0	hosni	0-2
# ::node	0.0.0.0.1	mubarak	0-2
# ::node	0.1	until	4-5
# ::node	0.1.0	date-entity	5-7
# ::node	0.1.0.0	6	5-7
# ::node	0.1.0.1	8	5-7
# ::root	0	uphold-01
# ::edge	date-entity	day	8	0.1.0	0.1.0.1
# ::edge	date-entity	month	6	0.1.0	0.1.0.0
# ::edge	marry-01	ARG1	person	0.0	0.0.0
# ::edge	name	op1	hosni	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	mubarak	0.0.0.0	0.0.0.0.1
# ::edge	person	name	name	0.0.0	0.0.0.0
# ::edge	until	op1	date-entity	0.1	0.1.0
# ::edge	uphold-01	ARG1	marry-01	0	0.0
# ::edge	uphold-01	time	until	0	0.1
(MRPNode-0 / uphold-01 :ARG1 (MRPNode-1 / marry-01 :ARG1 (MRPNode-2 / person :name (MRPNode-3 / name :op1 hosni :op2 mubarak))) :time (MRPNode-4 / until :op1 (MRPNode-5 / date-entity :month 6 :day 8)))

# ::id 479
# ::snt Egypt protesters defy cabinet threat to end sit-ins
# ::tok Egypt protesters defy cabinet threat to end sit - ins
# ::alignments 0-1|0.1.1+0.1.1.0+0.1.1.0.0 1-2|0.1.0 2-3|0 3-4|0.0.1+0.0.1.0+0.0.1.0.0 4-5|0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.537522 ::parser eager_oracle ::smatch 0.7894736842105263 ::n_actions 28
# ::node	0	defy-01	2-3
# ::node	0.0	threaten-01	4-5
# ::node	0.0.0	end-01	6-7
# ::node	0.0.0.0	meet-up-04	
# ::node	0.0.1	government-organization	3-4
# ::node	0.0.1.0	name	3-4
# ::node	0.0.1.0.0	cabinet	3-4
# ::node	0.1	person	
# ::node	0.1.0	protest-01	1-2
# ::node	0.1.1	country	0-1
# ::node	0.1.1.0	name	0-1
# ::node	0.1.1.0.0	egypt	0-1
# ::root	0	defy-01
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	defy-01	ARG0	person	0	0.1
# ::edge	defy-01	ARG1	threaten-01	0	0.0
# ::edge	end-01	ARG1	meet-up-04	0.0.0	0.0.0.0
# ::edge	government-organization	name	name	0.0.1	0.0.1.0
# ::edge	name	op1	cabinet	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	egypt	0.1.1.0	0.1.1.0.0
# ::edge	person	location	country	0.1	0.1.1
# ::edge	person	mod	protest-01	0.1	0.1.0
# ::edge	threaten-01	ARG0	end-01	0.0	0.0.0
# ::edge	threaten-01	ARG0	government-organization	0.0	0.0.1
(MRPNode-0 / defy-01 :ARG1 (MRPNode-1 / threaten-01 :ARG0 (MRPNode-2 / end-01 :ARG1 (MRPNode-3 / meet-up-04)) :ARG0 (MRPNode-4 / government-organization :name (MRPNode-5 / name :op1 cabinet))) :ARG0 (MRPNode-6 / person :mod (MRPNode-7 / protest-01) :location (MRPNode-8 / country :name (MRPNode-9 / name :op1 egypt))))

# ::id 480
# ::snt Qatar's emir hands power to his son
# ::tok Qatar 's emir hands power to his son
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 2-3|0.2+0.2.0+0.2.0.0 3-4|0 4-5|0.0 7-8|0.1+0.1.0+0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.545756 ::parser eager_oracle ::smatch 1.0 ::n_actions 42
# ::node	0	hand-01	3-4
# ::node	0.0	power	4-5
# ::node	0.1	person	7-8
# ::node	0.1.0	have-rel-role-91	7-8
# ::node	0.1.0.0	country	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	qatar	0-1
# ::node	0.1.0.1	son	7-8
# ::node	0.2	person	2-3
# ::node	0.2.0	have-rel-role-91	2-3
# ::node	0.2.0.0	emir	2-3
# ::root	0	hand-01
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	hand-01	ARG0	person	0	0.1
# ::edge	hand-01	ARG1	power	0	0.0
# ::edge	hand-01	ARG2	person	0	0.2
# ::edge	have-rel-role-91	ARG1	country	0.1.0	0.1.0.0
# ::edge	have-rel-role-91	ARG2	emir	0.2.0	0.2.0.0
# ::edge	have-rel-role-91	ARG2	son	0.1.0	0.1.0.1
# ::edge	name	op1	qatar	0.1.0.0.0	0.1.0.0.0.0
# ::edge	person	ARG0-of	have-rel-role-91	0.1	0.1.0
# ::edge	person	ARG0-of	have-rel-role-91	0.2	0.2.0
(MRPNode-0 / hand-01 :ARG1 (MRPNode-1 / power) :ARG0 (MRPNode-2 / person :ARG0-of (MRPNode-3 / have-rel-role-91 :ARG1 (MRPNode-4 / country :name (MRPNode-5 / name :op1 qatar)) :ARG2 (MRPNode-6 / son))) :ARG2 (MRPNode-7 / person :ARG0-of (MRPNode-8 / have-rel-role-91 :ARG2 (MRPNode-9 / emir))))

# ::id 481
# ::snt Egypt braces for 'Friday of anger' after carnage
# ::tok Egypt braces for ' Friday of anger ' after carnage
# ::alignments 0-1|0.0+0.0.1+0.0.1.0 4-5|0.2.0 6-7|0.0.0 8-9|0.1 9-10|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.550784 ::parser eager_oracle ::smatch 0.6428571428571428 ::n_actions 25
# ::node	0	accelerate-01	
# ::node	0.0	country	0-1
# ::node	0.0.0	anger-01	6-7
# ::node	0.0.1	name	0-1
# ::node	0.0.1.0	egypt	0-1
# ::node	0.1	after	8-9
# ::node	0.1.0	carnage	9-10
# ::node	0.2	date-entity	
# ::node	0.2.0	friday	4-5
# ::root	0	accelerate-01
# ::edge	accelerate-01	ARG1	country	0	0.0
# ::edge	accelerate-01	time	after	0	0.1
# ::edge	accelerate-01	time	date-entity	0	0.2
# ::edge	after	op1	carnage	0.1	0.1.0
# ::edge	country	ARG1-of	anger-01	0.0	0.0.0
# ::edge	country	name	name	0.0	0.0.1
# ::edge	date-entity	weekday	friday	0.2	0.2.0
# ::edge	name	op1	egypt	0.0.1	0.0.1.0
(MRPNode-0 / accelerate-01 :ARG1 (MRPNode-1 / country :ARG1-of (MRPNode-2 / anger-01) :name (MRPNode-3 / name :op1 egypt)) :time (MRPNode-4 / after :op1 (MRPNode-5 / carnage)) :time (MRPNode-6 / date-entity :weekday (MRPNode-7 / friday)))

# ::id 482
# ::snt Red Sox Beat Tigers 5-2 to Advance to World Series
# ::tok Red Sox Beat Tigers 5-2 to Advance to World Series
# ::alignments 0-2|0.0+0.0.0+0.0.0.0+0.0.0.1 2-3|0 3-4|0.1+0.1.0+0.1.0.0 6-7|0.3 8-10|0.3.0+0.3.0.0+0.3.0.0.0+0.3.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.560159 ::parser eager_oracle ::smatch 0.9130434782608696 ::n_actions 27
# ::node	0	beat-03	2-3
# ::node	0.0	team	0-2
# ::node	0.0.0	name	0-2
# ::node	0.0.0.0	red	0-2
# ::node	0.0.0.1	sox	0-2
# ::node	0.1	team	3-4
# ::node	0.1.0	name	3-4
# ::node	0.1.0.0	tigers	3-4
# ::node	0.2	between	
# ::node	0.2.0	5	
# ::node	0.2.1	2	
# ::node	0.3	advance-01	6-7
# ::node	0.3.0	game	8-10
# ::node	0.3.0.0	name	8-10
# ::node	0.3.0.0.0	world	8-10
# ::node	0.3.0.0.1	series	8-10
# ::root	0	beat-03
# ::edge	advance-01	ARG4	game	0.3	0.3.0
# ::edge	beat-03	ARG0	team	0	0.1
# ::edge	beat-03	ARG1	team	0	0.0
# ::edge	beat-03	ARG2	advance-01	0	0.3
# ::edge	beat-03	ARG2	between	0	0.2
# ::edge	between	op1	5	0.2	0.2.0
# ::edge	between	op2	2	0.2	0.2.1
# ::edge	game	name	name	0.3.0	0.3.0.0
# ::edge	name	op1	red	0.0.0	0.0.0.0
# ::edge	name	op1	tigers	0.1.0	0.1.0.0
# ::edge	name	op1	world	0.3.0.0	0.3.0.0.0
# ::edge	name	op2	series	0.3.0.0	0.3.0.0.1
# ::edge	name	op2	sox	0.0.0	0.0.0.1
# ::edge	team	name	name	0.0	0.0.0
# ::edge	team	name	name	0.1	0.1.0
(MRPNode-0 / beat-03 :ARG1 (MRPNode-1 / team :name (MRPNode-2 / name :op1 red :op2 sox)) :ARG0 (MRPNode-3 / team :name (MRPNode-4 / name :op1 tigers)) :ARG2 (MRPNode-5 / between :op1 5 :op2 2) :ARG2 (MRPNode-6 / advance-01 :ARG4 (MRPNode-7 / game :name (MRPNode-8 / name :op1 world :op2 series))))

# ::id 483
# ::snt China lands Jade Rabbit robot rover on Moon
# ::tok China lands Jade Rabbit robot rover on Moon
# ::alignments 0-1|0.0.1+0.0.1.0 1-2|0 2-4|0.2.0+0.2.0.0+0.2.0.1 4-5|0.0.0 5-6|0.0 7-8|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:46.565437 ::parser eager_oracle ::smatch 0.9375 ::n_actions 30
# ::node	0	land-01	1-2
# ::node	0.0	rover	5-6
# ::node	0.0.0	robot	4-5
# ::node	0.0.1	name	0-1
# ::node	0.0.1.0	china	0-1
# ::node	0.1	country	
# ::node	0.2	moon	7-8
# ::node	0.2.0	name	2-4
# ::node	0.2.0.0	jade	2-4
# ::node	0.2.0.1	rabbit	2-4
# ::root	0	land-01
# ::edge	land-01	ARG0	country	0	0.1
# ::edge	land-01	ARG1	rover	0	0.0
# ::edge	land-01	location	moon	0	0.2
# ::edge	moon	name	name	0.2	0.2.0
# ::edge	name	op1	china	0.0.1	0.0.1.0
# ::edge	name	op1	jade	0.2.0	0.2.0.0
# ::edge	name	op2	rabbit	0.2.0	0.2.0.1
# ::edge	rover	mod	robot	0.0	0.0.0
# ::edge	rover	name	name	0.0	0.0.1
(MRPNode-0 / land-01 :ARG1 (MRPNode-1 / rover :mod (MRPNode-2 / robot) :name (MRPNode-3 / name :op1 china)) :ARG0 (MRPNode-4 / country) :location (MRPNode-5 / moon :name (MRPNode-6 / name :op1 jade :op2 rabbit)))

# ::id 484
# ::snt Ukrainian parliament dismisses president
# ::tok Ukrainian parliament dismisses president
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1+0.1.1+0.1.1.0 2-3|0 3-4|0.0+0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.569104 ::parser eager_oracle ::smatch 0.9444444444444444 ::n_actions 26
# ::node	0	dismiss-02	2-3
# ::node	0.0	person	3-4
# ::node	0.0.0	have-org-role-91	3-4
# ::node	0.0.0.0	president	3-4
# ::node	0.1	government-organization	1-2
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	ukraine	0-1
# ::node	0.1.1	name	1-2
# ::node	0.1.1.0	parliament	1-2
# ::root	0	dismiss-02
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	dismiss-02	ARG0	government-organization	0	0.1
# ::edge	dismiss-02	ARG1	person	0	0.0
# ::edge	government-organization	mod	country	0.1	0.1.0
# ::edge	government-organization	name	name	0.1	0.1.1
# ::edge	have-org-role-91	ARG2	president	0.0.0	0.0.0.0
# ::edge	name	op1	parliament	0.1.1	0.1.1.0
# ::edge	name	op1	ukraine	0.1.0.0	0.1.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.0
(MRPNode-0 / dismiss-02 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-org-role-91 :ARG2 (MRPNode-3 / president))) :ARG0 (MRPNode-4 / government-organization :mod (MRPNode-5 / country :name (MRPNode-6 / name :op1 ukraine)) :name (MRPNode-7 / name :op1 parliament)))

# ::id 485
# ::snt Captain of sunken South Korean ferry arrested
# ::tok Captain of sunken South Korean ferry arrested
# ::alignments 0-1|0.1+0.1.0 2-3|0.0.0.1 3-5|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.1 5-6|0.0.0 6-7|0+0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.575175 ::parser eager_oracle ::smatch 0.9444444444444444 ::n_actions 34
# ::node	0	person	6-7
# ::node	0.0	arrest-01	6-7
# ::node	0.0.0	ferry	5-6
# ::node	0.0.0.0	country	3-5
# ::node	0.0.0.0.0	name	3-5
# ::node	0.0.0.0.0.0	south	3-5
# ::node	0.0.0.0.0.1	korea	3-5
# ::node	0.0.0.1	sink-01	2-3
# ::node	0.1	have-org-role-91	0-1
# ::node	0.1.0	captain	0-1
# ::root	0	person
# ::edge	arrest-01	ARG2	ferry	0.0	0.0.0
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	ferry	ARG1-of	sink-01	0.0.0	0.0.0.1
# ::edge	ferry	mod	country	0.0.0	0.0.0.0
# ::edge	have-org-role-91	ARG2	captain	0.1	0.1.0
# ::edge	name	op1	south	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op2	korea	0.0.0.0.0	0.0.0.0.0.1
# ::edge	person	ARG0-of	arrest-01	0	0.0
# ::edge	person	ARG0-of	have-org-role-91	0	0.1
(MRPNode-0 / person :ARG0-of (MRPNode-1 / arrest-01 :ARG2 (MRPNode-2 / ferry :mod (MRPNode-3 / country :name (MRPNode-4 / name :op1 south :op2 korea)) :ARG1-of (MRPNode-5 / sink-01))) :ARG0-of (MRPNode-6 / have-org-role-91 :ARG2 (MRPNode-7 / captain)))

# ::id 486
# ::snt Communist rebels ambush Philippine police, kill 7
# ::tok Communist rebels ambush Philippine police , kill 7
# ::alignments 0-1|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 1-2|0.0.1+0.0.1.1 2-3|0.0 3-4|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 4-5|0.0.0 6-7|0.1 7-8|0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.584236 ::parser eager_oracle ::smatch 0.8 ::n_actions 40
# ::node	0	and	
# ::node	0.0	ambush-01	2-3
# ::node	0.0.0	police	4-5
# ::node	0.0.0.0	country	3-4
# ::node	0.0.0.0.0	name	3-4
# ::node	0.0.0.0.0.0	philippines	3-4
# ::node	0.0.1	person	1-2
# ::node	0.0.1.0	political-movement	0-1
# ::node	0.0.1.0.0	name	0-1
# ::node	0.0.1.0.0.0	communism	0-1
# ::node	0.0.1.1	rebel-01	1-2
# ::node	0.1	kill-01	6-7
# ::node	0.1.0	person	7-8
# ::node	0.1.0.0	7	7-8
# ::root	0	and
# ::edge	ambush-01	ARG0	person	0.0	0.0.1
# ::edge	ambush-01	ARG1	police	0.0	0.0.0
# ::edge	and	op1	ambush-01	0	0.0
# ::edge	and	op2	kill-01	0	0.1
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	kill-01	ARG0	person	0.1	0.0.1
# ::edge	kill-01	ARG1	person	0.1	0.1.0
# ::edge	name	op1	communism	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	philippines	0.0.0.0.0	0.0.0.0.0.0
# ::edge	person	ARG0-of	rebel-01	0.0.1	0.0.1.1
# ::edge	person	mod	political-movement	0.0.1	0.0.1.0
# ::edge	person	quant	7	0.1.0	0.1.0.0
# ::edge	police	mod	country	0.0.0	0.0.0.0
# ::edge	political-movement	name	name	0.0.1.0	0.0.1.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / ambush-01 :ARG1 (MRPNode-2 / police :mod (MRPNode-3 / country :name (MRPNode-4 / name :op1 philippines))) :ARG0 (MRPNode-5 / person :mod (MRPNode-6 / political-movement :name (MRPNode-7 / name :op1 communism)) :ARG0-of (MRPNode-8 / rebel-01))) :op2 (MRPNode-9 / kill-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-10 / person :quant 7)))

# ::id 487
# ::snt Woman dies while riding roller coaster in Texas
# ::tok Woman dies while riding roller coaster in Texas
# ::alignments 0-1|0.0 1-2|0 3-4|0.1 4-5|0.1.0.0 5-6|0.1.0 7-8|0.1.1+0.1.1.0+0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.590162 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	die-01	1-2
# ::node	0.0	woman	0-1
# ::node	0.1	ride-01	3-4
# ::node	0.1.0	coaster	5-6
# ::node	0.1.0.0	roller	4-5
# ::node	0.1.1	state	7-8
# ::node	0.1.1.0	name	7-8
# ::node	0.1.1.0.0	texas	7-8
# ::root	0	die-01
# ::edge	coaster	mod	roller	0.1.0	0.1.0.0
# ::edge	die-01	ARG1	woman	0	0.0
# ::edge	die-01	time	ride-01	0	0.1
# ::edge	name	op1	texas	0.1.1.0	0.1.1.0.0
# ::edge	ride-01	ARG0	woman	0.1	0.0
# ::edge	ride-01	ARG1	coaster	0.1	0.1.0
# ::edge	ride-01	location	state	0.1	0.1.1
# ::edge	state	name	name	0.1.1	0.1.1.0
(MRPNode-0 / die-01 :ARG1 (MRPNode-1 / woman) :time (MRPNode-2 / ride-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-3 / coaster :mod (MRPNode-4 / roller)) :location (MRPNode-5 / state :name (MRPNode-6 / name :op1 texas))))

# ::id 488
# ::snt Nobel author Doris Lessing dies at 94
# ::tok Nobel author Doris Lessing dies at 94
# ::alignments 0-1|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 1-2|0.0.0 2-4|0.0+0.0.1+0.0.1.0+0.0.1.1 4-5|0 6-7|0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.595986 ::parser eager_oracle ::smatch 0.8108108108108109 ::n_actions 23
# ::node	0	die-01	4-5
# ::node	0.0	person	2-4
# ::node	0.0.0	author-01	1-2
# ::node	0.0.0.0	award	0-1
# ::node	0.0.0.0.0	name	0-1
# ::node	0.0.0.0.0.0	nobel	0-1
# ::node	0.0.1	name	2-4
# ::node	0.0.1.0	doris	2-4
# ::node	0.0.1.1	lessing	2-4
# ::node	0.1	age-01	
# ::node	0.1.0	temporal-quantity	
# ::node	0.1.0.0	94	6-7
# ::node	0.1.0.1	year	
# ::root	0	die-01
# ::edge	age-01	ARG2	temporal-quantity	0.1	0.1.0
# ::edge	author-01	ARG1-of	award	0.0.0	0.0.0.0
# ::edge	award	name	name	0.0.0.0	0.0.0.0.0
# ::edge	die-01	ARG1	person	0	0.0
# ::edge	die-01	time	age-01	0	0.1
# ::edge	name	op1	doris	0.0.1	0.0.1.0
# ::edge	name	op1	nobel	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op2	lessing	0.0.1	0.0.1.1
# ::edge	person	ARG0-of	author-01	0.0	0.0.0
# ::edge	person	name	name	0.0	0.0.1
# ::edge	temporal-quantity	quant	94	0.1.0	0.1.0.0
# ::edge	temporal-quantity	quant	year	0.1.0	0.1.0.1
(MRPNode-0 / die-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / author-01 :ARG1-of (MRPNode-3 / award :name (MRPNode-4 / name :op1 nobel))) :name (MRPNode-5 / name :op1 doris :op2 lessing)) :time (MRPNode-6 / age-01 :ARG2 (MRPNode-7 / temporal-quantity :quant 94 :quant (MRPNode-8 / year))))

# ::id 489
# ::snt Twitter reports blocking in Venezuela
# ::tok Twitter reports blocking in Venezuela
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0 4-5|0.0.0+0.0.0.0+0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.605685 ::parser eager_oracle ::smatch 1.0 ::n_actions 19
# ::node	0	report-01	1-2
# ::node	0.0	block-01	2-3
# ::node	0.0.0	country	4-5
# ::node	0.0.0.0	name	4-5
# ::node	0.0.0.0.0	venezuela	4-5
# ::node	0.1	publication	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	twitter	0-1
# ::root	0	report-01
# ::edge	block-01	location	country	0.0	0.0.0
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	name	op1	twitter	0.1.0	0.1.0.0
# ::edge	name	op1	venezuela	0.0.0.0	0.0.0.0.0
# ::edge	publication	name	name	0.1	0.1.0
# ::edge	report-01	ARG0	publication	0	0.1
# ::edge	report-01	ARG1	block-01	0	0.0
(MRPNode-0 / report-01 :ARG1 (MRPNode-1 / block-01 :location (MRPNode-2 / country :name (MRPNode-3 / name :op1 venezuela))) :ARG0 (MRPNode-4 / publication :name (MRPNode-5 / name :op1 twitter)))

# ::id 490
# ::snt British stuntman fell to his death in wing suit mishap
# ::tok British stuntman fell to his death in wing suit mishap
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0+0.0.0.0.1 1-2|0.0 2-3|0 5-6|0.2 8-9|0.1.0.0 9-10|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.611888 ::parser eager_oracle ::smatch 0.7777777777777777 ::n_actions 31
# ::node	0	fall-07	2-3
# ::node	0.0	stuntman	1-2
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	great	0-1
# ::node	0.0.0.0.1	britain	0-1
# ::node	0.1	cause-01	
# ::node	0.1.0	mishap	9-10
# ::node	0.1.0.0	suit	8-9
# ::node	0.2	die-01	5-6
# ::root	0	fall-07
# ::edge	cause-01	ARG0	mishap	0.1	0.1.0
# ::edge	cause-01	ARG1	stuntman	0.1	0.0
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	die-01	ARG1	stuntman	0.2	0.0
# ::edge	fall-07	ARG1	stuntman	0	0.0
# ::edge	fall-07	ARG1-of	cause-01	0	0.1
# ::edge	fall-07	ARG2	die-01	0	0.2
# ::edge	mishap	mod	suit	0.1.0	0.1.0.0
# ::edge	name	op1	great	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	britain	0.0.0.0	0.0.0.0.1
# ::edge	stuntman	mod	country	0.0	0.0.0
(MRPNode-0 / fall-07 :ARG1 (MRPNode-1 / stuntman :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 great :op2 britain))) :ARG1-of (MRPNode-4 / cause-01 :ARG1 MRPNode-1 :ARG0 (MRPNode-5 / mishap :mod (MRPNode-6 / suit))) :ARG2 (MRPNode-7 / die-01 :ARG1 MRPNode-1))

# ::id 491
# ::snt Euro crisis is over, says France's Francois Hollande
# ::tok Euro crisis is over , says France 's Francois Hollande
# ::alignments 0-1|0.0.0.0 1-2|0.0.0 3-4|0.0 5-6|0 6-7|0.1.1+0.1.1.0+0.1.1.0.0+0.1.1.0.0.0 8-10|0.1+0.1.0+0.1.0.0+0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.618702 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	say-01	5-6
# ::node	0.0	over-01	3-4
# ::node	0.0.0	crisis	1-2
# ::node	0.0.0.0	euro	0-1
# ::node	0.1	person	8-10
# ::node	0.1.0	name	8-10
# ::node	0.1.0.0	francois	8-10
# ::node	0.1.0.1	hollande	8-10
# ::node	0.1.1	have-org-role-91	6-7
# ::node	0.1.1.0	country	6-7
# ::node	0.1.1.0.0	name	6-7
# ::node	0.1.1.0.0.0	france	6-7
# ::root	0	say-01
# ::edge	country	name	name	0.1.1.0	0.1.1.0.0
# ::edge	crisis	mod	euro	0.0.0	0.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.1	0.1.1.0
# ::edge	name	op1	france	0.1.1.0.0	0.1.1.0.0.0
# ::edge	name	op1	francois	0.1.0	0.1.0.0
# ::edge	name	op2	hollande	0.1.0	0.1.0.1
# ::edge	over-01	ARG1	crisis	0.0	0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.1
# ::edge	person	name	name	0.1	0.1.0
# ::edge	say-01	ARG0	person	0	0.1
# ::edge	say-01	ARG1	over-01	0	0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / over-01 :ARG1 (MRPNode-2 / crisis :mod (MRPNode-3 / euro))) :ARG0 (MRPNode-4 / person :name (MRPNode-5 / name :op1 francois :op2 hollande) :ARG0-of (MRPNode-6 / have-org-role-91 :ARG1 (MRPNode-7 / country :name (MRPNode-8 / name :op1 france)))))

# ::id 492
# ::snt White diamond breaks record in Hong Kong auction
# ::tok White diamond breaks record in Hong Kong auction
# ::alignments 0-1|0.1.0 1-2|0.1 2-3|0 3-4|0.0 5-7|0.2+0.2.0+0.2.0.0+0.2.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.622913 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	break-01	2-3
# ::node	0.0	record	3-4
# ::node	0.1	diamond	1-2
# ::node	0.1.0	white-03	0-1
# ::node	0.2	city	5-7
# ::node	0.2.0	name	5-7
# ::node	0.2.0.0	hong	5-7
# ::node	0.2.0.1	kong	5-7
# ::root	0	break-01
# ::edge	break-01	ARG0	diamond	0	0.1
# ::edge	break-01	ARG1	record	0	0.0
# ::edge	break-01	location	city	0	0.2
# ::edge	city	name	name	0.2	0.2.0
# ::edge	diamond	ARG1-of	white-03	0.1	0.1.0
# ::edge	name	op1	hong	0.2.0	0.2.0.0
# ::edge	name	op2	kong	0.2.0	0.2.0.1
(MRPNode-0 / break-01 :ARG1 (MRPNode-1 / record) :ARG0 (MRPNode-2 / diamond :ARG1-of (MRPNode-3 / white-03)) :location (MRPNode-4 / city :name (MRPNode-5 / name :op1 hong :op2 kong)))

# ::id 493
# ::snt Treasury proposal sees 1.5% increase in income tax
# ::tok Treasury proposal sees 1.5 % increase in income tax
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 1-2|0.1+0.1.0 2-3|0 3-4|0.0.1.0 4-5|0.0.1 5-6|0.0 7-8|0.0.0.0 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.634173 ::parser eager_oracle ::smatch 0.9268292682926829 ::n_actions 40
# ::node	0	see-01	2-3
# ::node	0.0	increase-01	5-6
# ::node	0.0.0	tax-01	8-9
# ::node	0.0.0.0	income	7-8
# ::node	0.0.1	percentage-entity	4-5
# ::node	0.0.1.0	1.5	3-4
# ::node	0.1	thing	1-2
# ::node	0.1.0	propose-01	1-2
# ::node	0.1.0.0	government-organization	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	treasury	0-1
# ::root	0	see-01
# ::edge	government-organization	name	name	0.1.0.0	0.1.0.0.0
# ::edge	increase-01	ARG1	tax-01	0.0	0.0.0
# ::edge	increase-01	ARG2	percentage-entity	0.0	0.0.1
# ::edge	name	op1	treasury	0.1.0.0.0	0.1.0.0.0.0
# ::edge	percentage-entity	value	1.5	0.0.1	0.0.1.0
# ::edge	propose-01	ARG0	government-organization	0.1.0	0.1.0.0
# ::edge	see-01	ARG0	thing	0	0.1
# ::edge	see-01	ARG1	increase-01	0	0.0
# ::edge	tax-01	ARG3	income	0.0.0	0.0.0.0
# ::edge	thing	ARG1-of	propose-01	0.1	0.1.0
(MRPNode-0 / see-01 :ARG1 (MRPNode-1 / increase-01 :ARG1 (MRPNode-2 / tax-01 :ARG3 (MRPNode-3 / income)) :ARG2 (MRPNode-4 / percentage-entity :value 1.5)) :ARG0 (MRPNode-5 / thing :ARG1-of (MRPNode-6 / propose-01 :ARG0 (MRPNode-7 / government-organization :name (MRPNode-8 / name :op1 treasury)))))

# ::id 494
# ::snt PSNI failed RUC officers, tribunal told
# ::tok PSNI failed RUC officers , tribunal told
# ::alignments 0-1|0.0.0.0.1+0.0.0.0.1.1+0.0.0.0.1.1.0 1-2|0.0 2-3|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0+0.0.0.0.0.0.0.0 3-4|0.0.0.0.1.0 5-6|0.1 6-7|0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.646182 ::parser eager_oracle ::smatch 0.875 ::n_actions 36
# ::node	0	tell-01	6-7
# ::node	0.0	fail-01	1-2
# ::node	0.0.0	person	
# ::node	0.0.0.0	have-org-role-91	2-3
# ::node	0.0.0.0.0	have-org-role-91	2-3
# ::node	0.0.0.0.0.0	organization	2-3
# ::node	0.0.0.0.0.0.0	name	2-3
# ::node	0.0.0.0.0.0.0.0	ruc	2-3
# ::node	0.0.0.0.1	organization	0-1
# ::node	0.0.0.0.1.0	officer	3-4
# ::node	0.0.0.0.1.1	name	0-1
# ::node	0.0.0.0.1.1.0	psni	0-1
# ::node	0.0.0.0.2	officer	
# ::node	0.1	tribunal	5-6
# ::root	0	tell-01
# ::edge	fail-01	ARG1	person	0.0	0.0.0
# ::edge	have-org-role-91	ARG1	have-org-role-91	0.0.0.0	0.0.0.0.0
# ::edge	have-org-role-91	ARG1	organization	0.0.0.0	0.0.0.0.1
# ::edge	have-org-role-91	ARG1	organization	0.0.0.0.0	0.0.0.0.0.0
# ::edge	have-org-role-91	ARG2	officer	0.0.0.0	0.0.0.0.2
# ::edge	name	op1	psni	0.0.0.0.1.1	0.0.0.0.1.1.0
# ::edge	name	op1	ruc	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0
# ::edge	organization	ARG1-of	officer	0.0.0.0.1	0.0.0.0.1.0
# ::edge	organization	name	name	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	organization	name	name	0.0.0.0.1	0.0.0.0.1.1
# ::edge	person	ARG0-of	have-org-role-91	0.0.0	0.0.0.0
# ::edge	tell-01	ARG0	tribunal	0	0.1
# ::edge	tell-01	ARG1	fail-01	0	0.0
(MRPNode-0 / tell-01 :ARG1 (MRPNode-1 / fail-01 :ARG1 (MRPNode-2 / person :ARG0-of (MRPNode-3 / have-org-role-91 :ARG1 (MRPNode-4 / have-org-role-91 :ARG1 (MRPNode-5 / organization :name (MRPNode-6 / name :op1 ruc))) :ARG1 (MRPNode-7 / organization :ARG1-of (MRPNode-8 / officer) :name (MRPNode-9 / name :op1 psni)) :ARG2 (MRPNode-10 / officer)))) :ARG0 (MRPNode-11 / tribunal))

# ::id 495
# ::snt Police helicopter crashes into Scottish pub
# ::tok Police helicopter crashes into Scottish pub
# ::alignments 0-1|0.0.0 1-2|0.0 2-3|0 4-5|0.1.0+0.1.0.0+0.1.0.0.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.649591 ::parser eager_oracle ::smatch 0.9230769230769231 ::n_actions 23
# ::node	0	crash-01	2-3
# ::node	0.0	helicopter	1-2
# ::node	0.0.0	police	0-1
# ::node	0.1	pub	5-6
# ::node	0.1.0	country	4-5
# ::node	0.1.0.0	name	4-5
# ::node	0.1.0.0.0	scotland	4-5
# ::root	0	crash-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	crash-01	ARG1	helicopter	0	0.0
# ::edge	crash-01	location	pub	0	0.1
# ::edge	helicopter	mod	police	0.0	0.0.0
# ::edge	name	op1	scotland	0.1.0.0	0.1.0.0.0
# ::edge	pub	mod	country	0.1	0.1.0
(MRPNode-0 / crash-01 :ARG1 (MRPNode-1 / helicopter :mod (MRPNode-2 / police)) :location (MRPNode-3 / pub :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 scotland))))

# ::id 496
# ::snt US ups pressure on Israel as UN demands Gaza truce
# ::tok US ups pressure on Israel as UN demands Gaza truce
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 2-3|0 4-5|0.0+0.0.0+0.0.0.0 6-7|0.2.0.1+0.2.0.1.0+0.2.0.1.0.0 7-8|0.2.0 8-9|0.2.0.0.0+0.2.0.0.0.0+0.2.0.0.0.0.0 9-10|0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.665011 ::parser eager_oracle ::smatch 0.9259259259259259 ::n_actions 32
# ::node	0	pressure-01	2-3
# ::node	0.0	country	4-5
# ::node	0.0.0	name	4-5
# ::node	0.0.0.0	israel	4-5
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	us	0-1
# ::node	0.2	cause-01	
# ::node	0.2.0	demand-01	7-8
# ::node	0.2.0.0	truce	9-10
# ::node	0.2.0.0.0	country-region	8-9
# ::node	0.2.0.0.0.0	name	8-9
# ::node	0.2.0.0.0.0.0	gaza	8-9
# ::node	0.2.0.1	organization	6-7
# ::node	0.2.0.1.0	name	6-7
# ::node	0.2.0.1.0.0	un	6-7
# ::root	0	pressure-01
# ::edge	cause-01	ARG0	demand-01	0.2	0.2.0
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	country-region	name	name	0.2.0.0.0	0.2.0.0.0.0
# ::edge	demand-01	ARG0	organization	0.2.0	0.2.0.1
# ::edge	demand-01	ARG1	truce	0.2.0	0.2.0.0
# ::edge	name	op1	gaza	0.2.0.0.0.0	0.2.0.0.0.0.0
# ::edge	name	op1	israel	0.0.0	0.0.0.0
# ::edge	name	op1	un	0.2.0.1.0	0.2.0.1.0.0
# ::edge	name	op1	us	0.1.0	0.1.0.0
# ::edge	organization	name	name	0.2.0.1	0.2.0.1.0
# ::edge	pressure-01	ARG0	country	0	0.1
# ::edge	pressure-01	ARG1	country	0	0.0
# ::edge	pressure-01	ARG1-of	cause-01	0	0.2
# ::edge	truce	mod	country-region	0.2.0.0	0.2.0.0.0
(MRPNode-0 / pressure-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 israel)) :ARG0 (MRPNode-3 / country :name (MRPNode-4 / name :op1 us)) :ARG1-of (MRPNode-5 / cause-01 :ARG0 (MRPNode-6 / demand-01 :ARG1 (MRPNode-7 / truce :mod (MRPNode-8 / country-region :name (MRPNode-9 / name :op1 gaza))) :ARG0 (MRPNode-10 / organization :name (MRPNode-11 / name :op1 un)))))

# ::id 497
# ::snt Australian PM says 'Very confident' signals are from black box
# ::tok Australian PM says ' Very confident ' signals are from black box
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 2-3|0 4-5|0.0.0.0 5-6|0.0.0 7-8|0.0 10-11|0.0.1.0 11-12|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.674791 ::parser eager_oracle ::smatch 0.7142857142857143 ::n_actions 34
# ::node	0	say-01	2-3
# ::node	0.0	signal-07	7-8
# ::node	0.0.0	confident-01	5-6
# ::node	0.0.0.0	very	4-5
# ::node	0.0.1	box	11-12
# ::node	0.0.1.0	black-04	10-11
# ::node	0.1	person	
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	australia	0-1
# ::node	0.1.1	have-org-role-91	
# ::node	0.1.1.0	minister	
# ::node	0.1.1.0.0	prime	
# ::root	0	say-01
# ::edge	box	ARG1-of	black-04	0.0.1	0.0.1.0
# ::edge	confident-01	degree	very	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	minister	0.1.1	0.1.1.0
# ::edge	minister	mod	prime	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	australia	0.1.0.0	0.1.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.1
# ::edge	person	mod	country	0.1	0.1.0
# ::edge	say-01	ARG0	person	0	0.1
# ::edge	say-01	ARG1	signal-07	0	0.0
# ::edge	signal-07	ARG1	confident-01	0.0	0.0.0
# ::edge	signal-07	source	box	0.0	0.0.1
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / signal-07 :ARG1 (MRPNode-2 / confident-01 :degree (MRPNode-3 / very)) :source (MRPNode-4 / box :ARG1-of (MRPNode-5 / black-04))) :ARG0 (MRPNode-6 / person :mod (MRPNode-7 / country :name (MRPNode-8 / name :op1 australia)) :ARG0-of (MRPNode-9 / have-org-role-91 :ARG2 (MRPNode-10 / minister :mod (MRPNode-11 / prime)))))

# ::id 498
# ::snt Philippe becomes king of Belgium
# ::tok Philippe becomes king of Belgium
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 2-3|0.1+0.1.0+0.1.0.1 4-5|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.679657 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	become-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	philippe	0-1
# ::node	0.1	person	2-3
# ::node	0.1.0	have-org-role-91	2-3
# ::node	0.1.0.0	country	4-5
# ::node	0.1.0.0.0	name	4-5
# ::node	0.1.0.0.0.0	belgium	4-5
# ::node	0.1.0.1	king	2-3
# ::root	0	become-01
# ::edge	become-01	ARG1	person	0	0.0
# ::edge	become-01	ARG2	person	0	0.1
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	king	0.1.0	0.1.0.1
# ::edge	name	op1	belgium	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op1	philippe	0.0.0	0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	person	name	name	0.0	0.0.0
(MRPNode-0 / become-01 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 philippe)) :ARG2 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-org-role-91 :ARG1 (MRPNode-5 / country :name (MRPNode-6 / name :op1 belgium)) :ARG2 (MRPNode-7 / king))))

# ::id 499
# ::snt India anti-graft party takes charge in New Delhi
# ::tok India anti - graft party takes charge in New Delhi
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0.0.1 3-4|0.0.1.0 6-7|0 8-10|0.1+0.1.0+0.1.0.0+0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.686232 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	charge-05	6-7
# ::node	0.0	political-party	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	india	0-1
# ::node	0.0.1	oppose-01	1-2
# ::node	0.0.1.0	graft	3-4
# ::node	0.1	city	8-10
# ::node	0.1.0	name	8-10
# ::node	0.1.0.0	new	8-10
# ::node	0.1.0.1	delhi	8-10
# ::root	0	charge-05
# ::edge	charge-05	ARG0	political-party	0	0.0
# ::edge	charge-05	location	city	0	0.1
# ::edge	city	name	name	0.1	0.1.0
# ::edge	name	op1	india	0.0.0	0.0.0.0
# ::edge	name	op1	new	0.1.0	0.1.0.0
# ::edge	name	op2	delhi	0.1.0	0.1.0.1
# ::edge	oppose-01	ARG1	graft	0.0.1	0.0.1.0
# ::edge	political-party	ARG0-of	oppose-01	0.0	0.0.1
# ::edge	political-party	name	name	0.0	0.0.0
(MRPNode-0 / charge-05 :ARG0 (MRPNode-1 / political-party :name (MRPNode-2 / name :op1 india) :ARG0-of (MRPNode-3 / oppose-01 :ARG1 (MRPNode-4 / graft))) :location (MRPNode-5 / city :name (MRPNode-6 / name :op1 new :op2 delhi)))

# ::id 500
# ::snt More than 100 injured in Texas plant blast
# ::tok More than 100 injured in Texas plant blast
# ::alignments 0-1|0.1+0.1.0 2-3|0.1.0.0 3-4|0 5-6|0.0.0+0.0.0.0+0.0.0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.691269 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	injure-01	3-4
# ::node	0.0	plant	6-7
# ::node	0.0.0	state	5-6
# ::node	0.0.0.0	name	5-6
# ::node	0.0.0.0.0	texas	5-6
# ::node	0.1	person	0-1
# ::node	0.1.0	more-than	0-1
# ::node	0.1.0.0	100	2-3
# ::root	0	injure-01
# ::edge	injure-01	ARG1	person	0	0.1
# ::edge	injure-01	ARG1	plant	0	0.0
# ::edge	more-than	op1	100	0.1.0	0.1.0.0
# ::edge	name	op1	texas	0.0.0.0	0.0.0.0.0
# ::edge	person	quant	more-than	0.1	0.1.0
# ::edge	plant	location	state	0.0	0.0.0
# ::edge	state	name	name	0.0.0	0.0.0.0
(MRPNode-0 / injure-01 :ARG1 (MRPNode-1 / plant :location (MRPNode-2 / state :name (MRPNode-3 / name :op1 texas))) :ARG1 (MRPNode-4 / person :quant (MRPNode-5 / more-than :op1 100)))

# ::id 501
# ::snt UN court convicts 6 Bosnian Croats of atrocities
# ::tok UN court convicts 6 Bosnian Croats of atrocities
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1 2-3|0 3-4|0.0.0 7-8|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:46.697154 ::parser eager_oracle ::smatch 0.7333333333333334 ::n_actions 24
# ::node	0	convict-01	2-3
# ::node	0.0	person	
# ::node	0.0.0	6	3-4
# ::node	0.0.1	country	
# ::node	0.0.1.0	name	
# ::node	0.0.1.0.0	morocco	
# ::node	0.1	court	1-2
# ::node	0.1.0	organization	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	un	0-1
# ::node	0.2	atrocity	7-8
# ::root	0	convict-01
# ::edge	convict-01	ARG0	court	0	0.1
# ::edge	convict-01	ARG1	person	0	0.0
# ::edge	convict-01	ARG2	atrocity	0	0.2
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	court	mod	organization	0.1	0.1.0
# ::edge	name	op1	morocco	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	un	0.1.0.0	0.1.0.0.0
# ::edge	organization	name	name	0.1.0	0.1.0.0
# ::edge	person	mod	country	0.0	0.0.1
# ::edge	person	quant	6	0.0	0.0.0
(MRPNode-0 / convict-01 :ARG1 (MRPNode-1 / person :quant 6 :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 morocco))) :ARG0 (MRPNode-4 / court :mod (MRPNode-5 / organization :name (MRPNode-6 / name :op1 un))) :ARG2 (MRPNode-7 / atrocity))

# ::id 502
# ::snt Saudi man with pressure cooker arrested at Detroit airport
# ::tok Saudi man with pressure cooker arrested at Detroit airport
# ::alignments 0-1|0.0+0.0.0+0.0.0.0+0.0.0.1 1-2|0 3-4|0.2.0.0 4-5|0.2.0 5-6|0.1 7-8|0.1.0+0.1.0.0+0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.705234 ::parser eager_oracle ::smatch 0.8717948717948718 ::n_actions 28
# ::node	0	man	1-2
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	saudi	0-1
# ::node	0.0.0.1	arabia	0-1
# ::node	0.1	arrest-01	5-6
# ::node	0.1.0	city	7-8
# ::node	0.1.0.0	name	7-8
# ::node	0.1.0.0.0	detroit	7-8
# ::node	0.2	have-03	
# ::node	0.2.0	cooker	4-5
# ::node	0.2.0.0	pressure	3-4
# ::root	0	man
# ::edge	arrest-01	location	city	0.1	0.1.0
# ::edge	city	name	name	0.1.0	0.1.0.0
# ::edge	cooker	mod	pressure	0.2.0	0.2.0.0
# ::edge	country	name	name	0.0	0.0.0
# ::edge	have-03	ARG1	cooker	0.2	0.2.0
# ::edge	man	ARG0-of	have-03	0	0.2
# ::edge	man	ARG1-of	arrest-01	0	0.1
# ::edge	man	mod	country	0	0.0
# ::edge	name	op1	detroit	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	saudi	0.0.0	0.0.0.0
# ::edge	name	op2	arabia	0.0.0	0.0.0.1
(MRPNode-0 / man :mod (MRPNode-1 / country :name (MRPNode-2 / name :op1 saudi :op2 arabia)) :ARG1-of (MRPNode-3 / arrest-01 :location (MRPNode-4 / city :name (MRPNode-5 / name :op1 detroit))) :ARG0-of (MRPNode-6 / have-03 :ARG1 (MRPNode-7 / cooker :mod (MRPNode-8 / pressure))))

# ::id 503
# ::snt Rallies demand 'Justice for Trayvon'
# ::tok Rallies demand ' Justice for Trayvon '
# ::alignments 0-1|0.0 1-2|0 3-4|0.1 5-6|0.1.0+0.1.0.0+0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.708403 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	demand-01	1-2
# ::node	0.0	rally-01	0-1
# ::node	0.1	justice	3-4
# ::node	0.1.0	person	5-6
# ::node	0.1.0.0	name	5-6
# ::node	0.1.0.0.0	trayvon	5-6
# ::root	0	demand-01
# ::edge	demand-01	ARG1	justice	0	0.1
# ::edge	demand-01	ARG1	rally-01	0	0.0
# ::edge	justice	beneficiary	person	0.1	0.1.0
# ::edge	name	op1	trayvon	0.1.0.0	0.1.0.0.0
# ::edge	person	name	name	0.1.0	0.1.0.0
(MRPNode-0 / demand-01 :ARG1 (MRPNode-1 / rally-01) :ARG1 (MRPNode-2 / justice :beneficiary (MRPNode-3 / person :name (MRPNode-4 / name :op1 trayvon))))

# ::id 504
# ::snt Hagel, Dempsey face Congress over defense budget
# ::tok Hagel , Dempsey face Congress over defense budget
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 2-3|0.1.1+0.1.1.0+0.1.1.0.0 3-4|0 4-5|0.2+0.2.0+0.2.0.0 6-7|0.0.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.715551 ::parser eager_oracle ::smatch 0.8636363636363636 ::n_actions 26
# ::node	0	face-01	3-4
# ::node	0.0	budget	7-8
# ::node	0.0.0	defend-01	6-7
# ::node	0.1	and	
# ::node	0.1.0	person	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	hagel	0-1
# ::node	0.1.1	person	2-3
# ::node	0.1.1.0	name	2-3
# ::node	0.1.1.0.0	dempsey	2-3
# ::node	0.2	government-organization	4-5
# ::node	0.2.0	name	4-5
# ::node	0.2.0.0	congress	4-5
# ::root	0	face-01
# ::edge	and	op1	person	0.1	0.1.0
# ::edge	and	op2	person	0.1	0.1.1
# ::edge	budget	ARG2-of	defend-01	0.0	0.0.0
# ::edge	face-01	ARG0	and	0	0.1
# ::edge	face-01	ARG1	budget	0	0.0
# ::edge	face-01	ARG1	government-organization	0	0.2
# ::edge	government-organization	name	name	0.2	0.2.0
# ::edge	name	op1	congress	0.2.0	0.2.0.0
# ::edge	name	op1	dempsey	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	hagel	0.1.0.0	0.1.0.0.0
# ::edge	person	name	name	0.1.0	0.1.0.0
# ::edge	person	name	name	0.1.1	0.1.1.0
(MRPNode-0 / face-01 :ARG1 (MRPNode-1 / budget :ARG2-of (MRPNode-2 / defend-01)) :ARG0 (MRPNode-3 / and :op1 (MRPNode-4 / person :name (MRPNode-5 / name :op1 hagel)) :op2 (MRPNode-6 / person :name (MRPNode-7 / name :op1 dempsey))) :ARG1 (MRPNode-8 / government-organization :name (MRPNode-9 / name :op1 congress)))

# ::id 505
# ::snt Ukrainian presidency says deal reached at crisis talks
# ::tok Ukrainian presidency says deal reached at crisis talks
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 1-2|0.1+0.1.0+0.1.0.1 2-3|0 3-4|0.0.0 4-5|0.0 6-7|0.0.1.0 7-8|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.724487 ::parser eager_oracle ::smatch 0.9523809523809523 ::n_actions 40
# ::node	0	say-01	2-3
# ::node	0.0	reach-01	4-5
# ::node	0.0.0	deal-01	3-4
# ::node	0.0.1	talk-01	7-8
# ::node	0.0.1.0	crisis	6-7
# ::node	0.1	person	1-2
# ::node	0.1.0	have-org-role-91	1-2
# ::node	0.1.0.0	country	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	ukraine	0-1
# ::node	0.1.0.1	presidency	1-2
# ::root	0	say-01
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	presidency	0.1.0	0.1.0.1
# ::edge	name	op1	ukraine	0.1.0.0.0	0.1.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	reach-01	ARG1	deal-01	0.0	0.0.0
# ::edge	reach-01	location	talk-01	0.0	0.0.1
# ::edge	say-01	ARG0	person	0	0.1
# ::edge	say-01	ARG1	reach-01	0	0.0
# ::edge	talk-01	ARG0	crisis	0.0.1	0.0.1.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / reach-01 :ARG1 (MRPNode-2 / deal-01) :location (MRPNode-3 / talk-01 :ARG0 (MRPNode-4 / crisis))) :ARG0 (MRPNode-5 / person :ARG0-of (MRPNode-6 / have-org-role-91 :ARG1 (MRPNode-7 / country :name (MRPNode-8 / name :op1 ukraine)) :ARG2 (MRPNode-9 / presidency))))

# ::id 506
# ::snt Syria's PM escapes assassination try, regime says
# ::tok Syria 's PM escapes assassination try , regime says
# ::alignments 0-1|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0+0.0.0.0.0.0.0.0+0.0.0.0.0.0.0.0.0 3-4|0.0 4-5|0.0.0.0 5-6|0.0.0 7-8|0.1 8-9|0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.733006 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 39
# ::node	0	say-01	8-9
# ::node	0.0	escape-01	3-4
# ::node	0.0.0	try-01	5-6
# ::node	0.0.0.0	assassinate-01	4-5
# ::node	0.0.0.0.0	person	0-1
# ::node	0.0.0.0.0.0	have-org-role-91	0-1
# ::node	0.0.0.0.0.0.0	country	0-1
# ::node	0.0.0.0.0.0.0.0	name	0-1
# ::node	0.0.0.0.0.0.0.0.0	syria	0-1
# ::node	0.0.0.0.0.0.1	minister	
# ::node	0.0.0.0.0.0.1.0	prime	
# ::node	0.1	regime	7-8
# ::root	0	say-01
# ::edge	assassinate-01	ARG0	person	0.0.0.0	0.0.0.0.0
# ::edge	country	name	name	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0
# ::edge	escape-01	ARG0	person	0.0	0.0.0.0.0
# ::edge	escape-01	ARG1	try-01	0.0	0.0.0
# ::edge	have-org-role-91	ARG1	country	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	have-org-role-91	ARG2	minister	0.0.0.0.0.0	0.0.0.0.0.0.1
# ::edge	minister	mod	prime	0.0.0.0.0.0.1	0.0.0.0.0.0.1.0
# ::edge	name	op1	syria	0.0.0.0.0.0.0.0	0.0.0.0.0.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0.0.0.0	0.0.0.0.0.0
# ::edge	say-01	ARG0	regime	0	0.1
# ::edge	say-01	ARG1	escape-01	0	0.0
# ::edge	try-01	ARG1	assassinate-01	0.0.0	0.0.0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / escape-01 :ARG1 (MRPNode-2 / try-01 :ARG1 (MRPNode-3 / assassinate-01 :ARG0 (MRPNode-4 / person :ARG0-of (MRPNode-5 / have-org-role-91 :ARG1 (MRPNode-6 / country :name (MRPNode-7 / name :op1 syria)) :ARG2 (MRPNode-8 / minister :mod (MRPNode-9 / prime)))))) :ARG0 MRPNode-4) :ARG0 (MRPNode-10 / regime))

# ::id 507
# ::snt South Korean soldier reportedly flees after killing 5 comrades at border with North Korea
# ::tok South Korean soldier reportedly flees after killing 5 comrades at border with North Korea
# ::alignments 0-2|0.1.0.2.0+0.1.0.2.0.0+0.1.0.2.0.0.0+0.1.0.2.0.0.1 2-3|0.1.0.2 3-4|0.0 4-5|0 5-6|0.1 6-7|0.1.0 7-8|0.1.0.0.0 8-9|0.1.0.0+0.1.0.0.1+0.1.0.0.1.0 10-11|0.1.0.1 12-14|0.1.0.0.1.1+0.1.0.0.1.1.0+0.1.0.0.1.1.0.0+0.1.0.0.1.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.750639 ::parser eager_oracle ::smatch 0.9696969696969697 ::n_actions 58
# ::node	0	flee-05	4-5
# ::node	0.0	report-01	3-4
# ::node	0.1	after	5-6
# ::node	0.1.0	kill-01	6-7
# ::node	0.1.0.0	person	8-9
# ::node	0.1.0.0.0	5	7-8
# ::node	0.1.0.0.1	have-rel-role-91	8-9
# ::node	0.1.0.0.1.0	comrade	8-9
# ::node	0.1.0.0.1.1	country	12-14
# ::node	0.1.0.0.1.1.0	name	12-14
# ::node	0.1.0.0.1.1.0.0	north	12-14
# ::node	0.1.0.0.1.1.0.1	korea	12-14
# ::node	0.1.0.1	border-01	10-11
# ::node	0.1.0.2	soldier	2-3
# ::node	0.1.0.2.0	country	0-2
# ::node	0.1.0.2.0.0	name	0-2
# ::node	0.1.0.2.0.0.0	south	0-2
# ::node	0.1.0.2.0.0.1	korea	0-2
# ::root	0	flee-05
# ::edge	after	op1	kill-01	0.1	0.1.0
# ::edge	border-01	ARG2	country	0.1.0.1	0.1.0.0.1.1
# ::edge	country	name	name	0.1.0.0.1.1	0.1.0.0.1.1.0
# ::edge	country	name	name	0.1.0.2.0	0.1.0.2.0.0
# ::edge	flee-05	ARG0	after	0	0.1
# ::edge	flee-05	ARG0	report-01	0	0.0
# ::edge	flee-05	ARG0	soldier	0	0.1.0.2
# ::edge	have-rel-role-91	ARG1	country	0.1.0.0.1	0.1.0.0.1.1
# ::edge	have-rel-role-91	ARG2	comrade	0.1.0.0.1	0.1.0.0.1.0
# ::edge	kill-01	ARG0	soldier	0.1.0	0.1.0.2
# ::edge	kill-01	ARG1	person	0.1.0	0.1.0.0
# ::edge	kill-01	location	border-01	0.1.0	0.1.0.1
# ::edge	name	op1	north	0.1.0.0.1.1.0	0.1.0.0.1.1.0.0
# ::edge	name	op1	south	0.1.0.2.0.0	0.1.0.2.0.0.0
# ::edge	name	op2	korea	0.1.0.0.1.1.0	0.1.0.0.1.1.0.1
# ::edge	name	op2	korea	0.1.0.2.0.0	0.1.0.2.0.0.1
# ::edge	person	ARG0-of	have-rel-role-91	0.1.0.0	0.1.0.0.1
# ::edge	person	quant	5	0.1.0.0	0.1.0.0.0
# ::edge	soldier	mod	country	0.1.0.2	0.1.0.2.0
(MRPNode-0 / flee-05 :ARG0 (MRPNode-1 / report-01) :ARG0 (MRPNode-2 / after :op1 (MRPNode-3 / kill-01 :ARG1 (MRPNode-4 / person :quant 5 :ARG0-of (MRPNode-5 / have-rel-role-91 :ARG2 (MRPNode-6 / comrade) :ARG1 (MRPNode-8 / country :name (MRPNode-9 / name :op1 north :op2 korea)))) :location (MRPNode-7 / border-01 :ARG2 MRPNode-8) :ARG0 (MRPNode-10 / soldier :mod (MRPNode-11 / country :name (MRPNode-12 / name :op1 south :op2 korea))))) :ARG0 MRPNode-10)

# ::id 508
# ::snt US Attorney General Holder resigns
# ::tok US Attorney General Holder resigns
# ::alignments 0-1|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 1-2|0.0.1+0.0.1.1 2-3|0.0.1.1.0 3-4|0.0+0.0.0+0.0.0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.755488 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	resign-01	4-5
# ::node	0.0	person	3-4
# ::node	0.0.0	name	3-4
# ::node	0.0.0.0	holder	3-4
# ::node	0.0.1	have-org-role-91	1-2
# ::node	0.0.1.0	country	0-1
# ::node	0.0.1.0.0	name	0-1
# ::node	0.0.1.0.0.0	us	0-1
# ::node	0.0.1.1	attorney	1-2
# ::node	0.0.1.1.0	general	2-3
# ::root	0	resign-01
# ::edge	attorney	mod	general	0.0.1.1	0.0.1.1.0
# ::edge	country	name	name	0.0.1.0	0.0.1.0.0
# ::edge	have-org-role-91	ARG1	country	0.0.1	0.0.1.0
# ::edge	have-org-role-91	ARG2	attorney	0.0.1	0.0.1.1
# ::edge	name	op1	holder	0.0.0	0.0.0.0
# ::edge	name	op1	us	0.0.1.0.0	0.0.1.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.1
# ::edge	person	name	name	0.0	0.0.0
# ::edge	resign-01	ARG0	person	0	0.0
(MRPNode-0 / resign-01 :ARG0 (MRPNode-1 / person :name (MRPNode-2 / name :op1 holder) :ARG0-of (MRPNode-3 / have-org-role-91 :ARG1 (MRPNode-4 / country :name (MRPNode-5 / name :op1 us)) :ARG2 (MRPNode-6 / attorney :mod (MRPNode-7 / general)))))

# ::id 509
# ::snt Hajj to go ahead despite crane collapse, officials vow
# ::tok Hajj to go ahead despite crane collapse , officials vow
# ::alignments 0-1|0.1.0 2-3|0.1 3-4|0.1.1 5-6|0.1.2.0 6-7|0.1.2 8-9|0.0+0.0.0+0.0.0.0 9-10|0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.762897 ::parser eager_oracle ::smatch 1.0 ::n_actions 41
# ::node	0	vow-01	9-10
# ::node	0.0	person	8-9
# ::node	0.0.0	have-org-role-91	8-9
# ::node	0.0.0.0	official	8-9
# ::node	0.1	go-01	2-3
# ::node	0.1.0	hajj	0-1
# ::node	0.1.1	ahead	3-4
# ::node	0.1.2	collapse-01	6-7
# ::node	0.1.2.0	crane	5-6
# ::root	0	vow-01
# ::edge	collapse-01	ARG1	crane	0.1.2	0.1.2.0
# ::edge	go-01	ARG1	hajj	0.1	0.1.0
# ::edge	go-01	ARG2	ahead	0.1	0.1.1
# ::edge	go-01	concession	collapse-01	0.1	0.1.2
# ::edge	have-org-role-91	ARG2	official	0.0.0	0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.0
# ::edge	vow-01	ARG1	go-01	0	0.1
# ::edge	vow-01	ARG1	person	0	0.0
(MRPNode-0 / vow-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-org-role-91 :ARG2 (MRPNode-3 / official))) :ARG1 (MRPNode-4 / go-01 :ARG1 (MRPNode-5 / hajj) :ARG2 (MRPNode-6 / ahead) :concession (MRPNode-7 / collapse-01 :ARG1 (MRPNode-8 / crane))))

# ::id 510
# ::snt China on high alert for typhoon Kalmaegi
# ::tok China on high alert for typhoon Kalmaegi
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 2-3|0.1 3-4|0 5-6|0.2 6-7|0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.766491 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	alert-01	3-4
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	china	0-1
# ::node	0.1	high-02	2-3
# ::node	0.2	typhoon	5-6
# ::node	0.2.0	name	6-7
# ::node	0.2.0.0	kalmaegi	6-7
# ::root	0	alert-01
# ::edge	alert-01	ARG1	country	0	0.0
# ::edge	alert-01	ARG1-of	high-02	0	0.1
# ::edge	alert-01	ARG2	typhoon	0	0.2
# ::edge	country	name	name	0.0	0.0.0
# ::edge	name	op1	china	0.0.0	0.0.0.0
# ::edge	name	op1	kalmaegi	0.2.0	0.2.0.0
# ::edge	typhoon	name	name	0.2	0.2.0
(MRPNode-0 / alert-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 china)) :ARG1-of (MRPNode-3 / high-02) :ARG2 (MRPNode-4 / typhoon :name (MRPNode-5 / name :op1 kalmaegi)))

# ::id 511
# ::snt Tokyo shares open higher over buoyant U.S. market
# ::tok Tokyo shares open higher over buoyant U.S. market
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 1-2|0.0 2-3|0 3-4|0.2 5-6|0.1.0.0 6-7|0.1.0.1+0.1.0.1.0+0.1.0.1.0.0 7-8|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.774087 ::parser eager_oracle ::smatch 0.8636363636363635 ::n_actions 30
# ::node	0	open-05	2-3
# ::node	0.0	share	1-2
# ::node	0.0.0	city	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	tokyo	0-1
# ::node	0.1	have-degree-91	
# ::node	0.1.0	market	7-8
# ::node	0.1.0.0	buoyant	5-6
# ::node	0.1.0.1	country	6-7
# ::node	0.1.0.1.0	name	6-7
# ::node	0.1.0.1.0.0	u.s.	6-7
# ::node	0.1.1	more	
# ::node	0.2	high-02	3-4
# ::root	0	open-05
# ::edge	city	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1.0.1	0.1.0.1.0
# ::edge	have-degree-91	ARG3	market	0.1	0.1.0
# ::edge	have-degree-91	ARG3	more	0.1	0.1.1
# ::edge	market	location	country	0.1.0	0.1.0.1
# ::edge	market	mod	buoyant	0.1.0	0.1.0.0
# ::edge	name	op1	tokyo	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	u.s.	0.1.0.1.0	0.1.0.1.0.0
# ::edge	open-05	ARG1	share	0	0.0
# ::edge	open-05	ARG1-of	have-degree-91	0	0.1
# ::edge	open-05	ARG1-of	high-02	0	0.2
# ::edge	share	location	city	0.0	0.0.0
(MRPNode-0 / open-05 :ARG1 (MRPNode-1 / share :location (MRPNode-2 / city :name (MRPNode-3 / name :op1 tokyo))) :ARG1-of (MRPNode-4 / have-degree-91 :ARG3 (MRPNode-5 / market :mod (MRPNode-6 / buoyant) :location (MRPNode-7 / country :name (MRPNode-8 / name :op1 u.s.))) :ARG3 (MRPNode-9 / more)) :ARG1-of (MRPNode-10 / high-02))

# ::id 512
# ::snt Tokyo shares open higher on buoyant U.S. market
# ::tok Tokyo shares open higher on buoyant U.S. market
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 1-2|0.0 2-3|0 3-4|0.1.2 5-6|0.1.0.0 6-7|0.1.0.1+0.1.0.1.0+0.1.0.1.0.0 7-8|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.781584 ::parser eager_oracle ::smatch 0.8444444444444444 ::n_actions 30
# ::node	0	open-01	2-3
# ::node	0.0	share	1-2
# ::node	0.0.0	city	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	tokyo	0-1
# ::node	0.1	have-degree-91	
# ::node	0.1.0	market	7-8
# ::node	0.1.0.0	buoyant	5-6
# ::node	0.1.0.1	country	6-7
# ::node	0.1.0.1.0	name	6-7
# ::node	0.1.0.1.0.0	u.s.	6-7
# ::node	0.1.1	more	
# ::node	0.1.2	high-02	3-4
# ::root	0	open-01
# ::edge	city	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1.0.1	0.1.0.1.0
# ::edge	have-degree-91	ARG2	high-02	0.1	0.1.2
# ::edge	have-degree-91	ARG3	market	0.1	0.1.0
# ::edge	have-degree-91	ARG3	more	0.1	0.1.1
# ::edge	market	location	country	0.1.0	0.1.0.1
# ::edge	market	mod	buoyant	0.1.0	0.1.0.0
# ::edge	name	op1	tokyo	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	u.s.	0.1.0.1.0	0.1.0.1.0.0
# ::edge	open-01	ARG1	share	0	0.0
# ::edge	open-01	ARG1-of	have-degree-91	0	0.1
# ::edge	open-01	ARG1-of	high-02	0	0.1.2
# ::edge	share	location	city	0.0	0.0.0
(MRPNode-0 / open-01 :ARG1 (MRPNode-1 / share :location (MRPNode-2 / city :name (MRPNode-3 / name :op1 tokyo))) :ARG1-of (MRPNode-4 / have-degree-91 :ARG3 (MRPNode-5 / market :mod (MRPNode-6 / buoyant) :location (MRPNode-7 / country :name (MRPNode-8 / name :op1 u.s.))) :ARG3 (MRPNode-9 / more) :ARG2 (MRPNode-10 / high-02)) :ARG1-of MRPNode-10)

# ::id 513
# ::snt Lewis Hamilton Takes Pole for Russian GP
# ::tok Lewis Hamilton Takes Pole for Russian GP
# ::alignments 0-2|0+0.0+0.0.0+0.0.1 5-6|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 6-7|0.1.0+0.1.0.1+0.1.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.786945 ::parser eager_oracle ::smatch 0.823529411764706 ::n_actions 17
# ::node	0	person	0-2
# ::node	0.0	name	0-2
# ::node	0.0.0	lewis	0-2
# ::node	0.0.1	hamilton	0-2
# ::node	0.1	win-01	
# ::node	0.1.0	game	6-7
# ::node	0.1.0.0	country	5-6
# ::node	0.1.0.0.0	name	5-6
# ::node	0.1.0.0.0.0	russia	5-6
# ::node	0.1.0.1	name	6-7
# ::node	0.1.0.1.0	gp	6-7
# ::root	0	person
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	game	mod	country	0.1.0	0.1.0.0
# ::edge	game	name	name	0.1.0	0.1.0.1
# ::edge	name	op1	gp	0.1.0.1	0.1.0.1.0
# ::edge	name	op1	lewis	0.0	0.0.0
# ::edge	name	op1	russia	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op2	hamilton	0.0	0.0.1
# ::edge	person	ARG0-of	win-01	0	0.1
# ::edge	person	name	name	0	0.0
# ::edge	win-01	ARG1	game	0.1	0.1.0
(MRPNode-0 / person :name (MRPNode-1 / name :op1 lewis :op2 hamilton) :ARG0-of (MRPNode-2 / win-01 :ARG1 (MRPNode-3 / game :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 russia)) :name (MRPNode-6 / name :op1 gp))))

# ::id 514
# ::snt Suspected Boko Haram suicide bombers in Nigeria kill 24
# ::tok Suspected Boko Haram suicide bombers in Nigeria kill 24
# ::alignments 0-1|0.1+0.1.0 1-3|0.1.1.1+0.1.1.1.0+0.1.1.1.0.0+0.1.1.1.0.1 3-4|0.1.1.0 4-5|0.1.1 6-7|0.0.1+0.0.1.0+0.0.1.0.0 7-8|0 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.795639 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 34
# ::node	0	kill-01	7-8
# ::node	0.0	person	
# ::node	0.0.0	24	8-9
# ::node	0.0.1	country	6-7
# ::node	0.0.1.0	name	6-7
# ::node	0.0.1.0.0	nigeria	6-7
# ::node	0.1	person	0-1
# ::node	0.1.0	suspect-01	0-1
# ::node	0.1.1	bomb-01	4-5
# ::node	0.1.1.0	suicide	3-4
# ::node	0.1.1.1	organization	1-3
# ::node	0.1.1.1.0	name	1-3
# ::node	0.1.1.1.0.0	boko	1-3
# ::node	0.1.1.1.0.1	haram	1-3
# ::root	0	kill-01
# ::edge	bomb-01	ARG1	organization	0.1.1	0.1.1.1
# ::edge	bomb-01	mod	suicide	0.1.1	0.1.1.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	kill-01	ARG0	person	0	0.1
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	name	op1	boko	0.1.1.1.0	0.1.1.1.0.0
# ::edge	name	op1	nigeria	0.0.1.0	0.0.1.0.0
# ::edge	name	op2	haram	0.1.1.1.0	0.1.1.1.0.1
# ::edge	organization	name	name	0.1.1.1	0.1.1.1.0
# ::edge	person	ARG0-of	bomb-01	0.1	0.1.1
# ::edge	person	ARG1-of	suspect-01	0.1	0.1.0
# ::edge	person	quant	24	0.0	0.0.0
# ::edge	person	quant	country	0.0	0.0.1
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 24 :quant (MRPNode-2 / country :name (MRPNode-3 / name :op1 nigeria))) :ARG0 (MRPNode-4 / person :ARG1-of (MRPNode-5 / suspect-01) :ARG0-of (MRPNode-6 / bomb-01 :mod (MRPNode-7 / suicide) :ARG1 (MRPNode-8 / organization :name (MRPNode-9 / name :op1 boko :op2 haram)))))

# ::id 515
# ::snt Mayawati demands president's rule in Kashmir
# ::tok Mayawati demands president 's rule in Kashmir
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.1+0.0.1.0+0.0.1.0.0 4-5|0.0 6-7|0.0.0+0.0.0.0+0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.801587 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	demand-01	1-2
# ::node	0.0	rule-03	4-5
# ::node	0.0.0	world-region	6-7
# ::node	0.0.0.0	name	6-7
# ::node	0.0.0.0.0	kashmir	6-7
# ::node	0.0.1	person	2-3
# ::node	0.0.1.0	have-org-role-91	2-3
# ::node	0.0.1.0.0	president	2-3
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	mayawati	0-1
# ::root	0	demand-01
# ::edge	demand-01	ARG0	person	0	0.1
# ::edge	demand-01	ARG1	rule-03	0	0.0
# ::edge	have-org-role-91	ARG2	president	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	kashmir	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	mayawati	0.1.0	0.1.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0.1	0.0.1.0
# ::edge	person	name	name	0.1	0.1.0
# ::edge	rule-03	ARG0	person	0.0	0.0.1
# ::edge	rule-03	ARG0	world-region	0.0	0.0.0
# ::edge	world-region	name	name	0.0.0	0.0.0.0
(MRPNode-0 / demand-01 :ARG1 (MRPNode-1 / rule-03 :ARG0 (MRPNode-2 / world-region :name (MRPNode-3 / name :op1 kashmir)) :ARG0 (MRPNode-4 / person :ARG0-of (MRPNode-5 / have-org-role-91 :ARG2 (MRPNode-6 / president)))) :ARG0 (MRPNode-7 / person :name (MRPNode-8 / name :op1 mayawati)))

# ::id 516
# ::snt Philippines typhoon death toll feared to hit 7,000
# ::tok Philippines typhoon death toll feared to hit 7,000
# ::alignments 0-1|0.0.1.1+0.0.1.1.0+0.0.1.1.0.0 1-2|0.0.1.0 2-3|0.0.1.2 3-4|0.0.1 4-5|0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.807863 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 30
# ::node	0	fear-01	4-5
# ::node	0.0	hit-02	6-7
# ::node	0.0.0	person	
# ::node	0.0.0.0	1500	
# ::node	0.0.1	toll	3-4
# ::node	0.0.1.0	typhoon	1-2
# ::node	0.0.1.1	country	0-1
# ::node	0.0.1.1.0	name	0-1
# ::node	0.0.1.1.0.0	philippines	0-1
# ::node	0.0.1.2	die-01	2-3
# ::root	0	fear-01
# ::edge	country	name	name	0.0.1.1	0.0.1.1.0
# ::edge	fear-01	ARG0	toll	0	0.0.1
# ::edge	fear-01	ARG1	hit-02	0	0.0
# ::edge	hit-02	ARG0	toll	0.0	0.0.1
# ::edge	hit-02	ARG1	person	0.0	0.0.0
# ::edge	name	op1	philippines	0.0.1.1.0	0.0.1.1.0.0
# ::edge	person	quant	1500	0.0.0	0.0.0.0
# ::edge	toll	mod	country	0.0.1	0.0.1.1
# ::edge	toll	mod	die-01	0.0.1	0.0.1.2
# ::edge	toll	mod	typhoon	0.0.1	0.0.1.0
(MRPNode-0 / fear-01 :ARG1 (MRPNode-1 / hit-02 :ARG1 (MRPNode-2 / person :quant 1500) :ARG0 (MRPNode-3 / toll :mod (MRPNode-4 / typhoon) :mod (MRPNode-5 / country :name (MRPNode-6 / name :op1 philippines)) :mod (MRPNode-7 / die-01))) :ARG0 MRPNode-3)

# ::id 517
# ::snt Cars, drivers plunge into river after Wash. I-5 bridge collapse
# ::tok Cars , drivers plunge into river after Wash . I - 5 bridge collapse
# ::alignments 0-1|0.0.0 2-3|0.0.1+0.0.1.0 3-4|0 5-6|0.2 6-7|0.1 10-11|0.0 12-13|0.1.0.0 13-14|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.818522 ::parser eager_oracle ::smatch 0.9 ::n_actions 46
# ::node	0	plunge-01	3-4
# ::node	0.0	and	10-11
# ::node	0.0.0	car	0-1
# ::node	0.0.1	person	2-3
# ::node	0.0.1.0	drive-01	2-3
# ::node	0.1	after	6-7
# ::node	0.1.0	collapse-01	13-14
# ::node	0.1.0.0	bridge	12-13
# ::node	0.1.0.0.0	name	7-10
# ::node	0.1.0.0.0.0	wash.	7-10
# ::node	0.1.0.0.0.1	i-5	7-10
# ::node	0.2	river	5-6
# ::root	0	plunge-01
# ::edge	after	op1	collapse-01	0.1	0.1.0
# ::edge	and	op1	car	0.0	0.0.0
# ::edge	and	op2	person	0.0	0.0.1
# ::edge	bridge	name	name	0.1.0.0	0.1.0.0.0
# ::edge	collapse-01	ARG1	bridge	0.1.0	0.1.0.0
# ::edge	name	op1	wash.	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op2	i-5	0.1.0.0.0	0.1.0.0.0.1
# ::edge	person	ARG0-of	drive-01	0.0.1	0.0.1.0
# ::edge	plunge-01	ARG1	and	0	0.0
# ::edge	plunge-01	ARG4	after	0	0.1
# ::edge	plunge-01	ARG4	river	0	0.2
(MRPNode-0 / plunge-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / car) :op2 (MRPNode-3 / person :ARG0-of (MRPNode-4 / drive-01))) :ARG4 (MRPNode-5 / after :op1 (MRPNode-6 / collapse-01 :ARG1 (MRPNode-7 / bridge :name (MRPNode-8 / name :op1 wash. :op2 i-5)))) :ARG4 (MRPNode-9 / river))

# ::id 518
# ::snt Egypt's Morsi faces trial for prison break, murder, says prosecution
# ::tok Egypt 's Morsi faces trial for prison break , murder , says prosecution
# ::alignments 0-1|0.0.0.1.2+0.0.0.1.2.0+0.0.0.1.2.0.0 2-3|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 3-4|0.0 6-7|0.0.0.0.0.0 7-8|0.0.0.0.0 9-10|0.0.0.1.1 11-12|0 12-13|0.1+0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.836192 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 45
# ::node	0	say-01	11-12
# ::node	0.0	face-01	3-4
# ::node	0.0.0	try-02	
# ::node	0.0.0.0	and	
# ::node	0.0.0.0.0	break-01	7-8
# ::node	0.0.0.0.0.0	prison	6-7
# ::node	0.0.0.1	person	2-3
# ::node	0.0.0.1.0	name	2-3
# ::node	0.0.0.1.0.0	morsi	2-3
# ::node	0.0.0.1.1	murder-01	9-10
# ::node	0.0.0.1.2	country	0-1
# ::node	0.0.0.1.2.0	name	0-1
# ::node	0.0.0.1.2.0.0	egypt	0-1
# ::node	0.1	person	12-13
# ::node	0.1.0	prosecute-01	12-13
# ::root	0	say-01
# ::edge	and	op1	break-01	0.0.0.0	0.0.0.0.0
# ::edge	break-01	ARG1	prison	0.0.0.0.0	0.0.0.0.0.0
# ::edge	country	name	name	0.0.0.1.2	0.0.0.1.2.0
# ::edge	face-01	ARG0	person	0.0	0.0.0.1
# ::edge	face-01	ARG1	try-02	0.0	0.0.0
# ::edge	name	op1	egypt	0.0.0.1.2.0	0.0.0.1.2.0.0
# ::edge	name	op1	morsi	0.0.0.1.0	0.0.0.1.0.0
# ::edge	person	ARG0-of	break-01	0.0.0.1	0.0.0.0.0
# ::edge	person	ARG0-of	murder-01	0.0.0.1	0.0.0.1.1
# ::edge	person	ARG0-of	prosecute-01	0.1	0.1.0
# ::edge	person	name	name	0.0.0.1	0.0.0.1.0
# ::edge	person	poss	country	0.0.0.1	0.0.0.1.2
# ::edge	say-01	ARG0	person	0	0.1
# ::edge	say-01	ARG1	face-01	0	0.0
# ::edge	try-02	ARG1	person	0.0.0	0.0.0.1
# ::edge	try-02	ARG3	and	0.0.0	0.0.0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / face-01 :ARG1 (MRPNode-2 / try-02 :ARG3 (MRPNode-3 / and :op1 (MRPNode-6 / break-01 :ARG1 (MRPNode-7 / prison))) :ARG1 (MRPNode-4 / person :name (MRPNode-5 / name :op1 morsi) :ARG0-of MRPNode-6 :ARG0-of (MRPNode-8 / murder-01) :poss (MRPNode-9 / country :name (MRPNode-10 / name :op1 egypt)))) :ARG0 MRPNode-4) :ARG0 (MRPNode-11 / person :ARG0-of (MRPNode-12 / prosecute-01)))

# ::id 519
# ::snt Thai army declares martial law
# ::tok Thai army declares martial law
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1 2-3|0 3-4|0.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.839395 ::parser eager_oracle ::smatch 0.9230769230769231 ::n_actions 22
# ::node	0	declare-02	2-3
# ::node	0.0	law	4-5
# ::node	0.0.0	martial	3-4
# ::node	0.1	army	1-2
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	thailand	0-1
# ::root	0	declare-02
# ::edge	army	mod	country	0.1	0.1.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	declare-02	ARG0	army	0	0.1
# ::edge	declare-02	ARG1	law	0	0.0
# ::edge	law	mod	martial	0.0	0.0.0
# ::edge	name	op1	thailand	0.1.0.0	0.1.0.0.0
(MRPNode-0 / declare-02 :ARG1 (MRPNode-1 / law :mod (MRPNode-2 / martial)) :ARG0 (MRPNode-3 / army :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 thailand))))

# ::id 520
# ::snt Israel agrees to 12 hour ceasefire
# ::tok Israel agrees to 12 hour ceasefire
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 3-4|0.1.1.0 4-5|0.1.1+0.1.1.1 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:46.843321 ::parser eager_oracle ::smatch 0.9333333333333333 ::n_actions 27
# ::node	0	agree-01	1-2
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	israel	0-1
# ::node	0.1	cease-01	5-6
# ::node	0.1.0	fire-01	
# ::node	0.1.1	temporal-quantity	4-5
# ::node	0.1.1.0	12	3-4
# ::node	0.1.1.1	hour	4-5
# ::root	0	agree-01
# ::edge	agree-01	ARG1	cease-01	0	0.1
# ::edge	agree-01	ARG1	country	0	0.0
# ::edge	cease-01	ARG1	fire-01	0.1	0.1.0
# ::edge	cease-01	duration	temporal-quantity	0.1	0.1.1
# ::edge	country	name	name	0.0	0.0.0
# ::edge	name	op1	israel	0.0.0	0.0.0.0
# ::edge	temporal-quantity	quant	12	0.1.1	0.1.1.0
# ::edge	temporal-quantity	unit	hour	0.1.1	0.1.1.1
(MRPNode-0 / agree-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 israel)) :ARG1 (MRPNode-3 / cease-01 :ARG1 (MRPNode-4 / fire-01) :duration (MRPNode-5 / temporal-quantity :quant 12 :unit (MRPNode-6 / hour))))

# ::id 521
# ::snt Quake of 6.2 magnitude strikes off Indonesia's Sumatra - USGS
# ::tok Quake of 6.2 magnitude strikes off Indonesia 's Sumatra - USGS
# ::alignments 0-1|0.0 2-3|0.0.0.0 4-5|0 5-6|0.2 6-7|0.2.0.1+0.2.0.1.0+0.2.0.1.0.0 8-9|0.2.0+0.2.0.0+0.2.0.0.0 10-11|0.1.0+0.1.0.0+0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.852868 ::parser eager_oracle ::smatch 0.8510638297872339 ::n_actions 32
# ::node	0	strike-01	4-5
# ::node	0.0	quake	0-1
# ::node	0.0.0	seismic-quantity	
# ::node	0.0.0.0	6.2	2-3
# ::node	0.1	say-01	
# ::node	0.1.0	country	10-11
# ::node	0.1.0.0	name	10-11
# ::node	0.1.0.0.0	usgs	10-11
# ::node	0.2	off	5-6
# ::node	0.2.0	island	8-9
# ::node	0.2.0.0	name	8-9
# ::node	0.2.0.0.0	sumatra	8-9
# ::node	0.2.0.1	country	6-7
# ::node	0.2.0.1.0	name	6-7
# ::node	0.2.0.1.0.0	indonesia	6-7
# ::root	0	strike-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	country	name	name	0.2.0.1	0.2.0.1.0
# ::edge	island	name	name	0.2.0	0.2.0.0
# ::edge	island	part-of	country	0.2.0	0.2.0.1
# ::edge	name	op1	indonesia	0.2.0.1.0	0.2.0.1.0.0
# ::edge	name	op1	sumatra	0.2.0.0	0.2.0.0.0
# ::edge	name	op1	usgs	0.1.0.0	0.1.0.0.0
# ::edge	off	op1	island	0.2	0.2.0
# ::edge	quake	quant	seismic-quantity	0.0	0.0.0
# ::edge	say-01	ARG0	country	0.1	0.1.0
# ::edge	seismic-quantity	quant	6.2	0.0.0	0.0.0.0
# ::edge	strike-01	ARG0	quake	0	0.0
# ::edge	strike-01	ARG1-of	say-01	0	0.1
# ::edge	strike-01	ARG2	off	0	0.2
(MRPNode-0 / strike-01 :ARG0 (MRPNode-1 / quake :quant (MRPNode-2 / seismic-quantity :quant 6.2)) :ARG1-of (MRPNode-3 / say-01 :ARG0 (MRPNode-4 / country :name (MRPNode-5 / name :op1 usgs))) :ARG2 (MRPNode-6 / off :op1 (MRPNode-7 / island :name (MRPNode-8 / name :op1 sumatra) :part-of (MRPNode-9 / country :name (MRPNode-10 / name :op1 indonesia)))))

# ::id 522
# ::snt Chinese satellite spots large object in search area
# ::tok Chinese satellite spots large object in search area
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1 2-3|0 3-4|0.0.0 4-5|0.0 6-7|0.2.0 7-8|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:46.858312 ::parser eager_oracle ::smatch 0.9411764705882353 ::n_actions 31
# ::node	0	spot-01	2-3
# ::node	0.0	object	4-5
# ::node	0.0.0	large	3-4
# ::node	0.1	satellite	1-2
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	china	0-1
# ::node	0.2	area	7-8
# ::node	0.2.0	search-01	6-7
# ::root	0	spot-01
# ::edge	area	location-of	search-01	0.2	0.2.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	name	op1	china	0.1.0.0	0.1.0.0.0
# ::edge	object	mod	large	0.0	0.0.0
# ::edge	satellite	mod	country	0.1	0.1.0
# ::edge	spot-01	ARG0	satellite	0	0.1
# ::edge	spot-01	ARG1	object	0	0.0
# ::edge	spot-01	location	area	0	0.2
(MRPNode-0 / spot-01 :ARG1 (MRPNode-1 / object :mod (MRPNode-2 / large)) :ARG0 (MRPNode-3 / satellite :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 china))) :location (MRPNode-6 / area :location-of (MRPNode-7 / search-01)))

# ::id 523
# ::snt Goa building collapse death toll touches 15
# ::tok Goa building collapse death toll touches 15
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 1-2|0.1.0.1 2-3|0.1.0 3-4|0.1.1 4-5|0.1 5-6|0 6-7|0.0+0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.864266 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	touch-01	5-6
# ::node	0.0	person	6-7
# ::node	0.0.0	15	6-7
# ::node	0.1	toll	4-5
# ::node	0.1.0	collapse-01	2-3
# ::node	0.1.0.0	city	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	goa	0-1
# ::node	0.1.0.1	build-01	1-2
# ::node	0.1.1	die-01	3-4
# ::root	0	touch-01
# ::edge	city	name	name	0.1.0.0	0.1.0.0.0
# ::edge	collapse-01	ARG1	build-01	0.1.0	0.1.0.1
# ::edge	collapse-01	ARG1	city	0.1.0	0.1.0.0
# ::edge	name	op1	goa	0.1.0.0.0	0.1.0.0.0.0
# ::edge	person	quant	15	0.0	0.0.0
# ::edge	toll	mod	collapse-01	0.1	0.1.0
# ::edge	toll	quant-of	die-01	0.1	0.1.1
# ::edge	touch-01	ARG0	toll	0	0.1
# ::edge	touch-01	ARG1	person	0	0.0
(MRPNode-0 / touch-01 :ARG1 (MRPNode-1 / person :quant 15) :ARG0 (MRPNode-2 / toll :mod (MRPNode-3 / collapse-01 :ARG1 (MRPNode-4 / city :name (MRPNode-5 / name :op1 goa)) :ARG1 (MRPNode-6 / build-01)) :quant-of (MRPNode-7 / die-01)))

# ::id 524
# ::snt Pak religious body endorses underage marriage
# ::tok Pak religious body endorses underage marriage
# ::alignments 1-2|0.1.0 2-3|0.1 3-4|0 4-5|0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:46.867005 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	endorse-01	3-4
# ::node	0.0	marry-01	5-6
# ::node	0.0.0	underage	4-5
# ::node	0.1	body	2-3
# ::node	0.1.0	religion	1-2
# ::root	0	endorse-01
# ::edge	body	mod	religion	0.1	0.1.0
# ::edge	endorse-01	ARG0	body	0	0.1
# ::edge	endorse-01	ARG1	marry-01	0	0.0
# ::edge	marry-01	mod	underage	0.0	0.0.0
(MRPNode-0 / endorse-01 :ARG1 (MRPNode-1 / marry-01 :mod (MRPNode-2 / underage)) :ARG0 (MRPNode-3 / body :mod (MRPNode-4 / religion)))

# ::id 525
# ::snt EU Ministers of Employment and Social policy will discuss how to boost employment, integrate social and economic policies
# ::tok EU Ministers of Employment and Social policy will discuss how to boost employment , integrate social and economic policies
# ::alignments 1-2|0.1+0.1.0+0.1.0.1 5-6|0.1.0.1.0.0 6-7|0.0.1.0.0.0+0.1.0.1.0 8-9|0 11-12|0.0.0+0.0.0.0 12-13|0.0.0.0.0 14-15|0.0.1+0.0.1.0 15-16|0.0.1.0.1.5.0 16-17|0.0+0.0.1.0.0 17-18|0.0.1.0.0.1.0 18-19|0.0.1.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.451376 ::parser eager_oracle ::smatch 0.8311688311688311 ::n_actions 81
# ::node	0	discuss-01	8-9
# ::node	0.0	and	16-17
# ::node	0.0.0	thing	11-12
# ::node	0.0.0.0	boost-01	11-12
# ::node	0.0.0.0.0	employ-01	12-13
# ::node	0.0.1	thing	14-15
# ::node	0.0.1.0	integrate-01	14-15
# ::node	0.0.1.0.0	and	16-17
# ::node	0.0.1.0.0.0	policy-01	6-7
# ::node	0.0.1.0.0.1	policy-01	18-19
# ::node	0.0.1.0.0.1.0	economy	17-18
# ::node	0.0.1.0.1	name	
# ::node	0.0.1.0.1.0	eu	
# ::node	0.0.1.0.1.1	of	
# ::node	0.0.1.0.1.2	social	
# ::node	0.0.1.0.1.3	and	
# ::node	0.0.1.0.1.4	social	
# ::node	0.0.1.0.1.5	policy-01	
# ::node	0.0.1.0.1.5.0	society	15-16
# ::node	0.1	person	1-2
# ::node	0.1.0	have-org-role-91	1-2
# ::node	0.1.0.0	organization	
# ::node	0.1.0.1	minister	1-2
# ::node	0.1.0.1.0	policy-01	6-7
# ::node	0.1.0.1.0.0	society	5-6
# ::root	0	discuss-01
# ::edge	and	op1	policy-01	0.0.1.0.0	0.0.1.0.0.0
# ::edge	and	op1	thing	0.0	0.0.0
# ::edge	and	op2	policy-01	0.0.1.0.0	0.0.1.0.0.1
# ::edge	and	op2	thing	0.0	0.0.1
# ::edge	boost-01	ARG1	employ-01	0.0.0.0	0.0.0.0.0
# ::edge	discuss-01	ARG0	person	0	0.1
# ::edge	discuss-01	ARG1	and	0	0.0
# ::edge	have-org-role-91	ARG1	organization	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	minister	0.1.0	0.1.0.1
# ::edge	integrate-01	ARG1	and	0.0.1.0	0.0.1.0.0
# ::edge	integrate-01	ARG1	name	0.0.1.0	0.0.1.0.1
# ::edge	minister	topic	policy-01	0.1.0.1	0.1.0.1.0
# ::edge	name	op1	eu	0.0.1.0.1	0.0.1.0.1.0
# ::edge	name	op2	of	0.0.1.0.1	0.0.1.0.1.1
# ::edge	name	op3	social	0.0.1.0.1	0.0.1.0.1.2
# ::edge	name	op4	and	0.0.1.0.1	0.0.1.0.1.3
# ::edge	name	op5	social	0.0.1.0.1	0.0.1.0.1.4
# ::edge	name	op6	policy-01	0.0.1.0.1	0.0.1.0.1.5
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	policy-01	ARG0	economy	0.0.1.0.0.1	0.0.1.0.0.1.0
# ::edge	policy-01	ARG2	society	0.0.1.0.1.5	0.0.1.0.1.5.0
# ::edge	policy-01	ARG2	society	0.1.0.1.0	0.1.0.1.0.0
# ::edge	thing	manner-of	boost-01	0.0.0	0.0.0.0
# ::edge	thing	manner-of	integrate-01	0.0.1	0.0.1.0
(MRPNode-0 / discuss-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / thing :manner-of (MRPNode-3 / boost-01 :ARG1 (MRPNode-4 / employ-01))) :op2 (MRPNode-5 / thing :manner-of (MRPNode-6 / integrate-01 :ARG1 (MRPNode-7 / and :op1 (MRPNode-8 / policy-01) :op2 (MRPNode-9 / policy-01 :ARG0 (MRPNode-10 / economy))) :ARG1 (MRPNode-11 / name :op1 eu :op2 of :op3 social :op4 and :op5 social :op6 (MRPNode-12 / policy-01 :ARG2 (MRPNode-13 / society)))))) :ARG0 (MRPNode-14 / person :ARG0-of (MRPNode-15 / have-org-role-91 :ARG1 (MRPNode-16 / organization) :ARG2 (MRPNode-17 / minister :topic (MRPNode-18 / policy-01 :ARG2 (MRPNode-19 / society))))))

# ::id 526
# ::snt U.S. and Russia reach a deal on Syria's chemical weapons
# ::tok U.S. and Russia reach a deal on Syria 's chemical weapons
# ::alignments 0-1|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 1-2|0.0.1 2-3|0.0.1.1+0.0.1.1.0+0.0.1.1.0.0 3-4|0 5-6|0.0 7-8|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 9-10|0.0.0.0 10-11|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.462286 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	reach-01	3-4
# ::node	0.0	deal-01	5-6
# ::node	0.0.0	weapon	10-11
# ::node	0.0.0.0	chemical	9-10
# ::node	0.0.0.1	country	7-8
# ::node	0.0.0.1.0	name	7-8
# ::node	0.0.0.1.0.0	syria	7-8
# ::node	0.0.1	and	1-2
# ::node	0.0.1.0	country	0-1
# ::node	0.0.1.0.0	name	0-1
# ::node	0.0.1.0.0.0	u.s.	0-1
# ::node	0.0.1.1	country	2-3
# ::node	0.0.1.1.0	name	2-3
# ::node	0.0.1.1.0.0	russia	2-3
# ::root	0	reach-01
# ::edge	and	op1	country	0.0.1	0.0.1.0
# ::edge	and	op2	country	0.0.1	0.0.1.1
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	country	name	name	0.0.1.0	0.0.1.0.0
# ::edge	country	name	name	0.0.1.1	0.0.1.1.0
# ::edge	deal-01	ARG0	and	0.0	0.0.1
# ::edge	deal-01	ARG2	weapon	0.0	0.0.0
# ::edge	name	op1	russia	0.0.1.1.0	0.0.1.1.0.0
# ::edge	name	op1	syria	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op1	u.s.	0.0.1.0.0	0.0.1.0.0.0
# ::edge	reach-01	ARG0	and	0	0.0.1
# ::edge	reach-01	ARG1	deal-01	0	0.0
# ::edge	weapon	mod	chemical	0.0.0	0.0.0.0
# ::edge	weapon	poss	country	0.0.0	0.0.0.1
(MRPNode-0 / reach-01 :ARG1 (MRPNode-1 / deal-01 :ARG2 (MRPNode-2 / weapon :mod (MRPNode-3 / chemical) :poss (MRPNode-4 / country :name (MRPNode-5 / name :op1 syria))) :ARG0 (MRPNode-6 / and :op1 (MRPNode-7 / country :name (MRPNode-8 / name :op1 u.s.)) :op2 (MRPNode-9 / country :name (MRPNode-10 / name :op1 russia)))) :ARG0 MRPNode-6)

# ::id 527
# ::snt Oklahoma examines what went wrong in botched execution
# ::tok Oklahoma examines what went wrong in botched execution
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 4-5|0.1+0.1.0 7-8|0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.467905 ::parser eager_oracle ::smatch 0.9285714285714286 ::n_actions 26
# ::node	0	examine-01	1-2
# ::node	0.0	state	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	oklahoma	0-1
# ::node	0.1	thing	4-5
# ::node	0.1.0	wrong-02	4-5
# ::node	0.1.0.0	execute-01	7-8
# ::node	0.1.0.0.0	breach-01	
# ::root	0	examine-01
# ::edge	examine-01	ARG1	state	0	0.0
# ::edge	examine-01	ARG1	thing	0	0.1
# ::edge	execute-01	ARG1-of	breach-01	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	oklahoma	0.0.0	0.0.0.0
# ::edge	state	name	name	0.0	0.0.0
# ::edge	thing	ARG1-of	wrong-02	0.1	0.1.0
# ::edge	wrong-02	ARG2	execute-01	0.1.0	0.1.0.0
(MRPNode-0 / examine-01 :ARG1 (MRPNode-1 / state :name (MRPNode-2 / name :op1 oklahoma)) :ARG1 (MRPNode-3 / thing :ARG1-of (MRPNode-4 / wrong-02 :ARG2 (MRPNode-5 / execute-01 :ARG1-of (MRPNode-6 / breach-01)))))

# ::id 528
# ::snt Thai protests escalate amid violence
# ::tok Thai protests escalate amid violence
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 1-2|0.0 2-3|0 4-5|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.470798 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 19
# ::node	0	escalate-01	2-3
# ::node	0.0	protest-01	1-2
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	thailand	0-1
# ::node	0.1	violence	4-5
# ::root	0	escalate-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	escalate-01	ARG0	violence	0	0.1
# ::edge	escalate-01	ARG1	protest-01	0	0.0
# ::edge	name	op1	thailand	0.0.0.0	0.0.0.0.0
# ::edge	protest-01	ARG0	country	0.0	0.0.0
(MRPNode-0 / escalate-01 :ARG1 (MRPNode-1 / protest-01 :ARG0 (MRPNode-2 / country :name (MRPNode-3 / name :op1 thailand))) :ARG0 (MRPNode-4 / violence))

# ::id 529
# ::snt Egypt imposes state of emergency after 95 people killed
# ::tok Egypt imposes state of emergency after 95 people killed
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0 4-5|0.0.0 5-6|0.2 6-7|0.2.0.0.0 7-8|0.2.0.0 8-9|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.477455 ::parser eager_oracle ::smatch 1.0 ::n_actions 35
# ::node	0	impose-01	1-2
# ::node	0.0	state	2-3
# ::node	0.0.0	emergency	4-5
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	egypt	0-1
# ::node	0.2	after	5-6
# ::node	0.2.0	kill-01	8-9
# ::node	0.2.0.0	person	7-8
# ::node	0.2.0.0.0	95	6-7
# ::root	0	impose-01
# ::edge	after	op1	kill-01	0.2	0.2.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	impose-01	ARG0	country	0	0.1
# ::edge	impose-01	ARG1	state	0	0.0
# ::edge	impose-01	time	after	0	0.2
# ::edge	kill-01	ARG1	person	0.2.0	0.2.0.0
# ::edge	name	op1	egypt	0.1.0	0.1.0.0
# ::edge	person	quant	95	0.2.0.0	0.2.0.0.0
# ::edge	state	mod	emergency	0.0	0.0.0
(MRPNode-0 / impose-01 :ARG1 (MRPNode-1 / state :mod (MRPNode-2 / emergency)) :ARG0 (MRPNode-3 / country :name (MRPNode-4 / name :op1 egypt)) :time (MRPNode-5 / after :op1 (MRPNode-6 / kill-01 :ARG1 (MRPNode-7 / person :quant 95))))

# ::id 530
# ::snt UN warns of plight of women, children in Syria's Homs
# ::tok UN warns of plight of women , children in Syria 's Homs
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 3-4|0.0 5-6|0.0.0.0 7-8|0.0.0.1 9-10|0.0.0.2.1+0.0.0.2.1.0+0.0.0.2.1.0.0 11-12|0.0.0.2+0.0.0.2.0+0.0.0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.488072 ::parser eager_oracle ::smatch 0.7727272727272727 ::n_actions 32
# ::node	0	warn-01	1-2
# ::node	0.0	plight	3-4
# ::node	0.0.0	and	
# ::node	0.0.0.0	woman	5-6
# ::node	0.0.0.1	child	7-8
# ::node	0.0.0.2	city	11-12
# ::node	0.0.0.2.0	name	11-12
# ::node	0.0.0.2.0.0	hom	11-12
# ::node	0.0.0.2.1	country	9-10
# ::node	0.0.0.2.1.0	name	9-10
# ::node	0.0.0.2.1.0.0	syria	9-10
# ::node	0.1	organization	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	un	0-1
# ::root	0	warn-01
# ::edge	and	location	city	0.0.0	0.0.0.2
# ::edge	and	op1	woman	0.0.0	0.0.0.0
# ::edge	and	op2	child	0.0.0	0.0.0.1
# ::edge	city	location	country	0.0.0.2	0.0.0.2.1
# ::edge	city	name	name	0.0.0.2	0.0.0.2.0
# ::edge	country	name	name	0.0.0.2.1	0.0.0.2.1.0
# ::edge	name	op1	hom	0.0.0.2.0	0.0.0.2.0.0
# ::edge	name	op1	syria	0.0.0.2.1.0	0.0.0.2.1.0.0
# ::edge	name	op1	un	0.1.0	0.1.0.0
# ::edge	organization	name	name	0.1	0.1.0
# ::edge	plight	domain	and	0.0	0.0.0
# ::edge	warn-01	ARG0	organization	0	0.1
# ::edge	warn-01	ARG1	plight	0	0.0
(MRPNode-0 / warn-01 :ARG1 (MRPNode-1 / plight :domain (MRPNode-2 / and :op1 (MRPNode-3 / woman) :op2 (MRPNode-4 / child) :location (MRPNode-5 / city :name (MRPNode-6 / name :op1 hom) :location (MRPNode-7 / country :name (MRPNode-8 / name :op1 syria))))) :ARG0 (MRPNode-9 / organization :name (MRPNode-10 / name :op1 un)))

# ::id 531
# ::snt Sony to sell PC unit and cut jobs
# ::tok Sony to sell PC unit and cut jobs
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 2-3|0.0 4-5|0.0.0 5-6|0 6-7|0.1 7-8|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.494057 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 30
# ::node	0	and	5-6
# ::node	0.0	sell-01	2-3
# ::node	0.0.0	unit	4-5
# ::node	0.0.0.0	correct-02	
# ::node	0.0.0.0.0	computer	
# ::node	0.0.1	company	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	sony	0-1
# ::node	0.1	cut-02	6-7
# ::node	0.1.0	job	7-8
# ::root	0	and
# ::edge	and	op1	sell-01	0	0.0
# ::edge	and	op2	cut-02	0	0.1
# ::edge	company	name	name	0.0.1	0.0.1.0
# ::edge	correct-02	mod	computer	0.0.0.0	0.0.0.0.0
# ::edge	cut-02	ARG0	company	0.1	0.0.1
# ::edge	cut-02	ARG1	job	0.1	0.1.0
# ::edge	name	op1	sony	0.0.1.0	0.0.1.0.0
# ::edge	sell-01	ARG0	company	0.0	0.0.1
# ::edge	sell-01	ARG1	unit	0.0	0.0.0
# ::edge	unit	mod	correct-02	0.0.0	0.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / sell-01 :ARG1 (MRPNode-2 / unit :mod (MRPNode-3 / correct-02 :mod (MRPNode-4 / computer))) :ARG0 (MRPNode-5 / company :name (MRPNode-6 / name :op1 sony))) :op2 (MRPNode-7 / cut-02 :ARG0 MRPNode-5 :ARG1 (MRPNode-8 / job)))

# ::id 532
# ::snt Protests after George Zimmerman acquitted in Trayvon Martin case
# ::tok Protests after George Zimmerman acquitted in Trayvon Martin case
# ::alignments 0-1|0 1-2|0.1 2-4|0.0+0.0.0+0.0.0.0+0.0.0.1 4-5|0.1.0 6-8|0.1.0.0.0+0.1.0.0.0.0+0.1.0.0.0.0.0+0.1.0.0.0.0.1 8-9|0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.500479 ::parser eager_oracle ::smatch 0.9500000000000001 ::n_actions 30
# ::node	0	protest-01	0-1
# ::node	0.0	person	2-4
# ::node	0.0.0	name	2-4
# ::node	0.0.0.0	george	2-4
# ::node	0.0.0.1	zimmerman	2-4
# ::node	0.1	after	1-2
# ::node	0.1.0	acquit-01	4-5
# ::node	0.1.0.0	case-03	8-9
# ::node	0.1.0.0.0	person	6-8
# ::node	0.1.0.0.0.0	name	6-8
# ::node	0.1.0.0.0.0.0	trayvon	6-8
# ::node	0.1.0.0.0.0.1	martin	6-8
# ::root	0	protest-01
# ::edge	acquit-01	ARG1	case-03	0.1.0	0.1.0.0
# ::edge	after	op1	acquit-01	0.1	0.1.0
# ::edge	case-03	ARG2	person	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	george	0.0.0	0.0.0.0
# ::edge	name	op1	trayvon	0.1.0.0.0.0	0.1.0.0.0.0.0
# ::edge	name	op2	martin	0.1.0.0.0.0	0.1.0.0.0.0.1
# ::edge	name	op2	zimmerman	0.0.0	0.0.0.1
# ::edge	person	ARG1-of	name	0.0	0.0.0
# ::edge	person	name	name	0.1.0.0.0	0.1.0.0.0.0
# ::edge	protest-01	ARG0	person	0	0.0
# ::edge	protest-01	time	after	0	0.1
(MRPNode-0 / protest-01 :ARG0 (MRPNode-1 / person :ARG1-of (MRPNode-2 / name :op1 george :op2 zimmerman)) :time (MRPNode-3 / after :op1 (MRPNode-4 / acquit-01 :ARG1 (MRPNode-5 / case-03 :ARG2 (MRPNode-6 / person :name (MRPNode-7 / name :op1 trayvon :op2 martin))))))

# ::id 533
# ::snt Jordan elected to take Saudi seat on UN Security Council
# ::tok Jordan elected to take Saudi seat on UN Security Council
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 1-2|0 3-4|0.0 4-5|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.1 5-6|0.0.0 7-10|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0+0.0.0.1.0.1+0.0.0.1.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:51.512367 ::parser eager_oracle ::smatch 0.9795918367346939 ::n_actions 32
# ::node	0	elect-01	1-2
# ::node	0.0	take-01	3-4
# ::node	0.0.0	seat-01	5-6
# ::node	0.0.0.0	country	4-5
# ::node	0.0.0.0.0	name	4-5
# ::node	0.0.0.0.0.0	saudi	4-5
# ::node	0.0.0.0.0.1	arabia	4-5
# ::node	0.0.0.1	organization	7-10
# ::node	0.0.0.1.0	name	7-10
# ::node	0.0.0.1.0.0	un	7-10
# ::node	0.0.0.1.0.1	security	7-10
# ::node	0.0.0.1.0.2	council	7-10
# ::node	0.0.1	country	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	jordan	0-1
# ::root	0	elect-01
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	elect-01	ARG0	country	0	0.0.1
# ::edge	elect-01	ARG1	take-01	0	0.0
# ::edge	name	op1	jordan	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	saudi	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	un	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op2	arabia	0.0.0.0.0	0.0.0.0.0.1
# ::edge	name	op2	security	0.0.0.1.0	0.0.0.1.0.1
# ::edge	name	op3	council	0.0.0.1.0	0.0.0.1.0.2
# ::edge	organization	name	name	0.0.0.1	0.0.0.1.0
# ::edge	seat-01	ARG2	country	0.0.0	0.0.0.0
# ::edge	seat-01	ARG2	organization	0.0.0	0.0.0.1
# ::edge	take-01	ARG0	country	0.0	0.0.1
# ::edge	take-01	ARG1	seat-01	0.0	0.0.0
(MRPNode-0 / elect-01 :ARG1 (MRPNode-1 / take-01 :ARG1 (MRPNode-2 / seat-01 :ARG2 (MRPNode-3 / country :name (MRPNode-4 / name :op1 saudi :op2 arabia)) :ARG2 (MRPNode-5 / organization :name (MRPNode-6 / name :op1 un :op2 security :op3 council))) :ARG0 (MRPNode-7 / country :name (MRPNode-8 / name :op1 jordan))) :ARG0 MRPNode-7)

# ::id 534
# ::snt Maldives begins to vote in controversy-ridden presidential poll
# ::tok Maldives begins to vote in controversy - ridden presidential poll
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 1-2|0 3-4|0.0 5-6|0.0.0.1.0 7-8|0.0.0.1 8-9|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 9-10|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.521748 ::parser eager_oracle ::smatch 0.9545454545454546 ::n_actions 43
# ::node	0	begin-01	1-2
# ::node	0.0	vote-01	3-4
# ::node	0.0.0	poll-01	9-10
# ::node	0.0.0.0	person	8-9
# ::node	0.0.0.0.0	have-org-role-91	8-9
# ::node	0.0.0.0.0.0	president	8-9
# ::node	0.0.0.1	ride-01	7-8
# ::node	0.0.0.1.0	controversy	5-6
# ::node	0.0.1	country	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	maldive	0-1
# ::root	0	begin-01
# ::edge	begin-01	ARG0	country	0	0.0.1
# ::edge	begin-01	ARG1	vote-01	0	0.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	have-org-role-91	ARG2	president	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	maldive	0.0.1.0	0.0.1.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0.0.0	0.0.0.0.0
# ::edge	poll-01	ARG0	person	0.0.0	0.0.0.0
# ::edge	poll-01	ARG1-of	ride-01	0.0.0	0.0.0.1
# ::edge	ride-01	ARG0	controversy	0.0.0.1	0.0.0.1.0
# ::edge	vote-01	ARG0	country	0.0	0.0.1
# ::edge	vote-01	manner	poll-01	0.0	0.0.0
(MRPNode-0 / begin-01 :ARG1 (MRPNode-1 / vote-01 :manner (MRPNode-2 / poll-01 :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-org-role-91 :ARG2 (MRPNode-5 / president))) :ARG1-of (MRPNode-6 / ride-01 :ARG0 (MRPNode-7 / controversy))) :ARG0 (MRPNode-8 / country :name (MRPNode-9 / name :op1 maldive))) :ARG0 MRPNode-8)

# ::id 535
# ::snt Police surround protesters in Belfast ahead of G8
# ::tok Police surround protesters in Belfast ahead of G 8
# ::alignments 0-1|0.1 1-2|0 2-3|0.0+0.0.0 4-5|0.3+0.3.0+0.3.0.0 5-6|0.2 7-8|0.2.0+0.2.0.0+0.2.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.528891 ::parser eager_oracle ::smatch 0.9500000000000001 ::n_actions 33
# ::node	0	surround-01	1-2
# ::node	0.0	person	2-3
# ::node	0.0.0	protest-01	2-3
# ::node	0.1	police	0-1
# ::node	0.2	ahead	5-6
# ::node	0.2.0	person	7-8
# ::node	0.2.0.0	name	7-8
# ::node	0.2.0.0.0	g8	7-8
# ::node	0.3	city	4-5
# ::node	0.3.0	name	4-5
# ::node	0.3.0.0	belfast	4-5
# ::root	0	surround-01
# ::edge	ahead	op1	person	0.2	0.2.0
# ::edge	city	name	name	0.3	0.3.0
# ::edge	name	op1	belfast	0.3.0	0.3.0.0
# ::edge	name	op1	g8	0.2.0.0	0.2.0.0.0
# ::edge	person	ARG0-of	protest-01	0.0	0.0.0
# ::edge	person	name	name	0.2.0	0.2.0.0
# ::edge	surround-01	ARG0	police	0	0.1
# ::edge	surround-01	ARG1	person	0	0.0
# ::edge	surround-01	ARG2	ahead	0	0.2
# ::edge	surround-01	location	city	0	0.3
(MRPNode-0 / surround-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / protest-01)) :ARG0 (MRPNode-3 / police) :ARG2 (MRPNode-4 / ahead :op1 (MRPNode-5 / person :name (MRPNode-6 / name :op1 g8))) :location (MRPNode-7 / city :name (MRPNode-8 / name :op1 belfast)))

# ::id 536
# ::snt Ten rescued off Waterford, Dublin coasts
# ::tok Ten rescued off Waterford , Dublin coasts
# ::alignments 1-2|0 2-3|0.1 3-4|0.1.0+0.1.0.0+0.1.0.0.0 5-6|0.1.1.0+0.1.1.0.0+0.1.1.0.0.0 6-7|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.534089 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 24
# ::node	0	rescue-01	1-2
# ::node	0.0	person	
# ::node	0.0.0	10	
# ::node	0.1	off	2-3
# ::node	0.1.0	city	3-4
# ::node	0.1.0.0	name	3-4
# ::node	0.1.0.0.0	waterford	3-4
# ::node	0.1.1	coast	6-7
# ::node	0.1.1.0	city	5-6
# ::node	0.1.1.0.0	name	5-6
# ::node	0.1.1.0.0.0	dublin	5-6
# ::root	0	rescue-01
# ::edge	city	name	name	0.1.0	0.1.0.0
# ::edge	city	name	name	0.1.1.0	0.1.1.0.0
# ::edge	coast	part-of	city	0.1.1	0.1.1.0
# ::edge	name	op1	dublin	0.1.1.0.0	0.1.1.0.0.0
# ::edge	name	op1	waterford	0.1.0.0	0.1.0.0.0
# ::edge	off	op1	city	0.1	0.1.0
# ::edge	off	op2	coast	0.1	0.1.1
# ::edge	person	quant	10	0.0	0.0.0
# ::edge	rescue-01	ARG1	person	0	0.0
# ::edge	rescue-01	location	off	0	0.1
(MRPNode-0 / rescue-01 :ARG1 (MRPNode-1 / person :quant 10) :location (MRPNode-2 / off :op1 (MRPNode-3 / city :name (MRPNode-4 / name :op1 waterford)) :op2 (MRPNode-5 / coast :part-of (MRPNode-6 / city :name (MRPNode-7 / name :op1 dublin)))))

# ::id 537
# ::snt World Cup hit by new stadium death
# ::tok World Cup hit by new stadium death
# ::alignments 0-2|0.1+0.1.0+0.1.0.0+0.1.0.1 2-3|0 4-5|0.0.0.0 5-6|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.540426 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	hit-01	2-3
# ::node	0.0	die-01	6-7
# ::node	0.0.0	stadium	5-6
# ::node	0.0.0.0	new-01	4-5
# ::node	0.1	game	0-2
# ::node	0.1.0	name	0-2
# ::node	0.1.0.0	world	0-2
# ::node	0.1.0.1	cup	0-2
# ::root	0	hit-01
# ::edge	die-01	ARG1	stadium	0.0	0.0.0
# ::edge	game	name	name	0.1	0.1.0
# ::edge	hit-01	ARG1	die-01	0	0.0
# ::edge	hit-01	ARG1	game	0	0.1
# ::edge	name	op1	world	0.1.0	0.1.0.0
# ::edge	name	op2	cup	0.1.0	0.1.0.1
# ::edge	stadium	ARG1-of	new-01	0.0.0	0.0.0.0
(MRPNode-0 / hit-01 :ARG1 (MRPNode-1 / die-01 :ARG1 (MRPNode-2 / stadium :ARG1-of (MRPNode-3 / new-01))) :ARG1 (MRPNode-4 / game :name (MRPNode-5 / name :op1 world :op2 cup)))

# ::id 538
# ::snt Greece reaches agreement with troika, bailout tranche expected within days
# ::tok Greece reaches agreement with troika , bailout tranche expected within days
# ::alignments 0-1|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 1-2|0.0 2-3|0.0.0 4-5|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 6-7|0.1.0.0 7-8|0.1.0 8-9|0.1 10-11|0.1.1.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.552165 ::parser eager_oracle ::smatch 0.7169811320754718 ::n_actions 37
# ::node	0	and	
# ::node	0.0	reach-01	1-2
# ::node	0.0.0	agree-01	2-3
# ::node	0.0.0.0	organization	4-5
# ::node	0.0.0.0.0	name	4-5
# ::node	0.0.0.0.0.0	troika	4-5
# ::node	0.0.0.1	country	0-1
# ::node	0.0.0.1.0	name	0-1
# ::node	0.0.0.1.0.0	greece	0-1
# ::node	0.1	expect-01	8-9
# ::node	0.1.0	tranche	7-8
# ::node	0.1.0.0	bail-out-02	6-7
# ::node	0.1.1	after	
# ::node	0.1.1.0	up-to	
# ::node	0.1.1.0.0	temporal-quantity	
# ::node	0.1.1.0.0.0	1	
# ::node	0.1.1.0.0.1	day	10-11
# ::root	0	and
# ::edge	after	quant	up-to	0.1.1	0.1.1.0
# ::edge	agree-01	ARG0	country	0.0.0	0.0.0.1
# ::edge	agree-01	ARG2	organization	0.0.0	0.0.0.0
# ::edge	and	op1	reach-01	0	0.0
# ::edge	and	op2	expect-01	0	0.1
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	expect-01	ARG1	tranche	0.1	0.1.0
# ::edge	expect-01	time	after	0.1	0.1.1
# ::edge	name	op1	greece	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op1	troika	0.0.0.0.0	0.0.0.0.0.0
# ::edge	organization	name	name	0.0.0.0	0.0.0.0.0
# ::edge	reach-01	ARG0	country	0.0	0.0.0.1
# ::edge	reach-01	ARG1	agree-01	0.0	0.0.0
# ::edge	temporal-quantity	quant	1	0.1.1.0.0	0.1.1.0.0.0
# ::edge	temporal-quantity	quant	day	0.1.1.0.0	0.1.1.0.0.1
# ::edge	tranche	ARG2-of	bail-out-02	0.1.0	0.1.0.0
# ::edge	up-to	op1	temporal-quantity	0.1.1.0	0.1.1.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / reach-01 :ARG1 (MRPNode-2 / agree-01 :ARG2 (MRPNode-3 / organization :name (MRPNode-4 / name :op1 troika)) :ARG0 (MRPNode-5 / country :name (MRPNode-6 / name :op1 greece))) :ARG0 MRPNode-5) :op2 (MRPNode-7 / expect-01 :ARG1 (MRPNode-8 / tranche :ARG2-of (MRPNode-9 / bail-out-02)) :time (MRPNode-10 / after :quant (MRPNode-11 / up-to :op1 (MRPNode-12 / temporal-quantity :quant 1 :quant (MRPNode-13 / day))))))

# ::id 539
# ::snt Senior CPC official meets top DPRK leader's special envoy
# ::tok Senior CPC official meets top DPRK leader 's special envoy
# ::alignments 2-3|0.0+0.0.0+0.0.0.1 3-4|0 4-5|0.0.0.1.0 5-6|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 6-7|0.1.1+0.1.1.0 8-9|0.1.0 9-10|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.562786 ::parser eager_oracle ::smatch 1.0 ::n_actions 51
# ::node	0	meet-03	3-4
# ::node	0.0	person	2-3
# ::node	0.0.0	have-org-role-91	2-3
# ::node	0.0.0.0	political-party	5-6
# ::node	0.0.0.0.0	name	5-6
# ::node	0.0.0.0.0.0	dprk	5-6
# ::node	0.0.0.1	official	2-3
# ::node	0.0.0.1.0	top	4-5
# ::node	0.1	envoy	9-10
# ::node	0.1.0	special-02	8-9
# ::node	0.1.1	person	6-7
# ::node	0.1.1.0	lead-02	6-7
# ::root	0	meet-03
# ::edge	envoy	ARG1-of	special-02	0.1	0.1.0
# ::edge	envoy	poss	person	0.1	0.1.1
# ::edge	have-org-role-91	ARG1	political-party	0.0.0	0.0.0.0
# ::edge	have-org-role-91	ARG2	official	0.0.0	0.0.0.1
# ::edge	lead-02	ARG1	political-party	0.1.1.0	0.0.0.0
# ::edge	meet-03	ARG1	envoy	0	0.1
# ::edge	meet-03	ARG1	person	0	0.0
# ::edge	name	op1	dprk	0.0.0.0.0	0.0.0.0.0.0
# ::edge	official	mod	top	0.0.0.1	0.0.0.1.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.0
# ::edge	person	ARG0-of	lead-02	0.1.1	0.1.1.0
# ::edge	political-party	name	name	0.0.0.0	0.0.0.0.0
(MRPNode-0 / meet-03 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-org-role-91 :ARG1 (MRPNode-3 / political-party :name (MRPNode-4 / name :op1 dprk)) :ARG2 (MRPNode-5 / official :mod (MRPNode-6 / top)))) :ARG1 (MRPNode-7 / envoy :ARG1-of (MRPNode-8 / special-02) :poss (MRPNode-9 / person :ARG0-of (MRPNode-10 / lead-02 :ARG1 MRPNode-3))))

# ::id 540
# ::snt US House Republicans elect Paul Ryan as speaker
# ::tok US House Republicans elect Paul Ryan as speaker
# ::alignments 0-1|0.1+0.1.1+0.1.1.0+0.1.1.0.0 1-3|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0+0.0.1.0.0.1 3-4|0 4-5|0.1.0 5-6|0.0+0.0.0+0.0.0.0 7-8|0.0.1+0.0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.573643 ::parser eager_oracle ::smatch 0.8235294117647058 ::n_actions 40
# ::node	0	elect-01	3-4
# ::node	0.0	person	5-6
# ::node	0.0.0	name	5-6
# ::node	0.0.0.0	ryan	5-6
# ::node	0.0.1	have-org-role-91	7-8
# ::node	0.0.1.0	government-organization	1-3
# ::node	0.0.1.0.0	name	1-3
# ::node	0.0.1.0.0.0	house	1-3
# ::node	0.0.1.0.0.1	republican	1-3
# ::node	0.0.1.1	speaker	7-8
# ::node	0.1	person	0-1
# ::node	0.1.0	paul	4-5
# ::node	0.1.1	country	0-1
# ::node	0.1.1.0	name	0-1
# ::node	0.1.1.0.0	us	0-1
# ::root	0	elect-01
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	elect-01	ARG0	person	0	0.1
# ::edge	elect-01	ARG1	person	0	0.0
# ::edge	government-organization	name	name	0.0.1.0	0.0.1.0.0
# ::edge	have-org-role-91	ARG1	government-organization	0.0.1	0.0.1.0
# ::edge	have-org-role-91	ARG2	speaker	0.0.1	0.0.1.1
# ::edge	name	op1	house	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	us	0.1.1.0	0.1.1.0.0
# ::edge	name	op2	republican	0.0.1.0.0	0.0.1.0.0.1
# ::edge	name	op2	ryan	0.0.0	0.0.0.0
# ::edge	person	ARG0-of	country	0.1	0.1.1
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.1
# ::edge	person	ARG0-of	name	0.0	0.0.0
# ::edge	person	mod	paul	0.1	0.1.0
(MRPNode-0 / elect-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / name :op2 ryan) :ARG0-of (MRPNode-3 / have-org-role-91 :ARG1 (MRPNode-4 / government-organization :name (MRPNode-5 / name :op1 house :op2 republican)) :ARG2 (MRPNode-6 / speaker))) :ARG0 (MRPNode-7 / person :mod paul :ARG0-of (MRPNode-8 / country :name (MRPNode-9 / name :op1 us))))

# ::id 541
# ::snt Top Asian News at 4:00 p.m. GMT
# ::tok Top Asian News at 4:00 p.m. GMT
# ::alignments 0-3|0.0+0.0.0+0.0.1+0.0.2 6-7|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.576710 ::parser eager_oracle ::smatch 0.64 ::n_actions 14
# ::node	0	broadcast-program	
# ::node	0.0	name	0-3
# ::node	0.0.0	top	0-3
# ::node	0.0.1	asian	0-3
# ::node	0.0.2	news	0-3
# ::node	0.1	broadcast-program	6-7
# ::node	0.1.0	name	6-7
# ::node	0.1.0.0	gmt	6-7
# ::node	0.2	date-entity	
# ::node	0.2.0	"4:00"	
# ::root	0	broadcast-program
# ::edge	broadcast-program	medium	broadcast-program	0	0.1
# ::edge	broadcast-program	mod	name	0	0.0
# ::edge	broadcast-program	name	name	0.1	0.1.0
# ::edge	broadcast-program	time	date-entity	0	0.2
# ::edge	date-entity	time	"4:00"	0.2	0.2.0
# ::edge	name	op1	gmt	0.1.0	0.1.0.0
# ::edge	name	op1	top	0.0	0.0.0
# ::edge	name	op2	asian	0.0	0.0.1
# ::edge	name	op3	news	0.0	0.0.2
(MRPNode-0 / broadcast-program :mod (MRPNode-1 / name :op1 top :op2 asian :op3 news) :medium (MRPNode-2 / broadcast-program :name (MRPNode-3 / name :op1 gmt)) :time (MRPNode-4 / date-entity :time "4:00"))

# ::id 542
# ::snt Headlines in major Iranian newspapers on Sept 27
# ::tok Headlines in major Iranian newspapers on Sept 27
# ::alignments 0-1|0+0.0 2-3|0.0.0.0 3-4|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 4-5|0.0.0 7-8|0.0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.590858 ::parser eager_oracle ::smatch 0.8000000000000002 ::n_actions 28
# ::node	0	thing	0-1
# ::node	0.0	headline-01	0-1
# ::node	0.0.0	newspaper	4-5
# ::node	0.0.0.0	major-02	2-3
# ::node	0.0.0.1	country	3-4
# ::node	0.0.0.1.0	name	3-4
# ::node	0.0.0.1.0.0	iran	3-4
# ::node	0.0.1	date-entity	
# ::node	0.0.1.0	9	
# ::node	0.0.1.1	27	7-8
# ::root	0	thing
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	date-entity	day	27	0.0.1	0.0.1.1
# ::edge	date-entity	month	9	0.0.1	0.0.1.0
# ::edge	headline-01	time	date-entity	0.0	0.0.1
# ::edge	headline-01	time	newspaper	0.0	0.0.0
# ::edge	name	op1	iran	0.0.0.1.0	0.0.0.1.0.0
# ::edge	newspaper	mod	country	0.0.0	0.0.0.1
# ::edge	newspaper	mod	major-02	0.0.0	0.0.0.0
# ::edge	thing	ARG2-of	headline-01	0	0.0
(MRPNode-0 / thing :ARG2-of (MRPNode-1 / headline-01 :time (MRPNode-2 / newspaper :mod (MRPNode-3 / major-02) :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 iran))) :time (MRPNode-6 / date-entity :month 9 :day 27)))

# ::id 543
# ::snt Saudi-led airstrikes hit Yemeni capital
# ::tok Saudi - led airstrikes hit Yemeni capital
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0+0.1.0.0.0.1 2-3|0.1.0 4-5|0 5-6|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 6-7|0.0.0+0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.598013 ::parser eager_oracle ::smatch 0.6976744186046512 ::n_actions 26
# ::node	0	hit-01	4-5
# ::node	0.0	city	
# ::node	0.0.0	have-org-role-91	6-7
# ::node	0.0.0.0	country	5-6
# ::node	0.0.0.0.0	name	5-6
# ::node	0.0.0.0.0.0	yemen	5-6
# ::node	0.0.0.1	capital	6-7
# ::node	0.1	strike-01	
# ::node	0.1.0	lead-02	2-3
# ::node	0.1.0.0	country	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	saudi	0-1
# ::node	0.1.0.0.0.1	arabia	0-1
# ::node	0.1.1	air	
# ::root	0	hit-01
# ::edge	city	ARG0-of	have-org-role-91	0.0	0.0.0
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.0.0	0.0.0.0
# ::edge	have-org-role-91	ARG2	capital	0.0.0	0.0.0.1
# ::edge	hit-01	ARG0	strike-01	0	0.1
# ::edge	hit-01	ARG1	city	0	0.0
# ::edge	lead-02	ARG0	country	0.1.0	0.1.0.0
# ::edge	name	op1	saudi	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op1	yemen	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op2	arabia	0.1.0.0.0	0.1.0.0.0.1
# ::edge	strike-01	ARG0	lead-02	0.1	0.1.0
# ::edge	strike-01	path	air	0.1	0.1.1
(MRPNode-0 / hit-01 :ARG1 (MRPNode-1 / city :ARG0-of (MRPNode-2 / have-org-role-91 :ARG1 (MRPNode-3 / country :name (MRPNode-4 / name :op1 yemen)) :ARG2 (MRPNode-5 / capital))) :ARG0 (MRPNode-6 / strike-01 :ARG0 (MRPNode-7 / lead-02 :ARG0 (MRPNode-8 / country :name (MRPNode-9 / name :op1 saudi :op2 arabia))) :path (MRPNode-10 / air)))

# ::id 544
# ::snt Militant attack from Afghanistan kills four in Upper Dir
# ::tok Militant attack from Afghanistan kills four in Upper Dir
# ::alignments 0-1|0.1.0 1-2|0.1 3-4|0.1.1+0.1.1.0+0.1.1.0.0 4-5|0 5-6|0.0+0.0.0 7-9|0.2+0.2.0+0.2.0.0+0.2.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.605473 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	kill-01	4-5
# ::node	0.0	person	5-6
# ::node	0.0.0	4	5-6
# ::node	0.1	attack-01	1-2
# ::node	0.1.0	militant	0-1
# ::node	0.1.1	country	3-4
# ::node	0.1.1.0	name	3-4
# ::node	0.1.1.0.0	afghanistan	3-4
# ::node	0.2	city	7-9
# ::node	0.2.0	name	7-9
# ::node	0.2.0.0	upper	7-9
# ::node	0.2.0.1	dir	7-9
# ::root	0	kill-01
# ::edge	attack-01	ARG0	militant	0.1	0.1.0
# ::edge	attack-01	source	country	0.1	0.1.1
# ::edge	city	name	name	0.2	0.2.0
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	kill-01	ARG0	attack-01	0	0.1
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	location	city	0	0.2
# ::edge	name	op1	afghanistan	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	upper	0.2.0	0.2.0.0
# ::edge	name	op2	dir	0.2.0	0.2.0.1
# ::edge	person	quant	4	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 4) :ARG0 (MRPNode-2 / attack-01 :ARG0 (MRPNode-3 / militant) :source (MRPNode-4 / country :name (MRPNode-5 / name :op1 afghanistan))) :location (MRPNode-6 / city :name (MRPNode-7 / name :op1 upper :op2 dir)))

# ::id 545
# ::snt Mali hunts jihadist nightclub killers
# ::tok Mali hunts jihadist nightclub killers
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.0 3-4|0.0.1.0 4-5|0.0+0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.609943 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	hunt-01	1-2
# ::node	0.0	person	4-5
# ::node	0.0.0	jihadist	2-3
# ::node	0.0.1	kill-01	4-5
# ::node	0.0.1.0	nightclub	3-4
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	mali	0-1
# ::root	0	hunt-01
# ::edge	hunt-01	ARG1	person	0	0.0
# ::edge	hunt-01	ARG1	person	0	0.1
# ::edge	kill-01	ARG1	nightclub	0.0.1	0.0.1.0
# ::edge	name	op1	mali	0.1.0	0.1.0.0
# ::edge	person	ARG0-of	kill-01	0.0	0.0.1
# ::edge	person	mod	jihadist	0.0	0.0.0
# ::edge	person	name	name	0.1	0.1.0
(MRPNode-0 / hunt-01 :ARG1 (MRPNode-1 / person :mod (MRPNode-2 / jihadist) :ARG0-of (MRPNode-3 / kill-01 :ARG1 (MRPNode-4 / nightclub))) :ARG1 (MRPNode-5 / person :name (MRPNode-6 / name :op1 mali)))

# ::id 546
# ::snt Sierra Leone in Ebola lockdown
# ::tok Sierra Leone in Ebola lockdown
# ::alignments 0-2|0.0+0.0.0+0.0.0.0+0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.611870 ::parser eager_oracle ::smatch 0.7142857142857143 ::n_actions 10
# ::node	0	flood-01	
# ::node	0.0	country	0-2
# ::node	0.0.0	name	0-2
# ::node	0.0.0.0	sierra	0-2
# ::node	0.0.0.1	leone	0-2
# ::root	0	flood-01
# ::edge	country	name	name	0.0	0.0.0
# ::edge	flood-01	ARG1	country	0	0.0
# ::edge	name	op1	sierra	0.0.0	0.0.0.0
# ::edge	name	op2	leone	0.0.0	0.0.0.1
(MRPNode-0 / flood-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 sierra :op2 leone)))

# ::id 547
# ::snt Israeli forces detain Palestinian MP in Hebron
# ::tok Israeli forces detain Palestinian MP in Hebron
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1 2-3|0 3-4|0.0.0+0.0.0.0+0.0.0.0.0 6-7|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.618627 ::parser eager_oracle ::smatch 0.761904761904762 ::n_actions 23
# ::node	0	detain-01	2-3
# ::node	0.0	person	
# ::node	0.0.0	country	3-4
# ::node	0.0.0.0	name	3-4
# ::node	0.0.0.0.0	palestine	3-4
# ::node	0.0.1	reside-01	
# ::node	0.1	force	1-2
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	israel	0-1
# ::node	0.2	city	6-7
# ::node	0.2.0	name	6-7
# ::node	0.2.0.0	hebron	6-7
# ::root	0	detain-01
# ::edge	city	name	name	0.2	0.2.0
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	detain-01	ARG0	force	0	0.1
# ::edge	detain-01	ARG1	person	0	0.0
# ::edge	detain-01	location	city	0	0.2
# ::edge	force	mod	country	0.1	0.1.0
# ::edge	name	op1	hebron	0.2.0	0.2.0.0
# ::edge	name	op1	israel	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	palestine	0.0.0.0	0.0.0.0.0
# ::edge	person	ARG0-of	reside-01	0.0	0.0.1
# ::edge	person	mod	country	0.0	0.0.0
(MRPNode-0 / detain-01 :ARG1 (MRPNode-1 / person :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 palestine)) :ARG0-of (MRPNode-4 / reside-01)) :ARG0 (MRPNode-5 / force :mod (MRPNode-6 / country :name (MRPNode-7 / name :op1 israel))) :location (MRPNode-8 / city :name (MRPNode-9 / name :op1 hebron)))

# ::id 548
# ::snt More than 3,400 migrants rescued at sea in Mediterranean
# ::tok More than 3,400 migrants rescued at sea in Mediterranean
# ::alignments 0-1|0.0.1 3-4|0.0+0.0.0 4-5|0 6-7|0.1 8-9|0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.624681 ::parser eager_oracle ::smatch 0.962962962962963 ::n_actions 30
# ::node	0	rescue-01	4-5
# ::node	0.0	person	3-4
# ::node	0.0.0	migrate-01	3-4
# ::node	0.0.1	more-than	0-1
# ::node	0.0.1.0	3000	
# ::node	0.1	sea	6-7
# ::node	0.1.0	name	8-9
# ::node	0.1.0.0	mediterranean	8-9
# ::root	0	rescue-01
# ::edge	more-than	op1	3000	0.0.1	0.0.1.0
# ::edge	name	op1	mediterranean	0.1.0	0.1.0.0
# ::edge	person	ARG0-of	migrate-01	0.0	0.0.0
# ::edge	person	quant	more-than	0.0	0.0.1
# ::edge	rescue-01	ARG1	person	0	0.0
# ::edge	rescue-01	location	sea	0	0.1
# ::edge	sea	name	name	0.1	0.1.0
(MRPNode-0 / rescue-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / migrate-01) :quant (MRPNode-3 / more-than :op1 3000)) :location (MRPNode-4 / sea :name (MRPNode-5 / name :op1 mediterranean)))

# ::id 549
# ::snt Israeli police clash with Palestinian protesters at sensitive Jerusalem holy site
# ::tok Israeli police clash with Palestinian protesters at sensitive Jerusalem holy site
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1 2-3|0 4-5|0.0.0+0.0.0.0+0.0.0.0.0 5-6|0.0+0.0.1 7-8|0.2.1 8-9|0.2.2+0.2.2.0+0.2.2.0.0 9-10|0.2.0 10-11|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:51.638834 ::parser eager_oracle ::smatch 0.9310344827586207 ::n_actions 44
# ::node	0	clash-01	2-3
# ::node	0.0	person	5-6
# ::node	0.0.0	country	4-5
# ::node	0.0.0.0	name	4-5
# ::node	0.0.0.0.0	palestine	4-5
# ::node	0.0.1	protest-01	5-6
# ::node	0.1	police	1-2
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	israel	0-1
# ::node	0.2	site	10-11
# ::node	0.2.0	holy	9-10
# ::node	0.2.1	sensitive-03	7-8
# ::node	0.2.2	city	8-9
# ::node	0.2.2.0	name	8-9
# ::node	0.2.2.0.0	jerusalem	8-9
# ::root	0	clash-01
# ::edge	city	name	name	0.2.2	0.2.2.0
# ::edge	clash-01	ARG0	police	0	0.1
# ::edge	clash-01	ARG1	person	0	0.0
# ::edge	clash-01	location	site	0	0.2
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	name	op1	israel	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	jerusalem	0.2.2.0	0.2.2.0.0
# ::edge	name	op1	palestine	0.0.0.0	0.0.0.0.0
# ::edge	person	ARG0-of	protest-01	0.0	0.0.1
# ::edge	person	mod	country	0.0	0.0.0
# ::edge	police	mod	country	0.1	0.1.0
# ::edge	site	ARG0-of	sensitive-03	0.2	0.2.1
# ::edge	site	location	city	0.2	0.2.2
# ::edge	site	mod	holy	0.2	0.2.0
(MRPNode-0 / clash-01 :ARG1 (MRPNode-1 / person :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 palestine)) :ARG0-of (MRPNode-4 / protest-01)) :ARG0 (MRPNode-5 / police :mod (MRPNode-6 / country :name (MRPNode-7 / name :op1 israel))) :location (MRPNode-8 / site :mod (MRPNode-9 / holy) :ARG0-of (MRPNode-10 / sensitive-03) :location (MRPNode-11 / city :name (MRPNode-12 / name :op1 jerusalem))))

# ::id 550
# ::snt Islamic State issues video of beheading of US hostage
# ::tok Islamic State issues video of beheading of US hostage
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1 2-3|0 3-4|0.0 5-6|0.0.0 7-8|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 8-9|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.647733 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	issue-01	2-3
# ::node	0.0	video	3-4
# ::node	0.0.0	behead-01	5-6
# ::node	0.0.0.0	hostage	8-9
# ::node	0.0.0.0.0	country	7-8
# ::node	0.0.0.0.0.0	name	7-8
# ::node	0.0.0.0.0.0.0	us	7-8
# ::node	0.1	state	1-2
# ::node	0.1.0	religious-group	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	islamic	0-1
# ::root	0	issue-01
# ::edge	behead-01	ARG1	hostage	0.0.0	0.0.0.0
# ::edge	country	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	hostage	mod	country	0.0.0.0	0.0.0.0.0
# ::edge	issue-01	ARG0	state	0	0.1
# ::edge	issue-01	ARG1	video	0	0.0
# ::edge	name	op1	islamic	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	us	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	religious-group	name	name	0.1.0	0.1.0.0
# ::edge	state	mod	religious-group	0.1	0.1.0
# ::edge	video	topic	behead-01	0.0	0.0.0
(MRPNode-0 / issue-01 :ARG1 (MRPNode-1 / video :topic (MRPNode-2 / behead-01 :ARG1 (MRPNode-3 / hostage :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 us))))) :ARG0 (MRPNode-6 / state :mod (MRPNode-7 / religious-group :name (MRPNode-8 / name :op1 islamic))))

# ::id 551
# ::snt Greece bailout uncertainty weighs on global markets
# ::tok Greece bailout uncertainty weighs on global markets
# ::alignments 0-1|0.0.2+0.0.2.0+0.0.2.0.0 1-2|0.0.1 2-3|0.0+0.0.0 3-4|0 5-6|0.1.0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.652283 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	weight-01	3-4
# ::node	0.0	certainty	2-3
# ::node	0.0.0	-	2-3
# ::node	0.0.1	bail-out-02	1-2
# ::node	0.0.2	country	0-1
# ::node	0.0.2.0	name	0-1
# ::node	0.0.2.0.0	greece	0-1
# ::node	0.1	market	6-7
# ::node	0.1.0	globe	5-6
# ::root	0	weight-01
# ::edge	certainty	domain	bail-out-02	0.0	0.0.1
# ::edge	certainty	location	country	0.0	0.0.2
# ::edge	certainty	polarity	-	0.0	0.0.0
# ::edge	country	name	name	0.0.2	0.0.2.0
# ::edge	market	mod	globe	0.1	0.1.0
# ::edge	name	op1	greece	0.0.2.0	0.0.2.0.0
# ::edge	weight-01	ARG1	certainty	0	0.0
# ::edge	weight-01	ARG2	market	0	0.1
(MRPNode-0 / weight-01 :ARG1 (MRPNode-1 / certainty :polarity - :domain (MRPNode-2 / bail-out-02) :location (MRPNode-3 / country :name (MRPNode-4 / name :op1 greece))) :ARG2 (MRPNode-5 / market :mod (MRPNode-6 / globe)))

# ::id 552
# ::snt Nepal earthquake death toll surpasses 7,000
# ::tok Nepal earthquake death toll surpasses 7,000
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1.2 2-3|0.1.1 3-4|0.1 4-5|0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.657847 ::parser eager_oracle ::smatch 0.896551724137931 ::n_actions 23
# ::node	0	surpass-01	4-5
# ::node	0.0	person	
# ::node	0.0.0	5000	
# ::node	0.1	toll	3-4
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	nepal	0-1
# ::node	0.1.1	die-01	2-3
# ::node	0.1.2	earthquake	1-2
# ::root	0	surpass-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	name	op1	nepal	0.1.0.0	0.1.0.0.0
# ::edge	person	quant	5000	0.0	0.0.0
# ::edge	surpass-01	ARG0	toll	0	0.1
# ::edge	surpass-01	ARG1	person	0	0.0
# ::edge	toll	mod	country	0.1	0.1.0
# ::edge	toll	mod	earthquake	0.1	0.1.2
# ::edge	toll	quant-of	die-01	0.1	0.1.1
(MRPNode-0 / surpass-01 :ARG1 (MRPNode-1 / person :quant 5000) :ARG0 (MRPNode-2 / toll :mod (MRPNode-3 / country :name (MRPNode-4 / name :op1 nepal)) :quant-of (MRPNode-5 / die-01) :mod (MRPNode-6 / earthquake)))

# ::id 553
# ::snt US drone strike kills eight in Waziristan
# ::tok US drone strike kills eight in Waziristan
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1.1 2-3|0.1 3-4|0 4-5|0.0+0.0.0 6-7|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.664203 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	kill-01	3-4
# ::node	0.0	person	4-5
# ::node	0.0.0	8	4-5
# ::node	0.1	strike-01	2-3
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	us	0-1
# ::node	0.1.1	drone	1-2
# ::node	0.2	province	6-7
# ::node	0.2.0	name	6-7
# ::node	0.2.0.0	waziristan	6-7
# ::root	0	kill-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	kill-01	ARG0	strike-01	0	0.1
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	location	province	0	0.2
# ::edge	name	op1	us	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	waziristan	0.2.0	0.2.0.0
# ::edge	person	quant	8	0.0	0.0.0
# ::edge	province	name	name	0.2	0.2.0
# ::edge	strike-01	ARG0	country	0.1	0.1.0
# ::edge	strike-01	ARG2	drone	0.1	0.1.1
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 8) :ARG0 (MRPNode-2 / strike-01 :ARG0 (MRPNode-3 / country :name (MRPNode-4 / name :op1 us)) :ARG2 (MRPNode-5 / drone)) :location (MRPNode-6 / province :name (MRPNode-7 / name :op1 waziristan)))

# ::id 554
# ::snt Boy, 14, arrested for sex attacks around a university campus
# ::tok Boy , 14 , arrested for sex attacks around a university campus
# ::alignments 0-1|0+0.1+0.1.0 2-3|0.2.0 4-5|0.0 6-7|0.0.0.1 7-8|0.0.0 8-9|0.0.0.0 10-11|0.0.0.0.0.0 11-12|0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.678006 ::parser eager_oracle ::smatch 0.878048780487805 ::n_actions 38
# ::node	0	person	0-1
# ::node	0.0	arrest-01	4-5
# ::node	0.0.0	attack-01	7-8
# ::node	0.0.0.0	around	8-9
# ::node	0.0.0.0.0	campus	11-12
# ::node	0.0.0.0.0.0	university	10-11
# ::node	0.0.0.1	sex-01	6-7
# ::node	0.1	name	0-1
# ::node	0.1.0	boy	0-1
# ::node	0.2	temporal-quantity	
# ::node	0.2.0	14	2-3
# ::node	0.2.1	year	
# ::root	0	person
# ::edge	around	op1	campus	0.0.0.0	0.0.0.0.0
# ::edge	arrest-01	ARG2	attack-01	0.0	0.0.0
# ::edge	attack-01	mod	around	0.0.0	0.0.0.0
# ::edge	attack-01	mod	sex-01	0.0.0	0.0.0.1
# ::edge	campus	mod	university	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	boy	0.1	0.1.0
# ::edge	person	ARG0-of	attack-01	0	0.0.0
# ::edge	person	ARG1-of	arrest-01	0	0.0
# ::edge	person	age	temporal-quantity	0	0.2
# ::edge	person	name	name	0	0.1
# ::edge	temporal-quantity	quant	14	0.2	0.2.0
# ::edge	temporal-quantity	unit	year	0.2	0.2.1
(MRPNode-0 / person :ARG1-of (MRPNode-1 / arrest-01 :ARG2 (MRPNode-3 / attack-01 :mod (MRPNode-4 / around :op1 (MRPNode-5 / campus :mod (MRPNode-6 / university))) :mod (MRPNode-7 / sex-01))) :name (MRPNode-2 / name :op1 boy) :ARG0-of MRPNode-3 :age (MRPNode-8 / temporal-quantity :quant 14 :unit (MRPNode-9 / year)))

# ::id 555
# ::snt Obama orders Syria 'gas attack' inquiry
# ::tok Obama orders Syria ' gas attack ' inquiry
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.0+0.0.0.0+0.0.0.0.0 4-5|0.0.1 5-6|0.0 7-8|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:51.684937 ::parser eager_oracle ::smatch 0.878048780487805 ::n_actions 28
# ::node	0	order-01	1-2
# ::node	0.0	attack-01	5-6
# ::node	0.0.0	country	2-3
# ::node	0.0.0.0	name	2-3
# ::node	0.0.0.0.0	syria	2-3
# ::node	0.0.1	gas	4-5
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	obama	0-1
# ::node	0.2	inquire-01	7-8
# ::node	0.2.0	country	
# ::node	0.2.0.0	name	
# ::node	0.2.0.0.0	syria	
# ::root	0	order-01
# ::edge	attack-01	ARG0	country	0.0	0.0.0
# ::edge	attack-01	instrument	gas	0.0	0.0.1
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.2.0	0.2.0.0
# ::edge	inquire-01	ARG2	country	0.2	0.2.0
# ::edge	name	op1	obama	0.1.0	0.1.0.0
# ::edge	name	op1	syria	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	syria	0.2.0.0	0.2.0.0.0
# ::edge	order-01	ARG0	person	0	0.1
# ::edge	order-01	ARG1	attack-01	0	0.0
# ::edge	order-01	ARG1	inquire-01	0	0.2
# ::edge	person	name	name	0.1	0.1.0
(MRPNode-0 / order-01 :ARG1 (MRPNode-1 / attack-01 :ARG0 (MRPNode-2 / country :name (MRPNode-3 / name :op1 syria)) :instrument (MRPNode-4 / gas)) :ARG0 (MRPNode-5 / person :name (MRPNode-6 / name :op1 obama)) :ARG1 (MRPNode-7 / inquire-01 :ARG2 (MRPNode-8 / country :name (MRPNode-9 / name :op1 syria))))

# ::id 556
# ::snt Ukraine's jailed opposition icon Tymoshenko walks free
# ::tok Ukraine 's jailed opposition icon Tymoshenko walks free
# ::alignments 0-1|0.1.0.1+0.1.0.1.0+0.1.0.1.0.0 2-3|0.1.0.2 3-4|0.1.0.0.0 4-5|0.1.0+0.1.0.0 5-6|0.1+0.1.1+0.1.1.0 6-7|0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.693340 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	walk-01	6-7
# ::node	0.0	free-04	7-8
# ::node	0.1	person	5-6
# ::node	0.1.0	have-org-role-91	4-5
# ::node	0.1.0.0	icon	4-5
# ::node	0.1.0.0.0	oppose-01	3-4
# ::node	0.1.0.1	country	0-1
# ::node	0.1.0.1.0	name	0-1
# ::node	0.1.0.1.0.0	ukraine	0-1
# ::node	0.1.0.2	jail-01	2-3
# ::node	0.1.1	name	5-6
# ::node	0.1.1.0	tymoshenko	5-6
# ::root	0	walk-01
# ::edge	country	name	name	0.1.0.1	0.1.0.1.0
# ::edge	have-org-role-91	ARG1	country	0.1.0	0.1.0.1
# ::edge	have-org-role-91	ARG1	icon	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG1-of	jail-01	0.1.0	0.1.0.2
# ::edge	icon	ARG0-of	oppose-01	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	tymoshenko	0.1.1	0.1.1.0
# ::edge	name	op1	ukraine	0.1.0.1.0	0.1.0.1.0.0
# ::edge	person	ARG1-of	have-org-role-91	0.1	0.1.0
# ::edge	person	name	name	0.1	0.1.1
# ::edge	walk-01	ARG0	free-04	0	0.0
# ::edge	walk-01	ARG0	person	0	0.1
(MRPNode-0 / walk-01 :ARG0 (MRPNode-1 / free-04) :ARG0 (MRPNode-2 / person :ARG1-of (MRPNode-3 / have-org-role-91 :ARG1 (MRPNode-4 / icon :ARG0-of (MRPNode-5 / oppose-01)) :ARG1 (MRPNode-6 / country :name (MRPNode-7 / name :op1 ukraine)) :ARG1-of (MRPNode-8 / jail-01)) :name (MRPNode-9 / name :op1 tymoshenko)))

# ::id 557
# ::snt Redford touts Alberta economy ahead of vote on leadership
# ::tok Redford touts Alberta economy ahead of vote on leadership
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 2-3|0.0.0+0.0.0.0+0.0.0.0.0 3-4|0.0 4-5|0.2 6-7|0.2.0 8-9|0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.700319 ::parser eager_oracle ::smatch 0.7894736842105262 ::n_actions 27
# ::node	0	turn-14	
# ::node	0.0	economy	3-4
# ::node	0.0.0	state	2-3
# ::node	0.0.0.0	name	2-3
# ::node	0.0.0.0.0	alberta	2-3
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	redford	0-1
# ::node	0.2	ahead	4-5
# ::node	0.2.0	vote-01	6-7
# ::node	0.2.0.0	lead-02	8-9
# ::root	0	turn-14
# ::edge	ahead	op1	vote-01	0.2	0.2.0
# ::edge	economy	mod	state	0.0	0.0.0
# ::edge	name	op1	alberta	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	redford	0.1.0	0.1.0.0
# ::edge	person	name	name	0.1	0.1.0
# ::edge	state	name	name	0.0.0	0.0.0.0
# ::edge	turn-14	ARG0	person	0	0.1
# ::edge	turn-14	ARG1	economy	0	0.0
# ::edge	turn-14	time	ahead	0	0.2
# ::edge	vote-01	ARG1	lead-02	0.2.0	0.2.0.0
(MRPNode-0 / turn-14 :ARG1 (MRPNode-1 / economy :mod (MRPNode-2 / state :name (MRPNode-3 / name :op1 alberta))) :ARG0 (MRPNode-4 / person :name (MRPNode-5 / name :op1 redford)) :time (MRPNode-6 / ahead :op1 (MRPNode-7 / vote-01 :ARG1 (MRPNode-8 / lead-02))))

# ::id 558
# ::snt Man kills 4 in Calif. before police shoot him dead
# ::tok Man kills 4 in Calif. before police shoot him dead
# ::alignments 0-1|0.1 1-2|0 2-3|0.0+0.0.0 4-5|0.3+0.3.0+0.3.0.0 5-6|0.2 6-7|0.1.1.0 7-8|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.708723 ::parser eager_oracle ::smatch 0.9268292682926829 ::n_actions 39
# ::node	0	kill-01	1-2
# ::node	0.0	person	2-3
# ::node	0.0.0	4	2-3
# ::node	0.1	man	0-1
# ::node	0.1.0	die-01	
# ::node	0.1.1	shoot-02	7-8
# ::node	0.1.1.0	police	6-7
# ::node	0.2	before	5-6
# ::node	0.3	state	4-5
# ::node	0.3.0	name	4-5
# ::node	0.3.0.0	calif.	4-5
# ::root	0	kill-01
# ::edge	before	op1	die-01	0.2	0.1.0
# ::edge	before	op1	shoot-02	0.2	0.1.1
# ::edge	kill-01	ARG0	man	0	0.1
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	location	state	0	0.3
# ::edge	kill-01	time	before	0	0.2
# ::edge	man	ARG1-of	die-01	0.1	0.1.0
# ::edge	man	ARG1-of	shoot-02	0.1	0.1.1
# ::edge	name	op1	calif.	0.3.0	0.3.0.0
# ::edge	person	quant	4	0.0	0.0.0
# ::edge	shoot-02	ARG0	police	0.1.1	0.1.1.0
# ::edge	state	name	name	0.3	0.3.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 4) :ARG0 (MRPNode-2 / man :ARG1-of (MRPNode-3 / die-01) :ARG1-of (MRPNode-4 / shoot-02 :ARG0 (MRPNode-5 / police))) :time (MRPNode-6 / before :op1 MRPNode-3 :op1 MRPNode-4) :location (MRPNode-7 / state :name (MRPNode-8 / name :op1 calif.)))

# ::id 559
# ::snt N. Korea Deports Elderly American
# ::tok N. Korea Deports Elderly American
# ::alignments 0-2|0.0+0.0.0+0.0.1 3-4|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.710625 ::parser eager_oracle ::smatch 0.5 ::n_actions 12
# ::node	0	country	
# ::node	0.0	name	0-2
# ::node	0.0.0	n.	0-2
# ::node	0.0.1	korea	0-2
# ::node	0.1	elderly	3-4
# ::root	0	country
# ::edge	country	mod	elderly	0	0.1
# ::edge	country	mod	name	0	0.0
# ::edge	name	op1	n.	0.0	0.0.0
# ::edge	name	op2	korea	0.0	0.0.1
(MRPNode-0 / country :mod (MRPNode-1 / name :op1 n. :op2 korea) :mod (MRPNode-2 / elderly))

# ::id 560
# ::snt Obama mulls limited military action in Syria
# ::tok Obama mulls limited military action in Syria
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0.1 3-4|0.0.0 6-7|0.0.2+0.0.2.0+0.0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.715665 ::parser eager_oracle ::smatch 0.7333333333333334 ::n_actions 21
# ::node	0	mull	1-2
# ::node	0.0	act-02	
# ::node	0.0.0	military	3-4
# ::node	0.0.1	limit-01	2-3
# ::node	0.0.2	country	6-7
# ::node	0.0.2.0	name	6-7
# ::node	0.0.2.0.0	syria	6-7
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	obama	0-1
# ::root	0	mull
# ::edge	act-02	ARG0	military	0.0	0.0.0
# ::edge	act-02	ARG1-of	limit-01	0.0	0.0.1
# ::edge	act-02	location	country	0.0	0.0.2
# ::edge	country	name	name	0.0.2	0.0.2.0
# ::edge	mull	domain	act-02	0	0.0
# ::edge	mull	domain	person	0	0.1
# ::edge	name	op1	obama	0.1.0	0.1.0.0
# ::edge	name	op1	syria	0.0.2.0	0.0.2.0.0
# ::edge	person	name	name	0.1	0.1.0
(MRPNode-0 / mull :domain (MRPNode-1 / act-02 :ARG0 (MRPNode-2 / military) :ARG1-of (MRPNode-3 / limit-01) :location (MRPNode-4 / country :name (MRPNode-5 / name :op1 syria))) :domain (MRPNode-6 / person :name (MRPNode-7 / name :op1 obama)))

# ::id 561
# ::snt One killed in clashes at Muslim Brotherhood Cairo offices
# ::tok One killed in clashes at Muslim Brotherhood Cairo offices
# ::alignments 0-1|0.0+0.0.0 1-2|0 3-4|0.1.0 5-7|0.1.0.0.0+0.1.0.0.0.0+0.1.0.0.0.0.0+0.1.0.0.0.0.1 7-8|0.1.0.0.1+0.1.0.0.1.0+0.1.0.0.1.0.0 8-9|0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.725299 ::parser eager_oracle ::smatch 0.9047619047619048 ::n_actions 32
# ::node	0	kill-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	1	0-1
# ::node	0.1	cause-01	
# ::node	0.1.0	clash-01	3-4
# ::node	0.1.0.0	office	8-9
# ::node	0.1.0.0.0	organization	5-7
# ::node	0.1.0.0.0.0	name	5-7
# ::node	0.1.0.0.0.0.0	muslim	5-7
# ::node	0.1.0.0.0.0.1	brotherhood	5-7
# ::node	0.1.0.0.1	city	7-8
# ::node	0.1.0.0.1.0	name	7-8
# ::node	0.1.0.0.1.0.0	cairo	7-8
# ::root	0	kill-01
# ::edge	cause-01	ARG0	clash-01	0.1	0.1.0
# ::edge	city	name	name	0.1.0.0.1	0.1.0.0.1.0
# ::edge	clash-01	location	office	0.1.0	0.1.0.0
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	ARG1-of	cause-01	0	0.1
# ::edge	name	op1	cairo	0.1.0.0.1.0	0.1.0.0.1.0.0
# ::edge	name	op1	muslim	0.1.0.0.0.0	0.1.0.0.0.0.0
# ::edge	name	op2	brotherhood	0.1.0.0.0.0	0.1.0.0.0.0.1
# ::edge	office	location	city	0.1.0.0	0.1.0.0.1
# ::edge	office	mod	organization	0.1.0.0	0.1.0.0.0
# ::edge	organization	name	name	0.1.0.0.0	0.1.0.0.0.0
# ::edge	person	quant	1	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 1) :ARG1-of (MRPNode-2 / cause-01 :ARG0 (MRPNode-3 / clash-01 :location (MRPNode-4 / office :mod (MRPNode-5 / organization :name (MRPNode-6 / name :op1 muslim :op2 brotherhood)) :location (MRPNode-7 / city :name (MRPNode-8 / name :op1 cairo))))))

# ::id 562
# ::snt Saudi Women To Protest Against Driving Ban
# ::tok Saudi Women To Protest Against Driving Ban
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0+0.1.0.0.1 1-2|0.1 3-4|0 6-7|0.0+0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.729686 ::parser eager_oracle ::smatch 0.9655172413793104 ::n_actions 21
# ::node	0	protest-01	3-4
# ::node	0.0	person	6-7
# ::node	0.0.0	name	6-7
# ::node	0.0.0.0	ban	6-7
# ::node	0.1	woman	1-2
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	saudi	0-1
# ::node	0.1.0.0.1	arabia	0-1
# ::root	0	protest-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	name	op1	ban	0.0.0	0.0.0.0
# ::edge	name	op1	saudi	0.1.0.0	0.1.0.0.0
# ::edge	name	op2	arabia	0.1.0.0	0.1.0.0.1
# ::edge	person	name	name	0.0	0.0.0
# ::edge	protest-01	ARG0	woman	0	0.1
# ::edge	protest-01	ARG1	person	0	0.0
# ::edge	woman	mod	country	0.1	0.1.0
(MRPNode-0 / protest-01 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 ban)) :ARG0 (MRPNode-3 / woman :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 saudi :op2 arabia))))

# ::id 563
# ::snt Nelson Mandela hospital release reports 'incorrect'
# ::tok Nelson Mandela hospital release reports ' incorrect '
# ::alignments 0-2|0.0.1+0.0.1.0+0.0.1.0.0+0.0.1.0.1 2-3|0.0.0 3-4|0.0 4-5|0 6-7|0.1+0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.734853 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	report-01	4-5
# ::node	0.0	release-01	3-4
# ::node	0.0.0	hospital	2-3
# ::node	0.0.1	person	0-2
# ::node	0.0.1.0	name	0-2
# ::node	0.0.1.0.0	nelson	0-2
# ::node	0.0.1.0.1	mandela	0-2
# ::node	0.1	correct-02	6-7
# ::node	0.1.0	-	6-7
# ::root	0	report-01
# ::edge	correct-02	polarity	-	0.1	0.1.0
# ::edge	name	op1	nelson	0.0.1.0	0.0.1.0.0
# ::edge	name	op2	mandela	0.0.1.0	0.0.1.0.1
# ::edge	person	name	name	0.0.1	0.0.1.0
# ::edge	release-01	ARG1	hospital	0.0	0.0.0
# ::edge	release-01	ARG1	person	0.0	0.0.1
# ::edge	report-01	ARG1	correct-02	0	0.1
# ::edge	report-01	ARG1	release-01	0	0.0
(MRPNode-0 / report-01 :ARG1 (MRPNode-1 / release-01 :ARG1 (MRPNode-2 / hospital) :ARG1 (MRPNode-3 / person :name (MRPNode-4 / name :op1 nelson :op2 mandela))) :ARG1 (MRPNode-5 / correct-02 :polarity -))

# ::id 564
# ::snt US to Determine Extent of Chemical Weapons Use by Syria
# ::tok US to Determine Extent of Chemical Weapons Use by Syria
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 2-3|0 5-7|0.1.0.0.0+0.1.0.0.0.0+0.1.0.0.0.0.0+0.1.0.0.0.0.1 7-8|0.1.0 9-10|0.1.0.1+0.1.0.1.0+0.1.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.744880 ::parser eager_oracle ::smatch 0.8181818181818182 ::n_actions 25
# ::node	0	determine-01	2-3
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	us	0-1
# ::node	0.1	infringe-01	
# ::node	0.1.0	use-01	7-8
# ::node	0.1.0.0	weapon	
# ::node	0.1.0.0.0	small-molecule	5-7
# ::node	0.1.0.0.0.0	name	5-7
# ::node	0.1.0.0.0.0.0	chemical	5-7
# ::node	0.1.0.0.0.0.1	weapons	5-7
# ::node	0.1.0.1	country	9-10
# ::node	0.1.0.1.0	name	9-10
# ::node	0.1.0.1.0.0	syria	9-10
# ::root	0	determine-01
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.1.0.1	0.1.0.1.0
# ::edge	determine-01	ARG1	country	0	0.0
# ::edge	determine-01	ARG1	infringe-01	0	0.1
# ::edge	infringe-01	ARG1	use-01	0.1	0.1.0
# ::edge	name	op1	chemical	0.1.0.0.0.0	0.1.0.0.0.0.0
# ::edge	name	op1	syria	0.1.0.1.0	0.1.0.1.0.0
# ::edge	name	op1	us	0.0.0	0.0.0.0
# ::edge	name	op2	weapons	0.1.0.0.0.0	0.1.0.0.0.0.1
# ::edge	small-molecule	name	name	0.1.0.0.0	0.1.0.0.0.0
# ::edge	use-01	ARG0	country	0.1.0	0.1.0.1
# ::edge	use-01	ARG1	weapon	0.1.0	0.1.0.0
# ::edge	weapon	mod	small-molecule	0.1.0.0	0.1.0.0.0
(MRPNode-0 / determine-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 us)) :ARG1 (MRPNode-3 / infringe-01 :ARG1 (MRPNode-4 / use-01 :ARG1 (MRPNode-5 / weapon :mod (MRPNode-6 / small-molecule :name (MRPNode-7 / name :op1 chemical :op2 weapons))) :ARG0 (MRPNode-8 / country :name (MRPNode-9 / name :op1 syria)))))

# ::id 565
# ::snt Syria agrees to surrender chemical weapons
# ::tok Syria agrees to surrender chemical weapons
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 3-4|0.1 4-5|0.1.0.0 5-6|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.748732 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	agree-01	1-2
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	syria	0-1
# ::node	0.1	surrender-01	3-4
# ::node	0.1.0	weapon	5-6
# ::node	0.1.0.0	chemical	4-5
# ::root	0	agree-01
# ::edge	agree-01	ARG1	country	0	0.0
# ::edge	agree-01	ARG1	surrender-01	0	0.1
# ::edge	country	name	name	0.0	0.0.0
# ::edge	name	op1	syria	0.0.0	0.0.0.0
# ::edge	surrender-01	ARG0	country	0.1	0.0
# ::edge	surrender-01	ARG1	weapon	0.1	0.1.0
# ::edge	weapon	mod	chemical	0.1.0	0.1.0.0
(MRPNode-0 / agree-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 syria)) :ARG1 (MRPNode-3 / surrender-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-4 / weapon :mod (MRPNode-5 / chemical))))

# ::id 566
# ::snt Russia's Putin claims authority to invade Ukraine
# ::tok Russia 's Putin claims authority to invade Ukraine
# ::alignments 2-3|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 3-4|0 4-5|0.0 6-7|0.0.0 7-8|0.0.0.0.1+0.0.0.0.1.0+0.0.0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.753972 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	claim-01	3-4
# ::node	0.0	authority	4-5
# ::node	0.0.0	invade-01	6-7
# ::node	0.0.0.0	person	2-3
# ::node	0.0.0.0.0	name	2-3
# ::node	0.0.0.0.0.0	putin	2-3
# ::node	0.0.0.0.1	country	7-8
# ::node	0.0.0.0.1.0	name	7-8
# ::node	0.0.0.0.1.0.0	ukraine	7-8
# ::root	0	claim-01
# ::edge	authority	purpose	invade-01	0.0	0.0.0
# ::edge	claim-01	ARG0	person	0	0.0.0.0
# ::edge	claim-01	ARG1	authority	0	0.0
# ::edge	country	name	name	0.0.0.0.1	0.0.0.0.1.0
# ::edge	invade-01	ARG0	person	0.0.0	0.0.0.0
# ::edge	name	op1	putin	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	ukraine	0.0.0.0.1.0	0.0.0.0.1.0.0
# ::edge	person	name	name	0.0.0.0	0.0.0.0.0
# ::edge	person	poss	country	0.0.0.0	0.0.0.0.1
(MRPNode-0 / claim-01 :ARG1 (MRPNode-1 / authority :purpose (MRPNode-2 / invade-01 :ARG0 (MRPNode-3 / person :name (MRPNode-4 / name :op1 putin) :poss (MRPNode-5 / country :name (MRPNode-6 / name :op1 ukraine))))) :ARG0 MRPNode-3)

# ::id 567
# ::snt Singapore shares open 0.28% lower on Thursday
# ::tok Singapore shares open 0.28 % lower on Thursday
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 1-2|0.0 2-3|0 3-4|0.1.0 4-5|0.1 5-6|0.1.1 7-8|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.760329 ::parser eager_oracle ::smatch 0.7368421052631579 ::n_actions 30
# ::node	0	open-01	2-3
# ::node	0.0	share-01	1-2
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	singapore	0-1
# ::node	0.1	percentage-entity	4-5
# ::node	0.1.0	0.28	3-4
# ::node	0.1.1	low-04	5-6
# ::node	0.1.2	have-degree-91	
# ::node	0.1.2.0	more	
# ::node	0.2	date-entity	
# ::node	0.2.0	thursday	7-8
# ::root	0	open-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	date-entity	weekday	thursday	0.2	0.2.0
# ::edge	have-degree-91	ARG2	low-04	0.1.2	0.1.1
# ::edge	have-degree-91	ARG3	more	0.1.2	0.1.2.0
# ::edge	name	op1	singapore	0.0.0.0	0.0.0.0.0
# ::edge	open-01	ARG1	share-01	0	0.0
# ::edge	open-01	time	date-entity	0	0.2
# ::edge	open-01	time	percentage-entity	0	0.1
# ::edge	percentage-entity	ARG1-of	low-04	0.1	0.1.1
# ::edge	percentage-entity	value	0.28	0.1	0.1.0
# ::edge	percentage-entity	value	have-degree-91	0.1	0.1.2
# ::edge	share-01	ARG0	country	0.0	0.0.0
(MRPNode-0 / open-01 :ARG1 (MRPNode-1 / share-01 :ARG0 (MRPNode-2 / country :name (MRPNode-3 / name :op1 singapore))) :time (MRPNode-4 / percentage-entity :value 0.28 :ARG1-of (MRPNode-5 / low-04) :value (MRPNode-6 / have-degree-91 :ARG2 MRPNode-5 :ARG3 (MRPNode-7 / more))) :time (MRPNode-8 / date-entity :weekday (MRPNode-9 / thursday)))

# ::id 568
# ::snt Headlines in major Iranian newspapers on Oct 4
# ::tok Headlines in major Iranian newspapers on Oct 4
# ::alignments 0-1|0+0.0 2-3|0.0.0.0 3-4|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 4-5|0.0.0 7-8|0.0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.774223 ::parser eager_oracle ::smatch 0.8000000000000002 ::n_actions 28
# ::node	0	thing	0-1
# ::node	0.0	headline-01	0-1
# ::node	0.0.0	newspaper	4-5
# ::node	0.0.0.0	major-02	2-3
# ::node	0.0.0.1	country	3-4
# ::node	0.0.0.1.0	name	3-4
# ::node	0.0.0.1.0.0	iran	3-4
# ::node	0.0.1	date-entity	
# ::node	0.0.1.0	10	
# ::node	0.0.1.1	4	7-8
# ::root	0	thing
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	date-entity	day	4	0.0.1	0.0.1.1
# ::edge	date-entity	month	10	0.0.1	0.0.1.0
# ::edge	headline-01	time	date-entity	0.0	0.0.1
# ::edge	headline-01	time	newspaper	0.0	0.0.0
# ::edge	name	op1	iran	0.0.0.1.0	0.0.0.1.0.0
# ::edge	newspaper	mod	country	0.0.0	0.0.0.1
# ::edge	newspaper	mod	major-02	0.0.0	0.0.0.0
# ::edge	thing	ARG2-of	headline-01	0	0.0
(MRPNode-0 / thing :ARG2-of (MRPNode-1 / headline-01 :time (MRPNode-2 / newspaper :mod (MRPNode-3 / major-02) :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 iran))) :time (MRPNode-6 / date-entity :month 10 :day 4)))

# ::id 569
# ::snt Bombings kill 9 people in Iraqi capital
# ::tok Bombings kill 9 people in Iraqi capital
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.0 3-4|0.0 5-6|0.2.0.0+0.2.0.0.0+0.2.0.0.0.0 6-7|0.2.0+0.2.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.779725 ::parser eager_oracle ::smatch 0.823529411764706 ::n_actions 30
# ::node	0	kill-01	1-2
# ::node	0.0	person	3-4
# ::node	0.0.0	9	2-3
# ::node	0.1	bomb-01	0-1
# ::node	0.2	city	
# ::node	0.2.0	have-org-role-91	6-7
# ::node	0.2.0.0	country	5-6
# ::node	0.2.0.0.0	name	5-6
# ::node	0.2.0.0.0.0	iraq	5-6
# ::node	0.2.0.1	capital	6-7
# ::root	0	kill-01
# ::edge	city	ARG0-of	have-org-role-91	0.2	0.2.0
# ::edge	country	name	name	0.2.0.0	0.2.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.2.0	0.2.0.0
# ::edge	have-org-role-91	ARG2	capital	0.2.0	0.2.0.1
# ::edge	kill-01	ARG0	bomb-01	0	0.1
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	location	city	0	0.2
# ::edge	name	op1	iraq	0.2.0.0.0	0.2.0.0.0.0
# ::edge	person	quant	9	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 9) :ARG0 (MRPNode-2 / bomb-01) :location (MRPNode-3 / city :ARG0-of (MRPNode-4 / have-org-role-91 :ARG1 (MRPNode-5 / country :name (MRPNode-6 / name :op1 iraq)) :ARG2 (MRPNode-7 / capital))))

# ::id 570
# ::snt 10 Things to Know for Wednesday
# ::tok 10 Things to Know for Wednesday
# ::alignments 0-1|0.0 1-2|0 3-4|0.1 5-6|0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.785869 ::parser eager_oracle ::smatch 0.8750000000000001 ::n_actions 20
# ::node	0	thing	1-2
# ::node	0.0	10	0-1
# ::node	0.1	know-01	3-4
# ::node	0.1.0	date-entity	5-6
# ::node	0.1.0.0	wednesday	5-6
# ::root	0	thing
# ::edge	date-entity	weekday	wednesday	0.1.0	0.1.0.0
# ::edge	know-01	time	date-entity	0.1	0.1.0
# ::edge	thing	ARG1-of	know-01	0	0.1
# ::edge	thing	quant	10	0	0.0
(MRPNode-0 / thing :quant 10 :ARG1-of (MRPNode-1 / know-01 :time (MRPNode-2 / date-entity :weekday (MRPNode-3 / wednesday))))

# ::id 571
# ::snt How the Dow Jones Industrial Average Did Wednesday
# ::tok How the Dow Jones Industrial Average Did Wednesday
# ::alignments 0-1|0.1 2-6|0.0+0.0.0+0.0.0.0+0.0.0.1+0.0.0.2+0.0.0.3 6-7|0 7-8|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.790599 ::parser eager_oracle ::smatch 0.8571428571428571 ::n_actions 21
# ::node	0	do-02	6-7
# ::node	0.0	government-organization	2-6
# ::node	0.0.0	name	2-6
# ::node	0.0.0.0	dow	2-6
# ::node	0.0.0.1	jones	2-6
# ::node	0.0.0.2	industrial	2-6
# ::node	0.0.0.3	average	2-6
# ::node	0.1	amr-unknown	0-1
# ::node	0.2	date-entity	
# ::node	0.2.0	wednesday	7-8
# ::root	0	do-02
# ::edge	date-entity	weekday	wednesday	0.2	0.2.0
# ::edge	do-02	ARG1	amr-unknown	0	0.1
# ::edge	do-02	ARG1	government-organization	0	0.0
# ::edge	do-02	time	date-entity	0	0.2
# ::edge	government-organization	name	name	0.0	0.0.0
# ::edge	name	op1	dow	0.0.0	0.0.0.0
# ::edge	name	op2	jones	0.0.0	0.0.0.1
# ::edge	name	op3	industrial	0.0.0	0.0.0.2
# ::edge	name	op4	average	0.0.0	0.0.0.3
(MRPNode-0 / do-02 :ARG1 (MRPNode-1 / government-organization :name (MRPNode-2 / name :op1 dow :op2 jones :op3 industrial :op4 average)) :ARG1 (MRPNode-3 / amr-unknown) :time (MRPNode-4 / date-entity :weekday (MRPNode-5 / wednesday)))

# ::id 572
# ::snt New UN peacekeeping chief named for Central African Republic
# ::tok New UN peacekeeping chief named for Central African Republic
# ::alignments 0-1|0.1.1 1-2|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 2-3|0.1.0.1.0.0 3-4|0.1+0.1.0+0.1.0.1 4-5|0 6-9|0.0+0.0.0+0.0.0.0+0.0.0.1+0.0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:51.799623 ::parser eager_oracle ::smatch 0.9166666666666666 ::n_actions 38
# ::node	0	name-01	4-5
# ::node	0.0	country	6-9
# ::node	0.0.0	name	6-9
# ::node	0.0.0.0	central	6-9
# ::node	0.0.0.1	african	6-9
# ::node	0.0.0.2	republic	6-9
# ::node	0.1	person	3-4
# ::node	0.1.0	have-org-role-91	3-4
# ::node	0.1.0.0	organization	1-2
# ::node	0.1.0.0.0	name	1-2
# ::node	0.1.0.0.0.0	un	1-2
# ::node	0.1.0.1	chief	3-4
# ::node	0.1.0.1.0	keep-01	
# ::node	0.1.0.1.0.0	peace	2-3
# ::node	0.1.1	new-01	0-1
# ::root	0	name-01
# ::edge	chief	purpose	keep-01	0.1.0.1	0.1.0.1.0
# ::edge	country	name	name	0.0	0.0.0
# ::edge	have-org-role-91	ARG1	organization	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	chief	0.1.0	0.1.0.1
# ::edge	keep-01	ARG1	peace	0.1.0.1.0	0.1.0.1.0.0
# ::edge	name	op1	central	0.0.0	0.0.0.0
# ::edge	name	op1	un	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op2	african	0.0.0	0.0.0.1
# ::edge	name	op3	republic	0.0.0	0.0.0.2
# ::edge	name-01	ARG1	country	0	0.0
# ::edge	name-01	ARG1	person	0	0.1
# ::edge	organization	name	name	0.1.0.0	0.1.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	person	ARG1-of	new-01	0.1	0.1.1
(MRPNode-0 / name-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 central :op2 african :op3 republic)) :ARG1 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-org-role-91 :ARG1 (MRPNode-5 / organization :name (MRPNode-6 / name :op1 un)) :ARG2 (MRPNode-7 / chief :purpose (MRPNode-8 / keep-01 :ARG1 (MRPNode-9 / peace)))) :ARG1-of (MRPNode-10 / new-01)))

# ::id 573
# ::snt Iraq bombings kill at least 26
# ::tok Iraq bombings kill at least 26
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1 2-3|0 5-6|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.803492 ::parser eager_oracle ::smatch 0.782608695652174 ::n_actions 19
# ::node	0	kill-01	2-3
# ::node	0.0	person	
# ::node	0.0.0	at-least	
# ::node	0.0.0.0	26	5-6
# ::node	0.1	bomb-01	1-2
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	iraq	0-1
# ::root	0	kill-01
# ::edge	at-least	op1	26	0.0.0	0.0.0.0
# ::edge	bomb-01	ARG0	country	0.1	0.1.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	kill-01	ARG0	bomb-01	0	0.1
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	name	op1	iraq	0.1.0.0	0.1.0.0.0
# ::edge	person	quant	at-least	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant (MRPNode-2 / at-least :op1 26)) :ARG0 (MRPNode-3 / bomb-01 :ARG0 (MRPNode-4 / country :name (MRPNode-5 / name :op1 iraq))))

# ::id 574
# ::snt UN Security Council hears Yemen envoy's final ...
# ::tok UN Security Council hears Yemen envoy 's final ...
# ::alignments 0-3|0.1+0.1.0+0.1.0.0+0.1.0.1+0.1.0.2 3-4|0 4-5|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 5-6|0.0+0.0.0+0.0.0.1 7-8|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:51.811884 ::parser eager_oracle ::smatch 1.0 ::n_actions 35
# ::node	0	hear-01	3-4
# ::node	0.0	person	5-6
# ::node	0.0.0	have-org-role-91	5-6
# ::node	0.0.0.0	country	4-5
# ::node	0.0.0.0.0	name	4-5
# ::node	0.0.0.0.0.0	yemen	4-5
# ::node	0.0.0.1	envoy	5-6
# ::node	0.1	organization	0-3
# ::node	0.1.0	name	0-3
# ::node	0.1.0.0	un	0-3
# ::node	0.1.0.1	security	0-3
# ::node	0.1.0.2	council	0-3
# ::node	0.2	final	7-8
# ::root	0	hear-01
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.0.0	0.0.0.0
# ::edge	have-org-role-91	ARG2	envoy	0.0.0	0.0.0.1
# ::edge	hear-01	ARG0	organization	0	0.1
# ::edge	hear-01	ARG1	final	0	0.2
# ::edge	hear-01	ARG1	person	0	0.0
# ::edge	name	op1	un	0.1.0	0.1.0.0
# ::edge	name	op1	yemen	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op2	security	0.1.0	0.1.0.1
# ::edge	name	op3	council	0.1.0	0.1.0.2
# ::edge	organization	name	name	0.1	0.1.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.0
(MRPNode-0 / hear-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-org-role-91 :ARG1 (MRPNode-3 / country :name (MRPNode-4 / name :op1 yemen)) :ARG2 (MRPNode-5 / envoy))) :ARG0 (MRPNode-6 / organization :name (MRPNode-7 / name :op1 un :op2 security :op3 council)) :ARG1 (MRPNode-8 / final))

# ::id 575
# ::snt 13 killed in Afgan terror attack
# ::tok 13 killed in Afgan terror attack
# ::alignments 0-1|0.0+0.0.0 1-2|0 3-4|0.1.0.1+0.1.0.1.0+0.1.0.1.0.0 4-5|0.1.0.0 5-6|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.816991 ::parser eager_oracle ::smatch 0.8666666666666666 ::n_actions 26
# ::node	0	kill-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	13	0-1
# ::node	0.1	cause-01	
# ::node	0.1.0	attack-01	5-6
# ::node	0.1.0.0	terror	4-5
# ::node	0.1.0.1	city	3-4
# ::node	0.1.0.1.0	name	3-4
# ::node	0.1.0.1.0.0	afgan	3-4
# ::root	0	kill-01
# ::edge	attack-01	ARG1	city	0.1.0	0.1.0.1
# ::edge	attack-01	mod	terror	0.1.0	0.1.0.0
# ::edge	cause-01	ARG0	attack-01	0.1	0.1.0
# ::edge	city	name	name	0.1.0.1	0.1.0.1.0
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	ARG1-of	cause-01	0	0.1
# ::edge	name	op1	afgan	0.1.0.1.0	0.1.0.1.0.0
# ::edge	person	quant	13	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 13) :ARG1-of (MRPNode-2 / cause-01 :ARG0 (MRPNode-3 / attack-01 :mod (MRPNode-4 / terror) :ARG1 (MRPNode-5 / city :name (MRPNode-6 / name :op1 afgan)))))

# ::id 576
# ::snt Rev's Early Reads: March 2
# ::tok Rev 's Early Reads : March 2
# ::alignments 0-1|0.0+0.0.0+0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 2-3|0.1 3-4|0 5-7|0.2+0.2.0+0.2.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.829412 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	read-01	3-4
# ::node	0.0	person	0-1
# ::node	0.0.0	have-org-role-91	0-1
# ::node	0.0.0.0	political-party	0-1
# ::node	0.0.0.0.0	name	0-1
# ::node	0.0.0.0.0.0	rev	0-1
# ::node	0.1	Early	2-3
# ::node	0.2	date-entity	5-7
# ::node	0.2.0	3	5-7
# ::node	0.2.1	2	5-7
# ::root	0	read-01
# ::edge	date-entity	day	2	0.2	0.2.1
# ::edge	date-entity	month	3	0.2	0.2.0
# ::edge	have-org-role-91	ARG1	political-party	0.0.0	0.0.0.0
# ::edge	name	op1	rev	0.0.0.0.0	0.0.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.0
# ::edge	political-party	name	name	0.0.0.0	0.0.0.0.0
# ::edge	read-01	ARG0	person	0	0.0
# ::edge	read-01	time	Early	0	0.1
# ::edge	read-01	time	date-entity	0	0.2
(MRPNode-0 / read-01 :ARG0 (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-org-role-91 :ARG1 (MRPNode-3 / political-party :name (MRPNode-4 / name :op1 rev)))) :time (MRPNode-5 / Early) :time (MRPNode-6 / date-entity :month 3 :day 2))

# ::id 577
# ::snt Markets Live: Waiting for China data
# ::tok Markets Live : Waiting for China data
# ::alignments 1-2|0.0 3-4|0 5-6|0.1.0+0.1.0.0+0.1.0.0.0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.832899 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	wait-01	3-4
# ::node	0.0	live	1-2
# ::node	0.1	data	6-7
# ::node	0.1.0	country	5-6
# ::node	0.1.0.0	name	5-6
# ::node	0.1.0.0.0	china	5-6
# ::root	0	wait-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	data	mod	country	0.1	0.1.0
# ::edge	name	op1	china	0.1.0.0	0.1.0.0.0
# ::edge	wait-01	ARG1	live	0	0.0
# ::edge	wait-01	ARG2	data	0	0.1
(MRPNode-0 / wait-01 :ARG1 (MRPNode-1 / live) :ARG2 (MRPNode-2 / data :mod (MRPNode-3 / country :name (MRPNode-4 / name :op1 china))))

# ::id 578
# ::snt Palestinians, Israeli police clash at Jerusalem's al-Aqsa
# ::tok Palestinians , Israeli police clash at Jerusalem 's al-Aqsa
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 2-3|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 3-4|0.1.0 4-5|0.1 6-7|0.1.1+0.1.1.0+0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.839802 ::parser eager_oracle ::smatch 0.7500000000000001 ::n_actions 25
# ::node	0	and	
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	palestine	0-1
# ::node	0.1	clash-01	4-5
# ::node	0.1.0	police	3-4
# ::node	0.1.0.0	country	2-3
# ::node	0.1.0.0.0	name	2-3
# ::node	0.1.0.0.0.0	israel	2-3
# ::node	0.1.1	city	6-7
# ::node	0.1.1.0	name	6-7
# ::node	0.1.1.0.0	jerusalem	6-7
# ::root	0	and
# ::edge	and	op1	country	0	0.0
# ::edge	and	op2	clash-01	0	0.1
# ::edge	city	name	name	0.1.1	0.1.1.0
# ::edge	clash-01	ARG1	police	0.1	0.1.0
# ::edge	clash-01	location	city	0.1	0.1.1
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	israel	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op1	jerusalem	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	palestine	0.0.0	0.0.0.0
# ::edge	police	mod	country	0.1.0	0.1.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 palestine)) :op2 (MRPNode-3 / clash-01 :ARG1 (MRPNode-4 / police :mod (MRPNode-5 / country :name (MRPNode-6 / name :op1 israel))) :location (MRPNode-7 / city :name (MRPNode-8 / name :op1 jerusalem))))

# ::id 579
# ::snt The end of the Hong Kong protests?
# ::tok The end of the Hong Kong protests ?
# ::alignments 1-2|0 4-6|0.0.0+0.0.0.0+0.0.0.0.0+0.0.0.0.1 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.843177 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 19
# ::node	0	end-01	1-2
# ::node	0.0	protest-01	6-7
# ::node	0.0.0	city	4-6
# ::node	0.0.0.0	name	4-6
# ::node	0.0.0.0.0	hong	4-6
# ::node	0.0.0.0.1	kong	4-6
# ::node	0.1	amr-unknown	
# ::root	0	end-01
# ::edge	city	name	name	0.0.0	0.0.0.0
# ::edge	end-01	ARG1	protest-01	0	0.0
# ::edge	end-01	ARG2	amr-unknown	0	0.1
# ::edge	name	op1	hong	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	kong	0.0.0.0	0.0.0.0.1
# ::edge	protest-01	location	city	0.0	0.0.0
(MRPNode-0 / end-01 :ARG1 (MRPNode-1 / protest-01 :location (MRPNode-2 / city :name (MRPNode-3 / name :op1 hong :op2 kong))) :ARG2 (MRPNode-4 / amr-unknown))

# ::id 580
# ::snt Russian warplanes strike inside Syria
# ::tok Russian warplanes strike inside Syria
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.0 2-3|0 3-4|0.1 4-5|0.0.0+0.0.0.0+0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.847266 ::parser eager_oracle ::smatch 0.9375 ::n_actions 25
# ::node	0	strike-01	2-3
# ::node	0.0	warplane	1-2
# ::node	0.0.0	country	4-5
# ::node	0.0.0.0	name	4-5
# ::node	0.0.0.0.0	syria	4-5
# ::node	0.1	inside	3-4
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	russia	0-1
# ::root	0	strike-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	inside	op1	country	0.1	0.1.0
# ::edge	name	op1	russia	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	syria	0.0.0.0	0.0.0.0.0
# ::edge	strike-01	ARG0	warplane	0	0.0
# ::edge	strike-01	ARG2	inside	0	0.1
# ::edge	warplane	mod	country	0.0	0.0.0
(MRPNode-0 / strike-01 :ARG0 (MRPNode-1 / warplane :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 syria))) :ARG2 (MRPNode-4 / inside :op1 (MRPNode-5 / country :name (MRPNode-6 / name :op1 russia))))

# ::id 581
# ::snt Nigeria Votes in Tight Presidential Election
# ::tok Nigeria Votes in Tight Presidential Election
# ::alignments 0-1|0.0.1+0.0.1.0 1-2|0 4-5|0.0.0+0.0.0.0+0.0.0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.852362 ::parser eager_oracle ::smatch 0.9285714285714286 ::n_actions 29
# ::node	0	vote-01	1-2
# ::node	0.0	elect-01	5-6
# ::node	0.0.0	person	4-5
# ::node	0.0.0.0	have-org-role-91	4-5
# ::node	0.0.0.0.0	president	4-5
# ::node	0.0.1	name	0-1
# ::node	0.0.1.0	nigeria	0-1
# ::node	0.1	country	
# ::root	0	vote-01
# ::edge	elect-01	ARG1	person	0.0	0.0.0
# ::edge	elect-01	mod	name	0.0	0.0.1
# ::edge	have-org-role-91	ARG2	president	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	nigeria	0.0.1	0.0.1.0
# ::edge	person	ARG0-of	have-org-role-91	0.0.0	0.0.0.0
# ::edge	vote-01	ARG0	country	0	0.1
# ::edge	vote-01	ARG1	elect-01	0	0.0
(MRPNode-0 / vote-01 :ARG1 (MRPNode-1 / elect-01 :ARG1 (MRPNode-2 / person :ARG0-of (MRPNode-3 / have-org-role-91 :ARG2 (MRPNode-4 / president))) :mod (MRPNode-5 / name :op1 nigeria)) :ARG0 (MRPNode-6 / country))

# ::id 582
# ::snt Prince William dons samurai gear on Japan tour
# ::tok Prince William dons samurai gear on Japan tour
# ::alignments 0-1|0.1.1+0.1.1.0 1-2|0.1+0.1.0+0.1.0.0 3-4|0.0.0 4-5|0.0 6-7|0.2.0+0.2.0.0+0.2.0.0.0 7-8|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:51.859710 ::parser eager_oracle ::smatch 0.8095238095238095 ::n_actions 30
# ::node	0	do-02	
# ::node	0.0	gear	4-5
# ::node	0.0.0	samurai	3-4
# ::node	0.1	person	1-2
# ::node	0.1.0	name	1-2
# ::node	0.1.0.0	william	1-2
# ::node	0.1.1	have-org-role-91	0-1
# ::node	0.1.1.0	prince	0-1
# ::node	0.2	tour	7-8
# ::node	0.2.0	country	6-7
# ::node	0.2.0.0	name	6-7
# ::node	0.2.0.0.0	japan	6-7
# ::root	0	do-02
# ::edge	country	name	name	0.2.0	0.2.0.0
# ::edge	do-02	ARG0	person	0	0.1
# ::edge	do-02	ARG1	gear	0	0.0
# ::edge	do-02	time	tour	0	0.2
# ::edge	gear	mod	samurai	0.0	0.0.0
# ::edge	have-org-role-91	ARG2	prince	0.1.1	0.1.1.0
# ::edge	name	op1	japan	0.2.0.0	0.2.0.0.0
# ::edge	name	op1	william	0.1.0	0.1.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.1
# ::edge	person	name	name	0.1	0.1.0
# ::edge	tour	mod	country	0.2	0.2.0
(MRPNode-0 / do-02 :ARG1 (MRPNode-1 / gear :mod (MRPNode-2 / samurai)) :ARG0 (MRPNode-3 / person :name (MRPNode-4 / name :op1 william) :ARG0-of (MRPNode-5 / have-org-role-91 :ARG2 (MRPNode-6 / prince))) :time (MRPNode-7 / tour :mod (MRPNode-8 / country :name (MRPNode-9 / name :op1 japan))))

# ::id 583
# ::snt Micronesia vice president to visit China
# ::tok Micronesia vice president to visit China
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 1-2|0.1.0.1.0 2-3|0.1+0.1.0+0.1.0.1 4-5|0 5-6|0.0+0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.866839 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	visit-01	4-5
# ::node	0.0	country	5-6
# ::node	0.0.0	name	5-6
# ::node	0.0.0.0	china	5-6
# ::node	0.1	person	2-3
# ::node	0.1.0	have-org-role-91	2-3
# ::node	0.1.0.0	country	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	micronesia	0-1
# ::node	0.1.0.1	president	2-3
# ::node	0.1.0.1.0	vice	1-2
# ::root	0	visit-01
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	president	0.1.0	0.1.0.1
# ::edge	name	op1	china	0.0.0	0.0.0.0
# ::edge	name	op1	micronesia	0.1.0.0.0	0.1.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	president	mod	vice	0.1.0.1	0.1.0.1.0
# ::edge	visit-01	ARG0	person	0	0.1
# ::edge	visit-01	ARG1	country	0	0.0
(MRPNode-0 / visit-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 china)) :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-org-role-91 :ARG1 (MRPNode-5 / country :name (MRPNode-6 / name :op1 micronesia)) :ARG2 (MRPNode-7 / president :mod (MRPNode-8 / vice)))))

# ::id 584
# ::snt Iran ends cooperation agreement with Pakistan
# ::tok Iran ends cooperation agreement with Pakistan
# ::alignments 0-1|0.0.2+0.0.2.0+0.0.2.0.0 1-2|0 2-3|0.0.0 3-4|0.0 5-6|0.0.1+0.0.1.0+0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.871595 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	end-01	1-2
# ::node	0.0	agree-01	3-4
# ::node	0.0.0	cooperate-01	2-3
# ::node	0.0.1	country	5-6
# ::node	0.0.1.0	name	5-6
# ::node	0.0.1.0.0	pakistan	5-6
# ::node	0.0.2	country	0-1
# ::node	0.0.2.0	name	0-1
# ::node	0.0.2.0.0	iran	0-1
# ::root	0	end-01
# ::edge	agree-01	ARG0	country	0.0	0.0.2
# ::edge	agree-01	ARG1	cooperate-01	0.0	0.0.0
# ::edge	agree-01	ARG2	country	0.0	0.0.1
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	country	name	name	0.0.2	0.0.2.0
# ::edge	end-01	ARG0	country	0	0.0.2
# ::edge	end-01	ARG1	agree-01	0	0.0
# ::edge	name	op1	iran	0.0.2.0	0.0.2.0.0
# ::edge	name	op1	pakistan	0.0.1.0	0.0.1.0.0
(MRPNode-0 / end-01 :ARG1 (MRPNode-1 / agree-01 :ARG1 (MRPNode-2 / cooperate-01) :ARG2 (MRPNode-3 / country :name (MRPNode-4 / name :op1 pakistan)) :ARG0 (MRPNode-5 / country :name (MRPNode-6 / name :op1 iran))) :ARG0 MRPNode-5)

# ::id 585
# ::snt New US Sanctions Target Overseas Cyber Attackers
# ::tok New US Sanctions Target Overseas Cyber Attackers
# ::alignments 0-1|0.0.1 1-2|0.1+0.1.0+0.1.0.0 3-4|0 5-6|0.0.0.0 6-7|0.0+0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.877433 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	target-01	3-4
# ::node	0.0	person	6-7
# ::node	0.0.0	attack-01	6-7
# ::node	0.0.0.0	cyber	5-6
# ::node	0.0.1	new-01	0-1
# ::node	0.1	state	1-2
# ::node	0.1.0	name	1-2
# ::node	0.1.0.0	us	1-2
# ::root	0	target-01
# ::edge	attack-01	mod	cyber	0.0.0	0.0.0.0
# ::edge	name	op1	us	0.1.0	0.1.0.0
# ::edge	person	ARG0-of	attack-01	0.0	0.0.0
# ::edge	person	ARG1-of	new-01	0.0	0.0.1
# ::edge	state	name	name	0.1	0.1.0
# ::edge	target-01	ARG0	state	0	0.1
# ::edge	target-01	ARG1	person	0	0.0
(MRPNode-0 / target-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / attack-01 :mod (MRPNode-3 / cyber)) :ARG1-of (MRPNode-4 / new-01)) :ARG0 (MRPNode-5 / state :name (MRPNode-6 / name :op1 us)))

# ::id 586
# ::snt Deadly Blast Rocks Coal Mine in East Ukraine
# ::tok Deadly Blast Rocks Coal Mine in East Ukraine
# ::alignments 1-2|0.2 2-5|0.0+0.0.0+0.0.1+0.0.2 7-8|0.1.0+0.1.0.0+0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.882570 ::parser eager_oracle ::smatch 0.5714285714285714 ::n_actions 17
# ::node	0	mine-01	
# ::node	0.0	name	2-5
# ::node	0.0.0	rocks	2-5
# ::node	0.0.1	coal	2-5
# ::node	0.0.2	mine	2-5
# ::node	0.1	southeast	
# ::node	0.1.0	country	7-8
# ::node	0.1.0.0	name	7-8
# ::node	0.1.0.0.0	ukraine	7-8
# ::node	0.2	Blast	1-2
# ::node	0.2.0	die-01	
# ::root	0	mine-01
# ::edge	Blast	ARG0-of	die-01	0.2	0.2.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	mine-01	location	name	0	0.0
# ::edge	mine-01	location	southeast	0	0.1
# ::edge	mine-01	mod	Blast	0	0.2
# ::edge	name	op1	rocks	0.0	0.0.0
# ::edge	name	op1	ukraine	0.1.0.0	0.1.0.0.0
# ::edge	name	op2	coal	0.0	0.0.1
# ::edge	name	op3	mine	0.0	0.0.2
# ::edge	southeast	part-of	country	0.1	0.1.0
(MRPNode-0 / mine-01 :location (MRPNode-1 / name :op1 rocks :op2 coal :op3 mine) :location (MRPNode-2 / southeast :part-of (MRPNode-3 / country :name (MRPNode-4 / name :op1 ukraine))) :mod (MRPNode-5 / Blast :ARG0-of (MRPNode-6 / die-01)))

# ::id 587
# ::snt Backstage Moves Intensify as Fight Against Islamic State Widens
# ::tok Backstage Moves Intensify as Fight Against Islamic State Widens
# ::alignments 0-1|0.1.0 1-2|0.1 2-3|0 4-5|0.0 6-7|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 7-8|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.890508 ::parser eager_oracle ::smatch 0.8125 ::n_actions 28
# ::node	0	intensify-01	2-3
# ::node	0.0	fight-01	4-5
# ::node	0.0.0	deny-01	
# ::node	0.0.0.0	state	7-8
# ::node	0.0.0.0.0	religious-group	6-7
# ::node	0.0.0.0.0.0	name	6-7
# ::node	0.0.0.0.0.0.0	islam	6-7
# ::node	0.1	move-02	1-2
# ::node	0.1.0	back	0-1
# ::root	0	intensify-01
# ::edge	deny-01	ARG1	state	0.0.0	0.0.0.0
# ::edge	fight-01	ARG1	deny-01	0.0	0.0.0
# ::edge	intensify-01	ARG1	fight-01	0	0.0
# ::edge	intensify-01	ARG1	move-02	0	0.1
# ::edge	move-02	ARG1	back	0.1	0.1.0
# ::edge	name	op1	islam	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	religious-group	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	state	mod	religious-group	0.0.0.0	0.0.0.0.0
(MRPNode-0 / intensify-01 :ARG1 (MRPNode-1 / fight-01 :ARG1 (MRPNode-2 / deny-01 :ARG1 (MRPNode-3 / state :mod (MRPNode-4 / religious-group :name (MRPNode-5 / name :op1 islam))))) :ARG1 (MRPNode-6 / move-02 :ARG1 (MRPNode-7 / back)))

# ::id 588
# ::snt Taiwan coast guard launches new ships as South China Sea tensions rise
# ::tok Taiwan coast guard launches new ships as South China Sea tensions rise
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 1-2|0.1.0 2-3|0.1 3-4|0 4-5|0.0.0 5-6|0.0 7-10|0.2.0.0+0.2.0.0.0+0.2.0.0.0.0+0.2.0.0.0.1+0.2.0.0.0.2 10-11|0.2.0 11-12|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:51.904866 ::parser eager_oracle ::smatch 1.0 ::n_actions 41
# ::node	0	launch-01	3-4
# ::node	0.0	ship	5-6
# ::node	0.0.0	new-01	4-5
# ::node	0.1	guard-01	2-3
# ::node	0.1.0	coast	1-2
# ::node	0.1.0.0	country	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	taiwan	0-1
# ::node	0.2	rise-01	11-12
# ::node	0.2.0	tension	10-11
# ::node	0.2.0.0	sea	7-10
# ::node	0.2.0.0.0	name	7-10
# ::node	0.2.0.0.0.0	south	7-10
# ::node	0.2.0.0.0.1	china	7-10
# ::node	0.2.0.0.0.2	sea	7-10
# ::root	0	launch-01
# ::edge	coast	mod	country	0.1.0	0.1.0.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	guard-01	ARG1	coast	0.1	0.1.0
# ::edge	launch-01	ARG0	guard-01	0	0.1
# ::edge	launch-01	ARG1	ship	0	0.0
# ::edge	launch-01	time	rise-01	0	0.2
# ::edge	name	op1	south	0.2.0.0.0	0.2.0.0.0.0
# ::edge	name	op1	taiwan	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op2	china	0.2.0.0.0	0.2.0.0.0.1
# ::edge	name	op3	sea	0.2.0.0.0	0.2.0.0.0.2
# ::edge	rise-01	ARG1	tension	0.2	0.2.0
# ::edge	sea	name	name	0.2.0.0	0.2.0.0.0
# ::edge	ship	ARG1-of	new-01	0.0	0.0.0
# ::edge	tension	location	sea	0.2.0	0.2.0.0
(MRPNode-0 / launch-01 :ARG1 (MRPNode-1 / ship :ARG1-of (MRPNode-2 / new-01)) :ARG0 (MRPNode-3 / guard-01 :ARG1 (MRPNode-4 / coast :mod (MRPNode-5 / country :name (MRPNode-6 / name :op1 taiwan)))) :time (MRPNode-7 / rise-01 :ARG1 (MRPNode-8 / tension :location (MRPNode-9 / sea :name (MRPNode-10 / name :op1 south :op2 china :op3 sea)))))

# ::id 589
# ::snt Pro-Palestinian Activists March to UN Headquarters
# ::tok Pro - Palestinian Activists March to UN Headquarters
# ::alignments 2-3|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 6-7|0.1.0+0.1.0.0+0.1.0.0.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.910837 ::parser eager_oracle ::smatch 0.5625000000000001 ::n_actions 18
# ::node	0	byline-91	
# ::node	0.0	person	
# ::node	0.0.0	favor-01	
# ::node	0.0.0.0	country	2-3
# ::node	0.0.0.0.0	name	2-3
# ::node	0.0.0.0.0.0	palestine	2-3
# ::node	0.0.1	act-02	
# ::node	0.1	headquarters	7-8
# ::node	0.1.0	organization	6-7
# ::node	0.1.0.0	name	6-7
# ::node	0.1.0.0.0	un	6-7
# ::root	0	byline-91
# ::edge	byline-91	ARG1	person	0	0.0
# ::edge	byline-91	ARG4	headquarters	0	0.1
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	favor-01	ARG1	country	0.0.0	0.0.0.0
# ::edge	headquarters	poss	organization	0.1	0.1.0
# ::edge	name	op1	palestine	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	un	0.1.0.0	0.1.0.0.0
# ::edge	organization	name	name	0.1.0	0.1.0.0
# ::edge	person	ARG0-of	act-02	0.0	0.0.1
# ::edge	person	ARG0-of	favor-01	0.0	0.0.0
(MRPNode-0 / byline-91 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / favor-01 :ARG1 (MRPNode-3 / country :name (MRPNode-4 / name :op1 palestine))) :ARG0-of (MRPNode-5 / act-02)) :ARG4 (MRPNode-6 / headquarters :poss (MRPNode-7 / organization :name (MRPNode-8 / name :op1 un))))

# ::id 590
# ::snt All 224 dead in Russian airliner mystery crash
# ::tok All 224 dead in Russian airliner mystery crash
# ::alignments 0-1|0.1.1 1-2|0.1.0 4-5|0.0.0.0.0.0+0.0.0.0.0.0.0+0.0.0.0.0.0.0.0 5-6|0.0.0.0.0 6-7|0.0.0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.917350 ::parser eager_oracle ::smatch 0.5806451612903226 ::n_actions 26
# ::node	0	die-01	
# ::node	0.0	cause-01	
# ::node	0.0.0	crash-01	7-8
# ::node	0.0.0.0	mystery	6-7
# ::node	0.0.0.0.0	airliner	5-6
# ::node	0.0.0.0.0.0	country	4-5
# ::node	0.0.0.0.0.0.0	name	4-5
# ::node	0.0.0.0.0.0.0.0	russia	4-5
# ::node	0.1	person	
# ::node	0.1.0	224	1-2
# ::node	0.1.1	all	0-1
# ::root	0	die-01
# ::edge	airliner	mod	country	0.0.0.0.0	0.0.0.0.0.0
# ::edge	cause-01	ARG0	crash-01	0.0	0.0.0
# ::edge	country	name	name	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	crash-01	ARG1	mystery	0.0.0	0.0.0.0
# ::edge	die-01	ARG1	cause-01	0	0.0
# ::edge	die-01	ARG1	person	0	0.1
# ::edge	mystery	mod	airliner	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	russia	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0
# ::edge	person	mod	all	0.1	0.1.1
# ::edge	person	quant	224	0.1	0.1.0
(MRPNode-0 / die-01 :ARG1 (MRPNode-1 / cause-01 :ARG0 (MRPNode-2 / crash-01 :ARG1 (MRPNode-3 / mystery :mod (MRPNode-4 / airliner :mod (MRPNode-5 / country :name (MRPNode-6 / name :op1 russia)))))) :ARG1 (MRPNode-7 / person :quant 224 :mod (MRPNode-8 / all)))

# ::id 591
# ::snt Scientists prove there is water on Mars
# ::tok Scientists prove there is water on Mars
# ::alignments 0-1|0.1 1-2|0 4-5|0.0 6-7|0.0.0+0.0.0.0+0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.922359 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	prove-01	1-2
# ::node	0.0	water	4-5
# ::node	0.0.0	planet	6-7
# ::node	0.0.0.0	name	6-7
# ::node	0.0.0.0.0	mars	6-7
# ::node	0.1	scientist	0-1
# ::root	0	prove-01
# ::edge	name	op1	mars	0.0.0.0	0.0.0.0.0
# ::edge	planet	name	name	0.0.0	0.0.0.0
# ::edge	prove-01	ARG0	scientist	0	0.1
# ::edge	prove-01	ARG1	water	0	0.0
# ::edge	water	location	planet	0.0	0.0.0
(MRPNode-0 / prove-01 :ARG1 (MRPNode-1 / water :location (MRPNode-2 / planet :name (MRPNode-3 / name :op1 mars))) :ARG0 (MRPNode-4 / scientist))

# ::id 592
# ::snt Editors from around the world urge Turkey to protect media
# ::tok Editors from around the world urge Turkey to protect media
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 2-3|0.1.1 4-5|0.1.1.0 5-6|0 6-7|0.0+0.0.0+0.0.0.0 8-9|0.2 9-10|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.931101 ::parser eager_oracle ::smatch 1.0 ::n_actions 42
# ::node	0	urge-01	5-6
# ::node	0.0	country	6-7
# ::node	0.0.0	name	6-7
# ::node	0.0.0.0	turkey	6-7
# ::node	0.1	person	0-1
# ::node	0.1.0	have-org-role-91	0-1
# ::node	0.1.0.0	editor	0-1
# ::node	0.1.1	around	2-3
# ::node	0.1.1.0	world	4-5
# ::node	0.2	protect-01	8-9
# ::node	0.2.0	media	9-10
# ::root	0	urge-01
# ::edge	around	op1	world	0.1.1	0.1.1.0
# ::edge	country	name	name	0.0	0.0.0
# ::edge	have-org-role-91	ARG2	editor	0.1.0	0.1.0.0
# ::edge	name	op1	turkey	0.0.0	0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	person	source	around	0.1	0.1.1
# ::edge	protect-01	ARG0	country	0.2	0.0
# ::edge	protect-01	ARG1	media	0.2	0.2.0
# ::edge	urge-01	ARG0	person	0	0.1
# ::edge	urge-01	ARG1	country	0	0.0
# ::edge	urge-01	ARG2	protect-01	0	0.2
(MRPNode-0 / urge-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 turkey)) :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-org-role-91 :ARG2 (MRPNode-5 / editor)) :source (MRPNode-6 / around :op1 (MRPNode-7 / world))) :ARG2 (MRPNode-8 / protect-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-9 / media)))

# ::id 593
# ::snt North Korea to put US citizen on trial
# ::tok North Korea to put US citizen on trial
# ::alignments 0-2|0.0+0.0.0+0.0.0.0+0.0.0.1 4-5|0.1.0+0.1.0.0+0.1.0.0.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.935434 ::parser eager_oracle ::smatch 0.7999999999999999 ::n_actions 19
# ::node	0	try-01	
# ::node	0.0	country	0-2
# ::node	0.0.0	name	0-2
# ::node	0.0.0.0	north	0-2
# ::node	0.0.0.1	korea	0-2
# ::node	0.1	citizen	5-6
# ::node	0.1.0	country	4-5
# ::node	0.1.0.0	name	4-5
# ::node	0.1.0.0.0	us	4-5
# ::root	0	try-01
# ::edge	citizen	ARG0	country	0.1	0.0
# ::edge	citizen	mod	country	0.1	0.1.0
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	name	op1	north	0.0.0	0.0.0.0
# ::edge	name	op1	us	0.1.0.0	0.1.0.0.0
# ::edge	name	op2	korea	0.0.0	0.0.0.1
# ::edge	try-01	ARG1	citizen	0	0.1
# ::edge	try-01	ARG1	country	0	0.0
(MRPNode-0 / try-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 north :op2 korea)) :ARG1 (MRPNode-3 / citizen :ARG0 MRPNode-1 :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 us))))

# ::id 594
# ::snt Hong Kong officials resume work as protests thin
# ::tok Hong Kong officials resume work as protests thin
# ::alignments 0-2|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.1 2-3|0.0+0.0.0+0.0.0.1 3-4|0 4-5|0.2 6-7|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.943313 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	resume-01	3-4
# ::node	0.0	person	2-3
# ::node	0.0.0	have-org-role-91	2-3
# ::node	0.0.0.0	city	0-2
# ::node	0.0.0.0.0	name	0-2
# ::node	0.0.0.0.0.0	hong	0-2
# ::node	0.0.0.0.0.1	kong	0-2
# ::node	0.0.0.1	official	2-3
# ::node	0.1	protest-01	6-7
# ::node	0.2	work-01	4-5
# ::root	0	resume-01
# ::edge	city	name	name	0.0.0.0	0.0.0.0.0
# ::edge	have-org-role-91	ARG1	city	0.0.0	0.0.0.0
# ::edge	have-org-role-91	ARG2	official	0.0.0	0.0.0.1
# ::edge	name	op1	hong	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op2	kong	0.0.0.0.0	0.0.0.0.0.1
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.0
# ::edge	resume-01	ARG1	person	0	0.0
# ::edge	resume-01	ARG1	protest-01	0	0.1
# ::edge	resume-01	ARG1	work-01	0	0.2
# ::edge	work-01	ARG0	person	0.2	0.0
(MRPNode-0 / resume-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-org-role-91 :ARG1 (MRPNode-3 / city :name (MRPNode-4 / name :op1 hong :op2 kong)) :ARG2 (MRPNode-5 / official))) :ARG1 (MRPNode-6 / protest-01) :ARG1 (MRPNode-7 / work-01 :ARG0 MRPNode-1))

# ::id 595
# ::snt Volkswagen skids into red in wake of pollution scandal
# ::tok Volkswagen skids into red in wake of pollution scandal
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 3-4|0.2 7-8|0.1.0.0 8-9|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.948388 ::parser eager_oracle ::smatch 0.5833333333333334 ::n_actions 21
# ::node	0	switch-01	
# ::node	0.0	company	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	volkswagen	0-1
# ::node	0.1	cause-01	
# ::node	0.1.0	scandal	8-9
# ::node	0.1.0.0	pollute-01	7-8
# ::node	0.2	red-02	3-4
# ::root	0	switch-01
# ::edge	cause-01	ARG0	scandal	0.1	0.1.0
# ::edge	company	name	name	0.0	0.0.0
# ::edge	name	op1	volkswagen	0.0.0	0.0.0.0
# ::edge	scandal	topic	pollute-01	0.1.0	0.1.0.0
# ::edge	switch-01	ARG1	company	0	0.0
# ::edge	switch-01	ARG1-of	cause-01	0	0.1
# ::edge	switch-01	ARG2	red-02	0	0.2
(MRPNode-0 / switch-01 :ARG1 (MRPNode-1 / company :name (MRPNode-2 / name :op1 volkswagen)) :ARG1-of (MRPNode-3 / cause-01 :ARG0 (MRPNode-4 / scandal :topic (MRPNode-5 / pollute-01))) :ARG2 (MRPNode-6 / red-02))

# ::id 596
# ::snt France shuts mosque, arrests man in crackdown after attacks
# ::tok France shuts mosque , arrests man in crackdown after attacks
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 1-2|0.0 2-3|0.0.0 4-5|0.1 5-6|0.1.1 8-9|0.1.0.0 9-10|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.956789 ::parser eager_oracle ::smatch 0.8421052631578948 ::n_actions 34
# ::node	0	and	
# ::node	0.0	shut-down-05	1-2
# ::node	0.0.0	mosque	2-3
# ::node	0.0.1	country	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	france	0-1
# ::node	0.1	arrest-01	4-5
# ::node	0.1.0	attack-01	9-10
# ::node	0.1.0.0	after	8-9
# ::node	0.1.1	man	5-6
# ::root	0	and
# ::edge	and	op1	shut-down-05	0	0.0
# ::edge	and	op2	arrest-01	0	0.1
# ::edge	arrest-01	ARG0	country	0.1	0.0.1
# ::edge	arrest-01	ARG1	attack-01	0.1	0.1.0
# ::edge	arrest-01	ARG1	man	0.1	0.1.1
# ::edge	attack-01	time	after	0.1.0	0.1.0.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	name	op1	france	0.0.1.0	0.0.1.0.0
# ::edge	shut-down-05	ARG0	country	0.0	0.0.1
# ::edge	shut-down-05	ARG1	mosque	0.0	0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / shut-down-05 :ARG1 (MRPNode-2 / mosque) :ARG0 (MRPNode-3 / country :name (MRPNode-4 / name :op1 france))) :op2 (MRPNode-5 / arrest-01 :ARG0 MRPNode-3 :ARG1 (MRPNode-6 / attack-01 :time (MRPNode-7 / after)) :ARG1 (MRPNode-8 / man)))

# ::id 597
# ::snt Russian plane reportedly crashes in Egypt
# ::tok Russian plane reportedly crashes in Egypt
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 1-2|0.0 2-3|0.1 3-4|0 5-6|0.2+0.2.0+0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.961887 ::parser eager_oracle ::smatch 0.9375 ::n_actions 23
# ::node	0	crash-01	3-4
# ::node	0.0	plane	1-2
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	russia	0-1
# ::node	0.1	report-01	2-3
# ::node	0.2	country	5-6
# ::node	0.2.0	name	5-6
# ::node	0.2.0.0	egypt	5-6
# ::root	0	crash-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.2	0.2.0
# ::edge	crash-01	ARG1	plane	0	0.0
# ::edge	crash-01	ARG1-of	report-01	0	0.1
# ::edge	crash-01	location	country	0	0.2
# ::edge	name	op1	egypt	0.2.0	0.2.0.0
# ::edge	name	op1	russia	0.0.0.0	0.0.0.0.0
# ::edge	plane	mod	country	0.0	0.0.0
(MRPNode-0 / crash-01 :ARG1 (MRPNode-1 / plane :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 russia))) :ARG1-of (MRPNode-4 / report-01) :location (MRPNode-5 / country :name (MRPNode-6 / name :op1 egypt)))

# ::id 598
# ::snt Mandela's condition has 'improved'
# ::tok Mandela 's condition has ' improved '
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 2-3|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.964874 ::parser eager_oracle ::smatch 1.0 ::n_actions 18
# ::node	0	improve-01	5-6
# ::node	0.0	condition	2-3
# ::node	0.0.0	person	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	mandela	0-1
# ::root	0	improve-01
# ::edge	condition	poss	person	0.0	0.0.0
# ::edge	improve-01	ARG1	condition	0	0.0
# ::edge	name	op1	mandela	0.0.0.0	0.0.0.0.0
# ::edge	person	name	name	0.0.0	0.0.0.0
(MRPNode-0 / improve-01 :ARG1 (MRPNode-1 / condition :poss (MRPNode-2 / person :name (MRPNode-3 / name :op1 mandela))))

# ::id 599
# ::snt Search leader urges caution in findings related to missing Malaysian jetliner
# ::tok Search leader urges caution in findings related to missing Malaysian jetliner
# ::alignments 0-1|0.0.1.0.0 1-2|0.0.1+0.0.1.0 2-3|0 3-4|0.0 5-6|0.0.0 6-7|0.0.0.0 8-9|0.0.0.0.0 9-10|0.0.0.0.0.0.0+0.0.0.0.0.0.0.0+0.0.0.0.0.0.0.0.0 10-11|0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:51.980453 ::parser eager_oracle ::smatch 0.9583333333333334 ::n_actions 47
# ::node	0	urge-01	2-3
# ::node	0.0	cautious-02	3-4
# ::node	0.0.0	find-01	5-6
# ::node	0.0.0.0	relate-01	6-7
# ::node	0.0.0.0.0	miss-01	8-9
# ::node	0.0.0.0.0.0	jetliner	10-11
# ::node	0.0.0.0.0.0.0	country	9-10
# ::node	0.0.0.0.0.0.0.0	name	9-10
# ::node	0.0.0.0.0.0.0.0.0	malaysia	9-10
# ::node	0.0.1	person	1-2
# ::node	0.0.1.0	lead-02	1-2
# ::node	0.0.1.0.0	search-01	0-1
# ::root	0	urge-01
# ::edge	cautious-02	ARG0	person	0.0	0.0.1
# ::edge	cautious-02	ARG1	find-01	0.0	0.0.0
# ::edge	country	name	name	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0
# ::edge	find-01	ARG1-of	relate-01	0.0.0	0.0.0.0
# ::edge	jetliner	mod	country	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	lead-02	ARG1	search-01	0.0.1.0	0.0.1.0.0
# ::edge	miss-01	ARG1	jetliner	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	malaysia	0.0.0.0.0.0.0.0	0.0.0.0.0.0.0.0.0
# ::edge	person	ARG0-of	lead-02	0.0.1	0.0.1.0
# ::edge	relate-01	ARG2	miss-01	0.0.0.0	0.0.0.0.0
# ::edge	urge-01	ARG0	person	0	0.0.1
# ::edge	urge-01	ARG1	cautious-02	0	0.0
(MRPNode-0 / urge-01 :ARG1 (MRPNode-1 / cautious-02 :ARG1 (MRPNode-2 / find-01 :ARG1-of (MRPNode-3 / relate-01 :ARG2 (MRPNode-4 / miss-01 :ARG1 (MRPNode-5 / jetliner :mod (MRPNode-6 / country :name (MRPNode-7 / name :op1 malaysia)))))) :ARG0 (MRPNode-8 / person :ARG0-of (MRPNode-9 / lead-02 :ARG1 (MRPNode-10 / search-01)))) :ARG0 MRPNode-8)

# ::id 600
# ::snt Mandela remembered by family, as stadium memorial service is planned
# ::tok Mandela remembered by family , as stadium memorial service is planned
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 3-4|0.1 6-7|0.2.0.1 7-8|0.2.0.0 8-9|0.2.0 10-11|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:51.989972 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	remember-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	mandela	0-1
# ::node	0.1	family	3-4
# ::node	0.2	plan-01	10-11
# ::node	0.2.0	serve-01	8-9
# ::node	0.2.0.0	memorial	7-8
# ::node	0.2.0.1	stadium	6-7
# ::root	0	remember-01
# ::edge	name	op1	mandela	0.0.0	0.0.0.0
# ::edge	person	name	name	0.0	0.0.0
# ::edge	plan-01	ARG1	serve-01	0.2	0.2.0
# ::edge	remember-01	ARG0	family	0	0.1
# ::edge	remember-01	ARG1	person	0	0.0
# ::edge	remember-01	time	plan-01	0	0.2
# ::edge	serve-01	ARG1	memorial	0.2.0	0.2.0.0
# ::edge	serve-01	mod	stadium	0.2.0	0.2.0.1
(MRPNode-0 / remember-01 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 mandela)) :ARG0 (MRPNode-3 / family) :time (MRPNode-4 / plan-01 :ARG1 (MRPNode-5 / serve-01 :ARG1 (MRPNode-6 / memorial) :mod (MRPNode-7 / stadium))))

# ::id 601
# ::snt Obama holds out over Syria strikes
# ::tok Obama holds out over Syria strikes
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 4-5|0.1.0+0.1.0.0+0.1.0.0.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:51.994428 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	hold-up-11	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	obama	0-1
# ::node	0.1	strike-01	5-6
# ::node	0.1.0	country	4-5
# ::node	0.1.0.0	name	4-5
# ::node	0.1.0.0.0	syria	4-5
# ::root	0	hold-up-11
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	hold-up-11	ARG1	person	0	0.0
# ::edge	hold-up-11	ARG2	strike-01	0	0.1
# ::edge	name	op1	obama	0.0.0	0.0.0.0
# ::edge	name	op1	syria	0.1.0.0	0.1.0.0.0
# ::edge	person	name	name	0.0	0.0.0
# ::edge	strike-01	ARG1	country	0.1	0.1.0
(MRPNode-0 / hold-up-11 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 obama)) :ARG2 (MRPNode-3 / strike-01 :ARG1 (MRPNode-4 / country :name (MRPNode-5 / name :op1 syria))))

# ::id 602
# ::snt George Zimmerman found not guilty of Trayvon Martin murder
# ::tok George Zimmerman found not guilty of Trayvon Martin murder
# ::alignments 0-2|0.0.1+0.0.1.0+0.0.1.0.0+0.0.1.0.1 2-3|0 3-4|0.0.0 4-5|0.0 6-8|0.0.2.0+0.0.2.0.0+0.0.2.0.0.0+0.0.2.0.0.1 8-9|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:52.001414 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	find-02	2-3
# ::node	0.0	guilty-01	4-5
# ::node	0.0.0	-	3-4
# ::node	0.0.1	person	0-2
# ::node	0.0.1.0	name	0-2
# ::node	0.0.1.0.0	george	0-2
# ::node	0.0.1.0.1	zimmerman	0-2
# ::node	0.0.2	murder-01	8-9
# ::node	0.0.2.0	person	6-8
# ::node	0.0.2.0.0	name	6-8
# ::node	0.0.2.0.0.0	trayvon	6-8
# ::node	0.0.2.0.0.1	martin	6-8
# ::root	0	find-02
# ::edge	find-02	ARG1	guilty-01	0	0.0
# ::edge	guilty-01	ARG1	person	0.0	0.0.1
# ::edge	guilty-01	ARG2	murder-01	0.0	0.0.2
# ::edge	guilty-01	polarity	-	0.0	0.0.0
# ::edge	murder-01	ARG0	person	0.0.2	0.0.2.0
# ::edge	name	op1	george	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	trayvon	0.0.2.0.0	0.0.2.0.0.0
# ::edge	name	op2	martin	0.0.2.0.0	0.0.2.0.0.1
# ::edge	name	op2	zimmerman	0.0.1.0	0.0.1.0.1
# ::edge	person	name	name	0.0.1	0.0.1.0
# ::edge	person	name	name	0.0.2.0	0.0.2.0.0
(MRPNode-0 / find-02 :ARG1 (MRPNode-1 / guilty-01 :polarity - :ARG1 (MRPNode-2 / person :name (MRPNode-3 / name :op1 george :op2 zimmerman)) :ARG2 (MRPNode-4 / murder-01 :ARG0 (MRPNode-5 / person :name (MRPNode-6 / name :op1 trayvon :op2 martin)))))

# ::id 603
# ::snt Obama, Hollande Hail Transformed US-French Relationship
# ::tok Obama , Hollande Hail Transformed US - French Relationship
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 5-6|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 7-8|0.1.0.1+0.1.0.1.0+0.1.0.1.0.0 8-9|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.012799 ::parser eager_oracle ::smatch 0.6511627906976744 ::n_actions 22
# ::node	0	and	
# ::node	0.0	person	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	obama	0-1
# ::node	0.1	surrender-01	
# ::node	0.1.0	relation-03	8-9
# ::node	0.1.0.0	country	5-6
# ::node	0.1.0.0.0	name	5-6
# ::node	0.1.0.0.0.0	us	5-6
# ::node	0.1.0.1	country	7-8
# ::node	0.1.0.1.0	name	7-8
# ::node	0.1.0.1.0.0	france	7-8
# ::node	0.1.1	person	
# ::node	0.1.1.0	name	
# ::node	0.1.1.0.0	obama	
# ::root	0	and
# ::edge	and	op1	person	0	0.0
# ::edge	and	op2	surrender-01	0	0.1
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	country	name	name	0.1.0.1	0.1.0.1.0
# ::edge	name	op1	france	0.1.0.1.0	0.1.0.1.0.0
# ::edge	name	op1	obama	0.0.0	0.0.0.0
# ::edge	name	op1	obama	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	us	0.1.0.0.0	0.1.0.0.0.0
# ::edge	person	name	name	0.0	0.0.0
# ::edge	person	name	name	0.1.1	0.1.1.0
# ::edge	relation-03	ARG0	country	0.1.0	0.1.0.0
# ::edge	relation-03	ARG0	country	0.1.0	0.1.0.1
# ::edge	surrender-01	ARG0	person	0.1	0.1.1
# ::edge	surrender-01	ARG1	relation-03	0.1	0.1.0
(MRPNode-0 / and :op1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 obama)) :op2 (MRPNode-3 / surrender-01 :ARG1 (MRPNode-4 / relation-03 :ARG0 (MRPNode-5 / country :name (MRPNode-6 / name :op1 us)) :ARG0 (MRPNode-7 / country :name (MRPNode-8 / name :op1 france))) :ARG0 (MRPNode-9 / person :name (MRPNode-10 / name :op1 obama))))

# ::id 604
# ::snt Russian parliament allows Putin to use military in Ukraine
# ::tok Russian parliament allows Putin to use military in Ukraine
# ::alignments 1-2|0.1+0.1.0+0.1.0.0 2-3|0 3-4|0.0.1+0.0.1.0+0.0.1.0.0 5-6|0.0 6-7|0.0.0 8-9|0.0.2+0.0.2.0+0.0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.021033 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	allow-01	2-3
# ::node	0.0	use-01	5-6
# ::node	0.0.0	military	6-7
# ::node	0.0.1	person	3-4
# ::node	0.0.1.0	name	3-4
# ::node	0.0.1.0.0	putin	3-4
# ::node	0.0.2	country	8-9
# ::node	0.0.2.0	name	8-9
# ::node	0.0.2.0.0	ukraine	8-9
# ::node	0.1	government-organization	1-2
# ::node	0.1.0	name	1-2
# ::node	0.1.0.0	parliament	1-2
# ::root	0	allow-01
# ::edge	allow-01	ARG0	government-organization	0	0.1
# ::edge	allow-01	ARG1	use-01	0	0.0
# ::edge	country	name	name	0.0.2	0.0.2.0
# ::edge	government-organization	name	name	0.1	0.1.0
# ::edge	name	op1	parliament	0.1.0	0.1.0.0
# ::edge	name	op1	putin	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	ukraine	0.0.2.0	0.0.2.0.0
# ::edge	person	name	name	0.0.1	0.0.1.0
# ::edge	use-01	ARG0	person	0.0	0.0.1
# ::edge	use-01	ARG1	military	0.0	0.0.0
# ::edge	use-01	location	country	0.0	0.0.2
(MRPNode-0 / allow-01 :ARG1 (MRPNode-1 / use-01 :ARG1 (MRPNode-2 / military) :ARG0 (MRPNode-3 / person :name (MRPNode-4 / name :op1 putin)) :location (MRPNode-5 / country :name (MRPNode-6 / name :op1 ukraine))) :ARG0 (MRPNode-7 / government-organization :name (MRPNode-8 / name :op1 parliament)))

# ::id 605
# ::snt World stocks rise on hopes Fed to keep stimulus
# ::tok World stocks rise on hopes Fed to keep stimulus
# ::alignments 0-1|0.0.0 1-2|0.0 2-3|0 4-5|0.1 5-6|0.1.0.1+0.1.0.1.0+0.1.0.1.0.0 7-8|0.1.0 8-9|0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.028798 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	rise-01	2-3
# ::node	0.0	stock	1-2
# ::node	0.0.0	world	0-1
# ::node	0.1	hope-01	4-5
# ::node	0.1.0	keep-01	7-8
# ::node	0.1.0.0	stimulus	8-9
# ::node	0.1.0.1	government-organization	5-6
# ::node	0.1.0.1.0	name	5-6
# ::node	0.1.0.1.0.0	fed	5-6
# ::root	0	rise-01
# ::edge	government-organization	name	name	0.1.0.1	0.1.0.1.0
# ::edge	hope-01	ARG1	keep-01	0.1	0.1.0
# ::edge	keep-01	ARG0	government-organization	0.1.0	0.1.0.1
# ::edge	keep-01	ARG1	stimulus	0.1.0	0.1.0.0
# ::edge	name	op1	fed	0.1.0.1.0	0.1.0.1.0.0
# ::edge	rise-01	ARG1	stock	0	0.0
# ::edge	rise-01	ARG2	hope-01	0	0.1
# ::edge	stock	mod	world	0.0	0.0.0
(MRPNode-0 / rise-01 :ARG1 (MRPNode-1 / stock :mod (MRPNode-2 / world)) :ARG2 (MRPNode-3 / hope-01 :ARG1 (MRPNode-4 / keep-01 :ARG1 (MRPNode-5 / stimulus) :ARG0 (MRPNode-6 / government-organization :name (MRPNode-7 / name :op1 fed)))))

# ::id 606
# ::snt No winners in a war of sanctions
# ::tok No winners in a war of sanctions
# ::alignments 0-1|0.0 1-2|0+0.1 4-5|0.1.0 6-7|0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.031786 ::parser eager_oracle ::smatch 0.7000000000000001 ::n_actions 25
# ::node	0	person	1-2
# ::node	0.0	-	0-1
# ::node	0.1	win-01	1-2
# ::node	0.1.0	war-01	4-5
# ::node	0.1.0.0	sanction-02	6-7
# ::root	0	person
# ::edge	person	ARG0-of	win-01	0	0.1
# ::edge	person	polarity	-	0	0.0
# ::edge	war-01	ARG1	sanction-02	0.1.0	0.1.0.0
# ::edge	win-01	location	war-01	0.1	0.1.0
(MRPNode-0 / person :polarity - :ARG0-of (MRPNode-1 / win-01 :location (MRPNode-2 / war-01 :ARG1 (MRPNode-3 / sanction-02))))

# ::id 607
# ::snt Tata Nano and other Indian small cars fail crash tests
# ::tok Tata Nano and other Indian small cars fail crash tests
# ::alignments 0-2|0.0.0+0.0.0.0+0.0.0.0.0+0.0.0.0.1 2-3|0.0 3-4|0.0.1.1 4-5|0.0.1.2+0.0.1.2.0+0.0.1.2.0.0 5-6|0.0.1.0 6-7|0.0.1 7-8|0 8-9|0.1.0 9-10|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.043087 ::parser eager_oracle ::smatch 0.96 ::n_actions 39
# ::node	0	fail-01	7-8
# ::node	0.0	and	2-3
# ::node	0.0.0	person	0-2
# ::node	0.0.0.0	name	0-2
# ::node	0.0.0.0.0	tata	0-2
# ::node	0.0.0.0.1	nano	0-2
# ::node	0.0.1	car	6-7
# ::node	0.0.1.0	small	5-6
# ::node	0.0.1.1	other	3-4
# ::node	0.0.1.2	country	4-5
# ::node	0.0.1.2.0	name	4-5
# ::node	0.0.1.2.0.0	india	4-5
# ::node	0.1	test-01	9-10
# ::node	0.1.0	crash-01	8-9
# ::root	0	fail-01
# ::edge	and	op1	person	0.0	0.0.0
# ::edge	and	op2	car	0.0	0.0.1
# ::edge	car	mod	country	0.0.1	0.0.1.2
# ::edge	car	mod	other	0.0.1	0.0.1.1
# ::edge	car	mod	small	0.0.1	0.0.1.0
# ::edge	country	name	name	0.0.1.2	0.0.1.2.0
# ::edge	fail-01	ARG1	and	0	0.0
# ::edge	fail-01	ARG2	test-01	0	0.1
# ::edge	name	op1	india	0.0.1.2.0	0.0.1.2.0.0
# ::edge	name	op1	tata	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	nano	0.0.0.0	0.0.0.0.1
# ::edge	person	name	name	0.0.0	0.0.0.0
# ::edge	test-01	ARG2	crash-01	0.1	0.1.0
(MRPNode-0 / fail-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / person :name (MRPNode-3 / name :op1 tata :op2 nano)) :op2 (MRPNode-4 / car :mod (MRPNode-5 / small) :mod (MRPNode-6 / other) :mod (MRPNode-7 / country :name (MRPNode-8 / name :op1 india)))) :ARG2 (MRPNode-9 / test-01 :ARG2 (MRPNode-10 / crash-01)))

# ::id 608
# ::snt Turkey unrest goes on despite end to park protest
# ::tok Turkey unrest goes on despite end to park protest
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 1-2|0.0 5-6|0.1 7-8|0.1.0.0 8-9|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.048702 ::parser eager_oracle ::smatch 0.7857142857142856 ::n_actions 25
# ::node	0	go-on-15	
# ::node	0.0	unrest	1-2
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	turkey	0-1
# ::node	0.1	end-01	5-6
# ::node	0.1.0	protest-01	8-9
# ::node	0.1.0.0	park-01	7-8
# ::root	0	go-on-15
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	end-01	ARG1	protest-01	0.1	0.1.0
# ::edge	go-on-15	ARG1	unrest	0	0.0
# ::edge	go-on-15	concession	end-01	0	0.1
# ::edge	name	op1	turkey	0.0.0.0	0.0.0.0.0
# ::edge	protest-01	ARG1	park-01	0.1.0	0.1.0.0
# ::edge	unrest	location	country	0.0	0.0.0
(MRPNode-0 / go-on-15 :ARG1 (MRPNode-1 / unrest :location (MRPNode-2 / country :name (MRPNode-3 / name :op1 turkey))) :concession (MRPNode-4 / end-01 :ARG1 (MRPNode-5 / protest-01 :ARG1 (MRPNode-6 / park-01))))

# ::id 609
# ::snt Top Asian News at 2:30 p.m. GMT
# ::tok Top Asian News at 2:30 p.m. GMT
# ::alignments 0-3|0.0+0.0.0+0.0.1+0.0.2 6-7|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.051795 ::parser eager_oracle ::smatch 0.64 ::n_actions 14
# ::node	0	broadcast-program	
# ::node	0.0	name	0-3
# ::node	0.0.0	top	0-3
# ::node	0.0.1	asian	0-3
# ::node	0.0.2	news	0-3
# ::node	0.1	broadcast-program	6-7
# ::node	0.1.0	name	6-7
# ::node	0.1.0.0	gmt	6-7
# ::node	0.2	date-entity	
# ::node	0.2.0	"2:30"	
# ::root	0	broadcast-program
# ::edge	broadcast-program	mod	name	0	0.0
# ::edge	broadcast-program	name	name	0.1	0.1.0
# ::edge	broadcast-program	time	broadcast-program	0	0.1
# ::edge	broadcast-program	time	date-entity	0	0.2
# ::edge	date-entity	time	"2:30"	0.2	0.2.0
# ::edge	name	op1	gmt	0.1.0	0.1.0.0
# ::edge	name	op1	top	0.0	0.0.0
# ::edge	name	op2	asian	0.0	0.0.1
# ::edge	name	op3	news	0.0	0.0.2
(MRPNode-0 / broadcast-program :mod (MRPNode-1 / name :op1 top :op2 asian :op3 news) :time (MRPNode-2 / broadcast-program :name (MRPNode-3 / name :op1 gmt)) :time (MRPNode-4 / date-entity :time "2:30"))

# ::id 610
# ::snt Singapore shares open 0.83% higher on Wednesday
# ::tok Singapore shares open 0.83 % higher on Wednesday
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 1-2|0.0 2-3|0 3-4|0.0.1.0 4-5|0.0.1 5-6|0.1 7-8|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.061775 ::parser eager_oracle ::smatch 0.7027027027027029 ::n_actions 31
# ::node	0	open-01	2-3
# ::node	0.0	share-01	1-2
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	singapore	0-1
# ::node	0.0.1	percentage-entity	4-5
# ::node	0.0.1.0	0.83	3-4
# ::node	0.1	high-02	5-6
# ::node	0.1.0	have-degree-91	
# ::node	0.1.0.0	more	
# ::node	0.2	date-entity	
# ::node	0.2.0	wednesday	7-8
# ::root	0	open-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	date-entity	weekday	wednesday	0.2	0.2.0
# ::edge	have-degree-91	ARG3	more	0.1.0	0.1.0.0
# ::edge	high-02	ARG2-of	have-degree-91	0.1	0.1.0
# ::edge	name	op1	singapore	0.0.0.0	0.0.0.0.0
# ::edge	open-01	ARG1	share-01	0	0.0
# ::edge	open-01	time	date-entity	0	0.2
# ::edge	open-01	time	high-02	0	0.1
# ::edge	percentage-entity	value	0.83	0.0.1	0.0.1.0
# ::edge	share-01	ARG0	country	0.0	0.0.0
# ::edge	share-01	quant	percentage-entity	0.0	0.0.1
(MRPNode-0 / open-01 :ARG1 (MRPNode-1 / share-01 :ARG0 (MRPNode-2 / country :name (MRPNode-3 / name :op1 singapore)) :quant (MRPNode-4 / percentage-entity :value 0.83)) :time (MRPNode-5 / high-02 :ARG2-of (MRPNode-6 / have-degree-91 :ARG3 (MRPNode-7 / more))) :time (MRPNode-8 / date-entity :weekday (MRPNode-9 / wednesday)))

# ::id 611
# ::snt China treasury bond futures open higher Tuesday
# ::tok China treasury bond futures open higher Tuesday
# ::alignments 0-1|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 1-2|0.0.0.0 2-3|0.0.0 3-4|0.0 4-5|0 5-6|0.1.2 6-7|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.070599 ::parser eager_oracle ::smatch 0.8108108108108109 ::n_actions 29
# ::node	0	open-01	4-5
# ::node	0.0	future	3-4
# ::node	0.0.0	bond	2-3
# ::node	0.0.0.0	treasury	1-2
# ::node	0.0.0.1	country	0-1
# ::node	0.0.0.1.0	name	0-1
# ::node	0.0.0.1.0.0	china	0-1
# ::node	0.1	have-degree-91	
# ::node	0.1.0	tuesday	6-7
# ::node	0.1.1	more	
# ::node	0.1.2	high-02	5-6
# ::root	0	open-01
# ::edge	bond	mod	treasury	0.0.0	0.0.0.0
# ::edge	bond	poss	country	0.0.0	0.0.0.1
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	future	mod	bond	0.0	0.0.0
# ::edge	have-degree-91	ARG2	high-02	0.1	0.1.2
# ::edge	have-degree-91	ARG3	more	0.1	0.1.1
# ::edge	have-degree-91	ARG3	tuesday	0.1	0.1.0
# ::edge	name	op1	china	0.0.0.1.0	0.0.0.1.0.0
# ::edge	open-01	ARG1	future	0	0.0
# ::edge	open-01	ARG1-of	have-degree-91	0	0.1
# ::edge	open-01	ARG1-of	high-02	0	0.1.2
(MRPNode-0 / open-01 :ARG1 (MRPNode-1 / future :mod (MRPNode-2 / bond :mod (MRPNode-3 / treasury) :poss (MRPNode-4 / country :name (MRPNode-5 / name :op1 china)))) :ARG1-of (MRPNode-6 / have-degree-91 :ARG3 (MRPNode-7 / tuesday) :ARG3 (MRPNode-8 / more) :ARG2 (MRPNode-9 / high-02)) :ARG1-of MRPNode-9)

# ::id 612
# ::snt 7.3 magnitude earthquake strikes Nepal
# ::tok 7.3 magnitude earthquake strikes Nepal
# ::alignments 0-1|0.1.0.0 2-3|0.1 3-4|0 4-5|0.0+0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.074264 ::parser eager_oracle ::smatch 0.8571428571428571 ::n_actions 18
# ::node	0	strike-01	3-4
# ::node	0.0	country	4-5
# ::node	0.0.0	name	4-5
# ::node	0.0.0.0	nepal	4-5
# ::node	0.1	earthquake	2-3
# ::node	0.1.0	seismic-quantity	
# ::node	0.1.0.0	7.3	0-1
# ::root	0	strike-01
# ::edge	country	name	name	0.0	0.0.0
# ::edge	earthquake	quant	seismic-quantity	0.1	0.1.0
# ::edge	name	op1	nepal	0.0.0	0.0.0.0
# ::edge	seismic-quantity	quant	7.3	0.1.0	0.1.0.0
# ::edge	strike-01	ARG0	country	0	0.0
# ::edge	strike-01	ARG0	earthquake	0	0.1
(MRPNode-0 / strike-01 :ARG0 (MRPNode-1 / country :name (MRPNode-2 / name :op1 nepal)) :ARG0 (MRPNode-3 / earthquake :quant (MRPNode-4 / seismic-quantity :quant 7.3)))

# ::id 613
# ::snt Iran's parliament backs nuclear deal
# ::tok Iran 's parliament backs nuclear deal
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 2-3|0.1+0.1.1+0.1.1.0 3-4|0 4-5|0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.079383 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	back-01	3-4
# ::node	0.0	deal-01	5-6
# ::node	0.0.0	nucleus	4-5
# ::node	0.1	government-organization	2-3
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	iran	0-1
# ::node	0.1.1	name	2-3
# ::node	0.1.1.0	parliament	2-3
# ::root	0	back-01
# ::edge	back-01	ARG0	government-organization	0	0.1
# ::edge	back-01	ARG1	deal-01	0	0.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	deal-01	ARG2	nucleus	0.0	0.0.0
# ::edge	government-organization	mod	country	0.1	0.1.0
# ::edge	government-organization	name	name	0.1	0.1.1
# ::edge	name	op1	iran	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	parliament	0.1.1	0.1.1.0
(MRPNode-0 / back-01 :ARG1 (MRPNode-1 / deal-01 :ARG2 (MRPNode-2 / nucleus)) :ARG0 (MRPNode-3 / government-organization :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 iran)) :name (MRPNode-6 / name :op1 parliament)))

# ::id 614
# ::snt Israeli forces arrest 21 Palestinians overnight, clash with locals
# ::tok Israeli forces arrest 21 Palestinians overnight , clash with locals
# ::alignments 0-1|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 1-2|0.0.1 2-3|0.0 3-4|0.0.0.0 4-5|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 5-6|0.0.2 7-8|0.1 9-10|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.091495 ::parser eager_oracle ::smatch 0.6666666666666665 ::n_actions 33
# ::node	0	and	
# ::node	0.0	arrest-01	2-3
# ::node	0.0.0	person	
# ::node	0.0.0.0	21	3-4
# ::node	0.0.0.1	country	4-5
# ::node	0.0.0.1.0	name	4-5
# ::node	0.0.0.1.0.0	palestine	4-5
# ::node	0.0.1	force	1-2
# ::node	0.0.1.0	country	0-1
# ::node	0.0.1.0.0	name	0-1
# ::node	0.0.1.0.0.0	israel	0-1
# ::node	0.0.2	overnight	5-6
# ::node	0.1	clash-01	7-8
# ::node	0.1.0	local-02	9-10
# ::root	0	and
# ::edge	and	op1	arrest-01	0	0.0
# ::edge	and	op2	clash-01	0	0.1
# ::edge	arrest-01	ARG0	force	0.0	0.0.1
# ::edge	arrest-01	ARG1	person	0.0	0.0.0
# ::edge	arrest-01	time	overnight	0.0	0.0.2
# ::edge	clash-01	ARG1	local-02	0.1	0.1.0
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	country	name	name	0.0.1.0	0.0.1.0.0
# ::edge	force	mod	country	0.0.1	0.0.1.0
# ::edge	name	op1	israel	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	palestine	0.0.0.1.0	0.0.0.1.0.0
# ::edge	person	mod	country	0.0.0	0.0.0.1
# ::edge	person	quant	21	0.0.0	0.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / arrest-01 :ARG1 (MRPNode-2 / person :quant 21 :mod (MRPNode-3 / country :name (MRPNode-4 / name :op1 palestine))) :ARG0 (MRPNode-5 / force :mod (MRPNode-6 / country :name (MRPNode-7 / name :op1 israel))) :time (MRPNode-8 / overnight)) :op2 (MRPNode-9 / clash-01 :ARG1 (MRPNode-10 / local-02)))

# ::id 615
# ::snt CCTV of gunmen in Tunisia museum attack
# ::tok CCTV of gunmen in Tunisia museum attack
# ::alignments 2-3|0.0 4-5|0.0.0+0.0.0.0+0.0.0.0.0 5-6|0.2 6-7|0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.097300 ::parser eager_oracle ::smatch 0.7857142857142858 ::n_actions 21
# ::node	0	attack-01	6-7
# ::node	0.0	gunman	2-3
# ::node	0.0.0	country	4-5
# ::node	0.0.0.0	name	4-5
# ::node	0.0.0.0.0	tunisia	4-5
# ::node	0.1	television	
# ::node	0.1.0	circuit	
# ::node	0.1.0.0	close-01	
# ::node	0.2	museum	5-6
# ::root	0	attack-01
# ::edge	attack-01	ARG0	gunman	0	0.0
# ::edge	attack-01	location	museum	0	0.2
# ::edge	attack-01	mod	television	0	0.1
# ::edge	circuit	ARG1-of	close-01	0.1.0	0.1.0.0
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	gunman	location	country	0.0	0.0.0
# ::edge	name	op1	tunisia	0.0.0.0	0.0.0.0.0
# ::edge	television	mod	circuit	0.1	0.1.0
(MRPNode-0 / attack-01 :ARG0 (MRPNode-1 / gunman :location (MRPNode-2 / country :name (MRPNode-3 / name :op1 tunisia))) :mod (MRPNode-4 / television :mod (MRPNode-5 / circuit :ARG1-of (MRPNode-6 / close-01))) :location (MRPNode-7 / museum))

# ::id 616
# ::snt Teenager tests negative for Ebola
# ::tok Teenager tests negative for Ebola
# ::alignments 0-1|0.0 1-2|0 2-3|0.2 4-5|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.101360 ::parser eager_oracle ::smatch 1.0 ::n_actions 19
# ::node	0	test-01	1-2
# ::node	0.0	Teenager	0-1
# ::node	0.1	disease	4-5
# ::node	0.1.0	name	4-5
# ::node	0.1.0.0	ebola	4-5
# ::node	0.2	negative-03	2-3
# ::root	0	test-01
# ::edge	disease	name	name	0.1	0.1.0
# ::edge	name	op1	ebola	0.1.0	0.1.0.0
# ::edge	test-01	ARG2	Teenager	0	0.0
# ::edge	test-01	ARG2	disease	0	0.1
# ::edge	test-01	ARG2	negative-03	0	0.2
(MRPNode-0 / test-01 :ARG2 (MRPNode-1 / Teenager) :ARG2 (MRPNode-2 / disease :name (MRPNode-3 / name :op1 ebola)) :ARG2 (MRPNode-4 / negative-03))

# ::id 617
# ::snt Texas sues over Syrian refugees
# ::tok Texas sues over Syrian refugees
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 3-4|0.1.0+0.1.0.0+0.1.0.0.0 4-5|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.106108 ::parser eager_oracle ::smatch 0.9285714285714286 ::n_actions 19
# ::node	0	sue-02	1-2
# ::node	0.0	state	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	texas	0-1
# ::node	0.1	refugee	4-5
# ::node	0.1.0	country	3-4
# ::node	0.1.0.0	name	3-4
# ::node	0.1.0.0.0	syria	3-4
# ::root	0	sue-02
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	name	op1	syria	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	texas	0.0.0	0.0.0.0
# ::edge	refugee	mod	country	0.1	0.1.0
# ::edge	state	name	name	0.0	0.0.0
# ::edge	sue-02	ARG0	state	0	0.0
# ::edge	sue-02	ARG2	refugee	0	0.1
(MRPNode-0 / sue-02 :ARG0 (MRPNode-1 / state :name (MRPNode-2 / name :op1 texas)) :ARG2 (MRPNode-3 / refugee :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 syria))))

# ::id 618
# ::snt Rooney helps Man United beat Everton 3-0 in Premier League
# ::tok Rooney helps Man United beat Everton 3-0 in Premier League
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-4|0.0+0.0.0+0.0.0.0+0.0.0.1 4-5|0.2 5-6|0.2.1+0.2.1.0+0.2.1.0.0 8-10|0.2.2+0.2.2.0+0.2.2.0.0+0.2.2.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.124043 ::parser eager_oracle ::smatch 0.9454545454545454 ::n_actions 31
# ::node	0	help-01	1-2
# ::node	0.0	team	2-4
# ::node	0.0.0	name	2-4
# ::node	0.0.0.0	man	2-4
# ::node	0.0.0.1	united	2-4
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	rooney	0-1
# ::node	0.2	beat-03	4-5
# ::node	0.2.0	0	
# ::node	0.2.1	team	5-6
# ::node	0.2.1.0	name	5-6
# ::node	0.2.1.0.0	everton	5-6
# ::node	0.2.2	league	8-10
# ::node	0.2.2.0	name	8-10
# ::node	0.2.2.0.0	premier	8-10
# ::node	0.2.2.0.1	league	8-10
# ::root	0	help-01
# ::edge	beat-03	ARG0	team	0.2	0.0
# ::edge	beat-03	arg1	0	0.2	0.2.0
# ::edge	beat-03	location	league	0.2	0.2.2
# ::edge	beat-03	location	team	0.2	0.2.1
# ::edge	help-01	ARG0	person	0	0.1
# ::edge	help-01	ARG1	beat-03	0	0.2
# ::edge	help-01	ARG1	team	0	0.0
# ::edge	league	name	name	0.2.2	0.2.2.0
# ::edge	name	op1	everton	0.2.1.0	0.2.1.0.0
# ::edge	name	op1	man	0.0.0	0.0.0.0
# ::edge	name	op1	premier	0.2.2.0	0.2.2.0.0
# ::edge	name	op1	rooney	0.1.0	0.1.0.0
# ::edge	name	op2	united	0.0.0	0.0.0.1
# ::edge	name	op3	league	0.2.2.0	0.2.2.0.1
# ::edge	person	name	name	0.1	0.1.0
# ::edge	team	name	name	0.0	0.0.0
# ::edge	team	name	name	0.2.1	0.2.1.0
(MRPNode-0 / help-01 :ARG1 (MRPNode-1 / team :name (MRPNode-2 / name :op1 man :op2 united)) :ARG0 (MRPNode-3 / person :name (MRPNode-4 / name :op1 rooney)) :ARG1 (MRPNode-5 / beat-03 :arg1 0 :ARG0 MRPNode-1 :location (MRPNode-6 / team :name (MRPNode-7 / name :op1 everton)) :location (MRPNode-8 / league :name (MRPNode-9 / name :op1 premier :op3 league))))

# ::id 619
# ::snt Hard-line Jewish leader shot in Jerusalem
# ::tok Hard - line Jewish leader shot in Jerusalem
# ::alignments 0-1|0.0.0.0 2-3|0.0.0 3-4|0.0.1+0.0.1.0+0.0.1.0.0 4-5|0.0+0.0.2 5-6|0 7-8|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.132219 ::parser eager_oracle ::smatch 0.9500000000000001 ::n_actions 32
# ::node	0	shoot-02	5-6
# ::node	0.0	person	4-5
# ::node	0.0.0	line	2-3
# ::node	0.0.0.0	hard-04	0-1
# ::node	0.0.1	religious-group	3-4
# ::node	0.0.1.0	name	3-4
# ::node	0.0.1.0.0	jew	3-4
# ::node	0.0.2	lead-02	4-5
# ::node	0.1	city	7-8
# ::node	0.1.0	name	7-8
# ::node	0.1.0.0	jerusalem	7-8
# ::root	0	shoot-02
# ::edge	city	name	name	0.1	0.1.0
# ::edge	line	ARG1-of	hard-04	0.0.0	0.0.0.0
# ::edge	name	op1	jerusalem	0.1.0	0.1.0.0
# ::edge	name	op1	jew	0.0.1.0	0.0.1.0.0
# ::edge	person	ARG0-of	lead-02	0.0	0.0.2
# ::edge	person	mod	line	0.0	0.0.0
# ::edge	person	mod	religious-group	0.0	0.0.1
# ::edge	religious-group	name	name	0.0.1	0.0.1.0
# ::edge	shoot-02	ARG1	person	0	0.0
# ::edge	shoot-02	location	city	0	0.1
(MRPNode-0 / shoot-02 :ARG1 (MRPNode-1 / person :mod (MRPNode-2 / line :ARG1-of (MRPNode-3 / hard-04)) :mod (MRPNode-4 / religious-group :name (MRPNode-5 / name :op1 jew)) :ARG0-of (MRPNode-6 / lead-02)) :location (MRPNode-7 / city :name (MRPNode-8 / name :op1 jerusalem)))

# ::id 620
# ::snt Waba emerges new NLC president
# ::tok Waba emerges new NLC president
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 2-3|0.1.0.1.0 3-4|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 4-5|0.1+0.1.0+0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.140551 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	emerge-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	waba	0-1
# ::node	0.1	person	4-5
# ::node	0.1.0	have-org-role-91	4-5
# ::node	0.1.0.0	political-party	3-4
# ::node	0.1.0.0.0	name	3-4
# ::node	0.1.0.0.0.0	nlc	3-4
# ::node	0.1.0.1	president	4-5
# ::node	0.1.0.1.0	new-01	2-3
# ::root	0	emerge-01
# ::edge	emerge-01	ARG1	person	0	0.0
# ::edge	emerge-01	ARG1	person	0	0.1
# ::edge	have-org-role-91	ARG1	political-party	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	president	0.1.0	0.1.0.1
# ::edge	name	op1	nlc	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op1	waba	0.0.0	0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	person	name	name	0.0	0.0.0
# ::edge	political-party	name	name	0.1.0.0	0.1.0.0.0
# ::edge	president	ARG1-of	new-01	0.1.0.1	0.1.0.1.0
(MRPNode-0 / emerge-01 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 waba)) :ARG1 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-org-role-91 :ARG1 (MRPNode-5 / political-party :name (MRPNode-6 / name :op1 nlc)) :ARG2 (MRPNode-7 / president :ARG1-of (MRPNode-8 / new-01)))))

# ::id 621
# ::snt Egypt: IPI Urges Release of Al Jazeera Journalist Arrested in Berlin
# ::tok Egypt : IPI Urges Release of Al Jazeera Journalist Arrested in Berlin
# ::alignments 0-1|0.0.0+0.0.0.0+0.0.0.0.0 2-3|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 3-4|0.0 4-5|0.0.1 6-8|0.0.2+0.0.2.0+0.0.2.0.0+0.0.2.0.1 9-10|0.1 11-12|0.1.0+0.1.0.0+0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.160674 ::parser eager_oracle ::smatch 0.8928571428571429 ::n_actions 36
# ::node	0	and	
# ::node	0.0	urge-01	3-4
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	egypt	0-1
# ::node	0.0.1	release-01	4-5
# ::node	0.0.1.0	publication	2-3
# ::node	0.0.1.0.0	name	2-3
# ::node	0.0.1.0.0.0	ipi	2-3
# ::node	0.0.2	publication	6-8
# ::node	0.0.2.0	name	6-8
# ::node	0.0.2.0.0	al	6-8
# ::node	0.0.2.0.1	jazeera	6-8
# ::node	0.1	arrest-01	9-10
# ::node	0.1.0	city	11-12
# ::node	0.1.0.0	name	11-12
# ::node	0.1.0.0.0	berlin	11-12
# ::root	0	and
# ::edge	and	op1	urge-01	0	0.0
# ::edge	and	op2	arrest-01	0	0.1
# ::edge	arrest-01	location	city	0.1	0.1.0
# ::edge	city	name	name	0.1.0	0.1.0.0
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	name	op1	al	0.0.2.0	0.0.2.0.0
# ::edge	name	op1	berlin	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	egypt	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	ipi	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op2	jazeera	0.0.2.0	0.0.2.0.1
# ::edge	publication	name	name	0.0.1.0	0.0.1.0.0
# ::edge	publication	name	name	0.0.2	0.0.2.0
# ::edge	release-01	ARG1	publication	0.0.1	0.0.1.0
# ::edge	urge-01	ARG0	publication	0.0	0.0.2
# ::edge	urge-01	ARG0	release-01	0.0	0.0.1
# ::edge	urge-01	ARG1	country	0.0	0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / urge-01 :ARG1 (MRPNode-2 / country :name (MRPNode-3 / name :op1 egypt)) :ARG0 (MRPNode-4 / release-01 :ARG1 (MRPNode-5 / publication :name (MRPNode-6 / name :op1 ipi))) :ARG0 (MRPNode-7 / publication :name (MRPNode-8 / name :op1 al :op2 jazeera))) :op2 (MRPNode-9 / arrest-01 :location (MRPNode-10 / city :name (MRPNode-11 / name :op1 berlin))))

# ::id 622
# ::snt 5 US airstrikes target Islamic State fighters
# ::tok 5 US airstrikes target Islamic State fighters
# ::alignments 0-1|0.1.0 1-2|0.2+0.2.0+0.2.0.0 3-4|0 4-5|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 5-6|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.168816 ::parser eager_oracle ::smatch 0.8648648648648648 ::n_actions 26
# ::node	0	target-01	3-4
# ::node	0.0	fight-01	6-7
# ::node	0.0.0	state	5-6
# ::node	0.0.0.0	religious-group	4-5
# ::node	0.0.0.0.0	name	4-5
# ::node	0.0.0.0.0.0	islamic	4-5
# ::node	0.1	strike-01	
# ::node	0.1.0	5	0-1
# ::node	0.1.1	air	
# ::node	0.2	country	1-2
# ::node	0.2.0	name	1-2
# ::node	0.2.0.0	us	1-2
# ::root	0	target-01
# ::edge	country	name	name	0.2	0.2.0
# ::edge	fight-01	ARG0	state	0.0	0.0.0
# ::edge	name	op1	islamic	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	us	0.2.0	0.2.0.0
# ::edge	religious-group	name	name	0.0.0.0	0.0.0.0.0
# ::edge	state	mod	religious-group	0.0.0	0.0.0.0
# ::edge	strike-01	path	5	0.1	0.1.0
# ::edge	strike-01	path	air	0.1	0.1.1
# ::edge	target-01	ARG0	country	0	0.2
# ::edge	target-01	ARG0	strike-01	0	0.1
# ::edge	target-01	ARG1	fight-01	0	0.0
(MRPNode-0 / target-01 :ARG1 (MRPNode-1 / fight-01 :ARG0 (MRPNode-2 / state :mod (MRPNode-3 / religious-group :name (MRPNode-4 / name :op1 islamic)))) :ARG0 (MRPNode-5 / strike-01 :path 5 :path (MRPNode-6 / air)) :ARG0 (MRPNode-7 / country :name (MRPNode-8 / name :op1 us)))

# ::id 623
# ::snt Burundi police fire tear gas at protesters
# ::tok Burundi police fire tear gas at protesters
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1 2-3|0 3-4|0.0.0 4-5|0.0 6-7|0.2+0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.175537 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	fire-01	2-3
# ::node	0.0	gas	4-5
# ::node	0.0.0	tear	3-4
# ::node	0.1	police	1-2
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	burundi	0-1
# ::node	0.2	person	6-7
# ::node	0.2.0	protest-01	6-7
# ::root	0	fire-01
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	fire-01	ARG0	police	0	0.1
# ::edge	fire-01	ARG1	gas	0	0.0
# ::edge	fire-01	destination	person	0	0.2
# ::edge	gas	mod	tear	0.0	0.0.0
# ::edge	name	op1	burundi	0.1.0.0	0.1.0.0.0
# ::edge	person	ARG0-of	protest-01	0.2	0.2.0
# ::edge	police	mod	country	0.1	0.1.0
(MRPNode-0 / fire-01 :ARG1 (MRPNode-1 / gas :mod (MRPNode-2 / tear)) :ARG0 (MRPNode-3 / police :mod (MRPNode-4 / country :name (MRPNode-5 / name :op1 burundi))) :destination (MRPNode-6 / person :ARG0-of (MRPNode-7 / protest-01)))

# ::id 624
# ::snt Ashya's Parents Arrive For Extradition Hearing
# ::tok Ashya 's Parents Arrive For Extradition Hearing
# ::alignments 0-1|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 2-3|0.0+0.0.0+0.0.0.1 3-4|0 5-6|0.1.0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.182894 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	arrive-01	3-4
# ::node	0.0	person	2-3
# ::node	0.0.0	have-rel-role-91	2-3
# ::node	0.0.0.0	person	0-1
# ::node	0.0.0.0.0	name	0-1
# ::node	0.0.0.0.0.0	ashya	0-1
# ::node	0.0.0.1	parent	2-3
# ::node	0.1	hear-01	6-7
# ::node	0.1.0	extradite-01	5-6
# ::root	0	arrive-01
# ::edge	arrive-01	ARG1	person	0	0.0
# ::edge	arrive-01	purpose	hear-01	0	0.1
# ::edge	have-rel-role-91	ARG1	person	0.0.0	0.0.0.0
# ::edge	have-rel-role-91	ARG2	parent	0.0.0	0.0.0.1
# ::edge	hear-01	ARG2	extradite-01	0.1	0.1.0
# ::edge	name	op1	ashya	0.0.0.0.0	0.0.0.0.0.0
# ::edge	person	ARG0-of	have-rel-role-91	0.0	0.0.0
# ::edge	person	name	name	0.0.0.0	0.0.0.0.0
(MRPNode-0 / arrive-01 :ARG1 (MRPNode-1 / person :ARG0-of (MRPNode-2 / have-rel-role-91 :ARG1 (MRPNode-3 / person :name (MRPNode-4 / name :op1 ashya)) :ARG2 (MRPNode-5 / parent))) :purpose (MRPNode-6 / hear-01 :ARG2 (MRPNode-7 / extradite-01)))

# ::id 625
# ::snt Nigeria admits slow response in Ebola case
# ::tok Nigeria admits slow response in Ebola case
# ::alignments 0-1|0.0.2+0.0.2.0+0.0.2.0.0 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.190351 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	admit-02	1-2
# ::node	0.0	respond-01	3-4
# ::node	0.0.0	case-04	6-7
# ::node	0.0.0.0	disease	5-6
# ::node	0.0.0.0.0	name	5-6
# ::node	0.0.0.0.0.0	ebola	5-6
# ::node	0.0.1	slow-05	2-3
# ::node	0.0.2	country	0-1
# ::node	0.0.2.0	name	0-1
# ::node	0.0.2.0.0	nigeria	0-1
# ::root	0	admit-02
# ::edge	admit-02	ARG0	country	0	0.0.2
# ::edge	admit-02	ARG1	respond-01	0	0.0
# ::edge	case-04	ARG1	disease	0.0.0	0.0.0.0
# ::edge	country	name	name	0.0.2	0.0.2.0
# ::edge	disease	name	name	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	ebola	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	nigeria	0.0.2.0	0.0.2.0.0
# ::edge	respond-01	ARG0	country	0.0	0.0.2
# ::edge	respond-01	ARG1	case-04	0.0	0.0.0
# ::edge	respond-01	ARG1-of	slow-05	0.0	0.0.1
(MRPNode-0 / admit-02 :ARG1 (MRPNode-1 / respond-01 :ARG1 (MRPNode-2 / case-04 :ARG1 (MRPNode-3 / disease :name (MRPNode-4 / name :op1 ebola))) :ARG1-of (MRPNode-5 / slow-05) :ARG0 (MRPNode-6 / country :name (MRPNode-7 / name :op1 nigeria))) :ARG0 MRPNode-6)

# ::id 626
# ::snt Thousands cross Austria-Hungary border
# ::tok Thousands cross Austria - Hungary border
# ::alignments 1-2|0 2-3|0.0.0+0.0.0.0+0.0.0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.194791 ::parser eager_oracle ::smatch 0.782608695652174 ::n_actions 17
# ::node	0	cross-02	1-2
# ::node	0.0	border-01	5-6
# ::node	0.0.0	country	2-3
# ::node	0.0.0.0	name	2-3
# ::node	0.0.0.0.0	austria	2-3
# ::node	0.1	person	
# ::node	0.1.0	multiple	
# ::node	0.1.0.0	1000	
# ::root	0	cross-02
# ::edge	border-01	ARG2	country	0.0	0.0.0
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	cross-02	ARG0	person	0	0.1
# ::edge	cross-02	ARG1	border-01	0	0.0
# ::edge	multiple	op1	1000	0.1.0	0.1.0.0
# ::edge	name	op1	austria	0.0.0.0	0.0.0.0.0
# ::edge	person	quant	multiple	0.1	0.1.0
(MRPNode-0 / cross-02 :ARG1 (MRPNode-1 / border-01 :ARG2 (MRPNode-2 / country :name (MRPNode-3 / name :op1 austria))) :ARG0 (MRPNode-4 / person :quant (MRPNode-5 / multiple :op1 1000)))

# ::id 627
# ::snt Benzema faces possible charges in sex-tape case
# ::tok Benzema faces possible charges in sex - tape case
# ::alignments 0-1|0.0.2+0.0.2.0+0.0.2.0.0 1-2|0 2-3|0.0.0 3-4|0.0 5-6|0.0.1.0 7-8|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.202115 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	face-01	1-2
# ::node	0.0	charge-05	3-4
# ::node	0.0.0	possible-01	2-3
# ::node	0.0.1	tape-02	7-8
# ::node	0.0.1.0	sex-01	5-6
# ::node	0.0.2	person	0-1
# ::node	0.0.2.0	name	0-1
# ::node	0.0.2.0.0	benzema	0-1
# ::root	0	face-01
# ::edge	charge-05	ARG1	person	0.0	0.0.2
# ::edge	charge-05	ARG1-of	possible-01	0.0	0.0.0
# ::edge	charge-05	ARG2	tape-02	0.0	0.0.1
# ::edge	face-01	ARG0	person	0	0.0.2
# ::edge	face-01	ARG1	charge-05	0	0.0
# ::edge	name	op1	benzema	0.0.2.0	0.0.2.0.0
# ::edge	person	name	name	0.0.2	0.0.2.0
# ::edge	tape-02	ARG1	sex-01	0.0.1	0.0.1.0
(MRPNode-0 / face-01 :ARG1 (MRPNode-1 / charge-05 :ARG1-of (MRPNode-2 / possible-01) :ARG2 (MRPNode-3 / tape-02 :ARG1 (MRPNode-4 / sex-01)) :ARG1 (MRPNode-5 / person :name (MRPNode-6 / name :op1 benzema))) :ARG0 MRPNode-5)

# ::id 628
# ::snt US Senate votes to advance Iran nuclear review bill
# ::tok US Senate votes to advance Iran nuclear review bill
# ::alignments 0-1|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 1-2|0.0.1+0.0.1.1+0.0.1.1.0 2-3|0 4-5|0.0 5-6|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 6-7|0.0.0.0.0 7-8|0.0.0.0 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.216043 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	vote-01	2-3
# ::node	0.0	advance-01	4-5
# ::node	0.0.0	bill	8-9
# ::node	0.0.0.0	review-01	7-8
# ::node	0.0.0.0.0	nucleus	6-7
# ::node	0.0.0.1	country	5-6
# ::node	0.0.0.1.0	name	5-6
# ::node	0.0.0.1.0.0	iran	5-6
# ::node	0.0.1	government-organization	1-2
# ::node	0.0.1.0	country	0-1
# ::node	0.0.1.0.0	name	0-1
# ::node	0.0.1.0.0.0	us	0-1
# ::node	0.0.1.1	name	1-2
# ::node	0.0.1.1.0	senate	1-2
# ::root	0	vote-01
# ::edge	advance-01	ARG0	government-organization	0.0	0.0.1
# ::edge	advance-01	ARG1	bill	0.0	0.0.0
# ::edge	bill	mod	country	0.0.0	0.0.0.1
# ::edge	bill	mod	review-01	0.0.0	0.0.0.0
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	country	name	name	0.0.1.0	0.0.1.0.0
# ::edge	government-organization	mod	country	0.0.1	0.0.1.0
# ::edge	government-organization	name	name	0.0.1	0.0.1.1
# ::edge	name	op1	iran	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op1	senate	0.0.1.1	0.0.1.1.0
# ::edge	name	op1	us	0.0.1.0.0	0.0.1.0.0.0
# ::edge	review-01	mod	nucleus	0.0.0.0	0.0.0.0.0
# ::edge	vote-01	ARG0	government-organization	0	0.0.1
# ::edge	vote-01	ARG1	advance-01	0	0.0
(MRPNode-0 / vote-01 :ARG1 (MRPNode-1 / advance-01 :ARG1 (MRPNode-2 / bill :mod (MRPNode-3 / review-01 :mod (MRPNode-4 / nucleus)) :mod (MRPNode-5 / country :name (MRPNode-6 / name :op1 iran))) :ARG0 (MRPNode-7 / government-organization :mod (MRPNode-8 / country :name (MRPNode-9 / name :op1 us)) :name (MRPNode-10 / name :op1 senate))) :ARG0 MRPNode-7)

# ::id 629
# ::snt Gunners fire but fail to advance in Champions League
# ::tok Gunners fire but fail to advance in Champions League
# ::alignments 1-2|0.1 2-3|0 3-4|0.0 5-6|0.0.1 7-8|0.0.1.0.0 8-9|0.0.0+0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.225333 ::parser eager_oracle ::smatch 0.8205128205128205 ::n_actions 35
# ::node	0	contrast-01	2-3
# ::node	0.0	fail-01	3-4
# ::node	0.0.0	person	8-9
# ::node	0.0.0.0	team	8-9
# ::node	0.0.0.0.0	name	8-9
# ::node	0.0.0.0.0.0	league	8-9
# ::node	0.0.0.1	fight-01	
# ::node	0.0.1	advance-01	5-6
# ::node	0.0.1.0	league	
# ::node	0.0.1.0.0	champions	7-8
# ::node	0.1	fire-01	1-2
# ::root	0	contrast-01
# ::edge	advance-01	ARG0	person	0.0.1	0.0.0
# ::edge	advance-01	ARG1	league	0.0.1	0.0.1.0
# ::edge	contrast-01	ARG1	fail-01	0	0.0
# ::edge	contrast-01	ARG1	fire-01	0	0.1
# ::edge	fail-01	ARG1	person	0.0	0.0.0
# ::edge	fail-01	ARG2	advance-01	0.0	0.0.1
# ::edge	fire-01	ARG0	person	0.1	0.0.0
# ::edge	league	mod	champions	0.0.1.0	0.0.1.0.0
# ::edge	name	op2	league	0.0.0.0.0	0.0.0.0.0.0
# ::edge	person	ARG0-of	fight-01	0.0.0	0.0.0.1
# ::edge	person	ARG0-of	team	0.0.0	0.0.0.0
# ::edge	team	name	name	0.0.0.0	0.0.0.0.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / fail-01 :ARG1 (MRPNode-2 / person :ARG0-of (MRPNode-3 / team :name (MRPNode-4 / name :op2 league)) :ARG0-of (MRPNode-5 / fight-01)) :ARG2 (MRPNode-6 / advance-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-7 / league :mod champions))) :ARG1 (MRPNode-8 / fire-01 :ARG0 MRPNode-2))

# ::id 630
# ::snt Iranian President praises nuclear deal
# ::tok Iranian President praises nuclear deal
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 1-2|0.1+0.1.0+0.1.0.1 2-3|0 3-4|0.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.230203 ::parser eager_oracle ::smatch 0.9411764705882353 ::n_actions 31
# ::node	0	praise-01	2-3
# ::node	0.0	deal-01	4-5
# ::node	0.0.0	nucleus	3-4
# ::node	0.1	person	1-2
# ::node	0.1.0	have-org-role-91	1-2
# ::node	0.1.0.0	country	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	iran	0-1
# ::node	0.1.0.1	president	1-2
# ::root	0	praise-01
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	deal-01	ARG2	nucleus	0.0	0.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	president	0.1.0	0.1.0.1
# ::edge	name	op1	iran	0.1.0.0.0	0.1.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	praise-01	ARG0	person	0	0.1
# ::edge	praise-01	ARG1	deal-01	0	0.0
(MRPNode-0 / praise-01 :ARG1 (MRPNode-1 / deal-01 :ARG2 (MRPNode-2 / nucleus)) :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-org-role-91 :ARG1 (MRPNode-5 / country :name (MRPNode-6 / name :op1 iran)) :ARG2 (MRPNode-7 / president))))

# ::id 631
# ::snt Boko Haram disrupts Nigerian elections
# ::tok Boko Haram disrupts Nigerian elections
# ::alignments 0-2|0.1+0.1.0+0.1.0.0+0.1.0.1 2-3|0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.234532 ::parser eager_oracle ::smatch 0.7407407407407407 ::n_actions 16
# ::node	0	disrupt-01	2-3
# ::node	0.0	elect-01	4-5
# ::node	0.0.0	disrupt-01	
# ::node	0.0.1	country	
# ::node	0.0.1.0	name	
# ::node	0.0.1.0.0	vietnam	
# ::node	0.1	person	0-2
# ::node	0.1.0	name	0-2
# ::node	0.1.0.0	boko	0-2
# ::node	0.1.0.1	haram	0-2
# ::root	0	disrupt-01
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	disrupt-01	ARG0	person	0	0.1
# ::edge	disrupt-01	ARG1	elect-01	0	0.0
# ::edge	elect-01	ARG1	disrupt-01	0.0	0.0.0
# ::edge	elect-01	location	country	0.0	0.0.1
# ::edge	name	op1	boko	0.1.0	0.1.0.0
# ::edge	name	op1	vietnam	0.0.1.0	0.0.1.0.0
# ::edge	name	op2	haram	0.1.0	0.1.0.1
# ::edge	person	name	name	0.1	0.1.0
(MRPNode-0 / disrupt-01 :ARG1 (MRPNode-1 / elect-01 :ARG1 (MRPNode-2 / disrupt-01) :location (MRPNode-3 / country :name (MRPNode-4 / name :op1 vietnam))) :ARG0 (MRPNode-5 / person :name (MRPNode-6 / name :op1 boko :op2 haram)))

# ::id 632
# ::snt South Korea regrets North's refusal of talks
# ::tok South Korea regrets North 's refusal of talks
# ::alignments 0-2|0.1+0.1.0+0.1.0.0+0.1.0.1 2-3|0 3-4|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.1 5-6|0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.241233 ::parser eager_oracle ::smatch 0.972972972972973 ::n_actions 27
# ::node	0	regret-01	2-3
# ::node	0.0	refuse-01	5-6
# ::node	0.0.0	talk-01	7-8
# ::node	0.0.0.0	country	3-4
# ::node	0.0.0.0.0	name	3-4
# ::node	0.0.0.0.0.0	north	3-4
# ::node	0.0.0.0.0.1	korea	3-4
# ::node	0.1	country	0-2
# ::node	0.1.0	name	0-2
# ::node	0.1.0.0	south	0-2
# ::node	0.1.0.1	korea	0-2
# ::root	0	regret-01
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	name	op1	north	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	south	0.1.0	0.1.0.0
# ::edge	name	op2	korea	0.0.0.0.0	0.0.0.0.0.1
# ::edge	name	op2	korea	0.1.0	0.1.0.1
# ::edge	refuse-01	ARG0	country	0.0	0.0.0.0
# ::edge	refuse-01	ARG1	talk-01	0.0	0.0.0
# ::edge	regret-01	ARG0	country	0	0.1
# ::edge	regret-01	ARG1	refuse-01	0	0.0
# ::edge	talk-01	ARG0	country	0.0.0	0.0.0.0
(MRPNode-0 / regret-01 :ARG1 (MRPNode-1 / refuse-01 :ARG1 (MRPNode-2 / talk-01 :ARG0 (MRPNode-3 / country :name (MRPNode-4 / name :op1 north :op2 korea))) :ARG0 MRPNode-3) :ARG0 (MRPNode-5 / country :name (MRPNode-6 / name :op1 south :op2 korea)))

# ::id 633
# ::snt South Korea reports seven new MERS cases
# ::tok South Korea reports seven new MERS cases
# ::alignments 0-2|0.1+0.1.0+0.1.0.0+0.1.0.1 2-3|0 3-4|0.0.0 4-5|0.0.1 5-6|0.0.2+0.0.2.0+0.0.2.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.247360 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	report-01	2-3
# ::node	0.0	case-04	6-7
# ::node	0.0.0	7	3-4
# ::node	0.0.1	new-01	4-5
# ::node	0.0.2	product	5-6
# ::node	0.0.2.0	name	5-6
# ::node	0.0.2.0.0	mers	5-6
# ::node	0.1	country	0-2
# ::node	0.1.0	name	0-2
# ::node	0.1.0.0	south	0-2
# ::node	0.1.0.1	korea	0-2
# ::root	0	report-01
# ::edge	case-04	ARG1	product	0.0	0.0.2
# ::edge	case-04	ARG1-of	new-01	0.0	0.0.1
# ::edge	case-04	quant	7	0.0	0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	name	op1	mers	0.0.2.0	0.0.2.0.0
# ::edge	name	op1	south	0.1.0	0.1.0.0
# ::edge	name	op2	korea	0.1.0	0.1.0.1
# ::edge	product	name	name	0.0.2	0.0.2.0
# ::edge	report-01	ARG0	country	0	0.1
# ::edge	report-01	ARG1	case-04	0	0.0
(MRPNode-0 / report-01 :ARG1 (MRPNode-1 / case-04 :quant 7 :ARG1-of (MRPNode-2 / new-01) :ARG1 (MRPNode-3 / product :name (MRPNode-4 / name :op1 mers))) :ARG0 (MRPNode-5 / country :name (MRPNode-6 / name :op1 south :op2 korea)))

# ::id 634
# ::snt U.S. military says it conducts airstrikes against IS in Syria, Iraq
# ::tok U.S. military says it conducts airstrikes against IS in Syria , Iraq
# ::alignments 0-1|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 1-2|0.0.1 2-3|0 4-5|0.0 7-8|0.0.0.1.0+0.0.0.1.0.0+0.0.0.1.0.0.0 9-10|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.262318 ::parser eager_oracle ::smatch 0.8 ::n_actions 33
# ::node	0	say-01	2-3
# ::node	0.0	conduct-01	4-5
# ::node	0.0.0	strike-01	
# ::node	0.0.0.0	country	0-1
# ::node	0.0.0.0.0	name	0-1
# ::node	0.0.0.0.0.0	u.s.	0-1
# ::node	0.0.0.1	counter-01	
# ::node	0.0.0.1.0	military	7-8
# ::node	0.0.0.1.0.0	name	7-8
# ::node	0.0.0.1.0.0.0	is	7-8
# ::node	0.0.0.2	air	
# ::node	0.0.1	military	1-2
# ::node	0.0.1.0	country	9-10
# ::node	0.0.1.0.0	name	9-10
# ::node	0.0.1.0.0.0	syria	9-10
# ::root	0	say-01
# ::edge	conduct-01	ARG0	military	0.0	0.0.1
# ::edge	conduct-01	ARG1	strike-01	0.0	0.0.0
# ::edge	counter-01	ARG1	military	0.0.0.1	0.0.0.1.0
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	country	name	name	0.0.1.0	0.0.1.0.0
# ::edge	military	mod	country	0.0.1	0.0.1.0
# ::edge	military	name	name	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op1	is	0.0.0.1.0.0	0.0.0.1.0.0.0
# ::edge	name	op1	syria	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	u.s.	0.0.0.0.0	0.0.0.0.0.0
# ::edge	say-01	ARG0	military	0	0.0.1
# ::edge	say-01	ARG1	conduct-01	0	0.0
# ::edge	strike-01	ARG1	counter-01	0.0.0	0.0.0.1
# ::edge	strike-01	ARG1	country	0.0.0	0.0.0.0
# ::edge	strike-01	path	air	0.0.0	0.0.0.2
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / conduct-01 :ARG1 (MRPNode-2 / strike-01 :ARG1 (MRPNode-3 / country :name (MRPNode-4 / name :op1 u.s.)) :ARG1 (MRPNode-5 / counter-01 :ARG1 (MRPNode-6 / military :name (MRPNode-7 / name :op1 is))) :path (MRPNode-8 / air)) :ARG0 (MRPNode-9 / military :mod (MRPNode-10 / country :name (MRPNode-11 / name :op1 syria)))) :ARG0 MRPNode-9)

# ::id 635
# ::snt UK Leader Signals Support for Airstrikes on IS in Syria
# ::tok UK Leader Signals Support for Airstrikes on IS in Syria
# ::alignments 0-1|0.1+0.1.0+0.1.0.0+0.1.0.1 1-2|0.1.1 3-4|0 9-10|0.0.0+0.0.0.0+0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.271211 ::parser eager_oracle ::smatch 0.7647058823529412 ::n_actions 23
# ::node	0	support-01	3-4
# ::node	0.0	strike-01	
# ::node	0.0.0	country	9-10
# ::node	0.0.0.0	name	9-10
# ::node	0.0.0.0.0	syria	9-10
# ::node	0.0.1	air	
# ::node	0.1	military	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	uk	0-1
# ::node	0.1.0.1	gun	0-1
# ::node	0.1.1	lead-02	1-2
# ::root	0	support-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	military	ARG0-of	lead-02	0.1	0.1.1
# ::edge	military	name	name	0.1	0.1.0
# ::edge	name	op1	syria	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	uk	0.1.0	0.1.0.0
# ::edge	name	op2	gun	0.1.0	0.1.0.1
# ::edge	strike-01	location	air	0.0	0.0.1
# ::edge	strike-01	location	country	0.0	0.0.0
# ::edge	support-01	ARG0	military	0	0.1
# ::edge	support-01	ARG1	strike-01	0	0.0
(MRPNode-0 / support-01 :ARG1 (MRPNode-1 / strike-01 :location (MRPNode-2 / country :name (MRPNode-3 / name :op1 syria)) :location (MRPNode-4 / air)) :ARG0 (MRPNode-5 / military :name (MRPNode-6 / name :op1 uk :op2 (MRPNode-7 / gun)) :ARG0-of (MRPNode-8 / lead-02)))

# ::id 636
# ::snt Israel bars Palestinians from Jerusalem's Old City
# ::tok Israel bars Palestinians from Jerusalem 's Old City
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 2-3|0.2+0.2.0+0.2.0.0+0.2.0.0.0 6-8|0.1+0.1.0+0.1.0.0+0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.279016 ::parser eager_oracle ::smatch 0.9500000000000001 ::n_actions 26
# ::node	0	bar-01	1-2
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	israel	0-1
# ::node	0.1	city	6-8
# ::node	0.1.0	name	6-8
# ::node	0.1.0.0	old	6-8
# ::node	0.1.0.1	city	6-8
# ::node	0.2	person	2-3
# ::node	0.2.0	country	2-3
# ::node	0.2.0.0	name	2-3
# ::node	0.2.0.0.0	palestine	2-3
# ::root	0	bar-01
# ::edge	bar-01	ARG1	country	0	0.0
# ::edge	bar-01	ARG1	person	0	0.2
# ::edge	bar-01	ARG2	city	0	0.1
# ::edge	city	name	name	0.1	0.1.0
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.2.0	0.2.0.0
# ::edge	name	op1	israel	0.0.0	0.0.0.0
# ::edge	name	op1	old	0.1.0	0.1.0.0
# ::edge	name	op1	palestine	0.2.0.0	0.2.0.0.0
# ::edge	name	op2	city	0.1.0	0.1.0.1
# ::edge	person	mod	country	0.2	0.2.0
(MRPNode-0 / bar-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 israel)) :ARG2 (MRPNode-3 / city :name (MRPNode-4 / name :op1 old :op2 city)) :ARG1 (MRPNode-5 / person :mod (MRPNode-6 / country :name (MRPNode-7 / name :op1 palestine))))

# ::id 637
# ::snt How much do you know about Secret Service?
# ::tok How much do you know about Secret Service ?
# ::alignments 0-1|0.0.0 1-2|0.0 3-4|0.1 4-5|0 6-8|0.0.1+0.0.1.0+0.0.1.0.0+0.0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.288041 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	know-01	4-5
# ::node	0.0	much	1-2
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	military	6-8
# ::node	0.0.1.0	name	6-8
# ::node	0.0.1.0.0	secret	6-8
# ::node	0.0.1.0.1	service	6-8
# ::node	0.1	you	3-4
# ::root	0	know-01
# ::edge	know-01	ARG0	you	0	0.1
# ::edge	know-01	ARG1	much	0	0.0
# ::edge	military	name	name	0.0.1	0.0.1.0
# ::edge	much	topic	amr-unknown	0.0	0.0.0
# ::edge	much	topic	military	0.0	0.0.1
# ::edge	name	op1	secret	0.0.1.0	0.0.1.0.0
# ::edge	name	op2	service	0.0.1.0	0.0.1.0.1
(MRPNode-0 / know-01 :ARG1 (MRPNode-1 / much :topic (MRPNode-2 / amr-unknown) :topic (MRPNode-3 / military :name (MRPNode-4 / name :op1 secret :op2 service))) :ARG0 (MRPNode-5 / you))

# ::id 638
# ::snt UN chief welcomes peaceful presidential elections in Guinea
# ::tok UN chief welcomes peaceful presidential elections in Guinea
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 1-2|0.1+0.1.0+0.1.0.1 2-3|0 3-4|0.0.2 4-5|0.0.1 5-6|0.0 7-8|0.0.0+0.0.0.0+0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.300507 ::parser eager_oracle ::smatch 1.0 ::n_actions 40
# ::node	0	welcome-01	2-3
# ::node	0.0	elect-01	5-6
# ::node	0.0.0	country	7-8
# ::node	0.0.0.0	name	7-8
# ::node	0.0.0.0.0	guinea	7-8
# ::node	0.0.1	president	4-5
# ::node	0.0.2	peaceful	3-4
# ::node	0.1	person	1-2
# ::node	0.1.0	have-org-role-91	1-2
# ::node	0.1.0.0	organization	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	un	0-1
# ::node	0.1.0.1	chief	1-2
# ::root	0	welcome-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	elect-01	mod	country	0.0	0.0.0
# ::edge	elect-01	mod	peaceful	0.0	0.0.2
# ::edge	elect-01	mod	president	0.0	0.0.1
# ::edge	have-org-role-91	ARG1	organization	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	chief	0.1.0	0.1.0.1
# ::edge	name	op1	guinea	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	un	0.1.0.0.0	0.1.0.0.0.0
# ::edge	organization	name	name	0.1.0.0	0.1.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	welcome-01	ARG0	person	0	0.1
# ::edge	welcome-01	ARG1	elect-01	0	0.0
(MRPNode-0 / welcome-01 :ARG1 (MRPNode-1 / elect-01 :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 guinea)) :mod (MRPNode-4 / president) :mod (MRPNode-5 / peaceful)) :ARG0 (MRPNode-6 / person :ARG0-of (MRPNode-7 / have-org-role-91 :ARG1 (MRPNode-8 / organization :name (MRPNode-9 / name :op1 un)) :ARG2 (MRPNode-10 / chief))))

# ::id 639
# ::snt At least 18 killed in Iraq mosque bombing
# ::tok At least 18 killed in Iraq mosque bombing
# ::alignments 2-3|0.0.0.0 3-4|0 5-6|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 6-7|0.1.0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.307097 ::parser eager_oracle ::smatch 0.8148148148148148 ::n_actions 24
# ::node	0	kill-01	3-4
# ::node	0.0	person	
# ::node	0.0.0	at-least	
# ::node	0.0.0.0	18	2-3
# ::node	0.1	bomb-01	7-8
# ::node	0.1.0	mosque	6-7
# ::node	0.1.0.0	country	5-6
# ::node	0.1.0.0.0	name	5-6
# ::node	0.1.0.0.0.0	iraq	5-6
# ::root	0	kill-01
# ::edge	at-least	op1	18	0.0.0	0.0.0.0
# ::edge	bomb-01	ARG1	mosque	0.1	0.1.0
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	ARG1-of	bomb-01	0	0.1
# ::edge	mosque	location	country	0.1.0	0.1.0.0
# ::edge	name	op1	iraq	0.1.0.0.0	0.1.0.0.0.0
# ::edge	person	quant	at-least	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant (MRPNode-2 / at-least :op1 18)) :ARG1-of (MRPNode-3 / bomb-01 :ARG1 (MRPNode-4 / mosque :location (MRPNode-5 / country :name (MRPNode-6 / name :op1 iraq)))))

# ::id 640
# ::snt Malaysia Airlines plane crashes on Ukraine-Russia border - live
# ::tok Malaysia Airlines plane crashes on Ukraine - Russia border - live
# ::alignments 0-2|0.1.0+0.1.0.0+0.1.0.0.0+0.1.0.0.1 2-3|0.1 3-4|0 5-6|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 7-8|0.0.0.1+0.0.0.1.0+0.0.0.1.0.0 8-9|0.0.0 10-11|0.0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:52.323703 ::parser eager_oracle ::smatch 0.9199999999999999 ::n_actions 33
# ::node	0	crash-01	3-4
# ::node	0.0	cause-01	
# ::node	0.0.0	border-01	8-9
# ::node	0.0.0.0	country	5-6
# ::node	0.0.0.0.0	name	5-6
# ::node	0.0.0.0.0.0	ukraine	5-6
# ::node	0.0.0.1	country	7-8
# ::node	0.0.0.1.0	name	7-8
# ::node	0.0.0.1.0.0	russia	7-8
# ::node	0.0.0.2	live-01	10-11
# ::node	0.1	plane	2-3
# ::node	0.1.0	company	0-2
# ::node	0.1.0.0	name	0-2
# ::node	0.1.0.0.0	malaysia	0-2
# ::node	0.1.0.0.1	airlines	0-2
# ::root	0	crash-01
# ::edge	border-01	ARG2	country	0.0.0	0.0.0.0
# ::edge	border-01	ARG2	country	0.0.0	0.0.0.1
# ::edge	border-01	ARG2	live-01	0.0.0	0.0.0.2
# ::edge	cause-01	ARG0	border-01	0.0	0.0.0
# ::edge	company	name	name	0.1.0	0.1.0.0
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	country	name	name	0.0.0.1	0.0.0.1.0
# ::edge	crash-01	ARG1	cause-01	0	0.0
# ::edge	crash-01	ARG1	plane	0	0.1
# ::edge	name	op1	malaysia	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	russia	0.0.0.1.0	0.0.0.1.0.0
# ::edge	name	op1	ukraine	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op2	airlines	0.1.0.0	0.1.0.0.1
# ::edge	plane	poss	company	0.1	0.1.0
(MRPNode-0 / crash-01 :ARG1 (MRPNode-1 / cause-01 :ARG0 (MRPNode-2 / border-01 :ARG2 (MRPNode-3 / country :name (MRPNode-4 / name :op1 ukraine)) :ARG2 (MRPNode-5 / country :name (MRPNode-6 / name :op1 russia)) :ARG2 (MRPNode-7 / live-01))) :ARG1 (MRPNode-8 / plane :poss (MRPNode-9 / company :name (MRPNode-10 / name :op1 malaysia :op2 airlines))))

# ::id 641
# ::snt Tycoon claims win in Ukraine and promises to seek future in EU
# ::tok Tycoon claims win in Ukraine and promises to seek future in EU
# ::alignments 0-1|0.0.1+0.0.1.0+0.0.1.0.0 1-2|0.0 2-3|0.0.0 5-6|0 6-7|0.1 8-9|0.1.0 9-10|0.1.0.0 11-12|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.335806 ::parser eager_oracle ::smatch 1.0 ::n_actions 46
# ::node	0	and	5-6
# ::node	0.0	claim-01	1-2
# ::node	0.0.0	win-01	2-3
# ::node	0.0.0.0	country	11-12
# ::node	0.0.0.0.0	name	11-12
# ::node	0.0.0.0.0.0	eu	11-12
# ::node	0.0.1	company	0-1
# ::node	0.0.1.0	name	0-1
# ::node	0.0.1.0.0	tycoon	0-1
# ::node	0.1	promise-01	6-7
# ::node	0.1.0	seek-01	8-9
# ::node	0.1.0.0	future	9-10
# ::root	0	and
# ::edge	and	op1	claim-01	0	0.0
# ::edge	and	op2	promise-01	0	0.1
# ::edge	claim-01	ARG0	company	0.0	0.0.1
# ::edge	claim-01	ARG1	win-01	0.0	0.0.0
# ::edge	company	name	name	0.0.1	0.0.1.0
# ::edge	country	name	name	0.0.0.0	0.0.0.0.0
# ::edge	name	op1	eu	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	tycoon	0.0.1.0	0.0.1.0.0
# ::edge	promise-01	ARG0	company	0.1	0.0.1
# ::edge	promise-01	ARG2	seek-01	0.1	0.1.0
# ::edge	seek-01	ARG0	company	0.1.0	0.0.1
# ::edge	seek-01	ARG1	future	0.1.0	0.1.0.0
# ::edge	win-01	location	country	0.0.0	0.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / claim-01 :ARG1 (MRPNode-2 / win-01 :location (MRPNode-3 / country :name (MRPNode-4 / name :op1 eu))) :ARG0 (MRPNode-5 / company :name (MRPNode-6 / name :op1 tycoon))) :op2 (MRPNode-7 / promise-01 :ARG0 MRPNode-5 :ARG2 (MRPNode-8 / seek-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-9 / future))))

# ::id 642
# ::snt The covert war in Pakistan
# ::tok The covert war in Pakistan
# ::alignments 1-2|0.0 2-3|0 4-5|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.338748 ::parser eager_oracle ::smatch 1.0 ::n_actions 16
# ::node	0	war-01	2-3
# ::node	0.0	covert	1-2
# ::node	0.1	country	4-5
# ::node	0.1.0	name	4-5
# ::node	0.1.0.0	pakistan	4-5
# ::root	0	war-01
# ::edge	country	name	name	0.1	0.1.0
# ::edge	name	op1	pakistan	0.1.0	0.1.0.0
# ::edge	war-01	location	country	0	0.1
# ::edge	war-01	mod	covert	0	0.0
(MRPNode-0 / war-01 :mod (MRPNode-1 / covert) :location (MRPNode-2 / country :name (MRPNode-3 / name :op1 pakistan)))

# ::id 643
# ::snt 4 killed, several injured in SW China car accident
# ::tok 4 killed , several injured in SW China car accident
# ::alignments 0-1|0.0.0+0.0.0.0 1-2|0.0 3-4|0.1.0+0.1.0.0 4-5|0.1 6-8|0.2.1+0.2.1.0+0.2.1.0.0+0.2.1.0.1 8-9|0.2.0 9-10|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:52.349002 ::parser eager_oracle ::smatch 0.8181818181818182 ::n_actions 39
# ::node	0	and	
# ::node	0.0	kill-01	1-2
# ::node	0.0.0	person	0-1
# ::node	0.0.0.0	4	0-1
# ::node	0.1	injure-01	4-5
# ::node	0.1.0	person	3-4
# ::node	0.1.0.0	several	3-4
# ::node	0.2	accident	9-10
# ::node	0.2.0	car	8-9
# ::node	0.2.1	world-region	6-8
# ::node	0.2.1.0	name	6-8
# ::node	0.2.1.0.0	sw	6-8
# ::node	0.2.1.0.1	china	6-8
# ::root	0	and
# ::edge	accident	location	world-region	0.2	0.2.1
# ::edge	accident	mod	car	0.2	0.2.0
# ::edge	and	location	accident	0	0.2
# ::edge	and	op1	kill-01	0	0.0
# ::edge	and	op2	injure-01	0	0.1
# ::edge	injure-01	ARG1	person	0.1	0.1.0
# ::edge	kill-01	ARG1	person	0.0	0.0.0
# ::edge	name	op1	sw	0.2.1.0	0.2.1.0.0
# ::edge	name	op2	china	0.2.1.0	0.2.1.0.1
# ::edge	person	quant	4	0.0.0	0.0.0.0
# ::edge	person	quant	several	0.1.0	0.1.0.0
# ::edge	world-region	name	name	0.2.1	0.2.1.0
(MRPNode-0 / and :op1 (MRPNode-1 / kill-01 :ARG1 (MRPNode-2 / person :quant 4)) :op2 (MRPNode-3 / injure-01 :ARG1 (MRPNode-4 / person :quant (MRPNode-5 / several))) :location (MRPNode-6 / accident :mod (MRPNode-7 / car) :location (MRPNode-8 / world-region :name (MRPNode-9 / name :op1 sw :op2 china))))

# ::id 644
# ::snt 4 dead, 3 injured in east China road accident
# ::tok 4 dead , 3 injured in east China road accident
# ::alignments 0-1|0.0.0+0.0.0.0 3-4|0.1.0+0.1.0.0 4-5|0.1 6-7|0.2.1 7-8|0.2.1.0+0.2.1.0.0+0.2.1.0.0.0 8-9|0.2.0 9-10|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:52.366886 ::parser eager_oracle ::smatch 0.761904761904762 ::n_actions 39
# ::node	0	and	
# ::node	0.0	die-01	
# ::node	0.0.0	person	0-1
# ::node	0.0.0.0	4	0-1
# ::node	0.1	injure-01	4-5
# ::node	0.1.0	person	3-4
# ::node	0.1.0.0	3	3-4
# ::node	0.2	accident	9-10
# ::node	0.2.0	road	8-9
# ::node	0.2.1	east	6-7
# ::node	0.2.1.0	country	7-8
# ::node	0.2.1.0.0	name	7-8
# ::node	0.2.1.0.0.0	china	7-8
# ::root	0	and
# ::edge	accident	location	east	0.2	0.2.1
# ::edge	accident	mod	road	0.2	0.2.0
# ::edge	and	location	accident	0	0.2
# ::edge	and	op1	die-01	0	0.0
# ::edge	and	op2	injure-01	0	0.1
# ::edge	country	name	name	0.2.1.0	0.2.1.0.0
# ::edge	die-01	ARG1	person	0.0	0.0.0
# ::edge	east	part-of	country	0.2.1	0.2.1.0
# ::edge	injure-01	ARG1	person	0.1	0.1.0
# ::edge	name	op1	china	0.2.1.0.0	0.2.1.0.0.0
# ::edge	person	quant	3	0.1.0	0.1.0.0
# ::edge	person	quant	4	0.0.0	0.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / die-01 :ARG1 (MRPNode-2 / person :quant 4)) :op2 (MRPNode-3 / injure-01 :ARG1 (MRPNode-4 / person :quant 3)) :location (MRPNode-5 / accident :mod (MRPNode-6 / road) :location (MRPNode-7 / east :part-of (MRPNode-8 / country :name (MRPNode-9 / name :op1 china)))))

# ::id 645
# ::snt Pope canonizes 2 Palestinians
# ::tok Pope canonizes 2 Palestinians
# ::alignments 0-1|0.0+0.0.0+0.0.0.0+0.0.0.0.0 2-3|0.1.0 3-4|0.1.1+0.1.1.0+0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.371340 ::parser eager_oracle ::smatch 0.6206896551724139 ::n_actions 17
# ::node	0	condemn-01	
# ::node	0.0	person	0-1
# ::node	0.0.0	religious-group	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	pope	0-1
# ::node	0.1	person	
# ::node	0.1.0	2	2-3
# ::node	0.1.1	country	3-4
# ::node	0.1.1.0	name	3-4
# ::node	0.1.1.0.0	palestine	3-4
# ::root	0	condemn-01
# ::edge	condemn-01	ARG0	person	0	0.1
# ::edge	condemn-01	ARG1	person	0	0.0
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	name	op1	palestine	0.1.1.0	0.1.1.0.0
# ::edge	name	op1	pope	0.0.0.0	0.0.0.0.0
# ::edge	person	mod	country	0.1	0.1.1
# ::edge	person	mod	religious-group	0.0	0.0.0
# ::edge	person	quant	2	0.1	0.1.0
# ::edge	religious-group	name	name	0.0.0	0.0.0.0
(MRPNode-0 / condemn-01 :ARG1 (MRPNode-1 / person :mod (MRPNode-2 / religious-group :name (MRPNode-3 / name :op1 pope))) :ARG0 (MRPNode-4 / person :quant 2 :mod (MRPNode-5 / country :name (MRPNode-6 / name :op1 palestine))))

# ::id 646
# ::snt 3 killed, 4 injured in Los Angeles shootings
# ::tok 3 killed , 4 injured in Los Angeles shootings
# ::alignments 0-1|0.0.1+0.0.1.0 1-2|0.0 3-4|0.1.0+0.1.0.0 4-5|0.1 6-8|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0+0.0.0.0.0.0.1 8-9|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.387566 ::parser eager_oracle ::smatch 0.7499999999999999 ::n_actions 35
# ::node	0	and	
# ::node	0.0	kill-01	1-2
# ::node	0.0.0	cause-01	
# ::node	0.0.0.0	shoot-02	8-9
# ::node	0.0.0.0.0	city	6-8
# ::node	0.0.0.0.0.0	name	6-8
# ::node	0.0.0.0.0.0.0	los	6-8
# ::node	0.0.0.0.0.0.1	angeles	6-8
# ::node	0.0.1	person	0-1
# ::node	0.0.1.0	3	0-1
# ::node	0.1	injure-01	4-5
# ::node	0.1.0	person	3-4
# ::node	0.1.0.0	4	3-4
# ::root	0	and
# ::edge	and	op1	kill-01	0	0.0
# ::edge	and	op2	injure-01	0	0.1
# ::edge	cause-01	ARG0	shoot-02	0.0.0	0.0.0.0
# ::edge	city	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	injure-01	ARG1	person	0.1	0.1.0
# ::edge	kill-01	ARG1	cause-01	0.0	0.0.0
# ::edge	kill-01	ARG1	person	0.0	0.0.1
# ::edge	name	op1	los	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op2	angeles	0.0.0.0.0.0	0.0.0.0.0.0.1
# ::edge	person	quant	3	0.0.1	0.0.1.0
# ::edge	person	quant	4	0.1.0	0.1.0.0
# ::edge	shoot-02	location	city	0.0.0.0	0.0.0.0.0
(MRPNode-0 / and :op1 (MRPNode-1 / kill-01 :ARG1 (MRPNode-2 / cause-01 :ARG0 (MRPNode-3 / shoot-02 :location (MRPNode-4 / city :name (MRPNode-5 / name :op1 los :op2 angeles)))) :ARG1 (MRPNode-6 / person :quant 3)) :op2 (MRPNode-7 / injure-01 :ARG1 (MRPNode-8 / person :quant 4)))

# ::id 647
# ::snt 5 killed in Israeli air strikes in Gaza
# ::tok 5 killed in Israeli air strikes in Gaza
# ::alignments 1-2|0 3-4|0.0.0+0.0.0.0+0.0.0.0.0 4-5|0.0.1 5-6|0.0 7-8|0.0.2+0.0.2.0+0.0.2.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.396534 ::parser eager_oracle ::smatch 0.8823529411764706 ::n_actions 25
# ::node	0	kill-01	1-2
# ::node	0.0	strike-01	5-6
# ::node	0.0.0	country	3-4
# ::node	0.0.0.0	name	3-4
# ::node	0.0.0.0.0	israel	3-4
# ::node	0.0.1	air	4-5
# ::node	0.0.2	country-region	7-8
# ::node	0.0.2.0	name	7-8
# ::node	0.0.2.0.0	gaza	7-8
# ::node	0.1	cause-01	
# ::root	0	kill-01
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	country-region	name	name	0.0.2	0.0.2.0
# ::edge	kill-01	ARG1	strike-01	0	0.0
# ::edge	kill-01	ARG1-of	cause-01	0	0.1
# ::edge	name	op1	gaza	0.0.2.0	0.0.2.0.0
# ::edge	name	op1	israel	0.0.0.0	0.0.0.0.0
# ::edge	strike-01	ARG0	air	0.0	0.0.1
# ::edge	strike-01	ARG1	country	0.0	0.0.0
# ::edge	strike-01	location	country-region	0.0	0.0.2
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / strike-01 :ARG1 (MRPNode-2 / country :name (MRPNode-3 / name :op1 israel)) :ARG0 (MRPNode-4 / air) :location (MRPNode-5 / country-region :name (MRPNode-6 / name :op1 gaza))) :ARG1-of (MRPNode-7 / cause-01))

# ::id 648
# ::snt Funeral of Ian Paisley to take place in Belfast
# ::tok Funeral of Ian Paisley to take place in Belfast
# ::alignments 0-1|0 2-4|0.0+0.0.0+0.0.0.0+0.0.0.1 8-9|0.1+0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.401401 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	funeral	0-1
# ::node	0.0	person	2-4
# ::node	0.0.0	name	2-4
# ::node	0.0.0.0	ian	2-4
# ::node	0.0.0.1	paisley	2-4
# ::node	0.1	city	8-9
# ::node	0.1.0	name	8-9
# ::node	0.1.0.0	belfast	8-9
# ::root	0	funeral
# ::edge	city	name	name	0.1	0.1.0
# ::edge	funeral	location	city	0	0.1
# ::edge	funeral	location	person	0	0.0
# ::edge	name	op1	belfast	0.1.0	0.1.0.0
# ::edge	name	op1	ian	0.0.0	0.0.0.0
# ::edge	name	op2	paisley	0.0.0	0.0.0.1
# ::edge	person	name	name	0.0	0.0.0
(MRPNode-0 / funeral :location (MRPNode-1 / person :name (MRPNode-2 / name :op1 ian :op2 paisley)) :location (MRPNode-3 / city :name (MRPNode-4 / name :op1 belfast)))

# ::id 649
# ::snt Libya: UN orders investigation into Libya rights abuses
# ::tok Libya : UN orders investigation into Libya rights abuses
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 2-3|0.2.0+0.2.0.0+0.2.0.0.0 3-4|0.2 4-5|0 7-8|0.0.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.410682 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	investigate-01	4-5
# ::node	0.0	abuse-01	8-9
# ::node	0.0.0	right-05	7-8
# ::node	0.1	country	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	libya	0-1
# ::node	0.2	order-01	3-4
# ::node	0.2.0	organization	2-3
# ::node	0.2.0.0	name	2-3
# ::node	0.2.0.0.0	un	2-3
# ::root	0	investigate-01
# ::edge	abuse-01	ARG1	right-05	0.0	0.0.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	investigate-01	ARG0	country	0	0.1
# ::edge	investigate-01	ARG1	abuse-01	0	0.0
# ::edge	investigate-01	ARG1-of	order-01	0	0.2
# ::edge	name	op1	libya	0.1.0	0.1.0.0
# ::edge	name	op1	un	0.2.0.0	0.2.0.0.0
# ::edge	order-01	ARG0	organization	0.2	0.2.0
# ::edge	organization	name	name	0.2.0	0.2.0.0
(MRPNode-0 / investigate-01 :ARG1 (MRPNode-1 / abuse-01 :ARG1 (MRPNode-2 / right-05)) :ARG0 (MRPNode-3 / country :name (MRPNode-4 / name :op1 libya)) :ARG1-of (MRPNode-5 / order-01 :ARG0 (MRPNode-6 / organization :name (MRPNode-7 / name :op1 un))))

# ::id 650
# ::snt Oscar Pistorius sentenced to 5 years in prison
# ::tok Oscar Pistorius sentenced to 5 years in prison
# ::alignments 0-2|0.0+0.0.0+0.0.0.0+0.0.0.1 2-3|0 4-5|0.1.0 5-6|0.1+0.1.2 7-8|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.416875 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	sentence-01	2-3
# ::node	0.0	person	0-2
# ::node	0.0.0	name	0-2
# ::node	0.0.0.0	oscar	0-2
# ::node	0.0.0.1	pistorius	0-2
# ::node	0.1	temporal-quantity	5-6
# ::node	0.1.0	5	4-5
# ::node	0.1.1	prison	7-8
# ::node	0.1.2	year	5-6
# ::root	0	sentence-01
# ::edge	name	op1	oscar	0.0.0	0.0.0.0
# ::edge	name	op2	pistorius	0.0.0	0.0.0.1
# ::edge	person	name	name	0.0	0.0.0
# ::edge	sentence-01	ARG1	person	0	0.0
# ::edge	sentence-01	ARG2	temporal-quantity	0	0.1
# ::edge	temporal-quantity	location	prison	0.1	0.1.1
# ::edge	temporal-quantity	quant	5	0.1	0.1.0
# ::edge	temporal-quantity	unit	year	0.1	0.1.2
(MRPNode-0 / sentence-01 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 oscar :op2 pistorius)) :ARG2 (MRPNode-3 / temporal-quantity :quant 5 :location (MRPNode-4 / prison) :unit (MRPNode-5 / year)))

# ::id 651
# ::snt Govt. to hold talks with FTII students
# ::tok Govt. to hold talks with FTII students
# ::alignments 2-3|0 3-4|0.0 6-7|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.421142 ::parser eager_oracle ::smatch 0.4 ::n_actions 17
# ::node	0	hold-04	2-3
# ::node	0.0	talk-01	3-4
# ::node	0.0.0	person	
# ::node	0.0.0.0	study-01	6-7
# ::node	0.0.0.1	fuck	
# ::node	0.0.0.1.0	expressive	
# ::node	0.0.1	government-organization	
# ::node	0.0.1.0	govern-01	
# ::root	0	hold-04
# ::edge	fuck	mode	expressive	0.0.0.1	0.0.0.1.0
# ::edge	government-organization	ARG0-of	govern-01	0.0.1	0.0.1.0
# ::edge	hold-04	ARG0	government-organization	0	0.0.1
# ::edge	hold-04	ARG1	talk-01	0	0.0
# ::edge	person	mod	fuck	0.0.0	0.0.0.1
# ::edge	person	mod	study-01	0.0.0	0.0.0.0
# ::edge	talk-01	ARG0	government-organization	0.0	0.0.1
# ::edge	talk-01	ARG2	person	0.0	0.0.0
(MRPNode-0 / hold-04 :ARG1 (MRPNode-1 / talk-01 :ARG2 (MRPNode-2 / person :mod (MRPNode-3 / study-01) :mod (MRPNode-4 / fuck :mode expressive)) :ARG0 (MRPNode-5 / government-organization :ARG0-of (MRPNode-6 / govern-01))) :ARG0 MRPNode-5)

# ::id 652
# ::snt Li Na to announce retirement
# ::tok Li Na to announce retirement
# ::alignments 0-2|0.0.0+0.0.0.0+0.0.0.0.0+0.0.0.0.1 3-4|0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.424190 ::parser eager_oracle ::smatch 1.0 ::n_actions 18
# ::node	0	announce-01	3-4
# ::node	0.0	retire-01	4-5
# ::node	0.0.0	person	0-2
# ::node	0.0.0.0	name	0-2
# ::node	0.0.0.0.0	li	0-2
# ::node	0.0.0.0.1	na	0-2
# ::root	0	announce-01
# ::edge	announce-01	ARG0	person	0	0.0.0
# ::edge	announce-01	ARG1	retire-01	0	0.0
# ::edge	name	op1	li	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	na	0.0.0.0	0.0.0.0.1
# ::edge	person	name	name	0.0.0	0.0.0.0
# ::edge	retire-01	ARG0	person	0.0	0.0.0
(MRPNode-0 / announce-01 :ARG1 (MRPNode-1 / retire-01 :ARG0 (MRPNode-2 / person :name (MRPNode-3 / name :op1 li :op2 na))) :ARG0 MRPNode-2)

# ::id 653
# ::snt Plane Crash Site Search Called off for the Night
# ::tok Plane Crash Site Search Called off for the Night
# ::alignments 0-1|0.1.0 1-2|0.1 3-4|0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.428644 ::parser eager_oracle ::smatch 0.6666666666666666 ::n_actions 20
# ::node	0	search-01	3-4
# ::node	0.0	fly-01	
# ::node	0.0.0	date-entity	
# ::node	0.0.0.0	night	8-9
# ::node	0.1	crash-01	1-2
# ::node	0.1.0	plane	0-1
# ::root	0	search-01
# ::edge	crash-01	ARG1	plane	0.1	0.1.0
# ::edge	date-entity	dayperiod	night	0.0.0	0.0.0.0
# ::edge	fly-01	duration	date-entity	0.0	0.0.0
# ::edge	search-01	ARG1	fly-01	0	0.0
# ::edge	search-01	ARG2	crash-01	0	0.1
(MRPNode-0 / search-01 :ARG1 (MRPNode-1 / fly-01 :duration (MRPNode-2 / date-entity :dayperiod (MRPNode-3 / night))) :ARG2 (MRPNode-4 / crash-01 :ARG1 (MRPNode-5 / plane)))

# ::id 654
# ::snt Obama queries Turnbull over China port deal
# ::tok Obama queries Turnbull over China port deal
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.2+0.2.0+0.2.0.0 4-5|0.0.1+0.0.1.0+0.0.1.0.0 5-6|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.437404 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	query-01	1-2
# ::node	0.0	deal-01	6-7
# ::node	0.0.0	port	5-6
# ::node	0.0.1	country	4-5
# ::node	0.0.1.0	name	4-5
# ::node	0.0.1.0.0	china	4-5
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	obama	0-1
# ::node	0.2	person	2-3
# ::node	0.2.0	name	2-3
# ::node	0.2.0.0	turnbull	2-3
# ::root	0	query-01
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	deal-01	ARG0	country	0.0	0.0.1
# ::edge	deal-01	ARG2	port	0.0	0.0.0
# ::edge	name	op1	china	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	obama	0.1.0	0.1.0.0
# ::edge	name	op1	turnbull	0.2.0	0.2.0.0
# ::edge	person	name	name	0.1	0.1.0
# ::edge	person	name	name	0.2	0.2.0
# ::edge	query-01	ARG0	person	0	0.1
# ::edge	query-01	ARG0	person	0	0.2
# ::edge	query-01	ARG1	deal-01	0	0.0
(MRPNode-0 / query-01 :ARG1 (MRPNode-1 / deal-01 :ARG2 (MRPNode-2 / port) :ARG0 (MRPNode-3 / country :name (MRPNode-4 / name :op1 china))) :ARG0 (MRPNode-5 / person :name (MRPNode-6 / name :op1 obama)) :ARG0 (MRPNode-7 / person :name (MRPNode-8 / name :op1 turnbull)))

# ::id 655
# ::snt China's generous 1MDB bid seen reaping it big returns in Malaysia
# ::tok China 's generous 1MDB bid seen reaping it big returns in Malaysia
# ::alignments 0-1|0.0.2.0+0.0.2.0.0+0.0.2.0.0.0 2-3|0.0.2.1 3-4|0.0.2.2+0.0.2.2.0+0.0.2.2.0.0 4-5|0.0.2 5-6|0 6-7|0.0 8-9|0.0.0.0 9-10|0.0.0 11-12|0.0.1+0.0.1.0+0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.462391 ::parser eager_oracle ::smatch 1.0 ::n_actions 45
# ::node	0	see-01	5-6
# ::node	0.0	reap-01	6-7
# ::node	0.0.0	return-06	9-10
# ::node	0.0.0.0	big	8-9
# ::node	0.0.1	country	11-12
# ::node	0.0.1.0	name	11-12
# ::node	0.0.1.0.0	malaysia	11-12
# ::node	0.0.2	bid-01	4-5
# ::node	0.0.2.0	country	0-1
# ::node	0.0.2.0.0	name	0-1
# ::node	0.0.2.0.0.0	china	0-1
# ::node	0.0.2.1	generous-01	2-3
# ::node	0.0.2.2	product	3-4
# ::node	0.0.2.2.0	name	3-4
# ::node	0.0.2.2.0.0	1mdb	3-4
# ::root	0	see-01
# ::edge	bid-01	ARG0	country	0.0.2	0.0.1
# ::edge	bid-01	ARG1	country	0.0.2	0.0.2.0
# ::edge	bid-01	ARG1	generous-01	0.0.2	0.0.2.1
# ::edge	bid-01	ARG1	product	0.0.2	0.0.2.2
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	country	name	name	0.0.2.0	0.0.2.0.0
# ::edge	name	op1	1mdb	0.0.2.2.0	0.0.2.2.0.0
# ::edge	name	op1	china	0.0.2.0.0	0.0.2.0.0.0
# ::edge	name	op1	malaysia	0.0.1.0	0.0.1.0.0
# ::edge	product	name	name	0.0.2.2	0.0.2.2.0
# ::edge	reap-01	ARG0	bid-01	0.0	0.0.2
# ::edge	reap-01	ARG0	country	0.0	0.0.1
# ::edge	reap-01	ARG1	return-06	0.0	0.0.0
# ::edge	return-06	mod	big	0.0.0	0.0.0.0
# ::edge	see-01	ARG0	bid-01	0	0.0.2
# ::edge	see-01	ARG1	reap-01	0	0.0
(MRPNode-0 / see-01 :ARG1 (MRPNode-1 / reap-01 :ARG1 (MRPNode-2 / return-06 :mod (MRPNode-3 / big)) :ARG0 (MRPNode-4 / country :name (MRPNode-5 / name :op1 malaysia)) :ARG0 (MRPNode-6 / bid-01 :ARG0 MRPNode-4 :ARG1 (MRPNode-7 / country :name (MRPNode-8 / name :op1 china)) :ARG1 (MRPNode-9 / generous-01) :ARG1 (MRPNode-10 / product :name (MRPNode-11 / name :op1 1mdb)))) :ARG0 MRPNode-6)

# ::id 656
# ::snt Hezbollah targets Qaeda gathering along border with Syria
# ::tok Hezbollah targets Qaeda gathering along border with Syria
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 2-3|0.1.0+0.1.0.0+0.1.0.0.0 3-4|0.1 4-5|0.1.1 5-6|0.1.1.0 7-8|0.1.1.0.0+0.1.1.0.0.0+0.1.1.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.471417 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	target-01	1-2
# ::node	0.0	criminal-organization	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	hezbollah	0-1
# ::node	0.1	gather-01	3-4
# ::node	0.1.0	criminal-organization	2-3
# ::node	0.1.0.0	name	2-3
# ::node	0.1.0.0.0	qaeda	2-3
# ::node	0.1.1	along	4-5
# ::node	0.1.1.0	border-01	5-6
# ::node	0.1.1.0.0	country	7-8
# ::node	0.1.1.0.0.0	name	7-8
# ::node	0.1.1.0.0.0.0	syria	7-8
# ::root	0	target-01
# ::edge	along	op1	border-01	0.1.1	0.1.1.0
# ::edge	border-01	ARG2	country	0.1.1.0	0.1.1.0.0
# ::edge	country	name	name	0.1.1.0.0	0.1.1.0.0.0
# ::edge	criminal-organization	name	name	0.0	0.0.0
# ::edge	criminal-organization	name	name	0.1.0	0.1.0.0
# ::edge	gather-01	ARG1	criminal-organization	0.1	0.1.0
# ::edge	gather-01	location	along	0.1	0.1.1
# ::edge	name	op1	hezbollah	0.0.0	0.0.0.0
# ::edge	name	op1	qaeda	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	syria	0.1.1.0.0.0	0.1.1.0.0.0.0
# ::edge	target-01	ARG1	criminal-organization	0	0.0
# ::edge	target-01	ARG1	gather-01	0	0.1
(MRPNode-0 / target-01 :ARG1 (MRPNode-1 / criminal-organization :name (MRPNode-2 / name :op1 hezbollah)) :ARG1 (MRPNode-3 / gather-01 :ARG1 (MRPNode-4 / criminal-organization :name (MRPNode-5 / name :op1 qaeda)) :location (MRPNode-6 / along :op1 (MRPNode-7 / border-01 :ARG2 (MRPNode-8 / country :name (MRPNode-9 / name :op1 syria))))))

# ::id 657
# ::snt Obama calls for international front against IS
# ::tok Obama calls for international front against IS
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 3-4|0.1.0 4-5|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.475541 ::parser eager_oracle ::smatch 0.9166666666666666 ::n_actions 21
# ::node	0	call-03	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	obama	0-1
# ::node	0.1	front	4-5
# ::node	0.1.0	international	3-4
# ::node	0.1.1	oppose-01	
# ::root	0	call-03
# ::edge	call-03	ARG1	front	0	0.1
# ::edge	call-03	ARG1	person	0	0.0
# ::edge	front	mod	international	0.1	0.1.0
# ::edge	front	prep-against	oppose-01	0.1	0.1.1
# ::edge	name	op1	obama	0.0.0	0.0.0.0
# ::edge	person	name	name	0.0	0.0.0
(MRPNode-0 / call-03 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 obama)) :ARG1 (MRPNode-3 / front :mod (MRPNode-4 / international) :prep-against (MRPNode-5 / oppose-01)))

# ::id 658
# ::snt Who abandoned 3 Boeing planes at the airport?
# ::tok Who abandoned 3 Boeing planes at the airport ?
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.0 3-4|0.0.1+0.0.1.0+0.0.1.0.0 4-5|0.0 7-8|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:52.480067 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	abandon-01	1-2
# ::node	0.0	plane	4-5
# ::node	0.0.0	3	2-3
# ::node	0.0.1	company	3-4
# ::node	0.0.1.0	name	3-4
# ::node	0.0.1.0.0	boeing	3-4
# ::node	0.1	amr-unknown	0-1
# ::node	0.2	airport	7-8
# ::root	0	abandon-01
# ::edge	abandon-01	ARG0	amr-unknown	0	0.1
# ::edge	abandon-01	ARG1	plane	0	0.0
# ::edge	abandon-01	location	airport	0	0.2
# ::edge	company	name	name	0.0.1	0.0.1.0
# ::edge	name	op1	boeing	0.0.1.0	0.0.1.0.0
# ::edge	plane	quant	3	0.0	0.0.0
# ::edge	plane	quant	company	0.0	0.0.1
(MRPNode-0 / abandon-01 :ARG1 (MRPNode-1 / plane :quant 3 :quant (MRPNode-2 / company :name (MRPNode-3 / name :op1 boeing))) :ARG0 (MRPNode-4 / amr-unknown) :location (MRPNode-5 / airport))

# ::id 659
# ::snt Ebola UK: NHS staff 'panicked' after suspected Ebola cases
# ::tok Ebola UK : NHS staff ' panicked ' after suspected Ebola cases
# ::alignments 0-1|0.0.1.0.0+0.0.1.0.0.0+0.0.1.0.0.0.0 1-2|0.1.1+0.1.1.0+0.1.1.0.0 3-4|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 4-5|0.0.0+0.0.0.0 6-7|0.0 8-9|0.0.1 9-10|0.0.1.0.1 10-11|0.1+0.1.0+0.1.0.0 11-12|0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.499764 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 49
# ::node	0	say-01	
# ::node	0.0	panic-01	6-7
# ::node	0.0.0	person	4-5
# ::node	0.0.0.0	staff-01	4-5
# ::node	0.0.0.0.0	government-organization	3-4
# ::node	0.0.0.0.0.0	name	3-4
# ::node	0.0.0.0.0.0.0	nhs	3-4
# ::node	0.0.1	after	8-9
# ::node	0.0.1.0	case-04	11-12
# ::node	0.0.1.0.0	disease	0-1
# ::node	0.0.1.0.0.0	name	0-1
# ::node	0.0.1.0.0.0.0	ebola	0-1
# ::node	0.0.1.0.1	suspect-01	9-10
# ::node	0.1	organization	10-11
# ::node	0.1.0	name	10-11
# ::node	0.1.0.0	ebola	10-11
# ::node	0.1.1	country	1-2
# ::node	0.1.1.0	name	1-2
# ::node	0.1.1.0.0	uk	1-2
# ::root	0	say-01
# ::edge	after	op1	case-04	0.0.1	0.0.1.0
# ::edge	case-04	ARG1	disease	0.0.1.0	0.0.1.0.0
# ::edge	case-04	ARG1-of	suspect-01	0.0.1.0	0.0.1.0.1
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	disease	name	name	0.0.1.0.0	0.0.1.0.0.0
# ::edge	government-organization	name	name	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	ebola	0.0.1.0.0.0	0.0.1.0.0.0.0
# ::edge	name	op1	ebola	0.1.0	0.1.0.0
# ::edge	name	op1	nhs	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	name	op1	uk	0.1.1.0	0.1.1.0.0
# ::edge	organization	location	country	0.1	0.1.1
# ::edge	organization	name	name	0.1	0.1.0
# ::edge	panic-01	ARG1	person	0.0	0.0.0
# ::edge	panic-01	time	after	0.0	0.0.1
# ::edge	person	ARG2-of	staff-01	0.0.0	0.0.0.0
# ::edge	say-01	ARG0	organization	0	0.1
# ::edge	say-01	ARG1	panic-01	0	0.0
# ::edge	staff-01	ARG1	government-organization	0.0.0.0	0.0.0.0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / panic-01 :ARG1 (MRPNode-2 / person :ARG2-of (MRPNode-3 / staff-01 :ARG1 (MRPNode-4 / government-organization :name (MRPNode-5 / name :op1 nhs)))) :time (MRPNode-6 / after :op1 (MRPNode-7 / case-04 :ARG1 (MRPNode-8 / disease :name (MRPNode-9 / name :op1 ebola)) :ARG1-of (MRPNode-10 / suspect-01)))) :ARG0 (MRPNode-11 / organization :name (MRPNode-12 / name :op1 ebola) :location (MRPNode-13 / country :name (MRPNode-14 / name :op1 uk))))

# ::id 660
# ::snt Philippines, Canada pledge to further boost relations
# ::tok Philippines , Canada pledge to further boost relations
# ::alignments 0-1|0.0.2+0.0.2.0+0.0.2.0.0 2-3|0.1+0.1.0+0.1.0.0 3-4|0 5-6|0.0.1 6-7|0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.505893 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	pledge-01	3-4
# ::node	0.0	boost-01	6-7
# ::node	0.0.0	relation-03	7-8
# ::node	0.0.1	further	5-6
# ::node	0.0.2	country	0-1
# ::node	0.0.2.0	name	0-1
# ::node	0.0.2.0.0	philippines	0-1
# ::node	0.1	country	2-3
# ::node	0.1.0	name	2-3
# ::node	0.1.0.0	canada	2-3
# ::root	0	pledge-01
# ::edge	boost-01	ARG0	country	0.0	0.0.2
# ::edge	boost-01	ARG1	relation-03	0.0	0.0.0
# ::edge	boost-01	degree	further	0.0	0.0.1
# ::edge	country	name	name	0.0.2	0.0.2.0
# ::edge	country	name	name	0.1	0.1.0
# ::edge	name	op1	canada	0.1.0	0.1.0.0
# ::edge	name	op1	philippines	0.0.2.0	0.0.2.0.0
# ::edge	pledge-01	ARG0	boost-01	0	0.0
# ::edge	pledge-01	ARG0	country	0	0.0.2
# ::edge	pledge-01	ARG0	country	0	0.1
(MRPNode-0 / pledge-01 :ARG0 (MRPNode-1 / boost-01 :ARG1 (MRPNode-2 / relation-03) :degree (MRPNode-3 / further) :ARG0 (MRPNode-4 / country :name (MRPNode-5 / name :op1 philippines))) :ARG0 MRPNode-4 :ARG0 (MRPNode-6 / country :name (MRPNode-7 / name :op1 canada)))

# ::id 661
# ::snt N. Korea agrees to talks with South
# ::tok N. Korea agrees to talks with South
# ::alignments 0-2|0.0.1+0.0.1.0+0.0.1.0.0+0.0.1.0.1 2-3|0 4-5|0.0 6-7|0.0.0+0.0.0.0+0.0.0.0.0+0.0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.510300 ::parser eager_oracle ::smatch 0.9696969696969697 ::n_actions 23
# ::node	0	agree-01	2-3
# ::node	0.0	talk-01	4-5
# ::node	0.0.0	country	6-7
# ::node	0.0.0.0	name	6-7
# ::node	0.0.0.0.0	south	6-7
# ::node	0.0.0.0.1	korea	6-7
# ::node	0.0.1	country	0-2
# ::node	0.0.1.0	name	0-2
# ::node	0.0.1.0.0	n.	0-2
# ::node	0.0.1.0.1	korea	0-2
# ::root	0	agree-01
# ::edge	agree-01	ARG0	country	0	0.0.1
# ::edge	agree-01	ARG1	talk-01	0	0.0
# ::edge	country	name	name	0.0.0	0.0.0.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	name	op1	n.	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	south	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	korea	0.0.0.0	0.0.0.0.1
# ::edge	name	op2	korea	0.0.1.0	0.0.1.0.1
# ::edge	talk-01	ARG0	country	0.0	0.0.1
# ::edge	talk-01	ARG2	country	0.0	0.0.0
(MRPNode-0 / agree-01 :ARG1 (MRPNode-1 / talk-01 :ARG2 (MRPNode-2 / country :name (MRPNode-3 / name :op1 south :op2 korea)) :ARG0 (MRPNode-4 / country :name (MRPNode-5 / name :op1 n. :op2 korea))) :ARG0 MRPNode-4)

# ::id 662
# ::snt Iran, a large important partner for Russia: Novak
# ::tok Iran , a large important partner for Russia : Novak
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 3-4|0.1 4-5|0.2 5-6|0 9-10|0.3+0.3.0+0.3.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.516361 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	partner-01	5-6
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	iran	0-1
# ::node	0.1	large	3-4
# ::node	0.2	important-01	4-5
# ::node	0.3	country	9-10
# ::node	0.3.0	name	9-10
# ::node	0.3.0.0	novak	9-10
# ::root	0	partner-01
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.3	0.3.0
# ::edge	name	op1	iran	0.0.0	0.0.0.0
# ::edge	name	op1	novak	0.3.0	0.3.0.0
# ::edge	partner-01	ARG1	country	0	0.0
# ::edge	partner-01	ARG1	country	0	0.3
# ::edge	partner-01	ARG1-of	important-01	0	0.2
# ::edge	partner-01	mod	large	0	0.1
(MRPNode-0 / partner-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 iran)) :mod (MRPNode-3 / large) :ARG1-of (MRPNode-4 / important-01) :ARG1 (MRPNode-5 / country :name (MRPNode-6 / name :op1 novak)))

# ::id 663
# ::snt Taiwan's president charters plane to pay respects to Lee
# ::tok Taiwan 's president charters plane to pay respects to Lee
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 2-3|0.1+0.1.0+0.1.0.1 4-5|0.0 6-7|0.2 7-8|0.2.0 9-10|0.2.0.0+0.2.0.0.0+0.2.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.527448 ::parser eager_oracle ::smatch 0.8510638297872342 ::n_actions 39
# ::node	0	bark-01	
# ::node	0.0	plane	4-5
# ::node	0.1	person	2-3
# ::node	0.1.0	have-org-role-91	2-3
# ::node	0.1.0.0	country	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	taiwan	0-1
# ::node	0.1.0.1	president	2-3
# ::node	0.2	pay-01	6-7
# ::node	0.2.0	respect-01	7-8
# ::node	0.2.0.0	person	9-10
# ::node	0.2.0.0.0	name	9-10
# ::node	0.2.0.0.0.0	lee	9-10
# ::root	0	bark-01
# ::edge	bark-01	ARG0	person	0	0.1
# ::edge	bark-01	ARG1	plane	0	0.0
# ::edge	bark-01	purpose	pay-01	0	0.2
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	have-org-role-91	ARG1	country	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	president	0.1.0	0.1.0.1
# ::edge	name	op1	lee	0.2.0.0.0	0.2.0.0.0.0
# ::edge	name	op1	taiwan	0.1.0.0.0	0.1.0.0.0.0
# ::edge	pay-01	ARG0	person	0.2	0.1
# ::edge	pay-01	ARG1	respect-01	0.2	0.2.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	person	name	name	0.2.0.0	0.2.0.0.0
# ::edge	respect-01	ARG1	person	0.2.0	0.2.0.0
(MRPNode-0 / bark-01 :ARG1 (MRPNode-1 / plane) :ARG0 (MRPNode-2 / person :ARG0-of (MRPNode-3 / have-org-role-91 :ARG1 (MRPNode-4 / country :name (MRPNode-5 / name :op1 taiwan)) :ARG2 (MRPNode-6 / president))) :purpose (MRPNode-7 / pay-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-8 / respect-01 :ARG1 (MRPNode-9 / person :name (MRPNode-10 / name :op1 lee)))))

# ::id 664
# ::snt Two Palestinians die in attacks on Israelis ahead of Kerry visit
# ::tok Two Palestinians die in attacks on Israelis ahead of Kerry visit
# ::alignments 0-1|0.0.0 1-2|0.0.1+0.0.1.0+0.0.1.0.0 2-3|0 4-5|0.0+0.0.2 6-7|0.0.2.0+0.0.2.0.0+0.0.2.0.0.0+0.0.2.0.0.0.0 7-8|0.2 9-10|0.2.0.0+0.2.0.0.0+0.2.0.0.0.0 10-11|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.545801 ::parser eager_oracle ::smatch 0.8813559322033899 ::n_actions 46
# ::node	0	die-01	2-3
# ::node	0.0	person	4-5
# ::node	0.0.0	2	0-1
# ::node	0.0.1	country	1-2
# ::node	0.0.1.0	name	1-2
# ::node	0.0.1.0.0	palestine	1-2
# ::node	0.0.2	attack-01	4-5
# ::node	0.0.2.0	person	6-7
# ::node	0.0.2.0.0	country	6-7
# ::node	0.0.2.0.0.0	name	6-7
# ::node	0.0.2.0.0.0.0	israel	6-7
# ::node	0.1	cause-01	
# ::node	0.2	ahead	7-8
# ::node	0.2.0	visit-01	10-11
# ::node	0.2.0.0	person	9-10
# ::node	0.2.0.0.0	name	9-10
# ::node	0.2.0.0.0.0	kerry	9-10
# ::root	0	die-01
# ::edge	ahead	op1	visit-01	0.2	0.2.0
# ::edge	attack-01	ARG1	person	0.0.2	0.0.2.0
# ::edge	cause-01	ARG0	attack-01	0.1	0.0.2
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	country	name	name	0.0.2.0.0	0.0.2.0.0.0
# ::edge	die-01	ARG1	person	0	0.0
# ::edge	die-01	ARG1-of	cause-01	0	0.1
# ::edge	die-01	time	ahead	0	0.2
# ::edge	name	op1	israel	0.0.2.0.0.0	0.0.2.0.0.0.0
# ::edge	name	op1	kerry	0.2.0.0.0	0.2.0.0.0.0
# ::edge	name	op1	palestine	0.0.1.0	0.0.1.0.0
# ::edge	person	ARG0-of	attack-01	0.0	0.0.2
# ::edge	person	mod	country	0.0	0.0.1
# ::edge	person	mod	country	0.0.2.0	0.0.2.0.0
# ::edge	person	name	name	0.2.0.0	0.2.0.0.0
# ::edge	person	quant	2	0.0	0.0.0
# ::edge	visit-01	ARG0	person	0.2.0	0.2.0.0
(MRPNode-0 / die-01 :ARG1 (MRPNode-1 / person :quant 2 :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 palestine)) :ARG0-of (MRPNode-4 / attack-01 :ARG1 (MRPNode-5 / person :mod (MRPNode-6 / country :name (MRPNode-7 / name :op1 israel))))) :ARG1-of (MRPNode-8 / cause-01 :ARG0 MRPNode-4) :time (MRPNode-9 / ahead :op1 (MRPNode-10 / visit-01 :ARG0 (MRPNode-11 / person :name (MRPNode-12 / name :op1 kerry)))))

# ::id 665
# ::snt Thomas Cook accused of putting costs before customers
# ::tok Thomas Cook accused of putting costs before customers
# ::alignments 0-2|0.0.2+0.0.2.0+0.0.2.0.0+0.0.2.0.1 2-3|0 4-5|0.0 5-6|0.0.0 6-7|0.0.1 7-8|0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.551454 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	accuse-01	2-3
# ::node	0.0	put-01	4-5
# ::node	0.0.0	cost-01	5-6
# ::node	0.0.1	before	6-7
# ::node	0.0.1.0	customer	7-8
# ::node	0.0.2	person	0-2
# ::node	0.0.2.0	name	0-2
# ::node	0.0.2.0.0	thomas	0-2
# ::node	0.0.2.0.1	cook	0-2
# ::root	0	accuse-01
# ::edge	accuse-01	ARG1	person	0	0.0.2
# ::edge	accuse-01	ARG1	put-01	0	0.0
# ::edge	before	op1	customer	0.0.1	0.0.1.0
# ::edge	name	op1	thomas	0.0.2.0	0.0.2.0.0
# ::edge	name	op2	cook	0.0.2.0	0.0.2.0.1
# ::edge	person	name	name	0.0.2	0.0.2.0
# ::edge	put-01	ARG0	person	0.0	0.0.2
# ::edge	put-01	ARG1	cost-01	0.0	0.0.0
# ::edge	put-01	ARG2	before	0.0	0.0.1
(MRPNode-0 / accuse-01 :ARG1 (MRPNode-1 / put-01 :ARG1 (MRPNode-2 / cost-01) :ARG2 (MRPNode-3 / before :op1 (MRPNode-4 / customer)) :ARG0 (MRPNode-5 / person :name (MRPNode-6 / name :op1 thomas :op2 cook))) :ARG1 MRPNode-5)

# ::id 666
# ::snt Narendra Modi 'photoshopped' image of Chennai floods visit goes viral
# ::tok Narendra Modi ' photoshopped ' image of Chennai floods visit goes viral
# ::alignments 0-2|0.0.0+0.0.0.0+0.0.0.0.0+0.0.0.0.1 5-6|0.0 7-8|0.0.2.1+0.0.2.1.0+0.0.2.1.0.0 8-9|0.0.2.0 9-10|0.0.2 10-11|0 11-12|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.562266 ::parser eager_oracle ::smatch 0.9545454545454545 ::n_actions 35
# ::node	0	go-08	10-11
# ::node	0.0	image	5-6
# ::node	0.0.0	person	0-2
# ::node	0.0.0.0	name	0-2
# ::node	0.0.0.0.0	narendra	0-2
# ::node	0.0.0.0.1	modi	0-2
# ::node	0.0.1	shop-01	
# ::node	0.0.2	visit-01	9-10
# ::node	0.0.2.0	flood-01	8-9
# ::node	0.0.2.1	city	7-8
# ::node	0.0.2.1.0	name	7-8
# ::node	0.0.2.1.0.0	chennai	7-8
# ::node	0.1	viral	11-12
# ::root	0	go-08
# ::edge	city	name	name	0.0.2.1	0.0.2.1.0
# ::edge	go-08	ARG1	image	0	0.0
# ::edge	go-08	ARG2	viral	0	0.1
# ::edge	image	mod	person	0.0	0.0.0
# ::edge	image	topic	shop-01	0.0	0.0.1
# ::edge	image	topic	visit-01	0.0	0.0.2
# ::edge	name	op1	chennai	0.0.2.1.0	0.0.2.1.0.0
# ::edge	name	op1	narendra	0.0.0.0	0.0.0.0.0
# ::edge	name	op2	modi	0.0.0.0	0.0.0.0.1
# ::edge	person	name	name	0.0.0	0.0.0.0
# ::edge	visit-01	ARG1	flood-01	0.0.2	0.0.2.0
# ::edge	visit-01	location	city	0.0.2	0.0.2.1
(MRPNode-0 / go-08 :ARG1 (MRPNode-1 / image :mod (MRPNode-2 / person :name (MRPNode-3 / name :op1 narendra :op2 modi)) :topic (MRPNode-4 / shop-01) :topic (MRPNode-5 / visit-01 :ARG1 (MRPNode-6 / flood-01) :location (MRPNode-7 / city :name (MRPNode-8 / name :op1 chennai)))) :ARG2 (MRPNode-9 / viral))

# ::id 667
# ::snt Obama Struggles to Soothe Saudi Fears As Iran Talks Resume
# ::tok Obama Struggles to Soothe Saudi Fears As Iran Talks Resume
# ::alignments 0-1|0.0+0.0.0+0.0.0.0 1-2|0 5-6|0.1.0 7-8|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 8-9|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.571172 ::parser eager_oracle ::smatch 0.742857142857143 ::n_actions 25
# ::node	0	struggle-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	obama	0-1
# ::node	0.1	fuss-01	
# ::node	0.1.0	fear-01	5-6
# ::node	0.1.0.0	country	7-8
# ::node	0.1.0.0.0	name	7-8
# ::node	0.1.0.0.0.0	iran	7-8
# ::node	0.2	desire-01	
# ::node	0.2.0	talk-01	8-9
# ::root	0	struggle-01
# ::edge	country	name	name	0.1.0.0	0.1.0.0.0
# ::edge	desire-01	ARG0	talk-01	0.2	0.2.0
# ::edge	fear-01	ARG0	country	0.1.0	0.1.0.0
# ::edge	fuss-01	ARG0	person	0.1	0.0
# ::edge	fuss-01	ARG1	fear-01	0.1	0.1.0
# ::edge	name	op1	iran	0.1.0.0.0	0.1.0.0.0.0
# ::edge	name	op1	obama	0.0.0	0.0.0.0
# ::edge	person	name	name	0.0	0.0.0
# ::edge	struggle-01	ARG1	person	0	0.0
# ::edge	struggle-01	ARG2	fuss-01	0	0.1
# ::edge	struggle-01	time	desire-01	0	0.2
(MRPNode-0 / struggle-01 :ARG1 (MRPNode-1 / person :name (MRPNode-2 / name :op1 obama)) :ARG2 (MRPNode-3 / fuss-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-4 / fear-01 :ARG0 (MRPNode-5 / country :name (MRPNode-6 / name :op1 iran)))) :time (MRPNode-7 / desire-01 :ARG0 (MRPNode-8 / talk-01)))

# ::id 668
# ::snt Pakistan executions draw international ire
# ::tok Pakistan executions draw international ire
# ::alignments 0-1|0.1.0+0.1.0.0+0.1.0.0.0 1-2|0.1 2-3|0 3-4|0.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.575221 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	draw-02	2-3
# ::node	0.0	ire	4-5
# ::node	0.0.0	international	3-4
# ::node	0.1	execute-01	1-2
# ::node	0.1.0	country	0-1
# ::node	0.1.0.0	name	0-1
# ::node	0.1.0.0.0	pakistan	0-1
# ::root	0	draw-02
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	draw-02	ARG0	execute-01	0	0.1
# ::edge	draw-02	ARG1	ire	0	0.0
# ::edge	execute-01	ARG1	country	0.1	0.1.0
# ::edge	ire	mod	international	0.0	0.0.0
# ::edge	name	op1	pakistan	0.1.0.0	0.1.0.0.0
(MRPNode-0 / draw-02 :ARG1 (MRPNode-1 / ire :mod (MRPNode-2 / international)) :ARG0 (MRPNode-3 / execute-01 :ARG1 (MRPNode-4 / country :name (MRPNode-5 / name :op1 pakistan))))

# ::id 669
# ::snt South Korea declares end to MERS outbreak
# ::tok South Korea declares end to MERS outbreak
# ::alignments 0-2|0.0.1+0.0.1.0+0.0.1.0.0+0.0.1.0.1 2-3|0 3-4|0.0 5-6|0.0.0.0+0.0.0.0.0+0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.580388 ::parser eager_oracle ::smatch 0.8823529411764706 ::n_actions 22
# ::node	0	declare-02	2-3
# ::node	0.0	end-01	3-4
# ::node	0.0.0	break-13	
# ::node	0.0.0.0	sea	5-6
# ::node	0.0.0.0.0	name	5-6
# ::node	0.0.0.0.0.0	mers	5-6
# ::node	0.0.1	country	0-2
# ::node	0.0.1.0	name	0-2
# ::node	0.0.1.0.0	south	0-2
# ::node	0.0.1.0.1	korea	0-2
# ::root	0	declare-02
# ::edge	break-13	ARG1	sea	0.0.0	0.0.0.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	declare-02	ARG0	country	0	0.0.1
# ::edge	declare-02	ARG1	end-01	0	0.0
# ::edge	end-01	ARG0	country	0.0	0.0.1
# ::edge	end-01	ARG1	break-13	0.0	0.0.0
# ::edge	name	op1	mers	0.0.0.0.0	0.0.0.0.0.0
# ::edge	name	op1	south	0.0.1.0	0.0.1.0.0
# ::edge	name	op2	korea	0.0.1.0	0.0.1.0.1
# ::edge	sea	name	name	0.0.0.0	0.0.0.0.0
(MRPNode-0 / declare-02 :ARG1 (MRPNode-1 / end-01 :ARG1 (MRPNode-2 / break-13 :ARG1 (MRPNode-3 / sea :name (MRPNode-4 / name :op1 mers))) :ARG0 (MRPNode-5 / country :name (MRPNode-6 / name :op1 south :op2 korea))) :ARG0 MRPNode-5)

# ::id 670
# ::snt Pranab stresses need to strive for peace by nations
# ::tok Pranab stresses need to strive for peace by nations
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 2-3|0.0 4-5|0.0.0 6-7|0.0.0.0 8-9|0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.586391 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	stress-01	1-2
# ::node	0.0	need-01	2-3
# ::node	0.0.0	strive-01	4-5
# ::node	0.0.0.0	peace	6-7
# ::node	0.0.0.1	nation	8-9
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	pranab	0-1
# ::root	0	stress-01
# ::edge	name	op1	pranab	0.1.0	0.1.0.0
# ::edge	need-01	ARG1	strive-01	0.0	0.0.0
# ::edge	person	name	name	0.1	0.1.0
# ::edge	stress-01	ARG0	person	0	0.1
# ::edge	stress-01	ARG1	need-01	0	0.0
# ::edge	strive-01	ARG0	nation	0.0.0	0.0.0.1
# ::edge	strive-01	ARG1	peace	0.0.0	0.0.0.0
(MRPNode-0 / stress-01 :ARG1 (MRPNode-1 / need-01 :ARG1 (MRPNode-2 / strive-01 :ARG1 (MRPNode-3 / peace) :ARG0 (MRPNode-4 / nation))) :ARG0 (MRPNode-5 / person :name (MRPNode-6 / name :op1 pranab)))

# ::id 671
# ::snt Two Australians killed in Kenya after bus crashed into river
# ::tok Two Australians killed in Kenya after bus crashed into river
# ::alignments 0-1|0.0.0 1-2|0.0.1+0.0.1.0+0.0.1.0.0 2-3|0 4-5|0.2+0.2.0+0.2.0.0 5-6|0.1 6-7|0.1.0.0 7-8|0.1.0 9-10|0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.600981 ::parser eager_oracle ::smatch 0.8372093023255814 ::n_actions 34
# ::node	0	kill-01	2-3
# ::node	0.0	person	
# ::node	0.0.0	2	0-1
# ::node	0.0.1	country	1-2
# ::node	0.0.1.0	name	1-2
# ::node	0.0.1.0.0	australia	1-2
# ::node	0.1	after	5-6
# ::node	0.1.0	crash-01	7-8
# ::node	0.1.0.0	bus	6-7
# ::node	0.1.0.1	river	9-10
# ::node	0.2	country	4-5
# ::node	0.2.0	name	4-5
# ::node	0.2.0.0	kenya	4-5
# ::root	0	kill-01
# ::edge	after	op1	crash-01	0.1	0.1.0
# ::edge	country	name	name	0.0.1	0.0.1.0
# ::edge	country	name	name	0.2	0.2.0
# ::edge	crash-01	ARG1	bus	0.1.0	0.1.0.0
# ::edge	crash-01	ARG1	river	0.1.0	0.1.0.1
# ::edge	kill-01	ARG1	person	0	0.0
# ::edge	kill-01	location	country	0	0.2
# ::edge	kill-01	time	after	0	0.1
# ::edge	name	op1	australia	0.0.1.0	0.0.1.0.0
# ::edge	name	op1	kenya	0.2.0	0.2.0.0
# ::edge	person	mod	country	0.0	0.0.1
# ::edge	person	quant	2	0.0	0.0.0
(MRPNode-0 / kill-01 :ARG1 (MRPNode-1 / person :quant 2 :mod (MRPNode-2 / country :name (MRPNode-3 / name :op1 australia))) :time (MRPNode-4 / after :op1 (MRPNode-5 / crash-01 :ARG1 (MRPNode-6 / bus) :ARG1 (MRPNode-7 / river))) :location (MRPNode-8 / country :name (MRPNode-9 / name :op1 kenya)))

# ::id 672
# ::snt Severe Gales As Storm Clodagh Hits Britain
# ::tok Severe Gales As Storm Clodagh Hits Britain
# ::alignments 0-1|0.0 3-4|0.1.1 4-5|0.2+0.2.0+0.2.0.0 5-6|0.1 6-7|0.1.0+0.1.0.0+0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.608815 ::parser eager_oracle ::smatch 0.7647058823529411 ::n_actions 22
# ::node	0	gas-03	
# ::node	0.0	severe	0-1
# ::node	0.1	hit-01	5-6
# ::node	0.1.0	country	6-7
# ::node	0.1.0.0	name	6-7
# ::node	0.1.0.0.0	britain	6-7
# ::node	0.1.1	storm-01	3-4
# ::node	0.2	person	4-5
# ::node	0.2.0	name	4-5
# ::node	0.2.0.0	clodagh	4-5
# ::root	0	gas-03
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	gas-03	ARG1	person	0	0.2
# ::edge	gas-03	time	hit-01	0	0.1
# ::edge	gas-03	time	severe	0	0.0
# ::edge	hit-01	ARG0	storm-01	0.1	0.1.1
# ::edge	hit-01	ARG1	country	0.1	0.1.0
# ::edge	name	op1	britain	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	clodagh	0.2.0	0.2.0.0
# ::edge	person	name	name	0.2	0.2.0
(MRPNode-0 / gas-03 :time (MRPNode-1 / severe) :time (MRPNode-2 / hit-01 :ARG1 (MRPNode-3 / country :name (MRPNode-4 / name :op1 britain)) :ARG0 (MRPNode-5 / storm-01)) :ARG1 (MRPNode-6 / person :name (MRPNode-7 / name :op1 clodagh)))

# ::id 673
# ::snt Dozens of Egyptians hostages taken by Libyan terrorists as revenge for airstrikes
# ::tok Dozens of Egyptians hostages taken by Libyan terrorists as revenge for airstrikes
# ::alignments 2-3|0.0+0.0.0+0.0.0.0 3-4|0 4-5|0.1 6-7|0.1.0.0.1.0+0.1.0.0.1.0.0+0.1.0.0.1.0.0.0 7-8|0.1.0.0.1 9-10|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.625673 ::parser eager_oracle ::smatch 0.7272727272727274 ::n_actions 32
# ::node	0	hostage	3-4
# ::node	0.0	country	2-3
# ::node	0.0.0	name	2-3
# ::node	0.0.0.0	egypt	2-3
# ::node	0.1	take-01	4-5
# ::node	0.1.0	revenge	9-10
# ::node	0.1.0.0	strike-01	
# ::node	0.1.0.0.0	air	
# ::node	0.1.0.0.1	terrorist	7-8
# ::node	0.1.0.0.1.0	country	6-7
# ::node	0.1.0.0.1.0.0	name	6-7
# ::node	0.1.0.0.1.0.0.0	libya	6-7
# ::node	0.2	multiple	
# ::node	0.2.0	12	
# ::root	0	hostage
# ::edge	country	name	name	0.0	0.0.0
# ::edge	country	name	name	0.1.0.0.1.0	0.1.0.0.1.0.0
# ::edge	hostage	ARG1-of	take-01	0	0.1
# ::edge	hostage	mod	country	0	0.0
# ::edge	hostage	quant	multiple	0	0.2
# ::edge	multiple	op1	12	0.2	0.2.0
# ::edge	name	op1	egypt	0.0.0	0.0.0.0
# ::edge	name	op1	libya	0.1.0.0.1.0.0	0.1.0.0.1.0.0.0
# ::edge	revenge	mod	strike-01	0.1.0	0.1.0.0
# ::edge	strike-01	ARG0	terrorist	0.1.0.0	0.1.0.0.1
# ::edge	strike-01	path	air	0.1.0.0	0.1.0.0.0
# ::edge	take-01	ARG0	revenge	0.1	0.1.0
# ::edge	take-01	ARG0	terrorist	0.1	0.1.0.0.1
# ::edge	terrorist	mod	country	0.1.0.0.1	0.1.0.0.1.0
(MRPNode-0 / hostage :mod (MRPNode-1 / country :name (MRPNode-2 / name :op1 egypt)) :ARG1-of (MRPNode-3 / take-01 :ARG0 (MRPNode-4 / revenge :mod (MRPNode-5 / strike-01 :path (MRPNode-6 / air) :ARG0 (MRPNode-7 / terrorist :mod (MRPNode-8 / country :name (MRPNode-9 / name :op1 libya))))) :ARG0 MRPNode-7) :quant (MRPNode-10 / multiple :op1 12))

# ::id 674
# ::snt President heading to Bahrain
# ::tok President heading to Bahrain
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 1-2|0 3-4|0.0+0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.629170 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	head-02	1-2
# ::node	0.0	country	3-4
# ::node	0.0.0	name	3-4
# ::node	0.0.0.0	bahrain	3-4
# ::node	0.1	person	0-1
# ::node	0.1.0	have-org-role-91	0-1
# ::node	0.1.0.0	president	0-1
# ::root	0	head-02
# ::edge	country	name	name	0.0	0.0.0
# ::edge	have-org-role-91	ARG2	president	0.1.0	0.1.0.0
# ::edge	head-02	ARG0	person	0	0.1
# ::edge	head-02	ARG1	country	0	0.0
# ::edge	name	op1	bahrain	0.0.0	0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
(MRPNode-0 / head-02 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 bahrain)) :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / have-org-role-91 :ARG2 (MRPNode-5 / president))))

# ::id 675
# ::snt China, India vow to further bilateral ties
# ::tok China , India vow to further bilateral ties
# ::alignments 0-1|0.0.1.0+0.0.1.0.0+0.0.1.0.0.0 2-3|0.0.1.1+0.0.1.1.0+0.0.1.1.0.0 3-4|0 5-6|0.0 6-7|0.0.0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.637948 ::parser eager_oracle ::smatch 0.8205128205128205 ::n_actions 26
# ::node	0	vow-01	3-4
# ::node	0.0	further-01	5-6
# ::node	0.0.0	tie-01	7-8
# ::node	0.0.0.0	bilateral	6-7
# ::node	0.0.1	and	
# ::node	0.0.1.0	country	0-1
# ::node	0.0.1.0.0	name	0-1
# ::node	0.0.1.0.0.0	china	0-1
# ::node	0.0.1.1	country	2-3
# ::node	0.0.1.1.0	name	2-3
# ::node	0.0.1.1.0.0	india	2-3
# ::root	0	vow-01
# ::edge	and	op1	country	0.0.1	0.0.1.0
# ::edge	and	op2	country	0.0.1	0.0.1.1
# ::edge	country	name	name	0.0.1.0	0.0.1.0.0
# ::edge	country	name	name	0.0.1.1	0.0.1.1.0
# ::edge	further-01	ARG0	and	0.0	0.0.1
# ::edge	further-01	ARG1	tie-01	0.0	0.0.0
# ::edge	name	op1	china	0.0.1.0.0	0.0.1.0.0.0
# ::edge	name	op1	india	0.0.1.1.0	0.0.1.1.0.0
# ::edge	tie-01	mod	bilateral	0.0.0	0.0.0.0
# ::edge	vow-01	ARG0	and	0	0.0.1
# ::edge	vow-01	ARG1	further-01	0	0.0
(MRPNode-0 / vow-01 :ARG1 (MRPNode-1 / further-01 :ARG1 (MRPNode-2 / tie-01 :mod (MRPNode-3 / bilateral)) :ARG0 (MRPNode-4 / and :op1 (MRPNode-5 / country :name (MRPNode-6 / name :op1 china)) :op2 (MRPNode-7 / country :name (MRPNode-8 / name :op1 india)))) :ARG0 MRPNode-4)

# ::id 676
# ::snt Obama is right: Africa deserves better leadership
# ::tok Obama is right : Africa deserves better leadership
# ::alignments 0-1|0.1+0.1.0+0.1.0.0 2-3|0 4-5|0.0.0.2+0.0.0.2.0+0.0.0.2.0.0 5-6|0.0 6-7|0.0.0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.648187 ::parser eager_oracle ::smatch 0.8837209302325582 ::n_actions 30
# ::node	0	right-06	2-3
# ::node	0.0	deserve-01	5-6
# ::node	0.0.0	lead-02	7-8
# ::node	0.0.0.0	good-02	6-7
# ::node	0.0.0.1	have-degree-91	
# ::node	0.0.0.1.0	more	
# ::node	0.0.0.2	continent	4-5
# ::node	0.0.0.2.0	name	4-5
# ::node	0.0.0.2.0.0	africa	4-5
# ::node	0.1	person	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	obama	0-1
# ::root	0	right-06
# ::edge	continent	name	name	0.0.0.2	0.0.0.2.0
# ::edge	deserve-01	ARG0	continent	0.0	0.0.0.2
# ::edge	deserve-01	ARG1	lead-02	0.0	0.0.0
# ::edge	have-degree-91	ARG2	good-02	0.0.0.1	0.0.0.0
# ::edge	have-degree-91	ARG3	more	0.0.0.1	0.0.0.1.0
# ::edge	lead-02	ARG0	continent	0.0.0	0.0.0.2
# ::edge	lead-02	ARG1-of	good-02	0.0.0	0.0.0.0
# ::edge	lead-02	ARG1-of	have-degree-91	0.0.0	0.0.0.1
# ::edge	name	op1	africa	0.0.0.2.0	0.0.0.2.0.0
# ::edge	name	op1	obama	0.1.0	0.1.0.0
# ::edge	person	name	name	0.1	0.1.0
# ::edge	right-06	ARG1	deserve-01	0	0.0
# ::edge	right-06	ARG1	person	0	0.1
(MRPNode-0 / right-06 :ARG1 (MRPNode-1 / deserve-01 :ARG1 (MRPNode-2 / lead-02 :ARG1-of (MRPNode-3 / good-02) :ARG1-of (MRPNode-4 / have-degree-91 :ARG2 MRPNode-3 :ARG3 (MRPNode-5 / more)) :ARG0 (MRPNode-6 / continent :name (MRPNode-7 / name :op1 africa))) :ARG0 MRPNode-6) :ARG1 (MRPNode-8 / person :name (MRPNode-9 / name :op1 obama)))

# ::id 677
# ::snt Putin spokesman: Doping charges appear unfounded
# ::tok Putin spokesman : Doping charges appear unfounded
# ::alignments 0-1|0.1.0.0+0.1.0.0.0+0.1.0.0.0.0 1-2|0.1+0.1.0+0.1.0.1 4-5|0.0.0.1 5-6|0.0 6-7|0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.659116 ::parser eager_oracle ::smatch 0.7999999999999999 ::n_actions 36
# ::node	0	say-01	
# ::node	0.0	appear-02	5-6
# ::node	0.0.0	found-01	6-7
# ::node	0.0.0.0	-	6-7
# ::node	0.0.0.1	charge-05	4-5
# ::node	0.0.0.1.0	test-01	
# ::node	0.1	person	1-2
# ::node	0.1.0	have-org-role-91	1-2
# ::node	0.1.0.0	person	0-1
# ::node	0.1.0.0.0	name	0-1
# ::node	0.1.0.0.0.0	putin	0-1
# ::node	0.1.0.1	spokesman	1-2
# ::root	0	say-01
# ::edge	appear-02	ARG1	found-01	0.0	0.0.0
# ::edge	charge-05	ARG2	test-01	0.0.0.1	0.0.0.1.0
# ::edge	found-01	ARG1	charge-05	0.0.0	0.0.0.1
# ::edge	found-01	polarity	-	0.0.0	0.0.0.0
# ::edge	have-org-role-91	ARG1	person	0.1.0	0.1.0.0
# ::edge	have-org-role-91	ARG2	spokesman	0.1.0	0.1.0.1
# ::edge	name	op1	putin	0.1.0.0.0	0.1.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.1	0.1.0
# ::edge	person	name	name	0.1.0.0	0.1.0.0.0
# ::edge	say-01	ARG0	person	0	0.1
# ::edge	say-01	ARG1	appear-02	0	0.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / appear-02 :ARG1 (MRPNode-2 / found-01 :polarity - :ARG1 (MRPNode-3 / charge-05 :ARG2 (MRPNode-4 / test-01)))) :ARG0 (MRPNode-5 / person :ARG0-of (MRPNode-6 / have-org-role-91 :ARG1 (MRPNode-7 / person :name (MRPNode-8 / name :op1 putin)) :ARG2 (MRPNode-9 / spokesman))))

# ::id 678
# ::snt New video shows US police officers beating mentally-ill man
# ::tok New video shows US police officers beating mentally - ill man
# ::alignments 0-1|0.1.0 1-2|0.1 2-3|0 3-4|0.0.1.0.0.0+0.0.1.0.0.0.0+0.0.1.0.0.0.0.0 4-5|0.0.1.0.0 5-6|0.0.1+0.0.1.0+0.0.1.0.1 6-7|0.0 7-8|0.0.0.0.0 9-10|0.0.0.0 10-11|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.689057 ::parser eager_oracle ::smatch 1.0 ::n_actions 52
# ::node	0	show-01	2-3
# ::node	0.0	beat-01	6-7
# ::node	0.0.0	man	10-11
# ::node	0.0.0.0	ill-01	9-10
# ::node	0.0.0.0.0	mental	7-8
# ::node	0.0.1	person	5-6
# ::node	0.0.1.0	have-org-role-91	5-6
# ::node	0.0.1.0.0	police	4-5
# ::node	0.0.1.0.0.0	country	3-4
# ::node	0.0.1.0.0.0.0	name	3-4
# ::node	0.0.1.0.0.0.0.0	us	3-4
# ::node	0.0.1.0.1	officer	5-6
# ::node	0.1	video	1-2
# ::node	0.1.0	new-01	0-1
# ::root	0	show-01
# ::edge	beat-01	ARG0	person	0.0	0.0.1
# ::edge	beat-01	ARG1	man	0.0	0.0.0
# ::edge	country	name	name	0.0.1.0.0.0	0.0.1.0.0.0.0
# ::edge	have-org-role-91	ARG1	police	0.0.1.0	0.0.1.0.0
# ::edge	have-org-role-91	ARG2	officer	0.0.1.0	0.0.1.0.1
# ::edge	ill-01	mod	mental	0.0.0.0	0.0.0.0.0
# ::edge	man	ARG1-of	ill-01	0.0.0	0.0.0.0
# ::edge	name	op1	us	0.0.1.0.0.0.0	0.0.1.0.0.0.0.0
# ::edge	person	ARG0-of	have-org-role-91	0.0.1	0.0.1.0
# ::edge	police	mod	country	0.0.1.0.0	0.0.1.0.0.0
# ::edge	show-01	ARG0	video	0	0.1
# ::edge	show-01	ARG1	beat-01	0	0.0
# ::edge	video	ARG1-of	new-01	0.1	0.1.0
(MRPNode-0 / show-01 :ARG1 (MRPNode-1 / beat-01 :ARG1 (MRPNode-2 / man :ARG1-of (MRPNode-3 / ill-01 :mod (MRPNode-4 / mental))) :ARG0 (MRPNode-5 / person :ARG0-of (MRPNode-6 / have-org-role-91 :ARG1 (MRPNode-7 / police :mod (MRPNode-8 / country :name (MRPNode-9 / name :op1 us))) :ARG2 (MRPNode-10 / officer)))) :ARG0 (MRPNode-11 / video :ARG1-of (MRPNode-12 / new-01)))

# ::id 679
# ::snt You do not need to worry.
# ::tok You do not need to worry .
# ::alignments 0-1|0.1.0 2-3|0.0 3-4|0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.692104 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	need-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	worry-01	5-6
# ::node	0.1.0	you	0-1
# ::root	0	need-01
# ::edge	need-01	ARG0	you	0	0.1.0
# ::edge	need-01	ARG1	worry-01	0	0.1
# ::edge	need-01	polarity	-	0	0.0
# ::edge	worry-01	ARG1	you	0.1	0.1.0
(MRPNode-0 / need-01 :polarity - :ARG1 (MRPNode-1 / worry-01 :ARG1 (MRPNode-2 / you)) :ARG0 MRPNode-2)

# ::id 680
# ::snt You can do it, too.
# ::tok You can do it , too .
# ::alignments 0-1|0.0.1 1-2|0 2-3|0.0 3-4|0.0.0 5-6|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:52.695425 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	possible-01	1-2
# ::node	0.0	do-02	2-3
# ::node	0.0.0	it	3-4
# ::node	0.0.1	you	0-1
# ::node	0.0.2	too	5-6
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	it	0.0	0.0.0
# ::edge	do-02	mod	too	0.0	0.0.2
# ::edge	possible-01	ARG1	do-02	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / you) :mod (MRPNode-4 / too)))

# ::id 681
# ::snt The answer to both questions is: Yes.
# ::tok The answer to both questions is : Yes .
# ::alignments 1-2|0 3-4|0.1.0 4-5|0.1 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.699865 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	answer-01	1-2
# ::node	0.0	yes	7-8
# ::node	0.1	question-01	4-5
# ::node	0.1.0	both	3-4
# ::root	0	answer-01
# ::edge	answer-01	ARG2	question-01	0	0.1
# ::edge	answer-01	ARG2	yes	0	0.0
# ::edge	question-01	mod	both	0.1	0.1.0
(MRPNode-0 / answer-01 :ARG2 (MRPNode-1 / yes) :ARG2 (MRPNode-2 / question-01 :mod (MRPNode-3 / both)))

# ::id 682
# ::snt You guys are making this all WAAAAAY too complicated.
# ::tok You guys are making this all WAAAAAY too complicated .
# ::alignments 0-1|0.1 1-2|0.1.0 3-4|0+0.0.1.0.0 4-5|0.0.0 5-6|0.0.0.0 7-8|0.0.1.0 8-9|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.709434 ::parser eager_oracle ::smatch 0.8571428571428572 ::n_actions 37
# ::node	0	make-02	3-4
# ::node	0.0	complicate-01	8-9
# ::node	0.0.0	this	4-5
# ::node	0.0.0.0	all	5-6
# ::node	0.0.1	have-degree-91	
# ::node	0.0.1.0	too	7-8
# ::node	0.0.1.0.0	way	3-4
# ::node	0.1	you	0-1
# ::node	0.1.0	guy	1-2
# ::root	0	make-02
# ::edge	complicate-01	ARG1	this	0.0	0.0.0
# ::edge	complicate-01	ARG2-of	have-degree-91	0.0	0.0.1
# ::edge	have-degree-91	ARG1	this	0.0.1	0.0.0
# ::edge	have-degree-91	ARG3	too	0.0.1	0.0.1.0
# ::edge	make-02	ARG0	you	0	0.1
# ::edge	make-02	ARG1	complicate-01	0	0.0
# ::edge	this	mod	all	0.0.0	0.0.0.0
# ::edge	too	mod	way	0.0.1.0	0.0.1.0.0
# ::edge	you	mod	guy	0.1	0.1.0
(MRPNode-0 / make-02 :ARG1 (MRPNode-1 / complicate-01 :ARG1 (MRPNode-2 / this :mod (MRPNode-3 / all)) :ARG2-of (MRPNode-4 / have-degree-91 :ARG1 MRPNode-2 :ARG3 (MRPNode-5 / too :mod (MRPNode-6 / way)))) :ARG0 (MRPNode-7 / you :mod (MRPNode-8 / guy)))

# ::id 683
# ::snt It's not a good idea.
# ::tok It 's not a good idea .
# ::alignments 0-1|0.1 2-3|0.0.0 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.711458 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	idea	5-6
# ::node	0.0	good-02	4-5
# ::node	0.0.0	-	2-3
# ::node	0.1	it	0-1
# ::root	0	idea
# ::edge	good-02	polarity	-	0.0	0.0.0
# ::edge	idea	ARG1-of	good-02	0	0.0
# ::edge	idea	domain	it	0	0.1
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / good-02 :polarity -) :domain (MRPNode-2 / it))

# ::id 684
# ::snt Take a look at these:
# ::tok Take a look at these :
# ::alignments 0-1|0.2 2-3|0+0.0 4-5|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.713783 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	look-01	2-3
# ::node	0.0	imperative	2-3
# ::node	0.1	this	4-5
# ::node	0.2	you	0-1
# ::root	0	look-01
# ::edge	look-01	ARG0	you	0	0.2
# ::edge	look-01	ARG1	this	0	0.1
# ::edge	look-01	mode	imperative	0	0.0
(MRPNode-0 / look-01 :mode imperative :ARG1 (MRPNode-1 / this) :ARG0 (MRPNode-2 / you))

# ::id 685
# ::snt This is not a good idea.
# ::tok This is not a good idea .
# ::alignments 0-1|0.1 2-3|0.0.0 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.715810 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	idea	5-6
# ::node	0.0	good-02	4-5
# ::node	0.0.0	-	2-3
# ::node	0.1	this	0-1
# ::root	0	idea
# ::edge	good-02	polarity	-	0.0	0.0.0
# ::edge	idea	ARG1-of	good-02	0	0.0
# ::edge	idea	domain	this	0	0.1
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / good-02 :polarity -) :domain (MRPNode-2 / this))

# ::id 686
# ::snt I was in a similar situation.
# ::tok I was in a similar situation .
# ::alignments 0-1|0.0 2-3|0 4-5|0.1.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.717964 ::parser eager_oracle ::smatch 0.823529411764706 ::n_actions 21
# ::node	0	be-located-at-91	2-3
# ::node	0.0	i	0-1
# ::node	0.1	situation	5-6
# ::node	0.1.0	resemble-01	4-5
# ::root	0	be-located-at-91
# ::edge	be-located-at-91	ARG1	i	0	0.0
# ::edge	be-located-at-91	ARG2	situation	0	0.1
# ::edge	situation	ARG1-of	resemble-01	0.1	0.1.0
(MRPNode-0 / be-located-at-91 :ARG1 (MRPNode-1 / i) :ARG2 (MRPNode-2 / situation :ARG1-of (MRPNode-3 / resemble-01)))

# ::id 687
# ::snt I've had this same problem.
# ::tok I 've had this same problem .
# ::alignments 0-1|0.1 2-3|0 3-4|0.0.0 4-5|0.0.1 5-6|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.722424 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	have-03	2-3
# ::node	0.0	problem	5-6
# ::node	0.0.0	this	3-4
# ::node	0.0.1	same-01	4-5
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
# ::edge	problem	ARG1-of	same-01	0.0	0.0.1
# ::edge	problem	mod	this	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem :mod (MRPNode-2 / this) :ARG1-of (MRPNode-3 / same-01)) :ARG0 (MRPNode-4 / i))

# ::id 688
# ::snt You answered your own question.
# ::tok You answered your own question .
# ::alignments 0-1|0.0.0 1-2|0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.727830 ::parser eager_oracle ::smatch 1.0 ::n_actions 18
# ::node	0	answer-01	4-5
# ::node	0.0	question-01	1-2
# ::node	0.0.0	you	0-1
# ::root	0	answer-01
# ::edge	answer-01	ARG0	you	0	0.0.0
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	question-01	ARG0	you	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG0 MRPNode-2)

# ::id 689
# ::snt I don't see why there should be any problem with this whatsoever.
# ::tok I do n't see why there should be any problem with this whatsoever .
# ::alignments 0-1|0.1+0.1.0+0.2 2-3|0.0 3-4|0 6-7|0.1.0.0 9-10|0.1.0.0.0 11-12|0.1.0.0.0.0 12-13|0.1.0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.739379 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	see-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	thing	0-1
# ::node	0.1.0	cause-01	0-1
# ::node	0.1.0.0	recommend-01	6-7
# ::node	0.1.0.0.0	problem	9-10
# ::node	0.1.0.0.0.0	this	11-12
# ::node	0.1.0.0.0.1	whatsoever	12-13
# ::node	0.2	i	0-1
# ::root	0	see-01
# ::edge	cause-01	ARG1	recommend-01	0.1.0	0.1.0.0
# ::edge	problem	degree	whatsoever	0.1.0.0.0	0.1.0.0.0.1
# ::edge	problem	mod	this	0.1.0.0.0	0.1.0.0.0.0
# ::edge	recommend-01	ARG1	problem	0.1.0.0	0.1.0.0.0
# ::edge	see-01	ARG0	i	0	0.2
# ::edge	see-01	ARG1	thing	0	0.1
# ::edge	see-01	polarity	-	0	0.0
# ::edge	thing	ARG0-of	cause-01	0.1	0.1.0
(MRPNode-0 / see-01 :polarity - :ARG1 (MRPNode-1 / thing :ARG0-of (MRPNode-2 / cause-01 :ARG1 (MRPNode-3 / recommend-01 :ARG1 (MRPNode-4 / problem :mod (MRPNode-5 / this) :degree (MRPNode-6 / whatsoever))))) :ARG0 (MRPNode-7 / i))

# ::id 690
# ::snt It makes absolutely NO difference.
# ::tok It makes absolutely NO difference .
# ::alignments 0-1|0.2 1-2|0 2-3|0.1.0 3-4|0.0 4-5|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.742685 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	make-02	1-2
# ::node	0.0	-	3-4
# ::node	0.1	differ-02	4-5
# ::node	0.1.0	absolute	2-3
# ::node	0.2	it	0-1
# ::root	0	make-02
# ::edge	differ-02	degree	absolute	0.1	0.1.0
# ::edge	make-02	ARG0	it	0	0.2
# ::edge	make-02	ARG1	differ-02	0	0.1
# ::edge	make-02	polarity	-	0	0.0
(MRPNode-0 / make-02 :polarity - :ARG1 (MRPNode-1 / differ-02 :degree (MRPNode-2 / absolute)) :ARG0 (MRPNode-3 / it))

# ::id 691
# ::snt I think it's fine to ask this question.
# ::tok I think it 's fine to ask this question .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0 6-7|0.0.0 7-8|0.0.0.0.0 8-9|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.748162 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	think-01	1-2
# ::node	0.0	fine-04	4-5
# ::node	0.0.0	ask-01	6-7
# ::node	0.0.0.0	question-01	8-9
# ::node	0.0.0.0.0	this	7-8
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	ask-01	ARG1	question-01	0.0.0	0.0.0.0
# ::edge	fine-04	ARG1	ask-01	0.0	0.0.0
# ::edge	question-01	mod	this	0.0.0.0	0.0.0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	fine-04	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / fine-04 :ARG1 (MRPNode-2 / ask-01 :ARG1 (MRPNode-3 / question-01 :mod (MRPNode-4 / this)))) :ARG0 (MRPNode-5 / i))

# ::id 692
# ::snt There's not a lot you can do about that.
# ::tok There 's not a lot you can do about that .
# ::alignments 2-3|0.0.0.0 4-5|0.0.0 5-6|0.0.1 6-7|0 7-8|0.0 9-10|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:52.751753 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	possible-01	6-7
# ::node	0.0	do-02	7-8
# ::node	0.0.0	lot	4-5
# ::node	0.0.0.0	-	2-3
# ::node	0.0.1	you	5-6
# ::node	0.0.2	that	9-10
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	lot	0.0	0.0.0
# ::edge	do-02	ARG2	that	0.0	0.0.2
# ::edge	lot	polarity	-	0.0.0	0.0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / lot :polarity -) :ARG0 (MRPNode-3 / you) :ARG2 (MRPNode-4 / that)))

# ::id 693
# ::snt You answered your own question.
# ::tok You answered your own question .
# ::alignments 0-1|0.0.0 1-2|0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.756920 ::parser eager_oracle ::smatch 1.0 ::n_actions 18
# ::node	0	answer-01	4-5
# ::node	0.0	question-01	1-2
# ::node	0.0.0	you	0-1
# ::root	0	answer-01
# ::edge	answer-01	ARG0	you	0	0.0.0
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	question-01	ARG0	you	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG0 MRPNode-2)

# ::id 694
# ::snt Can you do this?
# ::tok Can you do this ?
# ::alignments 0-1|0 1-2|0.0.1 2-3|0.0 3-4|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.759336 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 19
# ::node	0	possible-01	0-1
# ::node	0.0	do-02	2-3
# ::node	0.0.0	this	3-4
# ::node	0.0.1	you	1-2
# ::node	0.1	amr-unknown	
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	this	0.0	0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	possible-01	ARG1-of	amr-unknown	0	0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / this) :ARG0 (MRPNode-3 / you)) :ARG1-of (MRPNode-4 / amr-unknown))

# ::id 695
# ::snt How do you do that?
# ::tok How do you do that ?
# ::alignments 0-1|0.2 1-2|0 2-3|0.1 4-5|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.761721 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	do-02	1-2
# ::node	0.0	that	4-5
# ::node	0.1	you	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	do-02
# ::edge	do-02	ARG0	you	0	0.1
# ::edge	do-02	ARG1	that	0	0.0
# ::edge	do-02	manner	amr-unknown	0	0.2
(MRPNode-0 / do-02 :ARG1 (MRPNode-1 / that) :ARG0 (MRPNode-2 / you) :manner (MRPNode-3 / amr-unknown))

# ::id 696
# ::snt It's also a matter of taste.
# ::tok It 's also a matter of taste .
# ::alignments 0-1|0.1 2-3|0.0 4-5|0 6-7|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:52.764715 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	matter	4-5
# ::node	0.0	also	2-3
# ::node	0.1	it	0-1
# ::node	0.2	taste	6-7
# ::root	0	matter
# ::edge	matter	domain	it	0	0.1
# ::edge	matter	mod	also	0	0.0
# ::edge	matter	topic	taste	0	0.2
(MRPNode-0 / matter :mod (MRPNode-1 / also) :domain (MRPNode-2 / it) :topic (MRPNode-3 / taste))

# ::id 697
# ::snt I don't see why there should be any problem with this whatsoever.
# ::tok I do n't see why there should be any problem with this whatsoever .
# ::alignments 0-1|0.1+0.1.0+0.2 2-3|0.0 3-4|0 6-7|0.1.0.0 9-10|0.1.0.0.0 11-12|0.1.0.0.0.0 12-13|0.1.0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.776167 ::parser eager_oracle ::smatch 1.0 ::n_actions 47
# ::node	0	see-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	thing	0-1
# ::node	0.1.0	cause-01	0-1
# ::node	0.1.0.0	recommend-01	6-7
# ::node	0.1.0.0.0	problem	9-10
# ::node	0.1.0.0.0.0	this	11-12
# ::node	0.1.0.0.0.1	whatsoever	12-13
# ::node	0.2	i	0-1
# ::root	0	see-01
# ::edge	cause-01	ARG1	recommend-01	0.1.0	0.1.0.0
# ::edge	problem	degree	whatsoever	0.1.0.0.0	0.1.0.0.0.1
# ::edge	problem	mod	this	0.1.0.0.0	0.1.0.0.0.0
# ::edge	recommend-01	ARG1	problem	0.1.0.0	0.1.0.0.0
# ::edge	see-01	ARG0	i	0	0.2
# ::edge	see-01	ARG1	thing	0	0.1
# ::edge	see-01	polarity	-	0	0.0
# ::edge	thing	ARG0-of	cause-01	0.1	0.1.0
(MRPNode-0 / see-01 :polarity - :ARG1 (MRPNode-1 / thing :ARG0-of (MRPNode-2 / cause-01 :ARG1 (MRPNode-3 / recommend-01 :ARG1 (MRPNode-4 / problem :mod (MRPNode-5 / this) :degree (MRPNode-6 / whatsoever))))) :ARG0 (MRPNode-7 / i))

# ::id 698
# ::snt There's not a lot you can do about that.
# ::tok There 's not a lot you can do about that .
# ::alignments 2-3|0.0.0.0 4-5|0.0.0 5-6|0.0.1 6-7|0 7-8|0.0 9-10|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:52.779864 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	possible-01	6-7
# ::node	0.0	do-02	7-8
# ::node	0.0.0	lot	4-5
# ::node	0.0.0.0	-	2-3
# ::node	0.0.1	you	5-6
# ::node	0.0.2	that	9-10
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	lot	0.0	0.0.0
# ::edge	do-02	ARG2	that	0.0	0.0.2
# ::edge	lot	polarity	-	0.0.0	0.0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / lot :polarity -) :ARG0 (MRPNode-3 / you) :ARG2 (MRPNode-4 / that)))

# ::id 699
# ::snt You got it right.
# ::tok You got it right .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.0 3-4|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.784153 ::parser eager_oracle ::smatch 1.0 ::n_actions 19
# ::node	0	get-04	1-2
# ::node	0.0	right-06	3-4
# ::node	0.0.0	it	2-3
# ::node	0.1	you	0-1
# ::root	0	get-04
# ::edge	get-04	ARG0	you	0	0.1
# ::edge	get-04	ARG1	right-06	0	0.0
# ::edge	right-06	ARG2	it	0.0	0.0.0
(MRPNode-0 / get-04 :ARG1 (MRPNode-1 / right-06 :ARG2 (MRPNode-2 / it)) :ARG0 (MRPNode-3 / you))

# ::id 700
# ::snt There are two things to consider:
# ::tok There are two things to consider :
# ::alignments 2-3|0.0 3-4|0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.786748 ::parser eager_oracle ::smatch 1.0 ::n_actions 18
# ::node	0	thing	3-4
# ::node	0.0	2	2-3
# ::node	0.1	consider-02	5-6
# ::root	0	thing
# ::edge	thing	ARG1-of	consider-02	0	0.1
# ::edge	thing	quant	2	0	0.0
(MRPNode-0 / thing :quant 2 :ARG1-of (MRPNode-1 / consider-02))

# ::id 701
# ::snt Can you do this?
# ::tok Can you do this ?
# ::alignments 0-1|0 1-2|0.0.1 2-3|0.0 3-4|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.789205 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 19
# ::node	0	possible-01	0-1
# ::node	0.0	do-02	2-3
# ::node	0.0.0	this	3-4
# ::node	0.0.1	you	1-2
# ::node	0.1	amr-unknown	
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	this	0.0	0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	possible-01	ARG1-of	amr-unknown	0	0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / this) :ARG0 (MRPNode-3 / you)) :ARG1-of (MRPNode-4 / amr-unknown))

# ::id 702
# ::snt There are a few things you can do:
# ::tok There are a few things you can do :
# ::alignments 3-4|0.0.0.0 4-5|0.0.0 5-6|0.0.1 6-7|0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.793190 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	possible-01	6-7
# ::node	0.0	do-02	7-8
# ::node	0.0.0	thing	4-5
# ::node	0.0.0.0	few	3-4
# ::node	0.0.1	you	5-6
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	thing	0.0	0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	thing	quant	few	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / thing :quant (MRPNode-3 / few)) :ARG0 (MRPNode-4 / you)))

# ::id 703
# ::snt You got it right.
# ::tok You got it right .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.0 3-4|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.797625 ::parser eager_oracle ::smatch 1.0 ::n_actions 19
# ::node	0	get-04	1-2
# ::node	0.0	right-06	3-4
# ::node	0.0.0	it	2-3
# ::node	0.1	you	0-1
# ::root	0	get-04
# ::edge	get-04	ARG0	you	0	0.1
# ::edge	get-04	ARG1	right-06	0	0.0
# ::edge	right-06	ARG2	it	0.0	0.0.0
(MRPNode-0 / get-04 :ARG1 (MRPNode-1 / right-06 :ARG2 (MRPNode-2 / it)) :ARG0 (MRPNode-3 / you))

# ::id 704
# ::snt You answered your own question.
# ::tok You answered your own question .
# ::alignments 0-1|0.0.0 1-2|0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.802534 ::parser eager_oracle ::smatch 1.0 ::n_actions 18
# ::node	0	answer-01	4-5
# ::node	0.0	question-01	1-2
# ::node	0.0.0	you	0-1
# ::root	0	answer-01
# ::edge	answer-01	ARG0	you	0	0.0.0
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	question-01	ARG0	you	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG0 MRPNode-2)

# ::id 705
# ::snt You are on the right path.
# ::tok You are on the right path .
# ::alignments 0-1|0.0 2-3|0 4-5|0.1.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.805403 ::parser eager_oracle ::smatch 0.823529411764706 ::n_actions 21
# ::node	0	be-located-at-91	2-3
# ::node	0.0	you	0-1
# ::node	0.1	path	5-6
# ::node	0.1.0	right-06	4-5
# ::root	0	be-located-at-91
# ::edge	be-located-at-91	ARG1	you	0	0.0
# ::edge	be-located-at-91	ARG2	path	0	0.1
# ::edge	path	ARG1-of	right-06	0.1	0.1.0
(MRPNode-0 / be-located-at-91 :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / path :ARG1-of (MRPNode-3 / right-06)))

# ::id 706
# ::snt What are your goals?
# ::tok What are your goals ?
# ::alignments 0-1|0.0 2-3|0.1 3-4|0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.806898 ::parser eager_oracle ::smatch 1.0 ::n_actions 16
# ::node	0	goal	3-4
# ::node	0.0	amr-unknown	0-1
# ::node	0.1	you	2-3
# ::root	0	goal
# ::edge	goal	domain	amr-unknown	0	0.0
# ::edge	goal	poss	you	0	0.1
(MRPNode-0 / goal :domain (MRPNode-1 / amr-unknown) :poss (MRPNode-2 / you))

# ::id 707
# ::snt A few more point to think about:
# ::tok A few more point to think about :
# ::alignments 1-2|0.2 2-3|0.0 3-4|0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.810192 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	point-03	3-4
# ::node	0.0	more	2-3
# ::node	0.1	think-01	5-6
# ::node	0.2	few	1-2
# ::root	0	point-03
# ::edge	point-03	quant	few	0	0.2
# ::edge	point-03	quant	more	0	0.0
# ::edge	point-03	quant	think-01	0	0.1
(MRPNode-0 / point-03 :quant (MRPNode-1 / more) :quant (MRPNode-2 / think-01) :quant (MRPNode-3 / few))

# ::id 708
# ::snt I'm afraid we are out of luck in this one.
# ::tok I 'm afraid we are out of luck in this one .
# ::alignments 0-1|0.1 2-3|0 3-4|0.0.0 5-6|0.0 7-8|0.0.1 9-10|0.0.2.0 10-11|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:52.815391 ::parser eager_oracle ::smatch 0.896551724137931 ::n_actions 35
# ::node	0	fear-01	2-3
# ::node	0.0	out-05	5-6
# ::node	0.0.0	we	3-4
# ::node	0.0.1	luck	7-8
# ::node	0.0.2	one	10-11
# ::node	0.0.2.0	this	9-10
# ::node	0.1	i	0-1
# ::root	0	fear-01
# ::edge	fear-01	ARG0	i	0	0.1
# ::edge	fear-01	ARG1	out-05	0	0.0
# ::edge	one	mod	this	0.0.2	0.0.2.0
# ::edge	out-05	ARG1	we	0.0	0.0.0
# ::edge	out-05	ARG2	luck	0.0	0.0.1
# ::edge	out-05	ARG2	one	0.0	0.0.2
(MRPNode-0 / fear-01 :ARG1 (MRPNode-1 / out-05 :ARG1 (MRPNode-2 / we) :ARG2 (MRPNode-3 / luck) :ARG2 (MRPNode-4 / one :mod (MRPNode-5 / this))) :ARG0 (MRPNode-6 / i))

# ::id 709
# ::snt It's also a matter of taste.
# ::tok It 's also a matter of taste .
# ::alignments 0-1|0.1 2-3|0.0 4-5|0 6-7|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:52.818423 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	matter	4-5
# ::node	0.0	also	2-3
# ::node	0.1	it	0-1
# ::node	0.2	taste	6-7
# ::root	0	matter
# ::edge	matter	domain	it	0	0.1
# ::edge	matter	mod	also	0	0.0
# ::edge	matter	topic	taste	0	0.2
(MRPNode-0 / matter :mod (MRPNode-1 / also) :domain (MRPNode-2 / it) :topic (MRPNode-3 / taste))

# ::id 710
# ::snt I had the same problem as you.
# ::tok I had the same problem as you .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0 5-6|0.0.0 6-7|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.822048 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	have-03	1-2
# ::node	0.0	problem	4-5
# ::node	0.0.0	same-01	5-6
# ::node	0.0.0.0	you	6-7
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
# ::edge	problem	ARG1-of	same-01	0.0	0.0.0
# ::edge	same-01	ARG2	you	0.0.0	0.0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem :ARG1-of (MRPNode-2 / same-01 :ARG2 (MRPNode-3 / you))) :ARG0 (MRPNode-4 / i))

# ::id 711
# ::snt I'm thinking it's a bad idea.
# ::tok I 'm thinking it 's a bad idea .
# ::alignments 0-1|0.1 2-3|0 3-4|0.0.1 6-7|0.0.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.833620 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	think-01	2-3
# ::node	0.0	idea	7-8
# ::node	0.0.0	bad-07	6-7
# ::node	0.0.1	it	3-4
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	idea	ARG1-of	bad-07	0.0	0.0.0
# ::edge	idea	domain	it	0.0	0.0.1
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	idea	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / idea :ARG1-of (MRPNode-2 / bad-07) :domain (MRPNode-3 / it)) :ARG0 (MRPNode-4 / i))

# ::id 712
# ::snt It's not a good idea.
# ::tok It 's not a good idea .
# ::alignments 0-1|0.1 2-3|0.0.0 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.835585 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	idea	5-6
# ::node	0.0	good-02	4-5
# ::node	0.0.0	-	2-3
# ::node	0.1	it	0-1
# ::root	0	idea
# ::edge	good-02	polarity	-	0.0	0.0.0
# ::edge	idea	ARG1-of	good-02	0	0.0
# ::edge	idea	domain	it	0	0.1
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / good-02 :polarity -) :domain (MRPNode-2 / it))

# ::id 713
# ::snt I had the same problem as you.
# ::tok I had the same problem as you .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0 5-6|0.0.0 6-7|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.839409 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	have-03	1-2
# ::node	0.0	problem	4-5
# ::node	0.0.0	same-01	5-6
# ::node	0.0.0.0	you	6-7
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
# ::edge	problem	ARG1-of	same-01	0.0	0.0.0
# ::edge	same-01	ARG2	you	0.0.0	0.0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem :ARG1-of (MRPNode-2 / same-01 :ARG2 (MRPNode-3 / you))) :ARG0 (MRPNode-4 / i))

# ::id 714
# ::snt There are two things to consider:
# ::tok There are two things to consider :
# ::alignments 2-3|0.0 3-4|0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.841896 ::parser eager_oracle ::smatch 1.0 ::n_actions 18
# ::node	0	thing	3-4
# ::node	0.0	2	2-3
# ::node	0.1	consider-02	5-6
# ::root	0	thing
# ::edge	thing	ARG1-of	consider-02	0	0.1
# ::edge	thing	quant	2	0	0.0
(MRPNode-0 / thing :quant 2 :ARG1-of (MRPNode-1 / consider-02))

# ::id 715
# ::snt It's pretty much up to you.
# ::tok It 's pretty much up to you .
# ::alignments 3-4|0.1 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.844830 ::parser eager_oracle ::smatch 0.2 ::n_actions 15
# ::node	0	depend-01	
# ::node	0.0	you	6-7
# ::node	0.1	it	3-4
# ::node	0.2	pretty-much	2-3
# ::root	0	depend-01
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	you	0	0.0
# ::edge	depend-01	degree	pretty-much	0	0.2
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / you) :ARG0 (MRPNode-2 / it) :degree (MRPNode-3 / pretty-much))

# ::id 716
# ::snt There are three options:
# ::tok There are three options :
# ::alignments  ::annotator aligner3.py ::date 2021-03-11 23:00:52.845597 ::parser eager_oracle ::smatch 0.0 ::n_actions 7
# ::node	0	null	
# ::root	0	null
(n / null)

# ::id 717
# ::snt So think it in this way.
# ::tok So think it in this way .
# ::alignments 1-2|0+0.0+0.2 2-3|0.1 4-5|0.3.0 5-6|0.3 ::annotator aligner3.py ::date 2021-03-11 23:00:52.863511 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	think-01	1-2
# ::node	0.0	imperative	1-2
# ::node	0.1	it	2-3
# ::node	0.2	you	1-2
# ::node	0.3	way	5-6
# ::node	0.3.0	this	4-5
# ::root	0	think-01
# ::edge	think-01	ARG0	you	0	0.2
# ::edge	think-01	ARG1	it	0	0.1
# ::edge	think-01	manner	way	0	0.3
# ::edge	think-01	mode	imperative	0	0.0
# ::edge	way	mod	this	0.3	0.3.0
(MRPNode-0 / think-01 :mode imperative :ARG1 (MRPNode-1 / it) :ARG0 (MRPNode-2 / you) :manner (MRPNode-3 / way :mod (MRPNode-4 / this)))

# ::id 718
# ::snt Maybe this could work for you.
# ::tok Maybe this could work for you .
# ::alignments 0-1|0 1-2|0.0.0 3-4|0.0 5-6|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.866825 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	possible-01	0-1
# ::node	0.0	work-09	3-4
# ::node	0.0.0	this	1-2
# ::node	0.0.1	you	5-6
# ::root	0	possible-01
# ::edge	possible-01	ARG1	work-09	0	0.0
# ::edge	work-09	ARG1	this	0.0	0.0.0
# ::edge	work-09	ARG2	you	0.0	0.0.1
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / work-09 :ARG1 (MRPNode-2 / this) :ARG2 (MRPNode-3 / you)))

# ::id 719
# ::snt This is not a good idea.
# ::tok This is not a good idea .
# ::alignments 0-1|0.1 2-3|0.0.0 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.868765 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	idea	5-6
# ::node	0.0	good-02	4-5
# ::node	0.0.0	-	2-3
# ::node	0.1	this	0-1
# ::root	0	idea
# ::edge	good-02	polarity	-	0.0	0.0.0
# ::edge	idea	ARG1-of	good-02	0	0.0
# ::edge	idea	domain	this	0	0.1
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / good-02 :polarity -) :domain (MRPNode-2 / this))

# ::id 720
# ::snt I realized there is already an accepted answer but I figure I would add my 2 cents.
# ::tok I realized there is already an accepted answer but I figure I would add my 2 cents .
# ::alignments 0-1|0.0.0.1 1-2|0.1 4-5|0.1.0.1 6-7|0.1.0 7-8|0.1.0.0 8-9|0 10-11|0.0 13-14|0.0.0 15-16|0.0.0.0.0 16-17|0.0.0.0+0.0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.908892 ::parser eager_oracle ::smatch 1.0 ::n_actions 58
# ::node	0	contrast-01	8-9
# ::node	0.0	figure-01	10-11
# ::node	0.0.0	add-02	13-14
# ::node	0.0.0.0	monetary-quantity	16-17
# ::node	0.0.0.0.0	2	15-16
# ::node	0.0.0.0.1	cent	16-17
# ::node	0.0.0.1	i	0-1
# ::node	0.1	realize-01	1-2
# ::node	0.1.0	accept-01	6-7
# ::node	0.1.0.0	answer-01	7-8
# ::node	0.1.0.1	already	4-5
# ::root	0	contrast-01
# ::edge	accept-01	ARG1	answer-01	0.1.0	0.1.0.0
# ::edge	accept-01	time	already	0.1.0	0.1.0.1
# ::edge	add-02	ARG0	i	0.0.0	0.0.0.1
# ::edge	add-02	ARG1	monetary-quantity	0.0.0	0.0.0.0
# ::edge	contrast-01	ARG1	figure-01	0	0.0
# ::edge	contrast-01	ARG1	realize-01	0	0.1
# ::edge	figure-01	ARG0	i	0.0	0.0.0.1
# ::edge	figure-01	ARG1	add-02	0.0	0.0.0
# ::edge	monetary-quantity	quant	2	0.0.0.0	0.0.0.0.0
# ::edge	monetary-quantity	unit	cent	0.0.0.0	0.0.0.0.1
# ::edge	realize-01	ARG0	i	0.1	0.0.0.1
# ::edge	realize-01	ARG1	accept-01	0.1	0.1.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / figure-01 :ARG1 (MRPNode-2 / add-02 :ARG1 (MRPNode-3 / monetary-quantity :quant 2 :unit (MRPNode-4 / cent)) :ARG0 (MRPNode-5 / i)) :ARG0 MRPNode-5) :ARG1 (MRPNode-6 / realize-01 :ARG0 MRPNode-5 :ARG1 (MRPNode-7 / accept-01 :ARG1 (MRPNode-8 / answer-01) :time (MRPNode-9 / already))))

# ::id 721
# ::snt You may have to experiment and find what you like.
# ::tok You may have to experiment and find what you like .
# ::alignments 0-1|0.0.0.0.0 1-2|0 2-3|0.0 4-5|0.0.0.0 5-6|0.0.0 6-7|0.0.0.1 9-10|0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.920195 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 41
# ::node	0	possible-01	1-2
# ::node	0.0	obligate-01	2-3
# ::node	0.0.0	and	5-6
# ::node	0.0.0.0	experiment-01	4-5
# ::node	0.0.0.0.0	you	0-1
# ::node	0.0.0.0.0.0	like-02	9-10
# ::node	0.0.0.0.0.0.0	thing	
# ::node	0.0.0.1	find-01	6-7
# ::root	0	possible-01
# ::edge	and	op1	experiment-01	0.0.0	0.0.0.0
# ::edge	and	op2	find-01	0.0.0	0.0.0.1
# ::edge	experiment-01	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	find-01	ARG0	you	0.0.0.1	0.0.0.0.0
# ::edge	find-01	ARG1	thing	0.0.0.1	0.0.0.0.0.0.0
# ::edge	like-02	ARG1	thing	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	obligate-01	ARG1	and	0.0	0.0.0
# ::edge	obligate-01	ARG1	you	0.0	0.0.0.0.0
# ::edge	possible-01	ARG1	obligate-01	0	0.0
# ::edge	you	ARG0-of	like-02	0.0.0.0.0	0.0.0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / obligate-01 :ARG1 (MRPNode-2 / and :op1 (MRPNode-3 / experiment-01 :ARG0 (MRPNode-6 / you :ARG0-of (MRPNode-7 / like-02 :ARG1 (MRPNode-5 / thing)))) :op2 (MRPNode-4 / find-01 :ARG1 MRPNode-5 :ARG0 MRPNode-6)) :ARG1 MRPNode-6))

# ::id 722
# ::snt I agree with the other comments.
# ::tok I agree with the other comments .
# ::alignments 0-1|0.0 1-2|0 4-5|0.1.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.923364 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	agree-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	comment-01	5-6
# ::node	0.1.0	other	4-5
# ::root	0	agree-01
# ::edge	agree-01	ARG1	comment-01	0	0.1
# ::edge	agree-01	ARG1	i	0	0.0
# ::edge	comment-01	mod	other	0.1	0.1.0
(MRPNode-0 / agree-01 :ARG1 (MRPNode-1 / i) :ARG1 (MRPNode-2 / comment-01 :mod (MRPNode-3 / other)))

# ::id 723
# ::snt It rather depends on which country you're in.
# ::tok It rather depends on which country you 're in .
# ::alignments 0-1|0.1 1-2|0.2 2-3|0 5-6|0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.928412 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	depend-01	2-3
# ::node	0.0	country	5-6
# ::node	0.0.0	you	6-7
# ::node	0.1	it	0-1
# ::node	0.2	rather	1-2
# ::root	0	depend-01
# ::edge	country	ARG2-of	you	0.0	0.0.0
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	country	0	0.0
# ::edge	depend-01	mod	rather	0	0.2
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / country :ARG2-of (MRPNode-2 / you)) :ARG0 (MRPNode-3 / it) :mod (MRPNode-4 / rather))

# ::id 724
# ::snt This is a terrible idea.
# ::tok This is a terrible idea .
# ::alignments 0-1|0.1 3-4|0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.930065 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	idea	4-5
# ::node	0.0	terrible-01	3-4
# ::node	0.1	this	0-1
# ::root	0	idea
# ::edge	idea	ARG1-of	terrible-01	0	0.0
# ::edge	idea	domain	this	0	0.1
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / terrible-01) :domain (MRPNode-2 / this))

# ::id 725
# ::snt You have to decide what you want to get out of this.
# ::tok You have to decide what you want to get out of this .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1 6-7|0.0.0 8-9|0.0.0.0 11-12|0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.982755 ::parser eager_oracle ::smatch 0.9032258064516129 ::n_actions 38
# ::node	0	obligate-01	1-2
# ::node	0.0	you	0-1
# ::node	0.0.0	want-01	6-7
# ::node	0.0.0.0	get-05	8-9
# ::node	0.0.0.0.0	this	11-12
# ::node	0.0.0.0.1	thing	
# ::node	0.1	decide-01	3-4
# ::root	0	obligate-01
# ::edge	decide-01	ARG0	you	0.1	0.0
# ::edge	decide-01	ARG1	thing	0.1	0.0.0.0.1
# ::edge	get-05	ARG1	thing	0.0.0.0	0.0.0.0.1
# ::edge	get-05	ARG2	this	0.0.0.0	0.0.0.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	decide-01	0	0.1
# ::edge	want-01	ARG1	get-05	0.0.0	0.0.0.0
# ::edge	you	ARG0-of	get-05	0.0	0.0.0.0
# ::edge	you	ARG0-of	want-01	0.0	0.0.0
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / want-01 :ARG1 (MRPNode-3 / get-05 :ARG2 (MRPNode-4 / this) :ARG1 (MRPNode-6 / thing))) :ARG0-of MRPNode-3) :ARG2 (MRPNode-5 / decide-01 :ARG0 MRPNode-1 :ARG1 MRPNode-6))

# ::id 726
# ::snt I have few suggestions for you:
# ::tok I have few suggestions for you :
# ::alignments 0-1|0.0+0.1 2-3|0.0.0 3-4|0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:52.985402 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	suggest-01	3-4
# ::node	0.0	thing	0-1
# ::node	0.0.0	few	2-3
# ::node	0.1	i	0-1
# ::node	0.2	you	5-6
# ::root	0	suggest-01
# ::edge	suggest-01	ARG0	i	0	0.1
# ::edge	suggest-01	ARG1	thing	0	0.0
# ::edge	suggest-01	ARG2	you	0	0.2
# ::edge	thing	quant	few	0.0	0.0.0
(MRPNode-0 / suggest-01 :ARG1 (MRPNode-1 / thing :quant (MRPNode-2 / few)) :ARG0 (MRPNode-3 / i) :ARG2 (MRPNode-4 / you))

# ::id 727
# ::snt As soon as possible.
# ::tok As soon as possible .
# ::alignments 1-2|0.1 3-4|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:52.988202 ::parser eager_oracle ::smatch 0.2 ::n_actions 12
# ::node	0	have-degree-91	
# ::node	0.0	possible-01	3-4
# ::node	0.1	soon	1-2
# ::node	0.2	equal	
# ::root	0	have-degree-91
# ::edge	have-degree-91	ARG2	possible-01	0	0.0
# ::edge	have-degree-91	ARG2	soon	0	0.1
# ::edge	have-degree-91	ARG3	equal	0	0.2
(MRPNode-0 / have-degree-91 :ARG2 (MRPNode-1 / possible-01) :ARG2 (MRPNode-2 / soon) :ARG3 (MRPNode-3 / equal))

# ::id 728
# ::snt To give this an answer:
# ::tok To give this an answer :
# ::alignments 1-2|0+0.0+0.2 2-3|0.1.0 4-5|0.1+0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:52.992726 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	give-01	1-2
# ::node	0.0	imperative	1-2
# ::node	0.1	thing	4-5
# ::node	0.1.0	this	2-3
# ::node	0.1.1	answer-01	4-5
# ::node	0.2	you	1-2
# ::root	0	give-01
# ::edge	give-01	ARG0	you	0	0.2
# ::edge	give-01	ARG1	thing	0	0.1
# ::edge	give-01	mode	imperative	0	0.0
# ::edge	thing	ARG2-of	answer-01	0.1	0.1.1
# ::edge	thing	ARG2-of	this	0.1	0.1.0
(MRPNode-0 / give-01 :mode imperative :ARG1 (MRPNode-1 / thing :ARG2-of (MRPNode-2 / this) :ARG2-of (MRPNode-3 / answer-01)) :ARG0 (MRPNode-4 / you))

# ::id 729
# ::snt Unfortunately the answer to your question is we simply do not know.
# ::tok Unfortunately the answer to your question is we simply do not know .
# ::alignments 0-1|0+0.0 2-3|0.1.0 4-5|0.1.0.0 5-6|0.1 7-8|0.1.1 8-9|0.1.2.1 10-11|0.1.2.0 11-12|0.1.2 ::annotator aligner3.py ::date 2021-03-11 23:00:53.080953 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	fortunate-01	0-1
# ::node	0.0	-	0-1
# ::node	0.1	answer-01	5-6
# ::node	0.1.0	question-01	2-3
# ::node	0.1.0.0	you	4-5
# ::node	0.1.1	we	7-8
# ::node	0.1.2	know-01	11-12
# ::node	0.1.2.0	-	10-11
# ::node	0.1.2.1	simple	8-9
# ::root	0	fortunate-01
# ::edge	answer-01	ARG1	question-01	0.1	0.1.0
# ::edge	answer-01	ARG2	know-01	0.1	0.1.2
# ::edge	answer-01	ARG2	we	0.1	0.1.1
# ::edge	fortunate-01	ARG2	answer-01	0	0.1
# ::edge	fortunate-01	polarity	-	0	0.0
# ::edge	know-01	ARG0	we	0.1.2	0.1.1
# ::edge	know-01	mod	simple	0.1.2	0.1.2.1
# ::edge	know-01	polarity	-	0.1.2	0.1.2.0
# ::edge	question-01	ARG0	you	0.1.0	0.1.0.0
(MRPNode-0 / fortunate-01 :polarity - :ARG2 (MRPNode-1 / answer-01 :ARG1 (MRPNode-2 / question-01 :ARG0 (MRPNode-3 / you)) :ARG2 (MRPNode-4 / we) :ARG2 (MRPNode-5 / know-01 :polarity - :ARG0 MRPNode-4 :mod (MRPNode-6 / simple))))

# ::id 730
# ::snt The rule - When in doubt throw it out!
# ::tok The rule - When in doubt throw it out !
# ::alignments 1-2|0 5-6|0.0.3 6-7|0.0+0.0.0+0.0.2 7-8|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:53.086439 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	rule-01	1-2
# ::node	0.0	throw-out-06	6-7
# ::node	0.0.0	imperative	6-7
# ::node	0.0.1	it	7-8
# ::node	0.0.2	you	6-7
# ::node	0.0.3	doubt-01	5-6
# ::root	0	rule-01
# ::edge	rule-01	ARG3	throw-out-06	0	0.0
# ::edge	throw-out-06	ARG0	you	0.0	0.0.2
# ::edge	throw-out-06	ARG1	it	0.0	0.0.1
# ::edge	throw-out-06	mode	imperative	0.0	0.0.0
# ::edge	throw-out-06	time	doubt-01	0.0	0.0.3
(MRPNode-0 / rule-01 :ARG3 (MRPNode-1 / throw-out-06 :mode imperative :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / you) :time (MRPNode-4 / doubt-01)))

# ::id 731
# ::snt This is not a good idea.
# ::tok This is not a good idea .
# ::alignments 0-1|0.1 2-3|0.0.0 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.088819 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	idea	5-6
# ::node	0.0	good-02	4-5
# ::node	0.0.0	-	2-3
# ::node	0.1	this	0-1
# ::root	0	idea
# ::edge	good-02	polarity	-	0.0	0.0.0
# ::edge	idea	ARG1-of	good-02	0	0.0
# ::edge	idea	domain	this	0	0.1
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / good-02 :polarity -) :domain (MRPNode-2 / this))

# ::id 732
# ::snt It probably depends on the cut of meat.
# ::tok It probably depends on the cut of meat .
# ::alignments 0-1|0.1 1-2|0.2 2-3|0 5-6|0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.093757 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	depend-01	2-3
# ::node	0.0	cut-02	5-6
# ::node	0.0.0	meat	7-8
# ::node	0.1	it	0-1
# ::node	0.2	probable	1-2
# ::root	0	depend-01
# ::edge	cut-02	ARG1	meat	0.0	0.0.0
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	cut-02	0	0.0
# ::edge	depend-01	mod	probable	0	0.2
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / cut-02 :ARG1 (MRPNode-2 / meat)) :ARG0 (MRPNode-3 / it) :mod (MRPNode-4 / probable))

# ::id 733
# ::snt Have you tried asking your employees?
# ::tok Have you tried asking your employees ?
# ::alignments 2-3|0 3-4|0.0 4-5|0.0.1 5-6|0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.099536 ::parser eager_oracle ::smatch 0.782608695652174 ::n_actions 22
# ::node	0	try-01	2-3
# ::node	0.0	ask-01	3-4
# ::node	0.0.0	person	
# ::node	0.0.1	you	4-5
# ::node	0.0.1.0	employ-01	5-6
# ::node	0.1	amr-unknown	
# ::root	0	try-01
# ::edge	ask-01	ARG0	you	0.0	0.0.1
# ::edge	ask-01	ARG2	person	0.0	0.0.0
# ::edge	employ-01	ARG1	person	0.0.1.0	0.0.0
# ::edge	try-01	ARG0	you	0	0.0.1
# ::edge	try-01	ARG1	ask-01	0	0.0
# ::edge	try-01	ARG1-of	amr-unknown	0	0.1
# ::edge	you	ARG1-of	employ-01	0.0.1	0.0.1.0
(MRPNode-0 / try-01 :ARG1 (MRPNode-1 / ask-01 :ARG2 (MRPNode-2 / person) :ARG0 (MRPNode-3 / you :ARG1-of (MRPNode-4 / employ-01 :ARG1 MRPNode-2))) :ARG0 MRPNode-3 :ARG1-of (MRPNode-5 / amr-unknown))

# ::id 734
# ::snt There are two things to consider:
# ::tok There are two things to consider :
# ::alignments 2-3|0.0 3-4|0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:53.101933 ::parser eager_oracle ::smatch 1.0 ::n_actions 18
# ::node	0	thing	3-4
# ::node	0.0	2	2-3
# ::node	0.1	consider-02	5-6
# ::root	0	thing
# ::edge	thing	ARG1-of	consider-02	0	0.1
# ::edge	thing	quant	2	0	0.0
(MRPNode-0 / thing :quant 2 :ARG1-of (MRPNode-1 / consider-02))

# ::id 735
# ::snt It depends on what you want to do next, and where you want to do it.
# ::tok It depends on what you want to do next , and where you want to do it .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0.0.0 5-6|0.0.1.0 7-8|0.0.0+0.0.0.0 8-9|0.0.0.0.1 10-11|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.235602 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 47
# ::node	0	depend-01	1-2
# ::node	0.0	and	10-11
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	do-02	7-8
# ::node	0.0.0.0.0	you	4-5
# ::node	0.0.0.0.1	next	8-9
# ::node	0.0.1	location	
# ::node	0.0.1.0	want-01	5-6
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	and	op1	thing	0.0	0.0.0
# ::edge	and	op2	location	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	do-02	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	do-02	time	next	0.0.0.0	0.0.0.0.1
# ::edge	location	location-of	want-01	0.0.1	0.0.1.0
# ::edge	thing	ARG1-of	do-02	0.0.0	0.0.0.0
# ::edge	want-01	ARG0	you	0.0.1.0	0.0.0.0.0
# ::edge	want-01	ARG1	do-02	0.0.1.0	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / do-02 :ARG0 (MRPNode-4 / you) :time (MRPNode-5 / next))) :op2 (MRPNode-6 / location :location-of (MRPNode-7 / want-01 :ARG1 MRPNode-3 :ARG0 MRPNode-4))) :ARG0 (MRPNode-8 / it))

# ::id 736
# ::snt I have the same thing.
# ::tok I have the same thing .
# ::alignments 0-1|0.1 1-2|0 3-4|0.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.240431 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	have-03	1-2
# ::node	0.0	thing	4-5
# ::node	0.0.0	same-01	3-4
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	thing	0	0.0
# ::edge	thing	ARG1-of	same-01	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / thing :ARG1-of (MRPNode-2 / same-01)) :ARG0 (MRPNode-3 / i))

# ::id 737
# ::snt "My answer to your question is ""Probably Not""."
# ::tok " My answer to your question is " " Probably Not " " . "
# ::alignments 1-2|0.1 2-3|0.0 4-5|0.0.0 5-6|0 9-10|0.2.1 10-11|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.248488 ::parser eager_oracle ::smatch 0.761904761904762 ::n_actions 33
# ::node	0	answer-01	5-6
# ::node	0.0	question-01	2-3
# ::node	0.0.0	you	4-5
# ::node	0.1	i	1-2
# ::node	0.2	have-polarity-91	
# ::node	0.2.0	-	10-11
# ::node	0.2.1	probable	9-10
# ::root	0	answer-01
# ::edge	answer-01	ARG0	i	0	0.1
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	answer-01	ARG2	have-polarity-91	0	0.2
# ::edge	have-polarity-91	arg2	-	0.2	0.2.0
# ::edge	have-polarity-91	mod	probable	0.2	0.2.1
# ::edge	question-01	ARG0	you	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG0 (MRPNode-3 / i) :ARG2 (MRPNode-4 / have-polarity-91 :arg2 - :mod (MRPNode-5 / probable)))

# ::id 738
# ::snt I don't think it makes any tremendous difference.
# ::tok I do n't think it makes any tremendous difference .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 4-5|0.1.1 5-6|0.1 7-8|0.1.0.0 8-9|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.291861 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	think-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	make-02	5-6
# ::node	0.1.0	differ-02	8-9
# ::node	0.1.0.0	tremendous	7-8
# ::node	0.1.1	it	4-5
# ::node	0.2	i	0-1
# ::root	0	think-01
# ::edge	differ-02	degree	tremendous	0.1.0	0.1.0.0
# ::edge	make-02	ARG0	it	0.1	0.1.1
# ::edge	make-02	ARG1	differ-02	0.1	0.1.0
# ::edge	think-01	ARG0	i	0	0.2
# ::edge	think-01	ARG1	make-02	0	0.1
# ::edge	think-01	polarity	-	0	0.0
(MRPNode-0 / think-01 :polarity - :ARG1 (MRPNode-1 / make-02 :ARG1 (MRPNode-2 / differ-02 :degree (MRPNode-3 / tremendous)) :ARG0 (MRPNode-4 / it)) :ARG0 (MRPNode-5 / i))

# ::id 739
# ::snt It's not a good idea.
# ::tok It 's not a good idea .
# ::alignments 0-1|0.1 2-3|0.0.0 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.293953 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	idea	5-6
# ::node	0.0	good-02	4-5
# ::node	0.0.0	-	2-3
# ::node	0.1	it	0-1
# ::root	0	idea
# ::edge	good-02	polarity	-	0.0	0.0.0
# ::edge	idea	ARG1-of	good-02	0	0.0
# ::edge	idea	domain	it	0	0.1
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / good-02 :polarity -) :domain (MRPNode-2 / it))

# ::id 740
# ::snt You are on the right path.
# ::tok You are on the right path .
# ::alignments 0-1|0.0 2-3|0 4-5|0.1.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:53.296884 ::parser eager_oracle ::smatch 0.823529411764706 ::n_actions 21
# ::node	0	be-located-at-91	2-3
# ::node	0.0	you	0-1
# ::node	0.1	path	5-6
# ::node	0.1.0	right-06	4-5
# ::root	0	be-located-at-91
# ::edge	be-located-at-91	ARG1	you	0	0.0
# ::edge	be-located-at-91	ARG2	path	0	0.1
# ::edge	path	ARG1-of	right-06	0.1	0.1.0
(MRPNode-0 / be-located-at-91 :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / path :ARG1-of (MRPNode-3 / right-06)))

# ::id 741
# ::snt How should I proceed about this?
# ::tok How should I proceed about this ?
# ::alignments 0-1|0.0.2 1-2|0 2-3|0.0.1 3-4|0.0 5-6|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.299904 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	recommend-01	1-2
# ::node	0.0	proceed-01	3-4
# ::node	0.0.0	this	5-6
# ::node	0.0.1	i	2-3
# ::node	0.0.2	amr-unknown	0-1
# ::root	0	recommend-01
# ::edge	proceed-01	ARG0	i	0.0	0.0.1
# ::edge	proceed-01	ARG1	this	0.0	0.0.0
# ::edge	proceed-01	manner	amr-unknown	0.0	0.0.2
# ::edge	recommend-01	ARG1	proceed-01	0	0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / proceed-01 :ARG1 (MRPNode-2 / this) :ARG0 (MRPNode-3 / i) :manner (MRPNode-4 / amr-unknown)))

# ::id 742
# ::snt Does this page answer your question?
# ::tok Does this page answer your question ?
# ::alignments 1-2|0.1.0 2-3|0.1 3-4|0 4-5|0.0.0 5-6|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.307120 ::parser eager_oracle ::smatch 0.9090909090909091 ::n_actions 24
# ::node	0	answer-01	3-4
# ::node	0.0	question-01	5-6
# ::node	0.0.0	you	4-5
# ::node	0.1	page	2-3
# ::node	0.1.0	this	1-2
# ::node	0.2	amr-unknown	
# ::root	0	answer-01
# ::edge	answer-01	ARG0	page	0	0.1
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	answer-01	ARG2	amr-unknown	0	0.2
# ::edge	page	mod	this	0.1	0.1.0
# ::edge	question-01	ARG0	you	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG0 (MRPNode-3 / page :mod (MRPNode-4 / this)) :ARG2 (MRPNode-5 / amr-unknown))

# ::id 743
# ::snt I'm going to be very direct here.
# ::tok I 'm going to be very direct here .
# ::alignments 0-1|0.0 5-6|0.2 6-7|0 7-8|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:53.309721 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	direct-01	6-7
# ::node	0.0	i	0-1
# ::node	0.1	here	7-8
# ::node	0.2	very	5-6
# ::root	0	direct-01
# ::edge	direct-01	ARG1	i	0	0.0
# ::edge	direct-01	degree	very	0	0.2
# ::edge	direct-01	location	here	0	0.1
(MRPNode-0 / direct-01 :ARG1 (MRPNode-1 / i) :location (MRPNode-2 / here) :degree (MRPNode-3 / very))

# ::id 744
# ::snt It depends entirely on your company and your contract.
# ::tok It depends entirely on your company and your contract .
# ::alignments 0-1|0.1 1-2|0 2-3|0.2 4-5|0.0.0.0 5-6|0.0.0 6-7|0.0 8-9|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:53.315431 ::parser eager_oracle ::smatch 1.0 ::n_actions 35
# ::node	0	depend-01	1-2
# ::node	0.0	and	6-7
# ::node	0.0.0	company	5-6
# ::node	0.0.0.0	you	4-5
# ::node	0.0.1	contract	8-9
# ::node	0.1	it	0-1
# ::node	0.2	entire	2-3
# ::root	0	depend-01
# ::edge	and	op1	company	0.0	0.0.0
# ::edge	and	op2	contract	0.0	0.0.1
# ::edge	company	poss	you	0.0.0	0.0.0.0
# ::edge	contract	poss	you	0.0.1	0.0.0.0
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	depend-01	degree	entire	0	0.2
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / company :poss (MRPNode-3 / you)) :op2 (MRPNode-4 / contract :poss MRPNode-3)) :ARG0 (MRPNode-5 / it) :degree (MRPNode-6 / entire))

# ::id 745
# ::snt There are a few things I think you should do.
# ::tok There are a few things I think you should do .
# ::alignments 3-4|0.0.0.0.0 4-5|0.0.0.0 5-6|0.1 6-7|0 7-8|0.0.0.1 8-9|0.0 9-10|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.360472 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	think-01	6-7
# ::node	0.0	recommend-01	8-9
# ::node	0.0.0	do-02	9-10
# ::node	0.0.0.0	thing	4-5
# ::node	0.0.0.0.0	few	3-4
# ::node	0.0.0.1	you	7-8
# ::node	0.1	i	5-6
# ::root	0	think-01
# ::edge	do-02	ARG0	you	0.0.0	0.0.0.1
# ::edge	do-02	ARG1	thing	0.0.0	0.0.0.0
# ::edge	recommend-01	ARG1	do-02	0.0	0.0.0
# ::edge	recommend-01	ARG2	you	0.0	0.0.0.1
# ::edge	thing	quant	few	0.0.0.0	0.0.0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	recommend-01	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / recommend-01 :ARG1 (MRPNode-2 / do-02 :ARG1 (MRPNode-3 / thing :quant (MRPNode-4 / few)) :ARG0 (MRPNode-5 / you)) :ARG2 MRPNode-5) :ARG0 (MRPNode-6 / i))

# ::id 746
# ::snt How do you do that?
# ::tok How do you do that ?
# ::alignments 0-1|0.2 1-2|0 2-3|0.1 4-5|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.363158 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	do-02	1-2
# ::node	0.0	that	4-5
# ::node	0.1	you	2-3
# ::node	0.2	amr-unknown	0-1
# ::root	0	do-02
# ::edge	do-02	ARG0	you	0	0.1
# ::edge	do-02	ARG1	that	0	0.0
# ::edge	do-02	manner	amr-unknown	0	0.2
(MRPNode-0 / do-02 :ARG1 (MRPNode-1 / that) :ARG0 (MRPNode-2 / you) :manner (MRPNode-3 / amr-unknown))

# ::id 747
# ::snt I was in a similar situation.
# ::tok I was in a similar situation .
# ::alignments 0-1|0.0 2-3|0 4-5|0.1.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:53.365440 ::parser eager_oracle ::smatch 0.823529411764706 ::n_actions 21
# ::node	0	be-located-at-91	2-3
# ::node	0.0	i	0-1
# ::node	0.1	situation	5-6
# ::node	0.1.0	resemble-01	4-5
# ::root	0	be-located-at-91
# ::edge	be-located-at-91	ARG1	i	0	0.0
# ::edge	be-located-at-91	ARG2	situation	0	0.1
# ::edge	situation	ARG1-of	resemble-01	0.1	0.1.0
(MRPNode-0 / be-located-at-91 :ARG1 (MRPNode-1 / i) :ARG2 (MRPNode-2 / situation :ARG1-of (MRPNode-3 / resemble-01)))

# ::id 748
# ::snt It depends on what you want to do next, and where you want to do it.
# ::tok It depends on what you want to do next , and where you want to do it .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0.0.0 5-6|0.0.1.0 7-8|0.0.0+0.0.0.0 8-9|0.0.0.0.1 10-11|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.487003 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 47
# ::node	0	depend-01	1-2
# ::node	0.0	and	10-11
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	do-02	7-8
# ::node	0.0.0.0.0	you	4-5
# ::node	0.0.0.0.1	next	8-9
# ::node	0.0.1	location	
# ::node	0.0.1.0	want-01	5-6
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	and	op1	thing	0.0	0.0.0
# ::edge	and	op2	location	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	do-02	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	do-02	time	next	0.0.0.0	0.0.0.0.1
# ::edge	location	location-of	want-01	0.0.1	0.0.1.0
# ::edge	thing	ARG1-of	do-02	0.0.0	0.0.0.0
# ::edge	want-01	ARG0	you	0.0.1.0	0.0.0.0.0
# ::edge	want-01	ARG1	do-02	0.0.1.0	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / do-02 :ARG0 (MRPNode-4 / you) :time (MRPNode-5 / next))) :op2 (MRPNode-6 / location :location-of (MRPNode-7 / want-01 :ARG1 MRPNode-3 :ARG0 MRPNode-4))) :ARG0 (MRPNode-8 / it))

# ::id 749
# ::snt Well, I wouldn't put it on my cv.
# ::tok Well , I would n't put it on my cv .
# ::alignments 0-1|0.3 2-3|0.2 4-5|0.0 5-6|0 6-7|0.1 9-10|0.4 ::annotator aligner3.py ::date 2021-03-11 23:00:53.502554 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	put-01	5-6
# ::node	0.0	-	4-5
# ::node	0.1	it	6-7
# ::node	0.2	i	2-3
# ::node	0.3	well	0-1
# ::node	0.4	cv	9-10
# ::root	0	put-01
# ::edge	put-01	ARG0	i	0	0.2
# ::edge	put-01	ARG1	it	0	0.1
# ::edge	put-01	ARG2	cv	0	0.4
# ::edge	put-01	mod	well	0	0.3
# ::edge	put-01	polarity	-	0	0.0
(MRPNode-0 / put-01 :polarity - :ARG1 (MRPNode-1 / it) :ARG0 (MRPNode-2 / i) :mod (MRPNode-3 / well) :ARG2 (MRPNode-4 / cv))

# ::id 750
# ::snt I think there isn't a general answer.
# ::tok I think there is n't a general answer .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0 6-7|0.0.1 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.507219 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	think-01	1-2
# ::node	0.0	answer-01	7-8
# ::node	0.0.0	-	4-5
# ::node	0.0.1	general-02	6-7
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	answer-01	ARG1-of	general-02	0.0	0.0.1
# ::edge	answer-01	polarity	-	0.0	0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	answer-01	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / answer-01 :polarity - :ARG1-of (MRPNode-2 / general-02)) :ARG0 (MRPNode-3 / i))

# ::id 751
# ::snt Work into it slowly.
# ::tok Work into it slowly .
# ::alignments 0-1|0+0.0+0.2 2-3|0.1 3-4|0.3 ::annotator aligner3.py ::date 2021-03-11 23:00:53.509419 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	work-01	0-1
# ::node	0.0	imperative	0-1
# ::node	0.1	it	2-3
# ::node	0.2	you	0-1
# ::node	0.3	slow-05	3-4
# ::root	0	work-01
# ::edge	work-01	ARG0	you	0	0.2
# ::edge	work-01	ARG1	it	0	0.1
# ::edge	work-01	ARG1-of	slow-05	0	0.3
# ::edge	work-01	mode	imperative	0	0.0
(MRPNode-0 / work-01 :mode imperative :ARG1 (MRPNode-1 / it) :ARG0 (MRPNode-2 / you) :ARG1-of (MRPNode-3 / slow-05))

# ::id 752
# ::snt It varies by the situation.
# ::tok It varies by the situation .
# ::alignments 0-1|0.0 1-2|0 4-5|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:53.511212 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	vary-01	1-2
# ::node	0.0	it	0-1
# ::node	0.1	situation	4-5
# ::root	0	vary-01
# ::edge	vary-01	ARG1	it	0	0.0
# ::edge	vary-01	ARG1-of	situation	0	0.1
(MRPNode-0 / vary-01 :ARG1 (MRPNode-1 / it) :ARG1-of (MRPNode-2 / situation))

# ::id 753
# ::snt I have the same thing.
# ::tok I have the same thing .
# ::alignments 0-1|0.1 1-2|0 3-4|0.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.515511 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	have-03	1-2
# ::node	0.0	thing	4-5
# ::node	0.0.0	same-01	3-4
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	thing	0	0.0
# ::edge	thing	ARG1-of	same-01	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / thing :ARG1-of (MRPNode-2 / same-01)) :ARG0 (MRPNode-3 / i))

# ::id 754
# ::snt I have the same thing.
# ::tok I have the same thing .
# ::alignments 0-1|0.1 1-2|0 3-4|0.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.519924 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	have-03	1-2
# ::node	0.0	thing	4-5
# ::node	0.0.0	same-01	3-4
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	thing	0	0.0
# ::edge	thing	ARG1-of	same-01	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / thing :ARG1-of (MRPNode-2 / same-01)) :ARG0 (MRPNode-3 / i))

# ::id 755
# ::snt You have to decide what you want to get out of this.
# ::tok You have to decide what you want to get out of this .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1 6-7|0.0.0 8-9|0.0.0.0 11-12|0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.575976 ::parser eager_oracle ::smatch 0.9032258064516129 ::n_actions 38
# ::node	0	obligate-01	1-2
# ::node	0.0	you	0-1
# ::node	0.0.0	want-01	6-7
# ::node	0.0.0.0	get-05	8-9
# ::node	0.0.0.0.0	this	11-12
# ::node	0.0.0.0.1	thing	
# ::node	0.1	decide-01	3-4
# ::root	0	obligate-01
# ::edge	decide-01	ARG0	you	0.1	0.0
# ::edge	decide-01	ARG1	thing	0.1	0.0.0.0.1
# ::edge	get-05	ARG1	thing	0.0.0.0	0.0.0.0.1
# ::edge	get-05	ARG2	this	0.0.0.0	0.0.0.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	decide-01	0	0.1
# ::edge	want-01	ARG1	get-05	0.0.0	0.0.0.0
# ::edge	you	ARG0-of	get-05	0.0	0.0.0.0
# ::edge	you	ARG0-of	want-01	0.0	0.0.0
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / want-01 :ARG1 (MRPNode-3 / get-05 :ARG2 (MRPNode-4 / this) :ARG1 (MRPNode-6 / thing))) :ARG0-of MRPNode-3) :ARG2 (MRPNode-5 / decide-01 :ARG0 MRPNode-1 :ARG1 MRPNode-6))

# ::id 756
# ::snt It's not a good idea.
# ::tok It 's not a good idea .
# ::alignments 0-1|0.1 2-3|0.0.0 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.578143 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	idea	5-6
# ::node	0.0	good-02	4-5
# ::node	0.0.0	-	2-3
# ::node	0.1	it	0-1
# ::root	0	idea
# ::edge	good-02	polarity	-	0.0	0.0.0
# ::edge	idea	ARG1-of	good-02	0	0.0
# ::edge	idea	domain	it	0	0.1
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / good-02 :polarity -) :domain (MRPNode-2 / it))

# ::id 757
# ::snt You have a problem.
# ::tok You have a problem .
# ::alignments 0-1|0.1 1-2|0 3-4|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.579684 ::parser eager_oracle ::smatch 1.0 ::n_actions 16
# ::node	0	have-03	1-2
# ::node	0.0	problem	3-4
# ::node	0.1	you	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	you	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem) :ARG0 (MRPNode-2 / you))

# ::id 758
# ::snt Unfortunately, this question cannot be answered in its full generality.
# ::tok Unfortunately , this question cannot be answered in its full generality .
# ::alignments 0-1|0.2+0.2.0 2-3|0.1.0.0 3-4|0.1.0 4-5|0 6-7|0.1 9-10|0.1.1.0 10-11|0.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:53.590292 ::parser eager_oracle ::smatch 0.8823529411764706 ::n_actions 42
# ::node	0	possible-01	4-5
# ::node	0.0	-	
# ::node	0.1	answer-01	6-7
# ::node	0.1.0	question-01	3-4
# ::node	0.1.0.0	this	2-3
# ::node	0.1.1	generality	10-11
# ::node	0.1.1.0	full	9-10
# ::node	0.2	fortunate-01	0-1
# ::node	0.2.0	-	0-1
# ::root	0	possible-01
# ::edge	answer-01	ARG1	question-01	0.1	0.1.0
# ::edge	answer-01	ARG2	generality	0.1	0.1.1
# ::edge	fortunate-01	polarity	-	0.2	0.2.0
# ::edge	generality	degree	full	0.1.1	0.1.1.0
# ::edge	generality	poss	question-01	0.1.1	0.1.0
# ::edge	possible-01	ARG1	answer-01	0	0.1
# ::edge	possible-01	ARG2-of	fortunate-01	0	0.2
# ::edge	possible-01	polarity	-	0	0.0
# ::edge	question-01	mod	this	0.1.0	0.1.0.0
(MRPNode-0 / possible-01 :polarity - :ARG1 (MRPNode-1 / answer-01 :ARG1 (MRPNode-2 / question-01 :mod (MRPNode-3 / this)) :ARG2 (MRPNode-4 / generality :poss MRPNode-2 :degree (MRPNode-5 / full))) :ARG2-of (MRPNode-6 / fortunate-01 :polarity -))

# ::id 759
# ::snt I think there isn't a general answer.
# ::tok I think there is n't a general answer .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0 6-7|0.0.1 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.594527 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	think-01	1-2
# ::node	0.0	answer-01	7-8
# ::node	0.0.0	-	4-5
# ::node	0.0.1	general-02	6-7
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	answer-01	ARG1-of	general-02	0.0	0.0.1
# ::edge	answer-01	polarity	-	0.0	0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	answer-01	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / answer-01 :polarity - :ARG1-of (MRPNode-2 / general-02)) :ARG0 (MRPNode-3 / i))

# ::id 760
# ::snt "My answer to your question is ""Probably Not""."
# ::tok " My answer to your question is " " Probably Not " " . "
# ::alignments 1-2|0.1 2-3|0.0 4-5|0.0.0 5-6|0 9-10|0.2.1 10-11|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.601389 ::parser eager_oracle ::smatch 0.761904761904762 ::n_actions 33
# ::node	0	answer-01	5-6
# ::node	0.0	question-01	2-3
# ::node	0.0.0	you	4-5
# ::node	0.1	i	1-2
# ::node	0.2	have-polarity-91	
# ::node	0.2.0	-	10-11
# ::node	0.2.1	probable	9-10
# ::root	0	answer-01
# ::edge	answer-01	ARG0	i	0	0.1
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	answer-01	ARG2	have-polarity-91	0	0.2
# ::edge	have-polarity-91	arg2	-	0.2	0.2.0
# ::edge	have-polarity-91	mod	probable	0.2	0.2.1
# ::edge	question-01	ARG0	you	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG0 (MRPNode-3 / i) :ARG2 (MRPNode-4 / have-polarity-91 :arg2 - :mod (MRPNode-5 / probable)))

# ::id 761
# ::snt I had the same problem as you.
# ::tok I had the same problem as you .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0 5-6|0.0.0 6-7|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.604829 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	have-03	1-2
# ::node	0.0	problem	4-5
# ::node	0.0.0	same-01	5-6
# ::node	0.0.0.0	you	6-7
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
# ::edge	problem	ARG1-of	same-01	0.0	0.0.0
# ::edge	same-01	ARG2	you	0.0.0	0.0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem :ARG1-of (MRPNode-2 / same-01 :ARG2 (MRPNode-3 / you))) :ARG0 (MRPNode-4 / i))

# ::id 762
# ::snt Hope this is what you are looking for.
# ::tok Hope this is what you are looking for .
# ::alignments 0-1|0 1-2|0.0.1 4-5|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.608747 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	hope-01	0-1
# ::node	0.0	look-01	6-7
# ::node	0.0.0	you	4-5
# ::node	0.0.1	this	1-2
# ::root	0	hope-01
# ::edge	hope-01	ARG1	look-01	0	0.0
# ::edge	look-01	ARG1	this	0.0	0.0.1
# ::edge	look-01	ARG1	you	0.0	0.0.0
(MRPNode-0 / hope-01 :ARG1 (MRPNode-1 / look-01 :ARG1 (MRPNode-2 / you) :ARG1 (MRPNode-3 / this)))

# ::id 763
# ::snt There are a few things you can do:
# ::tok There are a few things you can do :
# ::alignments 3-4|0.0.0.0 4-5|0.0.0 5-6|0.0.1 6-7|0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.612771 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	possible-01	6-7
# ::node	0.0	do-02	7-8
# ::node	0.0.0	thing	4-5
# ::node	0.0.0.0	few	3-4
# ::node	0.0.1	you	5-6
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	thing	0.0	0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	thing	quant	few	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / thing :quant (MRPNode-3 / few)) :ARG0 (MRPNode-4 / you)))

# ::id 764
# ::snt It depends on what you want to do next, and where you want to do it.
# ::tok It depends on what you want to do next , and where you want to do it .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0.0.0 5-6|0.0.1.0 7-8|0.0.0+0.0.0.0 8-9|0.0.0.0.1 10-11|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.735425 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 47
# ::node	0	depend-01	1-2
# ::node	0.0	and	10-11
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	do-02	7-8
# ::node	0.0.0.0.0	you	4-5
# ::node	0.0.0.0.1	next	8-9
# ::node	0.0.1	location	
# ::node	0.0.1.0	want-01	5-6
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	and	op1	thing	0.0	0.0.0
# ::edge	and	op2	location	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	do-02	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	do-02	time	next	0.0.0.0	0.0.0.0.1
# ::edge	location	location-of	want-01	0.0.1	0.0.1.0
# ::edge	thing	ARG1-of	do-02	0.0.0	0.0.0.0
# ::edge	want-01	ARG0	you	0.0.1.0	0.0.0.0.0
# ::edge	want-01	ARG1	do-02	0.0.1.0	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / do-02 :ARG0 (MRPNode-4 / you) :time (MRPNode-5 / next))) :op2 (MRPNode-6 / location :location-of (MRPNode-7 / want-01 :ARG1 MRPNode-3 :ARG0 MRPNode-4))) :ARG0 (MRPNode-8 / it))

# ::id 765
# ::snt In the US, it will depend on the school.
# ::tok In the US , it will depend on the school .
# ::alignments 2-3|0.2+0.2.0+0.2.0.0 4-5|0.1 6-7|0 9-10|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.739900 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	depend-01	6-7
# ::node	0.0	school	9-10
# ::node	0.1	it	4-5
# ::node	0.2	country	2-3
# ::node	0.2.0	name	2-3
# ::node	0.2.0.0	us	2-3
# ::root	0	depend-01
# ::edge	country	name	name	0.2	0.2.0
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	school	0	0.0
# ::edge	depend-01	location	country	0	0.2
# ::edge	name	op1	us	0.2.0	0.2.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / school) :ARG0 (MRPNode-2 / it) :location (MRPNode-3 / country :name (MRPNode-4 / name :op1 us)))

# ::id 766
# ::snt There are a few things I think you should do.
# ::tok There are a few things I think you should do .
# ::alignments 3-4|0.0.0.0.0 4-5|0.0.0.0 5-6|0.1 6-7|0 7-8|0.0.0.1 8-9|0.0 9-10|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.779681 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	think-01	6-7
# ::node	0.0	recommend-01	8-9
# ::node	0.0.0	do-02	9-10
# ::node	0.0.0.0	thing	4-5
# ::node	0.0.0.0.0	few	3-4
# ::node	0.0.0.1	you	7-8
# ::node	0.1	i	5-6
# ::root	0	think-01
# ::edge	do-02	ARG0	you	0.0.0	0.0.0.1
# ::edge	do-02	ARG1	thing	0.0.0	0.0.0.0
# ::edge	recommend-01	ARG1	do-02	0.0	0.0.0
# ::edge	recommend-01	ARG2	you	0.0	0.0.0.1
# ::edge	thing	quant	few	0.0.0.0	0.0.0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	recommend-01	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / recommend-01 :ARG1 (MRPNode-2 / do-02 :ARG1 (MRPNode-3 / thing :quant (MRPNode-4 / few)) :ARG0 (MRPNode-5 / you)) :ARG2 MRPNode-5) :ARG0 (MRPNode-6 / i))

# ::id 767
# ::snt I've had this same problem.
# ::tok I 've had this same problem .
# ::alignments 0-1|0.1 2-3|0 3-4|0.0.0 4-5|0.0.1 5-6|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.782802 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	have-03	2-3
# ::node	0.0	problem	5-6
# ::node	0.0.0	this	3-4
# ::node	0.0.1	same-01	4-5
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
# ::edge	problem	ARG1-of	same-01	0.0	0.0.1
# ::edge	problem	mod	this	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem :mod (MRPNode-2 / this) :ARG1-of (MRPNode-3 / same-01)) :ARG0 (MRPNode-4 / i))

# ::id 768
# ::snt Not a direct answer to the question, but something to consider.
# ::tok Not a direct answer to the question , but something to consider .
# ::alignments 0-1|0.0.1.0 2-3|0.0.1 3-4|0.0 6-7|0.0.0 8-9|0 9-10|0.1 11-12|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.792502 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	contrast-01	8-9
# ::node	0.0	answer-01	3-4
# ::node	0.0.0	question-01	6-7
# ::node	0.0.1	direct-02	2-3
# ::node	0.0.1.0	-	0-1
# ::node	0.1	something	9-10
# ::node	0.1.0	consider-02	11-12
# ::root	0	contrast-01
# ::edge	answer-01	ARG1-of	direct-02	0.0	0.0.1
# ::edge	answer-01	ARG1-of	question-01	0.0	0.0.0
# ::edge	contrast-01	ARG1	answer-01	0	0.0
# ::edge	contrast-01	ARG2	something	0	0.1
# ::edge	direct-02	polarity	-	0.0.1	0.0.1.0
# ::edge	something	ARG1-of	consider-02	0.1	0.1.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / answer-01 :ARG1-of (MRPNode-2 / question-01) :ARG1-of (MRPNode-3 / direct-02 :polarity -)) :ARG2 (MRPNode-4 / something :ARG1-of (MRPNode-5 / consider-02)))

# ::id 769
# ::snt I remained under the banyan tree, exhausted by my daily ritual of dragooning the men every two hours.
# ::tok I remained under the banyan tree , exhausted by my daily ritual of dragooning the men every two hours .
# ::alignments 0-1|0.0.0 1-2|0.0 2-3|0.0.1 4-5|0.0.1.0.0 5-6|0.0.1.0 7-8|0.1 11-12|0.1.0 13-14|0.0.0.0 15-16|0.0.0.0.0 17-18|0.1.0.0.0.0 18-19|0.1.0.0.0+0.1.0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:53.816700 ::parser eager_oracle ::smatch 0.8214285714285715 ::n_actions 63
# ::node	0	and	
# ::node	0.0	remain-01	1-2
# ::node	0.0.0	i	0-1
# ::node	0.0.0.0	drag-01	13-14
# ::node	0.0.0.0.0	man	15-16
# ::node	0.0.1	under	2-3
# ::node	0.0.1.0	tree	5-6
# ::node	0.0.1.0.0	banyan	4-5
# ::node	0.1	exhaust-01	7-8
# ::node	0.1.0	ritual	11-12
# ::node	0.1.0.0	rate-entity-91	
# ::node	0.1.0.0.0	temporal-quantity	18-19
# ::node	0.1.0.0.0.0	2	17-18
# ::node	0.1.0.0.0.1	hour	18-19
# ::root	0	and
# ::edge	and	op1	remain-01	0	0.0
# ::edge	and	op2	exhaust-01	0	0.1
# ::edge	drag-01	ARG1	man	0.0.0.0	0.0.0.0.0
# ::edge	exhaust-01	ARG0	ritual	0.1	0.1.0
# ::edge	exhaust-01	ARG1	i	0.1	0.0.0
# ::edge	i	ARG0-of	drag-01	0.0.0	0.0.0.0
# ::edge	rate-entity-91	ARG3	temporal-quantity	0.1.0.0	0.1.0.0.0
# ::edge	remain-01	ARG1	i	0.0	0.0.0
# ::edge	remain-01	ARG3	under	0.0	0.0.1
# ::edge	ritual	ARG0	i	0.1.0	0.0.0
# ::edge	ritual	frequency	rate-entity-91	0.1.0	0.1.0.0
# ::edge	ritual	purpose	drag-01	0.1.0	0.0.0.0
# ::edge	temporal-quantity	quant	2	0.1.0.0.0	0.1.0.0.0.0
# ::edge	temporal-quantity	unit	hour	0.1.0.0.0	0.1.0.0.0.1
# ::edge	tree	mod	banyan	0.0.1.0	0.0.1.0.0
# ::edge	under	op1	tree	0.0.1	0.0.1.0
(MRPNode-0 / and :op1 (MRPNode-1 / remain-01 :ARG1 (MRPNode-2 / i :ARG0-of (MRPNode-3 / drag-01 :ARG1 (MRPNode-4 / man))) :ARG3 (MRPNode-5 / under :op1 (MRPNode-6 / tree :mod (MRPNode-7 / banyan)))) :op2 (MRPNode-8 / exhaust-01 :ARG1 MRPNode-2 :ARG0 (MRPNode-9 / ritual :ARG0 MRPNode-2 :purpose MRPNode-3 :frequency (MRPNode-10 / rate-entity-91 :ARG3 (MRPNode-11 / temporal-quantity :quant 2 :unit (MRPNode-12 / hour))))))

# ::id 770
# ::snt In the US, it will depend on the school.
# ::tok In the US , it will depend on the school .
# ::alignments 2-3|0.2+0.2.0+0.2.0.0 4-5|0.1 6-7|0 9-10|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.820763 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	depend-01	6-7
# ::node	0.0	school	9-10
# ::node	0.1	it	4-5
# ::node	0.2	country	2-3
# ::node	0.2.0	name	2-3
# ::node	0.2.0.0	us	2-3
# ::root	0	depend-01
# ::edge	country	name	name	0.2	0.2.0
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	school	0	0.0
# ::edge	depend-01	location	country	0	0.2
# ::edge	name	op1	us	0.2.0	0.2.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / school) :ARG0 (MRPNode-2 / it) :location (MRPNode-3 / country :name (MRPNode-4 / name :op1 us)))

# ::id 771
# ::snt You should do it.
# ::tok You should do it .
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.0 3-4|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:53.823217 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	recommend-01	1-2
# ::node	0.0	do-02	2-3
# ::node	0.0.0	you	0-1
# ::node	0.0.1	it	3-4
# ::root	0	recommend-01
# ::edge	do-02	ARG0	you	0.0	0.0.0
# ::edge	do-02	ARG1	it	0.0	0.0.1
# ::edge	recommend-01	ARG1	do-02	0	0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / do-02 :ARG0 (MRPNode-2 / you) :ARG1 (MRPNode-3 / it)))

# ::id 772
# ::snt Yes, it's probably a good idea to renew your passport.
# ::tok Yes , it 's probably a good idea to renew your passport .
# ::alignments 4-5|0 6-7|0.0.0 7-8|0.0 9-10|0.0.1 10-11|0.0.1.0.0 11-12|0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.827814 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	probable	4-5
# ::node	0.0	idea	7-8
# ::node	0.0.0	good-02	6-7
# ::node	0.0.1	renew-01	9-10
# ::node	0.0.1.0	passport	11-12
# ::node	0.0.1.0.0	you	10-11
# ::root	0	probable
# ::edge	idea	ARG1-of	good-02	0.0	0.0.0
# ::edge	idea	domain	renew-01	0.0	0.0.1
# ::edge	passport	poss	you	0.0.1.0	0.0.1.0.0
# ::edge	probable	domain	idea	0	0.0
# ::edge	renew-01	ARG1	passport	0.0.1	0.0.1.0
(MRPNode-0 / probable :domain (MRPNode-1 / idea :ARG1-of (MRPNode-2 / good-02) :domain (MRPNode-3 / renew-01 :ARG1 (MRPNode-4 / passport :poss (MRPNode-5 / you)))))

# ::id 773
# ::snt Yes, you should mention your experience.
# ::tok Yes , you should mention your experience .
# ::alignments 3-4|0 4-5|0.0 5-6|0.0.0.0.0 6-7|0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.831882 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	recommend-01	3-4
# ::node	0.0	mention-01	4-5
# ::node	0.0.0	thing	6-7
# ::node	0.0.0.0	experience-01	6-7
# ::node	0.0.0.0.0	you	5-6
# ::root	0	recommend-01
# ::edge	experience-01	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	mention-01	ARG0	thing	0.0	0.0.0
# ::edge	mention-01	ARG0	you	0.0	0.0.0.0.0
# ::edge	recommend-01	ARG1	mention-01	0	0.0
# ::edge	thing	ARG1-of	experience-01	0.0.0	0.0.0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / mention-01 :ARG0 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / experience-01 :ARG0 (MRPNode-4 / you))) :ARG0 MRPNode-4))

# ::id 774
# ::snt It depends on what you want to do next, and where you want to do it.
# ::tok It depends on what you want to do next , and where you want to do it .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0.0.0 5-6|0.0.1.0 7-8|0.0.0+0.0.0.0 8-9|0.0.0.0.1 10-11|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:53.950828 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 47
# ::node	0	depend-01	1-2
# ::node	0.0	and	10-11
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	do-02	7-8
# ::node	0.0.0.0.0	you	4-5
# ::node	0.0.0.0.1	next	8-9
# ::node	0.0.1	location	
# ::node	0.0.1.0	want-01	5-6
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	and	op1	thing	0.0	0.0.0
# ::edge	and	op2	location	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	do-02	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	do-02	time	next	0.0.0.0	0.0.0.0.1
# ::edge	location	location-of	want-01	0.0.1	0.0.1.0
# ::edge	thing	ARG1-of	do-02	0.0.0	0.0.0.0
# ::edge	want-01	ARG0	you	0.0.1.0	0.0.0.0.0
# ::edge	want-01	ARG1	do-02	0.0.1.0	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / do-02 :ARG0 (MRPNode-4 / you) :time (MRPNode-5 / next))) :op2 (MRPNode-6 / location :location-of (MRPNode-7 / want-01 :ARG1 MRPNode-3 :ARG0 MRPNode-4))) :ARG0 (MRPNode-8 / it))

# ::id 775
# ::snt It depends on what you want to do next, and where you want to do it.
# ::tok It depends on what you want to do next , and where you want to do it .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0.0.0 5-6|0.0.1.0 7-8|0.0.0+0.0.0.0 8-9|0.0.0.0.1 10-11|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.071124 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 47
# ::node	0	depend-01	1-2
# ::node	0.0	and	10-11
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	do-02	7-8
# ::node	0.0.0.0.0	you	4-5
# ::node	0.0.0.0.1	next	8-9
# ::node	0.0.1	location	
# ::node	0.0.1.0	want-01	5-6
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	and	op1	thing	0.0	0.0.0
# ::edge	and	op2	location	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	do-02	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	do-02	time	next	0.0.0.0	0.0.0.0.1
# ::edge	location	location-of	want-01	0.0.1	0.0.1.0
# ::edge	thing	ARG1-of	do-02	0.0.0	0.0.0.0
# ::edge	want-01	ARG0	you	0.0.1.0	0.0.0.0.0
# ::edge	want-01	ARG1	do-02	0.0.1.0	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / do-02 :ARG0 (MRPNode-4 / you) :time (MRPNode-5 / next))) :op2 (MRPNode-6 / location :location-of (MRPNode-7 / want-01 :ARG1 MRPNode-3 :ARG0 MRPNode-4))) :ARG0 (MRPNode-8 / it))

# ::id 776
# ::snt This is a very unusual request.
# ::tok This is a very unusual request .
# ::alignments 0-1|0.0 3-4|0.1.1 4-5|0.1+0.1.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.073866 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	request-01	5-6
# ::node	0.0	this	0-1
# ::node	0.1	usual	4-5
# ::node	0.1.0	-	4-5
# ::node	0.1.1	very	3-4
# ::root	0	request-01
# ::edge	request-01	mod	this	0	0.0
# ::edge	request-01	mod	usual	0	0.1
# ::edge	usual	degree	very	0.1	0.1.1
# ::edge	usual	polarity	-	0.1	0.1.0
(MRPNode-0 / request-01 :mod (MRPNode-1 / this) :mod (MRPNode-2 / usual :polarity - :degree (MRPNode-3 / very)))

# ::id 777
# ::snt It depends on what you want to do next, and where you want to do it.
# ::tok It depends on what you want to do next , and where you want to do it .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0.0.0 5-6|0.0.1.0 7-8|0.0.0+0.0.0.0 8-9|0.0.0.0.1 10-11|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.192521 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 47
# ::node	0	depend-01	1-2
# ::node	0.0	and	10-11
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	do-02	7-8
# ::node	0.0.0.0.0	you	4-5
# ::node	0.0.0.0.1	next	8-9
# ::node	0.0.1	location	
# ::node	0.0.1.0	want-01	5-6
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	and	op1	thing	0.0	0.0.0
# ::edge	and	op2	location	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	do-02	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	do-02	time	next	0.0.0.0	0.0.0.0.1
# ::edge	location	location-of	want-01	0.0.1	0.0.1.0
# ::edge	thing	ARG1-of	do-02	0.0.0	0.0.0.0
# ::edge	want-01	ARG0	you	0.0.1.0	0.0.0.0.0
# ::edge	want-01	ARG1	do-02	0.0.1.0	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / do-02 :ARG0 (MRPNode-4 / you) :time (MRPNode-5 / next))) :op2 (MRPNode-6 / location :location-of (MRPNode-7 / want-01 :ARG1 MRPNode-3 :ARG0 MRPNode-4))) :ARG0 (MRPNode-8 / it))

# ::id 778
# ::snt It really doesn't matter.
# ::tok It really does n't matter .
# ::alignments 0-1|0.1 1-2|0.2 3-4|0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.195927 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	matter-01	4-5
# ::node	0.0	-	3-4
# ::node	0.1	it	0-1
# ::node	0.2	real-04	1-2
# ::root	0	matter-01
# ::edge	matter-01	ARG1	it	0	0.1
# ::edge	matter-01	ARG1-of	real-04	0	0.2
# ::edge	matter-01	polarity	-	0	0.0
(MRPNode-0 / matter-01 :polarity - :ARG1 (MRPNode-1 / it) :ARG1-of (MRPNode-2 / real-04))

# ::id 779
# ::snt You don't need to know everything.
# ::tok You do n't need to know everything .
# ::alignments 0-1|0.1.1 2-3|0.0 3-4|0 5-6|0.1 6-7|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.231603 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	need-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	know-01	5-6
# ::node	0.1.0	everything	6-7
# ::node	0.1.1	you	0-1
# ::root	0	need-01
# ::edge	know-01	ARG0	you	0.1	0.1.1
# ::edge	know-01	ARG1	everything	0.1	0.1.0
# ::edge	need-01	ARG0	you	0	0.1.1
# ::edge	need-01	ARG1	know-01	0	0.1
# ::edge	need-01	polarity	-	0	0.0
(MRPNode-0 / need-01 :polarity - :ARG1 (MRPNode-1 / know-01 :ARG1 (MRPNode-2 / everything) :ARG0 (MRPNode-3 / you)) :ARG0 MRPNode-3)

# ::id 780
# ::snt I think you're looking for Mikey (1992).
# ::tok I think you 're looking for Mikey ( 1992 ) .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1 4-5|0.0 6-7|0.0.0+0.0.0.0+0.0.0.0.0 8-9|0.0.0.1+0.0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.260423 ::parser eager_oracle ::smatch 0.823529411764706 ::n_actions 31
# ::node	0	think-01	1-2
# ::node	0.0	look-01	4-5
# ::node	0.0.0	person	6-7
# ::node	0.0.0.0	name	6-7
# ::node	0.0.0.0.0	mikey	6-7
# ::node	0.0.0.1	date-entity	8-9
# ::node	0.0.0.1.0	1992	8-9
# ::node	0.0.1	you	2-3
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	date-entity	year	1992	0.0.0.1	0.0.0.1.0
# ::edge	look-01	ARG0	you	0.0	0.0.1
# ::edge	look-01	ARG1	person	0.0	0.0.0
# ::edge	name	op1	mikey	0.0.0.0	0.0.0.0.0
# ::edge	person	ARG1-of	name	0.0.0	0.0.0.0
# ::edge	person	time	date-entity	0.0.0	0.0.0.1
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	look-01	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / look-01 :ARG1 (MRPNode-2 / person :ARG1-of (MRPNode-3 / name :op1 mikey) :time (MRPNode-4 / date-entity :year 1992)) :ARG0 (MRPNode-5 / you)) :ARG0 (MRPNode-6 / i))

# ::id 781
# ::snt I don't think that there's any.
# ::tok I do n't think that there 's any .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 7-8|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.264618 ::parser eager_oracle ::smatch 0.7142857142857143 ::n_actions 22
# ::node	0	think-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	exist-01	
# ::node	0.1.0	any	7-8
# ::node	0.2	i	0-1
# ::root	0	think-01
# ::edge	exist-01	ARG1	any	0.1	0.1.0
# ::edge	think-01	ARG0	i	0	0.2
# ::edge	think-01	ARG1	exist-01	0	0.1
# ::edge	think-01	polarity	-	0	0.0
(MRPNode-0 / think-01 :polarity - :ARG1 (MRPNode-1 / exist-01 :ARG1 (MRPNode-2 / any)) :ARG0 (MRPNode-3 / i))

# ::id 782
# ::snt There are a few things you can do:
# ::tok There are a few things you can do :
# ::alignments 3-4|0.0.0.0 4-5|0.0.0 5-6|0.0.1 6-7|0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.268348 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	possible-01	6-7
# ::node	0.0	do-02	7-8
# ::node	0.0.0	thing	4-5
# ::node	0.0.0.0	few	3-4
# ::node	0.0.1	you	5-6
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	thing	0.0	0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	thing	quant	few	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / thing :quant (MRPNode-3 / few)) :ARG0 (MRPNode-4 / you)))

# ::id 783
# ::snt This is the tip I find most useful:
# ::tok This is the tip I find most useful :
# ::alignments 0-1|0.3 3-4|0.2 4-5|0+0.0.0.0 5-6|0.0.0 6-7|0.1.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.275427 ::parser eager_oracle ::smatch 0.8571428571428571 ::n_actions 32
# ::node	0	thing	4-5
# ::node	0.0	useful-05	7-8
# ::node	0.0.0	find-01	5-6
# ::node	0.0.0.0	i	4-5
# ::node	0.1	have-degree-91	
# ::node	0.1.0	most	6-7
# ::node	0.2	tip-05	3-4
# ::node	0.3	this	0-1
# ::root	0	thing
# ::edge	find-01	ARG0	i	0.0.0	0.0.0.0
# ::edge	have-degree-91	ARG3	most	0.1	0.1.0
# ::edge	thing	ARG1-of	useful-05	0	0.0
# ::edge	thing	domain	have-degree-91	0	0.1
# ::edge	thing	domain	this	0	0.3
# ::edge	thing	domain	tip-05	0	0.2
# ::edge	useful-05	ARG1-of	find-01	0.0	0.0.0
(MRPNode-0 / thing :ARG1-of (MRPNode-1 / useful-05 :ARG1-of (MRPNode-2 / find-01 :ARG0 (MRPNode-3 / i))) :domain (MRPNode-4 / have-degree-91 :ARG3 (MRPNode-5 / most)) :domain (MRPNode-6 / tip-05) :domain (MRPNode-7 / this))

# ::id 784
# ::snt Sure, I've  done this very trip.
# ::tok Sure , I 've done this very trip .
# ::alignments 0-1|0 2-3|0.0.1 5-6|0.0.0 6-7|0.0.0.0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.280536 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	sure-02	0-1
# ::node	0.0	trip-03	7-8
# ::node	0.0.0	this	5-6
# ::node	0.0.0.0	very	6-7
# ::node	0.0.1	i	2-3
# ::root	0	sure-02
# ::edge	sure-02	ARG1	trip-03	0	0.0
# ::edge	this	mod	very	0.0.0	0.0.0.0
# ::edge	trip-03	ARG0	i	0.0	0.0.1
# ::edge	trip-03	mod	this	0.0	0.0.0
(MRPNode-0 / sure-02 :ARG1 (MRPNode-1 / trip-03 :mod (MRPNode-2 / this :mod (MRPNode-3 / very)) :ARG0 (MRPNode-4 / i)))

# ::id 785
# ::snt You can use it, too.
# ::tok You can use it , too .
# ::alignments 0-1|0.0.1 1-2|0 2-3|0.0 3-4|0.0.0 5-6|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:54.283590 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	possible-01	1-2
# ::node	0.0	use-01	2-3
# ::node	0.0.0	it	3-4
# ::node	0.0.1	you	0-1
# ::node	0.0.2	too	5-6
# ::root	0	possible-01
# ::edge	possible-01	ARG1	use-01	0	0.0
# ::edge	use-01	ARG0	you	0.0	0.0.1
# ::edge	use-01	ARG1	it	0.0	0.0.0
# ::edge	use-01	mod	too	0.0	0.0.2
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / use-01 :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / you) :mod (MRPNode-4 / too)))

# ::id 786
# ::snt I've located an article that might be of some help: http://www.dsattorney.com/qa-pseudonyms-in-contracts/
# ::tok I 've located an article that might be of some help : http://www.dsattorney.com/qa-pseudonyms-in-contracts/
# ::alignments 0-1|0.1 2-3|0 4-5|0.0 6-7|0.0.0.0 9-10|0.0.0.1 10-11|0.0.0 12-13|0.0.1+0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.289180 ::parser eager_oracle ::smatch 0.9032258064516129 ::n_actions 40
# ::node	0	locate-01	2-3
# ::node	0.0	article	4-5
# ::node	0.0.0	help-01	10-11
# ::node	0.0.0.0	possible-01	6-7
# ::node	0.0.0.1	some	9-10
# ::node	0.0.1	url-entity	12-13
# ::node	0.0.1.0	"http://www.dsattorney.com/qa-pseudonyms-in-contracts/"	12-13
# ::node	0.1	i	0-1
# ::root	0	locate-01
# ::edge	article	ARG0-of	help-01	0.0	0.0.0
# ::edge	article	location	url-entity	0.0	0.0.1
# ::edge	help-01	ARG1-of	possible-01	0.0.0	0.0.0.0
# ::edge	help-01	mod	some	0.0.0	0.0.0.1
# ::edge	locate-01	ARG0	i	0	0.1
# ::edge	locate-01	ARG1	article	0	0.0
# ::edge	url-entity	value	"http://www.dsattorney.com/qa-pseudonyms-in-contracts/"	0.0.1	0.0.1.0
(MRPNode-0 / locate-01 :ARG1 (MRPNode-1 / article :ARG0-of (MRPNode-2 / help-01 :ARG1-of (MRPNode-3 / possible-01) :mod (MRPNode-4 / some)) :location (MRPNode-5 / url-entity :value "http://www.dsattorney.com/qa-pseudonyms-in-contracts/")) :ARG0 (MRPNode-6 / i))

# ::id 787
# ::snt You don't have to worry.
# ::tok You do n't have to worry .
# ::alignments 0-1|0.1 2-3|0.0 3-4|0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:54.291692 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	obligate-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	you	0-1
# ::node	0.2	worry-02	5-6
# ::root	0	obligate-01
# ::edge	obligate-01	ARG1	you	0	0.1
# ::edge	obligate-01	ARG2	worry-02	0	0.2
# ::edge	obligate-01	polarity	-	0	0.0
# ::edge	worry-02	ARG0	you	0.2	0.1
(MRPNode-0 / obligate-01 :polarity - :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / worry-02 :ARG0 MRPNode-1))

# ::id 788
# ::snt It depends entirely on your company and your contract.
# ::tok It depends entirely on your company and your contract .
# ::alignments 0-1|0.1 1-2|0 2-3|0.2 4-5|0.0.0.0 5-6|0.0.0 6-7|0.0 8-9|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:54.296725 ::parser eager_oracle ::smatch 1.0 ::n_actions 35
# ::node	0	depend-01	1-2
# ::node	0.0	and	6-7
# ::node	0.0.0	company	5-6
# ::node	0.0.0.0	you	4-5
# ::node	0.0.1	contract	8-9
# ::node	0.1	it	0-1
# ::node	0.2	entire	2-3
# ::root	0	depend-01
# ::edge	and	op1	company	0.0	0.0.0
# ::edge	and	op2	contract	0.0	0.0.1
# ::edge	company	poss	you	0.0.0	0.0.0.0
# ::edge	contract	poss	you	0.0.1	0.0.0.0
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	depend-01	degree	entire	0	0.2
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / company :poss (MRPNode-3 / you)) :op2 (MRPNode-4 / contract :poss MRPNode-3)) :ARG0 (MRPNode-5 / it) :degree (MRPNode-6 / entire))

# ::id 789
# ::snt The wood probably isn't rotten, it's just worn out.
# ::tok The wood probably is n't rotten , it 's just worn out .
# ::alignments 1-2|0.0.1 2-3|0.1 4-5|0.1.0.0 9-10|0.0.0 10-11|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.302812 ::parser eager_oracle ::smatch 0.5 ::n_actions 28
# ::node	0	have-concession-91	
# ::node	0.0	wear-01	10-11
# ::node	0.0.0	just	9-10
# ::node	0.0.1	wood	1-2
# ::node	0.1	probable	2-3
# ::node	0.1.0	rot-01	
# ::node	0.1.0.0	-	4-5
# ::root	0	have-concession-91
# ::edge	have-concession-91	ARG1	wear-01	0	0.0
# ::edge	have-concession-91	ARG2	probable	0	0.1
# ::edge	probable	domain	rot-01	0.1	0.1.0
# ::edge	rot-01	ARG1	wood	0.1.0	0.0.1
# ::edge	rot-01	polarity	-	0.1.0	0.1.0.0
# ::edge	wear-01	ARG1	just	0.0	0.0.0
# ::edge	wear-01	ARG1	wood	0.0	0.0.1
(MRPNode-0 / have-concession-91 :ARG1 (MRPNode-1 / wear-01 :ARG1 (MRPNode-2 / just) :ARG1 (MRPNode-3 / wood)) :ARG2 (MRPNode-4 / probable :domain (MRPNode-5 / rot-01 :polarity - :ARG1 MRPNode-3)))

# ::id 790
# ::snt I have the same thing.
# ::tok I have the same thing .
# ::alignments 0-1|0.1 1-2|0 3-4|0.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.307134 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	have-03	1-2
# ::node	0.0	thing	4-5
# ::node	0.0.0	same-01	3-4
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	thing	0	0.0
# ::edge	thing	ARG1-of	same-01	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / thing :ARG1-of (MRPNode-2 / same-01)) :ARG0 (MRPNode-3 / i))

# ::id 791
# ::snt Yes it is common!
# ::tok Yes it is common !
# ::alignments 1-2|0.0 3-4|0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.308355 ::parser eager_oracle ::smatch 1.0 ::n_actions 13
# ::node	0	common	3-4
# ::node	0.0	it	1-2
# ::root	0	common
# ::edge	common	domain	it	0	0.0
(MRPNode-0 / common :domain (MRPNode-1 / it))

# ::id 792
# ::snt I don't think that there's any.
# ::tok I do n't think that there 's any .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 7-8|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.312035 ::parser eager_oracle ::smatch 0.7142857142857143 ::n_actions 22
# ::node	0	think-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	exist-01	
# ::node	0.1.0	any	7-8
# ::node	0.2	i	0-1
# ::root	0	think-01
# ::edge	exist-01	ARG1	any	0.1	0.1.0
# ::edge	think-01	ARG0	i	0	0.2
# ::edge	think-01	ARG1	exist-01	0	0.1
# ::edge	think-01	polarity	-	0	0.0
(MRPNode-0 / think-01 :polarity - :ARG1 (MRPNode-1 / exist-01 :ARG1 (MRPNode-2 / any)) :ARG0 (MRPNode-3 / i))

# ::id 793
# ::snt You can use it, too.
# ::tok You can use it , too .
# ::alignments 0-1|0.0.1 1-2|0 2-3|0.0 3-4|0.0.0 5-6|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:54.314579 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	possible-01	1-2
# ::node	0.0	use-01	2-3
# ::node	0.0.0	it	3-4
# ::node	0.0.1	you	0-1
# ::node	0.0.2	too	5-6
# ::root	0	possible-01
# ::edge	possible-01	ARG1	use-01	0	0.0
# ::edge	use-01	ARG0	you	0.0	0.0.1
# ::edge	use-01	ARG1	it	0.0	0.0.0
# ::edge	use-01	mod	too	0.0	0.0.2
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / use-01 :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / you) :mod (MRPNode-4 / too)))

# ::id 794
# ::snt There are a few things you can do:
# ::tok There are a few things you can do :
# ::alignments 3-4|0.0.0.0 4-5|0.0.0 5-6|0.0.1 6-7|0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.318073 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	possible-01	6-7
# ::node	0.0	do-02	7-8
# ::node	0.0.0	thing	4-5
# ::node	0.0.0.0	few	3-4
# ::node	0.0.1	you	5-6
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	thing	0.0	0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
# ::edge	thing	quant	few	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / thing :quant (MRPNode-3 / few)) :ARG0 (MRPNode-4 / you)))

# ::id 795
# ::snt There are a few possible reasons.
# ::tok There are a few possible reasons .
# ::alignments 3-4|0.0 4-5|0.1 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.319919 ::parser eager_oracle ::smatch 1.0 ::n_actions 18
# ::node	0	reason	5-6
# ::node	0.0	few	3-4
# ::node	0.1	possible-01	4-5
# ::root	0	reason
# ::edge	reason	ARG1-of	possible-01	0	0.1
# ::edge	reason	quant	few	0	0.0
(MRPNode-0 / reason :quant (MRPNode-1 / few) :ARG1-of (MRPNode-2 / possible-01))

# ::id 796
# ::snt I've had this same problem.
# ::tok I 've had this same problem .
# ::alignments 0-1|0.1 2-3|0 3-4|0.0.0 4-5|0.0.1 5-6|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.323161 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	have-03	2-3
# ::node	0.0	problem	5-6
# ::node	0.0.0	this	3-4
# ::node	0.0.1	same-01	4-5
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
# ::edge	problem	ARG1-of	same-01	0.0	0.0.1
# ::edge	problem	mod	this	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem :mod (MRPNode-2 / this) :ARG1-of (MRPNode-3 / same-01)) :ARG0 (MRPNode-4 / i))

# ::id 797
# ::snt The answer to both questions is: Yes.
# ::tok The answer to both questions is : Yes .
# ::alignments 1-2|0 3-4|0.1.0 4-5|0.1 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.327431 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	answer-01	1-2
# ::node	0.0	yes	7-8
# ::node	0.1	question-01	4-5
# ::node	0.1.0	both	3-4
# ::root	0	answer-01
# ::edge	answer-01	ARG2	question-01	0	0.1
# ::edge	answer-01	ARG2	yes	0	0.0
# ::edge	question-01	mod	both	0.1	0.1.0
(MRPNode-0 / answer-01 :ARG2 (MRPNode-1 / yes) :ARG2 (MRPNode-2 / question-01 :mod (MRPNode-3 / both)))

# ::id 798
# ::snt I did this one time as well.
# ::tok I did this one time as well .
# ::alignments 0-1|0.2 1-2|0 2-3|0.1 3-4|0.0 5-7|0.3 ::annotator aligner3.py ::date 2021-03-11 23:00:54.330102 ::parser eager_oracle ::smatch 0.8421052631578948 ::n_actions 25
# ::node	0	do-02	1-2
# ::node	0.0	1	3-4
# ::node	0.1	this	2-3
# ::node	0.2	i	0-1
# ::node	0.3	as-well	5-7
# ::root	0	do-02
# ::edge	do-02	ARG0	i	0	0.2
# ::edge	do-02	ARG1	this	0	0.1
# ::edge	do-02	frequency	1	0	0.0
# ::edge	do-02	mod	as-well	0	0.3
(MRPNode-0 / do-02 :frequency 1 :ARG1 (MRPNode-1 / this) :ARG0 (MRPNode-2 / i) :mod (MRPNode-3 / as-well))

# ::id 799
# ::snt You should just ask your boss what he wants you to do.
# ::tok You should just ask your boss what he wants you to do .
# ::alignments 1-2|0 2-3|0.0.2 3-4|0.0 4-5|0.0.1 5-6|0.0.1.0+0.0.1.0.0 8-9|0.0.0.0.0+0.0.0.0.0.0 11-12|0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.568209 ::parser eager_oracle ::smatch 1.0 ::n_actions 53
# ::node	0	recommend-01	1-2
# ::node	0.0	ask-01	3-4
# ::node	0.0.0	thing	11-12
# ::node	0.0.0.0	do-02	11-12
# ::node	0.0.0.0.0	person	8-9
# ::node	0.0.0.0.0.0	want-01	8-9
# ::node	0.0.1	you	4-5
# ::node	0.0.1.0	have-rel-role-91	5-6
# ::node	0.0.1.0.0	boss	5-6
# ::node	0.0.2	just	2-3
# ::root	0	recommend-01
# ::edge	ask-01	ARG0	thing	0.0	0.0.0
# ::edge	ask-01	ARG0	you	0.0	0.0.1
# ::edge	ask-01	ARG2	person	0.0	0.0.0.0.0
# ::edge	ask-01	mod	just	0.0	0.0.2
# ::edge	do-02	ARG0	person	0.0.0.0	0.0.0.0.0
# ::edge	have-rel-role-91	ARG0	person	0.0.1.0	0.0.0.0.0
# ::edge	have-rel-role-91	ARG2	boss	0.0.1.0	0.0.1.0.0
# ::edge	person	ARG0-of	want-01	0.0.0.0.0	0.0.0.0.0.0
# ::edge	recommend-01	ARG1	ask-01	0	0.0
# ::edge	thing	ARG1-of	do-02	0.0.0	0.0.0.0
# ::edge	want-01	ARG1	do-02	0.0.0.0.0.0	0.0.0.0
# ::edge	you	ARG1-of	have-rel-role-91	0.0.1	0.0.1.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / ask-01 :ARG0 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / do-02 :ARG0 (MRPNode-8 / person :ARG0-of (MRPNode-9 / want-01 :ARG1 MRPNode-3)))) :ARG0 (MRPNode-4 / you :ARG1-of (MRPNode-5 / have-rel-role-91 :ARG2 (MRPNode-6 / boss) :ARG0 MRPNode-8)) :mod (MRPNode-7 / just) :ARG2 MRPNode-8))

# ::id 800
# ::snt It depends on what you want to have in your tank.
# ::tok It depends on what you want to have in your tank .
# ::alignments 0-1|0.1 1-2|0 5-6|0.0+0.0.0+0.0.0.1 9-10|0.0.0.0 10-11|0.0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:54.581555 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	depend-01	1-2
# ::node	0.0	thing	5-6
# ::node	0.0.0	have-03	5-6
# ::node	0.0.0.0	you	9-10
# ::node	0.0.0.1	want-01	5-6
# ::node	0.0.0.2	tank	10-11
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	thing	0	0.0
# ::edge	have-03	ARG0	you	0.0.0	0.0.0.0
# ::edge	have-03	ARG1-of	want-01	0.0.0	0.0.0.1
# ::edge	have-03	location	tank	0.0.0	0.0.0.2
# ::edge	tank	poss	you	0.0.0.2	0.0.0.0
# ::edge	thing	ARG1-of	have-03	0.0	0.0.0
# ::edge	want-01	ARG0	you	0.0.0.1	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / thing :ARG1-of (MRPNode-2 / have-03 :ARG0 (MRPNode-3 / you) :ARG1-of (MRPNode-4 / want-01 :ARG0 MRPNode-3) :location (MRPNode-5 / tank :poss MRPNode-3))) :ARG0 (MRPNode-6 / it))

# ::id 801
# ::snt You don't have to know.
# ::tok You do n't have to know .
# ::alignments 0-1|0.1 2-3|0.0 3-4|0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:54.585478 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	obligate-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	you	0-1
# ::node	0.2	know-01	5-6
# ::root	0	obligate-01
# ::edge	know-01	ARG0	you	0.2	0.1
# ::edge	obligate-01	ARG1	you	0	0.1
# ::edge	obligate-01	ARG2	know-01	0	0.2
# ::edge	obligate-01	polarity	-	0	0.0
(MRPNode-0 / obligate-01 :polarity - :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / know-01 :ARG0 MRPNode-1))

# ::id 802
# ::snt You can buy it on amazon for $5.
# ::tok You can buy it on amazon for $ 5 .
# ::alignments 0-1|0.0.1 1-2|0 2-3|0.0 3-4|0.0.0 5-6|0.0.2+0.0.2.0+0.0.2.0.0 8-9|0.0.3.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.592661 ::parser eager_oracle ::smatch 0.8387096774193548 ::n_actions 30
# ::node	0	possible-01	1-2
# ::node	0.0	buy-01	2-3
# ::node	0.0.0	it	3-4
# ::node	0.0.1	you	0-1
# ::node	0.0.2	company	5-6
# ::node	0.0.2.0	name	5-6
# ::node	0.0.2.0.0	amazon	5-6
# ::node	0.0.3	monetary-quantity	
# ::node	0.0.3.0	5	8-9
# ::node	0.0.3.1	dollar	
# ::root	0	possible-01
# ::edge	buy-01	ARG0	you	0.0	0.0.1
# ::edge	buy-01	ARG1	it	0.0	0.0.0
# ::edge	buy-01	ARG3	company	0.0	0.0.2
# ::edge	buy-01	ARG3	monetary-quantity	0.0	0.0.3
# ::edge	company	name	name	0.0.2	0.0.2.0
# ::edge	monetary-quantity	quant	5	0.0.3	0.0.3.0
# ::edge	monetary-quantity	unit	dollar	0.0.3	0.0.3.1
# ::edge	name	op1	amazon	0.0.2.0	0.0.2.0.0
# ::edge	possible-01	ARG1	buy-01	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / buy-01 :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / you) :ARG3 (MRPNode-4 / company :name (MRPNode-5 / name :op1 amazon)) :ARG3 (MRPNode-6 / monetary-quantity :quant 5 :unit (MRPNode-7 / dollar))))

# ::id 803
# ::snt You might have to try a variety before you find one that clicks with him.
# ::tok You might have to try a variety before you find one that clicks with him .
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.0 4-5|0.0.1 6-7|0.0.1.0 7-8|0.0.1.1 9-10|0.0.0.0 12-13|0.0.0.0.0+0.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.644031 ::parser eager_oracle ::smatch 0.9545454545454545 ::n_actions 53
# ::node	0	possible-01	1-2
# ::node	0.0	obligate-01	2-3
# ::node	0.0.0	you	0-1
# ::node	0.0.0.0	find-01	9-10
# ::node	0.0.0.0.0	thing	12-13
# ::node	0.0.0.0.0.0	click-01	12-13
# ::node	0.0.0.0.0.0.0	he	
# ::node	0.0.1	try-01	4-5
# ::node	0.0.1.0	variety	6-7
# ::node	0.0.1.1	before	7-8
# ::root	0	possible-01
# ::edge	before	op1	find-01	0.0.1.1	0.0.0.0
# ::edge	click-01	accompanier	he	0.0.0.0.0.0	0.0.0.0.0.0.0
# ::edge	find-01	ARG1	thing	0.0.0.0	0.0.0.0.0
# ::edge	obligate-01	ARG1	you	0.0	0.0.0
# ::edge	obligate-01	ARG2	try-01	0.0	0.0.1
# ::edge	possible-01	ARG1	obligate-01	0	0.0
# ::edge	thing	ARG0-of	click-01	0.0.0.0.0	0.0.0.0.0.0
# ::edge	try-01	ARG0	you	0.0.1	0.0.0
# ::edge	try-01	ARG1	variety	0.0.1	0.0.1.0
# ::edge	try-01	time	before	0.0.1	0.0.1.1
# ::edge	variety	op1	find-01	0.0.1.0	0.0.0.0
# ::edge	you	ARG0-of	find-01	0.0.0	0.0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / obligate-01 :ARG1 (MRPNode-2 / you :ARG0-of (MRPNode-3 / find-01 :ARG1 (MRPNode-4 / thing :ARG0-of (MRPNode-5 / click-01 :accompanier (MRPNode-6 / he))))) :ARG2 (MRPNode-7 / try-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-8 / variety :op1 MRPNode-3) :time (MRPNode-9 / before :op1 MRPNode-3))))

# ::id 804
# ::snt From what I understand this is what you can do :
# ::tok From what I understand this is what you can do :
# ::alignments 2-3|0.1 3-4|0 4-5|0.0.1 7-8|0.0.0.0 8-9|0.0.0.1 9-10|0.0+0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.658881 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	understand-01	3-4
# ::node	0.0	thing	9-10
# ::node	0.0.0	do-02	9-10
# ::node	0.0.0.0	you	7-8
# ::node	0.0.0.1	possible-01	8-9
# ::node	0.0.1	this	4-5
# ::node	0.1	i	2-3
# ::root	0	understand-01
# ::edge	do-02	ARG0	you	0.0.0	0.0.0.0
# ::edge	do-02	ARG1-of	possible-01	0.0.0	0.0.0.1
# ::edge	thing	ARG1-of	do-02	0.0	0.0.0
# ::edge	thing	domain	this	0.0	0.0.1
# ::edge	understand-01	ARG0	i	0	0.1
# ::edge	understand-01	ARG1	thing	0	0.0
(MRPNode-0 / understand-01 :ARG1 (MRPNode-1 / thing :ARG1-of (MRPNode-2 / do-02 :ARG0 (MRPNode-3 / you) :ARG1-of (MRPNode-4 / possible-01)) :domain (MRPNode-5 / this)) :ARG0 (MRPNode-6 / i))

# ::id 805
# ::snt I'd say it primarily depends on two things:
# ::tok I 'd say it primarily depends on two things :
# ::alignments 0-1|0.1 2-3|0 3-4|0.0.0 4-5|0.0.1 5-6|0.0 7-8|0.0.2.0 8-9|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:54.684226 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	say-01	2-3
# ::node	0.0	depend-01	5-6
# ::node	0.0.0	it	3-4
# ::node	0.0.1	primary	4-5
# ::node	0.0.2	thing	8-9
# ::node	0.0.2.0	2	7-8
# ::node	0.1	i	0-1
# ::root	0	say-01
# ::edge	depend-01	ARG1	it	0.0	0.0.0
# ::edge	depend-01	ARG1	thing	0.0	0.0.2
# ::edge	depend-01	mod	primary	0.0	0.0.1
# ::edge	say-01	ARG0	i	0	0.1
# ::edge	say-01	ARG1	depend-01	0	0.0
# ::edge	thing	quant	2	0.0.2	0.0.2.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / depend-01 :ARG1 (MRPNode-2 / it) :mod (MRPNode-3 / primary) :ARG1 (MRPNode-4 / thing :quant 2)) :ARG0 (MRPNode-5 / i))

# ::id 806
# ::snt I am not sure this is the right site for the question.
# ::tok I am not sure this is the right site for the question .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 4-5|0.1.1 7-8|0.1.0 8-9|0.1 11-12|0.1.2 ::annotator aligner3.py ::date 2021-03-11 23:00:54.691360 ::parser eager_oracle ::smatch 1.0 ::n_actions 36
# ::node	0	sure-02	3-4
# ::node	0.0	-	2-3
# ::node	0.1	site	8-9
# ::node	0.1.0	right-02	7-8
# ::node	0.1.1	this	4-5
# ::node	0.1.2	question-01	11-12
# ::node	0.2	i	0-1
# ::root	0	sure-02
# ::edge	site	ARG1-of	right-02	0.1	0.1.0
# ::edge	site	domain	this	0.1	0.1.1
# ::edge	site	purpose	question-01	0.1	0.1.2
# ::edge	sure-02	ARG0	i	0	0.2
# ::edge	sure-02	ARG1	site	0	0.1
# ::edge	sure-02	polarity	-	0	0.0
(MRPNode-0 / sure-02 :polarity - :ARG1 (MRPNode-1 / site :ARG1-of (MRPNode-2 / right-02) :domain (MRPNode-3 / this) :purpose (MRPNode-4 / question-01)) :ARG0 (MRPNode-5 / i))

# ::id 807
# ::snt You are not disclosing key info.
# ::tok You are not disclosing key info .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 4-5|0.1.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:54.694284 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	disclose-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	information	5-6
# ::node	0.1.0	key-02	4-5
# ::node	0.2	you	0-1
# ::root	0	disclose-01
# ::edge	disclose-01	ARG0	you	0	0.2
# ::edge	disclose-01	ARG1	information	0	0.1
# ::edge	disclose-01	polarity	-	0	0.0
# ::edge	information	ARG1-of	key-02	0.1	0.1.0
(MRPNode-0 / disclose-01 :polarity - :ARG1 (MRPNode-1 / information :ARG1-of (MRPNode-2 / key-02)) :ARG0 (MRPNode-3 / you))

# ::id 808
# ::snt It very much depends on the grant in question.
# ::tok It very much depends on the grant in question .
# ::alignments 0-1|0.1 1-2|0.2.0 2-3|0.2 3-4|0 6-7|0.0+0.0.0 8-9|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.708334 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	depend-01	3-4
# ::node	0.0	thing	6-7
# ::node	0.0.0	grant-01	6-7
# ::node	0.0.0.0	question-01	8-9
# ::node	0.1	it	0-1
# ::node	0.2	much	2-3
# ::node	0.2.0	very	1-2
# ::root	0	depend-01
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	thing	0	0.0
# ::edge	depend-01	degree	much	0	0.2
# ::edge	grant-01	ARG1-of	question-01	0.0.0	0.0.0.0
# ::edge	much	degree	very	0.2	0.2.0
# ::edge	thing	ARG1-of	grant-01	0.0	0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / thing :ARG1-of (MRPNode-2 / grant-01 :ARG1-of (MRPNode-3 / question-01))) :ARG0 (MRPNode-4 / it) :degree (MRPNode-5 / much :degree (MRPNode-6 / very)))

# ::id 809
# ::snt It depends on what they are.
# ::tok It depends on what they are .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.710575 ::parser eager_oracle ::smatch 0.6666666666666666 ::n_actions 17
# ::node	0	depend-01	1-2
# ::node	0.0	thing	
# ::node	0.0.0	they	4-5
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	thing	0	0.0
# ::edge	thing	domain	they	0.0	0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / thing :domain (MRPNode-2 / they)) :ARG0 (MRPNode-3 / it))

# ::id 810
# ::snt There's not a lot you can do about that.
# ::tok There 's not a lot you can do about that .
# ::alignments 2-3|0.0.0.0 4-5|0.0.0 5-6|0.0.1 6-7|0 7-8|0.0 9-10|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:54.722481 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	possible-01	6-7
# ::node	0.0	do-02	7-8
# ::node	0.0.0	lot	4-5
# ::node	0.0.0.0	-	2-3
# ::node	0.0.1	you	5-6
# ::node	0.0.2	that	9-10
# ::root	0	possible-01
# ::edge	do-02	ARG0	you	0.0	0.0.1
# ::edge	do-02	ARG1	lot	0.0	0.0.0
# ::edge	do-02	ARG2	that	0.0	0.0.2
# ::edge	lot	polarity	-	0.0.0	0.0.0.0
# ::edge	possible-01	ARG1	do-02	0	0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / lot :polarity -) :ARG0 (MRPNode-3 / you) :ARG2 (MRPNode-4 / that)))

# ::id 811
# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tok You just have to base your answer on what you do know , which is what you want .
# ::alignments 0-1|0.0 1-2|0.1 2-3|0 4-5|0.2 6-7|0.0.2 11-12|0.0.0 17-18|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:54.862269 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 48
# ::node	0	obligate-01	2-3
# ::node	0.0	you	0-1
# ::node	0.0.0	know-01	11-12
# ::node	0.0.0.0	thing	
# ::node	0.0.1	want-01	17-18
# ::node	0.0.2	answer-01	6-7
# ::node	0.1	just	1-2
# ::node	0.2	base-02	4-5
# ::root	0	obligate-01
# ::edge	base-02	ARG0	you	0.2	0.0
# ::edge	base-02	ARG1	answer-01	0.2	0.0.2
# ::edge	base-02	ARG1	thing	0.2	0.0.0.0
# ::edge	know-01	ARG1	thing	0.0.0	0.0.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	base-02	0	0.2
# ::edge	obligate-01	mod	just	0	0.1
# ::edge	you	ARG0-of	answer-01	0.0	0.0.2
# ::edge	you	ARG0-of	know-01	0.0	0.0.0
# ::edge	you	ARG0-of	want-01	0.0	0.0.1
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / know-01 :ARG1 (MRPNode-7 / thing)) :ARG0-of (MRPNode-3 / want-01) :ARG0-of (MRPNode-4 / answer-01)) :mod (MRPNode-5 / just) :ARG2 (MRPNode-6 / base-02 :ARG0 MRPNode-1 :ARG1 MRPNode-4 :ARG1 MRPNode-7))

# ::id 812
# ::snt This is not a good idea.
# ::tok This is not a good idea .
# ::alignments 0-1|0.1 2-3|0.0.0 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.864204 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	idea	5-6
# ::node	0.0	good-02	4-5
# ::node	0.0.0	-	2-3
# ::node	0.1	this	0-1
# ::root	0	idea
# ::edge	good-02	polarity	-	0.0	0.0.0
# ::edge	idea	ARG1-of	good-02	0	0.0
# ::edge	idea	domain	this	0	0.1
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / good-02 :polarity -) :domain (MRPNode-2 / this))

# ::id 813
# ::snt I'd say it primarily depends on two things:
# ::tok I 'd say it primarily depends on two things :
# ::alignments 0-1|0.1 2-3|0 3-4|0.0.0 4-5|0.0.1 5-6|0.0 7-8|0.0.2.0 8-9|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:54.886683 ::parser eager_oracle ::smatch 1.0 ::n_actions 33
# ::node	0	say-01	2-3
# ::node	0.0	depend-01	5-6
# ::node	0.0.0	it	3-4
# ::node	0.0.1	primary	4-5
# ::node	0.0.2	thing	8-9
# ::node	0.0.2.0	2	7-8
# ::node	0.1	i	0-1
# ::root	0	say-01
# ::edge	depend-01	ARG1	it	0.0	0.0.0
# ::edge	depend-01	ARG1	thing	0.0	0.0.2
# ::edge	depend-01	mod	primary	0.0	0.0.1
# ::edge	say-01	ARG0	i	0	0.1
# ::edge	say-01	ARG1	depend-01	0	0.0
# ::edge	thing	quant	2	0.0.2	0.0.2.0
(MRPNode-0 / say-01 :ARG1 (MRPNode-1 / depend-01 :ARG1 (MRPNode-2 / it) :mod (MRPNode-3 / primary) :ARG1 (MRPNode-4 / thing :quant 2)) :ARG0 (MRPNode-5 / i))

# ::id 814
# ::snt I have the same thing.
# ::tok I have the same thing .
# ::alignments 0-1|0.1 1-2|0 3-4|0.0.0 4-5|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.891005 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	have-03	1-2
# ::node	0.0	thing	4-5
# ::node	0.0.0	same-01	3-4
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	thing	0	0.0
# ::edge	thing	ARG1-of	same-01	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / thing :ARG1-of (MRPNode-2 / same-01)) :ARG0 (MRPNode-3 / i))

# ::id 815
# ::snt You can use it, too.
# ::tok You can use it , too .
# ::alignments 0-1|0.0.1 1-2|0 2-3|0.0 3-4|0.0.0 5-6|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:54.894116 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	possible-01	1-2
# ::node	0.0	use-01	2-3
# ::node	0.0.0	it	3-4
# ::node	0.0.1	you	0-1
# ::node	0.0.2	too	5-6
# ::root	0	possible-01
# ::edge	possible-01	ARG1	use-01	0	0.0
# ::edge	use-01	ARG0	you	0.0	0.0.1
# ::edge	use-01	ARG1	it	0.0	0.0.0
# ::edge	use-01	mod	too	0.0	0.0.2
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / use-01 :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / you) :mod (MRPNode-4 / too)))

# ::id 816
# ::snt It really depends on how the employer documents it.
# ::tok It really depends on how the employer documents it .
# ::alignments 1-2|0.1 2-3|0 6-7|0.0.0.0+0.0.0.0.0 7-8|0.0+0.0.0 8-9|0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:54.904559 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	depend-01	2-3
# ::node	0.0	thing	7-8
# ::node	0.0.0	document-01	7-8
# ::node	0.0.0.0	person	6-7
# ::node	0.0.0.0.0	employ-01	6-7
# ::node	0.0.0.1	it	8-9
# ::node	0.1	real-04	1-2
# ::root	0	depend-01
# ::edge	depend-01	ARG0	it	0	0.0.0.1
# ::edge	depend-01	ARG1	thing	0	0.0
# ::edge	depend-01	ARG1-of	real-04	0	0.1
# ::edge	document-01	ARG0	person	0.0.0	0.0.0.0
# ::edge	document-01	ARG1	it	0.0.0	0.0.0.1
# ::edge	person	ARG0-of	employ-01	0.0.0.0	0.0.0.0.0
# ::edge	thing	manner-of	document-01	0.0	0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / thing :manner-of (MRPNode-2 / document-01 :ARG0 (MRPNode-3 / person :ARG0-of (MRPNode-4 / employ-01)) :ARG1 (MRPNode-5 / it))) :ARG0 MRPNode-5 :ARG1-of (MRPNode-6 / real-04))

# ::id 817
# ::snt I've had this same problem.
# ::tok I 've had this same problem .
# ::alignments 0-1|0.1 2-3|0 3-4|0.0.0 4-5|0.0.1 5-6|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.907585 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	have-03	2-3
# ::node	0.0	problem	5-6
# ::node	0.0.0	this	3-4
# ::node	0.0.1	same-01	4-5
# ::node	0.1	i	0-1
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.1
# ::edge	have-03	ARG1	problem	0	0.0
# ::edge	problem	ARG1-of	same-01	0.0	0.0.1
# ::edge	problem	mod	this	0.0	0.0.0
(MRPNode-0 / have-03 :ARG1 (MRPNode-1 / problem :mod (MRPNode-2 / this) :ARG1-of (MRPNode-3 / same-01)) :ARG0 (MRPNode-4 / i))

# ::id 818
# ::snt It depends on the dish and how amenable it is at the stage you make the mistake.
# ::tok It depends on the dish and how amenable it is at the stage you make the mistake .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0 5-6|0.0 12-13|0.0.0.0 13-14|0.0.1.0.0.0 16-17|0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:54.922139 ::parser eager_oracle ::smatch 0.8125000000000001 ::n_actions 41
# ::node	0	depend-01	1-2
# ::node	0.0	and	5-6
# ::node	0.0.0	dish	4-5
# ::node	0.0.0.0	stage	12-13
# ::node	0.0.1	thing	
# ::node	0.0.1.0	enable-01	
# ::node	0.0.1.0.0	mistake-02	16-17
# ::node	0.0.1.0.0.0	you	13-14
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	and	op1	dish	0.0	0.0.0
# ::edge	and	op2	thing	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	dish	ARG1-of	stage	0.0.0	0.0.0.0
# ::edge	enable-01	ARG0	mistake-02	0.0.1.0	0.0.1.0.0
# ::edge	mistake-02	ARG0	you	0.0.1.0.0	0.0.1.0.0.0
# ::edge	thing	degree-of	enable-01	0.0.1	0.0.1.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / dish :ARG1-of (MRPNode-3 / stage)) :op2 (MRPNode-4 / thing :degree-of (MRPNode-5 / enable-01 :ARG0 (MRPNode-6 / mistake-02 :ARG0 (MRPNode-7 / you))))) :ARG0 (MRPNode-8 / it))

# ::id 819
# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tok You just have to base your answer on what you do know , which is what you want .
# ::alignments 0-1|0.0 1-2|0.1 2-3|0 4-5|0.2 6-7|0.0.2 11-12|0.0.0 17-18|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:55.056943 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 48
# ::node	0	obligate-01	2-3
# ::node	0.0	you	0-1
# ::node	0.0.0	know-01	11-12
# ::node	0.0.0.0	thing	
# ::node	0.0.1	want-01	17-18
# ::node	0.0.2	answer-01	6-7
# ::node	0.1	just	1-2
# ::node	0.2	base-02	4-5
# ::root	0	obligate-01
# ::edge	base-02	ARG0	you	0.2	0.0
# ::edge	base-02	ARG1	answer-01	0.2	0.0.2
# ::edge	base-02	ARG1	thing	0.2	0.0.0.0
# ::edge	know-01	ARG1	thing	0.0.0	0.0.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	base-02	0	0.2
# ::edge	obligate-01	mod	just	0	0.1
# ::edge	you	ARG0-of	answer-01	0.0	0.0.2
# ::edge	you	ARG0-of	know-01	0.0	0.0.0
# ::edge	you	ARG0-of	want-01	0.0	0.0.1
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / know-01 :ARG1 (MRPNode-7 / thing)) :ARG0-of (MRPNode-3 / want-01) :ARG0-of (MRPNode-4 / answer-01)) :mod (MRPNode-5 / just) :ARG2 (MRPNode-6 / base-02 :ARG0 MRPNode-1 :ARG1 MRPNode-4 :ARG1 MRPNode-7))

# ::id 820
# ::snt That's what I believe.
# ::tok That 's what I believe .
# ::alignments 0-1|0.0 3-4|0.1 4-5|0 ::annotator aligner3.py ::date 2021-03-11 23:00:55.059040 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	believe-01	4-5
# ::node	0.0	that	0-1
# ::node	0.1	i	3-4
# ::root	0	believe-01
# ::edge	believe-01	ARG0	i	0	0.1
# ::edge	believe-01	ARG1	that	0	0.0
(MRPNode-0 / believe-01 :ARG1 (MRPNode-1 / that) :ARG0 (MRPNode-2 / i))

# ::id 821
# ::snt If you are not sure how to do it, don't do it at all.
# ::tok If you are not sure how to do it , do n't do it at all .
# ::alignments 1-2|0.3 3-4|0.5.0 4-5|0.5 7-8|0 8-9|0.2 10-11|0.2.0 11-12|0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:55.064786 ::parser eager_oracle ::smatch 0.7878787878787878 ::n_actions 41
# ::node	0	do-02	7-8
# ::node	0.0	-	11-12
# ::node	0.1	imperative	
# ::node	0.2	it	8-9
# ::node	0.2.0	do-02	10-11
# ::node	0.2.0.0	thing	
# ::node	0.3	you	1-2
# ::node	0.4	at-all	
# ::node	0.5	sure-02	4-5
# ::node	0.5.0	-	3-4
# ::root	0	do-02
# ::edge	do-02	ARG0	you	0	0.3
# ::edge	do-02	ARG1	it	0	0.2
# ::edge	do-02	condition	sure-02	0	0.5
# ::edge	do-02	manner	thing	0.2.0	0.2.0.0
# ::edge	do-02	mod	at-all	0	0.4
# ::edge	do-02	mode	imperative	0	0.1
# ::edge	do-02	polarity	-	0	0.0
# ::edge	it	ARG1-of	do-02	0.2	0.2.0
# ::edge	sure-02	ARG0	you	0.5	0.3
# ::edge	sure-02	ARG1	thing	0.5	0.2.0.0
# ::edge	sure-02	arg1	-	0.5	0.5.0
(MRPNode-0 / do-02 :polarity - :mode imperative :ARG1 (MRPNode-1 / it :ARG1-of (MRPNode-2 / do-02 :manner (MRPNode-6 / thing))) :ARG0 (MRPNode-3 / you) :mod (MRPNode-4 / at-all) :condition (MRPNode-5 / sure-02 :arg1 - :ARG0 MRPNode-3 :ARG1 MRPNode-6))

# ::id 822
# ::snt I would say you can do it, but it wouldn't be advised.
# ::tok I would say you can do it , but it would n't be advised .
# ::alignments 0-1|0.0.1 2-3|0.0 3-4|0.0.0.0.0 4-5|0.0.0 5-6|0.0.0.0 6-7|0.0.0.0.1 8-9|0 11-12|0.1.0 13-14|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:55.467364 ::parser eager_oracle ::smatch 1.0 ::n_actions 48
# ::node	0	contrast-01	8-9
# ::node	0.0	say-01	2-3
# ::node	0.0.0	possible-01	4-5
# ::node	0.0.0.0	do-02	5-6
# ::node	0.0.0.0.0	you	3-4
# ::node	0.0.0.0.1	it	6-7
# ::node	0.0.1	i	0-1
# ::node	0.1	advise-01	13-14
# ::node	0.1.0	-	11-12
# ::root	0	contrast-01
# ::edge	advise-01	ARG1	it	0.1	0.0.0.0.1
# ::edge	advise-01	polarity	-	0.1	0.1.0
# ::edge	contrast-01	ARG1	say-01	0	0.0
# ::edge	contrast-01	ARG2	advise-01	0	0.1
# ::edge	do-02	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	do-02	ARG1	it	0.0.0.0	0.0.0.0.1
# ::edge	possible-01	ARG1	do-02	0.0.0	0.0.0.0
# ::edge	say-01	ARG0	i	0.0	0.0.1
# ::edge	say-01	ARG1	possible-01	0.0	0.0.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / say-01 :ARG1 (MRPNode-2 / possible-01 :ARG1 (MRPNode-3 / do-02 :ARG0 (MRPNode-4 / you) :ARG1 (MRPNode-7 / it))) :ARG0 (MRPNode-5 / i)) :ARG2 (MRPNode-6 / advise-01 :polarity - :ARG1 MRPNode-7))

# ::id 823
# ::snt I would say you can do it, but it wouldn't be advised.
# ::tok I would say you can do it , but it would n't be advised .
# ::alignments 0-1|0.0.1 2-3|0.0 3-4|0.0.0.0.0 4-5|0.0.0 5-6|0.0.0.0 6-7|0.0.0.0.1 8-9|0 11-12|0.1.0 13-14|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:55.855918 ::parser eager_oracle ::smatch 1.0 ::n_actions 48
# ::node	0	contrast-01	8-9
# ::node	0.0	say-01	2-3
# ::node	0.0.0	possible-01	4-5
# ::node	0.0.0.0	do-02	5-6
# ::node	0.0.0.0.0	you	3-4
# ::node	0.0.0.0.1	it	6-7
# ::node	0.0.1	i	0-1
# ::node	0.1	advise-01	13-14
# ::node	0.1.0	-	11-12
# ::root	0	contrast-01
# ::edge	advise-01	ARG1	it	0.1	0.0.0.0.1
# ::edge	advise-01	polarity	-	0.1	0.1.0
# ::edge	contrast-01	ARG1	say-01	0	0.0
# ::edge	contrast-01	ARG2	advise-01	0	0.1
# ::edge	do-02	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	do-02	ARG1	it	0.0.0.0	0.0.0.0.1
# ::edge	possible-01	ARG1	do-02	0.0.0	0.0.0.0
# ::edge	say-01	ARG0	i	0.0	0.0.1
# ::edge	say-01	ARG1	possible-01	0.0	0.0.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / say-01 :ARG1 (MRPNode-2 / possible-01 :ARG1 (MRPNode-3 / do-02 :ARG0 (MRPNode-4 / you) :ARG1 (MRPNode-7 / it))) :ARG0 (MRPNode-5 / i)) :ARG2 (MRPNode-6 / advise-01 :polarity - :ARG1 MRPNode-7))

# ::id 824
# ::snt This answer is based on my experience teaching undergraduate math in the US.
# ::tok This answer is based on my experience teaching undergraduate math in the US .
# ::alignments 0-1|0.0.0 1-2|0.0+0.0.1 3-4|0 5-6|0.1.0.2 6-7|0.1 7-8|0.1.0 8-9|0.1.0.0.0 9-10|0.1.0.0 12-13|0.1.0.1+0.1.0.1.0+0.1.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:55.869759 ::parser eager_oracle ::smatch 1.0 ::n_actions 49
# ::node	0	base-02	3-4
# ::node	0.0	thing	1-2
# ::node	0.0.0	this	0-1
# ::node	0.0.1	answer-01	1-2
# ::node	0.1	experience-01	6-7
# ::node	0.1.0	teach-01	7-8
# ::node	0.1.0.0	mathematics	9-10
# ::node	0.1.0.0.0	undergraduate	8-9
# ::node	0.1.0.1	country	12-13
# ::node	0.1.0.1.0	name	12-13
# ::node	0.1.0.1.0.0	us	12-13
# ::node	0.1.0.2	i	5-6
# ::root	0	base-02
# ::edge	base-02	ARG1	thing	0	0.0
# ::edge	base-02	ARG2	experience-01	0	0.1
# ::edge	country	name	name	0.1.0.1	0.1.0.1.0
# ::edge	experience-01	ARG0	i	0.1	0.1.0.2
# ::edge	experience-01	ARG1	teach-01	0.1	0.1.0
# ::edge	mathematics	mod	undergraduate	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	us	0.1.0.1.0	0.1.0.1.0.0
# ::edge	teach-01	ARG0	i	0.1.0	0.1.0.2
# ::edge	teach-01	ARG1	mathematics	0.1.0	0.1.0.0
# ::edge	teach-01	location	country	0.1.0	0.1.0.1
# ::edge	thing	ARG2-of	answer-01	0.0	0.0.1
# ::edge	thing	mod	this	0.0	0.0.0
(MRPNode-0 / base-02 :ARG1 (MRPNode-1 / thing :mod (MRPNode-2 / this) :ARG2-of (MRPNode-3 / answer-01)) :ARG2 (MRPNode-4 / experience-01 :ARG1 (MRPNode-5 / teach-01 :ARG1 (MRPNode-6 / mathematics :mod (MRPNode-7 / undergraduate)) :location (MRPNode-8 / country :name (MRPNode-9 / name :op1 us)) :ARG0 (MRPNode-10 / i)) :ARG0 MRPNode-10))

# ::id 825
# ::snt It depends on what you want to have in your tank.
# ::tok It depends on what you want to have in your tank .
# ::alignments 0-1|0.1 1-2|0 5-6|0.0+0.0.0+0.0.0.1 9-10|0.0.0.0 10-11|0.0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:00:55.880885 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	depend-01	1-2
# ::node	0.0	thing	5-6
# ::node	0.0.0	have-03	5-6
# ::node	0.0.0.0	you	9-10
# ::node	0.0.0.1	want-01	5-6
# ::node	0.0.0.2	tank	10-11
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	thing	0	0.0
# ::edge	have-03	ARG0	you	0.0.0	0.0.0.0
# ::edge	have-03	ARG1-of	want-01	0.0.0	0.0.0.1
# ::edge	have-03	location	tank	0.0.0	0.0.0.2
# ::edge	tank	poss	you	0.0.0.2	0.0.0.0
# ::edge	thing	ARG1-of	have-03	0.0	0.0.0
# ::edge	want-01	ARG0	you	0.0.0.1	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / thing :ARG1-of (MRPNode-2 / have-03 :ARG0 (MRPNode-3 / you) :ARG1-of (MRPNode-4 / want-01 :ARG0 MRPNode-3) :location (MRPNode-5 / tank :poss MRPNode-3))) :ARG0 (MRPNode-6 / it))

# ::id 826
# ::snt That is your problem, not your supervisor's.
# ::tok That is your problem , not your supervisor 's .
# ::alignments 0-1|0.0.0 3-4|0.0+0.1 5-6|0.1.0 6-7|0.0.1 7-8|0.0.1.0+0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:55.886086 ::parser eager_oracle ::smatch 0.7428571428571429 ::n_actions 37
# ::node	0	contrast-01	
# ::node	0.0	problem	3-4
# ::node	0.0.0	that	0-1
# ::node	0.0.1	you	6-7
# ::node	0.0.1.0	have-rel-role-91	7-8
# ::node	0.0.1.0.0	supervisor	7-8
# ::node	0.0.1.0.1	person	
# ::node	0.1	problem	3-4
# ::node	0.1.0	-	5-6
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	problem	0	0.0
# ::edge	contrast-01	ARG2	problem	0	0.1
# ::edge	have-rel-role-91	ARG0	person	0.0.1.0	0.0.1.0.1
# ::edge	have-rel-role-91	ARG2	supervisor	0.0.1.0	0.0.1.0.0
# ::edge	problem	domain	that	0.0	0.0.0
# ::edge	problem	domain	that	0.1	0.0.0
# ::edge	problem	polarity	-	0.1	0.1.0
# ::edge	problem	poss	person	0.1	0.0.1.0.1
# ::edge	problem	poss	you	0.0	0.0.1
# ::edge	problem	poss	you	0.1	0.0.1
# ::edge	you	ARG1-of	have-rel-role-91	0.0.1	0.0.1.0
(MRPNode-0 / contrast-01 :ARG1 (MRPNode-1 / problem :domain (MRPNode-2 / that) :poss (MRPNode-3 / you :ARG1-of (MRPNode-4 / have-rel-role-91 :ARG2 (MRPNode-5 / supervisor) :ARG0 (MRPNode-7 / person)))) :ARG2 (MRPNode-6 / problem :polarity - :domain MRPNode-2 :poss MRPNode-3 :poss MRPNode-7))

# ::id 827
# ::snt Yes, there is a reason to not do what you propose.
# ::tok Yes , there is a reason to not do what you propose .
# ::alignments 5-6|0+0.0+0.0.0.1 7-8|0.0.0.0 8-9|0.0.0 10-11|0.0.0.1.0.0 11-12|0.0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:55.891143 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	reason	5-6
# ::node	0.0	cause-01	5-6
# ::node	0.0.0	do-02	8-9
# ::node	0.0.0.0	-	7-8
# ::node	0.0.0.1	thing	5-6
# ::node	0.0.0.1.0	propose-01	11-12
# ::node	0.0.0.1.0.0	you	10-11
# ::root	0	reason
# ::edge	cause-01	ARG1	do-02	0.0	0.0.0
# ::edge	do-02	ARG1	thing	0.0.0	0.0.0.1
# ::edge	do-02	polarity	-	0.0.0	0.0.0.0
# ::edge	propose-01	ARG0	you	0.0.0.1.0	0.0.0.1.0.0
# ::edge	reason	ARG0-of	cause-01	0	0.0
# ::edge	thing	ARG1-of	propose-01	0.0.0.1	0.0.0.1.0
(MRPNode-0 / reason :ARG0-of (MRPNode-1 / cause-01 :ARG1 (MRPNode-2 / do-02 :polarity - :ARG1 (MRPNode-3 / thing :ARG1-of (MRPNode-4 / propose-01 :ARG0 (MRPNode-5 / you))))))

# ::id 828
# ::snt I think it is depends on the program.
# ::tok I think it is depends on the program .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1 4-5|0.0 7-8|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:55.896006 ::parser eager_oracle ::smatch 1.0 ::n_actions 26
# ::node	0	think-01	1-2
# ::node	0.0	depend-01	4-5
# ::node	0.0.0	program	7-8
# ::node	0.0.1	it	2-3
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	depend-01	ARG0	it	0.0	0.0.1
# ::edge	depend-01	ARG1	program	0.0	0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	depend-01	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / depend-01 :ARG1 (MRPNode-2 / program) :ARG0 (MRPNode-3 / it)) :ARG0 (MRPNode-4 / i))

# ::id 829
# ::snt I think you've pretty much done your review.
# ::tok I think you 've pretty much done your review .
# ::alignments 0-1|0.1 3-4|0 4-5|0.0.1 6-7|0.0 7-8|0.0.0.0 8-9|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:55.925952 ::parser eager_oracle ::smatch 1.0 ::n_actions 31
# ::node	0	think-01	3-4
# ::node	0.0	do-02	6-7
# ::node	0.0.0	review-01	8-9
# ::node	0.0.0.0	you	7-8
# ::node	0.0.1	pretty-much	4-5
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	do-02	ARG0	you	0.0	0.0.0.0
# ::edge	do-02	ARG1	review-01	0.0	0.0.0
# ::edge	do-02	degree	pretty-much	0.0	0.0.1
# ::edge	review-01	ARG0	you	0.0.0	0.0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	do-02	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / do-02 :ARG1 (MRPNode-2 / review-01 :ARG0 (MRPNode-3 / you)) :ARG0 MRPNode-3 :degree (MRPNode-4 / pretty-much)) :ARG0 (MRPNode-5 / i))

# ::id 830
# ::snt You burn more Calories digesting protein than you do carbohydrates and fat.
# ::tok You burn more Calories digesting protein than you do carbohydrates and fat .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1.0 3-4|0.0+0.0.0+0.0.0.0 4-5|0.1.0 5-6|0.1.0.0 9-10|0.0.1.1.0 10-11|0.0.1.1 11-12|0.0.1.1.1 ::annotator aligner3.py ::date 2021-03-11 23:00:55.943452 ::parser eager_oracle ::smatch 0.8095238095238095 ::n_actions 41
# ::node	0	burn-01	1-2
# ::node	0.0	product	3-4
# ::node	0.0.0	name	3-4
# ::node	0.0.0.0	calorie	3-4
# ::node	0.0.1	have-quant-91	
# ::node	0.0.1.0	more	2-3
# ::node	0.0.1.1	and	10-11
# ::node	0.0.1.1.0	carbohydrate	9-10
# ::node	0.0.1.1.1	fat	11-12
# ::node	0.1	you	0-1
# ::node	0.1.0	digest-01	4-5
# ::node	0.1.0.0	protein	5-6
# ::root	0	burn-01
# ::edge	and	op1	carbohydrate	0.0.1.1	0.0.1.1.0
# ::edge	and	op2	fat	0.0.1.1	0.0.1.1.1
# ::edge	burn-01	ARG0	you	0	0.1
# ::edge	burn-01	ARG1	product	0	0.0
# ::edge	digest-01	ARG1	protein	0.1.0	0.1.0.0
# ::edge	have-quant-91	ARG3	more	0.0.1	0.0.1.0
# ::edge	have-quant-91	ARG4	and	0.0.1	0.0.1.1
# ::edge	name	op1	calorie	0.0.0	0.0.0.0
# ::edge	product	name	name	0.0	0.0.0
# ::edge	product	quant	have-quant-91	0.0	0.0.1
# ::edge	you	ARG0-of	digest-01	0.1	0.1.0
(MRPNode-0 / burn-01 :ARG1 (MRPNode-1 / product :name (MRPNode-2 / name :op1 calorie) :quant (MRPNode-3 / have-quant-91 :ARG3 (MRPNode-4 / more) :ARG4 (MRPNode-5 / and :op1 (MRPNode-6 / carbohydrate) :op2 (MRPNode-7 / fat)))) :ARG0 (MRPNode-8 / you :ARG0-of (MRPNode-9 / digest-01 :ARG1 (MRPNode-10 / protein))))

# ::id 831
# ::snt I would look at this: U.S.
# ::tok I would look at this : U.S.
# ::alignments 0-1|0.1 2-3|0 4-5|0.2 6-7|0.0+0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:55.946059 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	look-01	2-3
# ::node	0.0	country	6-7
# ::node	0.0.0	name	6-7
# ::node	0.0.0.0	u.s.	6-7
# ::node	0.1	i	0-1
# ::node	0.2	this	4-5
# ::root	0	look-01
# ::edge	country	name	name	0.0	0.0.0
# ::edge	look-01	ARG0	i	0	0.1
# ::edge	look-01	ARG1	country	0	0.0
# ::edge	look-01	ARG1	this	0	0.2
# ::edge	name	op1	u.s.	0.0.0	0.0.0.0
(MRPNode-0 / look-01 :ARG1 (MRPNode-1 / country :name (MRPNode-2 / name :op1 u.s.)) :ARG0 (MRPNode-3 / i) :ARG1 (MRPNode-4 / this))

# ::id 832
# ::snt It looks to me that this is set up for what you want:
# ::tok It looks to me that this is set up for what you want :
# ::alignments 1-2|0 3-4|0.1 5-6|0.0.0 7-9|0.0 11-12|0.0.1.0.0 12-13|0.0.1+0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:55.952068 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	look-02	1-2
# ::node	0.0	set-up-03	7-9
# ::node	0.0.0	this	5-6
# ::node	0.0.1	thing	12-13
# ::node	0.0.1.0	want-01	12-13
# ::node	0.0.1.0.0	you	11-12
# ::node	0.1	i	3-4
# ::root	0	look-02
# ::edge	look-02	ARG0	i	0	0.1
# ::edge	look-02	ARG1	set-up-03	0	0.0
# ::edge	set-up-03	ARG1	this	0.0	0.0.0
# ::edge	set-up-03	purpose	thing	0.0	0.0.1
# ::edge	thing	ARG1-of	want-01	0.0.1	0.0.1.0
# ::edge	want-01	ARG0	you	0.0.1.0	0.0.1.0.0
(MRPNode-0 / look-02 :ARG1 (MRPNode-1 / set-up-03 :ARG1 (MRPNode-2 / this) :purpose (MRPNode-3 / thing :ARG1-of (MRPNode-4 / want-01 :ARG0 (MRPNode-5 / you)))) :ARG0 (MRPNode-6 / i))

# ::id 833
# ::snt It is impossible to answer this question without a form check.
# ::tok It is impossible to answer this question without a form check .
# ::alignments 2-3|0+0.0 4-5|0.1.1 5-6|0.1.1.0 6-7|0.1 7-8|0.1.0.0 9-10|0.1.0.1 10-11|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:55.965065 ::parser eager_oracle ::smatch 0.896551724137931 ::n_actions 39
# ::node	0	possible-01	2-3
# ::node	0.0	-	2-3
# ::node	0.1	answer-01	6-7
# ::node	0.1.0	check-01	10-11
# ::node	0.1.0.0	-	7-8
# ::node	0.1.0.1	form	9-10
# ::node	0.1.1	question-01	4-5
# ::node	0.1.1.0	this	5-6
# ::root	0	possible-01
# ::edge	answer-01	ARG1	check-01	0.1	0.1.0
# ::edge	answer-01	ARG1	question-01	0.1	0.1.1
# ::edge	check-01	ARG1	form	0.1.0	0.1.0.1
# ::edge	check-01	polarity	-	0.1.0	0.1.0.0
# ::edge	possible-01	ARG1	answer-01	0	0.1
# ::edge	possible-01	polarity	-	0	0.0
# ::edge	question-01	mod	this	0.1.1	0.1.1.0
(MRPNode-0 / possible-01 :polarity - :ARG1 (MRPNode-1 / answer-01 :ARG1 (MRPNode-2 / check-01 :polarity - :ARG1 (MRPNode-3 / form)) :ARG1 (MRPNode-4 / question-01 :mod (MRPNode-5 / this))))

# ::id 834
# ::snt You need to add this to your resume because it is the only position you have had.
# ::tok You need to add this to your resume because it is the only position you have had .
# ::alignments 0-1|0.0.2 1-2|0 3-4|0.0 4-5|0.0.1 7-8|0.0.0 8-9|0.1 12-13|0.0.2.0.0.0 13-14|0.0.2.0.0 15-16|0.0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:56.027402 ::parser eager_oracle ::smatch 1.0 ::n_actions 51
# ::node	0	need-01	1-2
# ::node	0.0	add-02	3-4
# ::node	0.0.0	resume	7-8
# ::node	0.0.1	this	4-5
# ::node	0.0.2	you	0-1
# ::node	0.0.2.0	have-03	15-16
# ::node	0.0.2.0.0	position-01	13-14
# ::node	0.0.2.0.0.0	only	12-13
# ::node	0.1	cause-01	8-9
# ::root	0	need-01
# ::edge	add-02	ARG0	you	0.0	0.0.2
# ::edge	add-02	ARG1	resume	0.0	0.0.0
# ::edge	add-02	ARG1	this	0.0	0.0.1
# ::edge	cause-01	ARG0	position-01	0.1	0.0.2.0.0
# ::edge	have-03	ARG1	position-01	0.0.2.0	0.0.2.0.0
# ::edge	need-01	ARG0	you	0	0.0.2
# ::edge	need-01	ARG1	add-02	0	0.0
# ::edge	need-01	ARG1-of	cause-01	0	0.1
# ::edge	position-01	mod	only	0.0.2.0.0	0.0.2.0.0.0
# ::edge	you	ARG0-of	have-03	0.0.2	0.0.2.0
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / add-02 :ARG1 (MRPNode-2 / resume) :ARG1 (MRPNode-3 / this) :ARG0 (MRPNode-4 / you :ARG0-of (MRPNode-5 / have-03 :ARG1 (MRPNode-7 / position-01 :mod (MRPNode-8 / only))))) :ARG0 MRPNode-4 :ARG1-of (MRPNode-6 / cause-01 :ARG0 MRPNode-7))

# ::id 835
# ::snt Yes, you should mention your experience.
# ::tok Yes , you should mention your experience .
# ::alignments 3-4|0 4-5|0.0 5-6|0.0.0.0.0 6-7|0.0.0+0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:00:56.030959 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	recommend-01	3-4
# ::node	0.0	mention-01	4-5
# ::node	0.0.0	thing	6-7
# ::node	0.0.0.0	experience-01	6-7
# ::node	0.0.0.0.0	you	5-6
# ::root	0	recommend-01
# ::edge	experience-01	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	mention-01	ARG0	thing	0.0	0.0.0
# ::edge	mention-01	ARG0	you	0.0	0.0.0.0.0
# ::edge	recommend-01	ARG1	mention-01	0	0.0
# ::edge	thing	ARG1-of	experience-01	0.0.0	0.0.0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / mention-01 :ARG0 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / experience-01 :ARG0 (MRPNode-4 / you))) :ARG0 MRPNode-4))

# ::id 836
# ::snt I think it is great that you had a test conducted.
# ::tok I think it is great that you had a test conducted .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0 6-7|0.0.0.0 9-10|0.0.0 10-11|0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:56.035585 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	think-01	1-2
# ::node	0.0	great	4-5
# ::node	0.0.0	test-01	9-10
# ::node	0.0.0.0	you	6-7
# ::node	0.0.0.1	conduct-01	10-11
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	great	domain	test-01	0.0	0.0.0
# ::edge	test-01	ARG0	you	0.0.0	0.0.0.0
# ::edge	test-01	ARG1-of	conduct-01	0.0.0	0.0.0.1
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	great	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / great :domain (MRPNode-2 / test-01 :ARG0 (MRPNode-3 / you) :ARG1-of (MRPNode-4 / conduct-01))) :ARG0 (MRPNode-5 / i))

# ::id 837
# ::snt I'm going to go out on a limb here...
# ::tok I 'm going to go out on a limb here ...
# ::alignments 0-1|0.0 4-6|0 8-9|0.2 9-10|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:56.037843 ::parser eager_oracle ::smatch 0.823529411764706 ::n_actions 25
# ::node	0	go-out-17	4-6
# ::node	0.0	i	0-1
# ::node	0.1	here	9-10
# ::node	0.2	limb	8-9
# ::root	0	go-out-17
# ::edge	go-out-17	ARG1	i	0	0.0
# ::edge	go-out-17	location	here	0	0.1
# ::edge	go-out-17	manner	limb	0	0.2
(MRPNode-0 / go-out-17 :ARG1 (MRPNode-1 / i) :location (MRPNode-2 / here) :manner (MRPNode-3 / limb))

# ::id 838
# ::snt If your long stay visa for Switzerland is valid, then you will not need a transit visa.
# ::tok If your long stay visa for Switzerland is valid , then you will not need a transit visa .
# ::alignments 2-3|0.1.1.0.0.0 3-4|0.1.1.0.0 4-5|0.1 6-7|0.1.1.0.1+0.1.1.0.1.0+0.1.1.0.1.0.0 8-9|0.2 11-12|0.1.1 13-14|0.0 14-15|0 16-17|0.1.0 17-18|0.1.1.0 ::annotator aligner3.py ::date 2021-03-11 23:00:56.071859 ::parser eager_oracle ::smatch 1.0 ::n_actions 63
# ::node	0	need-01	14-15
# ::node	0.0	-	13-14
# ::node	0.1	visa	4-5
# ::node	0.1.0	transit	16-17
# ::node	0.1.1	you	11-12
# ::node	0.1.1.0	visa	17-18
# ::node	0.1.1.0.0	stay-01	3-4
# ::node	0.1.1.0.0.0	long-03	2-3
# ::node	0.1.1.0.1	country	6-7
# ::node	0.1.1.0.1.0	name	6-7
# ::node	0.1.1.0.1.0.0	switzerland	6-7
# ::node	0.2	valid-02	8-9
# ::root	0	need-01
# ::edge	country	name	name	0.1.1.0.1	0.1.1.0.1.0
# ::edge	name	op1	switzerland	0.1.1.0.1.0	0.1.1.0.1.0.0
# ::edge	need-01	ARG0	you	0	0.1.1
# ::edge	need-01	ARG1	visa	0	0.1
# ::edge	need-01	condition	valid-02	0	0.2
# ::edge	need-01	polarity	-	0	0.0
# ::edge	stay-01	ARG1-of	long-03	0.1.1.0.0	0.1.1.0.0.0
# ::edge	valid-02	ARG1	visa	0.2	0.1.1.0
# ::edge	visa	destination	country	0.1.1.0	0.1.1.0.1
# ::edge	visa	mod	stay-01	0.1.1.0	0.1.1.0.0
# ::edge	visa	mod	transit	0.1	0.1.0
# ::edge	visa	poss	you	0.1	0.1.1
# ::edge	you	poss-of	visa	0.1.1	0.1.1.0
(MRPNode-0 / need-01 :polarity - :ARG1 (MRPNode-1 / visa :mod (MRPNode-2 / transit) :poss (MRPNode-3 / you :poss-of (MRPNode-4 / visa :mod (MRPNode-5 / stay-01 :ARG1-of (MRPNode-6 / long-03)) :destination (MRPNode-7 / country :name (MRPNode-8 / name :op1 switzerland))))) :ARG0 MRPNode-3 :condition (MRPNode-9 / valid-02 :ARG1 MRPNode-4))

# ::id 839
# ::snt Now you don't have to be perfect on every answer.
# ::tok Now you do n't have to be perfect on every answer .
# ::alignments 0-1|0.3 1-2|0.1 3-4|0.0 4-5|0 7-8|0.2 9-10|0.2.0.0 10-11|0.2.0+0.2.0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:56.078920 ::parser eager_oracle ::smatch 1.0 ::n_actions 42
# ::node	0	obligate-01	4-5
# ::node	0.0	-	3-4
# ::node	0.1	you	1-2
# ::node	0.2	perfect-02	7-8
# ::node	0.2.0	thing	10-11
# ::node	0.2.0.0	every	9-10
# ::node	0.2.0.1	answer-01	10-11
# ::node	0.3	now	0-1
# ::root	0	obligate-01
# ::edge	obligate-01	ARG1	you	0	0.1
# ::edge	obligate-01	ARG2	perfect-02	0	0.2
# ::edge	obligate-01	polarity	-	0	0.0
# ::edge	obligate-01	time	now	0	0.3
# ::edge	perfect-02	ARG1	you	0.2	0.1
# ::edge	perfect-02	ARG2	thing	0.2	0.2.0
# ::edge	thing	ARG2-of	answer-01	0.2.0	0.2.0.1
# ::edge	thing	mod	every	0.2.0	0.2.0.0
(MRPNode-0 / obligate-01 :polarity - :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / perfect-02 :ARG1 MRPNode-1 :ARG2 (MRPNode-3 / thing :mod (MRPNode-4 / every) :ARG2-of (MRPNode-5 / answer-01))) :time (MRPNode-6 / now))

# ::id 840
# ::snt Primer/paint will not work.
# ::tok Primer / paint will not work .
# ::alignments 0-1|0.1.0 1-2|0.1 2-3|0.1.1 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:00:56.081044 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	work-09	5-6
# ::node	0.0	-	4-5
# ::node	0.1	slash	1-2
# ::node	0.1.0	primer	0-1
# ::node	0.1.1	paint	2-3
# ::root	0	work-09
# ::edge	slash	op1	primer	0.1	0.1.0
# ::edge	slash	op2	paint	0.1	0.1.1
# ::edge	work-09	ARG1	slash	0	0.1
# ::edge	work-09	polarity	-	0	0.0
(MRPNode-0 / work-09 :polarity - :ARG1 (MRPNode-1 / slash :op1 (MRPNode-2 / primer) :op2 (MRPNode-3 / paint)))

# ::id 841
# ::snt The best thing you can do is to know your stuff.
# ::tok The best thing you can do is to know your stuff .
# ::alignments 1-2|0.0 2-3|0 3-4|0.1.0 4-5|0.1.1 5-6|0.1 8-9|0.2 10-11|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:00:56.444630 ::parser eager_oracle ::smatch 0.8717948717948718 ::n_actions 41
# ::node	0	thing	2-3
# ::node	0.0	good-02	1-2
# ::node	0.1	do-02	5-6
# ::node	0.1.0	you	3-4
# ::node	0.1.1	possible-01	4-5
# ::node	0.2	know-01	8-9
# ::node	0.2.0	stuff	10-11
# ::node	0.3	have-degree-91	
# ::node	0.3.0	most	
# ::root	0	thing
# ::edge	do-02	ARG0	you	0.1	0.1.0
# ::edge	do-02	ARG1-of	possible-01	0.1	0.1.1
# ::edge	have-degree-91	ARG2	good-02	0.3	0.0
# ::edge	have-degree-91	ARG3	most	0.3	0.3.0
# ::edge	know-01	ARG0	you	0.2	0.1.0
# ::edge	know-01	ARG1	stuff	0.2	0.2.0
# ::edge	know-01	ARG2	good-02	0.2	0.0
# ::edge	stuff	poss	you	0.2.0	0.1.0
# ::edge	thing	ARG1-of	do-02	0	0.1
# ::edge	thing	ARG1-of	good-02	0	0.0
# ::edge	thing	ARG1-of	have-degree-91	0	0.3
# ::edge	thing	ARG1-of	know-01	0	0.2
(MRPNode-0 / thing :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / do-02 :ARG0 (MRPNode-3 / you) :ARG1-of (MRPNode-4 / possible-01)) :ARG1-of (MRPNode-5 / know-01 :ARG2 MRPNode-1 :ARG0 MRPNode-3 :ARG1 (MRPNode-6 / stuff :poss MRPNode-3)) :ARG1-of (MRPNode-7 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-8 / most)))

# ::id 842
# ::snt I was in a similar situation.
# ::tok I was in a similar situation .
# ::alignments 0-1|0.0 2-3|0 4-5|0.1.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:00:56.446738 ::parser eager_oracle ::smatch 0.823529411764706 ::n_actions 21
# ::node	0	be-located-at-91	2-3
# ::node	0.0	i	0-1
# ::node	0.1	situation	5-6
# ::node	0.1.0	resemble-01	4-5
# ::root	0	be-located-at-91
# ::edge	be-located-at-91	ARG1	i	0	0.0
# ::edge	be-located-at-91	ARG2	situation	0	0.1
# ::edge	situation	ARG1-of	resemble-01	0.1	0.1.0
(MRPNode-0 / be-located-at-91 :ARG1 (MRPNode-1 / i) :ARG2 (MRPNode-2 / situation :ARG1-of (MRPNode-3 / resemble-01)))

# ::id 843
# ::snt Sometime if you really want it you might need to pay an agency to get the place for you.
# ::tok Sometime if you really want it you might need to pay an agency to get the place for you .
# ::alignments 0-1|0.0.0.1 3-4|0.1.1 4-5|0.1 5-6|0.1.0 7-8|0.0 8-9|0.0.0 10-11|0.0.0.0 12-13|0.0.0.0.0 14-15|0.0.0.0.1.0 16-17|0.0.0.0.1.0.0 18-19|0.0.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:05.385257 ::parser eager_oracle ::smatch 0.888888888888889 ::n_actions 61
# ::node	0	have-condition-91	
# ::node	0.0	possible-01	7-8
# ::node	0.0.0	need-01	8-9
# ::node	0.0.0.0	pay-01	10-11
# ::node	0.0.0.0.0	agency	12-13
# ::node	0.0.0.0.1	you	18-19
# ::node	0.0.0.0.1.0	get-01	14-15
# ::node	0.0.0.0.1.0.0	place	16-17
# ::node	0.0.0.1	sometime	0-1
# ::node	0.1	want-01	4-5
# ::node	0.1.0	it	5-6
# ::node	0.1.1	real-04	3-4
# ::root	0	have-condition-91
# ::edge	get-01	ARG0	agency	0.0.0.0.1.0	0.0.0.0.0
# ::edge	get-01	ARG1	place	0.0.0.0.1.0	0.0.0.0.1.0.0
# ::edge	have-condition-91	ARG1	possible-01	0	0.0
# ::edge	have-condition-91	ARG2	want-01	0	0.1
# ::edge	need-01	ARG0	you	0.0.0	0.0.0.0.1
# ::edge	need-01	ARG1	pay-01	0.0.0	0.0.0.0
# ::edge	need-01	time	sometime	0.0.0	0.0.0.1
# ::edge	pay-01	ARG0	you	0.0.0.0	0.0.0.0.1
# ::edge	pay-01	ARG2	agency	0.0.0.0	0.0.0.0.0
# ::edge	pay-01	ARG3	get-01	0.0.0.0	0.0.0.0.1.0
# ::edge	possible-01	ARG1	need-01	0.0	0.0.0
# ::edge	want-01	ARG0	you	0.1	0.0.0.0.1
# ::edge	want-01	ARG1	it	0.1	0.1.0
# ::edge	want-01	ARG1-of	real-04	0.1	0.1.1
# ::edge	you	ARG0-of	get-01	0.0.0.0.1	0.0.0.0.1.0
(MRPNode-0 / have-condition-91 :ARG1 (MRPNode-1 / possible-01 :ARG1 (MRPNode-2 / need-01 :ARG1 (MRPNode-3 / pay-01 :ARG2 (MRPNode-4 / agency) :ARG0 (MRPNode-8 / you :ARG0-of (MRPNode-9 / get-01 :ARG0 MRPNode-4 :ARG1 (MRPNode-10 / place))) :ARG3 MRPNode-9) :time (MRPNode-5 / sometime) :ARG0 MRPNode-8)) :ARG2 (MRPNode-6 / want-01 :ARG1 (MRPNode-7 / it) :ARG0 MRPNode-8 :ARG1-of (MRPNode-11 / real-04)))

# ::id 844
# ::snt Also it is useful to keep the consistency in your story.
# ::tok Also it is useful to keep the consistency in your story .
# ::alignments 0-1|0.0 3-4|0 5-6|0.1 7-8|0.1.0 9-10|0.1.0.0.0 10-11|0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:05.390607 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	useful-05	3-4
# ::node	0.0	also	0-1
# ::node	0.1	keep-02	5-6
# ::node	0.1.0	consistent-02	7-8
# ::node	0.1.0.0	story	10-11
# ::node	0.1.0.0.0	you	9-10
# ::root	0	useful-05
# ::edge	consistent-02	location	story	0.1.0	0.1.0.0
# ::edge	keep-02	ARG1	consistent-02	0.1	0.1.0
# ::edge	story	poss	you	0.1.0.0	0.1.0.0.0
# ::edge	useful-05	ARG1	also	0	0.0
# ::edge	useful-05	ARG2	keep-02	0	0.1
(MRPNode-0 / useful-05 :ARG1 (MRPNode-1 / also) :ARG2 (MRPNode-2 / keep-02 :ARG1 (MRPNode-3 / consistent-02 :location (MRPNode-4 / story :poss (MRPNode-5 / you)))))

# ::id 845
# ::snt Unfortunately the answer to your question is we simply do not know.
# ::tok Unfortunately the answer to your question is we simply do not know .
# ::alignments 0-1|0+0.0 2-3|0.1.0 4-5|0.1.0.0 5-6|0.1 7-8|0.1.1 8-9|0.1.2.1 10-11|0.1.2.0 11-12|0.1.2 ::annotator aligner3.py ::date 2021-03-11 23:01:05.474080 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	fortunate-01	0-1
# ::node	0.0	-	0-1
# ::node	0.1	answer-01	5-6
# ::node	0.1.0	question-01	2-3
# ::node	0.1.0.0	you	4-5
# ::node	0.1.1	we	7-8
# ::node	0.1.2	know-01	11-12
# ::node	0.1.2.0	-	10-11
# ::node	0.1.2.1	simple	8-9
# ::root	0	fortunate-01
# ::edge	answer-01	ARG1	question-01	0.1	0.1.0
# ::edge	answer-01	ARG2	know-01	0.1	0.1.2
# ::edge	answer-01	ARG2	we	0.1	0.1.1
# ::edge	fortunate-01	ARG2	answer-01	0	0.1
# ::edge	fortunate-01	polarity	-	0	0.0
# ::edge	know-01	ARG0	we	0.1.2	0.1.1
# ::edge	know-01	mod	simple	0.1.2	0.1.2.1
# ::edge	know-01	polarity	-	0.1.2	0.1.2.0
# ::edge	question-01	ARG0	you	0.1.0	0.1.0.0
(MRPNode-0 / fortunate-01 :polarity - :ARG2 (MRPNode-1 / answer-01 :ARG1 (MRPNode-2 / question-01 :ARG0 (MRPNode-3 / you)) :ARG2 (MRPNode-4 / we) :ARG2 (MRPNode-5 / know-01 :polarity - :ARG0 MRPNode-4 :mod (MRPNode-6 / simple))))

# ::id 846
# ::snt I would personally beware of the Motley Fool.
# ::tok I would personally beware of the Motley Fool .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 6-8|0.1+0.1.0+0.1.0.0+0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:05.477774 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	beware-01	3-4
# ::node	0.0	personal-02	2-3
# ::node	0.1	broadcast-program	6-8
# ::node	0.1.0	name	6-8
# ::node	0.1.0.0	motley	6-8
# ::node	0.1.0.1	fool	6-8
# ::node	0.2	i	0-1
# ::root	0	beware-01
# ::edge	beware-01	ARG0	i	0	0.2
# ::edge	beware-01	ARG1	broadcast-program	0	0.1
# ::edge	beware-01	ARG1	personal-02	0	0.0
# ::edge	broadcast-program	name	name	0.1	0.1.0
# ::edge	name	op1	motley	0.1.0	0.1.0.0
# ::edge	name	op2	fool	0.1.0	0.1.0.1
(MRPNode-0 / beware-01 :ARG1 (MRPNode-1 / personal-02) :ARG1 (MRPNode-2 / broadcast-program :name (MRPNode-3 / name :op1 motley :op2 fool)) :ARG0 (MRPNode-4 / i))

# ::id 847
# ::snt You should do it.
# ::tok You should do it .
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.0 3-4|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:05.479882 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	recommend-01	1-2
# ::node	0.0	do-02	2-3
# ::node	0.0.0	you	0-1
# ::node	0.0.1	it	3-4
# ::root	0	recommend-01
# ::edge	do-02	ARG0	you	0.0	0.0.0
# ::edge	do-02	ARG1	it	0.0	0.0.1
# ::edge	recommend-01	ARG1	do-02	0	0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / do-02 :ARG0 (MRPNode-2 / you) :ARG1 (MRPNode-3 / it)))

# ::id 848
# ::snt You want to start in the room that is the largest to make sure you have the straightest start.
# ::tok You want to start in the room that is the largest to make sure you have the straightest start .
# ::alignments 1-2|0+0.0.0.1 3-4|0.0+0.0.0.1.0.0 6-7|0.0.0 10-11|0.0.0.0.0 15-16|0.0.0.0+0.0.0.1.0 17-18|0.0.0.1.0.1.0 18-19|0.0.0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:06.633126 ::parser eager_oracle ::smatch 0.88 ::n_actions 59
# ::node	0	want-01	1-2
# ::node	0.0	start-01	3-4
# ::node	0.0.0	room	6-7
# ::node	0.0.0.0	have-degree-91	15-16
# ::node	0.0.0.0.0	large	10-11
# ::node	0.0.0.0.1	most	
# ::node	0.0.0.1	you	1-2
# ::node	0.0.0.1.0	have-03	15-16
# ::node	0.0.0.1.0.0	start-01	3-4
# ::node	0.0.0.1.0.1	start-01	18-19
# ::node	0.0.0.1.0.1.0	straight-04	17-18
# ::node	0.0.1	ensure-01	
# ::root	0	want-01
# ::edge	ensure-01	ARG0	you	0.0.1	0.0.0.1
# ::edge	ensure-01	ARG1	have-03	0.0.1	0.0.0.1.0
# ::edge	have-03	ARG1	start-01	0.0.0.1.0	0.0.0.1.0.0
# ::edge	have-03	ARG1	start-01	0.0.0.1.0	0.0.0.1.0.1
# ::edge	have-degree-91	ARG2	large	0.0.0.0	0.0.0.0.0
# ::edge	have-degree-91	ARG3	most	0.0.0.0	0.0.0.0.1
# ::edge	room	ARG0	you	0.0.0	0.0.0.1
# ::edge	room	ARG1-of	have-degree-91	0.0.0	0.0.0.0
# ::edge	start-01	ARG0	you	0.0	0.0.0.1
# ::edge	start-01	ARG1-of	straight-04	0.0.0.1.0.1	0.0.0.1.0.1.0
# ::edge	start-01	ARG2	room	0.0	0.0.0
# ::edge	start-01	purpose	ensure-01	0.0	0.0.1
# ::edge	want-01	ARG0	you	0	0.0.0.1
# ::edge	want-01	ARG1	start-01	0	0.0
# ::edge	you	ARG0-of	have-03	0.0.0.1	0.0.0.1.0
(MRPNode-0 / want-01 :ARG1 (MRPNode-1 / start-01 :ARG2 (MRPNode-2 / room :ARG1-of (MRPNode-3 / have-degree-91 :ARG2 (MRPNode-4 / large) :ARG3 (MRPNode-5 / most)) :ARG0 (MRPNode-7 / you :ARG0-of (MRPNode-8 / have-03 :ARG1 (MRPNode-9 / start-01) :ARG1 (MRPNode-10 / start-01 :ARG1-of (MRPNode-11 / straight-04))))) :purpose (MRPNode-6 / ensure-01 :ARG0 MRPNode-7 :ARG1 MRPNode-8) :ARG0 MRPNode-7) :ARG0 MRPNode-7)

# ::id 849
# ::snt if you don't want to derail the meeting, but the key is to speak up.
# ::tok if you do n't want to derail the meeting , but the key is to speak up .
# ::alignments 1-2|0.0.0 3-4|0.1.0 4-5|0.1 6-7|0.1.1 8-9|0.1.1.0 12-13|0 15-16|0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:06.655955 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	key-02	12-13
# ::node	0.0	speak-out-03	15-16
# ::node	0.0.0	you	1-2
# ::node	0.1	want-01	4-5
# ::node	0.1.0	-	3-4
# ::node	0.1.1	derail-01	6-7
# ::node	0.1.1.0	meet-03	8-9
# ::root	0	key-02
# ::edge	derail-01	ARG1	meet-03	0.1.1	0.1.1.0
# ::edge	key-02	ARG1	speak-out-03	0	0.0
# ::edge	key-02	condition	want-01	0	0.1
# ::edge	speak-out-03	ARG0	you	0.0	0.0.0
# ::edge	want-01	ARG0	you	0.1	0.0.0
# ::edge	want-01	ARG1	derail-01	0.1	0.1.1
# ::edge	want-01	polarity	-	0.1	0.1.0
(MRPNode-0 / key-02 :ARG1 (MRPNode-1 / speak-out-03 :ARG0 (MRPNode-2 / you)) :condition (MRPNode-3 / want-01 :polarity - :ARG0 MRPNode-2 :ARG1 (MRPNode-4 / derail-01 :ARG1 (MRPNode-5 / meet-03))))

# ::id 850
# ::snt Unfortunately the answer to your question is we simply do not know.
# ::tok Unfortunately the answer to your question is we simply do not know .
# ::alignments 0-1|0+0.0 2-3|0.1.0 4-5|0.1.0.0 5-6|0.1 7-8|0.1.1 8-9|0.1.2.1 10-11|0.1.2.0 11-12|0.1.2 ::annotator aligner3.py ::date 2021-03-11 23:01:06.730517 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	fortunate-01	0-1
# ::node	0.0	-	0-1
# ::node	0.1	answer-01	5-6
# ::node	0.1.0	question-01	2-3
# ::node	0.1.0.0	you	4-5
# ::node	0.1.1	we	7-8
# ::node	0.1.2	know-01	11-12
# ::node	0.1.2.0	-	10-11
# ::node	0.1.2.1	simple	8-9
# ::root	0	fortunate-01
# ::edge	answer-01	ARG1	question-01	0.1	0.1.0
# ::edge	answer-01	ARG2	know-01	0.1	0.1.2
# ::edge	answer-01	ARG2	we	0.1	0.1.1
# ::edge	fortunate-01	ARG2	answer-01	0	0.1
# ::edge	fortunate-01	polarity	-	0	0.0
# ::edge	know-01	ARG0	we	0.1.2	0.1.1
# ::edge	know-01	mod	simple	0.1.2	0.1.2.1
# ::edge	know-01	polarity	-	0.1.2	0.1.2.0
# ::edge	question-01	ARG0	you	0.1.0	0.1.0.0
(MRPNode-0 / fortunate-01 :polarity - :ARG2 (MRPNode-1 / answer-01 :ARG1 (MRPNode-2 / question-01 :ARG0 (MRPNode-3 / you)) :ARG2 (MRPNode-4 / we) :ARG2 (MRPNode-5 / know-01 :polarity - :ARG0 MRPNode-4 :mod (MRPNode-6 / simple))))

# ::id 851
# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tok You just have to base your answer on what you do know , which is what you want .
# ::alignments 0-1|0.0 1-2|0.1 2-3|0 4-5|0.2 6-7|0.0.2 11-12|0.0.0 17-18|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:06.865560 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 48
# ::node	0	obligate-01	2-3
# ::node	0.0	you	0-1
# ::node	0.0.0	know-01	11-12
# ::node	0.0.0.0	thing	
# ::node	0.0.1	want-01	17-18
# ::node	0.0.2	answer-01	6-7
# ::node	0.1	just	1-2
# ::node	0.2	base-02	4-5
# ::root	0	obligate-01
# ::edge	base-02	ARG0	you	0.2	0.0
# ::edge	base-02	ARG1	answer-01	0.2	0.0.2
# ::edge	base-02	ARG1	thing	0.2	0.0.0.0
# ::edge	know-01	ARG1	thing	0.0.0	0.0.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	base-02	0	0.2
# ::edge	obligate-01	mod	just	0	0.1
# ::edge	you	ARG0-of	answer-01	0.0	0.0.2
# ::edge	you	ARG0-of	know-01	0.0	0.0.0
# ::edge	you	ARG0-of	want-01	0.0	0.0.1
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / know-01 :ARG1 (MRPNode-7 / thing)) :ARG0-of (MRPNode-3 / want-01) :ARG0-of (MRPNode-4 / answer-01)) :mod (MRPNode-5 / just) :ARG2 (MRPNode-6 / base-02 :ARG0 MRPNode-1 :ARG1 MRPNode-4 :ARG1 MRPNode-7))

# ::id 852
# ::snt Yes, there is a reason for it.
# ::tok Yes , there is a reason for it .
# ::alignments 5-6|0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:06.867369 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	reason	5-6
# ::node	0.0	it	7-8
# ::root	0	reason
# ::edge	reason	purpose	it	0	0.0
(MRPNode-0 / reason :purpose (MRPNode-1 / it))

# ::id 853
# ::snt The coffee simply picks up the aluminum from the pot, as the coffee is acidic.
# ::tok The coffee simply picks up the aluminum from the pot , as the coffee is acidic .
# ::alignments 2-3|0.2 3-4|0+0.3 6-7|0.0 9-10|0.4 13-14|0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:06.874863 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 38
# ::node	0	pick-up-04	3-4
# ::node	0.0	aluminum	6-7
# ::node	0.1	coffee	13-14
# ::node	0.2	simple-02	2-3
# ::node	0.3	cause-01	3-4
# ::node	0.3.0	addictive-02	
# ::node	0.4	pot	9-10
# ::root	0	pick-up-04
# ::edge	cause-01	ARG0	addictive-02	0.3	0.3.0
# ::edge	pick-up-04	ARG0	coffee	0	0.1
# ::edge	pick-up-04	ARG1	aluminum	0	0.0
# ::edge	pick-up-04	ARG1-of	cause-01	0	0.3
# ::edge	pick-up-04	ARG1-of	simple-02	0	0.2
# ::edge	pick-up-04	ARG2	pot	0	0.4
(MRPNode-0 / pick-up-04 :ARG1 (MRPNode-1 / aluminum) :ARG0 (MRPNode-2 / coffee) :ARG1-of (MRPNode-3 / simple-02) :ARG1-of (MRPNode-4 / cause-01 :ARG0 (MRPNode-5 / addictive-02)) :ARG2 (MRPNode-6 / pot))

# ::id 854
# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tok You just have to base your answer on what you do know , which is what you want .
# ::alignments 0-1|0.0 1-2|0.1 2-3|0 4-5|0.2 6-7|0.0.2 11-12|0.0.0 17-18|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:07.006894 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 48
# ::node	0	obligate-01	2-3
# ::node	0.0	you	0-1
# ::node	0.0.0	know-01	11-12
# ::node	0.0.0.0	thing	
# ::node	0.0.1	want-01	17-18
# ::node	0.0.2	answer-01	6-7
# ::node	0.1	just	1-2
# ::node	0.2	base-02	4-5
# ::root	0	obligate-01
# ::edge	base-02	ARG0	you	0.2	0.0
# ::edge	base-02	ARG1	answer-01	0.2	0.0.2
# ::edge	base-02	ARG1	thing	0.2	0.0.0.0
# ::edge	know-01	ARG1	thing	0.0.0	0.0.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	base-02	0	0.2
# ::edge	obligate-01	mod	just	0	0.1
# ::edge	you	ARG0-of	answer-01	0.0	0.0.2
# ::edge	you	ARG0-of	know-01	0.0	0.0.0
# ::edge	you	ARG0-of	want-01	0.0	0.0.1
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / know-01 :ARG1 (MRPNode-7 / thing)) :ARG0-of (MRPNode-3 / want-01) :ARG0-of (MRPNode-4 / answer-01)) :mod (MRPNode-5 / just) :ARG2 (MRPNode-6 / base-02 :ARG0 MRPNode-1 :ARG1 MRPNode-4 :ARG1 MRPNode-7))

# ::id 855
# ::snt Some of what you can do:
# ::tok Some of what you can do :
# ::alignments 0-1|0.0.0 1-2|0+0.0 3-4|0.0.1.0.0 4-5|0.0.1.0.1 5-6|0.0.1+0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.011051 ::parser eager_oracle ::smatch 1.0 ::n_actions 35
# ::node	0	thing	1-2
# ::node	0.0	include-91	1-2
# ::node	0.0.0	some	0-1
# ::node	0.0.1	thing	5-6
# ::node	0.0.1.0	do-02	5-6
# ::node	0.0.1.0.0	you	3-4
# ::node	0.0.1.0.1	possible-01	4-5
# ::root	0	thing
# ::edge	do-02	ARG0	you	0.0.1.0	0.0.1.0.0
# ::edge	do-02	ARG1-of	possible-01	0.0.1.0	0.0.1.0.1
# ::edge	include-91	ARG2	some	0.0	0.0.0
# ::edge	include-91	ARG2	thing	0.0	0.0.1
# ::edge	thing	ARG1-of	do-02	0.0.1	0.0.1.0
# ::edge	thing	ARG1-of	include-91	0	0.0
(MRPNode-0 / thing :ARG1-of (MRPNode-1 / include-91 :ARG2 (MRPNode-2 / some) :ARG2 (MRPNode-3 / thing :ARG1-of (MRPNode-4 / do-02 :ARG0 (MRPNode-5 / you) :ARG1-of (MRPNode-6 / possible-01)))))

# ::id 856
# ::snt This is a problem that the professor has to deal with.
# ::tok This is a problem that the professor has to deal with .
# ::alignments 0-1|0.1 3-4|0 6-7|0.0.0 9-10|0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.014155 ::parser eager_oracle ::smatch 0.8421052631578948 ::n_actions 26
# ::node	0	problem	3-4
# ::node	0.0	deal-01	9-10
# ::node	0.0.0	professor	6-7
# ::node	0.0.1	obligate-01	
# ::node	0.1	this	0-1
# ::root	0	problem
# ::edge	deal-01	ARG0	professor	0.0	0.0.0
# ::edge	deal-01	ARG2-of	obligate-01	0.0	0.0.1
# ::edge	obligate-01	ARG1	professor	0.0.1	0.0.0
# ::edge	problem	domain	deal-01	0	0.0
# ::edge	problem	domain	this	0	0.1
(MRPNode-0 / problem :domain (MRPNode-1 / deal-01 :ARG0 (MRPNode-2 / professor) :ARG2-of (MRPNode-3 / obligate-01 :ARG1 MRPNode-2)) :domain (MRPNode-4 / this))

# ::id 857
# ::snt This doesn't answer your question, but:
# ::tok This does n't answer your question , but :
# ::alignments 0-1|0.0.2 2-3|0.0.0 3-4|0.0 4-5|0.0.1.0 5-6|0.0.1 7-8|0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.022769 ::parser eager_oracle ::smatch 1.0 ::n_actions 29
# ::node	0	contrast-01	7-8
# ::node	0.0	answer-01	3-4
# ::node	0.0.0	-	2-3
# ::node	0.0.1	question-01	5-6
# ::node	0.0.1.0	you	4-5
# ::node	0.0.2	this	0-1
# ::root	0	contrast-01
# ::edge	answer-01	ARG0	this	0.0	0.0.2
# ::edge	answer-01	ARG1	question-01	0.0	0.0.1
# ::edge	answer-01	polarity	-	0.0	0.0.0
# ::edge	contrast-01	ARG2	answer-01	0	0.0
# ::edge	question-01	ARG0	you	0.0.1	0.0.1.0
(MRPNode-0 / contrast-01 :ARG2 (MRPNode-1 / answer-01 :polarity - :ARG1 (MRPNode-2 / question-01 :ARG0 (MRPNode-3 / you)) :ARG0 (MRPNode-4 / this)))

# ::id 858
# ::snt Yes, you have to file a tax return in Canada.
# ::tok Yes , you have to file a tax return in Canada .
# ::alignments 2-3|0.0 3-4|0 5-6|0.1 7-8|0.1.0.0 8-9|0.1.0 10-11|0.1.1+0.1.1.0+0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.028300 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	obligate-01	3-4
# ::node	0.0	you	2-3
# ::node	0.1	file-01	5-6
# ::node	0.1.0	return-06	8-9
# ::node	0.1.0.0	tax-01	7-8
# ::node	0.1.1	country	10-11
# ::node	0.1.1.0	name	10-11
# ::node	0.1.1.0.0	canada	10-11
# ::root	0	obligate-01
# ::edge	country	name	name	0.1.1	0.1.1.0
# ::edge	file-01	ARG0	you	0.1	0.0
# ::edge	file-01	ARG1	return-06	0.1	0.1.0
# ::edge	file-01	ARG4	country	0.1	0.1.1
# ::edge	name	op1	canada	0.1.1.0	0.1.1.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	file-01	0	0.1
# ::edge	return-06	ARG0	tax-01	0.1.0	0.1.0.0
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / file-01 :ARG0 MRPNode-1 :ARG1 (MRPNode-3 / return-06 :ARG0 (MRPNode-4 / tax-01)) :ARG4 (MRPNode-5 / country :name (MRPNode-6 / name :op1 canada))))

# ::id 859
# ::snt Hope this is what you are looking for.
# ::tok Hope this is what you are looking for .
# ::alignments 0-1|0 1-2|0.0.1 4-5|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.030910 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	hope-01	0-1
# ::node	0.0	look-01	6-7
# ::node	0.0.0	you	4-5
# ::node	0.0.1	this	1-2
# ::root	0	hope-01
# ::edge	hope-01	ARG1	look-01	0	0.0
# ::edge	look-01	ARG1	this	0.0	0.0.1
# ::edge	look-01	ARG1	you	0.0	0.0.0
(MRPNode-0 / hope-01 :ARG1 (MRPNode-1 / look-01 :ARG1 (MRPNode-2 / you) :ARG1 (MRPNode-3 / this)))

# ::id 860
# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tok You just have to base your answer on what you do know , which is what you want .
# ::alignments 0-1|0.0 1-2|0.1 2-3|0 4-5|0.2 6-7|0.0.2 11-12|0.0.0 17-18|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:07.164148 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 48
# ::node	0	obligate-01	2-3
# ::node	0.0	you	0-1
# ::node	0.0.0	know-01	11-12
# ::node	0.0.0.0	thing	
# ::node	0.0.1	want-01	17-18
# ::node	0.0.2	answer-01	6-7
# ::node	0.1	just	1-2
# ::node	0.2	base-02	4-5
# ::root	0	obligate-01
# ::edge	base-02	ARG0	you	0.2	0.0
# ::edge	base-02	ARG1	answer-01	0.2	0.0.2
# ::edge	base-02	ARG1	thing	0.2	0.0.0.0
# ::edge	know-01	ARG1	thing	0.0.0	0.0.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	base-02	0	0.2
# ::edge	obligate-01	mod	just	0	0.1
# ::edge	you	ARG0-of	answer-01	0.0	0.0.2
# ::edge	you	ARG0-of	know-01	0.0	0.0.0
# ::edge	you	ARG0-of	want-01	0.0	0.0.1
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / know-01 :ARG1 (MRPNode-7 / thing)) :ARG0-of (MRPNode-3 / want-01) :ARG0-of (MRPNode-4 / answer-01)) :mod (MRPNode-5 / just) :ARG2 (MRPNode-6 / base-02 :ARG0 MRPNode-1 :ARG1 MRPNode-4 :ARG1 MRPNode-7))

# ::id 861
# ::snt If you are not sure how to do it, don't do it at all.
# ::tok If you are not sure how to do it , do n't do it at all .
# ::alignments 1-2|0.3 3-4|0.5.0 4-5|0.5 7-8|0 8-9|0.2 10-11|0.2.0 11-12|0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.169898 ::parser eager_oracle ::smatch 0.7878787878787878 ::n_actions 41
# ::node	0	do-02	7-8
# ::node	0.0	-	11-12
# ::node	0.1	imperative	
# ::node	0.2	it	8-9
# ::node	0.2.0	do-02	10-11
# ::node	0.2.0.0	thing	
# ::node	0.3	you	1-2
# ::node	0.4	at-all	
# ::node	0.5	sure-02	4-5
# ::node	0.5.0	-	3-4
# ::root	0	do-02
# ::edge	do-02	ARG0	you	0	0.3
# ::edge	do-02	ARG1	it	0	0.2
# ::edge	do-02	condition	sure-02	0	0.5
# ::edge	do-02	manner	thing	0.2.0	0.2.0.0
# ::edge	do-02	mod	at-all	0	0.4
# ::edge	do-02	mode	imperative	0	0.1
# ::edge	do-02	polarity	-	0	0.0
# ::edge	it	ARG1-of	do-02	0.2	0.2.0
# ::edge	sure-02	ARG0	you	0.5	0.3
# ::edge	sure-02	ARG1	thing	0.5	0.2.0.0
# ::edge	sure-02	arg1	-	0.5	0.5.0
(MRPNode-0 / do-02 :polarity - :mode imperative :ARG1 (MRPNode-1 / it :ARG1-of (MRPNode-2 / do-02 :manner (MRPNode-6 / thing))) :ARG0 (MRPNode-3 / you) :mod (MRPNode-4 / at-all) :condition (MRPNode-5 / sure-02 :arg1 - :ARG0 MRPNode-3 :ARG1 MRPNode-6))

# ::id 862
# ::snt Unfortunately the answer to your question is we simply do not know.
# ::tok Unfortunately the answer to your question is we simply do not know .
# ::alignments 0-1|0+0.0 2-3|0.1.0 4-5|0.1.0.0 5-6|0.1 7-8|0.1.1 8-9|0.1.2.1 10-11|0.1.2.0 11-12|0.1.2 ::annotator aligner3.py ::date 2021-03-11 23:01:07.242269 ::parser eager_oracle ::smatch 1.0 ::n_actions 44
# ::node	0	fortunate-01	0-1
# ::node	0.0	-	0-1
# ::node	0.1	answer-01	5-6
# ::node	0.1.0	question-01	2-3
# ::node	0.1.0.0	you	4-5
# ::node	0.1.1	we	7-8
# ::node	0.1.2	know-01	11-12
# ::node	0.1.2.0	-	10-11
# ::node	0.1.2.1	simple	8-9
# ::root	0	fortunate-01
# ::edge	answer-01	ARG1	question-01	0.1	0.1.0
# ::edge	answer-01	ARG2	know-01	0.1	0.1.2
# ::edge	answer-01	ARG2	we	0.1	0.1.1
# ::edge	fortunate-01	ARG2	answer-01	0	0.1
# ::edge	fortunate-01	polarity	-	0	0.0
# ::edge	know-01	ARG0	we	0.1.2	0.1.1
# ::edge	know-01	mod	simple	0.1.2	0.1.2.1
# ::edge	know-01	polarity	-	0.1.2	0.1.2.0
# ::edge	question-01	ARG0	you	0.1.0	0.1.0.0
(MRPNode-0 / fortunate-01 :polarity - :ARG2 (MRPNode-1 / answer-01 :ARG1 (MRPNode-2 / question-01 :ARG0 (MRPNode-3 / you)) :ARG2 (MRPNode-4 / we) :ARG2 (MRPNode-5 / know-01 :polarity - :ARG0 MRPNode-4 :mod (MRPNode-6 / simple))))

# ::id 863
# ::snt If you are not sure how to do it, don't do it at all.
# ::tok If you are not sure how to do it , do n't do it at all .
# ::alignments 1-2|0.3 3-4|0.5.0 4-5|0.5 7-8|0 8-9|0.2 10-11|0.2.0 11-12|0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.247864 ::parser eager_oracle ::smatch 0.7272727272727273 ::n_actions 41
# ::node	0	do-02	7-8
# ::node	0.0	-	11-12
# ::node	0.1	imperative	
# ::node	0.2	it	8-9
# ::node	0.2.0	do-02	10-11
# ::node	0.2.0.0	thing	
# ::node	0.3	you	1-2
# ::node	0.4	at-all	
# ::node	0.5	sure-02	4-5
# ::node	0.5.0	-	3-4
# ::root	0	do-02
# ::edge	do-02	ARG0	you	0	0.3
# ::edge	do-02	ARG1	it	0	0.2
# ::edge	do-02	condition	sure-02	0	0.5
# ::edge	do-02	manner	thing	0.2.0	0.2.0.0
# ::edge	do-02	mod	at-all	0	0.4
# ::edge	do-02	mode	imperative	0	0.1
# ::edge	do-02	polarity	-	0	0.0
# ::edge	it	ARG1-of	do-02	0.2	0.2.0
# ::edge	sure-02	ARG0	you	0.5	0.3
# ::edge	sure-02	ARG1	thing	0.5	0.2.0.0
# ::edge	sure-02	arg1	-	0.5	0.5.0
(MRPNode-0 / do-02 :polarity - :mode imperative :ARG1 (MRPNode-1 / it :ARG1-of (MRPNode-2 / do-02 :manner (MRPNode-6 / thing))) :ARG0 (MRPNode-3 / you) :mod (MRPNode-4 / at-all) :condition (MRPNode-5 / sure-02 :arg1 - :ARG0 MRPNode-3 :ARG1 MRPNode-6))

# ::id 864
# ::snt It's not a good idea.
# ::tok It 's not a good idea .
# ::alignments 0-1|0.1 2-3|0.0.0 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.249651 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	idea	5-6
# ::node	0.0	good-02	4-5
# ::node	0.0.0	-	2-3
# ::node	0.1	it	0-1
# ::root	0	idea
# ::edge	good-02	polarity	-	0.0	0.0.0
# ::edge	idea	ARG1-of	good-02	0	0.0
# ::edge	idea	domain	it	0	0.1
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / good-02 :polarity -) :domain (MRPNode-2 / it))

# ::id 865
# ::snt There are a couple of options that you could consider:
# ::tok There are a couple of options that you could consider :
# ::alignments 3-4|0.1 5-6|0 7-8|0.0.0 8-9|0.0.1 9-10|0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.253659 ::parser eager_oracle ::smatch 1.0 ::n_actions 28
# ::node	0	option	5-6
# ::node	0.0	consider-02	9-10
# ::node	0.0.0	you	7-8
# ::node	0.0.1	possible-01	8-9
# ::node	0.1	couple	3-4
# ::root	0	option
# ::edge	consider-02	ARG0	you	0.0	0.0.0
# ::edge	consider-02	ARG1-of	possible-01	0.0	0.0.1
# ::edge	option	ARG1-of	consider-02	0	0.0
# ::edge	option	quant	couple	0	0.1
(MRPNode-0 / option :ARG1-of (MRPNode-1 / consider-02 :ARG0 (MRPNode-2 / you) :ARG1-of (MRPNode-3 / possible-01)) :quant (MRPNode-4 / couple))

# ::id 866
# ::snt Vietnamese citizens need a visa to visit the USA.
# ::tok Vietnamese citizens need a visa to visit the USA .
# ::alignments 0-1|0.2.0+0.2.0.0+0.2.0.0.0 1-2|0.1 2-3|0 4-5|0.0 6-7|0.2 8-9|0.1.0+0.1.0.0+0.1.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.259585 ::parser eager_oracle ::smatch 0.9473684210526315 ::n_actions 34
# ::node	0	need-01	2-3
# ::node	0.0	visa	4-5
# ::node	0.1	citizen	1-2
# ::node	0.1.0	country	8-9
# ::node	0.1.0.0	name	8-9
# ::node	0.1.0.0.0	usa	8-9
# ::node	0.2	visit-01	6-7
# ::node	0.2.0	country	0-1
# ::node	0.2.0.0	name	0-1
# ::node	0.2.0.0.0	vietnam	0-1
# ::root	0	need-01
# ::edge	citizen	mod	country	0.1	0.1.0
# ::edge	country	name	name	0.1.0	0.1.0.0
# ::edge	country	name	name	0.2.0	0.2.0.0
# ::edge	name	op1	usa	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	vietnam	0.2.0.0	0.2.0.0.0
# ::edge	need-01	ARG0	citizen	0	0.1
# ::edge	need-01	ARG1	visa	0	0.0
# ::edge	need-01	purpose	visit-01	0	0.2
# ::edge	visit-01	ARG0	citizen	0.2	0.1
# ::edge	visit-01	ARG1	country	0.2	0.2.0
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / visa) :ARG0 (MRPNode-2 / citizen :mod (MRPNode-3 / country :name (MRPNode-4 / name :op1 usa))) :purpose (MRPNode-5 / visit-01 :ARG0 MRPNode-2 :ARG1 (MRPNode-6 / country :name (MRPNode-7 / name :op1 vietnam))))

# ::id 867
# ::snt It depends on how it's used.
# ::tok It depends on how it 's used .
# ::alignments 0-1|0.0.0.0 1-2|0 6-7|0.0+0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.262801 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	depend-01	1-2
# ::node	0.0	thing	6-7
# ::node	0.0.0	use-01	6-7
# ::node	0.0.0.0	it	0-1
# ::root	0	depend-01
# ::edge	depend-01	ARG0	it	0	0.0.0.0
# ::edge	depend-01	ARG1	thing	0	0.0
# ::edge	thing	manner-of	use-01	0.0	0.0.0
# ::edge	use-01	ARG1	it	0.0.0	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / thing :manner-of (MRPNode-2 / use-01 :ARG1 (MRPNode-3 / it))) :ARG0 MRPNode-3)

# ::id 868
# ::snt This is a great one...
# ::tok This is a great one ...
# ::alignments 0-1|0.1 3-4|0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.264330 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	one	4-5
# ::node	0.0	great	3-4
# ::node	0.1	this	0-1
# ::root	0	one
# ::edge	one	domain	this	0	0.1
# ::edge	one	mod	great	0	0.0
(MRPNode-0 / one :mod (MRPNode-1 / great) :domain (MRPNode-2 / this))

# ::id 869
# ::snt The key is you have to find something that works for you, and your goals.
# ::tok The key is you have to find something that works for you , and your goals .
# ::alignments 1-2|0 3-4|0.0.0.1 4-5|0.0 6-7|0.0.0 7-8|0.0.0.0 9-10|0.0.0.0.0 13-14|0.0.0.0.0.0 15-16|0.0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.276871 ::parser eager_oracle ::smatch 1.0 ::n_actions 46
# ::node	0	key-02	1-2
# ::node	0.0	obligate-01	4-5
# ::node	0.0.0	find-01	6-7
# ::node	0.0.0.0	something	7-8
# ::node	0.0.0.0.0	work-09	9-10
# ::node	0.0.0.0.0.0	and	13-14
# ::node	0.0.0.1	you	3-4
# ::node	0.0.0.1.0	goal	15-16
# ::root	0	key-02
# ::edge	find-01	ARG0	you	0.0.0	0.0.0.1
# ::edge	find-01	ARG1	something	0.0.0	0.0.0.0
# ::edge	goal	op2-of	and	0.0.0.1.0	0.0.0.0.0.0
# ::edge	key-02	ARG1	obligate-01	0	0.0
# ::edge	obligate-01	ARG1	find-01	0.0	0.0.0
# ::edge	obligate-01	ARG1	you	0.0	0.0.0.1
# ::edge	something	ARG0-of	work-09	0.0.0.0	0.0.0.0.0
# ::edge	work-09	ARG2	and	0.0.0.0.0	0.0.0.0.0.0
# ::edge	you	poss-of	goal	0.0.0.1	0.0.0.1.0
(MRPNode-0 / key-02 :ARG1 (MRPNode-1 / obligate-01 :ARG1 (MRPNode-2 / find-01 :ARG1 (MRPNode-3 / something :ARG0-of (MRPNode-4 / work-09 :ARG2 (MRPNode-7 / and))) :ARG0 (MRPNode-5 / you :poss-of (MRPNode-6 / goal :op2-of MRPNode-7))) :ARG1 MRPNode-5))

# ::id 870
# ::snt It depends on what you want to do next, and where you want to do it.
# ::tok It depends on what you want to do next , and where you want to do it .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0.0.0 5-6|0.0.1.0 7-8|0.0.0+0.0.0.0 8-9|0.0.0.0.1 10-11|0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.384443 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 47
# ::node	0	depend-01	1-2
# ::node	0.0	and	10-11
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	do-02	7-8
# ::node	0.0.0.0.0	you	4-5
# ::node	0.0.0.0.1	next	8-9
# ::node	0.0.1	location	
# ::node	0.0.1.0	want-01	5-6
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	and	op1	thing	0.0	0.0.0
# ::edge	and	op2	location	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	do-02	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	do-02	time	next	0.0.0.0	0.0.0.0.1
# ::edge	location	location-of	want-01	0.0.1	0.0.1.0
# ::edge	thing	ARG1-of	do-02	0.0.0	0.0.0.0
# ::edge	want-01	ARG0	you	0.0.1.0	0.0.0.0.0
# ::edge	want-01	ARG1	do-02	0.0.1.0	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / do-02 :ARG0 (MRPNode-4 / you) :time (MRPNode-5 / next))) :op2 (MRPNode-6 / location :location-of (MRPNode-7 / want-01 :ARG1 MRPNode-3 :ARG0 MRPNode-4))) :ARG0 (MRPNode-8 / it))

# ::id 871
# ::snt If you haven't, you should.
# ::tok If you have n't , you should .
# ::alignments 1-2|0.0.1 2-3|0.0 3-4|0.0.0 6-7|0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.392179 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	recommend-01	6-7
# ::node	0.0	have-03	2-3
# ::node	0.0.0	-	3-4
# ::node	0.0.1	you	1-2
# ::root	0	recommend-01
# ::edge	have-03	ARG0	you	0.0	0.0.1
# ::edge	have-03	polarity	-	0.0	0.0.0
# ::edge	recommend-01	ARG2	have-03	0	0.0
# ::edge	recommend-01	ARG2	you	0	0.0.1
(MRPNode-0 / recommend-01 :ARG2 (MRPNode-1 / have-03 :polarity - :ARG0 (MRPNode-2 / you)) :ARG2 MRPNode-2)

# ::id 872
# ::snt Problem is, the system doesn't account for people who could care less about money, or title.
# ::tok Problem is , the system does n't account for people who could care less about money , or title .
# ::alignments 0-1|0 4-5|0.0.2 6-7|0.0.0 7-8|0.0 9-10|0.0.1 11-12|0.0.1.0.2 12-13|0.0.1.0 13-14|0.0.1.0.1.0 15-16|0.0.1.0.0.0 17-18|0.0.1.0.0 18-19|0.0.1.0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:07.405663 ::parser eager_oracle ::smatch 0.9047619047619047 ::n_actions 54
# ::node	0	problem	0-1
# ::node	0.0	account-01	7-8
# ::node	0.0.0	-	6-7
# ::node	0.0.1	person	9-10
# ::node	0.0.1.0	care-01	12-13
# ::node	0.0.1.0.0	or	17-18
# ::node	0.0.1.0.0.0	money	15-16
# ::node	0.0.1.0.0.1	title	18-19
# ::node	0.0.1.0.1	have-quant-91	
# ::node	0.0.1.0.1.0	less	13-14
# ::node	0.0.1.0.2	possible-01	11-12
# ::node	0.0.2	system	4-5
# ::root	0	problem
# ::edge	account-01	ARG0	system	0.0	0.0.2
# ::edge	account-01	ARG1	person	0.0	0.0.1
# ::edge	account-01	polarity	-	0.0	0.0.0
# ::edge	care-01	ARG1	or	0.0.1.0	0.0.1.0.0
# ::edge	care-01	ARG1-of	have-quant-91	0.0.1.0	0.0.1.0.1
# ::edge	care-01	ARG1-of	possible-01	0.0.1.0	0.0.1.0.2
# ::edge	have-quant-91	ARG3	less	0.0.1.0.1	0.0.1.0.1.0
# ::edge	or	op1	money	0.0.1.0.0	0.0.1.0.0.0
# ::edge	or	op2	title	0.0.1.0.0	0.0.1.0.0.1
# ::edge	person	ARG0-of	care-01	0.0.1	0.0.1.0
# ::edge	problem	domain	account-01	0	0.0
(MRPNode-0 / problem :domain (MRPNode-1 / account-01 :polarity - :ARG1 (MRPNode-2 / person :ARG0-of (MRPNode-3 / care-01 :ARG1 (MRPNode-4 / or :op1 (MRPNode-5 / money) :op2 (MRPNode-6 / title)) :ARG1-of (MRPNode-7 / have-quant-91 :ARG3 (MRPNode-8 / less)) :ARG1-of (MRPNode-9 / possible-01))) :ARG0 (MRPNode-10 / system)))

# ::id 873
# ::snt In the first case, I think you don't need it.
# ::tok In the first case , I think you do n't need it .
# ::alignments 2-3|0.2.0+0.2.0.0 3-4|0.2 5-6|0.1 6-7|0 7-8|0.0.2 9-10|0.0.0 10-11|0.0 11-12|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:07.503065 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	think-01	6-7
# ::node	0.0	need-01	10-11
# ::node	0.0.0	-	9-10
# ::node	0.0.1	it	11-12
# ::node	0.0.2	you	7-8
# ::node	0.1	i	5-6
# ::node	0.2	case-04	3-4
# ::node	0.2.0	ordinal-entity	2-3
# ::node	0.2.0.0	1	2-3
# ::root	0	think-01
# ::edge	case-04	ord	ordinal-entity	0.2	0.2.0
# ::edge	need-01	ARG0	you	0.0	0.0.2
# ::edge	need-01	ARG1	it	0.0	0.0.1
# ::edge	need-01	polarity	-	0.0	0.0.0
# ::edge	ordinal-entity	value	1	0.2.0	0.2.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	need-01	0	0.0
# ::edge	think-01	prep-in	case-04	0	0.2
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / need-01 :polarity - :ARG1 (MRPNode-2 / it) :ARG0 (MRPNode-3 / you)) :ARG0 (MRPNode-4 / i) :prep-in (MRPNode-5 / case-04 :ord (MRPNode-6 / ordinal-entity :value 1)))

# ::id 874
# ::snt Yes, it is possible to publish a paper on model analysis.
# ::tok Yes , it is possible to publish a paper on model analysis .
# ::alignments 4-5|0 6-7|0.0 8-9|0.0.0 10-11|0.0.0.0.0 11-12|0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.507687 ::parser eager_oracle ::smatch 1.0 ::n_actions 30
# ::node	0	possible-01	4-5
# ::node	0.0	publish-01	6-7
# ::node	0.0.0	paper	8-9
# ::node	0.0.0.0	analyze-01	11-12
# ::node	0.0.0.0.0	model	10-11
# ::root	0	possible-01
# ::edge	analyze-01	ARG1	model	0.0.0.0	0.0.0.0.0
# ::edge	paper	topic	analyze-01	0.0.0	0.0.0.0
# ::edge	possible-01	ARG1	publish-01	0	0.0
# ::edge	publish-01	ARG1	paper	0.0	0.0.0
(MRPNode-0 / possible-01 :ARG1 (MRPNode-1 / publish-01 :ARG1 (MRPNode-2 / paper :topic (MRPNode-3 / analyze-01 :ARG1 (MRPNode-4 / model)))))

# ::id 875
# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tok You just have to base your answer on what you do know , which is what you want .
# ::alignments 0-1|0.0 1-2|0.1 2-3|0 4-5|0.2 6-7|0.0.2 11-12|0.0.0 17-18|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:07.641505 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 48
# ::node	0	obligate-01	2-3
# ::node	0.0	you	0-1
# ::node	0.0.0	know-01	11-12
# ::node	0.0.0.0	thing	
# ::node	0.0.1	want-01	17-18
# ::node	0.0.2	answer-01	6-7
# ::node	0.1	just	1-2
# ::node	0.2	base-02	4-5
# ::root	0	obligate-01
# ::edge	base-02	ARG0	you	0.2	0.0
# ::edge	base-02	ARG1	answer-01	0.2	0.0.2
# ::edge	base-02	ARG1	thing	0.2	0.0.0.0
# ::edge	know-01	ARG1	thing	0.0.0	0.0.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	base-02	0	0.2
# ::edge	obligate-01	mod	just	0	0.1
# ::edge	you	ARG0-of	answer-01	0.0	0.0.2
# ::edge	you	ARG0-of	know-01	0.0	0.0.0
# ::edge	you	ARG0-of	want-01	0.0	0.0.1
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / know-01 :ARG1 (MRPNode-7 / thing)) :ARG0-of (MRPNode-3 / want-01) :ARG0-of (MRPNode-4 / answer-01)) :mod (MRPNode-5 / just) :ARG2 (MRPNode-6 / base-02 :ARG0 MRPNode-1 :ARG1 MRPNode-4 :ARG1 MRPNode-7))

# ::id 876
# ::snt Yes, there is a rule against this.
# ::tok Yes , there is a rule against this .
# ::alignments 5-6|0 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.643125 ::parser eager_oracle ::smatch 1.0 ::n_actions 17
# ::node	0	rule-01	5-6
# ::node	0.0	this	7-8
# ::root	0	rule-01
# ::edge	rule-01	ARG3	this	0	0.0
(MRPNode-0 / rule-01 :ARG3 (MRPNode-1 / this))

# ::id 877
# ::snt It depends on what they are.
# ::tok It depends on what they are .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.644877 ::parser eager_oracle ::smatch 0.6666666666666666 ::n_actions 17
# ::node	0	depend-01	1-2
# ::node	0.0	thing	
# ::node	0.0.0	they	4-5
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	thing	0	0.0
# ::edge	thing	domain	they	0.0	0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / thing :domain (MRPNode-2 / they)) :ARG0 (MRPNode-3 / it))

# ::id 878
# ::snt You don't need to know everything.
# ::tok You do n't need to know everything .
# ::alignments 0-1|0.1.1 2-3|0.0 3-4|0 5-6|0.1 6-7|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.679346 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	need-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	know-01	5-6
# ::node	0.1.0	everything	6-7
# ::node	0.1.1	you	0-1
# ::root	0	need-01
# ::edge	know-01	ARG0	you	0.1	0.1.1
# ::edge	know-01	ARG1	everything	0.1	0.1.0
# ::edge	need-01	ARG0	you	0	0.1.1
# ::edge	need-01	ARG1	know-01	0	0.1
# ::edge	need-01	polarity	-	0	0.0
(MRPNode-0 / need-01 :polarity - :ARG1 (MRPNode-1 / know-01 :ARG1 (MRPNode-2 / everything) :ARG0 (MRPNode-3 / you)) :ARG0 MRPNode-3)

# ::id 879
# ::snt I think it's just a habit.
# ::tok I think it 's just a habit .
# ::alignments 0-1|0.1 1-2|0 2-3|0.0.1 4-5|0.0.0 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.688121 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	think-01	1-2
# ::node	0.0	habit	6-7
# ::node	0.0.0	just	4-5
# ::node	0.0.1	it	2-3
# ::node	0.1	i	0-1
# ::root	0	think-01
# ::edge	habit	domain	it	0.0	0.0.1
# ::edge	habit	mod	just	0.0	0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	habit	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / habit :mod (MRPNode-2 / just) :domain (MRPNode-3 / it)) :ARG0 (MRPNode-4 / i))

# ::id 880
# ::snt It depends on what you want to do next, and where you want to do it.
# ::tok It depends on what you want to do next , and where you want to do it .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0.0.0 5-6|0.0.1.0 7-8|0.0.0+0.0.0.0 8-9|0.0.0.0.1 10-11|0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.797115 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 47
# ::node	0	depend-01	1-2
# ::node	0.0	and	10-11
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	do-02	7-8
# ::node	0.0.0.0.0	you	4-5
# ::node	0.0.0.0.1	next	8-9
# ::node	0.0.1	location	
# ::node	0.0.1.0	want-01	5-6
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	and	op1	thing	0.0	0.0.0
# ::edge	and	op2	location	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	do-02	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	do-02	time	next	0.0.0.0	0.0.0.0.1
# ::edge	location	location-of	want-01	0.0.1	0.0.1.0
# ::edge	thing	ARG1-of	do-02	0.0.0	0.0.0.0
# ::edge	want-01	ARG0	you	0.0.1.0	0.0.0.0.0
# ::edge	want-01	ARG1	do-02	0.0.1.0	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / do-02 :ARG0 (MRPNode-4 / you) :time (MRPNode-5 / next))) :op2 (MRPNode-6 / location :location-of (MRPNode-7 / want-01 :ARG1 MRPNode-3 :ARG0 MRPNode-4))) :ARG0 (MRPNode-8 / it))

# ::id 881
# ::snt You should do it.
# ::tok You should do it .
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.0 3-4|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:07.799093 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	recommend-01	1-2
# ::node	0.0	do-02	2-3
# ::node	0.0.0	you	0-1
# ::node	0.0.1	it	3-4
# ::root	0	recommend-01
# ::edge	do-02	ARG0	you	0.0	0.0.0
# ::edge	do-02	ARG1	it	0.0	0.0.1
# ::edge	recommend-01	ARG1	do-02	0	0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / do-02 :ARG0 (MRPNode-2 / you) :ARG1 (MRPNode-3 / it)))

# ::id 882
# ::snt The answer to this and all such similar questions is in two stages:
# ::tok The answer to this and all such similar questions is in two stages :
# ::alignments 1-2|0 3-4|0.0.0 4-5|0.0 5-6|0.0.1.0 6-7|0.0.1.1.0 7-8|0.0.1.1 8-9|0.0.1 11-12|0.1.0 12-13|0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:07.810914 ::parser eager_oracle ::smatch 1.0 ::n_actions 43
# ::node	0	answer-01	1-2
# ::node	0.0	and	4-5
# ::node	0.0.0	this	3-4
# ::node	0.0.1	question-01	8-9
# ::node	0.0.1.0	all	5-6
# ::node	0.0.1.1	resemble-01	7-8
# ::node	0.0.1.1.0	such	6-7
# ::node	0.1	stage	12-13
# ::node	0.1.0	2	11-12
# ::root	0	answer-01
# ::edge	and	op1	this	0.0	0.0.0
# ::edge	and	op2	question-01	0.0	0.0.1
# ::edge	answer-01	ARG2	and	0	0.0
# ::edge	answer-01	ARG2	stage	0	0.1
# ::edge	question-01	ARG1-of	resemble-01	0.0.1	0.0.1.1
# ::edge	question-01	mod	all	0.0.1	0.0.1.0
# ::edge	resemble-01	mod	such	0.0.1.1	0.0.1.1.0
# ::edge	stage	quant	2	0.1	0.1.0
(MRPNode-0 / answer-01 :ARG2 (MRPNode-1 / and :op1 (MRPNode-2 / this) :op2 (MRPNode-3 / question-01 :mod (MRPNode-4 / all) :ARG1-of (MRPNode-5 / resemble-01 :mod (MRPNode-6 / such)))) :ARG2 (MRPNode-7 / stage :quant 2))

# ::id 883
# ::snt It depends on what you want to do next, and where you want to do it.
# ::tok It depends on what you want to do next , and where you want to do it .
# ::alignments 0-1|0.1 1-2|0 4-5|0.0.0.0.0 5-6|0.0.1.0 7-8|0.0.0+0.0.0.0 8-9|0.0.0.0.1 10-11|0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.919907 ::parser eager_oracle ::smatch 0.8947368421052632 ::n_actions 47
# ::node	0	depend-01	1-2
# ::node	0.0	and	10-11
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	do-02	7-8
# ::node	0.0.0.0.0	you	4-5
# ::node	0.0.0.0.1	next	8-9
# ::node	0.0.1	location	
# ::node	0.0.1.0	want-01	5-6
# ::node	0.1	it	0-1
# ::root	0	depend-01
# ::edge	and	op1	thing	0.0	0.0.0
# ::edge	and	op2	location	0.0	0.0.1
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	and	0	0.0
# ::edge	do-02	ARG0	you	0.0.0.0	0.0.0.0.0
# ::edge	do-02	time	next	0.0.0.0	0.0.0.0.1
# ::edge	location	location-of	want-01	0.0.1	0.0.1.0
# ::edge	thing	ARG1-of	do-02	0.0.0	0.0.0.0
# ::edge	want-01	ARG0	you	0.0.1.0	0.0.0.0.0
# ::edge	want-01	ARG1	do-02	0.0.1.0	0.0.0.0
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / thing :ARG1-of (MRPNode-3 / do-02 :ARG0 (MRPNode-4 / you) :time (MRPNode-5 / next))) :op2 (MRPNode-6 / location :location-of (MRPNode-7 / want-01 :ARG1 MRPNode-3 :ARG0 MRPNode-4))) :ARG0 (MRPNode-8 / it))

# ::id 884
# ::snt It's not a good idea.
# ::tok It 's not a good idea .
# ::alignments 0-1|0.1 2-3|0.0.0 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.922525 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	idea	5-6
# ::node	0.0	good-02	4-5
# ::node	0.0.0	-	2-3
# ::node	0.1	it	0-1
# ::root	0	idea
# ::edge	good-02	polarity	-	0.0	0.0.0
# ::edge	idea	ARG1-of	good-02	0	0.0
# ::edge	idea	domain	it	0	0.1
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / good-02 :polarity -) :domain (MRPNode-2 / it))

# ::id 885
# ::snt Yes, there is at least one to my knowledge.
# ::tok Yes , there is at least one to my knowledge .
# ::alignments 4-6|0.0 6-7|0.0.0 8-9|0.1 9-10|0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.924978 ::parser eager_oracle ::smatch 1.0 ::n_actions 25
# ::node	0	know-01	9-10
# ::node	0.0	at-least	4-6
# ::node	0.0.0	1	6-7
# ::node	0.1	i	8-9
# ::root	0	know-01
# ::edge	at-least	op1	1	0.0	0.0.0
# ::edge	know-01	ARG0	i	0	0.1
# ::edge	know-01	ARG1	at-least	0	0.0
(MRPNode-0 / know-01 :ARG1 (MRPNode-1 / at-least :op1 1) :ARG0 (MRPNode-2 / i))

# ::id 886
# ::snt "My answer to your question is ""Probably Not""."
# ::tok " My answer to your question is " " Probably Not " " . "
# ::alignments 1-2|0.1 2-3|0.0 4-5|0.0.0 5-6|0 9-10|0.2.1 10-11|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.931414 ::parser eager_oracle ::smatch 0.761904761904762 ::n_actions 33
# ::node	0	answer-01	5-6
# ::node	0.0	question-01	2-3
# ::node	0.0.0	you	4-5
# ::node	0.1	i	1-2
# ::node	0.2	have-polarity-91	
# ::node	0.2.0	-	10-11
# ::node	0.2.1	probable	9-10
# ::root	0	answer-01
# ::edge	answer-01	ARG0	i	0	0.1
# ::edge	answer-01	ARG1	question-01	0	0.0
# ::edge	answer-01	ARG2	have-polarity-91	0	0.2
# ::edge	have-polarity-91	arg2	-	0.2	0.2.0
# ::edge	have-polarity-91	mod	probable	0.2	0.2.1
# ::edge	question-01	ARG0	you	0.0	0.0.0
(MRPNode-0 / answer-01 :ARG1 (MRPNode-1 / question-01 :ARG0 (MRPNode-2 / you)) :ARG0 (MRPNode-3 / i) :ARG2 (MRPNode-4 / have-polarity-91 :arg2 - :mod (MRPNode-5 / probable)))

# ::id 887
# ::snt The key thing to realize here is that it's not your job to make people do their work.
# ::tok The key thing to realize here is that it 's not your job to make people do their work .
# ::alignments 1-2|0 4-5|0.0 5-6|0.0.0 10-11|0.1.0 12-13|0.1 14-15|0.1.1 15-16|0.1.1.0.0.0 16-17|0.1.1.0 18-19|0.1.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.970280 ::parser eager_oracle ::smatch 0.923076923076923 ::n_actions 51
# ::node	0	key-02	1-2
# ::node	0.0	realize-01	4-5
# ::node	0.0.0	here	5-6
# ::node	0.1	job	12-13
# ::node	0.1.0	-	10-11
# ::node	0.1.1	make-02	14-15
# ::node	0.1.1.0	do-02	16-17
# ::node	0.1.1.0.0	work-01	18-19
# ::node	0.1.1.0.0.0	person	15-16
# ::node	0.1.1.1	you	
# ::root	0	key-02
# ::edge	do-02	ARG0	person	0.1.1.0	0.1.1.0.0.0
# ::edge	do-02	ARG1	work-01	0.1.1.0	0.1.1.0.0
# ::edge	job	domain	make-02	0.1	0.1.1
# ::edge	job	polarity	-	0.1	0.1.0
# ::edge	job	poss	you	0.1	0.1.1.1
# ::edge	key-02	ARG1	job	0	0.1
# ::edge	key-02	ARG1	realize-01	0	0.0
# ::edge	make-02	ARG0	you	0.1.1	0.1.1.1
# ::edge	make-02	ARG1	do-02	0.1.1	0.1.1.0
# ::edge	realize-01	location	here	0.0	0.0.0
# ::edge	work-01	ARG0	person	0.1.1.0.0	0.1.1.0.0.0
(MRPNode-0 / key-02 :ARG1 (MRPNode-1 / realize-01 :location (MRPNode-2 / here)) :ARG1 (MRPNode-3 / job :polarity - :domain (MRPNode-4 / make-02 :ARG1 (MRPNode-5 / do-02 :ARG1 (MRPNode-6 / work-01 :ARG0 (MRPNode-7 / person)) :ARG0 MRPNode-7) :ARG0 (MRPNode-8 / you)) :poss MRPNode-8))

# ::id 888
# ::snt There are two possible causes for this:
# ::tok There are two possible causes for this :
# ::alignments 2-3|0.0 3-4|0.2 4-5|0 6-7|0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:07.974259 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	cause-01	4-5
# ::node	0.0	2	2-3
# ::node	0.1	this	6-7
# ::node	0.2	possible-01	3-4
# ::root	0	cause-01
# ::edge	cause-01	ARG0	possible-01	0	0.2
# ::edge	cause-01	ARG1	this	0	0.1
# ::edge	cause-01	quant	2	0	0.0
(MRPNode-0 / cause-01 :quant 2 :ARG1 (MRPNode-1 / this) :ARG0 (MRPNode-2 / possible-01))

# ::id 889
# ::snt There's also what the string is made of.
# ::tok There 's also what the string is made of .
# ::alignments 2-3|0.1 5-6|0.0 7-8|0 ::annotator aligner3.py ::date 2021-03-11 23:01:07.976700 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	make-01	7-8
# ::node	0.0	string	5-6
# ::node	0.1	also	2-3
# ::root	0	make-01
# ::edge	make-01	ARG1	string	0	0.0
# ::edge	make-01	mod	also	0	0.1
(MRPNode-0 / make-01 :ARG1 (MRPNode-1 / string) :mod (MRPNode-2 / also))

# ::id 890
# ::snt You also imply you may not be paid if they cannot place you with a client.
# ::tok You also imply you may not be paid if they cannot place you with a client .
# ::alignments 1-2|0.2 2-3|0 3-4|0.1 4-5|0.0 5-6|0.0.0+0.0.1.0.0 7-8|0.0.1 9-10|0.0.1.0.1.0 10-11|0.0.1.0 11-12|0.0.1.0.1 15-16|0.1.0+0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:08.169948 ::parser eager_oracle ::smatch 0.9411764705882353 ::n_actions 63
# ::node	0	imply-01	2-3
# ::node	0.0	possible-01	4-5
# ::node	0.0.0	-	5-6
# ::node	0.0.1	pay-01	7-8
# ::node	0.0.1.0	possible-01	10-11
# ::node	0.0.1.0.0	-	5-6
# ::node	0.0.1.0.1	place-01	11-12
# ::node	0.0.1.0.1.0	they	9-10
# ::node	0.0.1.0.1.1	person	
# ::node	0.1	you	3-4
# ::node	0.1.0	have-rel-role-91	15-16
# ::node	0.1.0.0	client	15-16
# ::node	0.2	also	1-2
# ::root	0	imply-01
# ::edge	have-rel-role-91	ARG0	person	0.1.0	0.0.1.0.1.1
# ::edge	have-rel-role-91	ARG0	they	0.1.0	0.0.1.0.1.0
# ::edge	have-rel-role-91	ARG2	client	0.1.0	0.1.0.0
# ::edge	imply-01	ARG0	you	0	0.1
# ::edge	imply-01	ARG1	possible-01	0	0.0
# ::edge	imply-01	mod	also	0	0.2
# ::edge	pay-01	condition	possible-01	0.0.1	0.0.1.0
# ::edge	place-01	ARG0	they	0.0.1.0.1	0.0.1.0.1.0
# ::edge	place-01	ARG2	person	0.0.1.0.1	0.0.1.0.1.1
# ::edge	possible-01	ARG1	pay-01	0.0	0.0.1
# ::edge	possible-01	ARG1	place-01	0.0.1.0	0.0.1.0.1
# ::edge	possible-01	condition	place-01	0.0	0.0.1.0.1
# ::edge	possible-01	polarity	-	0.0	0.0.0
# ::edge	possible-01	polarity	-	0.0.1.0	0.0.1.0.0
# ::edge	you	ARG1-of	have-rel-role-91	0.1	0.1.0
(MRPNode-0 / imply-01 :ARG1 (MRPNode-1 / possible-01 :polarity - :ARG1 (MRPNode-2 / pay-01 :condition (MRPNode-3 / possible-01 :polarity - :ARG1 (MRPNode-4 / place-01 :ARG0 (MRPNode-5 / they) :ARG2 (MRPNode-6 / person)))) :condition MRPNode-4) :ARG0 (MRPNode-7 / you :ARG1-of (MRPNode-8 / have-rel-role-91 :ARG0 MRPNode-5 :ARG0 MRPNode-6 :ARG2 (MRPNode-9 / client))) :mod (MRPNode-10 / also))

# ::id 891
# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tok You just have to base your answer on what you do know , which is what you want .
# ::alignments 0-1|0.0 1-2|0.1 2-3|0 4-5|0.2 6-7|0.0.2 11-12|0.0.0 17-18|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:08.307306 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 48
# ::node	0	obligate-01	2-3
# ::node	0.0	you	0-1
# ::node	0.0.0	know-01	11-12
# ::node	0.0.0.0	thing	
# ::node	0.0.1	want-01	17-18
# ::node	0.0.2	answer-01	6-7
# ::node	0.1	just	1-2
# ::node	0.2	base-02	4-5
# ::root	0	obligate-01
# ::edge	base-02	ARG0	you	0.2	0.0
# ::edge	base-02	ARG1	answer-01	0.2	0.0.2
# ::edge	base-02	ARG1	thing	0.2	0.0.0.0
# ::edge	know-01	ARG1	thing	0.0.0	0.0.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	base-02	0	0.2
# ::edge	obligate-01	mod	just	0	0.1
# ::edge	you	ARG0-of	answer-01	0.0	0.0.2
# ::edge	you	ARG0-of	know-01	0.0	0.0.0
# ::edge	you	ARG0-of	want-01	0.0	0.0.1
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / know-01 :ARG1 (MRPNode-7 / thing)) :ARG0-of (MRPNode-3 / want-01) :ARG0-of (MRPNode-4 / answer-01)) :mod (MRPNode-5 / just) :ARG2 (MRPNode-6 / base-02 :ARG0 MRPNode-1 :ARG1 MRPNode-4 :ARG1 MRPNode-7))

# ::id 892
# ::snt You need to read a lot to know what you like and what you don't.
# ::tok You need to read a lot to know what you like and what you do n't .
# ::alignments 1-2|0 3-4|0.0 5-6|0.0.1 7-8|0.0.0+0.0.0.0.0 10-11|0.0.0.0.2 11-12|0.0.0.0 13-14|0.0.0.1 14-15|0.0.0.1.0 15-16|0.0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:18.002482 ::parser eager_oracle ::smatch 0.9361702127659575 ::n_actions 55
# ::node	0	need-01	1-2
# ::node	0.0	read-01	3-4
# ::node	0.0.0	know-01	7-8
# ::node	0.0.0.0	and	11-12
# ::node	0.0.0.0.0	thing	7-8
# ::node	0.0.0.0.1	dislike-01	
# ::node	0.0.0.0.2	thing	10-11
# ::node	0.0.0.1	you	13-14
# ::node	0.0.0.1.0	do-02	14-15
# ::node	0.0.0.1.0.0	-	15-16
# ::node	0.0.1	lot	5-6
# ::root	0	need-01
# ::edge	and	op1	dislike-01	0.0.0.0	0.0.0.0.1
# ::edge	and	op2	thing	0.0.0.0	0.0.0.0.0
# ::edge	and	op2	thing	0.0.0.0	0.0.0.0.2
# ::edge	do-02	ARG1	thing	0.0.0.1.0	0.0.0.0.2
# ::edge	do-02	polarity	-	0.0.0.1.0	0.0.0.1.0.0
# ::edge	know-01	ARG0	you	0.0.0	0.0.0.1
# ::edge	know-01	ARG1	and	0.0.0	0.0.0.0
# ::edge	need-01	ARG0	you	0	0.0.0.1
# ::edge	need-01	ARG1	read-01	0	0.0
# ::edge	read-01	ARG0	you	0.0	0.0.0.1
# ::edge	read-01	purpose	know-01	0.0	0.0.0
# ::edge	read-01	quant	lot	0.0	0.0.1
# ::edge	you	ARG0-of	dislike-01	0.0.0.1	0.0.0.0.1
# ::edge	you	ARG0-of	do-02	0.0.0.1	0.0.0.1.0
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / read-01 :purpose (MRPNode-2 / know-01 :ARG1 (MRPNode-3 / and :op2 (MRPNode-4 / thing) :op1 (MRPNode-7 / dislike-01) :op2 (MRPNode-9 / thing)) :ARG0 (MRPNode-6 / you :ARG0-of MRPNode-7 :ARG0-of (MRPNode-8 / do-02 :polarity - :ARG1 MRPNode-9))) :quant (MRPNode-5 / lot) :ARG0 MRPNode-6) :ARG0 MRPNode-6)

# ::id 893
# ::snt It's not a good idea.
# ::tok It 's not a good idea .
# ::alignments 0-1|0.1 2-3|0.0.0 4-5|0.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:01:18.005123 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	idea	5-6
# ::node	0.0	good-02	4-5
# ::node	0.0.0	-	2-3
# ::node	0.1	it	0-1
# ::root	0	idea
# ::edge	good-02	polarity	-	0.0	0.0.0
# ::edge	idea	ARG1-of	good-02	0	0.0
# ::edge	idea	domain	it	0	0.1
(MRPNode-0 / idea :ARG1-of (MRPNode-1 / good-02 :polarity -) :domain (MRPNode-2 / it))

# ::id 894
# ::snt It's pretty much up to you.
# ::tok It 's pretty much up to you .
# ::alignments 3-4|0.1 6-7|0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:18.007693 ::parser eager_oracle ::smatch 0.2 ::n_actions 15
# ::node	0	depend-01	
# ::node	0.0	you	6-7
# ::node	0.1	it	3-4
# ::node	0.2	pretty-much	2-3
# ::root	0	depend-01
# ::edge	depend-01	ARG0	it	0	0.1
# ::edge	depend-01	ARG1	you	0	0.0
# ::edge	depend-01	degree	pretty-much	0	0.2
(MRPNode-0 / depend-01 :ARG1 (MRPNode-1 / you) :ARG0 (MRPNode-2 / it) :degree (MRPNode-3 / pretty-much))

# ::id 895
# ::snt Work into it slowly.
# ::tok Work into it slowly .
# ::alignments 0-1|0+0.0+0.2 2-3|0.1 3-4|0.3 ::annotator aligner3.py ::date 2021-03-11 23:01:18.009667 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	work-01	0-1
# ::node	0.0	imperative	0-1
# ::node	0.1	it	2-3
# ::node	0.2	you	0-1
# ::node	0.3	slow-05	3-4
# ::root	0	work-01
# ::edge	work-01	ARG0	you	0	0.2
# ::edge	work-01	ARG1	it	0	0.1
# ::edge	work-01	ARG1-of	slow-05	0	0.3
# ::edge	work-01	mode	imperative	0	0.0
(MRPNode-0 / work-01 :mode imperative :ARG1 (MRPNode-1 / it) :ARG0 (MRPNode-2 / you) :ARG1-of (MRPNode-3 / slow-05))

# ::id 896
# ::snt There are two ways to start with: plunging and dripping.
# ::tok There are two ways to start with : plunging and dripping .
# ::alignments 2-3|0.0 3-4|0 5-6|0.2 7-8|0.1 8-9|0.1.0.0 9-10|0.1.0 10-11|0.1.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:18.014856 ::parser eager_oracle ::smatch 1.0 ::n_actions 35
# ::node	0	way	3-4
# ::node	0.0	2	2-3
# ::node	0.1	mean-01	7-8
# ::node	0.1.0	and	9-10
# ::node	0.1.0.0	plunging	8-9
# ::node	0.1.0.1	dripping	10-11
# ::node	0.2	start-01	5-6
# ::root	0	way
# ::edge	and	op1	plunging	0.1.0	0.1.0.0
# ::edge	and	op2	dripping	0.1.0	0.1.0.1
# ::edge	mean-01	ARG2	and	0.1	0.1.0
# ::edge	way	domain	start-01	0	0.2
# ::edge	way	quant	2	0	0.0
# ::edge	way	quant	mean-01	0	0.1
(MRPNode-0 / way :quant 2 :quant (MRPNode-1 / mean-01 :ARG2 (MRPNode-2 / and :op1 (MRPNode-3 / plunging) :op2 (MRPNode-4 / dripping))) :domain (MRPNode-5 / start-01))

# ::id 897
# ::snt The answers so far are already good, but I'd like to add a map for Switzerland:
# ::tok The answers so far are already good , but I 'd like to add a map for Switzerland :
# ::alignments 1-2|0.0.0 5-6|0.0.1 6-7|0.0 8-9|0 9-10|0.1.0.1 11-12|0.1 13-14|0.1.0 15-16|0.1.0.0 17-18|0.1.0.0.0+0.1.0.0.0.0+0.1.0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:18.029759 ::parser eager_oracle ::smatch 0.9565217391304348 ::n_actions 50
# ::node	0	have-concession-91	8-9
# ::node	0.0	good-02	6-7
# ::node	0.0.0	answer-01	1-2
# ::node	0.0.0.0	so-far	
# ::node	0.0.1	already	5-6
# ::node	0.1	like-02	11-12
# ::node	0.1.0	add-02	13-14
# ::node	0.1.0.0	map	15-16
# ::node	0.1.0.0.0	country	17-18
# ::node	0.1.0.0.0.0	name	17-18
# ::node	0.1.0.0.0.0.0	switzerland	17-18
# ::node	0.1.0.1	i	9-10
# ::root	0	have-concession-91
# ::edge	add-02	ARG0	i	0.1.0	0.1.0.1
# ::edge	add-02	ARG1	map	0.1.0	0.1.0.0
# ::edge	answer-01	time	so-far	0.0.0	0.0.0.0
# ::edge	country	name	name	0.1.0.0.0	0.1.0.0.0.0
# ::edge	good-02	ARG1	answer-01	0.0	0.0.0
# ::edge	good-02	time	already	0.0	0.0.1
# ::edge	have-concession-91	ARG1	good-02	0	0.0
# ::edge	have-concession-91	ARG2	like-02	0	0.1
# ::edge	like-02	ARG0	i	0.1	0.1.0.1
# ::edge	like-02	ARG1	add-02	0.1	0.1.0
# ::edge	map	beneficiary	country	0.1.0.0	0.1.0.0.0
# ::edge	name	op1	switzerland	0.1.0.0.0.0	0.1.0.0.0.0.0
(MRPNode-0 / have-concession-91 :ARG1 (MRPNode-1 / good-02 :ARG1 (MRPNode-2 / answer-01 :time (MRPNode-3 / so-far)) :time (MRPNode-4 / already)) :ARG2 (MRPNode-5 / like-02 :ARG1 (MRPNode-6 / add-02 :ARG1 (MRPNode-7 / map :beneficiary (MRPNode-8 / country :name (MRPNode-9 / name :op1 switzerland))) :ARG0 (MRPNode-10 / i)) :ARG0 MRPNode-10))

# ::id 898
# ::snt There is no maximum.
# ::tok There is no maximum .
# ::alignments  ::annotator aligner3.py ::date 2021-03-11 23:01:18.030467 ::parser eager_oracle ::smatch 0.0 ::n_actions 7
# ::node	0	null	
# ::root	0	null
(n / null)

# ::id 899
# ::snt You need to read a lot to know what you like and what you don't.
# ::tok You need to read a lot to know what you like and what you do n't .
# ::alignments 1-2|0 3-4|0.0 5-6|0.0.1 7-8|0.0.0+0.0.0.0.0 10-11|0.0.0.0.2 11-12|0.0.0.0 13-14|0.0.0.1 14-15|0.0.0.1.0 15-16|0.0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:28.045248 ::parser eager_oracle ::smatch 0.9361702127659575 ::n_actions 55
# ::node	0	need-01	1-2
# ::node	0.0	read-01	3-4
# ::node	0.0.0	know-01	7-8
# ::node	0.0.0.0	and	11-12
# ::node	0.0.0.0.0	thing	7-8
# ::node	0.0.0.0.1	dislike-01	
# ::node	0.0.0.0.2	thing	10-11
# ::node	0.0.0.1	you	13-14
# ::node	0.0.0.1.0	do-02	14-15
# ::node	0.0.0.1.0.0	-	15-16
# ::node	0.0.1	lot	5-6
# ::root	0	need-01
# ::edge	and	op1	dislike-01	0.0.0.0	0.0.0.0.1
# ::edge	and	op2	thing	0.0.0.0	0.0.0.0.0
# ::edge	and	op2	thing	0.0.0.0	0.0.0.0.2
# ::edge	do-02	ARG1	thing	0.0.0.1.0	0.0.0.0.2
# ::edge	do-02	polarity	-	0.0.0.1.0	0.0.0.1.0.0
# ::edge	know-01	ARG0	you	0.0.0	0.0.0.1
# ::edge	know-01	ARG1	and	0.0.0	0.0.0.0
# ::edge	need-01	ARG0	you	0	0.0.0.1
# ::edge	need-01	ARG1	read-01	0	0.0
# ::edge	read-01	ARG0	you	0.0	0.0.0.1
# ::edge	read-01	purpose	know-01	0.0	0.0.0
# ::edge	read-01	quant	lot	0.0	0.0.1
# ::edge	you	ARG0-of	dislike-01	0.0.0.1	0.0.0.0.1
# ::edge	you	ARG0-of	do-02	0.0.0.1	0.0.0.1.0
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / read-01 :purpose (MRPNode-2 / know-01 :ARG1 (MRPNode-3 / and :op2 (MRPNode-4 / thing) :op1 (MRPNode-7 / dislike-01) :op2 (MRPNode-9 / thing)) :ARG0 (MRPNode-6 / you :ARG0-of MRPNode-7 :ARG0-of (MRPNode-8 / do-02 :polarity - :ARG1 MRPNode-9))) :quant (MRPNode-5 / lot) :ARG0 MRPNode-6) :ARG0 MRPNode-6)

# ::id 900
# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tok You just have to base your answer on what you do know , which is what you want .
# ::alignments 0-1|0.0 1-2|0.1 2-3|0 4-5|0.2 6-7|0.0.2 11-12|0.0.0 17-18|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:28.177872 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 48
# ::node	0	obligate-01	2-3
# ::node	0.0	you	0-1
# ::node	0.0.0	know-01	11-12
# ::node	0.0.0.0	thing	
# ::node	0.0.1	want-01	17-18
# ::node	0.0.2	answer-01	6-7
# ::node	0.1	just	1-2
# ::node	0.2	base-02	4-5
# ::root	0	obligate-01
# ::edge	base-02	ARG0	you	0.2	0.0
# ::edge	base-02	ARG1	answer-01	0.2	0.0.2
# ::edge	base-02	ARG1	thing	0.2	0.0.0.0
# ::edge	know-01	ARG1	thing	0.0.0	0.0.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	base-02	0	0.2
# ::edge	obligate-01	mod	just	0	0.1
# ::edge	you	ARG0-of	answer-01	0.0	0.0.2
# ::edge	you	ARG0-of	know-01	0.0	0.0.0
# ::edge	you	ARG0-of	want-01	0.0	0.0.1
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / know-01 :ARG1 (MRPNode-7 / thing)) :ARG0-of (MRPNode-3 / want-01) :ARG0-of (MRPNode-4 / answer-01)) :mod (MRPNode-5 / just) :ARG2 (MRPNode-6 / base-02 :ARG0 MRPNode-1 :ARG1 MRPNode-4 :ARG1 MRPNode-7))

# ::id 901
# ::snt No it does not affect your ratings.
# ::tok No it does not affect your ratings .
# ::alignments 0-1|0.0 1-2|0.2 4-5|0 ::annotator aligner3.py ::date 2021-03-11 23:01:28.180700 ::parser eager_oracle ::smatch 0.7142857142857143 ::n_actions 19
# ::node	0	affect-01	4-5
# ::node	0.0	-	0-1
# ::node	0.1	rate-01	
# ::node	0.1.0	you	
# ::node	0.2	it	1-2
# ::root	0	affect-01
# ::edge	affect-01	ARG0	it	0	0.2
# ::edge	affect-01	ARG1	rate-01	0	0.1
# ::edge	affect-01	polarity	-	0	0.0
# ::edge	rate-01	ARG1	you	0.1	0.1.0
(MRPNode-0 / affect-01 :polarity - :ARG1 (MRPNode-1 / rate-01 :ARG1 (MRPNode-2 / you)) :ARG0 (MRPNode-3 / it))

# ::id 902
# ::snt The best thing you can do is to know your stuff.
# ::tok The best thing you can do is to know your stuff .
# ::alignments 1-2|0.0 2-3|0 3-4|0.1.0 4-5|0.1.1 5-6|0.1 8-9|0.2 10-11|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:01:28.604187 ::parser eager_oracle ::smatch 0.8717948717948718 ::n_actions 41
# ::node	0	thing	2-3
# ::node	0.0	good-02	1-2
# ::node	0.1	do-02	5-6
# ::node	0.1.0	you	3-4
# ::node	0.1.1	possible-01	4-5
# ::node	0.2	know-01	8-9
# ::node	0.2.0	stuff	10-11
# ::node	0.3	have-degree-91	
# ::node	0.3.0	most	
# ::root	0	thing
# ::edge	do-02	ARG0	you	0.1	0.1.0
# ::edge	do-02	ARG1-of	possible-01	0.1	0.1.1
# ::edge	have-degree-91	ARG2	good-02	0.3	0.0
# ::edge	have-degree-91	ARG3	most	0.3	0.3.0
# ::edge	know-01	ARG0	you	0.2	0.1.0
# ::edge	know-01	ARG1	stuff	0.2	0.2.0
# ::edge	know-01	ARG2	good-02	0.2	0.0
# ::edge	stuff	poss	you	0.2.0	0.1.0
# ::edge	thing	ARG1-of	do-02	0	0.1
# ::edge	thing	ARG1-of	good-02	0	0.0
# ::edge	thing	ARG1-of	have-degree-91	0	0.3
# ::edge	thing	ARG1-of	know-01	0	0.2
(MRPNode-0 / thing :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / do-02 :ARG0 (MRPNode-3 / you) :ARG1-of (MRPNode-4 / possible-01)) :ARG1-of (MRPNode-5 / know-01 :ARG2 MRPNode-1 :ARG0 MRPNode-3 :ARG1 (MRPNode-6 / stuff :poss MRPNode-3)) :ARG1-of (MRPNode-7 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-8 / most)))

# ::id 903
# ::snt You don't have to know.
# ::tok You do n't have to know .
# ::alignments 0-1|0.1 2-3|0.0 3-4|0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-11 23:01:28.608134 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	obligate-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	you	0-1
# ::node	0.2	know-01	5-6
# ::root	0	obligate-01
# ::edge	know-01	ARG0	you	0.2	0.1
# ::edge	obligate-01	ARG1	you	0	0.1
# ::edge	obligate-01	ARG2	know-01	0	0.2
# ::edge	obligate-01	polarity	-	0	0.0
(MRPNode-0 / obligate-01 :polarity - :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / know-01 :ARG0 MRPNode-1))

# ::id 904
# ::snt You need to read a lot to know what you like and what you don't.
# ::tok You need to read a lot to know what you like and what you do n't .
# ::alignments 1-2|0 3-4|0.0 5-6|0.0.1 7-8|0.0.0+0.0.0.0.0 10-11|0.0.0.0.2 11-12|0.0.0.0 13-14|0.0.0.1 14-15|0.0.0.1.0 15-16|0.0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:37.691462 ::parser eager_oracle ::smatch 0.9361702127659575 ::n_actions 55
# ::node	0	need-01	1-2
# ::node	0.0	read-01	3-4
# ::node	0.0.0	know-01	7-8
# ::node	0.0.0.0	and	11-12
# ::node	0.0.0.0.0	thing	7-8
# ::node	0.0.0.0.1	dislike-01	
# ::node	0.0.0.0.2	thing	10-11
# ::node	0.0.0.1	you	13-14
# ::node	0.0.0.1.0	do-02	14-15
# ::node	0.0.0.1.0.0	-	15-16
# ::node	0.0.1	lot	5-6
# ::root	0	need-01
# ::edge	and	op1	dislike-01	0.0.0.0	0.0.0.0.1
# ::edge	and	op2	thing	0.0.0.0	0.0.0.0.0
# ::edge	and	op2	thing	0.0.0.0	0.0.0.0.2
# ::edge	do-02	ARG1	thing	0.0.0.1.0	0.0.0.0.2
# ::edge	do-02	polarity	-	0.0.0.1.0	0.0.0.1.0.0
# ::edge	know-01	ARG0	you	0.0.0	0.0.0.1
# ::edge	know-01	ARG1	and	0.0.0	0.0.0.0
# ::edge	need-01	ARG0	you	0	0.0.0.1
# ::edge	need-01	ARG1	read-01	0	0.0
# ::edge	read-01	ARG0	you	0.0	0.0.0.1
# ::edge	read-01	purpose	know-01	0.0	0.0.0
# ::edge	read-01	quant	lot	0.0	0.0.1
# ::edge	you	ARG0-of	dislike-01	0.0.0.1	0.0.0.0.1
# ::edge	you	ARG0-of	do-02	0.0.0.1	0.0.0.1.0
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / read-01 :purpose (MRPNode-2 / know-01 :ARG1 (MRPNode-3 / and :op2 (MRPNode-4 / thing) :op1 (MRPNode-7 / dislike-01) :op2 (MRPNode-9 / thing)) :ARG0 (MRPNode-6 / you :ARG0-of MRPNode-7 :ARG0-of (MRPNode-8 / do-02 :polarity - :ARG1 MRPNode-9))) :quant (MRPNode-5 / lot) :ARG0 MRPNode-6) :ARG0 MRPNode-6)

# ::id 905
# ::snt The best thing you can do is to know your stuff.
# ::tok The best thing you can do is to know your stuff .
# ::alignments 1-2|0.0 2-3|0 3-4|0.1.0 4-5|0.1.1 5-6|0.1 8-9|0.2 10-11|0.2.0 ::annotator aligner3.py ::date 2021-03-11 23:01:38.056952 ::parser eager_oracle ::smatch 0.8717948717948718 ::n_actions 41
# ::node	0	thing	2-3
# ::node	0.0	good-02	1-2
# ::node	0.1	do-02	5-6
# ::node	0.1.0	you	3-4
# ::node	0.1.1	possible-01	4-5
# ::node	0.2	know-01	8-9
# ::node	0.2.0	stuff	10-11
# ::node	0.3	have-degree-91	
# ::node	0.3.0	most	
# ::root	0	thing
# ::edge	do-02	ARG0	you	0.1	0.1.0
# ::edge	do-02	ARG1-of	possible-01	0.1	0.1.1
# ::edge	have-degree-91	ARG2	good-02	0.3	0.0
# ::edge	have-degree-91	ARG3	most	0.3	0.3.0
# ::edge	know-01	ARG0	you	0.2	0.1.0
# ::edge	know-01	ARG1	stuff	0.2	0.2.0
# ::edge	know-01	ARG2	good-02	0.2	0.0
# ::edge	stuff	poss	you	0.2.0	0.1.0
# ::edge	thing	ARG1-of	do-02	0	0.1
# ::edge	thing	ARG1-of	good-02	0	0.0
# ::edge	thing	ARG1-of	have-degree-91	0	0.3
# ::edge	thing	ARG1-of	know-01	0	0.2
(MRPNode-0 / thing :ARG1-of (MRPNode-1 / good-02) :ARG1-of (MRPNode-2 / do-02 :ARG0 (MRPNode-3 / you) :ARG1-of (MRPNode-4 / possible-01)) :ARG1-of (MRPNode-5 / know-01 :ARG2 MRPNode-1 :ARG0 MRPNode-3 :ARG1 (MRPNode-6 / stuff :poss MRPNode-3)) :ARG1-of (MRPNode-7 / have-degree-91 :ARG2 MRPNode-1 :ARG3 (MRPNode-8 / most)))

# ::id 906
# ::snt You PROBABLY don't have any chance at the moment.
# ::tok You PROBABLY do n't have any chance at the moment .
# ::alignments 0-1|0.1.1 1-2|0.3 3-4|0.0 4-5|0 5-6|0.1.0 6-7|0.1 9-10|0.2 ::annotator aligner3.py ::date 2021-03-11 23:01:38.065073 ::parser eager_oracle ::smatch 0.896551724137931 ::n_actions 36
# ::node	0	have-03	4-5
# ::node	0.0	-	3-4
# ::node	0.1	chance-02	6-7
# ::node	0.1.0	any	5-6
# ::node	0.1.1	you	0-1
# ::node	0.2	moment	9-10
# ::node	0.3	probable	1-2
# ::root	0	have-03
# ::edge	chance-02	ARG0	you	0.1	0.1.1
# ::edge	chance-02	mod	any	0.1	0.1.0
# ::edge	have-03	ARG0	you	0	0.1.1
# ::edge	have-03	ARG1	chance-02	0	0.1
# ::edge	have-03	manner	probable	0	0.3
# ::edge	have-03	mod	-	0	0.0
# ::edge	have-03	time	moment	0	0.2
(MRPNode-0 / have-03 :mod - :ARG1 (MRPNode-1 / chance-02 :mod (MRPNode-2 / any) :ARG0 (MRPNode-3 / you)) :ARG0 MRPNode-3 :time (MRPNode-4 / moment) :manner (MRPNode-5 / probable))

# ::id 907
# ::snt You should do it.
# ::tok You should do it .
# ::alignments 0-1|0.0.0 1-2|0 2-3|0.0 3-4|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:38.066957 ::parser eager_oracle ::smatch 1.0 ::n_actions 20
# ::node	0	recommend-01	1-2
# ::node	0.0	do-02	2-3
# ::node	0.0.0	you	0-1
# ::node	0.0.1	it	3-4
# ::root	0	recommend-01
# ::edge	do-02	ARG0	you	0.0	0.0.0
# ::edge	do-02	ARG1	it	0.0	0.0.1
# ::edge	recommend-01	ARG1	do-02	0	0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / do-02 :ARG0 (MRPNode-2 / you) :ARG1 (MRPNode-3 / it)))

# ::id 908
# ::snt What kind of insulation is it?
# ::tok What kind of insulation is it ?
# ::alignments 0-1|0.0.0 1-2|0.0 3-4|0 5-6|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:38.069123 ::parser eager_oracle ::smatch 1.0 ::n_actions 22
# ::node	0	insulation	3-4
# ::node	0.0	kind	1-2
# ::node	0.0.0	amr-unknown	0-1
# ::node	0.0.1	it	5-6
# ::root	0	insulation
# ::edge	insulation	mod	kind	0	0.0
# ::edge	kind	mod	amr-unknown	0.0	0.0.0
# ::edge	kind	mod	it	0.0	0.0.1
(MRPNode-0 / insulation :mod (MRPNode-1 / kind :mod (MRPNode-2 / amr-unknown) :mod (MRPNode-3 / it)))

# ::id 909
# ::snt It's all in her head.
# ::tok It 's all in her head .
# ::alignments 0-1|0.0 2-3|0.0.0 3-4|0 4-5|0.1.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:38.071429 ::parser eager_oracle ::smatch 0.8571428571428572 ::n_actions 24
# ::node	0	be-located-at-91	3-4
# ::node	0.0	it	0-1
# ::node	0.0.0	all	2-3
# ::node	0.1	head	5-6
# ::node	0.1.0	she	4-5
# ::root	0	be-located-at-91
# ::edge	be-located-at-91	ARG1	it	0	0.0
# ::edge	be-located-at-91	ARG2	head	0	0.1
# ::edge	head	part-of	she	0.1	0.1.0
# ::edge	it	mod	all	0.0	0.0.0
(MRPNode-0 / be-located-at-91 :ARG1 (MRPNode-1 / it :mod (MRPNode-2 / all)) :ARG2 (MRPNode-3 / head :part-of (MRPNode-4 / she)))

# ::id 910
# ::snt You need to read a lot to know what you like and what you don't.
# ::tok You need to read a lot to know what you like and what you do n't .
# ::alignments 1-2|0 3-4|0.0 5-6|0.0.1 7-8|0.0.0+0.0.0.0.0 10-11|0.0.0.0.2 11-12|0.0.0.0 13-14|0.0.0.1 14-15|0.0.0.1.0 15-16|0.0.0.1.0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:47.022149 ::parser eager_oracle ::smatch 0.9361702127659575 ::n_actions 55
# ::node	0	need-01	1-2
# ::node	0.0	read-01	3-4
# ::node	0.0.0	know-01	7-8
# ::node	0.0.0.0	and	11-12
# ::node	0.0.0.0.0	thing	7-8
# ::node	0.0.0.0.1	dislike-01	
# ::node	0.0.0.0.2	thing	10-11
# ::node	0.0.0.1	you	13-14
# ::node	0.0.0.1.0	do-02	14-15
# ::node	0.0.0.1.0.0	-	15-16
# ::node	0.0.1	lot	5-6
# ::root	0	need-01
# ::edge	and	op1	dislike-01	0.0.0.0	0.0.0.0.1
# ::edge	and	op2	thing	0.0.0.0	0.0.0.0.0
# ::edge	and	op2	thing	0.0.0.0	0.0.0.0.2
# ::edge	do-02	ARG1	thing	0.0.0.1.0	0.0.0.0.2
# ::edge	do-02	polarity	-	0.0.0.1.0	0.0.0.1.0.0
# ::edge	know-01	ARG0	you	0.0.0	0.0.0.1
# ::edge	know-01	ARG1	and	0.0.0	0.0.0.0
# ::edge	need-01	ARG0	you	0	0.0.0.1
# ::edge	need-01	ARG1	read-01	0	0.0
# ::edge	read-01	ARG0	you	0.0	0.0.0.1
# ::edge	read-01	purpose	know-01	0.0	0.0.0
# ::edge	read-01	quant	lot	0.0	0.0.1
# ::edge	you	ARG0-of	dislike-01	0.0.0.1	0.0.0.0.1
# ::edge	you	ARG0-of	do-02	0.0.0.1	0.0.0.1.0
(MRPNode-0 / need-01 :ARG1 (MRPNode-1 / read-01 :purpose (MRPNode-2 / know-01 :ARG1 (MRPNode-3 / and :op2 (MRPNode-4 / thing) :op1 (MRPNode-7 / dislike-01) :op2 (MRPNode-9 / thing)) :ARG0 (MRPNode-6 / you :ARG0-of MRPNode-7 :ARG0-of (MRPNode-8 / do-02 :polarity - :ARG1 MRPNode-9))) :quant (MRPNode-5 / lot) :ARG0 MRPNode-6) :ARG0 MRPNode-6)

# ::id 911
# ::snt You will want to clean the area first.
# ::tok You will want to clean the area first .
# ::alignments 0-1|0.0.2 2-3|0 4-5|0.0 6-7|0.0.0 7-8|0.0.1+0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:01:47.026146 ::parser eager_oracle ::smatch 1.0 ::n_actions 32
# ::node	0	want-01	2-3
# ::node	0.0	clean-up-02	4-5
# ::node	0.0.0	area	6-7
# ::node	0.0.1	ordinal-entity	7-8
# ::node	0.0.1.0	1	7-8
# ::node	0.0.2	you	0-1
# ::root	0	want-01
# ::edge	clean-up-02	ARG0	you	0.0	0.0.2
# ::edge	clean-up-02	ARG1	area	0.0	0.0.0
# ::edge	clean-up-02	ord	ordinal-entity	0.0	0.0.1
# ::edge	ordinal-entity	value	1	0.0.1	0.0.1.0
# ::edge	want-01	ARG0	you	0	0.0.2
# ::edge	want-01	ARG1	clean-up-02	0	0.0
(MRPNode-0 / want-01 :ARG1 (MRPNode-1 / clean-up-02 :ARG1 (MRPNode-2 / area) :ord (MRPNode-3 / ordinal-entity :value 1) :ARG0 (MRPNode-4 / you)) :ARG0 MRPNode-4)

# ::id 912
# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tok You just have to base your answer on what you do know , which is what you want .
# ::alignments 0-1|0.0 1-2|0.1 2-3|0 4-5|0.2 6-7|0.0.2 11-12|0.0.0 17-18|0.0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:47.147869 ::parser eager_oracle ::smatch 0.9142857142857143 ::n_actions 48
# ::node	0	obligate-01	2-3
# ::node	0.0	you	0-1
# ::node	0.0.0	know-01	11-12
# ::node	0.0.0.0	thing	
# ::node	0.0.1	want-01	17-18
# ::node	0.0.2	answer-01	6-7
# ::node	0.1	just	1-2
# ::node	0.2	base-02	4-5
# ::root	0	obligate-01
# ::edge	base-02	ARG0	you	0.2	0.0
# ::edge	base-02	ARG1	answer-01	0.2	0.0.2
# ::edge	base-02	ARG1	thing	0.2	0.0.0.0
# ::edge	know-01	ARG1	thing	0.0.0	0.0.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	base-02	0	0.2
# ::edge	obligate-01	mod	just	0	0.1
# ::edge	you	ARG0-of	answer-01	0.0	0.0.2
# ::edge	you	ARG0-of	know-01	0.0	0.0.0
# ::edge	you	ARG0-of	want-01	0.0	0.0.1
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / know-01 :ARG1 (MRPNode-7 / thing)) :ARG0-of (MRPNode-3 / want-01) :ARG0-of (MRPNode-4 / answer-01)) :mod (MRPNode-5 / just) :ARG2 (MRPNode-6 / base-02 :ARG0 MRPNode-1 :ARG1 MRPNode-4 :ARG1 MRPNode-7))

# ::id 913
# ::snt What is your lid made of?
# ::tok What is your lid made of ?
# ::alignments 0-1|0.1 2-3|0.0.0 3-4|0.0 4-5|0 ::annotator aligner3.py ::date 2021-03-11 23:01:47.150230 ::parser eager_oracle ::smatch 1.0 ::n_actions 21
# ::node	0	make-01	4-5
# ::node	0.0	lid	3-4
# ::node	0.0.0	you	2-3
# ::node	0.1	amr-unknown	0-1
# ::root	0	make-01
# ::edge	lid	poss	you	0.0	0.0.0
# ::edge	make-01	ARG1	lid	0	0.0
# ::edge	make-01	ARG2	amr-unknown	0	0.1
(MRPNode-0 / make-01 :ARG1 (MRPNode-1 / lid :poss (MRPNode-2 / you)) :ARG2 (MRPNode-3 / amr-unknown))

# ::id 914
# ::snt You don't need any visa.
# ::tok You do n't need any visa .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 4-5|0.1.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:47.156122 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	need-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	visa	5-6
# ::node	0.1.0	any	4-5
# ::node	0.2	you	0-1
# ::root	0	need-01
# ::edge	need-01	ARG0	you	0	0.2
# ::edge	need-01	ARG1	visa	0	0.1
# ::edge	need-01	polarity	-	0	0.0
# ::edge	visa	mod	any	0.1	0.1.0
(MRPNode-0 / need-01 :polarity - :ARG1 (MRPNode-1 / visa :mod (MRPNode-2 / any)) :ARG0 (MRPNode-3 / you))

# ::id 915
# ::snt The answer to both questions is: Yes.
# ::tok The answer to both questions is : Yes .
# ::alignments 1-2|0 3-4|0.1.0 4-5|0.1 7-8|0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:47.159963 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	answer-01	1-2
# ::node	0.0	yes	7-8
# ::node	0.1	question-01	4-5
# ::node	0.1.0	both	3-4
# ::root	0	answer-01
# ::edge	answer-01	ARG2	question-01	0	0.1
# ::edge	answer-01	ARG2	yes	0	0.0
# ::edge	question-01	mod	both	0.1	0.1.0
(MRPNode-0 / answer-01 :ARG2 (MRPNode-1 / yes) :ARG2 (MRPNode-2 / question-01 :mod (MRPNode-3 / both)))

# ::id 916
# ::snt You don't have to know.
# ::tok You do n't have to know .
# ::alignments 0-1|0.1 2-3|0.0 3-4|0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-11 23:01:47.163179 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	obligate-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	you	0-1
# ::node	0.2	know-01	5-6
# ::root	0	obligate-01
# ::edge	know-01	ARG0	you	0.2	0.1
# ::edge	obligate-01	ARG1	you	0	0.1
# ::edge	obligate-01	ARG2	know-01	0	0.2
# ::edge	obligate-01	polarity	-	0	0.0
(MRPNode-0 / obligate-01 :polarity - :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / know-01 :ARG0 MRPNode-1))

# ::id 917
# ::snt There are a few things I think you should do.
# ::tok There are a few things I think you should do .
# ::alignments 3-4|0.0.0.0.0 4-5|0.0.0.0 5-6|0.1 6-7|0 7-8|0.0.0.1 8-9|0.0 9-10|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:47.197914 ::parser eager_oracle ::smatch 1.0 ::n_actions 37
# ::node	0	think-01	6-7
# ::node	0.0	recommend-01	8-9
# ::node	0.0.0	do-02	9-10
# ::node	0.0.0.0	thing	4-5
# ::node	0.0.0.0.0	few	3-4
# ::node	0.0.0.1	you	7-8
# ::node	0.1	i	5-6
# ::root	0	think-01
# ::edge	do-02	ARG0	you	0.0.0	0.0.0.1
# ::edge	do-02	ARG1	thing	0.0.0	0.0.0.0
# ::edge	recommend-01	ARG1	do-02	0.0	0.0.0
# ::edge	recommend-01	ARG2	you	0.0	0.0.0.1
# ::edge	thing	quant	few	0.0.0.0	0.0.0.0.0
# ::edge	think-01	ARG0	i	0	0.1
# ::edge	think-01	ARG1	recommend-01	0	0.0
(MRPNode-0 / think-01 :ARG1 (MRPNode-1 / recommend-01 :ARG1 (MRPNode-2 / do-02 :ARG1 (MRPNode-3 / thing :quant (MRPNode-4 / few)) :ARG0 (MRPNode-5 / you)) :ARG2 MRPNode-5) :ARG0 (MRPNode-6 / i))

# ::id 918
# ::snt Yes, there is a chemical difference.
# ::tok Yes , there is a chemical difference .
# ::alignments 5-6|0.0 6-7|0 ::annotator aligner3.py ::date 2021-03-11 23:01:47.199272 ::parser eager_oracle ::smatch 1.0 ::n_actions 16
# ::node	0	differ-02	6-7
# ::node	0.0	chemical	5-6
# ::root	0	differ-02
# ::edge	differ-02	mod	chemical	0	0.0
(MRPNode-0 / differ-02 :mod (MRPNode-1 / chemical))

# ::id 919
# ::snt They can be out of level by a bit, but flat is important.
# ::tok They can be out of level by a bit , but flat is important .
# ::alignments 0-1|0.1.0.0 1-2|0.1 3-4|0.1.0 5-6|0.1.0.1 8-9|0.1.0.2 10-11|0 11-12|0.0.0 13-14|0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:47.209012 ::parser eager_oracle ::smatch 1.0 ::n_actions 45
# ::node	0	have-concession-91	10-11
# ::node	0.0	important-01	13-14
# ::node	0.0.0	flat-06	11-12
# ::node	0.1	possible-01	1-2
# ::node	0.1.0	out-06	3-4
# ::node	0.1.0.0	they	0-1
# ::node	0.1.0.1	level	5-6
# ::node	0.1.0.2	bit	8-9
# ::root	0	have-concession-91
# ::edge	have-concession-91	ARG1	important-01	0	0.0
# ::edge	have-concession-91	ARG2	possible-01	0	0.1
# ::edge	important-01	ARG1	flat-06	0.0	0.0.0
# ::edge	out-06	ARG1	flat-06	0.1.0	0.0.0
# ::edge	out-06	ARG1	they	0.1.0	0.1.0.0
# ::edge	out-06	ARG2	level	0.1.0	0.1.0.1
# ::edge	out-06	degree	bit	0.1.0	0.1.0.2
# ::edge	possible-01	ARG1	out-06	0.1	0.1.0
(MRPNode-0 / have-concession-91 :ARG1 (MRPNode-1 / important-01 :ARG1 (MRPNode-2 / flat-06)) :ARG2 (MRPNode-3 / possible-01 :ARG1 (MRPNode-4 / out-06 :ARG1 MRPNode-2 :ARG1 (MRPNode-5 / they) :ARG2 (MRPNode-6 / level) :degree (MRPNode-7 / bit))))

# ::id 920
# ::snt No, you do not NEED a bread machine.
# ::tok No , you do not NEED a bread machine .
# ::alignments 0-1|0.0 2-3|0.2 5-6|0 7-8|0.1.0 8-9|0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:47.213038 ::parser eager_oracle ::smatch 1.0 ::n_actions 27
# ::node	0	need-01	5-6
# ::node	0.0	-	0-1
# ::node	0.1	machine	8-9
# ::node	0.1.0	bread	7-8
# ::node	0.2	you	2-3
# ::root	0	need-01
# ::edge	machine	mod	bread	0.1	0.1.0
# ::edge	need-01	ARG0	you	0	0.2
# ::edge	need-01	ARG1	machine	0	0.1
# ::edge	need-01	polarity	-	0	0.0
(MRPNode-0 / need-01 :polarity - :ARG1 (MRPNode-1 / machine :mod (MRPNode-2 / bread)) :ARG0 (MRPNode-3 / you))

# ::id 921
# ::snt You don't have to know.
# ::tok You do n't have to know .
# ::alignments 0-1|0.1 2-3|0.0 3-4|0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-11 23:01:47.216265 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	obligate-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	you	0-1
# ::node	0.2	know-01	5-6
# ::root	0	obligate-01
# ::edge	know-01	ARG0	you	0.2	0.1
# ::edge	obligate-01	ARG1	you	0	0.1
# ::edge	obligate-01	ARG2	know-01	0	0.2
# ::edge	obligate-01	polarity	-	0	0.0
(MRPNode-0 / obligate-01 :polarity - :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / know-01 :ARG0 MRPNode-1))

# ::id 922
# ::snt It is more deciding what you should do and what you should get others to do.
# ::tok It is more deciding what you should do and what you should get others to do .
# ::alignments 2-3|0.2 3-4|0 5-6|0.1 6-7|0.1.1 7-8|0.0.1+0.0.1.0 8-9|0.0 13-14|0.0.1.0.0 15-16|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:01:47.274456 ::parser eager_oracle ::smatch 0.9500000000000001 ::n_actions 50
# ::node	0	decide-01	3-4
# ::node	0.0	and	8-9
# ::node	0.0.0	thing	
# ::node	0.0.1	thing	7-8
# ::node	0.0.1.0	do-02	7-8
# ::node	0.0.1.0.0	other	13-14
# ::node	0.1	you	5-6
# ::node	0.1.0	do-02	15-16
# ::node	0.1.1	recommend-01	6-7
# ::node	0.2	more	2-3
# ::root	0	decide-01
# ::edge	and	op1	thing	0.0	0.0.0
# ::edge	and	op2	thing	0.0	0.0.1
# ::edge	decide-01	ARG0	you	0	0.1
# ::edge	decide-01	ARG1	and	0	0.0
# ::edge	decide-01	mod	more	0	0.2
# ::edge	do-02	ARG0	other	0.0.1.0	0.0.1.0.0
# ::edge	recommend-01	ARG1	thing	0.1.1	0.0.1
# ::edge	thing	ARG1-of	do-02	0.0.1	0.0.1.0
# ::edge	you	ARG0-of	do-02	0.1	0.1.0
# ::edge	you	ARG0-of	recommend-01	0.1	0.1.1
(MRPNode-0 / decide-01 :ARG1 (MRPNode-1 / and :op1 (MRPNode-2 / thing) :op2 (MRPNode-3 / thing :ARG1-of (MRPNode-4 / do-02 :ARG0 (MRPNode-5 / other)))) :ARG0 (MRPNode-6 / you :ARG0-of (MRPNode-7 / do-02) :ARG0-of (MRPNode-8 / recommend-01 :ARG1 MRPNode-3)) :mod (MRPNode-9 / more))

# ::id 923
# ::snt You are on the right path.
# ::tok You are on the right path .
# ::alignments 0-1|0.0 2-3|0 4-5|0.1.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:47.276791 ::parser eager_oracle ::smatch 0.823529411764706 ::n_actions 21
# ::node	0	be-located-at-91	2-3
# ::node	0.0	you	0-1
# ::node	0.1	path	5-6
# ::node	0.1.0	right-06	4-5
# ::root	0	be-located-at-91
# ::edge	be-located-at-91	ARG1	you	0	0.0
# ::edge	be-located-at-91	ARG2	path	0	0.1
# ::edge	path	ARG1-of	right-06	0.1	0.1.0
(MRPNode-0 / be-located-at-91 :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / path :ARG1-of (MRPNode-3 / right-06)))

# ::id 924
# ::snt You don't need any visa.
# ::tok You do n't need any visa .
# ::alignments 0-1|0.2 2-3|0.0 3-4|0 4-5|0.1.0 5-6|0.1 ::annotator aligner3.py ::date 2021-03-11 23:01:47.282640 ::parser eager_oracle ::smatch 1.0 ::n_actions 24
# ::node	0	need-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	visa	5-6
# ::node	0.1.0	any	4-5
# ::node	0.2	you	0-1
# ::root	0	need-01
# ::edge	need-01	ARG0	you	0	0.2
# ::edge	need-01	ARG1	visa	0	0.1
# ::edge	need-01	polarity	-	0	0.0
# ::edge	visa	mod	any	0.1	0.1.0
(MRPNode-0 / need-01 :polarity - :ARG1 (MRPNode-1 / visa :mod (MRPNode-2 / any)) :ARG0 (MRPNode-3 / you))

# ::id 925
# ::snt You have to decide what you want to get out of this.
# ::tok You have to decide what you want to get out of this .
# ::alignments 0-1|0.0 1-2|0 3-4|0.1 6-7|0.0.0 8-9|0.0.0.0 11-12|0.0.0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:47.328630 ::parser eager_oracle ::smatch 0.9032258064516129 ::n_actions 38
# ::node	0	obligate-01	1-2
# ::node	0.0	you	0-1
# ::node	0.0.0	want-01	6-7
# ::node	0.0.0.0	get-05	8-9
# ::node	0.0.0.0.0	this	11-12
# ::node	0.0.0.0.1	thing	
# ::node	0.1	decide-01	3-4
# ::root	0	obligate-01
# ::edge	decide-01	ARG0	you	0.1	0.0
# ::edge	decide-01	ARG1	thing	0.1	0.0.0.0.1
# ::edge	get-05	ARG1	thing	0.0.0.0	0.0.0.0.1
# ::edge	get-05	ARG2	this	0.0.0.0	0.0.0.0.0
# ::edge	obligate-01	ARG1	you	0	0.0
# ::edge	obligate-01	ARG2	decide-01	0	0.1
# ::edge	want-01	ARG1	get-05	0.0.0	0.0.0.0
# ::edge	you	ARG0-of	get-05	0.0	0.0.0.0
# ::edge	you	ARG0-of	want-01	0.0	0.0.0
(MRPNode-0 / obligate-01 :ARG1 (MRPNode-1 / you :ARG0-of (MRPNode-2 / want-01 :ARG1 (MRPNode-3 / get-05 :ARG2 (MRPNode-4 / this) :ARG1 (MRPNode-6 / thing))) :ARG0-of MRPNode-3) :ARG2 (MRPNode-5 / decide-01 :ARG0 MRPNode-1 :ARG1 MRPNode-6))

# ::id 926
# ::snt It is impossible to answer this question without a form check.
# ::tok It is impossible to answer this question without a form check .
# ::alignments 2-3|0+0.0 4-5|0.1.1 5-6|0.1.1.0 6-7|0.1 7-8|0.1.0.0 9-10|0.1.0.1 10-11|0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:01:47.341864 ::parser eager_oracle ::smatch 0.896551724137931 ::n_actions 39
# ::node	0	possible-01	2-3
# ::node	0.0	-	2-3
# ::node	0.1	answer-01	6-7
# ::node	0.1.0	check-01	10-11
# ::node	0.1.0.0	-	7-8
# ::node	0.1.0.1	form	9-10
# ::node	0.1.1	question-01	4-5
# ::node	0.1.1.0	this	5-6
# ::root	0	possible-01
# ::edge	answer-01	ARG1	check-01	0.1	0.1.0
# ::edge	answer-01	ARG1	question-01	0.1	0.1.1
# ::edge	check-01	ARG1	form	0.1.0	0.1.0.1
# ::edge	check-01	polarity	-	0.1.0	0.1.0.0
# ::edge	possible-01	ARG1	answer-01	0	0.1
# ::edge	possible-01	polarity	-	0	0.0
# ::edge	question-01	mod	this	0.1.1	0.1.1.0
(MRPNode-0 / possible-01 :polarity - :ARG1 (MRPNode-1 / answer-01 :ARG1 (MRPNode-2 / check-01 :polarity - :ARG1 (MRPNode-3 / form)) :ARG1 (MRPNode-4 / question-01 :mod (MRPNode-5 / this))))

# ::id 927
# ::snt Microwave would be your best bet.
# ::tok Microwave would be your best bet .
# ::alignments 0-1|0.0 3-4|0.1 4-5|0.2+0.3.0 5-6|0 ::annotator aligner3.py ::date 2021-03-11 23:01:47.344426 ::parser eager_oracle ::smatch 0.761904761904762 ::n_actions 24
# ::node	0	bet-01	5-6
# ::node	0.0	Microwave	0-1
# ::node	0.1	you	3-4
# ::node	0.2	good-02	4-5
# ::node	0.3	have-degree-91	
# ::node	0.3.0	most	4-5
# ::root	0	bet-01
# ::edge	bet-01	ARG0	Microwave	0	0.0
# ::edge	bet-01	ARG1-of	good-02	0	0.2
# ::edge	bet-01	ARG1-of	have-degree-91	0	0.3
# ::edge	bet-01	ARG1-of	you	0	0.1
# ::edge	have-degree-91	ARG2	good-02	0.3	0.2
# ::edge	have-degree-91	ARG3	most	0.3	0.3.0
(MRPNode-0 / bet-01 :ARG0 (MRPNode-1 / Microwave) :ARG1-of (MRPNode-2 / you) :ARG1-of (MRPNode-3 / good-02) :ARG1-of (MRPNode-4 / have-degree-91 :ARG2 MRPNode-3 :ARG3 (MRPNode-5 / most)))

# ::id 928
# ::snt Yes, there is a reason to not do what you propose.
# ::tok Yes , there is a reason to not do what you propose .
# ::alignments 5-6|0+0.0+0.0.0.1 7-8|0.0.0.0 8-9|0.0.0 10-11|0.0.0.1.0.0 11-12|0.0.0.1.0 ::annotator aligner3.py ::date 2021-03-11 23:01:47.349556 ::parser eager_oracle ::smatch 1.0 ::n_actions 39
# ::node	0	reason	5-6
# ::node	0.0	cause-01	5-6
# ::node	0.0.0	do-02	8-9
# ::node	0.0.0.0	-	7-8
# ::node	0.0.0.1	thing	5-6
# ::node	0.0.0.1.0	propose-01	11-12
# ::node	0.0.0.1.0.0	you	10-11
# ::root	0	reason
# ::edge	cause-01	ARG1	do-02	0.0	0.0.0
# ::edge	do-02	ARG1	thing	0.0.0	0.0.0.1
# ::edge	do-02	polarity	-	0.0.0	0.0.0.0
# ::edge	propose-01	ARG0	you	0.0.0.1.0	0.0.0.1.0.0
# ::edge	reason	ARG0-of	cause-01	0	0.0
# ::edge	thing	ARG1-of	propose-01	0.0.0.1	0.0.0.1.0
(MRPNode-0 / reason :ARG0-of (MRPNode-1 / cause-01 :ARG1 (MRPNode-2 / do-02 :polarity - :ARG1 (MRPNode-3 / thing :ARG1-of (MRPNode-4 / propose-01 :ARG0 (MRPNode-5 / you))))))

# ::id 929
# ::snt You don't have to worry.
# ::tok You do n't have to worry .
# ::alignments 0-1|0.1 2-3|0.0 3-4|0 5-6|0.2 ::annotator aligner3.py ::date 2021-03-11 23:01:47.351636 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	obligate-01	3-4
# ::node	0.0	-	2-3
# ::node	0.1	you	0-1
# ::node	0.2	worry-02	5-6
# ::root	0	obligate-01
# ::edge	obligate-01	ARG1	you	0	0.1
# ::edge	obligate-01	ARG2	worry-02	0	0.2
# ::edge	obligate-01	polarity	-	0	0.0
# ::edge	worry-02	ARG0	you	0.2	0.1
(MRPNode-0 / obligate-01 :polarity - :ARG1 (MRPNode-1 / you) :ARG2 (MRPNode-2 / worry-02 :ARG0 MRPNode-1))

# ::id 930
# ::snt There is no test that can tell you if it is sealed or not.
# ::tok There is no test that can tell you if it is sealed or not .
# ::alignments 2-3|0.1.0.0.0.1.0 3-4|0 5-6|0.1 6-7|0.1.0 7-8|0.1.0.1 9-10|0.1.0.0.0.0.0 11-12|0.1.0.0.0.0+0.1.0.0.0.1 12-13|0.1.0.0.0 13-14|0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:47.374989 ::parser eager_oracle ::smatch 0.9 ::n_actions 50
# ::node	0	test-01	3-4
# ::node	0.0	-	13-14
# ::node	0.1	possible-01	5-6
# ::node	0.1.0	tell-01	6-7
# ::node	0.1.0.0	truth-value	
# ::node	0.1.0.0.0	or	12-13
# ::node	0.1.0.0.0.0	seal-01	11-12
# ::node	0.1.0.0.0.0.0	it	9-10
# ::node	0.1.0.0.0.1	seal-01	11-12
# ::node	0.1.0.0.0.1.0	-	2-3
# ::node	0.1.0.1	you	7-8
# ::root	0	test-01
# ::edge	or	op1	seal-01	0.1.0.0.0	0.1.0.0.0.0
# ::edge	or	op2	seal-01	0.1.0.0.0	0.1.0.0.0.1
# ::edge	possible-01	ARG1	tell-01	0.1	0.1.0
# ::edge	seal-01	ARG1	it	0.1.0.0.0.0	0.1.0.0.0.0.0
# ::edge	seal-01	ARG1	it	0.1.0.0.0.1	0.1.0.0.0.0.0
# ::edge	seal-01	polarity	-	0.1.0.0.0.1	0.1.0.0.0.1.0
# ::edge	tell-01	ARG1	truth-value	0.1.0	0.1.0.0
# ::edge	tell-01	ARG2	you	0.1.0	0.1.0.1
# ::edge	test-01	ARG2	possible-01	0	0.1
# ::edge	test-01	polarity	-	0	0.0
# ::edge	truth-value	polarity-of	or	0.1.0.0	0.1.0.0.0
(MRPNode-0 / test-01 :polarity - :ARG2 (MRPNode-1 / possible-01 :ARG1 (MRPNode-2 / tell-01 :ARG1 (MRPNode-3 / truth-value :polarity-of (MRPNode-4 / or :op1 (MRPNode-5 / seal-01 :ARG1 (MRPNode-6 / it)) :op2 (MRPNode-7 / seal-01 :polarity - :ARG1 MRPNode-6))) :ARG2 (MRPNode-8 / you))))

# ::id 931
# ::snt Yes, you should make a résumé.
# ::tok Yes , you should make a résumé .
# ::alignments 2-3|0.0.1 3-4|0 4-5|0.0 6-7|0.0.0 ::annotator aligner3.py ::date 2021-03-11 23:01:47.387729 ::parser eager_oracle ::smatch 1.0 ::n_actions 23
# ::node	0	recommend-01	3-4
# ::node	0.0	make-01	4-5
# ::node	0.0.0	résumé	6-7
# ::node	0.0.1	you	2-3
# ::root	0	recommend-01
# ::edge	make-01	ARG0	you	0.0	0.0.1
# ::edge	make-01	ARG1	résumé	0.0	0.0.0
# ::edge	recommend-01	ARG1	make-01	0	0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / make-01 :ARG1 (MRPNode-2 / résumé) :ARG0 (MRPNode-3 / you)))

# ::id 932
# ::snt You shouldn't feel any obligation at all.
# ::tok You should n't feel any obligation at all .
# ::alignments 1-2|0 2-3|0.0.0 3-4|0.0+0.0.1.1 4-5|0.0.1.0 5-6|0.0.1 6-8|0.0.2 ::annotator aligner3.py ::date 2021-03-11 23:01:47.394377 ::parser eager_oracle ::smatch 1.0 ::n_actions 34
# ::node	0	recommend-01	1-2
# ::node	0.0	feel-01	3-4
# ::node	0.0.0	-	2-3
# ::node	0.0.1	obligate-01	5-6
# ::node	0.0.1.0	any	4-5
# ::node	0.0.1.1	you	3-4
# ::node	0.0.2	at-all	6-8
# ::root	0	recommend-01
# ::edge	feel-01	ARG0	you	0.0	0.0.1.1
# ::edge	feel-01	ARG1	obligate-01	0.0	0.0.1
# ::edge	feel-01	mod	at-all	0.0	0.0.2
# ::edge	feel-01	polarity	-	0.0	0.0.0
# ::edge	obligate-01	ARG1	you	0.0.1	0.0.1.1
# ::edge	obligate-01	mod	any	0.0.1	0.0.1.0
# ::edge	recommend-01	ARG1	feel-01	0	0.0
(MRPNode-0 / recommend-01 :ARG1 (MRPNode-1 / feel-01 :polarity - :ARG1 (MRPNode-2 / obligate-01 :mod (MRPNode-3 / any) :ARG1 (MRPNode-4 / you)) :ARG0 MRPNode-4 :mod (MRPNode-5 / at-all)))

