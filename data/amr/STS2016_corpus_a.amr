# ::snt sent1
# ::tokens ["sent1"]
# ::ner_tags ["O"]
# ::ner_iob ["O"]
# ::pos_tags ["NNP"]
# ::lemmas ["sent1"]
(p0 / person
      :name (n0 / name
            :op1 "sent1" ))

# ::snt Should I use IRA money to pay down my student loans?
# ::tokens ["Should", "I", "use", "IRA", "money", "to", "pay", "down", "my", "student", "loans", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "NNP", "NN", "TO", "VB", "RP", "PRP$", "NN", "NNS", "."]
# ::lemmas ["should", "i", "use", "IRA", "money", "to", "pay", "down", "my", "student", "loan", "?"]
(r0 / recommend-01
      :ARG1 (u0 / use-01
            :ARG1 (m0 / money
                  :source (p1 / product
                        :name (n0 / name
                              :op1 "IRA" )))
            :ARG0 (i0 / i
                  :ARG2-of (l0 / loan-01
                        :ARG2 (p2 / person
                              :ARG0-of (s0 / study-01))))
            :ARG2 (p0 / pay-off-02
                  :ARG0 i0
                  :ARG1 l0))
      :ARG2 (a0 / amr-unknown))

# ::snt How do I keep an egg from cracking while being boiled?
# ::tokens ["How", "do", "I", "keep", "an", "egg", "from", "cracking", "while", "being", "boiled", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "IN", "VBG", "IN", "VBG", "VBN", "."]
# ::lemmas ["how", "do", "i", "keep", "an", "egg", "from", "crack", "while", "be", "boil", "?"]
(k0 / keep-04
      :ARG1 (c0 / crack-02
            :ARG1 (e0 / egg)
            :time (b0 / boil-01
                  :ARG1 i0))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt How do you remove mold from a tent?
# ::tokens ["How", "do", "you", "remove", "mold", "from", "a", "tent", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["how", "do", "you", "remove", "mold", "from", "a", "tent", "?"]
(r0 / remove-01
      :ARG1 (m0 / mold)
      :ARG0 (y0 / you)
      :ARG2 (t0 / tent)
      :manner (a0 / amr-unknown))

# ::snt What could be wrong with my air conditioner?
# ::tokens ["What", "could", "be", "wrong", "with", "my", "air", "conditioner", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "VB", "JJ", "IN", "PRP$", "NN", "NN", "."]
# ::lemmas ["what", "could", "be", "wrong", "with", "my", "air", "conditioner", "?"]
(p0 / possible-01
      :ARG1 (w0 / wrong-02
            :ARG1 (a0 / amr-unknown)
            :ARG2 (c0 / conditioner
                  :mod (i0 / i)
                  :mod (a1 / air))))

# ::snt What language does this look like?
# ::tokens ["What", "language", "does", "this", "look", "like", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "VBZ", "DT", "VB", "IN", "."]
# ::lemmas ["what", "language", "do", "this", "look", "like", "?"]
(l0 / look-02
      :ARG1 (l1 / language
            :mod (a0 / amr-unknown))
      :ARG0 (t0 / this))

# ::snt What more can I do to improve my credit score?
# ::tokens ["What", "more", "can", "I", "do", "to", "improve", "my", "credit", "score", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "JJR", "MD", "PRP", "VB", "TO", "VB", "PRP$", "NN", "NN", "."]
# ::lemmas ["what", "more", "can", "i", "do", "to", "improve", "my", "credit", "score", "?"]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (i0 / improve-01
                  :ARG0 i1
                  :ARG1 (s0 / score
                        :poss i1
                        :mod (c0 / credit)))
            :ARG0 (a0 / amr-unknown
                  :mod (m0 / more))
            :ARG0 (i1 / i)))

# ::snt How to remove a ticks on my dog?
# ::tokens ["How", "to", "remove", "a", "ticks", "on", "my", "dog", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "DT", "NNS", "IN", "PRP$", "NN", "."]
# ::lemmas ["how", "to", "remove", "a", "tick", "on", "my", "dog", "?"]
(r0 / remove-01
      :ARG1 (t0 / tick
            :location (d0 / dog
                  :poss (i0 / i)))
      :manner (a0 / amr-unknown))

# ::snt How do I pump up water pressure in my shower?
# ::tokens ["How", "do", "I", "pump", "up", "water", "pressure", "in", "my", "shower", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "RP", "NN", "NN", "IN", "PRP$", "NN", "."]
# ::lemmas ["how", "do", "i", "pump", "up", "water", "pressure", "in", "my", "shower", "?"]
(p0 / pump-01
      :manner (p1 / pressure
            :mod (w0 / water))
      :ARG0 (i0 / i)
      :ARG2 (s0 / shower)
      :manner (a0 / amr-unknown))

# ::snt Is it possible to do a Master's in Mathematics after a Bachelor's in Economics?
# ::tokens ["Is", "it", "possible", "to", "do", "a", "Master", "'s", "in", "Mathematics", "after", "a", "Bachelor", "'s", "in", "Economics", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "WORK_OF_ART", "WORK_OF_ART", "WORK_OF_ART", "WORK_OF_ART", "WORK_OF_ART", "O", "O", "PERSON", "O", "O", "ORG", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "I", "I", "I", "I", "O", "O", "B", "O", "O", "B", "O"]
# ::pos_tags ["VBZ", "PRP", "JJ", "TO", "VB", "DT", "NNP", "POS", "IN", "NNS", "IN", "DT", "NNP", "POS", "IN", "NNP", "."]
# ::lemmas ["be", "it", "possible", "to", "do", "a", "Master", "'s", "in", "Mathematics", "after", "a", "Bachelor", "'s", "in", "Economics", "?"]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (t0 / theory
                  :topic (p1 / philosophy)
                  :topic (m0 / mathematics))
            :time (a1 / after
                  :op1 (p2 / philosophy)))
      :time (a0 / amr-unknown))

# ::snt How can I help my dog adjust to a move?
# ::tokens ["How", "can", "I", "help", "my", "dog", "adjust", "to", "a", "move", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "PRP$", "NN", "VB", "IN", "DT", "NN", "."]
# ::lemmas ["how", "can", "i", "help", "my", "dog", "adjust", "to", "a", "move", "?"]
(p0 / possible-01
      :ARG1 (h0 / help-01
            :ARG1 (a1 / adjust-01
                  :ARG0 d0
                  :ARG2 (m0 / move-01))
            :ARG0 (i0 / i)
            :ARG2 (d0 / dog))
      :manner (a0 / amr-unknown))

# ::snt How do I pump up water pressure in my shower?
# ::tokens ["How", "do", "I", "pump", "up", "water", "pressure", "in", "my", "shower", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "RP", "NN", "NN", "IN", "PRP$", "NN", "."]
# ::lemmas ["how", "do", "i", "pump", "up", "water", "pressure", "in", "my", "shower", "?"]
(p0 / pump-01
      :manner (p1 / pressure
            :mod (w0 / water))
      :ARG0 (i0 / i)
      :ARG2 (s0 / shower)
      :manner (a0 / amr-unknown))

# ::snt How do I make a height adjustable desk?
# ::tokens ["How", "do", "I", "make", "a", "height", "adjustable", "desk", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "JJ", "NN", "."]
# ::lemmas ["how", "do", "i", "make", "a", "height", "adjustable", "desk", "?"]
(m0 / make-01
      :ARG1 (d0 / desk
            :ARG1-of (a1 / adjust-01
                  :ARG1 (h0 / high-02)))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt How can I find out why my washing machine trips the outlet?
# ::tokens ["How", "can", "I", "find", "out", "why", "my", "washing", "machine", "trips", "the", "outlet", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "RP", "WRB", "PRP$", "NN", "NN", "VBZ", "DT", "NN", "."]
# ::lemmas ["how", "can", "i", "find", "out", "why", "my", "washing", "machine", "trip", "the", "outlet", "?"]
(p0 / possible-01
      :ARG1 (f0 / find-out-03
            :ARG1 (t0 / thing
                  :ARG0-of (c0 / cause-01
                        :ARG1 (t1 / trip-03
                              :ARG0 m0
                              :ARG1 (o0 / outlet))))
            :ARG0 (i0 / i
                  :poss-of (m0 / machine
                        :ARG0-of (w0 / wash-01)))
            :manner (a0 / amr-unknown)))

# ::snt What are the bus (coach) connections from Thessaloniki, Greece to Tbilisi, Georgia?
# ::tokens ["What", "are", "the", "bus", "(", "coach", ")", "connections", "from", "Thessaloniki", ",", "Greece", "to", "Tbilisi", ",", "Georgia", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O", "GPE", "O", "GPE", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "B", "O", "B", "O", "B", "O"]
# ::pos_tags ["WP", "VBP", "DT", "NN", "-LRB-", "NN", "-RRB-", "NNS", "IN", "NNP", ",", "NNP", "IN", "NNP", ",", "NNP", "."]
# ::lemmas ["what", "be", "the", "bus", "(", "coach", ")", "connection", "from", "Thessaloniki", ",", "Greece", "to", "Tbilisi", ",", "Georgia", "?"]
(c0 / connect-01
      :ARG1 (b0 / bus)
      :ARG2 (c1 / city
            :name (n0 / name
                  :op1 "Thessaloniki" )
            :location (c3 / country
                  :name (n2 / name
                        :op1 "Greece" )))
      :ARG3 (a0 / amr-unknown)
      :ARG4 (c2 / city
            :name (n1 / name
                  :op1 "Tbilisi" )
            :location (c4 / country
                  :name (n3 / name
                        :op1 "Greece" ))))

# ::snt How do I track investment performance in Quicken across rollovers?
# ::tokens ["How", "do", "I", "track", "investment", "performance", "in", "Quicken", "across", "rollovers", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "ORG", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NN", "NN", "IN", "NNP", "IN", "NNS", "."]
# ::lemmas ["how", "do", "i", "track", "investment", "performance", "in", "Quicken", "across", "rollover", "?"]
(t0 / track-01
      :ARG1 (p0 / perform-02
            :ARG0 (i1 / invest-01)
            :location (c0 / company
                  :name (n0 / name
                        :op1 "Quicken" )))
      :ARG0 (i0 / i)
      :ARG2 (a0 / amr-unknown)
      :manner (a1 / across
            :op1 (r0 / rollover)))

# ::snt Do I need to apply for a UK transit visa when I have a visitor visa?
# ::tokens ["Do", "I", "need", "to", "apply", "for", "a", "UK", "transit", "visa", "when", "I", "have", "a", "visitor", "visa", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBP", "PRP", "VB", "TO", "VB", "IN", "DT", "NNP", "NN", "NN", "WRB", "PRP", "VBP", "DT", "NN", "NN", "."]
# ::lemmas ["do", "i", "need", "to", "apply", "for", "a", "UK", "transit", "visa", "when", "i", "have", "a", "visitor", "visa", "?"]
(n0 / need-01
      :ARG1 (a0 / apply-01
            :ARG0 i0
            :ARG1 (v0 / visa
                  :mod (t0 / transit)))
      :ARG0 (i0 / i)
      :time (a1 / amr-unknown)
      :time (h0 / have-03
            :ARG0 i0
            :ARG1 (v1 / visa
                  :mod (c0 / country
                        :name (n1 / name
                              :op1 "UK" )))
            :ARG1 (v2 / visa
                  :mod (p0 / person
                        :ARG0-of (v3 / visit-01)))))

# ::snt Layover at Narita for 3 hours. Do i need a transit visa?
# ::tokens ["Layover", "at", "Narita", "for", "3", "hours", ".", "Do", "i", "need", "a", "transit", "visa", "?"]
# ::ner_tags ["O", "O", "O", "O", "TIME", "TIME", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "I", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "IN", "NNP", "IN", "CD", "NNS", ".", "VBP", "PRP", "VB", "DT", "NN", "NN", "."]
# ::lemmas ["Layover", "at", "Narita", "for", "3", "hours", ".", "do", "i", "need", "a", "transit", "visa", "?"]
(m0 / multi-sentence
      :snt1 (d0 / drive-01
            :ARG0 (c0 / city
                  :name (n1 / name
                        :op1 "Narita" ))
            :duration (t0 / temporal-quantity
                  :quant 3 
                  :unit (h0 / hour)))
      :snt2 (n0 / need-01
            :ARG1 (v0 / visa
                  :mod (t1 / transit))
            :ARG0 (i0 / i)
            :ARG0 (a0 / amr-unknown)))

# ::snt Is it ok to apply for more than one Phd student program?
# ::tokens ["Is", "it", "ok", "to", "apply", "for", "more", "than", "one", "Phd", "student", "program", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "I", "I", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "PRP", "JJ", "TO", "VB", "IN", "JJR", "IN", "CD", "NNP", "NN", "NN", "."]
# ::lemmas ["be", "it", "ok", "to", "apply", "for", "more", "than", "one", "Phd", "student", "program", "?"]
(o0 / okay-04
      :ARG1 (a0 / apply-01
            :ARG1 (p0 / program
                  :mod (p1 / person
                        :quant (m0 / more-than
                              :op1 1 ))
                  :mod (s0 / study-01)))
      :ARG1 (a1 / amr-unknown))

# ::snt How do I remove paint from a wood floor?
# ::tokens ["How", "do", "I", "remove", "paint", "from", "a", "wood", "floor", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "remove", "paint", "from", "a", "wood", "floor", "?"]
(r0 / remove-01
      :ARG1 (p0 / paint)
      :ARG0 (i0 / i)
      :ARG2 (f0 / floor
            :mod (w0 / wood))
      :manner (a0 / amr-unknown))

# ::snt Does this beginning hook the reader?
# ::tokens ["Does", "this", "beginning", "hook", "the", "reader", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "DT", "VBG", "VB", "DT", "NN", "."]
# ::lemmas ["do", "this", "begin", "hook", "the", "reader", "?"]
(h0 / hook-01
      :ARG1 (p0 / person
            :ARG0-of (r0 / read-01))
      :ARG0 (t0 / thing
            :mod (t1 / this)
            :ARG1-of (b0 / begin-01))
      :ARG2 (a0 / amr-unknown))

# ::snt How can I remove a really stuck screw?
# ::tokens ["How", "can", "I", "remove", "a", "really", "stuck", "screw", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "RB", "VBN", "NN", "."]
# ::lemmas ["how", "can", "i", "remove", "a", "really", "stick", "screw", "?"]
(p0 / possible-01
      :ARG1 (r0 / remove-01
            :ARG1 (a0 / amr-unknown)
            :ARG1 (t0 / thing
                  :ARG1-of (s0 / stick-01
                        :ARG1-of (r1 / real-04))
                  :ARG1-of (s1 / screw-02))
            :ARG0 (i0 / i)))

# ::snt What could be causing my GFCI to trip?
# ::tokens ["What", "could", "be", "causing", "my", "GFCI", "to", "trip", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "VB", "VBG", "PRP$", "NN", "TO", "VB", "."]
# ::lemmas ["what", "could", "be", "cause", "my", "GFCI", "to", "trip", "?"]
(p0 / possible-01
      :ARG1 (c0 / cause-01
            :ARG1 (t0 / trip-03
                  :ARG0 (p1 / person
                        :ARG0-of (h0 / have-rel-role-91
                              :ARG1 (i0 / i)
                              :ARG2 (p2 / practitioner
                                    :mod (v0 / vice)))))
            :ARG0 (a0 / amr-unknown)))

# ::snt How can I get my colleagues to stop interrupting me?
# ::tokens ["How", "can", "I", "get", "my", "colleagues", "to", "stop", "interrupting", "me", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "PRP$", "NNS", "TO", "VB", "VBG", "PRP", "."]
# ::lemmas ["how", "can", "i", "get", "my", "colleague", "to", "stop", "interrupt", "me", "?"]
(p0 / possible-01
      :ARG1 (g0 / get-04
            :ARG0 (i0 / i
                  :ARG1-of (h0 / have-rel-role-91
                        :ARG0 p1
                        :ARG2 (c0 / colleague)))
            :manner (a0 / amr-unknown))
      :manner (s0 / stop-01
            :ARG1 (i1 / interrupt-01
                  :ARG0 p1)
            :ARG0 (p1 / person)))

# ::snt how to blackout a large bedroom window on a budget?
# ::tokens ["how", "to", "blackout", "a", "large", "bedroom", "window", "on", "a", "budget", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "DT", "JJ", "NN", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["how", "to", "blackout", "a", "large", "bedroom", "window", "on", "a", "budget", "?"]
(a0 / amr-unknown
      :manner-of (b0 / block-01
            :ARG1 (w0 / window
                  :mod (l0 / large)
                  :mod (b2 / bedroom))
            :ARG1-of (b1 / budget-01)))

# ::snt What type of pants are good for weight lifting?
# ::tokens ["What", "type", "of", "pants", "are", "good", "for", "weight", "lifting", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "IN", "NNS", "VBP", "JJ", "IN", "NN", "NN", "."]
# ::lemmas ["what", "type", "of", "pant", "be", "good", "for", "weight", "lifting", "?"]
(g0 / good-02
      :ARG1 (p0 / pant
            :mod (a0 / amr-unknown
                  :mod (t0 / type)))
      :ARG2 (l0 / lift-01
            :ARG1 (w0 / weight)))

# ::snt What is the difference between a Rollover IRA and a Roth IRA?
# ::tokens ["What", "is", "the", "difference", "between", "a", "Rollover", "IRA", "and", "a", "Roth", "IRA", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "PERSON", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "DT", "NNP", "NNP", "CC", "DT", "NNP", "NNP", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "a", "Rollover", "IRA", "and", "a", "Roth", "IRA", "?"]
(d0 / differ-02
      :ARG1 (a0 / amr-unknown)
      :ARG1 (p0 / product
            :name (n0 / name
                  :op1 "Rollover" 
                  :op2 "IRA" ))
      :ARG1 (p1 / product
            :name (n1 / name
                  :op1 "Roth" )))

# ::snt How to deal with the child when both the parents are not on the same page?
# ::tokens ["How", "to", "deal", "with", "the", "child", "when", "both", "the", "parents", "are", "not", "on", "the", "same", "page", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "IN", "DT", "NN", "WRB", "CC", "DT", "NNS", "VBP", "RB", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["how", "to", "deal", "with", "the", "child", "when", "both", "the", "parent", "be", "not", "on", "the", "same", "page", "?"]
(h0 / have-manner-91
      :ARG1 (d0 / deal-01
            :ARG1 (c0 / child))
      :ARG2 (a0 / amr-unknown)
      :condition (b0 / be-located-at-91
            :ARG1 (p0 / person
                  :ARG0-of (b1 / both)
                  :ARG0-of (h1 / have-rel-role-91
                        :ARG2 (p2 / parent)))
            :ARG2 (p1 / page
                  :ARG1-of (s0 / same-01))
            :polarity - ))

# ::snt How do I pump up water pressure in my shower?
# ::tokens ["How", "do", "I", "pump", "up", "water", "pressure", "in", "my", "shower", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "RP", "NN", "NN", "IN", "PRP$", "NN", "."]
# ::lemmas ["how", "do", "i", "pump", "up", "water", "pressure", "in", "my", "shower", "?"]
(p0 / pump-01
      :manner (p1 / pressure
            :mod (w0 / water))
      :ARG0 (i0 / i)
      :ARG2 (s0 / shower)
      :manner (a0 / amr-unknown))

# ::snt Greek type D visa: Can I travel to other Schengen countries?
# ::tokens ["Greek", "type", "D", "visa", ":", "Can", "I", "travel", "to", "other", "Schengen", "countries", "?"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["JJ", "NN", "NN", "NN", ":", "MD", "PRP", "VB", "IN", "JJ", "NNP", "NNS", "."]
# ::lemmas ["Greek", "type", "d", "visa", ":", "can", "i", "travel", "to", "other", "Schengen", "country", "?"]
(m0 / multi-sentence
      :snt1 (v0 / visa
            :mod (t0 / type
                  :mod (s0 / score-on-scale-91
                        :ARG1 "D" ))
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Greek" )))
      :snt2 (p0 / possible-01
            :ARG1 (t1 / travel-01
                  :ARG0 (i0 / i)
                  :ARG4 (c1 / country
                        :mod (o0 / other)
                        :location (c2 / continent
                              :name (n1 / name
                                    :op1 "Schengen" ))))
            :ARG1 (a0 / amr-unknown)))

# ::snt What can I do about out of square rough opening for new windows?
# ::tokens ["What", "can", "I", "do", "about", "out", "of", "square", "rough", "opening", "for", "new", "windows", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "PRP", "VB", "IN", "IN", "IN", "JJ", "JJ", "NN", "IN", "JJ", "NNS", "."]
# ::lemmas ["what", "can", "i", "do", "about", "out", "of", "square", "rough", "opening", "for", "new", "window", "?"]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (a0 / amr-unknown)
            :ARG0 (i0 / i
                  :ARG0-of (o1 / open-01
                        :ARG1 (w0 / window
                              :ARG1-of (n0 / new-01))))
            :ARG2 (o0 / out-06
                  :ARG1 i0
                  :ARG2 o1
                  :ARG2 (s0 / square
                        :quant (r0 / rough-04)))))

# ::snt How to remove construction adhesive from concrete?
# ::tokens ["How", "to", "remove", "construction", "adhesive", "from", "concrete", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "NN", "JJ", "IN", "NN", "."]
# ::lemmas ["how", "to", "remove", "construction", "adhesive", "from", "concrete", "?"]
(r0 / remove-01
      :ARG1 (a0 / adhesive
            :topic (c1 / construct-01))
      :ARG2 (c0 / concrete)
      :manner (a1 / amr-unknown))

# ::snt Must I enter Europe with Schengen visa from the country where I applied?
# ::tokens ["Must", "I", "enter", "Europe", "with", "Schengen", "visa", "from", "the", "country", "where", "I", "applied", "?"]
# ::ner_tags ["O", "O", "O", "LOC", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "NNP", "IN", "NNP", "NN", "IN", "DT", "NN", "WRB", "PRP", "VBD", "."]
# ::lemmas ["must", "i", "enter", "Europe", "with", "Schengen", "visa", "from", "the", "country", "where", "i", "apply", "?"]
(o0 / obligate-01
      :ARG1 (i0 / i
            :ARG0-of (a1 / apply-01
                  :ARG1 (c1 / country)))
      :ARG2 (e0 / enter-01
            :ARG0 i0
            :ARG1 (v0 / visa
                  :mod c1
                  :mod (c2 / company
                        :name (n1 / name
                              :op1 "Schengen" )))
            :ARG1 (c0 / continent
                  :name (n0 / name
                        :op1 "Europe" )))
      :ARG2 (a0 / amr-unknown))

# ::snt What could be causing my toilet to back up?
# ::tokens ["What", "could", "be", "causing", "my", "toilet", "to", "back", "up", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "VB", "VBG", "PRP$", "NN", "TO", "VB", "RP", "."]
# ::lemmas ["what", "could", "be", "cause", "my", "toilet", "to", "back", "up", "?"]
(p0 / possible-01
      :ARG1 (c0 / cause-01
            :ARG1 (b0 / back-up-04
                  :ARG1 (t0 / toilet
                        :poss (i0 / i)))
            :ARG0 (a0 / amr-unknown)))

# ::snt Why is my dryer taking longer to dry clothes?
# ::tokens ["Why", "is", "my", "dryer", "taking", "longer", "to", "dry", "clothes", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBZ", "PRP$", "NN", "VBG", "RBR", "TO", "VB", "NNS", "."]
# ::lemmas ["why", "be", "my", "dryer", "take", "long", "to", "dry", "clothe", "?"]
(t0 / take-10
      :ARG1 (h0 / have-degree-91
            :ARG2 (m0 / more)
            :ARG2 (l0 / long-03))
      :ARG0 (d0 / dry-02
            :ARG1 (p0 / product
                  :ARG0-of (d1 / dry-08
                        :ARG1 (i0 / i)))
            :ARG1 (c1 / clothes))
      :ARG1-of (c0 / cause-01
            :ARG0 (a0 / amr-unknown)))

# ::snt What are some good strength exercises for marathon runners?
# ::tokens ["What", "are", "some", "good", "strength", "exercises", "for", "marathon", "runners", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBP", "DT", "JJ", "NN", "NNS", "IN", "NN", "NNS", "."]
# ::lemmas ["what", "be", "some", "good", "strength", "exercise", "for", "marathon", "runner", "?"]
(e0 / exercise-02
      :ARG1 (a0 / amr-unknown)
      :ARG0 (p0 / person
            :ARG0-of (m0 / marathon)
            :ARG0-of (r0 / run-02))
      :ARG1-of (g0 / good-02)
      :quant (s0 / some))

# ::snt Which way does the air flow through my furnace?
# ::tokens ["Which", "way", "does", "the", "air", "flow", "through", "my", "furnace", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "VBZ", "DT", "NN", "VB", "IN", "PRP$", "NN", "."]
# ::lemmas ["which", "way", "do", "the", "air", "flow", "through", "my", "furnace", "?"]
(f0 / flow-01
      :ARG1 (a0 / air)
      :path (f1 / furnace
            :poss (i0 / i))
      :path (a1 / amr-unknown))

# ::snt Why is my washing machine making this sound?
# ::tokens ["Why", "is", "my", "washing", "machine", "making", "this", "sound", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBZ", "PRP$", "VBG", "NN", "VBG", "DT", "NN", "."]
# ::lemmas ["why", "be", "my", "wash", "machine", "make", "this", "sound", "?"]
(c0 / cause-01
      :ARG1 (s0 / sound-01
            :ARG1 (m0 / machine
                  :ARG0-of (w0 / wash-01)
                  :poss (i0 / i))
            :ARG2 (t0 / this))
      :ARG0 (a0 / amr-unknown))

# ::snt How do I convert a ceiling fan with 2 separate wall switches to a separate fan & light switch?
# ::tokens ["How", "do", "I", "convert", "a", "ceiling", "fan", "with", "2", "separate", "wall", "switches", "to", "a", "separate", "fan", "&", "light", "switch", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "NN", "IN", "CD", "JJ", "NN", "NNS", "IN", "DT", "JJ", "NN", "CC", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "convert", "a", "ceiling", "fan", "with", "2", "separate", "wall", "switch", "to", "a", "separate", "fan", "&", "light", "switch", "?"]
(c0 / convert-01
      :ARG1 (f0 / fan
            :mod (c1 / ceiling)
            :ARG0-of (h0 / have-03
                  :ARG1 (s2 / switch
                        :ARG1-of (w0 / wall)
                        :ARG1-of (s4 / separate-02))))
      :ARG0 (i0 / i)
      :ARG2 (s0 / switch
            :ARG1-of (s1 / separate-02)
            :ARG0-of (a1 / and
                  :op2 (s3 / switch
                        :quant (w1 / wall)
                        :quant 2 )))
      :manner (a0 / amr-unknown))

# ::snt How can I repair a towel bar with one end ripped out of the wall?
# ::tokens ["How", "can", "I", "repair", "a", "towel", "bar", "with", "one", "end", "ripped", "out", "of", "the", "wall", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "NN", "NN", "IN", "CD", "NN", "VBN", "IN", "IN", "DT", "NN", "."]
# ::lemmas ["how", "can", "i", "repair", "a", "towel", "bar", "with", "one", "end", "rip", "out", "of", "the", "wall", "?"]
(p0 / possible-01
      :ARG1 (r0 / repair-01
            :ARG1 (b0 / bar
                  :mod (t0 / towel)
                  :ARG1-of (r1 / rip-01
                        :ARG1 (e0 / end
                              :quant 1 )
                        :ARG2 (w0 / wall)))
            :ARG0 (i0 / i)
            :manner (a0 / amr-unknown)))

# ::snt How can I remove a really stuck screw?
# ::tokens ["How", "can", "I", "remove", "a", "really", "stuck", "screw", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "RB", "VBN", "NN", "."]
# ::lemmas ["how", "can", "i", "remove", "a", "really", "stick", "screw", "?"]
(p0 / possible-01
      :ARG1 (r0 / remove-01
            :ARG1 (a0 / amr-unknown)
            :ARG1 (t0 / thing
                  :ARG1-of (s0 / stick-01
                        :ARG1-of (r1 / real-04))
                  :ARG1-of (s1 / screw-02))
            :ARG0 (i0 / i)))

# ::snt What are refereed and non-refereed journals?
# ::tokens ["What", "are", "refereed", "and", "non", "-", "refereed", "journals", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBP", "JJ", "CC", "JJ", "JJ", "JJ", "NNS", "."]
# ::lemmas ["what", "be", "refereed", "and", "non", "-", "refereed", "journal", "?"]
(a0 / and
      :op1 (j0 / journal
            :ARG1-of (r0 / require-01))
      :op2 (j1 / journal
            :ARG1-of (r1 / require-01)
            :polarity - )
      :domain (a1 / amr-unknown))

# ::snt How can I prepare this old exterior wall for painting?
# ::tokens ["How", "can", "I", "prepare", "this", "old", "exterior", "wall", "for", "painting", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "JJ", "NNP", "NN", "IN", "NN", "."]
# ::lemmas ["how", "can", "i", "prepare", "this", "old", "exterior", "wall", "for", "painting", "?"]
(p0 / possible-01
      :ARG1 (p1 / prepare-02
            :ARG1 (w0 / wall
                  :mod (o0 / old)
                  :mod (t0 / this)
                  :mod (e0 / exterior))
            :ARG0 (i0 / i)
            :ARG2 (p2 / paint-02)
            :manner (a0 / amr-unknown)))

# ::snt What can I do to fix store-bought mayonnaise that split?
# ::tokens ["What", "can", "I", "do", "to", "fix", "store", "-", "bought", "mayonnaise", "that", "split", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "PRP", "VB", "TO", "VB", "NN", "HYPH", "VBN", "NN", "DT", "NN", "."]
# ::lemmas ["what", "can", "i", "do", "to", "fix", "store", "-", "buy", "mayonnaise", "that", "split", "?"]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (f0 / fix-02
                  :ARG0 i0
                  :ARG1 (m0 / mayonnaise
                        :ARG1-of (b0 / buy-01
                              :ARG0 (s1 / store))
                        :ARG1-of (s0 / split-01)))
            :ARG0 (i0 / i)
            :ARG1 (a0 / amr-unknown)))

# ::snt Should I negotiate if I'm offered more than what I initially asked for?
# ::tokens ["Should", "I", "negotiate", "if", "I", "'m", "offered", "more", "than", "what", "I", "initially", "asked", "for", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "IN", "PRP", "VBP", "VBN", "JJR", "IN", "WP", "PRP", "RB", "VBD", "IN", "."]
# ::lemmas ["should", "i", "negotiate", "if", "i", "be", "offer", "more", "than", "what", "i", "initially", "ask", "for", "?"]
(r0 / recommend-01
      :ARG1 (n0 / negotiate-01
            :ARG0 (i0 / i
                  :ARG0-of (a1 / ask-02
                        :ARG1 (t1 / thing)
                        :time (i1 / initial)))
            :ARG2 (o0 / offer-01
                  :ARG0 i0
                  :ARG1 (t0 / thing
                        :ARG1-of (h0 / have-quant-91
                              :ARG1 t1
                              :ARG3 (m0 / more)))))
      :ARG2 (a0 / amr-unknown))

# ::snt What does this tablature notation mean?
# ::tokens ["What", "does", "this", "tablature", "notation", "mean", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "NN", "VB", "."]
# ::lemmas ["what", "do", "this", "tablature", "notation", "mean", "?"]
(m0 / mean-01
      :ARG1 (a0 / amr-unknown)
      :ARG1 (n0 / notation
            :mod (t0 / this)
            :mod (t1 / tablature)))

# ::snt Why isn't the switch working to turn off my ceiling lamp after I replaced a fan w/light?
# ::tokens ["Why", "is", "n't", "the", "switch", "working", "to", "turn", "off", "my", "ceiling", "lamp", "after", "I", "replaced", "a", "fan", "w", "/", "light", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBZ", "RB", "DT", "NN", "VBG", "TO", "VB", "RP", "PRP$", "NN", "NN", "IN", "PRP", "VBD", "DT", "NN", "NN", "SYM", "NN", "."]
# ::lemmas ["why", "be", "not", "the", "switch", "work", "to", "turn", "off", "my", "ceiling", "lamp", "after", "i", "replace", "a", "fan", "w", "/", "light", "?"]
(c0 / cause-01
      :ARG1 (w0 / work-09
            :ARG1 (s0 / switch)
            :polarity - 
            :time (a1 / after
                  :op1 (r0 / replace-01
                        :ARG1 (l1 / light)
                        :ARG0 (i0 / i)
                        :ARG1 (f0 / fan)))
            :purpose (t0 / turn-on-13
                  :ARG0 s0
                  :ARG1 (l0 / lamp
                        :mod (c1 / ceiling))))
      :ARG0 (a0 / amr-unknown))

# ::snt How to make good coffee in a Moka pot?
# ::tokens ["How", "to", "make", "good", "coffee", "in", "a", "Moka", "pot", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "JJ", "NN", "IN", "DT", "NNP", "NN", "."]
# ::lemmas ["how", "to", "make", "good", "coffee", "in", "a", "Moka", "pot", "?"]
(m0 / make-01
      :ARG1 (c0 / coffee
            :ARG1-of (g0 / good-02))
      :location (p0 / pot
            :mod (e0 / ethnic-group
                  :name (n0 / name
                        :op1 "Moka" )))
      :manner (a0 / amr-unknown))

# ::snt What could be causing my GFCI to trip?
# ::tokens ["What", "could", "be", "causing", "my", "GFCI", "to", "trip", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "VB", "VBG", "PRP$", "NN", "TO", "VB", "."]
# ::lemmas ["what", "could", "be", "cause", "my", "GFCI", "to", "trip", "?"]
(p0 / possible-01
      :ARG1 (c0 / cause-01
            :ARG1 (t0 / trip-03
                  :ARG0 (p1 / person
                        :ARG0-of (h0 / have-rel-role-91
                              :ARG1 (i0 / i)
                              :ARG2 (p2 / practitioner
                                    :mod (v0 / vice)))))
            :ARG0 (a0 / amr-unknown)))

# ::snt What could be wrong with my furnace?
# ::tokens ["What", "could", "be", "wrong", "with", "my", "furnace", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "VB", "JJ", "IN", "PRP$", "NN", "."]
# ::lemmas ["what", "could", "be", "wrong", "with", "my", "furnace", "?"]
(p0 / possible-01
      :ARG1 (w0 / wrong-02
            :ARG1 (a0 / amr-unknown)
            :ARG2 (f0 / furnace
                  :poss (i0 / i))))

# ::snt How can I connect additional wires to a receptacle?
# ::tokens ["How", "can", "I", "connect", "additional", "wires", "to", "a", "receptacle", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "JJ", "NNS", "IN", "DT", "NN", "."]
# ::lemmas ["how", "can", "i", "connect", "additional", "wire", "to", "a", "receptacle", "?"]
(p0 / possible-01
      :ARG1 (c0 / connect-01
            :ARG1 (a0 / amr-unknown)
            :ARG1 (w0 / wire
                  :ARG1-of (a1 / additional))
            :ARG0 (i0 / i)
            :ARG2 (r0 / receptacle)))

# ::snt How can I prepare this old exterior wall for painting?
# ::tokens ["How", "can", "I", "prepare", "this", "old", "exterior", "wall", "for", "painting", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "JJ", "NNP", "NN", "IN", "NN", "."]
# ::lemmas ["how", "can", "i", "prepare", "this", "old", "exterior", "wall", "for", "painting", "?"]
(p0 / possible-01
      :ARG1 (p1 / prepare-02
            :ARG1 (w0 / wall
                  :mod (o0 / old)
                  :mod (t0 / this)
                  :mod (e0 / exterior))
            :ARG0 (i0 / i)
            :ARG2 (p2 / paint-02)
            :manner (a0 / amr-unknown)))

# ::snt Why is there no water in the kitchen?
# ::tokens ["Why", "is", "there", "no", "water", "in", "the", "kitchen", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBZ", "EX", "DT", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["why", "be", "there", "no", "water", "in", "the", "kitchen", "?"]
(c0 / cause-01
      :ARG1 (w0 / water
            :polarity - 
            :location (k0 / kitchen))
      :ARG0 (a0 / amr-unknown))

# ::snt What more can I do to improve my credit score?
# ::tokens ["What", "more", "can", "I", "do", "to", "improve", "my", "credit", "score", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "JJR", "MD", "PRP", "VB", "TO", "VB", "PRP$", "NN", "NN", "."]
# ::lemmas ["what", "more", "can", "i", "do", "to", "improve", "my", "credit", "score", "?"]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (i0 / improve-01
                  :ARG0 i1
                  :ARG1 (s0 / score
                        :poss i1
                        :mod (c0 / credit)))
            :ARG0 (a0 / amr-unknown
                  :mod (m0 / more))
            :ARG0 (i1 / i)))

# ::snt Bar ware - What kind of glass is this?
# ::tokens ["Bar", "ware", "-", "What", "kind", "of", "glass", "is", "this", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "NN", ":", "WP", "NN", "IN", "NN", "VBZ", "DT", "."]
# ::lemmas ["bar", "ware", "-", "what", "kind", "of", "glass", "be", "this", "?"]
(a0 / ask-01
      :ARG1 (g0 / glass
            :mod (k0 / kind
                  :mod (a1 / amr-unknown)
                  :mod (t0 / this)))
      :ARG2 (i0 / i)
      :ARG2 (w0 / ware
            :mod (b0 / bar)))

# ::snt Do I really need a redundant sump pump?
# ::tokens ["Do", "I", "really", "need", "a", "redundant", "sump", "pump", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBP", "PRP", "RB", "VB", "DT", "JJ", "NN", "NN", "."]
# ::lemmas ["do", "i", "really", "need", "a", "redundant", "sump", "pump", "?"]
(n0 / need-01
      :ARG1 (p0 / pump
            :mod (r1 / redundant)
            :mod (s0 / sump))
      :ARG0 (i0 / i)
      :ARG1-of (r0 / real-04)
      :ARG1-of (a0 / amr-unknown))

# ::snt How can I work out how valuable I am to my boss and company?
# ::tokens ["How", "can", "I", "work", "out", "how", "valuable", "I", "am", "to", "my", "boss", "and", "company", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "RP", "WRB", "JJ", "PRP", "VBP", "IN", "PRP$", "NN", "CC", "NN", "."]
# ::lemmas ["how", "can", "i", "work", "out", "how", "valuable", "i", "be", "to", "my", "boss", "and", "company", "?"]
(h0 / have-manner-91
      :ARG1 (p0 / possible-01
            :ARG1 (w0 / work-out-02
                  :ARG1 (v0 / value-02
                        :ARG1 i0
                        :ARG0 (a1 / and
                              :op2 c0
                              :op1 (p1 / person))
                        :degree (s0 / so))
                  :ARG0 (i0 / i
                        :ARG1-of (h1 / have-rel-role-91
                              :ARG0 p1
                              :ARG2 (b0 / boss))
                        :ARG1-of (c0 / company))))
      :ARG2 (a0 / amr-unknown))

# ::snt Do I need to apply for ESTA?
# ::tokens ["Do", "I", "need", "to", "apply", "for", "ESTA", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBP", "PRP", "VB", "TO", "VB", "IN", "NNP", "."]
# ::lemmas ["do", "i", "need", "to", "apply", "for", "ESTA", "?"]
(n0 / need-01
      :ARG1 (a0 / apply-01
            :ARG0 i0
            :ARG1 (l0 / law
                  :name (n1 / name
                        :op1 "ESTA" )))
      :ARG0 (i0 / i)
      :ARG0 (a1 / amr-unknown))

# ::snt Should I let potential employers know I have a job offer?
# ::tokens ["Should", "I", "let", "potential", "employers", "know", "I", "have", "a", "job", "offer", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "JJ", "NNS", "VBP", "PRP", "VBP", "DT", "NN", "NN", "."]
# ::lemmas ["should", "i", "let", "potential", "employer", "know", "i", "have", "a", "job", "offer", "?"]
(r0 / recommend-01
      :ARG1 (l0 / let-01
            :ARG1 (k0 / know-01
                  :ARG1 (o0 / offer-01
                        :ARG0 i0
                        :ARG1 (j0 / job))
                  :ARG0 (p0 / person
                        :mod (p1 / potential)
                        :ARG0-of (e0 / employ-01)))
            :ARG0 (i0 / i))
      :ARG2 (a0 / amr-unknown))

# ::snt How do I repair water-damaged hardwood floors?
# ::tokens ["How", "do", "I", "repair", "water", "-", "damaged", "hardwood", "floors", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NN", "HYPH", "VBN", "NN", "NNS", "."]
# ::lemmas ["how", "do", "i", "repair", "water", "-", "damage", "hardwood", "floor", "?"]
(r0 / repair-01
      :ARG1 (f0 / floor
            :mod (h0 / hardwood)
            :ARG1-of (d0 / damage-01
                  :ARG0 (w0 / water)))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt Glue underlayment to concrete: how long does it take to cure?
# ::tokens ["Glue", "underlayment", "to", "concrete", ":", "how", "long", "does", "it", "take", "to", "cure", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", "NN", "IN", "VB", ":", "WRB", "RB", "VBZ", "PRP", "VB", "TO", "VB", "."]
# ::lemmas ["glue", "underlayment", "to", "concrete", ":", "how", "long", "do", "it", "take", "to", "cure", "?"]
(m0 / multi-sentence
      :snt1 (b0 / bullshit-01
            :ARG1 (u0 / underlayment
                  :ARG1-of (c0 / concrete-02))
            :ARG0 (y0 / you)
            :mode imperative )
      :snt2 (t0 / take-10
            :ARG1 (l0 / last-01
                  :ARG2 (c1 / cure-01)
                  :ARG2 (a0 / amr-unknown))))

# ::snt Is it better to request a recommendation letter in person after class or by email?
# ::tokens ["Is", "it", "better", "to", "request", "a", "recommendation", "letter", "in", "person", "after", "class", "or", "by", "email", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "PRP", "JJR", "TO", "VB", "DT", "NN", "NN", "IN", "NN", "IN", "NN", "CC", "IN", "NN", "."]
# ::lemmas ["be", "it", "well", "to", "request", "a", "recommendation", "letter", "in", "person", "after", "class", "or", "by", "email", "?"]
(h0 / have-degree-91
      :ARG1 (u0 / urgent
            :ARG1-of (o0 / or
                  :op1 (a1 / after
                        :op1 (c0 / class))
                  :op2 (e0 / email))
            :ARG1-of (r0 / recommend-01))
      :ARG2 (g0 / good-02
            :ARG1 u0)
      :ARG3 (a0 / amr-unknown)
      :ARG3 (m0 / more))

# ::snt I have a Schengen visa but my UAE Residence visa cancelled. Can I still travel then?
# ::tokens ["I", "have", "a", "Schengen", "visa", "but", "my", "UAE", "Residence", "visa", "cancelled", ".", "Can", "I", "still", "travel", "then", "?"]
# ::ner_tags ["O", "O", "O", "ORG", "O", "O", "O", "ORG", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "O", "B", "I", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "NNP", "NN", "CC", "PRP$", "NNP", "NNP", "NN", "VBD", ".", "MD", "PRP", "RB", "VB", "RB", "."]
# ::lemmas ["i", "have", "a", "Schengen", "visa", "but", "my", "UAE", "Residence", "visa", "cancel", ".", "can", "i", "still", "travel", "then", "?"]
(m0 / multi-sentence
      :snt1 (c0 / contrast-01
            :ARG1 (h0 / have-03
                  :ARG1 (v0 / visa
                        :mod (c2 / company
                              :name (n0 / name
                                    :op1 "Schengen" )))
                  :ARG0 (i0 / i))
            :ARG2 (c1 / cancel-01
                  :ARG1 (v1 / visa
                        :mod (s1 / spaceship
                              :name (n1 / name
                                    :op1 "UAE" 
                                    :op2 "Residence" )))))
      :snt2 (p0 / possible-01
            :ARG1 (t0 / travel-01
                  :ARG0 i0
                  :mod (i1 / i)
                  :mod (s0 / still))
            :mod (t1 / then)
            :mod (a0 / amr-unknown)))

# ::snt How do I remove paint from a wood floor?
# ::tokens ["How", "do", "I", "remove", "paint", "from", "a", "wood", "floor", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "remove", "paint", "from", "a", "wood", "floor", "?"]
(r0 / remove-01
      :ARG1 (p0 / paint)
      :ARG0 (i0 / i)
      :ARG2 (f0 / floor
            :mod (w0 / wood))
      :manner (a0 / amr-unknown))

# ::snt How to apply for a Schengen visa?
# ::tokens ["How", "to", "apply", "for", "a", "Schengen", "visa", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "IN", "DT", "NNP", "NN", "."]
# ::lemmas ["how", "to", "apply", "for", "a", "Schengen", "visa", "?"]
(h0 / have-manner-91
      :ARG1 (a0 / apply-01
            :ARG1 (v0 / visa
                  :mod (c0 / city
                        :name (n0 / name
                              :op1 "Schengen" ))))
      :ARG2 (a1 / amr-unknown))

# ::snt Why is my furnace blowing hot air outside through a PVC pipe?
# ::tokens ["Why", "is", "my", "furnace", "blowing", "hot", "air", "outside", "through", "a", "PVC", "pipe", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["WRB", "VBZ", "PRP$", "NN", "VBG", "JJ", "NN", "RB", "IN", "DT", "NNP", "NN", "."]
# ::lemmas ["why", "be", "my", "furnace", "blow", "hot", "air", "outside", "through", "a", "PVC", "pipe", "?"]
(b0 / blow-01
      :ARG1 (a0 / air
            :ARG1-of (h0 / hot-05))
      :ARG0 (f0 / furnace
            :poss (i0 / i))
      :ARG1-of (c0 / cause-01
            :ARG0 (a1 / amr-unknown))
      :path (o0 / outside)
      :instrument (p0 / pipe
            :mod (p1 / product
                  :name (n0 / name
                        :op1 "PVC" ))))

# ::snt Do I need to replace my hot water tank's pressure release valve?
# ::tokens ["Do", "I", "need", "to", "replace", "my", "hot", "water", "tank", "'s", "pressure", "release", "valve", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBP", "PRP", "VB", "TO", "VB", "PRP$", "JJ", "NN", "NN", "POS", "NN", "NN", "NN", "."]
# ::lemmas ["do", "i", "need", "to", "replace", "my", "hot", "water", "tank", "'s", "pressure", "release", "valve", "?"]
(n0 / need-01
      :ARG1 (r0 / replace-01
            :ARG0 i0
            :ARG1 (v0 / valve
                  :mod t0
                  :mod (r1 / release-01
                        :ARG1 (p0 / pressure))))
      :ARG0 (i0 / i
            :poss-of (t0 / tank
                  :ARG1-of (h0 / hot-05)))
      :ARG0 (a0 / amr-unknown))

# ::snt How can I stop my cat's playful yet aggressive behavior?
# ::tokens ["How", "can", "I", "stop", "my", "cat", "'s", "playful", "yet", "aggressive", "behavior", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "PRP$", "NN", "POS", "JJ", "CC", "JJ", "NN", "."]
# ::lemmas ["how", "can", "i", "stop", "my", "cat", "'s", "playful", "yet", "aggressive", "behavior", "?"]
(p0 / possible-01
      :ARG1 (s0 / stop-01
            :ARG1 (a0 / amr-unknown)
            :ARG1 (i0 / i
                  :poss-of (c0 / cat))
            :ARG1 (b0 / behave-01
                  :ARG0 i0
                  :ARG0 c0
                  :ARG1 (a1 / aggressive)
                  :mod (p1 / playful))))

# ::snt Which reward / benefits credit card is the best value for the money in Canada?
# ::tokens ["Which", "reward", "/", "benefits", "credit", "card", "is", "the", "best", "value", "for", "the", "money", "in", "Canada", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["WDT", "VBP", "SYM", "NNS", "NN", "NN", "VBZ", "DT", "JJS", "NN", "IN", "DT", "NN", "IN", "NNP", "."]
# ::lemmas ["which", "reward", "/", "benefit", "credit", "card", "be", "the", "good", "value", "for", "the", "money", "in", "Canada", "?"]
(v0 / value-01
      :ARG1 (m0 / money
            :location (c0 / country
                  :name (n0 / name
                        :op1 "Canada" )))
      :ARG2 (s0 / slash
            :op1 (r0 / reward-01)
            :op2 (b0 / benefit))
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m1 / most))
      :ARG2 (a0 / amr-unknown))

# ::snt What is this vocal technique called?
# ::tokens ["What", "is", "this", "vocal", "technique", "called", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJ", "NN", "VBN", "."]
# ::lemmas ["what", "be", "this", "vocal", "technique", "call", "?"]
(c0 / call-01
      :ARG1 (t0 / technique
            :mod (t1 / this)
            :mod (v0 / vocal))
      :ARG2 (a0 / amr-unknown))

# ::snt What is the significance of the cat?
# ::tokens ["What", "is", "the", "significance", "of", "the", "cat", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "significance", "of", "the", "cat", "?"]
(s0 / significant-02
      :ARG1 (c0 / cat)
      :ARG3 (a0 / amr-unknown))

# ::snt How long is the life of a shot of espresso?
# ::tokens ["How", "long", "is", "the", "life", "of", "a", "shot", "of", "espresso", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "RB", "VBZ", "DT", "NN", "IN", "DT", "NN", "IN", "NN", "."]
# ::lemmas ["how", "long", "be", "the", "life", "of", "a", "shot", "of", "espresso", "?"]
(l0 / last-01
      :ARG2 (l1 / life
            :poss (s0 / shot
                  :consist-of (e0 / espresso)))
      :ARG2 (a0 / amr-unknown))

# ::snt How can I get rid of fleas?
# ::tokens ["How", "can", "I", "get", "rid", "of", "fleas", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "VBN", "IN", "NNS", "."]
# ::lemmas ["how", "can", "i", "get", "rid", "of", "flea", "?"]
(p0 / possible-01
      :ARG1 (r0 / rid-01
            :ARG1 (f0 / flea)
            :ARG0 (i0 / i)
            :manner (a0 / amr-unknown)))

# ::snt Should I switch to third person or continue in first person?
# ::tokens ["Should", "I", "switch", "to", "third", "person", "or", "continue", "in", "first", "person", "?"]
# ::ner_tags ["O", "O", "O", "O", "ORDINAL", "O", "O", "O", "O", "ORDINAL", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "IN", "JJ", "NN", "CC", "VB", "IN", "JJ", "NN", "."]
# ::lemmas ["should", "i", "switch", "to", "third", "person", "or", "continue", "in", "first", "person", "?"]
(r0 / recommend-01
      :ARG1 (o0 / or
            :op1 (s0 / switch-01
                  :ARG1 (i0 / i)
                  :ARG2 (p0 / person
                        :ord (o1 / ordinal-entity
                              :value 3 )))
            :op2 (c0 / continue-01
                  :ARG0 i0
                  :manner (p1 / person
                        :ord (o2 / ordinal-entity
                              :value 1 ))))
      :ARG2 (a0 / amr-unknown))

# ::snt How can I tell whether a mathematics journal seems reputable?
# ::tokens ["How", "can", "I", "tell", "whether", "a", "mathematics", "journal", "seems", "reputable", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "IN", "DT", "NNS", "NN", "VBZ", "JJ", "."]
# ::lemmas ["how", "can", "i", "tell", "whether", "a", "mathematic", "journal", "seem", "reputable", "?"]
(p0 / possible-01
      :ARG1 (t0 / tell-01
            :ARG1 (s0 / seem-01
                  :ARG1 (r0 / repute-01
                        :ARG1 (j0 / journal
                              :topic (m0 / mathematics))))
            :ARG0 (i0 / i))
      :manner (a0 / amr-unknown))

# ::snt How can I stop my pie from burning?
# ::tokens ["How", "can", "I", "stop", "my", "pie", "from", "burning", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "PRP$", "NN", "IN", "VBG", "."]
# ::lemmas ["how", "can", "i", "stop", "my", "pie", "from", "burn", "?"]
(p0 / possible-01
      :ARG1 (s0 / stop-01
            :ARG1 (b0 / burn-01
                  :ARG1 (p1 / pie
                        :poss i0))
            :ARG0 (i0 / i)
            :manner (a0 / amr-unknown)))

# ::snt How do I replace a broken halogen bulb in the recessed light in my bathroom?
# ::tokens ["How", "do", "I", "replace", "a", "broken", "halogen", "bulb", "in", "the", "recessed", "light", "in", "my", "bathroom", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "JJ", "NN", "NN", "IN", "DT", "VBN", "NN", "IN", "PRP$", "NN", "."]
# ::lemmas ["how", "do", "i", "replace", "a", "broken", "halogen", "bulb", "in", "the", "recess", "light", "in", "my", "bathroom", "?"]
(r0 / replace-01
      :ARG1 (b0 / bulb
            :mod (h0 / halogen)
            :ARG1-of (b1 / break-01))
      :ARG0 (i0 / i
            :poss-of (b2 / bathroom))
      :ARG2 (l0 / light
            :location b2
            :ARG1-of (r1 / recess))
      :manner (a0 / amr-unknown))

# ::snt Is it acceptable as referee to contact an author on a paper you review?
# ::tokens ["Is", "it", "acceptable", "as", "referee", "to", "contact", "an", "author", "on", "a", "paper", "you", "review", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "PRP", "JJ", "IN", "NN", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "PRP", "VBP", "."]
# ::lemmas ["be", "it", "acceptable", "as", "referee", "to", "contact", "an", "author", "on", "a", "paper", "you", "review", "?"]
(p0 / possible-01
      :ARG1 (a0 / accept-01
            :ARG1 (r0 / referee)
            :ARG1 (c0 / contact-01
                  :ARG1 (p1 / paper
                        :ARG1-of (r1 / review-01
                              :ARG0 (y0 / you)))
                  :ARG0 (p2 / person
                        :ARG0-of (a2 / author-01))))
      :ARG1-of (a1 / amr-unknown))

# ::snt What is a good solo to learn in the Dorian mode?
# ::tokens ["What", "is", "a", "good", "solo", "to", "learn", "in", "the", "Dorian", "mode", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "NORP", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJ", "NN", "TO", "VB", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["what", "be", "a", "good", "solo", "to", "learn", "in", "the", "Dorian", "mode", "?"]
(g0 / good-02
      :ARG1 (l0 / learn-01
            :ARG1 (m0 / mode
                  :mod (b0 / book
                        :name (n0 / name
                              :op1 "Dorian" ))))
      :ARG1 (a0 / amr-unknown))

# ::snt How can I get rid of fleas?
# ::tokens ["How", "can", "I", "get", "rid", "of", "fleas", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "VBN", "IN", "NNS", "."]
# ::lemmas ["how", "can", "i", "get", "rid", "of", "flea", "?"]
(p0 / possible-01
      :ARG1 (r0 / rid-01
            :ARG1 (f0 / flea)
            :ARG0 (i0 / i)
            :manner (a0 / amr-unknown)))

# ::snt How can I add a GFCI receptacle on a circuit with split receptacles?
# ::tokens ["How", "can", "I", "add", "a", "GFCI", "receptacle", "on", "a", "circuit", "with", "split", "receptacles", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "NNP", "NN", "IN", "DT", "NN", "IN", "NN", "NNS", "."]
# ::lemmas ["how", "can", "i", "add", "a", "GFCI", "receptacle", "on", "a", "circuit", "with", "split", "receptacle", "?"]
(p0 / possible-01
      :ARG1 (a0 / add-02
            :ARG0 (i0 / i)
            :ARG2 (c0 / circuit
                  :ARG1-of (h0 / have-03
                        :ARG1 (r1 / receptacle
                              :ARG1-of (s0 / split-01))))
            :manner (a1 / amr-unknown))
      :manner (r0 / receptacle
            :mod (p1 / product
                  :name (n0 / name
                        :op1 "GFCI" ))))

# ::snt How does Paying credit card in full VS paying with interest will affect your credit score?
# ::tokens ["How", "does", "Paying", "credit", "card", "in", "full", "VS", "paying", "with", "interest", "will", "affect", "your", "credit", "score", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "PRODUCT", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBZ", "VBG", "NN", "NN", "IN", "JJ", "NNP", "VBG", "IN", "NN", "MD", "VB", "PRP$", "NN", "NN", "."]
# ::lemmas ["how", "do", "pay", "credit", "card", "in", "full", "VS", "pay", "with", "interest", "will", "affect", "your", "credit", "score", "?"]
(a0 / affect-01
      :ARG1 (s0 / score
            :mod (y0 / you)
            :mod (c0 / credit))
      :ARG0 (p0 / pay-01
            :ARG1 (c1 / card
                  :mod (f0 / full-09)
                  :mod (c2 / credit-02))
            :manner (i0 / interest))
      :manner (a1 / amr-unknown))

# ::snt Should I contact a PhD student or his supervisor for potential collaboration?
# ::tokens ["Should", "I", "contact", "a", "PhD", "student", "or", "his", "supervisor", "for", "potential", "collaboration", "?"]
# ::ner_tags ["O", "O", "O", "O", "WORK_OF_ART", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "DT", "NN", "NN", "CC", "PRP$", "NN", "IN", "JJ", "NN", "."]
# ::lemmas ["should", "i", "contact", "a", "PhD", "student", "or", "his", "supervisor", "for", "potential", "collaboration", "?"]
(r0 / recommend-01
      :ARG1 (c0 / contact-01
            :ARG1 (o0 / or
                  :op1 (p0 / person
                        :ARG0-of (s0 / study-01
                              :location (d0 / doctor)))
                  :op2 (p1 / person
                        :ARG0-of (s1 / supervise-01)))
            :ARG0 (i0 / i)
            :purpose (c1 / collaborate-01
                  :ARG1 o0
                  :mod (p2 / potential)))
      :ARG2 (a0 / amr-unknown))

# ::snt How can I replace a ceiling fan light pull chain?
# ::tokens ["How", "can", "I", "replace", "a", "ceiling", "fan", "light", "pull", "chain", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "NN", "NN", "NN", "VBP", "NN", "."]
# ::lemmas ["how", "can", "i", "replace", "a", "ceiling", "fan", "light", "pull", "chain", "?"]
(p0 / possible-01
      :ARG1 (r0 / replace-01
            :ARG1 (p1 / pull-01
                  :ARG1 (c0 / chain)
                  :ARG1 (l0 / light
                        :mod (c1 / ceiling)))
            :ARG0 (i0 / i)
            :ARG2 (a0 / amr-unknown)))

# ::snt How do I maintain a good relationship with my old boss after being promoted?
# ::tokens ["How", "do", "I", "maintain", "a", "good", "relationship", "with", "my", "old", "boss", "after", "being", "promoted", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "JJ", "NN", "IN", "PRP$", "JJ", "NN", "IN", "VBG", "VBN", "."]
# ::lemmas ["how", "do", "i", "maintain", "a", "good", "relationship", "with", "my", "old", "boss", "after", "be", "promote", "?"]
(m0 / maintain-01
      :ARG1 (r0 / relation-03
            :ARG0 i0
            :ARG1-of (g0 / good-02)
            :ARG2 (p0 / person))
      :ARG0 (i0 / i
            :ARG1-of (p1 / promote-01
                  :ARG0 p0)
            :ARG1-of (h0 / have-rel-role-91
                  :ARG0 p0
                  :ARG2 (o0 / old)
                  :ARG2 (b0 / boss)))
      :time (a0 / after)
      :manner (a1 / amr-unknown))

# ::snt Can I ask a company what I should wear to an interview?
# ::tokens ["Can", "I", "ask", "a", "company", "what", "I", "should", "wear", "to", "an", "interview", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "DT", "NN", "WP", "PRP", "MD", "VB", "IN", "DT", "NN", "."]
# ::lemmas ["can", "i", "ask", "a", "company", "what", "i", "should", "wear", "to", "an", "interview", "?"]
(p0 / possible-01
      :ARG1 (a0 / ask-01
            :ARG1 (t0 / thing
                  :ARG1-of (w0 / wear-01
                        :ARG0 i0
                        :ARG1-of (r0 / recommend-01)))
            :ARG0 (i0 / i
                  :ARG1-of (i1 / interview-01
                        :ARG2 w0))
            :ARG2 (c0 / company))
      :ARG2 (a1 / amr-unknown))

# ::snt U.S. income tax & charitable donations: How much is income tax reduced by donations?
# ::tokens ["U.S.", "income", "tax", "&", "charitable", "donations", ":", "How", "much", "is", "income", "tax", "reduced", "by", "donations", "?"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NN", "NN", "CC", "JJ", "NNS", ":", "WRB", "JJ", "VBZ", "NN", "NN", "VBN", "IN", "NNS", "."]
# ::lemmas ["U.S.", "income", "tax", "&", "charitable", "donation", ":", "how", "much", "be", "income", "tax", "reduce", "by", "donation", "?"]
(a0 / and
      :op1 (t0 / tax-01
            :ARG3 (i0 / income))
      :op2 (r0 / reduce-01
            :ARG1 (d0 / donate-01
                  :mod (c1 / charitable))
            :ARG1 (t1 / tax-01)
            :ARG2 (a1 / amr-unknown))
      :domain (c0 / country
            :name (n0 / name
                  :op1 "U.S." )))

# ::snt Can I connect two load lines to a GFCI receptacle?
# ::tokens ["Can", "I", "connect", "two", "load", "lines", "to", "a", "GFCI", "receptacle", "?"]
# ::ner_tags ["O", "O", "O", "CARDINAL", "O", "O", "O", "O", "ORG", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "CD", "NN", "NNS", "IN", "DT", "NNP", "NN", "."]
# ::lemmas ["can", "i", "connect", "two", "load", "line", "to", "a", "GFCI", "receptacle", "?"]
(p0 / possible-01
      :ARG1 (c0 / connect-01
            :ARG1 (l0 / line
                  :mod (l1 / load)
                  :quant 2 )
            :ARG0 (i0 / i)
            :ARG2 (r0 / receptacle
                  :mod (p1 / product
                        :name (n0 / name
                              :op1 "GFCI" ))))
      :ARG1 (a0 / amr-unknown))

# ::snt How do I replace a broken halogen bulb in the recessed light in my bathroom?
# ::tokens ["How", "do", "I", "replace", "a", "broken", "halogen", "bulb", "in", "the", "recessed", "light", "in", "my", "bathroom", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "JJ", "NN", "NN", "IN", "DT", "VBN", "NN", "IN", "PRP$", "NN", "."]
# ::lemmas ["how", "do", "i", "replace", "a", "broken", "halogen", "bulb", "in", "the", "recess", "light", "in", "my", "bathroom", "?"]
(r0 / replace-01
      :ARG1 (b0 / bulb
            :mod (h0 / halogen)
            :ARG1-of (b1 / break-01))
      :ARG0 (i0 / i
            :poss-of (b2 / bathroom))
      :ARG2 (l0 / light
            :location b2
            :ARG1-of (r1 / recess))
      :manner (a0 / amr-unknown))

# ::snt How should I patch a popcorn ceiling?
# ::tokens ["How", "should", "I", "patch", "a", "popcorn", "ceiling", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "JJ", "NN", "."]
# ::lemmas ["how", "should", "i", "patch", "a", "popcorn", "ceiling", "?"]
(r0 / recommend-01
      :ARG1 (a0 / achieve-01
            :ARG1 (c0 / ceiling
                  :topic (p0 / popcorn))
            :ARG0 (i0 / i)
            :manner (a1 / amr-unknown)))

# ::snt What do I do if a professor at a foreign university doesn't respond to my emails?
# ::tokens ["What", "do", "I", "do", "if", "a", "professor", "at", "a", "foreign", "university", "does", "n't", "respond", "to", "my", "emails", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBP", "PRP", "VB", "IN", "DT", "NN", "IN", "DT", "JJ", "NN", "VBZ", "RB", "VB", "IN", "PRP$", "NNS", "."]
# ::lemmas ["what", "do", "i", "do", "if", "a", "professor", "at", "a", "foreign", "university", "do", "not", "respond", "to", "my", "email", "?"]
(d0 / do-02
      :ARG1 (i0 / i
            :ARG2-of (e0 / email-01))
      :condition (r0 / respond-01
            :ARG0 (p0 / professor
                  :location (u0 / university
                        :mod (f0 / foreign)))
            :polarity - )
      :ARG1 (a0 / amr-unknown))

# ::snt How can I keep my dog from barking when I don't know what he's barking at?
# ::tokens ["How", "can", "I", "keep", "my", "dog", "from", "barking", "when", "I", "do", "n't", "know", "what", "he", "'s", "barking", "at", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "PRP$", "NN", "IN", "VBG", "WRB", "PRP", "VBP", "RB", "VB", "WP", "PRP", "VBZ", "VBG", "IN", "."]
# ::lemmas ["how", "can", "i", "keep", "my", "dog", "from", "bark", "when", "i", "do", "not", "know", "what", "he", "be", "bark", "at", "?"]
(p0 / possible-01
      :ARG1 (k0 / keep-04
            :ARG1 (b0 / bark-01
                  :ARG0 i0
                  :ARG0 (d0 / dog))
            :ARG0 (i0 / i)
            :time (k1 / know-01
                  :ARG0 i0
                  :ARG1 (t0 / thing)
                  :polarity - ))
      :manner (a0 / amr-unknown))

# ::snt Travelling to Romania for 4 days by Schengen visa issued by Germany?
# ::tokens ["Travelling", "to", "Romania", "for", "4", "days", "by", "Schengen", "visa", "issued", "by", "Germany", "?"]
# ::ner_tags ["O", "O", "GPE", "O", "DATE", "DATE", "O", "ORG", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "B", "O", "B", "I", "O", "B", "O", "O", "O", "B", "O"]
# ::pos_tags ["VBG", "IN", "NNP", "IN", "CD", "NNS", "IN", "NNP", "NNP", "VBN", "IN", "NNP", "."]
# ::lemmas ["travel", "to", "Romania", "for", "4", "days", "by", "Schengen", "visa", "issue", "by", "Germany", "?"]
(t0 / travel-01
      :ARG0 (v0 / visa
            :mod (i0 / issue-01
                  :ARG0 (c2 / country
                        :name (n2 / name
                              :op1 "Germany" )))
            :mod (c1 / company
                  :name (n1 / name
                        :op1 "Schengen" )))
      :ARG4 (c0 / country
            :name (n0 / name
                  :op1 "Romania" ))
      :duration (t1 / temporal-quantity
            :quant 4 
            :unit (d0 / day))
      :ARG0 (a0 / amr-unknown))

# ::snt What is the professional way to follow up with a manager for project opportunity?
# ::tokens ["What", "is", "the", "professional", "way", "to", "follow", "up", "with", "a", "manager", "for", "project", "opportunity", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJ", "NN", "TO", "VB", "RP", "IN", "DT", "NN", "IN", "NN", "NN", "."]
# ::lemmas ["what", "be", "the", "professional", "way", "to", "follow", "up", "with", "a", "manager", "for", "project", "opportunity", "?"]
(w0 / way
      :mod (p0 / professional)
      :domain (f0 / follow-up-03
            :ARG1 (p1 / person
                  :ARG0-of (m0 / manage-01))
            :purpose (o0 / opportunity
                  :mod (p2 / project)))
      :domain (a0 / amr-unknown))

# ::snt Why is compensation so much higher in the US than in Western Europe on average?
# ::tokens ["Why", "is", "compensation", "so", "much", "higher", "in", "the", "US", "than", "in", "Western", "Europe", "on", "average", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O", "O", "LOC", "LOC", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "B", "I", "O", "O", "O"]
# ::pos_tags ["WRB", "VBZ", "NN", "RB", "RB", "JJR", "IN", "DT", "NNP", "IN", "IN", "NNP", "NNP", "IN", "JJ", "."]
# ::lemmas ["why", "be", "compensation", "so", "much", "high", "in", "the", "US", "than", "in", "Western", "Europe", "on", "average", "?"]
(c0 / cause-01
      :ARG1 (h0 / high-02
            :ARG1 (c1 / country
                  :name (n0 / name
                        :op1 "US" ))
            :ARG1 (h1 / have-degree-91
                  :ARG1 c2
                  :ARG3 (m0 / more
                        :quant (m1 / much
                              :degree (s0 / so)))
                  :ARG4 (t0 / thing
                        :ARG1-of (a1 / average-04)
                        :location (c3 / continent
                              :name (n1 / name
                                    :op1 "Western" 
                                    :op2 "Europe" ))))
            :ARG1 (c2 / compensate-01))
      :ARG0 (a0 / amr-unknown))

# ::snt What is the significance of the cat?
# ::tokens ["What", "is", "the", "significance", "of", "the", "cat", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "significance", "of", "the", "cat", "?"]
(s0 / significant-02
      :ARG1 (c0 / cat)
      :ARG3 (a0 / amr-unknown))

# ::snt What could be causing water pressure to build up after changing my under sink filter?
# ::tokens ["What", "could", "be", "causing", "water", "pressure", "to", "build", "up", "after", "changing", "my", "under", "sink", "filter", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "VB", "VBG", "NN", "NN", "TO", "VB", "RP", "IN", "VBG", "PRP$", "IN", "NN", "NN", "."]
# ::lemmas ["what", "could", "be", "cause", "water", "pressure", "to", "build", "up", "after", "change", "my", "under", "sink", "filter", "?"]
(p0 / possible-01
      :ARG1 (b0 / build-up-05
            :ARG1 (a0 / after
                  :op1 (c0 / change-01
                        :ARG1 (f0 / filter-02
                              :ARG1 (u0 / under)
                              :ARG1 (i0 / i))))
            :ARG1 (a1 / amr-unknown)
            :ARG1 (p1 / pressure
                  :mod (w0 / water))))

# ::snt How do I convert a ceiling fan with 2 separate wall switches to a separate fan & light switch?
# ::tokens ["How", "do", "I", "convert", "a", "ceiling", "fan", "with", "2", "separate", "wall", "switches", "to", "a", "separate", "fan", "&", "light", "switch", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "NN", "IN", "CD", "JJ", "NN", "NNS", "IN", "DT", "JJ", "NN", "CC", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "convert", "a", "ceiling", "fan", "with", "2", "separate", "wall", "switch", "to", "a", "separate", "fan", "&", "light", "switch", "?"]
(c0 / convert-01
      :ARG1 (f0 / fan
            :mod (c1 / ceiling)
            :ARG0-of (h0 / have-03
                  :ARG1 (s2 / switch
                        :ARG1-of (w0 / wall)
                        :ARG1-of (s4 / separate-02))))
      :ARG0 (i0 / i)
      :ARG2 (s0 / switch
            :ARG1-of (s1 / separate-02)
            :ARG0-of (a1 / and
                  :op2 (s3 / switch
                        :quant (w1 / wall)
                        :quant 2 )))
      :manner (a0 / amr-unknown))

# ::snt After a job interview, is it inappropriate if I want to talk to an employee in private?
# ::tokens ["After", "a", "job", "interview", ",", "is", "it", "inappropriate", "if", "I", "want", "to", "talk", "to", "an", "employee", "in", "private", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "NN", "NN", ",", "VBZ", "PRP", "JJ", "IN", "PRP", "VBP", "TO", "VB", "IN", "DT", "NN", "IN", "JJ", "."]
# ::lemmas ["after", "a", "job", "interview", ",", "be", "it", "inappropriate", "if", "i", "want", "to", "talk", "to", "an", "employee", "in", "private", "?"]
(a0 / appropriate-02
      :ARG1 (w0 / want-01
            :ARG1 (t0 / talk-01
                  :ARG0 i0
                  :ARG2 (p0 / person
                        :ARG1-of (e0 / employ-01))
                  :ARG1-of (p1 / private-02))
            :ARG0 (i0 / i))
      :ARG1 (a1 / amr-unknown)
      :polarity - 
      :time (a2 / after
            :op1 (i1 / interview-01
                  :ARG1 i0
                  :ARG2 (j0 / job))))

# ::snt How do you remove paint from hair?
# ::tokens ["How", "do", "you", "remove", "paint", "from", "hair", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NN", "IN", "NN", "."]
# ::lemmas ["how", "do", "you", "remove", "paint", "from", "hair", "?"]
(r0 / remove-01
      :ARG1 (p0 / paint)
      :ARG0 (y0 / you)
      :ARG2 (h0 / hair)
      :manner (a0 / amr-unknown))

# ::snt Is my U.S. driver's license valid in Europe?
# ::tokens ["Is", "my", "U.S.", "driver", "'s", "license", "valid", "in", "Europe", "?"]
# ::ner_tags ["O", "O", "GPE", "O", "O", "O", "O", "O", "LOC", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["VBZ", "PRP$", "NNP", "NN", "POS", "NN", "JJ", "IN", "NNP", "."]
# ::lemmas ["be", "my", "U.S.", "driver", "'s", "license", "valid", "in", "Europe", "?"]
(v0 / valid-02
      :ARG1 (l0 / license-01
            :ARG1 (d0 / drive-01
                  :ARG0 (i0 / i))
            :ARG2 (c1 / country
                  :name (n1 / name
                        :op1 "U.S." )))
      :ARG2 (a0 / amr-unknown)
      :location (c0 / continent
            :name (n0 / name
                  :op1 "Europe" )))

# ::snt Is it safe to leave butter at room temperature?
# ::tokens ["Is", "it", "safe", "to", "leave", "butter", "at", "room", "temperature", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "PRP", "JJ", "TO", "VB", "NN", "IN", "NN", "NN", "."]
# ::lemmas ["be", "it", "safe", "to", "leave", "butter", "at", "room", "temperature", "?"]
(s0 / safe-01
      :ARG1 (l0 / leave-12
            :ARG1 (t0 / temperature
                  :mod (r0 / room))
            :ARG1 (b0 / butter))
      :ARG0 (a0 / amr-unknown))

# ::snt How do I remove paint from a wood floor?
# ::tokens ["How", "do", "I", "remove", "paint", "from", "a", "wood", "floor", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "remove", "paint", "from", "a", "wood", "floor", "?"]
(r0 / remove-01
      :ARG1 (p0 / paint)
      :ARG0 (i0 / i)
      :ARG2 (f0 / floor
            :mod (w0 / wood))
      :manner (a0 / amr-unknown))

# ::snt What causes these chips in a cement brick wall, and how can I fix them?
# ::tokens ["What", "causes", "these", "chips", "in", "a", "cement", "brick", "wall", ",", "and", "how", "can", "I", "fix", "them", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NNS", "IN", "DT", "NN", "NN", "NN", ",", "CC", "WRB", "MD", "PRP", "VB", "PRP", "."]
# ::lemmas ["what", "cause", "these", "chip", "in", "a", "cement", "brick", "wall", ",", "and", "how", "can", "i", "fix", "them", "?"]
(a0 / and
      :op1 (c0 / cause-01
            :ARG1 (c1 / chip
                  :mod (t0 / this)
                  :location (w0 / wall
                        :consist-of (b0 / brick
                              :consist-of (c2 / cement))))
            :ARG0 (a1 / amr-unknown))
      :op2 (p0 / possible-01
            :ARG1 (f0 / fix-02
                  :ARG1 c1
                  :ARG0 (i0 / i))))

# ::snt What could be causing my toilet to back up?
# ::tokens ["What", "could", "be", "causing", "my", "toilet", "to", "back", "up", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "VB", "VBG", "PRP$", "NN", "TO", "VB", "RP", "."]
# ::lemmas ["what", "could", "be", "cause", "my", "toilet", "to", "back", "up", "?"]
(p0 / possible-01
      :ARG1 (c0 / cause-01
            :ARG1 (b0 / back-up-04
                  :ARG1 (t0 / toilet
                        :poss (i0 / i)))
            :ARG0 (a0 / amr-unknown)))

# ::snt How to bake a chicken?
# ::tokens ["How", "to", "bake", "a", "chicken", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["how", "to", "bake", "a", "chicken", "?"]
(h0 / have-manner-91
      :ARG1 (b0 / bake-01
            :ARG1 (c0 / chicken))
      :ARG2 (a0 / amr-unknown))

# ::snt What kind of spider web is this - and how do I get rid of it?
# ::tokens ["What", "kind", "of", "spider", "web", "is", "this", "-", "and", "how", "do", "I", "get", "rid", "of", "it", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "IN", "NN", "NN", "VBZ", "DT", ":", "CC", "WRB", "VBP", "PRP", "VB", "VBN", "IN", "PRP", "."]
# ::lemmas ["what", "kind", "of", "spider", "web", "be", "this", "-", "and", "how", "do", "i", "get", "rid", "of", "it", "?"]
(a0 / and
      :op1 (w0 / web
            :mod (a1 / amr-unknown)
            :mod (k0 / kind)
            :mod (s0 / spider))
      :op2 (r0 / rid-01
            :ARG1 w0
            :ARG0 (i0 / i)
            :manner (a2 / amr-unknown)))

# ::snt What goes in a student success statement for a faculty application?
# ::tokens ["What", "goes", "in", "a", "student", "success", "statement", "for", "a", "faculty", "application", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "IN", "DT", "NN", "NN", "NN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["what", "go", "in", "a", "student", "success", "statement", "for", "a", "faculty", "application", "?"]
(g0 / go-01
      :ARG1 (s0 / state-01
            :ARG3 (s1 / succeed-01
                  :ARG1 (a1 / apply-01
                        :ARG0 (f0 / faculty))
                  :ARG0 (p0 / person
                        :ARG0-of (s2 / study-01))))
      :ARG4 (a0 / amr-unknown))

# ::snt How do I make soft chapattis?
# ::tokens ["How", "do", "I", "make", "soft", "chapattis", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "JJ", "NN", "."]
# ::lemmas ["how", "do", "i", "make", "soft", "chapattis", "?"]
(m0 / make-01
      :ARG1 (c0 / chapattis
            :ARG1-of (s0 / soft-02))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt How should you respond to your teacher who cannot help you with a recommendation?
# ::tokens ["How", "should", "you", "respond", "to", "your", "teacher", "who", "can", "not", "help", "you", "with", "a", "recommendation", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "IN", "PRP$", "NN", "WP", "MD", "RB", "VB", "PRP", "IN", "DT", "NN", "."]
# ::lemmas ["how", "should", "you", "respond", "to", "your", "teacher", "who", "can", "not", "help", "you", "with", "a", "recommendation", "?"]
(r0 / recommend-01
      :ARG1 (r1 / respond-01
            :ARG1 (p0 / person
                  :ARG0-of (t0 / teach-01)
                  :ARG0-of (h0 / help-01
                        :ARG2 y0
                        :ARG1 r2
                        :ARG1-of (p1 / possible-01
                              :polarity - )))
            :ARG0 (y0 / you
                  :ARG2-of (r2 / recommend-01))
            :ARG2 (a0 / amr-unknown)))

# ::snt What should I do with my credit card debt?
# ::tokens ["What", "should", "I", "do", "with", "my", "credit", "card", "debt", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "PRP", "VB", "IN", "PRP$", "NN", "NN", "NN", "."]
# ::lemmas ["what", "should", "i", "do", "with", "my", "credit", "card", "debt", "?"]
(r0 / recommend-01
      :ARG1 (d0 / do-02
            :ARG1 (a0 / amr-unknown)
            :ARG0 (i0 / i)
            :ARG2 (d1 / debt
                  :poss i0
                  :mod (c0 / card
                        :mod (c1 / credit)))))

# ::snt What's the best way to run a wire from inside my garage to the outside?
# ::tokens ["What", "'s", "the", "best", "way", "to", "run", "a", "wire", "from", "inside", "my", "garage", "to", "the", "outside", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "DT", "NN", "IN", "IN", "PRP$", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "run", "a", "wire", "from", "inside", "my", "garage", "to", "the", "outside", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (r0 / run-01
            :ARG1 (w1 / wire)
            :source (a1 / and
                  :op2 (o0 / outside))
            :source (i0 / inside
                  :op1 (g1 / garage
                        :poss (i1 / i)))))

# ::snt How do I stop my dog from jumping on me?
# ::tokens ["How", "do", "I", "stop", "my", "dog", "from", "jumping", "on", "me", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "PRP$", "NN", "IN", "VBG", "IN", "PRP", "."]
# ::lemmas ["how", "do", "i", "stop", "my", "dog", "from", "jump", "on", "me", "?"]
(s0 / stop-03
      :ARG1 (d0 / dog
            :poss i0)
      :ARG0 (i0 / i)
      :ARG2 (j0 / jump-03
            :ARG0 d0)
      :manner (a0 / amr-unknown))

# ::snt Should I tell prospective employer that I got a raise at my current job?
# ::tokens ["Should", "I", "tell", "prospective", "employer", "that", "I", "got", "a", "raise", "at", "my", "current", "job", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "JJ", "NN", "WDT", "PRP", "VBD", "DT", "NN", "IN", "PRP$", "JJ", "NN", "."]
# ::lemmas ["should", "i", "tell", "prospective", "employer", "that", "i", "get", "a", "raise", "at", "my", "current", "job", "?"]
(r0 / recommend-01
      :ARG1 (t0 / tell-01
            :ARG1 (g0 / get-01
                  :ARG0 i0
                  :ARG1 (r1 / raise-01)
                  :location (j0 / job
                        :poss i0
                        :time (c0 / current)))
            :ARG0 (p0 / person
                  :mod (p1 / prospective)
                  :ARG0-of (e0 / employ-01))
            :ARG0 (i0 / i))
      :ARG2 (a0 / amr-unknown))

# ::snt How to judge the quality of my own paper?
# ::tokens ["How", "to", "judge", "the", "quality", "of", "my", "own", "paper", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "DT", "NN", "IN", "PRP$", "JJ", "NN", "."]
# ::lemmas ["how", "to", "judge", "the", "quality", "of", "my", "own", "paper", "?"]
(j0 / judge-01
      :ARG1 (q0 / quality
            :poss (p0 / paper
                  :poss (i0 / i)))
      :ARG0 (a0 / amr-unknown))

# ::snt Is it a bad writing practice to start sentences with a verb?
# ::tokens ["Is", "it", "a", "bad", "writing", "practice", "to", "start", "sentences", "with", "a", "verb", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "PRP", "DT", "JJ", "NN", "NN", "TO", "VB", "NNS", "IN", "DT", "NN", "."]
# ::lemmas ["be", "it", "a", "bad", "writing", "practice", "to", "start", "sentence", "with", "a", "verb", "?"]
(p0 / practice-01
      :ARG1 (s0 / start-01
            :ARG1 (s1 / sentence
                  :ARG0-of (w0 / write-01))
            :ARG2 (v0 / verb))
      :ARG1-of (b0 / bad-07)
      :ARG1 (a0 / amr-unknown))

# ::snt Schengen visa for UK citizen?
# ::tokens ["Schengen", "visa", "for", "UK", "citizen", "?"]
# ::ner_tags ["O", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "NN", "IN", "NNP", "NN", "."]
# ::lemmas ["Schengen", "visa", "for", "UK", "citizen", "?"]
(v0 / visa
      :beneficiary (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c0 / citizen
                        :mod (c1 / country
                              :name (n1 / name
                                    :op1 "UK" )))))
      :mod (a0 / amr-unknown)
      :mod (o0 / organization
            :name (n0 / name
                  :op1 "Schengen" )))

# ::snt What could be wrong with my furnace?
# ::tokens ["What", "could", "be", "wrong", "with", "my", "furnace", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "VB", "JJ", "IN", "PRP$", "NN", "."]
# ::lemmas ["what", "could", "be", "wrong", "with", "my", "furnace", "?"]
(p0 / possible-01
      :ARG1 (w0 / wrong-02
            :ARG1 (a0 / amr-unknown)
            :ARG2 (f0 / furnace
                  :poss (i0 / i))))

# ::snt How do you teach a toddler not to share?
# ::tokens ["How", "do", "you", "teach", "a", "toddler", "not", "to", "share", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "RB", "TO", "VB", "."]
# ::lemmas ["how", "do", "you", "teach", "a", "toddler", "not", "to", "share", "?"]
(t0 / teach-01
      :ARG1 (s0 / share-01
            :ARG0 t1
            :polarity - )
      :ARG0 (y0 / you)
      :ARG2 (t1 / toddler)
      :manner (a0 / amr-unknown))

# ::snt What is the best way to learn finger-picking on an acoustic guitar?
# ::tokens ["What", "is", "the", "best", "way", "to", "learn", "finger", "-", "picking", "on", "an", "acoustic", "guitar", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "NN", "HYPH", "VBG", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "learn", "finger", "-", "pick", "on", "an", "acoustic", "guitar", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (l0 / learn-01
            :ARG1 (p0 / pick-01
                  :instrument (g1 / guitar
                        :mod (a1 / acoustic))
                  :instrument (f0 / finger))))

# ::snt How do I troubleshoot my electric oven?
# ::tokens ["How", "do", "I", "troubleshoot", "my", "electric", "oven", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "PRP$", "JJ", "NN", "."]
# ::lemmas ["how", "do", "i", "troubleshoot", "my", "electric", "oven", "?"]
(t0 / trouble-01
      :ARG1 (o0 / oven
            :poss i0
            :mod (e0 / electric))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt How to apply for a Schengen visa?
# ::tokens ["How", "to", "apply", "for", "a", "Schengen", "visa", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "IN", "DT", "NNP", "NN", "."]
# ::lemmas ["how", "to", "apply", "for", "a", "Schengen", "visa", "?"]
(h0 / have-manner-91
      :ARG1 (a0 / apply-01
            :ARG1 (v0 / visa
                  :mod (c0 / city
                        :name (n0 / name
                              :op1 "Schengen" ))))
      :ARG2 (a1 / amr-unknown))

# ::snt How can I be sure my water softener is working?
# ::tokens ["How", "can", "I", "be", "sure", "my", "water", "softener", "is", "working", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "JJ", "PRP$", "NN", "NN", "VBZ", "VBG", "."]
# ::lemmas ["how", "can", "i", "be", "sure", "my", "water", "softener", "be", "work", "?"]
(p0 / possible-01
      :ARG1 (s0 / sure-02
            :ARG1 (w0 / work-09
                  :ARG1 (s1 / softener
                        :mod (w1 / water)))
            :ARG0 (i0 / i))
      :manner (a0 / amr-unknown))

# ::snt How do I cap a T junction on a roof ridge?
# ::tokens ["How", "do", "I", "cap", "a", "T", "junction", "on", "a", "roof", "ridge", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "NN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "cap", "a", "t", "junction", "on", "a", "roof", "ridge", "?"]
(c0 / cap-01
      :ARG1 (j0 / junction
            :location (r0 / ridge
                  :mod (r1 / roof)))
      :ARG0 (i0 / i)
      :ARG2 (a0 / amr-unknown))

# ::snt How do I stop my dog from jumping on me?
# ::tokens ["How", "do", "I", "stop", "my", "dog", "from", "jumping", "on", "me", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "PRP$", "NN", "IN", "VBG", "IN", "PRP", "."]
# ::lemmas ["how", "do", "i", "stop", "my", "dog", "from", "jump", "on", "me", "?"]
(s0 / stop-03
      :ARG1 (d0 / dog
            :poss i0)
      :ARG0 (i0 / i)
      :ARG2 (j0 / jump-03
            :ARG0 d0)
      :manner (a0 / amr-unknown))

# ::snt How to make a strong mug of filter coffee without any Coffee machine?
# ::tokens ["How", "to", "make", "a", "strong", "mug", "of", "filter", "coffee", "without", "any", "Coffee", "machine", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "DT", "JJ", "NN", "IN", "NN", "NN", "IN", "DT", "NNP", "NN", "."]
# ::lemmas ["how", "to", "make", "a", "strong", "mug", "of", "filter", "coffee", "without", "any", "Coffee", "machine", "?"]
(m0 / make-01
      :ARG1 (c0 / coffee
            :quant (m2 / mug
                  :ARG1-of (s0 / strong-02)
                  :quant (f0 / filter-02)))
      :manner (m1 / machine
            :mod (a1 / any)
            :mod - 
            :source (c1 / convert-01))
      :manner (a0 / amr-unknown))

# ::snt What are the types of Guitar available and what are the pros and cons of each?
# ::tokens ["What", "are", "the", "types", "of", "Guitar", "available", "and", "what", "are", "the", "pros", "and", "cons", "of", "each", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBP", "DT", "NNS", "IN", "NNP", "JJ", "CC", "WP", "VBP", "DT", "NNS", "CC", "NNS", "IN", "DT", "."]
# ::lemmas ["what", "be", "the", "type", "of", "Guitar", "available", "and", "what", "be", "the", "pro", "and", "con", "of", "each", "?"]
(a0 / and
      :op1 (t0 / type
            :domain (a2 / amr-unknown)
            :ARG2-of (a3 / available-02
                  :ARG2 (G0 / Guitar)))
      :op2 (a1 / and
            :op1 (p0 / pro)
            :op2 (c0 / con
                  :poss G0
                  :mod (e0 / each))
            :domain (a4 / amr-unknown)))

# ::snt How do I fix a hole/gap between my shower tile and the dry wall next to it?
# ::tokens ["How", "do", "I", "fix", "a", "hole", "/", "gap", "between", "my", "shower", "tile", "and", "the", "dry", "wall", "next", "to", "it", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "SYM", "NN", "IN", "PRP$", "NN", "NN", "CC", "DT", "JJ", "NN", "RB", "IN", "PRP", "."]
# ::lemmas ["how", "do", "i", "fix", "a", "hole", "/", "gap", "between", "my", "shower", "tile", "and", "the", "dry", "wall", "next", "to", "it", "?"]
(f0 / fix-02
      :ARG1 (s0 / slash
            :op1 (h0 / hole)
            :op2 (g0 / gap)
            :location (w0 / wall
                  :location n0
                  :ARG1-of (d0 / dry-08)))
      :ARG0 (i0 / i
            :poss-of (s1 / shower)
            :poss-of (n0 / next-to))
      :manner (b0 / between)
      :manner (a0 / amr-unknown))

# ::snt What is a good solo to learn in the Dorian mode?
# ::tokens ["What", "is", "a", "good", "solo", "to", "learn", "in", "the", "Dorian", "mode", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "NORP", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJ", "NN", "TO", "VB", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["what", "be", "a", "good", "solo", "to", "learn", "in", "the", "Dorian", "mode", "?"]
(g0 / good-02
      :ARG1 (l0 / learn-01
            :ARG1 (m0 / mode
                  :mod (b0 / book
                        :name (n0 / name
                              :op1 "Dorian" ))))
      :ARG1 (a0 / amr-unknown))

# ::snt How do I remove paint from a wood floor?
# ::tokens ["How", "do", "I", "remove", "paint", "from", "a", "wood", "floor", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "remove", "paint", "from", "a", "wood", "floor", "?"]
(r0 / remove-01
      :ARG1 (p0 / paint)
      :ARG0 (i0 / i)
      :ARG2 (f0 / floor
            :mod (w0 / wood))
      :manner (a0 / amr-unknown))

# ::snt Would a Colombian citizen with Canadian residency need a transit visa for the UK?
# ::tokens ["Would", "a", "Colombian", "citizen", "with", "Canadian", "residency", "need", "a", "transit", "visa", "for", "the", "UK", "?"]
# ::ner_tags ["O", "O", "NORP", "O", "O", "NORP", "O", "O", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["MD", "DT", "JJ", "NN", "IN", "JJ", "NN", "VBP", "DT", "NN", "NN", "IN", "DT", "NNP", "."]
# ::lemmas ["would", "a", "Colombian", "citizen", "with", "Canadian", "residency", "need", "a", "transit", "visa", "for", "the", "UK", "?"]
(n0 / need-01
      :ARG1 (v0 / visa
            :mod (t0 / transit))
      :ARG0 (c0 / citizen
            :mod (c2 / country
                  :name (n2 / name
                        :op1 "Colombia" ))
            :ARG0-of (r0 / reside-01
                  :ARG0 (c3 / country
                        :name (n3 / name
                              :op1 "Canada" ))))
      :ARG2 (c1 / country
            :name (n1 / name
                  :op1 "UK" ))
      :ARG1 (a0 / amr-unknown))

# ::snt Is it possible to replace a switch with a receptacle?
# ::tokens ["Is", "it", "possible", "to", "replace", "a", "switch", "with", "a", "receptacle", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "PRP", "JJ", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["be", "it", "possible", "to", "replace", "a", "switch", "with", "a", "receptacle", "?"]
(p0 / possible-01
      :ARG1 (r0 / replace-01
            :ARG1 (s0 / switch)
            :ARG2 (r1 / receptacle))
      :ARG1 (a0 / amr-unknown))

# ::snt What is the best way to store fresh berries?
# ::tokens ["What", "is", "the", "best", "way", "to", "store", "fresh", "berries", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "JJ", "NNS", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "fresh", "berry", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (b0 / berry
                  :ARG1-of (f0 / fresh-04))))

# ::snt What is the best way to store fresh berries?
# ::tokens ["What", "is", "the", "best", "way", "to", "store", "fresh", "berries", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "JJ", "NNS", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "fresh", "berry", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (b0 / berry
                  :ARG1-of (f0 / fresh-04))))

# ::snt How long does cooked TVP keep in the fridge?
# ::tokens ["How", "long", "does", "cooked", "TVP", "keep", "in", "the", "fridge", "?"]
# ::ner_tags ["O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "RB", "VBZ", "VBN", "NNP", "VB", "IN", "DT", "NN", "."]
# ::lemmas ["how", "long", "do", "cook", "TVP", "keep", "in", "the", "fridge", "?"]
(k0 / keep-02
      :ARG1 (c0 / company
            :ARG0-of (c1 / cook-01)
            :name (n0 / name
                  :op1 "TVP" ))
      :location (f0 / fridge)
      :duration (a0 / amr-unknown))

# ::snt How do I remove paint from a wood floor?
# ::tokens ["How", "do", "I", "remove", "paint", "from", "a", "wood", "floor", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "remove", "paint", "from", "a", "wood", "floor", "?"]
(r0 / remove-01
      :ARG1 (p0 / paint)
      :ARG0 (i0 / i)
      :ARG2 (f0 / floor
            :mod (w0 / wood))
      :manner (a0 / amr-unknown))

# ::snt How can I remove a really stuck screw?
# ::tokens ["How", "can", "I", "remove", "a", "really", "stuck", "screw", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "RB", "VBN", "NN", "."]
# ::lemmas ["how", "can", "i", "remove", "a", "really", "stick", "screw", "?"]
(p0 / possible-01
      :ARG1 (r0 / remove-01
            :ARG1 (a0 / amr-unknown)
            :ARG1 (t0 / thing
                  :ARG1-of (s0 / stick-01
                        :ARG1-of (r1 / real-04))
                  :ARG1-of (s1 / screw-02))
            :ARG0 (i0 / i)))

# ::snt How do I reconnect a ceiling fan light chain?
# ::tokens ["How", "do", "I", "reconnect", "a", "ceiling", "fan", "light", "chain", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "NN", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "reconnect", "a", "ceiling", "fan", "light", "chain", "?"]
(c0 / consolidate-01
      :ARG1 (c1 / chain
            :consist-of (l0 / light
                  :mod (c2 / ceiling)))
      :ARG0 (i0 / i)
      :ARG3 (a0 / amr-unknown))

# ::snt How should I store eggs in the refrigerator?
# ::tokens ["How", "should", "I", "store", "eggs", "in", "the", "refrigerator", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "NNS", "IN", "DT", "NN", "."]
# ::lemmas ["how", "should", "i", "store", "egg", "in", "the", "refrigerator", "?"]
(r0 / recommend-01
      :ARG1 (s0 / store-01
            :ARG1 (e0 / egg)
            :ARG0 (i0 / i)
            :ARG2 (r1 / refrigerator)
            :manner (a0 / amr-unknown)))

# ::snt What's the best way to store potatoes and maximize their shelf-life?
# ::tokens ["What", "'s", "the", "best", "way", "to", "store", "potatoes", "and", "maximize", "their", "shelf", "-", "life", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "NNS", "CC", "VB", "PRP$", "NN", "HYPH", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "potato", "and", "maximize", "their", "shelf", "-", "life", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (a1 / and
            :op1 (s0 / store-01
                  :ARG1 (p0 / potato))
            :op2 (m1 / maximize-01
                  :ARG0 p0
                  :ARG1 (l0 / life
                        :poss p0
                        :mod (s1 / shelf)))))

# ::snt How do I teach my toddler to chew his food?
# ::tokens ["How", "do", "I", "teach", "my", "toddler", "to", "chew", "his", "food", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "PRP$", "NN", "TO", "VB", "PRP$", "NN", "."]
# ::lemmas ["how", "do", "i", "teach", "my", "toddler", "to", "chew", "his", "food", "?"]
(t0 / teach-01
      :ARG1 (c0 / chew-01
            :ARG0 p0
            :ARG1 (f0 / food
                  :poss p0))
      :ARG0 (i0 / i
            :ARG1-of (h0 / have-rel-role-91
                  :ARG0 p0
                  :ARG2 (t1 / toddler)))
      :ARG2 (p0 / person)
      :manner (a0 / amr-unknown))

# ::snt How can I replace a ceiling fan light pull chain?
# ::tokens ["How", "can", "I", "replace", "a", "ceiling", "fan", "light", "pull", "chain", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "NN", "NN", "NN", "VBP", "NN", "."]
# ::lemmas ["how", "can", "i", "replace", "a", "ceiling", "fan", "light", "pull", "chain", "?"]
(p0 / possible-01
      :ARG1 (r0 / replace-01
            :ARG1 (p1 / pull-01
                  :ARG1 (c0 / chain)
                  :ARG1 (l0 / light
                        :mod (c1 / ceiling)))
            :ARG0 (i0 / i)
            :ARG2 (a0 / amr-unknown)))

# ::snt How can I repair my two sloping concrete slabs?
# ::tokens ["How", "can", "I", "repair", "my", "two", "sloping", "concrete", "slabs", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "PRP$", "CD", "NN", "JJ", "NNS", "."]
# ::lemmas ["how", "can", "i", "repair", "my", "two", "sloping", "concrete", "slab", "?"]
(p0 / possible-01
      :ARG1 (r0 / repair-01
            :ARG1 (s0 / slab
                  :poss i0
                  :ARG1-of (c0 / cool-01)
                  :quant (c1 / concrete)
                  :quant 2 )
            :ARG0 (i0 / i))
      :manner (a0 / amr-unknown))

# ::snt Where can I find a good vocabulary list?
# ::tokens ["Where", "can", "I", "find", "a", "good", "vocabulary", "list", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "JJ", "NN", "NN", "."]
# ::lemmas ["where", "can", "i", "find", "a", "good", "vocabulary", "list", "?"]
(p0 / possible-01
      :ARG1 (f0 / find-01
            :ARG1 (t0 / thing
                  :ARG2-of (g0 / good-02)
                  :ARG2-of (l0 / list-01
                        :ARG1 (v0 / vocabulary)))
            :ARG0 (i0 / i)
            :location (a0 / amr-unknown)))

# ::snt How can I repair my floors' finish?
# ::tokens ["How", "can", "I", "repair", "my", "floors", "'", "finish", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "PRP$", "NNS", "POS", "NN", "."]
# ::lemmas ["how", "can", "i", "repair", "my", "floor", "'", "finish", "?"]
(p0 / possible-01
      :ARG1 (r0 / repair-01
            :ARG1 (a0 / amr-unknown)
            :ARG1 (f0 / finish-01
                  :ARG1 (f1 / floor
                        :poss i0))
            :ARG0 (i0 / i)))

# ::snt How do I secure an old aluminum/glass sliding door?
# ::tokens ["How", "do", "I", "secure", "an", "old", "aluminum", "/", "glass", "sliding", "door", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "JJ", "NN", "SYM", "NN", "VBG", "NN", "."]
# ::lemmas ["how", "do", "i", "secure", "an", "old", "aluminum", "/", "glass", "slide", "door", "?"]
(s0 / secure-02
      :ARG1 (d0 / door
            :mod (o0 / old)
            :mod (s1 / slide-01
                  :ARG1 (a1 / aluminum)
                  :ARG1 (g0 / glass)))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt How can I stop this Shower faucet leak?
# ::tokens ["How", "can", "I", "stop", "this", "Shower", "faucet", "leak", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "NNP", "NN", "NN", "."]
# ::lemmas ["how", "can", "i", "stop", "this", "Shower", "faucet", "leak", "?"]
(p0 / possible-01
      :ARG1 (s0 / stop-01
            :ARG1 (l0 / leak-01
                  :ARG1 (f0 / faucet
                        :poss (p1 / person
                              :name (n0 / name
                                    :op1 "Shower" )))
                  :mod (t0 / this))
            :ARG0 (i0 / i)
            :manner (a0 / amr-unknown)))

# ::snt How do I remove paint from a wood floor?
# ::tokens ["How", "do", "I", "remove", "paint", "from", "a", "wood", "floor", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "remove", "paint", "from", "a", "wood", "floor", "?"]
(r0 / remove-01
      :ARG1 (p0 / paint)
      :ARG0 (i0 / i)
      :ARG2 (f0 / floor
            :mod (w0 / wood))
      :manner (a0 / amr-unknown))

# ::snt Which part of the GRE is more important to admissions committees?
# ::tokens ["Which", "part", "of", "the", "GRE", "is", "more", "important", "to", "admissions", "committees", "?"]
# ::ner_tags ["O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "IN", "DT", "NNP", "VBZ", "RBR", "JJ", "IN", "NNS", "NNS", "."]
# ::lemmas ["which", "part", "of", "the", "GRE", "be", "more", "important", "to", "admission", "committee", "?"]
(h0 / have-degree-91
      :ARG1 (i0 / important-01
            :ARG2 (o0 / organization
                  :name (n0 / name
                        :op1 "GRE" ))
            :ARG2 (c0 / committee
                  :ARG0-of (a1 / admit-02)))
      :ARG3 (a0 / amr-unknown)
      :ARG3 (m0 / more))

# ::snt Is there a way to find out if I need a transit visa for a layover in the UK?
# ::tokens ["Is", "there", "a", "way", "to", "find", "out", "if", "I", "need", "a", "transit", "visa", "for", "a", "layover", "in", "the", "UK", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["VBZ", "EX", "DT", "NN", "TO", "VB", "RP", "IN", "PRP", "VBP", "DT", "NN", "NN", "IN", "DT", "NN", "IN", "DT", "NNP", "."]
# ::lemmas ["be", "there", "a", "way", "to", "find", "out", "if", "i", "need", "a", "transit", "visa", "for", "a", "layover", "in", "the", "UK", "?"]
(w0 / way
      :manner-of (f0 / find-out-03
            :ARG1 (t0 / truth-value
                  :polarity-of (n0 / need-01
                        :ARG1 (v0 / visa
                              :mod (t1 / transit))
                        :ARG0 (i0 / i)
                        :purpose (l0 / layover
                              :ARG0 i0
                              :location (c0 / country
                                    :name (n1 / name
                                          :op1 "UK" ))))))
      :manner-of (a0 / amr-unknown))

# ::snt How long does cooked TVP keep in the fridge?
# ::tokens ["How", "long", "does", "cooked", "TVP", "keep", "in", "the", "fridge", "?"]
# ::ner_tags ["O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "RB", "VBZ", "VBN", "NNP", "VB", "IN", "DT", "NN", "."]
# ::lemmas ["how", "long", "do", "cook", "TVP", "keep", "in", "the", "fridge", "?"]
(k0 / keep-02
      :ARG1 (c0 / company
            :ARG0-of (c1 / cook-01)
            :name (n0 / name
                  :op1 "TVP" ))
      :location (f0 / fridge)
      :duration (a0 / amr-unknown))

# ::snt Is it appropriate to call a professor for a recommendation on the weekend?
# ::tokens ["Is", "it", "appropriate", "to", "call", "a", "professor", "for", "a", "recommendation", "on", "the", "weekend", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "DATE", "DATE", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "O"]
# ::pos_tags ["VBZ", "PRP", "JJ", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["be", "it", "appropriate", "to", "call", "a", "professor", "for", "a", "recommendation", "on", "the", "weekend", "?"]
(a0 / appropriate-02
      :ARG1 (c0 / call-02
            :ARG1 (p0 / professor)
            :time (r0 / recommend-01)
            :time (w0 / weekend))
      :ARG1 (a1 / amr-unknown))

# ::snt How can I work out how valuable I am to my boss and company?
# ::tokens ["How", "can", "I", "work", "out", "how", "valuable", "I", "am", "to", "my", "boss", "and", "company", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "RP", "WRB", "JJ", "PRP", "VBP", "IN", "PRP$", "NN", "CC", "NN", "."]
# ::lemmas ["how", "can", "i", "work", "out", "how", "valuable", "i", "be", "to", "my", "boss", "and", "company", "?"]
(h0 / have-manner-91
      :ARG1 (p0 / possible-01
            :ARG1 (w0 / work-out-02
                  :ARG1 (v0 / value-02
                        :ARG1 i0
                        :ARG0 (a1 / and
                              :op2 c0
                              :op1 (p1 / person))
                        :degree (s0 / so))
                  :ARG0 (i0 / i
                        :ARG1-of (h1 / have-rel-role-91
                              :ARG0 p1
                              :ARG2 (b0 / boss))
                        :ARG1-of (c0 / company))))
      :ARG2 (a0 / amr-unknown))

# ::snt Why do you need to peel peaches to can them?
# ::tokens ["Why", "do", "you", "need", "to", "peel", "peaches", "to", "can", "them", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "TO", "VB", "NNS", "TO", "VB", "PRP", "."]
# ::lemmas ["why", "do", "you", "need", "to", "peel", "peach", "to", "can", "them", "?"]
(n0 / need-01
      :ARG1 (p0 / pierce-01
            :ARG0 y0
            :ARG1 (p1 / peach)
            :purpose (c1 / can-01
                  :ARG0 y0
                  :ARG1 p1))
      :ARG0 (y0 / you)
      :ARG1-of (c0 / cause-01
            :ARG0 (a0 / amr-unknown)))

# ::snt How do I increase the height of a sliding glass door lock?
# ::tokens ["How", "do", "I", "increase", "the", "height", "of", "a", "sliding", "glass", "door", "lock", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "IN", "DT", "VBG", "NN", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "increase", "the", "height", "of", "a", "slide", "glass", "door", "lock", "?"]
(i0 / increase-01
      :ARG1 (h0 / high-02
            :ARG1 (l0 / lock
                  :mod (d0 / door
                        :mod (s0 / slide-01))))
      :ARG0 (i1 / i)
      :manner (a0 / amr-unknown))

# ::snt "What does it mean by a ""research university""?"
# ::tokens ["\"", "What", "does", "it", "mean", "by", "a", "\"", "\"", "research", "university", "\"", "\"", "?", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "WP", "VBZ", "PRP", "VB", "IN", "DT", "``", "``", "NN", "NN", "''", "''", ".", "''"]
# ::lemmas ["\"", "what", "do", "it", "mean", "by", "a", "\"", "\"", "research", "university", "\"", "\"", "?", "\""]
(m0 / mean-01
      :ARG1 (u0 / university
            :mod (r0 / research-01))
      :ARG0 (i0 / it)
      :ARG2 (a0 / amr-unknown))

# ::snt How do I clean a very dirty refrigerator?
# ::tokens ["How", "do", "I", "clean", "a", "very", "dirty", "refrigerator", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "RB", "JJ", "NN", "."]
# ::lemmas ["how", "do", "i", "clean", "a", "very", "dirty", "refrigerator", "?"]
(c0 / clean-01
      :ARG1 (r0 / refrigerator
            :ARG1-of (d0 / dirty-02
                  :degree (v0 / very)))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt How do I wire a bathroom exhaust fan/light to two switches?
# ::tokens ["How", "do", "I", "wire", "a", "bathroom", "exhaust", "fan", "/", "light", "to", "two", "switches", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "NN", "NN", "SYM", "NN", "IN", "CD", "NNS", "."]
# ::lemmas ["how", "do", "i", "wire", "a", "bathroom", "exhaust", "fan", "/", "light", "to", "two", "switch", "?"]
(h0 / have-manner-91
      :ARG1 (a0 / amr-unknown)
      :ARG1 (w0 / wire-02
            :ARG1 (s0 / slash
                  :op1 (f0 / fan
                        :mod (e0 / exhaust
                              :location (b0 / bathroom)))
                  :op2 (l0 / light
                        :mod e0))
            :ARG0 (i0 / i)
            :ARG2 (s1 / switch
                  :quant 2 )))

# ::snt How should I cite a screenshot in APA style for my student paper?
# ::tokens ["How", "should", "I", "cite", "a", "screenshot", "in", "APA", "style", "for", "my", "student", "paper", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "NN", "IN", "NN", "NN", "IN", "PRP$", "NN", "NN", "."]
# ::lemmas ["how", "should", "i", "cite", "a", "screenshot", "in", "apa", "style", "for", "my", "student", "paper", "?"]
(r0 / recommend-01
      :ARG1 (c0 / cite-01
            :ARG1 (a0 / amr-unknown)
            :ARG1 (s0 / screenshot
                  :mod (s1 / style
                        :mod (l0 / law
                              :name (n0 / name
                                    :op1 "apa" )))))
      :manner (i0 / i
            :poss-of (p0 / paper
                  :mod (p1 / person
                        :ARG0-of (s2 / study-01)))))

# ::snt How do you teach a toddler not to share?
# ::tokens ["How", "do", "you", "teach", "a", "toddler", "not", "to", "share", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "RB", "TO", "VB", "."]
# ::lemmas ["how", "do", "you", "teach", "a", "toddler", "not", "to", "share", "?"]
(t0 / teach-01
      :ARG1 (s0 / share-01
            :ARG0 t1
            :polarity - )
      :ARG0 (y0 / you)
      :ARG2 (t1 / toddler)
      :manner (a0 / amr-unknown))

# ::snt Why doesn't my cat lick me?
# ::tokens ["Why", "does", "n't", "my", "cat", "lick", "me", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBZ", "RB", "PRP$", "NN", "VB", "PRP", "."]
# ::lemmas ["why", "do", "not", "my", "cat", "lick", "me", "?"]
(b0 / bully-01
      :ARG1 (i0 / i)
      :ARG0 (c0 / cat)
      :ARG1-of (c1 / cause-01
            :ARG0 (a0 / amr-unknown))
      :polarity - )

# ::snt How do I repair this broken pipe?
# ::tokens ["How", "do", "I", "repair", "this", "broken", "pipe", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "VBN", "NN", "."]
# ::lemmas ["how", "do", "i", "repair", "this", "break", "pipe", "?"]
(r0 / repair-01
      :ARG1 (p0 / pipe
            :mod (t0 / this)
            :ARG1-of (b0 / break-01))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt What type of lag bolts should I use for a deck?
# ::tokens ["What", "type", "of", "lag", "bolts", "should", "I", "use", "for", "a", "deck", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "IN", "NN", "NNS", "MD", "PRP", "VB", "IN", "DT", "NN", "."]
# ::lemmas ["what", "type", "of", "lag", "bolt", "should", "i", "use", "for", "a", "deck", "?"]
(r0 / recommend-01
      :ARG1 (u0 / use-01
            :ARG1 (b0 / bolt
                  :mod (l0 / lag)
                  :mod (t0 / type
                        :mod (a0 / amr-unknown)))
            :ARG0 (i0 / i)
            :ARG2 (d0 / deck)))

# ::snt How do I paint art onto a wall?
# ::tokens ["How", "do", "I", "paint", "art", "onto", "a", "wall", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["how", "do", "i", "paint", "art", "onto", "a", "wall", "?"]
(p0 / paint-02
      :ARG1 (a0 / art)
      :ARG0 (i0 / i)
      :ARG2 (w0 / wall)
      :manner (a1 / amr-unknown))

# ::snt What's the best way to introduce a chinchilla to a household with cats?
# ::tokens ["What", "'s", "the", "best", "way", "to", "introduce", "a", "chinchilla", "to", "a", "household", "with", "cats", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "IN", "NNS", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "introduce", "a", "chinchilla", "to", "a", "household", "with", "cat", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (i0 / introduce-01
            :ARG1 (c0 / chinchilla)
            :ARG2 (h1 / household
                  :ARG0-of (h2 / have-03
                        :ARG1 (c1 / cat)))))

# ::snt What is the best way to store fresh berries?
# ::tokens ["What", "is", "the", "best", "way", "to", "store", "fresh", "berries", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "JJ", "NNS", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "fresh", "berry", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (b0 / berry
                  :ARG1-of (f0 / fresh-04))))

# ::snt What does it mean to write a song in a certain key?
# ::tokens ["What", "does", "it", "mean", "to", "write", "a", "song", "in", "a", "certain", "key", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "PRP", "VB", "TO", "VB", "DT", "NN", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["what", "do", "it", "mean", "to", "write", "a", "song", "in", "a", "certain", "key", "?"]
(m0 / mean-01
      :ARG1 (w0 / write-01
            :ARG1 (s0 / song)
            :manner (k0 / key
                  :mod (c0 / certain)))
      :ARG2 (a0 / amr-unknown))

# ::snt How long should I wait between grout application and sealant?
# ::tokens ["How", "long", "should", "I", "wait", "between", "grout", "application", "and", "sealant", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "RB", "MD", "PRP", "VB", "IN", "NN", "NN", "CC", "NN", "."]
# ::lemmas ["how", "long", "should", "i", "wait", "between", "grout", "application", "and", "sealant", "?"]
(r0 / recommend-01
      :ARG1 (w0 / wait-01
            :ARG1 (i0 / i)
            :ARG2 (b0 / between
                  :op1 (a1 / application
                        :mod (g0 / grout))
                  :op2 (s0 / sealant))
            :manner (a0 / amr-unknown)))

# ::snt How long can you keep chocolate in the freezer?
# ::tokens ["How", "long", "can", "you", "keep", "chocolate", "in", "the", "freezer", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "RB", "MD", "PRP", "VB", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["how", "long", "can", "you", "keep", "chocolate", "in", "the", "freezer", "?"]
(p0 / possible-01
      :ARG1 (k0 / keep-01
            :ARG1 (c0 / chocolate)
            :ARG0 (y0 / you)
            :location (f0 / freezer)
            :duration (a0 / amr-unknown)))

# ::snt How do I prepare this porous interior wall for paint?
# ::tokens ["How", "do", "I", "prepare", "this", "porous", "interior", "wall", "for", "paint", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "JJ", "JJ", "NN", "IN", "NN", "."]
# ::lemmas ["how", "do", "i", "prepare", "this", "porous", "interior", "wall", "for", "paint", "?"]
(p0 / prepare-02
      :ARG1 (w0 / wall
            :mod (p2 / porous)
            :mod (t0 / this)
            :mod (i1 / interior))
      :ARG0 (i0 / i)
      :ARG2 (p1 / paint)
      :manner (a0 / amr-unknown))

# ::snt How do I prepare this porous interior wall for paint?
# ::tokens ["How", "do", "I", "prepare", "this", "porous", "interior", "wall", "for", "paint", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "JJ", "JJ", "NN", "IN", "NN", "."]
# ::lemmas ["how", "do", "i", "prepare", "this", "porous", "interior", "wall", "for", "paint", "?"]
(p0 / prepare-02
      :ARG1 (w0 / wall
            :mod (p2 / porous)
            :mod (t0 / this)
            :mod (i1 / interior))
      :ARG0 (i0 / i)
      :ARG2 (p1 / paint)
      :manner (a0 / amr-unknown))

# ::snt What is the best way to repair a cracked bathtub?
# ::tokens ["What", "is", "the", "best", "way", "to", "repair", "a", "cracked", "bathtub", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "DT", "VBN", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "repair", "a", "crack", "bathtub", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (r0 / repair-01
            :ARG1 (b0 / bathtub
                  :ARG1-of (c0 / crack-02)))
      :domain (a0 / amr-unknown))

# ::snt What's the best way to store asparagus?
# ::tokens ["What", "'s", "the", "best", "way", "to", "store", "asparagus", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "asparagus", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (a1 / asparagus)))

# ::snt What kind of socket is this?
# ::tokens ["What", "kind", "of", "socket", "is", "this", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "IN", "NN", "VBZ", "DT", "."]
# ::lemmas ["what", "kind", "of", "socket", "be", "this", "?"]
(s0 / socket
      :mod (k0 / kind
            :mod (a0 / amr-unknown)
            :mod (t0 / this)))

# ::snt What is the difference between a stock and a bond?
# ::tokens ["What", "is", "the", "difference", "between", "a", "stock", "and", "a", "bond", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "DT", "NN", "CC", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "a", "stock", "and", "a", "bond", "?"]
(d0 / differ-02
      :ARG1 (s0 / stock)
      :ARG2 (b0 / bond)
      :ARG3 (a0 / amr-unknown))

# ::snt What is the best way to toast pecans?
# ::tokens ["What", "is", "the", "best", "way", "to", "toast", "pecans", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "IN", "NN", "NNS", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "toast", "pecan", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (t0 / toast
            :mod (p0 / pecan)))

# ::snt What is the best way to repair a cracked bathtub?
# ::tokens ["What", "is", "the", "best", "way", "to", "repair", "a", "cracked", "bathtub", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "DT", "VBN", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "repair", "a", "crack", "bathtub", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (r0 / repair-01
            :ARG1 (b0 / bathtub
                  :ARG1-of (c0 / crack-02)))
      :domain (a0 / amr-unknown))

# ::snt What is the best way to store fresh berries?
# ::tokens ["What", "is", "the", "best", "way", "to", "store", "fresh", "berries", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "JJ", "NNS", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "fresh", "berry", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (b0 / berry
                  :ARG1-of (f0 / fresh-04))))

# ::snt Where can I find a good vocabulary list?
# ::tokens ["Where", "can", "I", "find", "a", "good", "vocabulary", "list", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "JJ", "NN", "NN", "."]
# ::lemmas ["where", "can", "i", "find", "a", "good", "vocabulary", "list", "?"]
(p0 / possible-01
      :ARG1 (f0 / find-01
            :ARG1 (t0 / thing
                  :ARG2-of (g0 / good-02)
                  :ARG2-of (l0 / list-01
                        :ARG1 (v0 / vocabulary)))
            :ARG0 (i0 / i)
            :location (a0 / amr-unknown)))

# ::snt What is the difference between assertive and non-assertive words?
# ::tokens ["What", "is", "the", "difference", "between", "assertive", "and", "non", "-", "assertive", "words", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "JJ", "CC", "JJ", "JJ", "JJ", "NNS", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "assertive", "and", "non", "-", "assertive", "word", "?"]
(d0 / differ-02
      :ARG1 (w0 / word
            :ARG0-of (a1 / assertive
                  :polarity - ))
      :ARG2 (w1 / word
            :mod (a2 / assertive))
      :ARG3 (a0 / amr-unknown))

# ::snt What if I don't have enough work sample for an interview?
# ::tokens ["What", "if", "I", "do", "n't", "have", "enough", "work", "sample", "for", "an", "interview", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "IN", "PRP", "VBP", "RB", "VB", "JJ", "NN", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["what", "if", "i", "do", "not", "have", "enough", "work", "sample", "for", "an", "interview", "?"]
(h0 / have-condition-91
      :ARG1 (a0 / amr-unknown)
      :ARG2 (h1 / have-03
            :ARG1 - 
            :ARG0 (i0 / i
                  :ARG1-of (i1 / interview-01))
            :ARG1 (s0 / sample-01
                  :ARG1 i1
                  :ARG1 (h2 / have-quant-91
                        :ARG3 (e0 / enough))
                  :ARG1 (w0 / work-01))))

# ::snt What is the best way to store fresh berries?
# ::tokens ["What", "is", "the", "best", "way", "to", "store", "fresh", "berries", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "JJ", "NNS", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "fresh", "berry", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (b0 / berry
                  :ARG1-of (f0 / fresh-04))))

# ::snt What is the best way to clean your clothes dryer exhaust?
# ::tokens ["What", "is", "the", "best", "way", "to", "clean", "your", "clothes", "dryer", "exhaust", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "PRP$", "NNS", "NN", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "clean", "your", "clothe", "dryer", "exhaust", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (c0 / clean-01
            :ARG1 (e0 / exhaust
                  :poss (y0 / you))
            :ARG1 (c1 / cause-01
                  :ARG1 (p0 / product
                        :ARG0-of (c2 / clothe-01))))
      :domain (a0 / amr-unknown))

# ::snt What is the best way to treat feline ringworm?
# ::tokens ["What", "is", "the", "best", "way", "to", "treat", "feline", "ringworm", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "JJ", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "treat", "feline", "ringworm", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (t0 / treat-03
            :ARG1 (r0 / ringworm
                  :mod (f0 / feline))))

# ::snt What's the best way to seal around this faucet?
# ::tokens ["What", "'s", "the", "best", "way", "to", "seal", "around", "this", "faucet", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "RP", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "seal", "around", "this", "faucet", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / seal-01
            :location (a1 / around
                  :op1 (f0 / faucet
                        :mod (t0 / this)))))

# ::snt What is the difference between a stock and a bond?
# ::tokens ["What", "is", "the", "difference", "between", "a", "stock", "and", "a", "bond", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "DT", "NN", "CC", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "a", "stock", "and", "a", "bond", "?"]
(d0 / differ-02
      :ARG1 (s0 / stock)
      :ARG2 (b0 / bond)
      :ARG3 (a0 / amr-unknown))

# ::snt What is the difference between shawarma and gyros?
# ::tokens ["What", "is", "the", "difference", "between", "shawarma", "and", "gyros", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "NNP", "CC", "NNS", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "shawarma", "and", "gyro", "?"]
(d0 / differ-02
      :ARG1 (s0 / shawarma)
      :ARG2 (g0 / gyro)
      :ARG3 (a0 / amr-unknown))

# ::snt What is the best way to apply Shellac-based primer?
# ::tokens ["What", "is", "the", "best", "way", "to", "apply", "Shellac", "-", "based", "primer", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "ORG", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "NNP", "HYPH", "VBN", "NNP", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "apply", "Shellac", "-", "base", "primer", "?"]
(w0 / way
      :manner-of (h0 / have-degree-91
            :ARG2 (g0 / good-02)
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (a1 / apply-02
            :ARG1 (p0 / primer
                  :ARG1-of (b0 / base-02
                        :ARG2 (c0 / company
                              :name (n0 / name
                                    :op1 "Shellac" ))))))

# ::snt What's the best way to store asparagus?
# ::tokens ["What", "'s", "the", "best", "way", "to", "store", "asparagus", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "asparagus", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (a1 / asparagus)))

# ::snt What is the difference between a filler word and a discourse marker?
# ::tokens ["What", "is", "the", "difference", "between", "a", "filler", "word", "and", "a", "discourse", "marker", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "DT", "NN", "NN", "CC", "DT", "NN", "NN", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "a", "filler", "word", "and", "a", "discourse", "marker", "?"]
(d0 / differ-02
      :ARG1 (w0 / word
            :mod (f0 / filler))
      :ARG2 (m0 / marker
            :topic (d1 / discourse-01))
      :ARG3 (a0 / amr-unknown))

# ::snt What is this vocal technique called?
# ::tokens ["What", "is", "this", "vocal", "technique", "called", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJ", "NN", "VBN", "."]
# ::lemmas ["what", "be", "this", "vocal", "technique", "call", "?"]
(c0 / call-01
      :ARG1 (t0 / technique
            :mod (t1 / this)
            :mod (v0 / vocal))
      :ARG2 (a0 / amr-unknown))

# ::snt What kind of socket is this?
# ::tokens ["What", "kind", "of", "socket", "is", "this", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "IN", "NN", "VBZ", "DT", "."]
# ::lemmas ["what", "kind", "of", "socket", "be", "this", "?"]
(s0 / socket
      :mod (k0 / kind
            :mod (a0 / amr-unknown)
            :mod (t0 / this)))

# ::snt What is the best way to toast pecans?
# ::tokens ["What", "is", "the", "best", "way", "to", "toast", "pecans", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "IN", "NN", "NNS", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "toast", "pecan", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (t0 / toast
            :mod (p0 / pecan)))

# ::snt What is the actual difference between Graduate and Undergraduate texts?
# ::tokens ["What", "is", "the", "actual", "difference", "between", "Graduate", "and", "Undergraduate", "texts", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "ORG", "O", "ORG", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O", "B", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJ", "NN", "IN", "NNP", "CC", "VB", "NNS", "."]
# ::lemmas ["what", "be", "the", "actual", "difference", "between", "Graduate", "and", "Undergraduate", "text", "?"]
(d0 / differ-02
      :ARG1 (t0 / text
            :mod (g0 / graduate-01))
      :ARG1-of (t1 / text
            :mod (U0 / Undergraduate))
      :ARG1-of (a0 / actual-02)
      :ARG3 (a1 / amr-unknown))

# ::snt What is the difference between EFTA and the EU?
# ::tokens ["What", "is", "the", "difference", "between", "EFTA", "and", "the", "EU", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "PERSON", "O", "O", "ORG", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "B", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "NNP", "CC", "DT", "NNP", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "EFTA", "and", "the", "EU", "?"]
(d0 / differ-02
      :ARG1 (o0 / organization
            :name (n0 / name
                  :op1 "EU" ))
      :ARG1 (o1 / organization
            :name (n1 / name
                  :op1 "EFTA" ))
      :ARG3 (a0 / amr-unknown))

# ::snt What is the best way to store fresh berries?
# ::tokens ["What", "is", "the", "best", "way", "to", "store", "fresh", "berries", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "JJ", "NNS", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "fresh", "berry", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (b0 / berry
                  :ARG1-of (f0 / fresh-04))))

# ::snt What is the difference between a stock and a bond?
# ::tokens ["What", "is", "the", "difference", "between", "a", "stock", "and", "a", "bond", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "DT", "NN", "CC", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "a", "stock", "and", "a", "bond", "?"]
(d0 / differ-02
      :ARG1 (s0 / stock)
      :ARG2 (b0 / bond)
      :ARG3 (a0 / amr-unknown))

# ::snt What is the best way to toast pecans?
# ::tokens ["What", "is", "the", "best", "way", "to", "toast", "pecans", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "IN", "NN", "NNS", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "toast", "pecan", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (t0 / toast
            :mod (p0 / pecan)))

# ::snt What kind of socket is this?
# ::tokens ["What", "kind", "of", "socket", "is", "this", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "IN", "NN", "VBZ", "DT", "."]
# ::lemmas ["what", "kind", "of", "socket", "be", "this", "?"]
(s0 / socket
      :mod (k0 / kind
            :mod (a0 / amr-unknown)
            :mod (t0 / this)))

# ::snt "What does the term ""Out of the Furnace"" refer to?"
# ::tokens ["\"", "What", "does", "the", "term", "\"", "\"", "Out", "of", "the", "Furnace", "\"", "\"", "refer", "to", "?", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "WP", "VBZ", "DT", "NN", "``", "``", "IN", "IN", "DT", "NNP", "''", "``", "NN", "IN", ".", "''"]
# ::lemmas ["\"", "what", "do", "the", "term", "\"", "\"", "out", "of", "the", "Furnace", "\"", "\"", "refer", "to", "?", "\""]
(r0 / refer-01
      :ARG1 (a0 / amr-unknown)
      :ARG0 (t0 / term
            :mod (o0 / out-05
                  :ARG2 (F0 / Furnace))))

# ::snt "What was the meaning of ""21 grams""?"
# ::tokens ["\"", "What", "was", "the", "meaning", "of", "\"", "\"", "21", "grams", "\"", "\"", "?", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "QUANTITY", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "WP", "VBD", "DT", "NN", "IN", "``", "``", "CD", "NNS", "''", "``", ".", "''"]
# ::lemmas ["\"", "what", "be", "the", "meaning", "of", "\"", "\"", "21", "gram", "\"", "\"", "?", "\""]
(m0 / mean-01
      :ARG1 (m1 / mass-quantity
            :quant 21 
            :unit (g0 / gram))
      :ARG2 (a0 / amr-unknown))

# ::snt What is the difference between shawarma and gyros?
# ::tokens ["What", "is", "the", "difference", "between", "shawarma", "and", "gyros", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "NNP", "CC", "NNS", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "shawarma", "and", "gyro", "?"]
(d0 / differ-02
      :ARG1 (s0 / shawarma)
      :ARG2 (g0 / gyro)
      :ARG3 (a0 / amr-unknown))

# ::snt What is the significance of the cat?
# ::tokens ["What", "is", "the", "significance", "of", "the", "cat", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "significance", "of", "the", "cat", "?"]
(s0 / significant-02
      :ARG1 (c0 / cat)
      :ARG3 (a0 / amr-unknown))

# ::snt What kind of spider web is this - and how do I get rid of it?
# ::tokens ["What", "kind", "of", "spider", "web", "is", "this", "-", "and", "how", "do", "I", "get", "rid", "of", "it", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "IN", "NN", "NN", "VBZ", "DT", ":", "CC", "WRB", "VBP", "PRP", "VB", "VBN", "IN", "PRP", "."]
# ::lemmas ["what", "kind", "of", "spider", "web", "be", "this", "-", "and", "how", "do", "i", "get", "rid", "of", "it", "?"]
(a0 / and
      :op1 (w0 / web
            :mod (a1 / amr-unknown)
            :mod (k0 / kind)
            :mod (s0 / spider))
      :op2 (r0 / rid-01
            :ARG1 w0
            :ARG0 (i0 / i)
            :manner (a2 / amr-unknown)))

# ::snt What's the best way to store potatoes and maximize their shelf-life?
# ::tokens ["What", "'s", "the", "best", "way", "to", "store", "potatoes", "and", "maximize", "their", "shelf", "-", "life", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "NNS", "CC", "VB", "PRP$", "NN", "HYPH", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "potato", "and", "maximize", "their", "shelf", "-", "life", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (a1 / and
            :op1 (s0 / store-01
                  :ARG1 (p0 / potato))
            :op2 (m1 / maximize-01
                  :ARG0 p0
                  :ARG1 (l0 / life
                        :poss p0
                        :mod (s1 / shelf)))))

# ::snt What is the difference between a stock and a bond?
# ::tokens ["What", "is", "the", "difference", "between", "a", "stock", "and", "a", "bond", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "DT", "NN", "CC", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "a", "stock", "and", "a", "bond", "?"]
(d0 / differ-02
      :ARG1 (s0 / stock)
      :ARG2 (b0 / bond)
      :ARG3 (a0 / amr-unknown))

# ::snt What is the difference between mono and stereo?
# ::tokens ["What", "is", "the", "difference", "between", "mono", "and", "stereo", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "NNP", "CC", "NN", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "mono", "and", "stereo", "?"]
(d0 / differ-02
      :ARG1 (a0 / amr-unknown)
      :ARG2 (m0 / mono)
      :ARG2 (s0 / stereo))

# ::snt What is the best way to store my sleeping bag for long periods of time?
# ::tokens ["What", "is", "the", "best", "way", "to", "store", "my", "sleeping", "bag", "for", "long", "periods", "of", "time", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "PRP$", "VBG", "NN", "IN", "JJ", "NNS", "IN", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "my", "sleep", "bag", "for", "long", "period", "of", "time", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :domain (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (s0 / store-01
            :ARG1 (b0 / bag
                  :poss (s1 / sleep-01)
                  :poss (i0 / i))
            :duration (p0 / period
                  :ARG1-of (l0 / long-03)))
      :domain (a0 / amr-unknown))

# ::snt To explain further vector space models, basically a document is characterized by a vector.
# ::tokens ["To", "explain", "further", "vector", "space", "models", ",", "basically", "a", "document", "is", "characterized", "by", "a", "vector", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["TO", "VB", "JJ", "NN", "NN", "NNS", ",", "RB", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["to", "explain", "further", "vector", "space", "model", ",", "basically", "a", "document", "be", "characterize", "by", "a", "vector", "."]
(c0 / characterize-01
      :ARG1 (d0 / document)
      :ARG0 (v0 / vector)
      :mod (e0 / explain-01
            :ARG1 (m0 / model-01
                  :mod (s0 / space
                        :mod (v1 / vector))
                  :mod (f0 / further)))
      :mod (b0 / basic))

# ::snt The differing application has a direct influence on what the definition of the term means.
# ::tokens ["The", "differing", "application", "has", "a", "direct", "influence", "on", "what", "the", "definition", "of", "the", "term", "means", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBG", "NN", "VBZ", "DT", "JJ", "NN", "IN", "WP", "DT", "NN", "IN", "DT", "NN", "VBZ", "."]
# ::lemmas ["the", "differ", "application", "have", "a", "direct", "influence", "on", "what", "the", "definition", "of", "the", "term", "mean", "."]
(i0 / influence-01
      :ARG1 (t0 / thing
            :ARG2-of (m0 / mean-01
                  :ARG1 (d2 / define-01
                        :ARG1 (t1 / term))))
      :ARG0 (a0 / apply-02
            :ARG1-of (d1 / differ-01))
      :ARG1-of (d0 / direct-02))

# ::snt "Thus, the ""program"" is the optimal plan of action that is being produced."
# ::tokens ["\"", "Thus", ",", "the", "\"", "\"", "program", "\"", "\"", "is", "the", "optimal", "plan", "of", "action", "that", "is", "being", "produced", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "RB", ",", "DT", "``", "``", "NN", "''", "''", "VBZ", "DT", "JJ", "NN", "IN", "NN", "WDT", "VBZ", "VBG", "VBN", ".", "''"]
# ::lemmas ["\"", "thus", ",", "the", "\"", "\"", "program", "\"", "\"", "be", "the", "optimal", "plan", "of", "action", "that", "be", "be", "produce", ".", "\""]
(c0 / cause-01
      :ARG1 (p0 / plan-01
            :ARG1 (a0 / act-02)
            :mod (p1 / produce-01)
            :mod (o0 / optimal)
            :domain (p2 / program)))

# ::snt "Thus, the ""program"" is the optimal plan for action that is produced."
# ::tokens ["\"", "Thus", ",", "the", "\"", "\"", "program", "\"", "\"", "is", "the", "optimal", "plan", "for", "action", "that", "is", "produced", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "RB", ",", "DT", "``", "``", "NN", "''", "''", "VBZ", "DT", "JJ", "NN", "IN", "NN", "WDT", "VBZ", "VBN", ".", "''"]
# ::lemmas ["\"", "thus", ",", "the", "\"", "\"", "program", "\"", "\"", "be", "the", "optimal", "plan", "for", "action", "that", "be", "produce", ".", "\""]
(c0 / cause-01
      :ARG1 (p0 / plan-01
            :ARG1 (a0 / act-02)
            :mod (p1 / program)
            :mod (o0 / optimal)
            :ARG1-of (p2 / produce-01
                  :ARG1 a0)))

# ::snt P(B) (a.k.a. the normalizing constant) is the prior or marginal probability of B.
# ::tokens ["P(B", ")", "(", "a.k.a", ".", "the", "normalizing", "constant", ")", "is", "the", "prior", "or", "marginal", "probability", "of", "B."]
# ::ner_tags ["ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "-RRB-", "-LRB-", "JJ", ".", "DT", "JJ", "NN", "-RRB-", "VBZ", "DT", "JJ", "CC", "JJ", "NN", "IN", "NNP"]
# ::lemmas ["P(B", ")", "(", "a.k.a", ".", "the", "normalizing", "constant", ")", "be", "the", "prior", "or", "marginal", "probability", "of", "B."]
(o0 / or
      :op1 (p0 / probability
            :mod (p2 / prior))
      :op2 (p1 / probability
            :ARG1-of (m0 / marginal-02))
      :domain (c0 / constant
            :domain (l0 / limit-01)))

# ::snt In general, we can solve a problem with optimal substructure using a three-step process: 1.
# ::tokens ["In", "general", ",", "we", "can", "solve", "a", "problem", "with", "optimal", "substructure", "using", "a", "three", "-", "step", "process", ":", "1", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["IN", "JJ", ",", "PRP", "MD", "VB", "DT", "NN", "IN", "JJ", "NN", "VBG", "DT", "CD", "HYPH", "NN", "NN", ":", "LS", "."]
# ::lemmas ["in", "general", ",", "we", "can", "solve", "a", "problem", "with", "optimal", "substructure", "use", "a", "three", "-", "step", "process", ":", "1", "."]
(p0 / possible-01
      :ARG1 (s0 / solve-01
            :ARG1 (p1 / problem
                  :topic (s1 / substructure
                        :mod (o0 / optimal)))
            :ARG0 (w0 / we)
            :ARG1-of (g0 / general-02)
            :manner (u0 / use-01
                  :ARG0 w0
                  :ARG1 (p2 / process-02
                        :ARG1 (s2 / step-01
                              :quant 3 ))))
      :li 1 )

# ::snt One of its uses is calculating posterior probabilities given observations.
# ::tokens ["One", "of", "its", "uses", "is", "calculating", "posterior", "probabilities", "given", "observations", "."]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["CD", "IN", "PRP$", "NNS", "VBZ", "VBG", "NN", "NNS", "VBN", "NNS", "."]
# ::lemmas ["One", "of", "its", "use", "be", "calculate", "posterior", "probability", "give", "observation", "."]
(u0 / use-01
      :ARG1 (i0 / include-91
            :ARG2 (i1 / it)
            :ARG2 (o0 / one))
      :ARG2 (c0 / calculate-01
            :ARG1 (p0 / probability
                  :mod (d0 / determine-01))
            :manner (o1 / observe-01
                  :ARG1-of (g0 / give-14))))

# ::snt The way that a 'term' is defined depends on the application.
# ::tokens ["The", "way", "that", "a", "'", "term", "'", "is", "defined", "depends", "on", "the", "application", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "WDT", "DT", "``", "NN", "''", "VBZ", "VBN", "VBZ", "IN", "DT", "NN", "."]
# ::lemmas ["the", "way", "that", "a", "'", "term", "'", "be", "define", "depend", "on", "the", "application", "."]
(d0 / depend-01
      :ARG1 (w0 / way
            :manner-of (d1 / define-01
                  :ARG1 (t0 / term)))
      :ARG1 (a0 / application))

# ::snt Its first application was in the SMART Information Retrieval System.
# ::tokens ["Its", "first", "application", "was", "in", "the", "SMART", "Information", "Retrieval", "System", "."]
# ::ner_tags ["O", "ORDINAL", "O", "O", "O", "ORG", "ORG", "ORG", "ORG", "ORG", "O"]
# ::ner_iob ["O", "B", "O", "O", "O", "B", "I", "I", "I", "I", "O"]
# ::pos_tags ["PRP$", "JJ", "NN", "VBD", "IN", "DT", "NNP", "NNP", "NNP", "NNP", "."]
# ::lemmas ["its", "first", "application", "be", "in", "the", "SMART", "Information", "Retrieval", "System", "."]
(a0 / apply-02
      :ARG1 (i0 / it)
      :ARG2 (t0 / thing
            :name (n0 / name
                  :op1 "SMART" 
                  :op2 "Information" 
                  :op3 "Retrieval" 
                  :op4 "System" ))
      :ord (o0 / ordinal-entity
            :value 1 ))

# ::snt Thus, the program is the best plan for action that is produced.
# ::tokens ["Thus", ",", "the", "program", "is", "the", "best", "plan", "for", "action", "that", "is", "produced", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", ",", "DT", "NN", "VBZ", "DT", "JJS", "NN", "IN", "NN", "WDT", "VBZ", "VBN", "."]
# ::lemmas ["thus", ",", "the", "program", "be", "the", "good", "plan", "for", "action", "that", "be", "produce", "."]
(c0 / cause-01
      :ARG1 (p0 / plan-01
            :ARG1 (a0 / act-02)
            :ARG1-of (p1 / program)
            :ARG1-of (h0 / have-degree-91
                  :ARG2 g0
                  :ARG3 (m0 / most))
            :ARG1-of (g0 / good-02)
            :ARG1-of (p2 / produce-01)))

# ::snt It is usually used to calculate posterior probabilities given observations.
# ::tokens ["It", "is", "usually", "used", "to", "calculate", "posterior", "probabilities", "given", "observations", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VBN", "TO", "VB", "NN", "NNS", "VBN", "NNS", "."]
# ::lemmas ["it", "be", "usually", "use", "to", "calculate", "posterior", "probability", "give", "observation", "."]
(u0 / use-01
      :ARG1 (i0 / it)
      :mod (u1 / usual)
      :ARG2 (c0 / calculate-01
            :ARG0 i0
            :ARG1 (p0 / probability
                  :mod (d0 / differ-02))
            :ARG1 (o0 / observe-01
                  :ARG1-of (g0 / give-01))))

# ::snt The methodology takes much less time rather than naive methods.
# ::tokens ["The", "methodology", "takes", "much", "less", "time", "rather", "than", "naive", "methods", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "RB", "JJR", "NN", "RB", "IN", "JJ", "NNS", "."]
# ::lemmas ["the", "methodology", "take", "much", "less", "time", "rather", "than", "naive", "method", "."]
(t0 / take-10
      :ARG1 (t1 / time
            :ARG1-of (i0 / instead-of-91
                  :ARG2 (m1 / method
                        :mod (n0 / naive)))
            :ARG1-of (h0 / have-quant-91
                  :ARG3 (l0 / less
                        :quant (m2 / much))))
      :ARG0 (m0 / methodology))

# ::snt The methodology takes much less time rather than naive methods.
# ::tokens ["The", "methodology", "takes", "much", "less", "time", "rather", "than", "naive", "methods", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "RB", "JJR", "NN", "RB", "IN", "JJ", "NNS", "."]
# ::lemmas ["the", "methodology", "take", "much", "less", "time", "rather", "than", "naive", "method", "."]
(t0 / take-10
      :ARG1 (t1 / time
            :ARG1-of (i0 / instead-of-91
                  :ARG2 (m1 / method
                        :mod (n0 / naive)))
            :ARG1-of (h0 / have-quant-91
                  :ARG3 (l0 / less
                        :quant (m2 / much))))
      :ARG0 (m0 / methodology))

# ::snt The definition of term is dependent on the application.
# ::tokens ["The", "definition", "of", "term", "is", "dependent", "on", "the", "application", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "NN", "VBZ", "JJ", "IN", "DT", "NN", "."]
# ::lemmas ["the", "definition", "of", "term", "be", "dependent", "on", "the", "application", "."]
(d0 / depend-01
      :ARG1 (a0 / apply-02)
      :ARG0 (d1 / define-01
            :ARG1 (t0 / term)))

# ::snt Whilst Bayesians describe probabilities in terms of beliefs and degrees of uncertainty.
# ::tokens ["Whilst", "Bayesians", "describe", "probabilities", "in", "terms", "of", "beliefs", "and", "degrees", "of", "uncertainty", "."]
# ::ner_tags ["O", "NORP", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NNPS", "VBP", "NNS", "IN", "NNS", "IN", "NNS", "CC", "NNS", "IN", "NN", "."]
# ::lemmas ["whilst", "Bayesians", "describe", "probability", "in", "term", "of", "belief", "and", "degree", "of", "uncertainty", "."]
(c0 / contrast-01
      :ARG2 (d0 / describe-01
            :ARG1 (p0 / probability)
            :ARG0 (p1 / person
                  :mod (w0 / world-region
                        :name (n0 / name
                              :op1 "Bayesians" )))
            :ARG2 (a0 / and
                  :op1 (t0 / thing
                        :ARG1-of (b0 / believe-01))
                  :op2 (d1 / degree
                        :degree-of (k0 / know-01
                              :polarity - )))))

# ::snt It is used in information filtering, information retrieval, indexing and relevancy rankings.
# ::tokens ["It", "is", "used", "in", "information", "filtering", ",", "information", "retrieval", ",", "indexing", "and", "relevancy", "rankings", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "VBN", "IN", "NN", "NN", ",", "NN", "NN", ",", "NN", "CC", "NN", "NNS", "."]
# ::lemmas ["it", "be", "use", "in", "information", "filtering", ",", "information", "retrieval", ",", "indexing", "and", "relevancy", "ranking", "."]
(u0 / use-01
      :ARG1 (i0 / it)
      :ARG2 (a0 / and
            :op1 (f0 / filter-02
                  :ARG1 (i1 / information))
            :op2 (r0 / retrieve-01
                  :ARG1 i1
                  :ARG1 (i2 / information))
            :op3 (m0 / model-01)
            :op4 (t0 / track-01
                  :ARG1-of (r1 / relevant-01))))

# ::snt Several different ways of computing these values, also known as (term) weights, have been developed.
# ::tokens ["Several", "different", "ways", "of", "computing", "these", "values", ",", "also", "known", "as", "(", "term", ")", "weights", ",", "have", "been", "developed", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "JJ", "NNS", "IN", "VBG", "DT", "NNS", ",", "RB", "VBN", "IN", "-LRB-", "NN", "-RRB-", "NNS", ",", "VBP", "VBN", "VBN", "."]
# ::lemmas ["several", "different", "way", "of", "compute", "these", "value", ",", "also", "know", "as", "(", "term", ")", "weight", ",", "have", "be", "develop", "."]
(d0 / develop-02
      :ARG1 (w0 / way
            :quant (s0 / several)
            :ARG1-of (d1 / differ-02)
            :manner-of (c0 / copy-01
                  :ARG1 (v0 / value
                        :mod (k0 / know-02
                              :mod (a0 / also)
                              :ARG2 (w1 / weight))
                        :mod (t0 / this)))))

# ::snt If a term exists in a document, its value in the vector is not equal to zero.
# ::tokens ["If", "a", "term", "exists", "in", "a", "document", ",", "its", "value", "in", "the", "vector", "is", "not", "equal", "to", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["IN", "DT", "NN", "VBZ", "IN", "DT", "NN", ",", "PRP$", "NN", "IN", "DT", "NN", "VBZ", "RB", "JJ", "IN", "CD", "."]
# ::lemmas ["if", "a", "term", "exist", "in", "a", "document", ",", "its", "value", "in", "the", "vector", "be", "not", "equal", "to", "zero", "."]
(e0 / equal-01
      :ARG1 (t0 / thing
            :ARG2-of (v0 / value-01
                  :location (v1 / vector)))
      :ARG2 (z0 / zero)
      :polarity - 
      :condition (e1 / exist-01
            :ARG1 (t1 / term)
            :location (d0 / document)))

# ::snt A hyperlink to a page counts as a vote of support.
# ::tokens ["A", "hyperlink", "to", "a", "page", "counts", "as", "a", "vote", "of", "support", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NN", "NNS", "IN", "DT", "NN", "IN", "NN", "."]
# ::lemmas ["a", "hyperlink", "to", "a", "page", "count", "as", "a", "vote", "of", "support", "."]
(c0 / count-04
      :ARG1 (h0 / hyperlink
            :destination (p0 / page))
      :ARG2 (v0 / vote-01
            :ARG1 (s0 / support-01)))

# ::snt For instance, a finalized schedule of events at an exhibition is sometimes called a program.
# ::tokens ["For", "instance", ",", "a", "finalized", "schedule", "of", "events", "at", "an", "exhibition", "is", "sometimes", "called", "a", "program", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", ",", "DT", "JJ", "NN", "IN", "NNS", "IN", "DT", "NN", "VBZ", "RB", "VBN", "DT", "NN", "."]
# ::lemmas ["for", "instance", ",", "a", "finalized", "schedule", "of", "event", "at", "an", "exhibition", "be", "sometimes", "call", "a", "program", "."]
(e0 / exemplify-01
      :ARG0 (c0 / call-01
            :ARG1 (p0 / program)
            :frequency (s0 / sometimes)
            :ARG1 (s1 / schedule-01
                  :ARG1 (e1 / event
                        :location (e2 / exhibit-01))
                  :ARG1-of (f0 / finalize-01))))

# ::snt Nevertheless, the patent is assigned to the University of Stanford and not to Google.
# ::tokens ["Nevertheless", ",", "the", "patent", "is", "assigned", "to", "the", "University", "of", "Stanford", "and", "not", "to", "Google", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "ORG", "ORG", "ORG", "ORG", "O", "O", "O", "ORG", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "I", "O", "O", "O", "B", "O"]
# ::pos_tags ["RB", ",", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NNP", "IN", "NNP", "CC", "RB", "IN", "NNP", "."]
# ::lemmas ["nevertheless", ",", "the", "patent", "be", "assign", "to", "the", "University", "of", "Stanford", "and", "not", "to", "Google", "."]
(h0 / have-concession-91
      :ARG1 (a0 / and
            :op1 (a1 / assign-01
                  :ARG1 (u0 / university
                        :name (n0 / name
                              :op1 "University" 
                              :op2 "of" 
                              :op3 "Stanford" ))
                  :ARG1 (p0 / patent-01))
            :op2 (a2 / assign-01
                  :ARG1 u0
                  :ARG1 p0
                  :ARG2 (c0 / company
                        :name (n1 / name
                              :op1 "Google" ))
                  :polarity - )))

# ::snt The definition of term depends on the application.
# ::tokens ["The", "definition", "of", "term", "depends", "on", "the", "application", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "NN", "VBZ", "IN", "DT", "NN", "."]
# ::lemmas ["the", "definition", "of", "term", "depend", "on", "the", "application", "."]
(d0 / depend-01
      :ARG1 (a0 / apply-02)
      :ARG0 (d1 / define-01
            :ARG1 (t0 / term)))

# ::snt Inheritance is a method of forming new classes using predefined classes.
# ::tokens ["Inheritance", "is", "a", "method", "of", "forming", "new", "classes", "using", "predefined", "classes", "."]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "DT", "NN", "IN", "VBG", "JJ", "NNS", "VBG", "VBN", "NNS", "."]
# ::lemmas ["Inheritance", "be", "a", "method", "of", "form", "new", "class", "use", "predefine", "class", "."]
(m0 / method
      :domain (f0 / form-01
            :ARG1 (c0 / class
                  :ARG1-of (n0 / new-01))
            :manner (u0 / use-01
                  :ARG1 (c1 / class
                        :ARG1-of (d0 / define-01))))
      :domain (i0 / inherit-01))

# ::snt Thus, the program is the best plan for action that is produced.
# ::tokens ["Thus", ",", "the", "program", "is", "the", "best", "plan", "for", "action", "that", "is", "produced", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", ",", "DT", "NN", "VBZ", "DT", "JJS", "NN", "IN", "NN", "WDT", "VBZ", "VBN", "."]
# ::lemmas ["thus", ",", "the", "program", "be", "the", "good", "plan", "for", "action", "that", "be", "produce", "."]
(c0 / cause-01
      :ARG1 (p0 / plan-01
            :ARG1 (a0 / act-02)
            :ARG1-of (p1 / program)
            :ARG1-of (h0 / have-degree-91
                  :ARG2 g0
                  :ARG3 (m0 / most))
            :ARG1-of (g0 / good-02)
            :ARG1-of (p2 / produce-01)))

# ::snt "Therefore, the ""program"" is the optimal plan for action that is produced."
# ::tokens ["\"", "Therefore", ",", "the", "\"", "\"", "program", "\"", "\"", "is", "the", "optimal", "plan", "for", "action", "that", "is", "produced", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "RB", ",", "DT", "``", "``", "NN", "''", "''", "VBZ", "DT", "JJ", "NN", "IN", "NN", "WDT", "VBZ", "VBN", ".", "''"]
# ::lemmas ["\"", "therefore", ",", "the", "\"", "\"", "program", "\"", "\"", "be", "the", "optimal", "plan", "for", "action", "that", "be", "produce", ".", "\""]
(c0 / cause-01
      :ARG1 (p0 / plan-01
            :ARG1 (a0 / act-02)
            :mod (p1 / program)
            :mod (o0 / optimal)
            :ARG1-of (p2 / produce-01
                  :ARG1 a0)))

# ::snt If a term appears in the document, the terms value in the vector is non-zero.
# ::tokens ["If", "a", "term", "appears", "in", "the", "document", ",", "the", "terms", "value", "in", "the", "vector", "is", "non", "-", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["IN", "DT", "NN", "VBZ", "IN", "DT", "NN", ",", "DT", "NNS", "NN", "IN", "DT", "NN", "VBZ", "JJ", "JJ", "CD", "."]
# ::lemmas ["if", "a", "term", "appear", "in", "the", "document", ",", "the", "term", "value", "in", "the", "vector", "be", "non", "-", "zero", "."]
(h0 / have-condition-91
      :ARG1 (z0 / zero
            :polarity - 
            :domain (v0 / value
                  :location (v1 / vector)))
      :ARG2 (a0 / appear-01
            :ARG1 (t0 / term)
            :location (d0 / document)))

# ::snt The vector space model has some limitations: 1.
# ::tokens ["The", "vector", "space", "model", "has", "some", "limitations", ":", "1", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBZ", "DT", "NNS", ":", "CD", "."]
# ::lemmas ["the", "vector", "space", "model", "have", "some", "limitation", ":", "1", "."]
(l0 / limit-01
      :ARG1 (m0 / model
            :mod (s0 / space
                  :mod (v0 / vector)))
      :li 1 )

# ::snt The vector space model has the following limitations: 1.
# ::tokens ["The", "vector", "space", "model", "has", "the", "following", "limitations", ":", "1", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBZ", "DT", "VBG", "NNS", ":", "CD", "."]
# ::lemmas ["the", "vector", "space", "model", "have", "the", "follow", "limitation", ":", "1", "."]
(l0 / limit-01
      :ARG1 (m0 / model
            :mod (s0 / space
                  :mod (v0 / vector)))
      :ARG1-of (f0 / follow-01)
      :li 1 )

# ::snt Typically terms are single words, keywords, or longer phrases.
# ::tokens ["Typically", "terms", "are", "single", "words", ",", "keywords", ",", "or", "longer", "phrases", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "NNS", "VBP", "JJ", "NNS", ",", "NNS", ",", "CC", "JJR", "NNS", "."]
# ::lemmas ["typically", "term", "be", "single", "word", ",", "keyword", ",", "or", "long", "phrase", "."]
(o0 / or
      :op1 (w0 / word-01
            :ARG1-of (t1 / typical-02)
            :ARG1-of (s0 / single-02))
      :op2 (k0 / keyword)
      :op3 (p0 / phrase
            :ARG1-of (h0 / have-degree-91
                  :ARG2 l0
                  :ARG3 (m0 / more))
            :ARG1-of (l0 / long-03))
      :domain (t0 / term))

# ::snt It does not take into account any information about B and therefore is considered “prior”.
# ::tokens ["It", "does", "not", "take", "into", "account", "any", "information", "about", "B", "and", "therefore", "is", "considered", "\u201c", "prior", "\u201d", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VB", "IN", "NN", "DT", "NN", "IN", "NN", "CC", "RB", "VBZ", "VBN", "``", "RB", "''", "."]
# ::lemmas ["it", "do", "not", "take", "into", "account", "any", "information", "about", "b", "and", "therefore", "be", "consider", "\"", "prior", "\"", "."]
(c0 / cause-01
      :ARG1 (c1 / consider-02
            :ARG1 (i0 / it)
            :ARG2 (p0 / prior))
      :ARG0 (t0 / take-into-account-04
            :ARG1 (i1 / information
                  :topic (a0 / any)
                  :topic (p1 / person
                        :mod (v0 / variable
                              :name (n0 / name
                                    :op1 "B" ))))
            :polarity - ))

# ::snt A document is represented as a vector and each dimension corresponds to a separate term.
# ::tokens ["A", "document", "is", "represented", "as", "a", "vector", "and", "each", "dimension", "corresponds", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "CC", "DT", "NN", "VBZ", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["a", "document", "be", "represent", "as", "a", "vector", "and", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(a0 / and
      :op1 (r0 / represent-01
            :ARG1 (d0 / document)
            :ARG2 (v0 / vector))
      :op2 (c0 / correspond-02
            :ARG1 (d1 / dimension
                  :mod (e0 / each))
            :ARG2 (t0 / term
                  :ARG1-of (s0 / separate-02))))

# ::snt Since it is a formal theorem, Bayes' theorem holds in all popular interpretations of probability.
# ::tokens ["Since", "it", "is", "a", "formal", "theorem", ",", "Bayes", "'", "theorem", "holds", "in", "all", "popular", "interpretations", "of", "probability", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "PERSON", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "PRP", "VBZ", "DT", "JJ", "NN", ",", "NNP", "POS", "NN", "VBZ", "IN", "DT", "JJ", "NNS", "IN", "NN", "."]
# ::lemmas ["since", "it", "be", "a", "formal", "theorem", ",", "Bayes", "'", "theorem", "hold", "in", "all", "popular", "interpretation", "of", "probability", "."]
(c0 / cause-01
      :ARG1 (h0 / hold-01
            :location (i0 / interpret-01
                  :ARG1 (a0 / all)
                  :ARG1-of (p1 / popular-02)
                  :ARG1 (p2 / probability)))
      :ARG0 (t0 / theorem
            :mod (p0 / person
                  :name (n0 / name
                        :op1 "Bayes" ))
            :mod (f0 / formal)))

# ::snt The methodology takes much less time rather than naive methods.
# ::tokens ["The", "methodology", "takes", "much", "less", "time", "rather", "than", "naive", "methods", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "RB", "JJR", "NN", "RB", "IN", "JJ", "NNS", "."]
# ::lemmas ["the", "methodology", "take", "much", "less", "time", "rather", "than", "naive", "method", "."]
(t0 / take-10
      :ARG1 (t1 / time
            :ARG1-of (i0 / instead-of-91
                  :ARG2 (m1 / method
                        :mod (n0 / naive)))
            :ARG1-of (h0 / have-quant-91
                  :ARG3 (l0 / less
                        :quant (m2 / much))))
      :ARG0 (m0 / methodology))

# ::snt Typically terms are keywords, single words or longer phrases.
# ::tokens ["Typically", "terms", "are", "keywords", ",", "single", "words", "or", "longer", "phrases", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "NNS", "VBP", "NNS", ",", "JJ", "NNS", "CC", "JJR", "NNS", "."]
# ::lemmas ["typically", "term", "be", "keyword", ",", "single", "word", "or", "long", "phrase", "."]
(o0 / or
      :op1 (k0 / keyword
            :domain (t1 / term))
      :op2 (w0 / word-01
            :ARG1-of (s0 / single-02))
      :op3 (p0 / phrase-01
            :ARG1-of (l0 / long-03)
            :ARG1-of (h0 / have-degree-91
                  :ARG2 l0
                  :ARG3 (m0 / more)))
      :domain (t0 / typical-02))

# ::snt Construct an optimal solution from computed values.
# ::tokens ["Construct", "an", "optimal", "solution", "from", "computed", "values", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "DT", "JJ", "NN", "IN", "VBN", "NNS", "."]
# ::lemmas ["construct", "an", "optimal", "solution", "from", "compute", "value", "."]
(c0 / construct-01
      :ARG1 (t0 / thing
            :mod (o0 / optimal)
            :ARG2-of (s0 / solve-01))
      :ARG2 (y0 / you)
      :ARG2 (v0 / value
            :ARG1-of (c1 / compile-01)))

# ::snt Several different ways of computing these values, additionally known as (term) weights, have been developed.
# ::tokens ["Several", "different", "ways", "of", "computing", "these", "values", ",", "additionally", "known", "as", "(", "term", ")", "weights", ",", "have", "been", "developed", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "JJ", "NNS", "IN", "VBG", "DT", "NNS", ",", "RB", "VBN", "IN", "-LRB-", "NN", "-RRB-", "NNS", ",", "VBP", "VBN", "VBN", "."]
# ::lemmas ["several", "different", "way", "of", "compute", "these", "value", ",", "additionally", "know", "as", "(", "term", ")", "weight", ",", "have", "be", "develop", "."]
(d0 / develop-02
      :ARG1 (w0 / way
            :quant (s0 / several)
            :ARG1-of (d1 / differ-02)
            :manner-of (c0 / copy-01
                  :ARG1 (v0 / value
                        :mod (t0 / this)
                        :ARG1-of (k0 / know-02
                              :mod (w1 / weight)
                              :mod (a0 / additional))))))

# ::snt In general, dynamic programming is used on optimisation problems, where the most efficient solution is needed.
# ::tokens ["In", "general", ",", "dynamic", "programming", "is", "used", "on", "optimisation", "problems", ",", "where", "the", "most", "efficient", "solution", "is", "needed", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "JJ", ",", "JJ", "NN", "VBZ", "VBN", "IN", "NN", "NNS", ",", "WRB", "DT", "RBS", "JJ", "NN", "VBZ", "VBN", "."]
# ::lemmas ["in", "general", ",", "dynamic", "programming", "be", "use", "on", "optimisation", "problem", ",", "where", "the", "most", "efficient", "solution", "be", "need", "."]
(u0 / use-01
      :ARG1 (p0 / program-01
            :mod (d0 / dynamic))
      :ARG1-of (g0 / general-02)
      :ARG2 (p1 / problem
            :topic (e0 / exist-01)
            :location-of (n0 / need-01
                  :ARG1 (t0 / thing
                        :ARG1-of (e1 / efficient-01)
                        :ARG1-of (h0 / have-degree-91
                              :ARG2 e1
                              :ARG3 (m0 / most))
                        :ARG2-of (s0 / solve-01)))))

# ::snt One of the best known schemes is tf-idf weighting (see the example below).
# ::tokens ["One", "of", "the", "best", "known", "schemes", "is", "tf", "-", "idf", "weighting", "(", "see", "the", "example", "below", ")", "."]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["CD", "IN", "DT", "RBS", "JJ", "NNS", "VBZ", "NNP", "HYPH", "NNP", "NN", "-LRB-", "VB", "DT", "NN", "RB", "-RRB-", "."]
# ::lemmas ["One", "of", "the", "well", "known", "scheme", "be", "tf", "-", "idf", "weighting", "(", "see", "the", "example", "below", ")", "."]
(m0 / multi-sentence
      :snt1 (h0 / have-mod-91
            :ARG1 (t0 / thing
                  :ARG1-of (i0 / include-91
                        :ARG2 (s2 / scheme
                              :ARG1-of (k0 / know-02
                                    :ARG1-of (g0 / good-02)
                                    :ARG1-of (h1 / have-degree-91
                                          :ARG2 g0
                                          :ARG3 (m1 / most))))))
            :ARG1 (s1 / scheme
                  :name (n0 / name
                        :op1 "tf" 
                        :op2 "weighting" )))
      :snt2 (s0 / see-01
            :ARG1 (e0 / exemplify-01
                  :ARG0 (b0 / below))
            :ARG0 (y0 / you)
            :mode imperative ))

# ::snt For instance, a events schedule at an exhibition is sometimes called a program.
# ::tokens ["For", "instance", ",", "a", "events", "schedule", "at", "an", "exhibition", "is", "sometimes", "called", "a", "program", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", ",", "DT", "NNS", "NN", "IN", "DT", "NN", "VBZ", "RB", "VBN", "DT", "NN", "."]
# ::lemmas ["for", "instance", ",", "a", "event", "schedule", "at", "an", "exhibition", "be", "sometimes", "call", "a", "program", "."]
(e0 / exemplify-01
      :ARG0 (c0 / call-01
            :ARG1 (s0 / schedule-01
                  :ARG1 (e1 / event
                        :location (e2 / exhibit-01)))
            :ARG2 (p0 / program)
            :frequency (s1 / sometimes)))

# ::snt Define value of optimal solution recursively.
# ::tokens ["Define", "value", "of", "optimal", "solution", "recursively", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "NN", "IN", "JJ", "NN", "RB", "."]
# ::lemmas ["define", "value", "of", "optimal", "solution", "recursively", "."]
(d0 / define-01
      :ARG1 (t0 / thing
            :ARG2-of (v0 / value-01
                  :ARG1 (s0 / solution
                        :mod (o0 / optimal))))
      :ARG0 (y0 / you)
      :manner (a0 / arbitrary-02)
      :mode imperative )

# ::snt It was first used in the SMART Information Retrieval System.
# ::tokens ["It", "was", "first", "used", "in", "the", "SMART", "Information", "Retrieval", "System", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "RB", "VBN", "IN", "DT", "NNP", "NNP", "NNP", "NNP", "."]
# ::lemmas ["it", "be", "first", "use", "in", "the", "SMART", "Information", "Retrieval", "System", "."]
(u0 / use-01
      :ARG1 (i0 / it)
      :ARG2 (t0 / thing
            :name (n0 / name
                  :op1 "SMART" 
                  :op2 "Information" 
                  :op3 "Retrieval" 
                  :op4 "System" ))
      :ord (o0 / ordinal-entity
            :value 1 ))

# ::snt The value of a vector is non-zero if a term occurs in the document.
# ::tokens ["The", "value", "of", "a", "vector", "is", "non", "-", "zero", "if", "a", "term", "occurs", "in", "the", "document", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "I", "I", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NN", "VBZ", "JJ", "JJ", "CD", "IN", "DT", "NN", "VBZ", "IN", "DT", "NN", "."]
# ::lemmas ["the", "value", "of", "a", "vector", "be", "non", "-", "zero", "if", "a", "term", "occur", "in", "the", "document", "."]
(h0 / have-condition-91
      :ARG1 (e0 / equal-01
            :ARG1 (t0 / thing
                  :ARG2-of (v0 / value-01
                        :ARG1 (v1 / vector)))
            :ARG2 (z0 / zero)
            :polarity - )
      :ARG2 (b0 / be-located-at-91
            :ARG1 (t1 / term)
            :ARG2 (d0 / document)))

# ::snt Several different ways of computing these values, also known as (term) weights, have been developed.
# ::tokens ["Several", "different", "ways", "of", "computing", "these", "values", ",", "also", "known", "as", "(", "term", ")", "weights", ",", "have", "been", "developed", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "JJ", "NNS", "IN", "VBG", "DT", "NNS", ",", "RB", "VBN", "IN", "-LRB-", "NN", "-RRB-", "NNS", ",", "VBP", "VBN", "VBN", "."]
# ::lemmas ["several", "different", "way", "of", "compute", "these", "value", ",", "also", "know", "as", "(", "term", ")", "weight", ",", "have", "be", "develop", "."]
(d0 / develop-02
      :ARG1 (w0 / way
            :quant (s0 / several)
            :ARG1-of (d1 / differ-02)
            :manner-of (c0 / copy-01
                  :ARG1 (v0 / value
                        :mod (k0 / know-02
                              :mod (a0 / also)
                              :ARG2 (w1 / weight))
                        :mod (t0 / this)))))

# ::snt Several different ways of computing these values, also known as (term) weights, have been developed.
# ::tokens ["Several", "different", "ways", "of", "computing", "these", "values", ",", "also", "known", "as", "(", "term", ")", "weights", ",", "have", "been", "developed", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "JJ", "NNS", "IN", "VBG", "DT", "NNS", ",", "RB", "VBN", "IN", "-LRB-", "NN", "-RRB-", "NNS", ",", "VBP", "VBN", "VBN", "."]
# ::lemmas ["several", "different", "way", "of", "compute", "these", "value", ",", "also", "know", "as", "(", "term", ")", "weight", ",", "have", "be", "develop", "."]
(d0 / develop-02
      :ARG1 (w0 / way
            :quant (s0 / several)
            :ARG1-of (d1 / differ-02)
            :manner-of (c0 / copy-01
                  :ARG1 (v0 / value
                        :mod (k0 / know-02
                              :mod (a0 / also)
                              :ARG2 (w1 / weight))
                        :mod (t0 / this)))))

# ::snt These subproblems are not, however, independent.
# ::tokens ["These", "subproblems", "are", "not", ",", "however", ",", "independent", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNS", "VBP", "RB", ",", "RB", ",", "JJ", "."]
# ::lemmas ["these", "subproblem", "be", "not", ",", "however", ",", "independent", "."]
(h0 / have-concession-91
      :ARG1 (d0 / depend-01
            :ARG0 (s0 / subproblem
                  :mod (t0 / this))
            :polarity - ))

# ::snt The key to Dynamic Programming is to find the structure of optimal solutions.
# ::tokens ["The", "key", "to", "Dynamic", "Programming", "is", "to", "find", "the", "structure", "of", "optimal", "solutions", "."]
# ::ner_tags ["O", "O", "O", "PERSON", "PERSON", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "I", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "NNP", "NNP", "VBZ", "TO", "VB", "DT", "NN", "IN", "JJ", "NNS", "."]
# ::lemmas ["the", "key", "to", "Dynamic", "Programming", "be", "to", "find", "the", "structure", "of", "optimal", "solution", "."]
(k0 / key-02
      :ARG1 (f0 / figure-out-05
            :manner (p0 / product
                  :name (n0 / name
                        :op1 "Dynamic" 
                        :op2 "Programming" )))
      :ARG2 (f1 / find-01
            :ARG1 (s0 / structure-01
                  :ARG1 (t0 / thing
                        :mod (o0 / optimal)
                        :ARG2-of (s1 / solve-01)))))

# ::snt Bayes Theorem is a mathematical formula used to calculate conditional probabilities.
# ::tokens ["Bayes", "Theorem", "is", "a", "mathematical", "formula", "used", "to", "calculate", "conditional", "probabilities", "."]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "DT", "JJ", "NN", "VBN", "TO", "VB", "JJ", "NNS", "."]
# ::lemmas ["Bayes", "Theorem", "be", "a", "mathematical", "formula", "use", "to", "calculate", "conditional", "probability", "."]
(f0 / formula
      :mod (u0 / use-01
            :ARG2 (c0 / calculate-01
                  :ARG0 t0
                  :ARG1 (p0 / probability
                        :mod (c1 / conditional))))
      :mod (m0 / mathematics)
      :domain (t0 / thing
            :name (n0 / name
                  :op1 "Bayes" 
                  :op2 "Theorem" )))

# ::snt Construct an optimal solution from computed values.
# ::tokens ["Construct", "an", "optimal", "solution", "from", "computed", "values", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "DT", "JJ", "NN", "IN", "VBN", "NNS", "."]
# ::lemmas ["construct", "an", "optimal", "solution", "from", "compute", "value", "."]
(c0 / construct-01
      :ARG1 (t0 / thing
            :mod (o0 / optimal)
            :ARG2-of (s0 / solve-01))
      :ARG2 (y0 / you)
      :ARG2 (v0 / value
            :ARG1-of (c1 / compile-01)))

# ::snt The theorem is often used when we have observations and wish to compute posterior probabilities.
# ::tokens ["The", "theorem", "is", "often", "used", "when", "we", "have", "observations", "and", "wish", "to", "compute", "posterior", "probabilities", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "RB", "VBN", "WRB", "PRP", "VBP", "NNS", "CC", "VBP", "TO", "VB", "NN", "NNS", "."]
# ::lemmas ["the", "theorem", "be", "often", "use", "when", "we", "have", "observation", "and", "wish", "to", "compute", "posterior", "probability", "."]
(u0 / use-01
      :ARG1 (t0 / theorem)
      :time (a0 / and
            :op1 (h0 / have-03
                  :ARG1 (o1 / observe-01)
                  :ARG0 (w1 / we))
            :op2 (w0 / wish-01
                  :ARG0 w1
                  :ARG1 (c0 / comprehend-01
                        :ARG0 w1
                        :ARG1 (p0 / probability
                              :ARG1-of (d0 / differ-02)))))
      :frequency (o0 / often))

# ::snt P(B) is the prior or marginal probability of B, and acts to normalise the probability.
# ::tokens ["P(B", ")", "is", "the", "prior", "or", "marginal", "probability", "of", "B", ",", "and", "acts", "to", "normalise", "the", "probability", "."]
# ::ner_tags ["ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "-RRB-", "VBZ", "DT", "JJ", "CC", "JJ", "NN", "IN", "NN", ",", "CC", "VBZ", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["P(B", ")", "be", "the", "prior", "or", "marginal", "probability", "of", "b", ",", "and", "act", "to", "normalise", "the", "probability", "."]
(a0 / and
      :op1 (p0 / probability
            :mod (p1 / prior)
            :domain (m0 / marginal-02)
            :domain (p2 / person
                  :mod (v0 / variable
                        :name (n1 / name
                              :op1 "B" ))))
      :op2 (a1 / act-01
            :ARG0 p2
            :ARG1 (n0 / normalize-01
                  :ARG0 p2
                  :ARG1 (p3 / probability))))

# ::snt In probability theory, Bayes' theorem relates the conditional and marginal probabilities of two random events.
# ::tokens ["In", "probability", "theory", ",", "Bayes", "'", "theorem", "relates", "the", "conditional", "and", "marginal", "probabilities", "of", "two", "random", "events", "."]
# ::ner_tags ["O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "NN", ",", "NNP", "POS", "NN", "VBZ", "DT", "JJ", "CC", "JJ", "NNS", "IN", "CD", "JJ", "NNS", "."]
# ::lemmas ["in", "probability", "theory", ",", "Bayes", "'", "theorem", "relate", "the", "conditional", "and", "marginal", "probability", "of", "two", "random", "event", "."]
(r0 / relate-01
      :ARG1 (a0 / and
            :op1 (p0 / probability
                  :ARG1-of (c0 / condition-01))
            :op2 (p1 / probability
                  :ARG1-of (m0 / marginal-02)))
      :ARG0 (t0 / theorem
            :poss (e0 / event
                  :quant (r1 / random)
                  :quant 2 )
            :poss (p2 / person
                  :name (n0 / name
                        :op1 "Bayes" )))
      :location (t1 / theory
            :mod (p3 / probability)))

# ::snt Programming, in this sense, means finding an acceptable plan of action.
# ::tokens ["Programming", ",", "in", "this", "sense", ",", "means", "finding", "an", "acceptable", "plan", "of", "action", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", ",", "IN", "DT", "NN", ",", "VBZ", "VBG", "DT", "JJ", "NN", "IN", "NN", "."]
# ::lemmas ["programming", ",", "in", "this", "sense", ",", "mean", "find", "an", "acceptable", "plan", "of", "action", "."]
(m0 / mean-01
      :ARG1 (d0 / design-01)
      :ARG2 (f0 / find-01
            :ARG1 (p0 / plan-01
                  :ARG1 (a0 / accept-01
                        :ARG1-of (p1 / possible-01))
                  :ARG1 (a1 / act-02)))
      :mod (s0 / sense
            :mod (t0 / this)))

# ::snt The vector space model has some limitations: 1.
# ::tokens ["The", "vector", "space", "model", "has", "some", "limitations", ":", "1", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBZ", "DT", "NNS", ":", "CD", "."]
# ::lemmas ["the", "vector", "space", "model", "have", "some", "limitation", ":", "1", "."]
(l0 / limit-01
      :ARG1 (m0 / model
            :mod (s0 / space
                  :mod (v0 / vector)))
      :li 1 )

# ::snt Using the vector space model for Information Retrieval models all pages and queries as high-dimensional sparse vectors.
# ::tokens ["Using", "the", "vector", "space", "model", "for", "Information", "Retrieval", "models", "all", "pages", "and", "queries", "as", "high", "-", "dimensional", "sparse", "vectors", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "ORG", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "I", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBG", "DT", "NN", "NN", "NN", "IN", "NNP", "NNP", "NNS", "DT", "NNS", "CC", "NNS", "IN", "JJ", "HYPH", "JJ", "NN", "NNS", "."]
# ::lemmas ["use", "the", "vector", "space", "model", "for", "Information", "Retrieval", "model", "all", "page", "and", "query", "as", "high", "-", "dimensional", "sparse", "vector", "."]
(m0 / model-01
      :ARG1 (a0 / and
            :op1 (p0 / page)
            :op2 (a1 / all)
            :op2 (q0 / query-01))
      :ARG0 (u0 / use-01
            :ARG1 (m1 / model
                  :mod (s1 / space
                        :mod (v1 / vector))
                  :purpose (n0 / name
                        :op1 "Information" 
                        :op2 "Retrieval" )))
      :ARG2 (v0 / vector
            :mod (d0 / dimensional
                  :ARG1-of (h0 / high-02))
            :mod (s0 / sparse)))

# ::snt One of the most famous schemes is tf-idf weighting.
# ::tokens ["One", "of", "the", "most", "famous", "schemes", "is", "tf", "-", "idf", "weighting", "."]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["CD", "IN", "DT", "RBS", "JJ", "NNS", "VBZ", "NNP", "HYPH", "NNP", "NN", "."]
# ::lemmas ["One", "of", "the", "most", "famous", "scheme", "be", "tf", "-", "idf", "weighting", "."]
(i0 / include-91
      :ARG1 (s0 / scheme
            :ARG1-of (h0 / have-degree-91
                  :ARG2 (f0 / fame-01)
                  :ARG3 (m0 / most)
                  :ARG5 "scheme" )
            :name (n0 / name
                  :op2 "weighting" ))
      :ARG2 (t0 / thing))

# ::snt Vector space representation results in the loss of the order which the terms are in the document.
# ::tokens ["Vector", "space", "representation", "results", "in", "the", "loss", "of", "the", "order", "which", "the", "terms", "are", "in", "the", "document", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "NN", "NN", "NNS", "IN", "DT", "NN", "IN", "DT", "NN", "WDT", "DT", "NNS", "VBP", "IN", "DT", "NN", "."]
# ::lemmas ["vector", "space", "representation", "result", "in", "the", "loss", "of", "the", "order", "which", "the", "term", "be", "in", "the", "document", "."]
(r0 / result-01
      :ARG1 (r1 / represent-01
            :ARG1 (s0 / space
                  :mod (v0 / vector)))
      :ARG2 (l0 / lose-02
            :ARG1 (o0 / order
                  :location-of (t0 / term
                        :location (d0 / document)))))

# ::snt Other ways of computing these values, or weights, have been developed.
# ::tokens ["Other", "ways", "of", "computing", "these", "values", ",", "or", "weights", ",", "have", "been", "developed", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNS", "IN", "VBG", "DT", "NNS", ",", "CC", "NNS", ",", "VBP", "VBN", "VBN", "."]
# ::lemmas ["other", "way", "of", "compute", "these", "value", ",", "or", "weight", ",", "have", "be", "develop", "."]
(d0 / develop-02
      :ARG1 (w0 / way
            :mod (o0 / other)
            :manner-of (c0 / comprise-01
                  :ARG1 (o1 / or
                        :op1 (v0 / value
                              :mod (t0 / this))
                        :op2 (w1 / weight)))))

# ::snt It is usually be used to compute posterior probabilities given observations.
# ::tokens ["It", "is", "usually", "be", "used", "to", "compute", "posterior", "probabilities", "given", "observations", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VB", "VBN", "TO", "VB", "NN", "NNS", "VBN", "NNS", "."]
# ::lemmas ["it", "be", "usually", "be", "use", "to", "compute", "posterior", "probability", "give", "observation", "."]
(u0 / use-01
      :ARG1 (i0 / it)
      :mod (u1 / usual)
      :ARG2 (c0 / compile-01
            :ARG0 i0
            :ARG1 (p0 / probability
                  :mod (d0 / differ-02))
            :ARG1-of (o0 / observe-01
                  :ARG1-of (g0 / give-01))))

# ::snt In computer science; dynamic programming is a way of solving problems consist of overlapping subproblems and optimal substructure.
# ::tokens ["In", "computer", "science", ";", "dynamic", "programming", "is", "a", "way", "of", "solving", "problems", "consist", "of", "overlapping", "subproblems", "and", "optimal", "substructure", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "NN", ",", "JJ", "NN", "VBZ", "DT", "NN", "IN", "VBG", "NNS", "VBP", "IN", "VBG", "NNS", "CC", "JJ", "NN", "."]
# ::lemmas ["in", "computer", "science", ";", "dynamic", "programming", "be", "a", "way", "of", "solve", "problem", "consist", "of", "overlap", "subproblem", "and", "optimal", "substructure", "."]
(w0 / way
      :domain (s0 / science
            :mod (c0 / computer))
      :domain (p0 / program-01
            :mod (d0 / dynamic))
      :manner-of (s1 / solve-01
            :ARG1 (a0 / and
                  :op1 (s2 / subproblem
                        :ARG1-of (c1 / coverage-06))
                  :op2 (s3 / substructure
                        :mod (o0 / optimal)))))

# ::snt The most popular is tf-idf weighting.
# ::tokens ["The", "most", "popular", "is", "tf", "-", "idf", "weighting", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "RBS", "JJ", "VBZ", "NNP", "HYPH", "NNP", "NN", "."]
# ::lemmas ["the", "most", "popular", "be", "tf", "-", "idf", "weighting", "."]
(h0 / have-degree-91
      :ARG1 (h1 / high-02
            :ARG1 (t0 / thing
                  :ARG1-of (h2 / have-degree-91
                        :ARG3 (m1 / most))
                  :name (n0 / name
                        :op1 "tf" 
                        :op2 "weighting" ))
            :ARG1 (t1 / thing
                  :name (n1 / name
                        :op1 "tf" )))
      :ARG2 (p0 / popular-02
            :ARG1 h1)
      :ARG3 (m0 / most))

# ::snt Construct an optimal solution from computed values.
# ::tokens ["Construct", "an", "optimal", "solution", "from", "computed", "values", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "DT", "JJ", "NN", "IN", "VBN", "NNS", "."]
# ::lemmas ["construct", "an", "optimal", "solution", "from", "compute", "value", "."]
(c0 / construct-01
      :ARG1 (t0 / thing
            :mod (o0 / optimal)
            :ARG2-of (s0 / solve-01))
      :ARG2 (y0 / you)
      :ARG2 (v0 / value
            :ARG1-of (c1 / compile-01)))

# ::snt This is a much quicker method than other more naive methods.
# ::tokens ["This", "is", "a", "much", "quicker", "method", "than", "other", "more", "naive", "methods", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "DT", "RB", "JJR", "NN", "IN", "JJ", "RBR", "JJ", "NNS", "."]
# ::lemmas ["this", "be", "a", "much", "quick", "method", "than", "other", "more", "naive", "method", "."]
(h0 / have-degree-91
      :ARG1 (m0 / method
            :mod (t0 / this))
      :ARG2 (q0 / quick-02
            :ARG1 m0)
      :ARG3 (m1 / more
            :quant (m3 / much))
      :ARG4 (m2 / method
            :mod (o0 / other)
            :ARG1-of (h1 / have-degree-91
                  :ARG2 (n0 / naive)
                  :ARG3 (m4 / more
                        :quant (m5 / much)))))

# ::snt Inheritance in object oriented programming is a way to form new classes using classes that have already been defined.
# ::tokens ["Inheritance", "in", "object", "oriented", "programming", "is", "a", "way", "to", "form", "new", "classes", "using", "classes", "that", "have", "already", "been", "defined", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "IN", "NN", "VBN", "NN", "VBZ", "DT", "NN", "TO", "VB", "JJ", "NNS", "VBG", "NNS", "WDT", "VBP", "RB", "VBN", "VBN", "."]
# ::lemmas ["inheritance", "in", "object", "orient", "programming", "be", "a", "way", "to", "form", "new", "class", "use", "class", "that", "have", "already", "be", "define", "."]
(w0 / way
      :domain (f0 / form-01
            :ARG1 (c0 / class
                  :ARG1-of (n0 / new-01))
            :manner (u0 / use-01
                  :ARG1 (c1 / class
                        :ARG1-of (d0 / define-01
                              :time (a0 / already)))))
      :domain (i0 / inherit-01
            :ARG1 (p0 / program-01
                  :ARG2 (o0 / orient-01
                        :ARG2 (o1 / object)))))

# ::snt However, the vector space model has limitations.
# ::tokens ["However", ",", "the", "vector", "space", "model", "has", "limitations", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", ",", "DT", "NN", "NN", "NN", "VBZ", "NNS", "."]
# ::lemmas ["however", ",", "the", "vector", "space", "model", "have", "limitation", "."]
(c0 / contrast-01
      :ARG2 (l0 / limit-01
            :ARG1 (m0 / model
                  :mod (s0 / space
                        :mod (v0 / vector)))))

# ::snt Programming, in this sense, means finding an acceptable plan of action.
# ::tokens ["Programming", ",", "in", "this", "sense", ",", "means", "finding", "an", "acceptable", "plan", "of", "action", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", ",", "IN", "DT", "NN", ",", "VBZ", "VBG", "DT", "JJ", "NN", "IN", "NN", "."]
# ::lemmas ["programming", ",", "in", "this", "sense", ",", "mean", "find", "an", "acceptable", "plan", "of", "action", "."]
(m0 / mean-01
      :ARG1 (d0 / design-01)
      :ARG2 (f0 / find-01
            :ARG1 (p0 / plan-01
                  :ARG1 (a0 / accept-01
                        :ARG1-of (p1 / possible-01))
                  :ARG1 (a1 / act-02)))
      :mod (s0 / sense
            :mod (t0 / this)))

# ::snt Dynamic Programming solves problems by combining the solutions of subproblems.
# ::tokens ["Dynamic", "Programming", "solves", "problems", "by", "combining", "the", "solutions", "of", "subproblems", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNP", "VBZ", "NNS", "IN", "VBG", "DT", "NNS", "IN", "NNS", "."]
# ::lemmas ["dynamic", "Programming", "solve", "problem", "by", "combine", "the", "solution", "of", "subproblem", "."]
(s0 / solve-01
      :ARG1 (p0 / problem)
      :ARG0 (p1 / program-01
            :mod (d0 / dynamic))
      :manner (c0 / combine-01
            :ARG0 p1
            :ARG1 (t0 / thing
                  :ARG2-of (s1 / solve-01
                        :ARG1 (s2 / subproblem)))))

# ::snt Subclasses are said to extend or specialise their superclasses.
# ::tokens ["Subclasses", "are", "said", "to", "extend", "or", "specialise", "their", "superclasses", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "VBP", "VBN", "TO", "VB", "CC", "VB", "PRP$", "NNS", "."]
# ::lemmas ["subclass", "be", "say", "to", "extend", "or", "specialise", "their", "superclass", "."]
(s0 / say-01
      :ARG1 (o0 / or
            :op1 (e0 / extend-01
                  :ARG1 (s2 / superclass)
                  :ARG0 (s3 / subclass))
            :op2 (s1 / specialize-01
                  :ARG1 s2
                  :ARG0 s3)))

# ::snt It is often used to compute posterior probabilities given observations.
# ::tokens ["It", "is", "often", "used", "to", "compute", "posterior", "probabilities", "given", "observations", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VBN", "TO", "VB", "NN", "NNS", "VBN", "NNS", "."]
# ::lemmas ["it", "be", "often", "use", "to", "compute", "posterior", "probability", "give", "observation", "."]
(u0 / use-01
      :ARG1 (c0 / compile-01
            :ARG0 i0
            :ARG1 (p0 / probability
                  :mod (d0 / differ-02))
            :ARG1-of (o1 / observe-01
                  :ARG1-of (g0 / give-01)))
      :ARG1 (i0 / it)
      :frequency (o0 / often))

# ::snt Every dimension is precisely related to a separate term.
# ::tokens ["Every", "dimension", "is", "precisely", "related", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "RB", "VBN", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["every", "dimension", "be", "precisely", "relate", "to", "a", "separate", "term", "."]
(r0 / relate-01
      :ARG1 (d0 / dimension
            :mod (e0 / every))
      :ARG2 (t0 / term
            :ARG1-of (s0 / separate-02))
      :manner (p0 / precise))

# ::snt Construct an optimal solution from computed values.
# ::tokens ["Construct", "an", "optimal", "solution", "from", "computed", "values", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "DT", "JJ", "NN", "IN", "VBN", "NNS", "."]
# ::lemmas ["construct", "an", "optimal", "solution", "from", "compute", "value", "."]
(c0 / construct-01
      :ARG1 (t0 / thing
            :mod (o0 / optimal)
            :ARG2-of (s0 / solve-01))
      :ARG2 (y0 / you)
      :ARG2 (v0 / value
            :ARG1-of (c1 / compile-01)))

# ::snt Every dimension is precisely related to a separate term.
# ::tokens ["Every", "dimension", "is", "precisely", "related", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "RB", "VBN", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["every", "dimension", "be", "precisely", "relate", "to", "a", "separate", "term", "."]
(r0 / relate-01
      :ARG1 (d0 / dimension
            :mod (e0 / every))
      :ARG2 (t0 / term
            :ARG1-of (s0 / separate-02))
      :manner (p0 / precise))

# ::snt The most popular is tf-idf weighting.
# ::tokens ["The", "most", "popular", "is", "tf", "-", "idf", "weighting", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "RBS", "JJ", "VBZ", "NNP", "HYPH", "NNP", "NN", "."]
# ::lemmas ["the", "most", "popular", "be", "tf", "-", "idf", "weighting", "."]
(h0 / have-degree-91
      :ARG1 (h1 / high-02
            :ARG1 (t0 / thing
                  :ARG1-of (h2 / have-degree-91
                        :ARG3 (m1 / most))
                  :name (n0 / name
                        :op1 "tf" 
                        :op2 "weighting" ))
            :ARG1 (t1 / thing
                  :name (n1 / name
                        :op1 "tf" )))
      :ARG2 (p0 / popular-02
            :ARG1 h1)
      :ARG3 (m0 / most))

# ::snt The theorem is often used when we have observations and wish to compute posterior probabilities.
# ::tokens ["The", "theorem", "is", "often", "used", "when", "we", "have", "observations", "and", "wish", "to", "compute", "posterior", "probabilities", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "RB", "VBN", "WRB", "PRP", "VBP", "NNS", "CC", "VBP", "TO", "VB", "NN", "NNS", "."]
# ::lemmas ["the", "theorem", "be", "often", "use", "when", "we", "have", "observation", "and", "wish", "to", "compute", "posterior", "probability", "."]
(u0 / use-01
      :ARG1 (t0 / theorem)
      :time (a0 / and
            :op1 (h0 / have-03
                  :ARG1 (o1 / observe-01)
                  :ARG0 (w1 / we))
            :op2 (w0 / wish-01
                  :ARG0 w1
                  :ARG1 (c0 / comprehend-01
                        :ARG0 w1
                        :ARG1 (p0 / probability
                              :ARG1-of (d0 / differ-02)))))
      :frequency (o0 / often))

# ::snt Overlapping subproblems means that the same subproblems are used to solve many different larger problems.
# ::tokens ["Overlapping", "subproblems", "means", "that", "the", "same", "subproblems", "are", "used", "to", "solve", "many", "different", "larger", "problems", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBG", "NNS", "VBZ", "IN", "DT", "JJ", "NNS", "VBP", "VBN", "TO", "VB", "JJ", "JJ", "JJR", "NNS", "."]
# ::lemmas ["overlap", "subproblem", "mean", "that", "the", "same", "subproblem", "be", "use", "to", "solve", "many", "different", "large", "problem", "."]
(m0 / mean-01
      :ARG1 (o0 / overlap)
      :ARG2 (u0 / use-01
            :ARG1 (s0 / subproblem
                  :ARG1-of (s2 / same-01))
            :ARG2 (s1 / solve-01
                  :ARG0 s0
                  :ARG1 (p0 / problem
                        :ARG1-of (h0 / have-degree-91
                              :ARG3 (l0 / large)
                              :ARG3 (m2 / more))
                        :ARG1-of (d0 / differ-02)
                        :quant (m1 / many)))))

# ::snt The differing application has a direct influence on what the definition of the term means.
# ::tokens ["The", "differing", "application", "has", "a", "direct", "influence", "on", "what", "the", "definition", "of", "the", "term", "means", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBG", "NN", "VBZ", "DT", "JJ", "NN", "IN", "WP", "DT", "NN", "IN", "DT", "NN", "VBZ", "."]
# ::lemmas ["the", "differ", "application", "have", "a", "direct", "influence", "on", "what", "the", "definition", "of", "the", "term", "mean", "."]
(i0 / influence-01
      :ARG1 (t0 / thing
            :ARG2-of (m0 / mean-01
                  :ARG1 (d2 / define-01
                        :ARG1 (t1 / term))))
      :ARG0 (a0 / apply-02
            :ARG1-of (d1 / differ-01))
      :ARG1-of (d0 / direct-02))

# ::snt The method takes much less time than naive methods.
# ::tokens ["The", "method", "takes", "much", "less", "time", "than", "naive", "methods", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "RB", "JJR", "NN", "IN", "JJ", "NNS", "."]
# ::lemmas ["the", "method", "take", "much", "less", "time", "than", "naive", "method", "."]
(t0 / take-10
      :ARG1 (t1 / time
            :ARG1-of (h0 / have-quant-91
                  :ARG3 (l0 / less
                        :quant (m2 / much))
                  :ARG4 (m1 / method
                        :mod (n0 / naive))))
      :ARG0 (m0 / method))

# ::snt In probability theory, Bayes' theorem relates the conditional and marginal probabilities of two random events.
# ::tokens ["In", "probability", "theory", ",", "Bayes", "'", "theorem", "relates", "the", "conditional", "and", "marginal", "probabilities", "of", "two", "random", "events", "."]
# ::ner_tags ["O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "NN", ",", "NNP", "POS", "NN", "VBZ", "DT", "JJ", "CC", "JJ", "NNS", "IN", "CD", "JJ", "NNS", "."]
# ::lemmas ["in", "probability", "theory", ",", "Bayes", "'", "theorem", "relate", "the", "conditional", "and", "marginal", "probability", "of", "two", "random", "event", "."]
(r0 / relate-01
      :ARG1 (a0 / and
            :op1 (p0 / probability
                  :ARG1-of (c0 / condition-01))
            :op2 (p1 / probability
                  :ARG1-of (m0 / marginal-02)))
      :ARG0 (t0 / theorem
            :poss (e0 / event
                  :quant (r1 / random)
                  :quant 2 )
            :poss (p2 / person
                  :name (n0 / name
                        :op1 "Bayes" )))
      :location (t1 / theory
            :mod (p3 / probability)))

# ::snt Bayes’ theorem was names after Rev Thomas Bayes and is a method used in probability theory.
# ::tokens ["Bayes", "\u2019", "theorem", "was", "names", "after", "Rev", "Thomas", "Bayes", "and", "is", "a", "method", "used", "in", "probability", "theory", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "PERSON", "PERSON", "PERSON", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "I", "I", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NN", "VBD", "NNS", "IN", "NNP", "NNP", "NNP", "CC", "VBZ", "DT", "NN", "VBN", "IN", "NN", "NN", "."]
# ::lemmas ["Bayes", "\u2019", "theorem", "be", "name", "after", "Rev", "Thomas", "Bayes", "and", "be", "a", "method", "use", "in", "probability", "theory", "."]
(a0 / and
      :op1 (n0 / name-02
            :ARG1 (t0 / theorem
                  :name (n1 / name
                        :op1 "Bayes" ))
            :ARG2 (p0 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG2 (r0 / reverend))
                  :name (n2 / name
                        :op1 "Thomas" 
                        :op2 "Bayes" )))
      :op2 (m0 / method
            :ARG1-of (u0 / use-01
                  :ARG2 (t1 / theory
                        :mod (p1 / probability)))))

# ::snt "It is ""previous"" in the sense that it does not take into account any information about B."
# ::tokens ["\"", "It", "is", "\"", "\"", "previous", "\"", "\"", "in", "the", "sense", "that", "it", "does", "not", "take", "into", "account", "any", "information", "about", "B.", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "PRP", "VBZ", "``", "``", "JJ", "''", "''", "IN", "DT", "NN", "IN", "PRP", "VBZ", "RB", "VB", "IN", "NN", "DT", "NN", "IN", "NNP", "''"]
# ::lemmas ["\"", "it", "be", "\"", "\"", "previous", "\"", "\"", "in", "the", "sense", "that", "it", "do", "not", "take", "into", "account", "any", "information", "about", "B.", "\""]
(p0 / previous
      :ARG1-of (m0 / mean-01
            :ARG2 (t0 / take-into-account-04
                  :ARG0 i0
                  :ARG1 (i1 / information
                        :topic (a0 / any)
                        :topic (t1 / thing
                              :mod (v0 / variable
                                    :name (n0 / name
                                          :op1 "B" ))))
                  :polarity - ))
      :domain (i0 / it))

# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
# ::tokens ["When", "a", "document", "is", "represented", "as", "a", "vector", ",", "each", "dimension", "corresponds", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", ",", "DT", "NN", "VBZ", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["when", "a", "document", "be", "represent", "as", "a", "vector", ",", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(c0 / correspond-02
      :ARG1 (t0 / term
            :ARG1-of (s0 / separate-02))
      :ARG1 (d0 / dimension
            :mod (e0 / each))
      :time (r0 / represent-01
            :ARG1 (d1 / document)
            :ARG2 (v0 / vector)))

# ::snt The theorem is often used when we have observations and wish to compute posterior probabilities.
# ::tokens ["The", "theorem", "is", "often", "used", "when", "we", "have", "observations", "and", "wish", "to", "compute", "posterior", "probabilities", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "RB", "VBN", "WRB", "PRP", "VBP", "NNS", "CC", "VBP", "TO", "VB", "NN", "NNS", "."]
# ::lemmas ["the", "theorem", "be", "often", "use", "when", "we", "have", "observation", "and", "wish", "to", "compute", "posterior", "probability", "."]
(u0 / use-01
      :ARG1 (t0 / theorem)
      :time (a0 / and
            :op1 (h0 / have-03
                  :ARG1 (o1 / observe-01)
                  :ARG0 (w1 / we))
            :op2 (w0 / wish-01
                  :ARG0 w1
                  :ARG1 (c0 / comprehend-01
                        :ARG0 w1
                        :ARG1 (p0 / probability
                              :ARG1-of (d0 / differ-02)))))
      :frequency (o0 / often))

# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
# ::tokens ["When", "a", "document", "is", "represented", "as", "a", "vector", ",", "each", "dimension", "corresponds", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", ",", "DT", "NN", "VBZ", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["when", "a", "document", "be", "represent", "as", "a", "vector", ",", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(c0 / correspond-02
      :ARG1 (t0 / term
            :ARG1-of (s0 / separate-02))
      :ARG1 (d0 / dimension
            :mod (e0 / each))
      :time (r0 / represent-01
            :ARG1 (d1 / document)
            :ARG2 (v0 / vector)))

# ::snt In computer science; dynamic programming is a way of solving problems consist of overlapping subproblems and optimal substructure.
# ::tokens ["In", "computer", "science", ";", "dynamic", "programming", "is", "a", "way", "of", "solving", "problems", "consist", "of", "overlapping", "subproblems", "and", "optimal", "substructure", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "NN", ",", "JJ", "NN", "VBZ", "DT", "NN", "IN", "VBG", "NNS", "VBP", "IN", "VBG", "NNS", "CC", "JJ", "NN", "."]
# ::lemmas ["in", "computer", "science", ";", "dynamic", "programming", "be", "a", "way", "of", "solve", "problem", "consist", "of", "overlap", "subproblem", "and", "optimal", "substructure", "."]
(w0 / way
      :domain (s0 / science
            :mod (c0 / computer))
      :domain (p0 / program-01
            :mod (d0 / dynamic))
      :manner-of (s1 / solve-01
            :ARG1 (a0 / and
                  :op1 (s2 / subproblem
                        :ARG1-of (c1 / coverage-06))
                  :op2 (s3 / substructure
                        :mod (o0 / optimal)))))

# ::snt For instance, a finalized schedule of events at an exhibition is sometimes called a program.
# ::tokens ["For", "instance", ",", "a", "finalized", "schedule", "of", "events", "at", "an", "exhibition", "is", "sometimes", "called", "a", "program", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", ",", "DT", "JJ", "NN", "IN", "NNS", "IN", "DT", "NN", "VBZ", "RB", "VBN", "DT", "NN", "."]
# ::lemmas ["for", "instance", ",", "a", "finalized", "schedule", "of", "event", "at", "an", "exhibition", "be", "sometimes", "call", "a", "program", "."]
(e0 / exemplify-01
      :ARG0 (c0 / call-01
            :ARG1 (p0 / program)
            :frequency (s0 / sometimes)
            :ARG1 (s1 / schedule-01
                  :ARG1 (e1 / event
                        :location (e2 / exhibit-01))
                  :ARG1-of (f0 / finalize-01))))

# ::snt Since the PageRank is the most important algorithms which is used in the Google engine.
# ::tokens ["Since", "the", "PageRank", "is", "the", "most", "important", "algorithms", "which", "is", "used", "in", "the", "Google", "engine", "."]
# ::ner_tags ["O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["IN", "DT", "NNP", "VBZ", "DT", "RBS", "JJ", "NNS", "WDT", "VBZ", "VBN", "IN", "DT", "NNP", "NN", "."]
# ::lemmas ["since", "the", "PageRank", "be", "the", "most", "important", "algorithm", "which", "be", "use", "in", "the", "Google", "engine", "."]
(c0 / cause-01
      :ARG0 (a0 / algorithm
            :ARG1-of (u0 / use-01
                  :ARG2 (e0 / engine
                        :mod (c1 / company
                              :name (n1 / name
                                    :op1 "Google" ))))
            :ARG1-of (h0 / have-degree-91
                  :ARG2 i0
                  :ARG3 (m0 / most))
            :ARG1-of (i0 / important-01)
            :domain (p0 / publication
                  :name (n0 / name
                        :op1 "PageRank" ))))

# ::snt In the vector space model a document is represented as a vector.
# ::tokens ["In", "the", "vector", "space", "model", "a", "document", "is", "represented", "as", "a", "vector", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "NN", "NN", "NN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["in", "the", "vector", "space", "model", "a", "document", "be", "represent", "as", "a", "vector", "."]
(r0 / represent-01
      :ARG1 (d0 / document)
      :ARG2 (v0 / vector)
      :location (m0 / model-01
            :ARG1 (s0 / space
                  :mod (v1 / vector))))

# ::snt So the same rule applies with keywords and indeed longer phrases.
# ::tokens ["So", "the", "same", "rule", "applies", "with", "keywords", "and", "indeed", "longer", "phrases", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "DT", "JJ", "NN", "VBZ", "IN", "NNS", "CC", "RB", "JJR", "NNS", "."]
# ::lemmas ["so", "the", "same", "rule", "apply", "with", "keyword", "and", "indeed", "long", "phrase", "."]
(c0 / cause-01
      :ARG1 (a0 / apply-02
            :ARG1 (r0 / rule-01
                  :ARG1-of (s0 / same-01))
            :ARG2 (a1 / and
                  :op1 (k0 / keyword
                        :mod (i0 / indeed))
                  :op2 (p0 / phrase
                        :ARG1-of (h0 / have-degree-91
                              :ARG2 l0
                              :ARG3 (m0 / more))
                        :ARG1-of (l0 / long-03)))))

# ::snt Inheritance is a basic concept in object oriented programming.
# ::tokens ["Inheritance", "is", "a", "basic", "concept", "in", "object", "oriented", "programming", "."]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "DT", "JJ", "NN", "IN", "NN", "VBN", "NN", "."]
# ::lemmas ["Inheritance", "be", "a", "basic", "concept", "in", "object", "orient", "programming", "."]
(c0 / concept
      :mod (b0 / basic)
      :domain (m0 / medical-condition
            :name (n0 / name
                  :op1 "Inheritance" ))
      :topic (p0 / program-01
            :ARG1-of (o0 / orient-01
                  :ARG2 (o1 / object))))

# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
# ::tokens ["A", "document", "is", "represented", "as", "a", "vector", ",", "with", "each", "dimension", "corresponding", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", ",", "IN", "DT", "NN", "VBG", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["a", "document", "be", "represent", "as", "a", "vector", ",", "with", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(r0 / represent-01
      :ARG1 (d0 / document)
      :ARG2 (v0 / vector)
      :ARG0-of (a0 / accompany-01
            :ARG1 (c0 / correspond-02
                  :ARG1 (d1 / dimension
                        :mod (e0 / each))
                  :ARG2 (t0 / term
                        :ARG1-of (s0 / separate-02)))))

# ::snt In probability theory, Bayes' theorem relates the conditional and marginal probabilities of two random events.
# ::tokens ["In", "probability", "theory", ",", "Bayes", "'", "theorem", "relates", "the", "conditional", "and", "marginal", "probabilities", "of", "two", "random", "events", "."]
# ::ner_tags ["O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "NN", ",", "NNP", "POS", "NN", "VBZ", "DT", "JJ", "CC", "JJ", "NNS", "IN", "CD", "JJ", "NNS", "."]
# ::lemmas ["in", "probability", "theory", ",", "Bayes", "'", "theorem", "relate", "the", "conditional", "and", "marginal", "probability", "of", "two", "random", "event", "."]
(r0 / relate-01
      :ARG1 (a0 / and
            :op1 (p0 / probability
                  :ARG1-of (c0 / condition-01))
            :op2 (p1 / probability
                  :ARG1-of (m0 / marginal-02)))
      :ARG0 (t0 / theorem
            :poss (e0 / event
                  :quant (r1 / random)
                  :quant 2 )
            :poss (p2 / person
                  :name (n0 / name
                        :op1 "Bayes" )))
      :location (t1 / theory
            :mod (p3 / probability)))

# ::snt A website’s page rank, is how ‘important’ it is on the web.
# ::tokens ["A", "website", "\u2019s", "page", "rank", ",", "is", "how", "\u2018", "important", "\u2019", "it", "is", "on", "the", "web", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "POS", "NN", "NN", ",", "VBZ", "WRB", "``", "JJ", "''", "PRP", "VBZ", "IN", "DT", "NN", "."]
# ::lemmas ["a", "website", "\u2019s", "page", "rank", ",", "be", "how", "'", "important", "'", "it", "be", "on", "the", "web", "."]
(i0 / important-01
      :ARG1 (t0 / thing
            :ARG3-of (r0 / rank-01
                  :ARG1 (p0 / page)))
      :location (w0 / website)
      :location (w1 / web))

# ::snt If the term doesn’t occur within the document, the value in the vector is zero.
# ::tokens ["If", "the", "term", "does", "n\u2019t", "occur", "within", "the", "document", ",", "the", "value", "in", "the", "vector", "is", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["IN", "DT", "NN", "VBZ", "RB", "VB", "IN", "DT", "NN", ",", "DT", "NN", "IN", "DT", "NN", "VBZ", "CD", "."]
# ::lemmas ["if", "the", "term", "do", "not", "occur", "within", "the", "document", ",", "the", "value", "in", "the", "vector", "be", "zero", "."]
(h0 / have-condition-91
      :ARG1 (v0 / value
            :quant (v1 / vector)
            :quant (z0 / zero))
      :ARG2 (b0 / be-located-at-91
            :ARG1 (t0 / term)
            :ARG2 - 
            :ARG2 (w0 / within
                  :op1 (d0 / document))))

# ::snt They also inherit the attributes and methods of its superclass.
# ::tokens ["They", "also", "inherit", "the", "attributes", "and", "methods", "of", "its", "superclass", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBP", "DT", "NNS", "CC", "NNS", "IN", "PRP$", "NN", "."]
# ::lemmas ["they", "also", "inherit", "the", "attribute", "and", "method", "of", "its", "superclass", "."]
(i0 / inherit-01
      :ARG1 (a0 / and
            :op1 (a2 / attribute-01)
            :op2 (m0 / method
                  :poss t0)
            :poss (s0 / superclass
                  :poss t0))
      :ARG0 (t0 / they)
      :mod (a1 / also))

# ::snt Bayes’ theorem was names after Rev Thomas Bayes and is a method used in probability theory.
# ::tokens ["Bayes", "\u2019", "theorem", "was", "names", "after", "Rev", "Thomas", "Bayes", "and", "is", "a", "method", "used", "in", "probability", "theory", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "PERSON", "PERSON", "PERSON", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "I", "I", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NN", "VBD", "NNS", "IN", "NNP", "NNP", "NNP", "CC", "VBZ", "DT", "NN", "VBN", "IN", "NN", "NN", "."]
# ::lemmas ["Bayes", "\u2019", "theorem", "be", "name", "after", "Rev", "Thomas", "Bayes", "and", "be", "a", "method", "use", "in", "probability", "theory", "."]
(a0 / and
      :op1 (n0 / name-02
            :ARG1 (t0 / theorem
                  :name (n1 / name
                        :op1 "Bayes" ))
            :ARG2 (p0 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG2 (r0 / reverend))
                  :name (n2 / name
                        :op1 "Thomas" 
                        :op2 "Bayes" )))
      :op2 (m0 / method
            :ARG1-of (u0 / use-01
                  :ARG2 (t1 / theory
                        :mod (p1 / probability)))))

# ::snt It is also called the posterior probability because it is derived from or depends upon the specified value of B.
# ::tokens ["It", "is", "also", "called", "the", "posterior", "probability", "because", "it", "is", "derived", "from", "or", "depends", "upon", "the", "specified", "value", "of", "B."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VBN", "DT", "JJ", "NN", "IN", "PRP", "VBZ", "VBN", "IN", "CC", "VBZ", "IN", "DT", "VBN", "NN", "IN", "NNP"]
# ::lemmas ["it", "be", "also", "call", "the", "posterior", "probability", "because", "it", "be", "derive", "from", "or", "depend", "upon", "the", "specify", "value", "of", "B."]
(c0 / call-01
      :ARG1 (i0 / it
            :ARG1-of (d0 / derive-01
                  :ARG2 (v0 / value
                        :ARG1-of (s0 / specify-01)))
            :ARG0-of (d1 / depend-01
                  :ARG1 v0))
      :mod (a0 / also)
      :ARG1-of (c1 / cause-01
            :ARG0 (o0 / or
                  :op2 d1))
      :ARG2 (p0 / posterior))

# ::snt One of the best known schemes is tf-idf weighting, proposed by Salton, Wong and Yang.
# ::tokens ["One", "of", "the", "best", "known", "schemes", "is", "tf", "-", "idf", "weighting", ",", "proposed", "by", "Salton", ",", "Wong", "and", "Yang", "."]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "PERSON", "O", "PERSON", "O", "PERSON", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "B", "O", "B", "O"]
# ::pos_tags ["CD", "IN", "DT", "RBS", "JJ", "NNS", "VBZ", "NNP", "HYPH", "NNP", "NN", ",", "VBN", "IN", "NNP", ",", "NNP", "CC", "NNP", "."]
# ::lemmas ["One", "of", "the", "well", "known", "scheme", "be", "tf", "-", "idf", "weighting", ",", "propose", "by", "Salton", ",", "Wong", "and", "Yang", "."]
(t0 / thing
      :ARG1-of (p0 / propose-01
            :ARG0 (a0 / and
                  :op1 (p1 / person
                        :name (n2 / name
                              :op1 "Salton" ))
                  :op2 (p2 / person
                        :name (n3 / name
                              :op1 "Wong" ))
                  :op3 (p3 / person)))
      :ARG1-of (i0 / include-91
            :ARG2 (s1 / scheme
                  :ARG1-of (g0 / good-02)
                  :ARG1-of (h0 / have-degree-91
                        :ARG2 g0
                        :ARG3 (m0 / most))
                  :name (n1 / name
                        :op1 "Salton" )))
      :domain (s0 / scheme
            :name (n0 / name
                  :op1 "tf" 
                  :op2 "weighting" )))

# ::snt The vector space model has the following limitations: 1.
# ::tokens ["The", "vector", "space", "model", "has", "the", "following", "limitations", ":", "1", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBZ", "DT", "VBG", "NNS", ":", "CD", "."]
# ::lemmas ["the", "vector", "space", "model", "have", "the", "follow", "limitation", ":", "1", "."]
(l0 / limit-01
      :ARG1 (m0 / model
            :mod (s0 / space
                  :mod (v0 / vector)))
      :ARG1-of (f0 / follow-01)
      :li 1 )

# ::snt It is intended to help reuse existing code with little or no modification.
# ::tokens ["It", "is", "intended", "to", "help", "reuse", "existing", "code", "with", "little", "or", "no", "modification", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "VBN", "TO", "VB", "VB", "VBG", "NN", "IN", "JJ", "CC", "DT", "NN", "."]
# ::lemmas ["it", "be", "intend", "to", "help", "reuse", "exist", "code", "with", "little", "or", "no", "modification", "."]
(i0 / intend-01
      :ARG1 (h0 / help-01
            :ARG1 (r0 / repair-01
                  :ARG1 (c0 / code
                        :ARG1-of (e0 / exist-01))
                  :instrument (o0 / or
                        :op1 (m0 / modify-01
                              :degree (l0 / little))
                        :op2 (m1 / modify-01
                              :polarity - )))))

# ::snt The vector is then constucted of the frequency of eacher word (dimension).
# ::tokens ["The", "vector", "is", "then", "constucted", "of", "the", "frequency", "of", "eacher", "word", "(", "dimension", ")", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "RB", "VBN", "IN", "DT", "NN", "IN", "NN", "NN", "-LRB-", "NN", "-RRB-", "."]
# ::lemmas ["the", "vector", "be", "then", "constucte", "of", "the", "frequency", "of", "eacher", "word", "(", "dimension", ")", "."]
(i0 / incinerate-01
      :ARG1 (t0 / thing
            :frequency-of (r0 / rate-entity-91
                  :ARG1 (w0 / word
                        :mod (e0 / eacher))))
      :time (v0 / vector)
      :time (t1 / then))

# ::snt The PageRank depends on the PageRank rating and number of all pages that have links to it.
# ::tokens ["The", "PageRank", "depends", "on", "the", "PageRank", "rating", "and", "number", "of", "all", "pages", "that", "have", "links", "to", "it", "."]
# ::ner_tags ["O", "ORG", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "B", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNP", "VBZ", "IN", "DT", "NNP", "NN", "CC", "NN", "IN", "DT", "NNS", "WDT", "VBP", "NNS", "IN", "PRP", "."]
# ::lemmas ["the", "PageRank", "depend", "on", "the", "PageRank", "rating", "and", "number", "of", "all", "page", "that", "have", "link", "to", "it", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (r0 / rate-01)
            :op2 (n0 / number
                  :quant-of (p1 / page
                        :mod (a1 / all))))
      :ARG0 (p0 / publication
            :ARG1-of (l0 / link-01
                  :ARG1 p1)
            :name (n1 / name
                  :op1 "PageRank" )))

# ::snt Single words, keywords and occasionally longer phrases are used for terms.
# ::tokens ["Single", "words", ",", "keywords", "and", "occasionally", "longer", "phrases", "are", "used", "for", "terms", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNS", ",", "NNS", "CC", "RB", "JJR", "NNS", "VBP", "VBN", "IN", "NNS", "."]
# ::lemmas ["single", "word", ",", "keyword", "and", "occasionally", "long", "phrase", "be", "use", "for", "term", "."]
(u0 / use-01
      :ARG1 (a0 / and
            :op1 (w0 / word
                  :ARG1-of (s0 / single-02))
            :op2 (k0 / keyword)
            :op3 (p0 / phrase
                  :ARG1-of (h0 / have-degree-91
                        :ARG3 (m0 / more))
                  :ARG1-of (l0 / long-03)
                  :frequency (o0 / occasional)))
      :ARG2 (t0 / term))

# ::snt The idea of inheritance is to reuse the existing code with little or no modification at all.
# ::tokens ["The", "idea", "of", "inheritance", "is", "to", "reuse", "the", "existing", "code", "with", "little", "or", "no", "modification", "at", "all", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "NN", "VBZ", "TO", "VB", "DT", "VBG", "NN", "IN", "JJ", "CC", "DT", "NN", "RB", "RB", "."]
# ::lemmas ["the", "idea", "of", "inheritance", "be", "to", "reuse", "the", "exist", "code", "with", "little", "or", "no", "modification", "at", "all", "."]
(r0 / reuse
      :domain (c0 / code
            :ARG1-of (e0 / exist-01))
      :domain (i0 / idea
            :topic (i1 / inherit-01))
      :manner (o0 / or
            :op1 (m0 / modify-01
                  :mod (a0 / at-all)
                  :degree (l0 / little))
            :op2 (m1 / modify-01
                  :polarity - )))

# ::snt It is valid in all common interpretations of probability.
# ::tokens ["It", "is", "valid", "in", "all", "common", "interpretations", "of", "probability", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "JJ", "IN", "DT", "JJ", "NNS", "IN", "NN", "."]
# ::lemmas ["it", "be", "valid", "in", "all", "common", "interpretation", "of", "probability", "."]
(v0 / valid-02
      :ARG1 (i0 / it)
      :ARG2 (i1 / interpret-01
            :ARG1 (p0 / probability)
            :mod (c0 / common)
            :mod (a0 / all)))

# ::snt The value of a vector is non-zero if a term occurs in the document.
# ::tokens ["The", "value", "of", "a", "vector", "is", "non", "-", "zero", "if", "a", "term", "occurs", "in", "the", "document", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "I", "I", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NN", "VBZ", "JJ", "JJ", "CD", "IN", "DT", "NN", "VBZ", "IN", "DT", "NN", "."]
# ::lemmas ["the", "value", "of", "a", "vector", "be", "non", "-", "zero", "if", "a", "term", "occur", "in", "the", "document", "."]
(h0 / have-condition-91
      :ARG1 (e0 / equal-01
            :ARG1 (t0 / thing
                  :ARG2-of (v0 / value-01
                        :ARG1 (v1 / vector)))
            :ARG2 (z0 / zero)
            :polarity - )
      :ARG2 (b0 / be-located-at-91
            :ARG1 (t1 / term)
            :ARG2 (d0 / document)))

# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
# ::tokens ["When", "a", "document", "is", "represented", "as", "a", "vector", ",", "each", "dimension", "corresponds", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", ",", "DT", "NN", "VBZ", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["when", "a", "document", "be", "represent", "as", "a", "vector", ",", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(c0 / correspond-02
      :ARG1 (t0 / term
            :ARG1-of (s0 / separate-02))
      :ARG1 (d0 / dimension
            :mod (e0 / each))
      :time (r0 / represent-01
            :ARG1 (d1 / document)
            :ARG2 (v0 / vector)))

# ::snt Inheritance is an important feature in object orientated programming.
# ::tokens ["Inheritance", "is", "an", "important", "feature", "in", "object", "orientated", "programming", "."]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "DT", "JJ", "NN", "IN", "NN", "VBN", "NN", "."]
# ::lemmas ["Inheritance", "be", "an", "important", "feature", "in", "object", "orientate", "programming", "."]
(f0 / feature
      :ARG1-of (i0 / important-01)
      :domain (p0 / programming
            :ARG1-of (o0 / orient-01
                  :ARG2 (o1 / object)))
      :domain (i1 / influence-01))

# ::snt So in essence it is a popularity contest between WebPages.
# ::tokens ["So", "in", "essence", "it", "is", "a", "popularity", "contest", "between", "WebPages", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "IN", "NN", "PRP", "VBZ", "DT", "NN", "NN", "IN", "NNP", "."]
# ::lemmas ["so", "in", "essence", "it", "be", "a", "popularity", "contest", "between", "WebPages", "."]
(c0 / cause-01
      :ARG1 (c1 / contest-02
            :ARG1 (i0 / it)
            :mod (e0 / essence)
            :ARG3 (p0 / popularity)
            :ARG0 (b0 / between
                  :op1 (c2 / company
                        :name (n0 / name
                              :op1 "WebPages" ))
                  :op2 (c3 / company
                        :name (n1 / name
                              :op1 "WebPages" )))))

# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
# ::tokens ["The", "basic", "idea", "is", "to", "represent", "each", "document", "as", "a", "vector", "of", "certain", "weighted", "word", "frequencies", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "VBZ", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "IN", "JJ", "JJ", "NN", "NNS", "."]
# ::lemmas ["the", "basic", "idea", "be", "to", "represent", "each", "document", "as", "a", "vector", "of", "certain", "weighted", "word", "frequency", "."]
(r0 / represent-01
      :ARG1 (d0 / document
            :mod (e0 / each))
      :ARG0 (i0 / idea
            :mod (b0 / basic))
      :ARG2 (v0 / vector
            :consist-of (f0 / frequency
                  :mod (c0 / certain)
                  :ARG1-of (w0 / word)
                  :ARG1-of (w1 / weight-01))))

# ::snt Object oriented programming is a style of programming that supports encapsulation, inheritance, and polymorphism.
# ::tokens ["Object", "oriented", "programming", "is", "a", "style", "of", "programming", "that", "supports", "encapsulation", ",", "inheritance", ",", "and", "polymorphism", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "VBN", "NN", "VBZ", "DT", "NN", "IN", "NN", "WDT", "VBZ", "NN", ",", "NN", ",", "CC", "NN", "."]
# ::lemmas ["object", "orient", "programming", "be", "a", "style", "of", "programming", "that", "support", "encapsulation", ",", "inheritance", ",", "and", "polymorphism", "."]
(p0 / program-01
      :mod (s0 / style)
      :ARG0-of (s1 / support-01
            :ARG1 (a0 / and
                  :op1 (t0 / thing
                        :ARG2-of (c0 / copy-01))
                  :op2 (t1 / thing
                        :ARG2-of (i0 / inherit-01))
                  :op3 (t2 / thing
                        :mod (p1 / polymorphism))))
      :domain (o0 / orient-01
            :ARG3 (o1 / object)))

# ::snt The vector space model has some limitations: 1.
# ::tokens ["The", "vector", "space", "model", "has", "some", "limitations", ":", "1", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBZ", "DT", "NNS", ":", "CD", "."]
# ::lemmas ["the", "vector", "space", "model", "have", "some", "limitation", ":", "1", "."]
(l0 / limit-01
      :ARG1 (m0 / model
            :mod (s0 / space
                  :mod (v0 / vector)))
      :li 1 )

# ::snt The theorem is often used when we have observations and wish to compute posterior probabilities.
# ::tokens ["The", "theorem", "is", "often", "used", "when", "we", "have", "observations", "and", "wish", "to", "compute", "posterior", "probabilities", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "RB", "VBN", "WRB", "PRP", "VBP", "NNS", "CC", "VBP", "TO", "VB", "NN", "NNS", "."]
# ::lemmas ["the", "theorem", "be", "often", "use", "when", "we", "have", "observation", "and", "wish", "to", "compute", "posterior", "probability", "."]
(u0 / use-01
      :ARG1 (t0 / theorem)
      :time (a0 / and
            :op1 (h0 / have-03
                  :ARG1 (o1 / observe-01)
                  :ARG0 (w1 / we))
            :op2 (w0 / wish-01
                  :ARG0 w1
                  :ARG1 (c0 / comprehend-01
                        :ARG0 w1
                        :ARG1 (p0 / probability
                              :ARG1-of (d0 / differ-02)))))
      :frequency (o0 / often))

# ::snt One of the best known schemes is tf-idf weighting (see the example below).
# ::tokens ["One", "of", "the", "best", "known", "schemes", "is", "tf", "-", "idf", "weighting", "(", "see", "the", "example", "below", ")", "."]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["CD", "IN", "DT", "RBS", "JJ", "NNS", "VBZ", "NNP", "HYPH", "NNP", "NN", "-LRB-", "VB", "DT", "NN", "RB", "-RRB-", "."]
# ::lemmas ["One", "of", "the", "well", "known", "scheme", "be", "tf", "-", "idf", "weighting", "(", "see", "the", "example", "below", ")", "."]
(m0 / multi-sentence
      :snt1 (h0 / have-mod-91
            :ARG1 (t0 / thing
                  :ARG1-of (i0 / include-91
                        :ARG2 (s2 / scheme
                              :ARG1-of (k0 / know-02
                                    :ARG1-of (g0 / good-02)
                                    :ARG1-of (h1 / have-degree-91
                                          :ARG2 g0
                                          :ARG3 (m1 / most))))))
            :ARG1 (s1 / scheme
                  :name (n0 / name
                        :op1 "tf" 
                        :op2 "weighting" )))
      :snt2 (s0 / see-01
            :ARG1 (e0 / exemplify-01
                  :ARG0 (b0 / below))
            :ARG0 (y0 / you)
            :mode imperative ))

# ::snt It is therefore used to create relationships between one object and another.
# ::tokens ["It", "is", "therefore", "used", "to", "create", "relationships", "between", "one", "object", "and", "another", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VBN", "TO", "VB", "NNS", "IN", "CD", "NN", "CC", "DT", "."]
# ::lemmas ["it", "be", "therefore", "use", "to", "create", "relationship", "between", "one", "object", "and", "another", "."]
(c0 / cause-01
      :ARG1 (u0 / use-01
            :ARG1 (i0 / it)
            :ARG2 (c1 / create-01
                  :ARG0 i0
                  :ARG1 (r0 / relation-03
                        :ARG1 (o0 / object
                              :mod (o2 / one))
                        :ARG2 (o1 / object
                              :mod (a0 / another))))))

# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
# ::tokens ["When", "a", "document", "is", "represented", "as", "a", "vector", ",", "each", "dimension", "corresponds", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", ",", "DT", "NN", "VBZ", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["when", "a", "document", "be", "represent", "as", "a", "vector", ",", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(c0 / correspond-02
      :ARG1 (t0 / term
            :ARG1-of (s0 / separate-02))
      :ARG1 (d0 / dimension
            :mod (e0 / each))
      :time (r0 / represent-01
            :ARG1 (d1 / document)
            :ARG2 (v0 / vector)))

# ::snt If a term appears in the document then its value in the vector is non-zero.
# ::tokens ["If", "a", "term", "appears", "in", "the", "document", "then", "its", "value", "in", "the", "vector", "is", "non", "-", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["IN", "DT", "NN", "VBZ", "IN", "DT", "NN", "RB", "PRP$", "NN", "IN", "DT", "NN", "VBZ", "JJ", "JJ", "CD", "."]
# ::lemmas ["if", "a", "term", "appear", "in", "the", "document", "then", "its", "value", "in", "the", "vector", "be", "non", "-", "zero", "."]
(h0 / have-condition-91
      :ARG1 (z0 / zero
            :polarity - 
            :domain (v0 / value
                  :poss t0
                  :location (v1 / vector)))
      :ARG2 (a0 / appear-01
            :ARG1 (t0 / term)
            :location (d0 / document)))

# ::snt If a term exists in a document, its value in the vector is not equal to zero.
# ::tokens ["If", "a", "term", "exists", "in", "a", "document", ",", "its", "value", "in", "the", "vector", "is", "not", "equal", "to", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["IN", "DT", "NN", "VBZ", "IN", "DT", "NN", ",", "PRP$", "NN", "IN", "DT", "NN", "VBZ", "RB", "JJ", "IN", "CD", "."]
# ::lemmas ["if", "a", "term", "exist", "in", "a", "document", ",", "its", "value", "in", "the", "vector", "be", "not", "equal", "to", "zero", "."]
(e0 / equal-01
      :ARG1 (t0 / thing
            :ARG2-of (v0 / value-01
                  :location (v1 / vector)))
      :ARG2 (z0 / zero)
      :polarity - 
      :condition (e1 / exist-01
            :ARG1 (t1 / term)
            :location (d0 / document)))

# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
# ::tokens ["A", "document", "is", "represented", "as", "a", "vector", ",", "with", "each", "dimension", "corresponding", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", ",", "IN", "DT", "NN", "VBG", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["a", "document", "be", "represent", "as", "a", "vector", ",", "with", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(r0 / represent-01
      :ARG1 (d0 / document)
      :ARG2 (v0 / vector)
      :ARG0-of (a0 / accompany-01
            :ARG1 (c0 / correspond-02
                  :ARG1 (d1 / dimension
                        :mod (e0 / each))
                  :ARG2 (t0 / term
                        :ARG1-of (s0 / separate-02)))))

# ::snt A document is represented as a vector.
# ::tokens ["A", "document", "is", "represented", "as", "a", "vector", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["a", "document", "be", "represent", "as", "a", "vector", "."]
(r0 / represent-01
      :ARG1 (d0 / document)
      :ARG2 (v0 / vector))

# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
# ::tokens ["A", "document", "is", "represented", "as", "a", "vector", ",", "with", "each", "dimension", "corresponding", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", ",", "IN", "DT", "NN", "VBG", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["a", "document", "be", "represent", "as", "a", "vector", ",", "with", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(r0 / represent-01
      :ARG1 (d0 / document)
      :ARG2 (v0 / vector)
      :ARG0-of (a0 / accompany-01
            :ARG1 (c0 / correspond-02
                  :ARG1 (d1 / dimension
                        :mod (e0 / each))
                  :ARG2 (t0 / term
                        :ARG1-of (s0 / separate-02)))))

# ::snt To derive the theorem, we begin with the definition of conditional probability.
# ::tokens ["To", "derive", "the", "theorem", ",", "we", "begin", "with", "the", "definition", "of", "conditional", "probability", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["TO", "VB", "DT", "NN", ",", "PRP", "VBP", "IN", "DT", "NN", "IN", "JJ", "NN", "."]
# ::lemmas ["to", "derive", "the", "theorem", ",", "we", "begin", "with", "the", "definition", "of", "conditional", "probability", "."]
(b0 / begin-01
      :ARG1 (d0 / define-01
            :ARG1 (p0 / probability
                  :mod (c0 / condition-01)))
      :ARG0 (w0 / we)
      :purpose (d1 / derive-01
            :ARG0 w0
            :ARG1 (t0 / theorem)))

# ::snt Characterise structure of an optimal solution.
# ::tokens ["Characterise", "structure", "of", "an", "optimal", "solution", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["characterise", "structure", "of", "an", "optimal", "solution", "."]
(c0 / characteristic-02
      :ARG1 (s0 / structure
            :poss (s1 / solve-01
                  :mod (o0 / optimal))))

# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
# ::tokens ["When", "a", "document", "is", "represented", "as", "a", "vector", ",", "each", "dimension", "corresponds", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", ",", "DT", "NN", "VBZ", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["when", "a", "document", "be", "represent", "as", "a", "vector", ",", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(c0 / correspond-02
      :ARG1 (t0 / term
            :ARG1-of (s0 / separate-02))
      :ARG1 (d0 / dimension
            :mod (e0 / each))
      :time (r0 / represent-01
            :ARG1 (d1 / document)
            :ARG2 (v0 / vector)))

# ::snt Break up the problem different smaller subproblems.
# ::tokens ["Break", "up", "the", "problem", "different", "smaller", "subproblems", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "RP", "DT", "NN", "JJ", "JJR", "NNS", "."]
# ::lemmas ["break", "up", "the", "problem", "different", "small", "subproblem", "."]
(b0 / break-up-08
      :ARG1 (s0 / subproblem
            :ARG1-of (d0 / differ-02)
            :ARG1-of (h0 / have-degree-91
                  :ARG2 (s1 / small)
                  :ARG3 (m0 / more)))
      :ARG0 (y0 / you)
      :mode imperative )

# ::snt P(A) is the probability of the student being a girl (which is 2/5).
# ::tokens ["P(A", ")", "is", "the", "probability", "of", "the", "student", "being", "a", "girl", "(", "which", "is", "2/5", ")", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNS", "-RRB-", "VBZ", "DT", "NN", "IN", "DT", "NN", "VBG", "DT", "NN", "-LRB-", "WDT", "VBZ", "CD", "-RRB-", "."]
# ::lemmas ["p(a", ")", "be", "the", "probability", "of", "the", "student", "be", "a", "girl", "(", "which", "be", "2/5", ")", "."]
(p0 / probable
      :ARG1-of (a0 / age-01
            :ARG2 (p1 / product-of
                  :op1 25 
                  :op2 1 ))
      :domain (s0 / score-on-scale-91
            :ARG1 "A" )
      :domain (g0 / girl
            :domain (p2 / person
                  :ARG0-of (s1 / study-01))))

# ::snt This is highly used in dynamic programming.
# ::tokens ["This", "is", "highly", "used", "in", "dynamic", "programming", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "RB", "VBN", "IN", "JJ", "NN", "."]
# ::lemmas ["this", "be", "highly", "use", "in", "dynamic", "programming", "."]
(u0 / use-01
      :ARG1 (t0 / this)
      :ARG2 (h0 / high-02)
      :ARG2 (p0 / program-01
            :mod (d0 / dynamic)))

# ::snt A term which occurs in the document has a value in the vector of non-zero.
# ::tokens ["A", "term", "which", "occurs", "in", "the", "document", "has", "a", "value", "in", "the", "vector", "of", "non", "-", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["DT", "NN", "WDT", "VBZ", "IN", "DT", "NN", "VBZ", "DT", "NN", "IN", "DT", "NN", "IN", "JJ", "JJ", "CD", "."]
# ::lemmas ["a", "term", "which", "occur", "in", "the", "document", "have", "a", "value", "in", "the", "vector", "of", "non", "-", "zero", "."]
(v0 / value-01
      :ARG1 (t0 / term
            :location (d0 / document))
      :location (v1 / vector
            :consist-of (z0 / zero
                  :polarity - )))

# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
# ::tokens ["When", "a", "document", "is", "represented", "as", "a", "vector", ",", "each", "dimension", "corresponds", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", ",", "DT", "NN", "VBZ", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["when", "a", "document", "be", "represent", "as", "a", "vector", ",", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(c0 / correspond-02
      :ARG1 (t0 / term
            :ARG1-of (s0 / separate-02))
      :ARG1 (d0 / dimension
            :mod (e0 / each))
      :time (r0 / represent-01
            :ARG1 (d1 / document)
            :ARG2 (v0 / vector)))

# ::snt Terms are basically the words or any indexing unit used to identify the contents of a text.
# ::tokens ["Terms", "are", "basically", "the", "words", "or", "any", "indexing", "unit", "used", "to", "identify", "the", "contents", "of", "a", "text", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "VBP", "RB", "DT", "NNS", "CC", "DT", "NN", "NN", "VBN", "TO", "VB", "DT", "NNS", "IN", "DT", "NN", "."]
# ::lemmas ["term", "be", "basically", "the", "word", "or", "any", "indexing", "unit", "use", "to", "identify", "the", "content", "of", "a", "text", "."]
(o0 / or
      :op1 (w0 / word)
      :op2 (u0 / unit
            :mod (a0 / any)
            :ARG0-of (u1 / use-01
                  :ARG2 (i0 / identify-01
                        :ARG1 (t1 / thing
                              :ARG1-of (c0 / contain-01
                                    :ARG0 (t2 / text)))))
            :ARG0-of (d0 / define-01))
      :domain (b0 / basic)
      :domain (t0 / term))

# ::snt The vector space model are the documents which are represented as “bags of words”.
# ::tokens ["The", "vector", "space", "model", "are", "the", "documents", "which", "are", "represented", "as", "\u201c", "bags", "of", "words", "\u201d", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBP", "DT", "NNS", "WDT", "VBP", "VBN", "IN", "``", "NNS", "IN", "NNS", "''", "."]
# ::lemmas ["the", "vector", "space", "model", "be", "the", "document", "which", "be", "represent", "as", "\"", "bag", "of", "word", "\"", "."]
(d0 / document
      :ARG1-of (r0 / represent-01
            :ARG2 (b0 / bag
                  :consist-of (w0 / word)))
      :domain (m0 / model
            :mod (s0 / space
                  :mod (v0 / vector))))

# ::snt When any sub-problem is met again, it can be found and re-used to solve another problem.
# ::tokens ["When", "any", "sub", "-", "problem", "is", "met", "again", ",", "it", "can", "be", "found", "and", "re", "-", "used", "to", "solve", "another", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "DT", "NN", "HYPH", "NN", "VBZ", "VBN", "RB", ",", "PRP", "MD", "VB", "VBN", "CC", "VBN", "VBN", "VBN", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["when", "any", "sub", "-", "problem", "be", "meet", "again", ",", "it", "can", "be", "find", "and", "re", "-", "use", "to", "solve", "another", "problem", "."]
(p0 / possible-01
      :ARG1 (a0 / and
            :op1 (f0 / find-01
                  :ARG1 p1)
            :op2 (u0 / use-01
                  :ARG2 (s0 / solve-01
                        :ARG1 p1
                        :ARG1 (p2 / problem
                              :mod (a3 / another)))))
      :time (m0 / meet-01
            :ARG1 (p1 / problem
                  :mod (a2 / any)
                  :mod (s1 / sub))
            :mod (a1 / again)))

# ::snt The vector space model are the documents which are represented as “bags of words”.
# ::tokens ["The", "vector", "space", "model", "are", "the", "documents", "which", "are", "represented", "as", "\u201c", "bags", "of", "words", "\u201d", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBP", "DT", "NNS", "WDT", "VBP", "VBN", "IN", "``", "NNS", "IN", "NNS", "''", "."]
# ::lemmas ["the", "vector", "space", "model", "be", "the", "document", "which", "be", "represent", "as", "\"", "bag", "of", "word", "\"", "."]
(d0 / document
      :ARG1-of (r0 / represent-01
            :ARG2 (b0 / bag
                  :consist-of (w0 / word)))
      :domain (m0 / model
            :mod (s0 / space
                  :mod (v0 / vector))))

# ::snt This is highly used in dynamic programming.
# ::tokens ["This", "is", "highly", "used", "in", "dynamic", "programming", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "RB", "VBN", "IN", "JJ", "NN", "."]
# ::lemmas ["this", "be", "highly", "use", "in", "dynamic", "programming", "."]
(u0 / use-01
      :ARG1 (t0 / this)
      :ARG2 (h0 / high-02)
      :ARG2 (p0 / program-01
            :mod (d0 / dynamic)))

# ::snt The differing application has a direct influence on what the definition of the term means.
# ::tokens ["The", "differing", "application", "has", "a", "direct", "influence", "on", "what", "the", "definition", "of", "the", "term", "means", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBG", "NN", "VBZ", "DT", "JJ", "NN", "IN", "WP", "DT", "NN", "IN", "DT", "NN", "VBZ", "."]
# ::lemmas ["the", "differ", "application", "have", "a", "direct", "influence", "on", "what", "the", "definition", "of", "the", "term", "mean", "."]
(i0 / influence-01
      :ARG1 (t0 / thing
            :ARG2-of (m0 / mean-01
                  :ARG1 (d2 / define-01
                        :ARG1 (t1 / term))))
      :ARG0 (a0 / apply-02
            :ARG1-of (d1 / differ-01))
      :ARG1-of (d0 / direct-02))

# ::snt As a formal theorem, Bayes' theorem is valid in all common interpretations of probability.
# ::tokens ["As", "a", "formal", "theorem", ",", "Bayes", "'", "theorem", "is", "valid", "in", "all", "common", "interpretations", "of", "probability", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "JJ", "NN", ",", "NNP", "POS", "NN", "VBZ", "JJ", "IN", "DT", "JJ", "NNS", "IN", "NN", "."]
# ::lemmas ["as", "a", "formal", "theorem", ",", "Bayes", "'", "theorem", "be", "valid", "in", "all", "common", "interpretation", "of", "probability", "."]
(v0 / valid-02
      :ARG1 (t0 / theorem
            :mod (f0 / formal)
            :poss (p0 / person
                  :name (n0 / name
                        :op1 "Bayes" )))
      :ARG2 (i0 / interpret-01
            :ARG1 (p1 / probability)
            :mod (a0 / all)
            :ARG1-of (s0 / share-01)))

# ::snt It is mainly used to calculate the probability of one event’s outcome given that a previous event happened.
# ::tokens ["It", "is", "mainly", "used", "to", "calculate", "the", "probability", "of", "one", "event", "\u2019s", "outcome", "given", "that", "a", "previous", "event", "happened", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VBN", "TO", "VB", "DT", "NN", "IN", "CD", "NN", "POS", "NN", "VBN", "IN", "DT", "JJ", "NN", "VBD", "."]
# ::lemmas ["it", "be", "mainly", "use", "to", "calculate", "the", "probability", "of", "one", "event", "\u2019s", "outcome", "give", "that", "a", "previous", "event", "happen", "."]
(u0 / use-01
      :ARG1 (i0 / it)
      :mod (m0 / main)
      :ARG2 (c0 / calculate-01
            :ARG1 (p0 / probable
                  :domain (o0 / outcome
                        :poss (e1 / event
                              :quant 1 ))))
      :ARG1-of (g0 / give-01
            :ARG1 (e0 / event
                  :mod (p1 / previous))))

# ::snt The algebraic model for representing text documents and objects as vectors of identifiers is called the vector space model.
# ::tokens ["The", "algebraic", "model", "for", "representing", "text", "documents", "and", "objects", "as", "vectors", "of", "identifiers", "is", "called", "the", "vector", "space", "model", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "NN", "IN", "VBG", "NN", "NNS", "CC", "NNS", "IN", "NNS", "IN", "NNS", "VBZ", "VBN", "DT", "NN", "NN", "NN", "."]
# ::lemmas ["the", "algebraic", "model", "for", "represent", "text", "document", "and", "object", "as", "vector", "of", "identifier", "be", "call", "the", "vector", "space", "model", "."]
(c0 / call-01
      :ARG1 (m0 / model
            :mod (e0 / electronics)
            :mod (r0 / represent-01
                  :ARG1 (a0 / and
                        :op1 (d0 / document
                              :mod (t0 / text))
                        :op2 (o0 / object
                              :location t0))
                  :ARG2 (v0 / vector
                        :ARG0-of (i0 / identify-01))))
      :ARG1 (m1 / model
            :mod (s0 / space
                  :mod (v1 / vector))))

# ::snt It is used in information filtering, information retrieval, indexing and relevancy rankings.
# ::tokens ["It", "is", "used", "in", "information", "filtering", ",", "information", "retrieval", ",", "indexing", "and", "relevancy", "rankings", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "VBN", "IN", "NN", "NN", ",", "NN", "NN", ",", "NN", "CC", "NN", "NNS", "."]
# ::lemmas ["it", "be", "use", "in", "information", "filtering", ",", "information", "retrieval", ",", "indexing", "and", "relevancy", "ranking", "."]
(u0 / use-01
      :ARG1 (i0 / it)
      :ARG2 (a0 / and
            :op1 (f0 / filter-02
                  :ARG1 (i1 / information))
            :op2 (r0 / retrieve-01
                  :ARG1 i1
                  :ARG1 (i2 / information))
            :op3 (m0 / model-01)
            :op4 (t0 / track-01
                  :ARG1-of (r1 / relevant-01))))

# ::snt Vector space representation results in the loss of the order which the terms are in the document.
# ::tokens ["Vector", "space", "representation", "results", "in", "the", "loss", "of", "the", "order", "which", "the", "terms", "are", "in", "the", "document", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "NN", "NN", "NNS", "IN", "DT", "NN", "IN", "DT", "NN", "WDT", "DT", "NNS", "VBP", "IN", "DT", "NN", "."]
# ::lemmas ["vector", "space", "representation", "result", "in", "the", "loss", "of", "the", "order", "which", "the", "term", "be", "in", "the", "document", "."]
(r0 / result-01
      :ARG1 (r1 / represent-01
            :ARG1 (s0 / space
                  :mod (v0 / vector)))
      :ARG2 (l0 / lose-02
            :ARG1 (o0 / order
                  :location-of (t0 / term
                        :location (d0 / document)))))

# ::snt Inheritance in object oriented programming is a way to form new classes using classes that have already been defined.
# ::tokens ["Inheritance", "in", "object", "oriented", "programming", "is", "a", "way", "to", "form", "new", "classes", "using", "classes", "that", "have", "already", "been", "defined", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "IN", "NN", "VBN", "NN", "VBZ", "DT", "NN", "TO", "VB", "JJ", "NNS", "VBG", "NNS", "WDT", "VBP", "RB", "VBN", "VBN", "."]
# ::lemmas ["inheritance", "in", "object", "orient", "programming", "be", "a", "way", "to", "form", "new", "class", "use", "class", "that", "have", "already", "be", "define", "."]
(w0 / way
      :domain (f0 / form-01
            :ARG1 (c0 / class
                  :ARG1-of (n0 / new-01))
            :manner (u0 / use-01
                  :ARG1 (c1 / class
                        :ARG1-of (d0 / define-01
                              :time (a0 / already)))))
      :domain (i0 / inherit-01
            :ARG1 (p0 / program-01
                  :ARG2 (o0 / orient-01
                        :ARG2 (o1 / object)))))

# ::snt The algebraic model for representing text documents and objects as vectors of identifiers is called the vector space model.
# ::tokens ["The", "algebraic", "model", "for", "representing", "text", "documents", "and", "objects", "as", "vectors", "of", "identifiers", "is", "called", "the", "vector", "space", "model", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "NN", "IN", "VBG", "NN", "NNS", "CC", "NNS", "IN", "NNS", "IN", "NNS", "VBZ", "VBN", "DT", "NN", "NN", "NN", "."]
# ::lemmas ["the", "algebraic", "model", "for", "represent", "text", "document", "and", "object", "as", "vector", "of", "identifier", "be", "call", "the", "vector", "space", "model", "."]
(c0 / call-01
      :ARG1 (m0 / model
            :mod (e0 / electronics)
            :mod (r0 / represent-01
                  :ARG1 (a0 / and
                        :op1 (d0 / document
                              :mod (t0 / text))
                        :op2 (o0 / object
                              :location t0))
                  :ARG2 (v0 / vector
                        :ARG0-of (i0 / identify-01))))
      :ARG1 (m1 / model
            :mod (s0 / space
                  :mod (v1 / vector))))

# ::snt Secondly to define the value of the optimal solution recursively.
# ::tokens ["Secondly", "to", "define", "the", "value", "of", "the", "optimal", "solution", "recursively", "."]
# ::ner_tags ["ORDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "TO", "VB", "DT", "NN", "IN", "DT", "JJ", "NN", "RB", "."]
# ::lemmas ["Secondly", "to", "define", "the", "value", "of", "the", "optimal", "solution", "recursively", "."]
(d0 / define-01
      :ARG1 (v0 / value-01
            :ARG1 (s0 / solution
                  :mod (o0 / optimal)))
      :ARG1-of (c0 / correlate-01)
      :li 2 )

# ::snt There are two main approaches for dynamic programming.
# ::tokens ["There", "are", "two", "main", "approaches", "for", "dynamic", "programming", "."]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "CD", "JJ", "NNS", "IN", "JJ", "NN", "."]
# ::lemmas ["there", "be", "two", "main", "approach", "for", "dynamic", "programming", "."]
(a0 / approach-02
      :ARG1 (m0 / main)
      :quant 2 
      :ARG1 (p0 / program-01
            :mod (d0 / dynamic)))

# ::snt P(A), or the probability that the student is a girl regardless of any other information.
# ::tokens ["P(A", ")", ",", "or", "the", "probability", "that", "the", "student", "is", "a", "girl", "regardless", "of", "any", "other", "information", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "-RRB-", ",", "CC", "DT", "NN", "IN", "DT", "NN", "VBZ", "DT", "NN", "RB", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["p(a", ")", ",", "or", "the", "probability", "that", "the", "student", "be", "a", "girl", "regardless", "of", "any", "other", "information", "."]
(o0 / or
      :op1 (e0 / exemplify-01)
      :op2 (p0 / probable
            :domain (g0 / girl
                  :domain (p1 / person
                        :ARG0-of (s0 / study-01)))
            :ARG1-of (r0 / regardless-91
                  :ARG2 (i0 / information
                        :mod (o1 / other)
                        :mod (a0 / any)))))

# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
# ::tokens ["In", "vector", "space", "model", ",", "the", "documents", "from", "which", "the", "information", "is", "to", "be", "retrieved", "are", "represented", "as", "vectors", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "NN", "NN", ",", "DT", "NNS", "IN", "WDT", "DT", "NN", "VBZ", "TO", "VB", "VBN", "VBP", "VBN", "IN", "NNS", "."]
# ::lemmas ["in", "vector", "space", "model", ",", "the", "document", "from", "which", "the", "information", "be", "to", "be", "retrieve", "be", "represent", "as", "vector", "."]
(r0 / represent-01
      :ARG1 (d0 / document
            :ARG1-of (r1 / retrieve-01
                  :ARG1 (i0 / information)))
      :ARG2 (v0 / vector)
      :location (m0 / model-01
            :ARG2 (s0 / space
                  :mod (v1 / vector))))

# ::snt A term which occurs in the document has a value in the vector of non-zero.
# ::tokens ["A", "term", "which", "occurs", "in", "the", "document", "has", "a", "value", "in", "the", "vector", "of", "non", "-", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["DT", "NN", "WDT", "VBZ", "IN", "DT", "NN", "VBZ", "DT", "NN", "IN", "DT", "NN", "IN", "JJ", "JJ", "CD", "."]
# ::lemmas ["a", "term", "which", "occur", "in", "the", "document", "have", "a", "value", "in", "the", "vector", "of", "non", "-", "zero", "."]
(v0 / value-01
      :ARG1 (t0 / term
            :location (d0 / document))
      :location (v1 / vector
            :consist-of (z0 / zero
                  :polarity - )))

# ::snt Vector space representation results in the loss of the order which the terms are in the document.
# ::tokens ["Vector", "space", "representation", "results", "in", "the", "loss", "of", "the", "order", "which", "the", "terms", "are", "in", "the", "document", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "NN", "NN", "NNS", "IN", "DT", "NN", "IN", "DT", "NN", "WDT", "DT", "NNS", "VBP", "IN", "DT", "NN", "."]
# ::lemmas ["vector", "space", "representation", "result", "in", "the", "loss", "of", "the", "order", "which", "the", "term", "be", "in", "the", "document", "."]
(r0 / result-01
      :ARG1 (r1 / represent-01
            :ARG1 (s0 / space
                  :mod (v0 / vector)))
      :ARG2 (l0 / lose-02
            :ARG1 (o0 / order
                  :location-of (t0 / term
                        :location (d0 / document)))))

# ::snt A page that is linked to by many pages with high PageRank receives a high rank itself.
# ::tokens ["A", "page", "that", "is", "linked", "to", "by", "many", "pages", "with", "high", "PageRank", "receives", "a", "high", "rank", "itself", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "WDT", "VBZ", "VBN", "IN", "IN", "JJ", "NNS", "IN", "JJ", "NNP", "VBZ", "DT", "JJ", "NN", "PRP", "."]
# ::lemmas ["a", "page", "that", "be", "link", "to", "by", "many", "page", "with", "high", "PageRank", "receive", "a", "high", "rank", "itself", "."]
(r0 / receive-01
      :ARG1 (t0 / thing
            :ARG1-of (r1 / rank-01)
            :ARG1-of (h0 / high-02))
      :ARG0 (p0 / page
            :ARG1-of (l0 / link-01
                  :ARG0 (p1 / page
                        :quant (h1 / have-03
                              :ARG1 (p2 / publication
                                    :ARG1-of (h2 / high-02)
                                    :name (n0 / name
                                          :op1 "PageRank" )))
                        :quant (m0 / many)))))

# ::snt The PageRank is computed iteratively, and it is found that the PageRank values converge fairly rapidly.
# ::tokens ["The", "PageRank", "is", "computed", "iteratively", ",", "and", "it", "is", "found", "that", "the", "PageRank", "values", "converge", "fairly", "rapidly", "."]
# ::ner_tags ["O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNP", "VBZ", "VBN", "RB", ",", "CC", "PRP", "VBZ", "VBN", "IN", "DT", "NNP", "NNS", "VBP", "RB", "RB", "."]
# ::lemmas ["the", "PageRank", "be", "compute", "iteratively", ",", "and", "it", "be", "find", "that", "the", "PageRank", "value", "converge", "fairly", "rapidly", "."]
(a0 / and
      :op1 (c0 / compile-01
            :manner (i0 / iteratively)
            :ARG1 (p0 / publication
                  :name (n0 / name
                        :op1 "PageRank" )
                  :ARG1-of (v0 / value)))
      :op2 (f0 / find-01
            :ARG1 (c1 / converge
                  :ARG1 p0
                  :manner (r0 / rapid
                        :ARG1-of (f1 / fair-04)))))

# ::snt In the vector space model a document is represented as a vector.
# ::tokens ["In", "the", "vector", "space", "model", "a", "document", "is", "represented", "as", "a", "vector", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "NN", "NN", "NN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["in", "the", "vector", "space", "model", "a", "document", "be", "represent", "as", "a", "vector", "."]
(r0 / represent-01
      :ARG1 (d0 / document)
      :ARG2 (v0 / vector)
      :location (m0 / model-01
            :ARG1 (s0 / space
                  :mod (v1 / vector))))

# ::snt If a term appears in the document, the terms value in the vector is non-zero.
# ::tokens ["If", "a", "term", "appears", "in", "the", "document", ",", "the", "terms", "value", "in", "the", "vector", "is", "non", "-", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["IN", "DT", "NN", "VBZ", "IN", "DT", "NN", ",", "DT", "NNS", "NN", "IN", "DT", "NN", "VBZ", "JJ", "JJ", "CD", "."]
# ::lemmas ["if", "a", "term", "appear", "in", "the", "document", ",", "the", "term", "value", "in", "the", "vector", "be", "non", "-", "zero", "."]
(h0 / have-condition-91
      :ARG1 (z0 / zero
            :polarity - 
            :domain (v0 / value
                  :location (v1 / vector)))
      :ARG2 (a0 / appear-01
            :ARG1 (t0 / term)
            :location (d0 / document)))

# ::snt Finally, the order in which the terms appear in the document is lost in the vector space representation.
# ::tokens ["Finally", ",", "the", "order", "in", "which", "the", "terms", "appear", "in", "the", "document", "is", "lost", "in", "the", "vector", "space", "representation", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", ",", "DT", "NN", "IN", "WDT", "DT", "NNS", "VBP", "IN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "NN", "NN", "."]
# ::lemmas ["finally", ",", "the", "order", "in", "which", "the", "term", "appear", "in", "the", "document", "be", "lose", "in", "the", "vector", "space", "representation", "."]
(l0 / lose-02
      :ARG1 (o0 / order
            :time-of (a0 / appear-01
                  :ARG1 (t0 / term)
                  :location (d0 / document)))
      :mod (e0 / enter-02
            :ARG1 (s0 / space
                  :mod (v0 / vector)))
      :mod (f0 / final))

# ::snt Following this, each web page is given a ranking of 0-10 according to its relevance to a search.
# ::tokens ["Following", "this", ",", "each", "web", "page", "is", "given", "a", "ranking", "of", "0", "-", "10", "according", "to", "its", "relevance", "to", "a", "search", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBG", "DT", ",", "DT", "NN", "NN", "VBZ", "VBN", "DT", "NN", "IN", "CD", "SYM", "CD", "VBG", "IN", "PRP$", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["follow", "this", ",", "each", "web", "page", "be", "give", "a", "ranking", "of", "0", "-", "10", "accord", "to", "its", "relevance", "to", "a", "search", "."]
(g0 / give-01
      :ARG1 (p0 / page
            :mod (e0 / each)
            :ARG1-of (r1 / relevant-01
                  :ARG2 (s0 / search-01))
            :mod (w0 / web))
      :ARG1 (f0 / follow-01
            :ARG2 (t0 / this))
      :ARG1 (r0 / rank-01
            :ARG1 p0
            :ARG1-of (b0 / between
                  :op1 0 
                  :op2 10 )))

# ::snt Lucky Joe likes to predict the colour of the ball he selects and he is 80% accurate.
# ::tokens ["Lucky", "Joe", "likes", "to", "predict", "the", "colour", "of", "the", "ball", "he", "selects", "and", "he", "is", "80", "%", "accurate", "."]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "PERCENT", "PERCENT", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "PRP", "VBZ", "CC", "PRP", "VBZ", "CD", "NN", "JJ", "."]
# ::lemmas ["Lucky", "Joe", "like", "to", "predict", "the", "colour", "of", "the", "ball", "he", "select", "and", "he", "be", "80", "%", "accurate", "."]
(a0 / and
      :op1 (l0 / like-01
            :ARG1 (p0 / predict-01
                  :ARG0 p1
                  :ARG1 (c0 / color
                        :poss (b0 / ball)))
            :ARG0 (p1 / person
                  :ARG0-of (n0 / name
                        :op1 "Lucky" 
                        :op2 "Joe" )
                  :ARG0-of (s0 / select-01
                        :ARG1 c0
                        :ARG1 b0)))
      :op2 (a1 / accurate
            :domain p0
            :domain p1
            :degree (p2 / percentage-entity
                  :value 80 )))

# ::snt In probability theory, Bayes' theorem relates the conditional and marginal probabilities of two random events.
# ::tokens ["In", "probability", "theory", ",", "Bayes", "'", "theorem", "relates", "the", "conditional", "and", "marginal", "probabilities", "of", "two", "random", "events", "."]
# ::ner_tags ["O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "NN", ",", "NNP", "POS", "NN", "VBZ", "DT", "JJ", "CC", "JJ", "NNS", "IN", "CD", "JJ", "NNS", "."]
# ::lemmas ["in", "probability", "theory", ",", "Bayes", "'", "theorem", "relate", "the", "conditional", "and", "marginal", "probability", "of", "two", "random", "event", "."]
(r0 / relate-01
      :ARG1 (a0 / and
            :op1 (p0 / probability
                  :ARG1-of (c0 / condition-01))
            :op2 (p1 / probability
                  :ARG1-of (m0 / marginal-02)))
      :ARG0 (t0 / theorem
            :poss (e0 / event
                  :quant (r1 / random)
                  :quant 2 )
            :poss (p2 / person
                  :name (n0 / name
                        :op1 "Bayes" )))
      :location (t1 / theory
            :mod (p3 / probability)))

# ::snt Outbound, links from your page to others.
# ::tokens ["Outbound", ",", "links", "from", "your", "page", "to", "others", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", ",", "NNS", "IN", "PRP$", "NN", "IN", "NNS", "."]
# ::lemmas ["Outbound", ",", "link", "from", "your", "page", "to", "other", "."]
(l0 / link-01
      :ARG2 (O0 / Outbound)
      :ARG2 (p0 / page
            :poss (y0 / you))
      :ARG2 (o0 / other))

# ::snt Vector space representation results in the loss of the order which the terms are in the document.
# ::tokens ["Vector", "space", "representation", "results", "in", "the", "loss", "of", "the", "order", "which", "the", "terms", "are", "in", "the", "document", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "NN", "NN", "NNS", "IN", "DT", "NN", "IN", "DT", "NN", "WDT", "DT", "NNS", "VBP", "IN", "DT", "NN", "."]
# ::lemmas ["vector", "space", "representation", "result", "in", "the", "loss", "of", "the", "order", "which", "the", "term", "be", "in", "the", "document", "."]
(r0 / result-01
      :ARG1 (r1 / represent-01
            :ARG1 (s0 / space
                  :mod (v0 / vector)))
      :ARG2 (l0 / lose-02
            :ARG1 (o0 / order
                  :location-of (t0 / term
                        :location (d0 / document)))))

# ::snt If a term appears in the document, the terms value in the vector is non-zero.
# ::tokens ["If", "a", "term", "appears", "in", "the", "document", ",", "the", "terms", "value", "in", "the", "vector", "is", "non", "-", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["IN", "DT", "NN", "VBZ", "IN", "DT", "NN", ",", "DT", "NNS", "NN", "IN", "DT", "NN", "VBZ", "JJ", "JJ", "CD", "."]
# ::lemmas ["if", "a", "term", "appear", "in", "the", "document", ",", "the", "term", "value", "in", "the", "vector", "be", "non", "-", "zero", "."]
(h0 / have-condition-91
      :ARG1 (z0 / zero
            :polarity - 
            :domain (v0 / value
                  :location (v1 / vector)))
      :ARG2 (a0 / appear-01
            :ARG1 (t0 / term)
            :location (d0 / document)))

# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
# ::tokens ["In", "vector", "space", "model", ",", "the", "documents", "from", "which", "the", "information", "is", "to", "be", "retrieved", "are", "represented", "as", "vectors", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "NN", "NN", ",", "DT", "NNS", "IN", "WDT", "DT", "NN", "VBZ", "TO", "VB", "VBN", "VBP", "VBN", "IN", "NNS", "."]
# ::lemmas ["in", "vector", "space", "model", ",", "the", "document", "from", "which", "the", "information", "be", "to", "be", "retrieve", "be", "represent", "as", "vector", "."]
(r0 / represent-01
      :ARG1 (d0 / document
            :ARG1-of (r1 / retrieve-01
                  :ARG1 (i0 / information)))
      :ARG2 (v0 / vector)
      :location (m0 / model-01
            :ARG2 (s0 / space
                  :mod (v1 / vector))))

# ::snt The value of a vector is non-zero if a term occurs in the document.
# ::tokens ["The", "value", "of", "a", "vector", "is", "non", "-", "zero", "if", "a", "term", "occurs", "in", "the", "document", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "I", "I", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NN", "VBZ", "JJ", "JJ", "CD", "IN", "DT", "NN", "VBZ", "IN", "DT", "NN", "."]
# ::lemmas ["the", "value", "of", "a", "vector", "be", "non", "-", "zero", "if", "a", "term", "occur", "in", "the", "document", "."]
(h0 / have-condition-91
      :ARG1 (e0 / equal-01
            :ARG1 (t0 / thing
                  :ARG2-of (v0 / value-01
                        :ARG1 (v1 / vector)))
            :ARG2 (z0 / zero)
            :polarity - )
      :ARG2 (b0 / be-located-at-91
            :ARG1 (t1 / term)
            :ARG2 (d0 / document)))

# ::snt Other possible uses for vector space models are indexing and also to rank the relevancy of differing documents.
# ::tokens ["Other", "possible", "uses", "for", "vector", "space", "models", "are", "indexing", "and", "also", "to", "rank", "the", "relevancy", "of", "differing", "documents", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "JJ", "NNS", "IN", "NN", "NN", "NNS", "VBP", "VBG", "CC", "RB", "TO", "VB", "DT", "NN", "IN", "VBG", "NNS", "."]
# ::lemmas ["other", "possible", "use", "for", "vector", "space", "model", "be", "index", "and", "also", "to", "rank", "the", "relevancy", "of", "differ", "document", "."]
(u0 / use-01
      :ARG1 (a0 / and
            :op1 (m0 / model-01
                  :ARG1 (s0 / space
                        :mod (v0 / vector)))
            :op2 (r0 / rank-01
                  :ARG1 (r1 / relevant-01
                        :ARG1 (d0 / document
                              :ARG1-of (d1 / differ-02)))
                  :mod (a1 / also)))
      :mod (o0 / other)
      :ARG1-of (p0 / possible-01))

# ::snt The correct answer can be computed using Bayes' theorem.
# ::tokens ["The", "correct", "answer", "can", "be", "computed", "using", "Bayes", "'", "theorem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "ORG", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "MD", "VB", "VBN", "VBG", "NNP", "POS", "NN", "."]
# ::lemmas ["the", "correct", "answer", "can", "be", "compute", "use", "Bayes", "'", "theorem", "."]
(p0 / possible-01
      :ARG1 (c0 / compile-01
            :ARG1 (t0 / thing
                  :ARG1-of (c1 / correct-02)
                  :ARG2-of (a0 / answer-01))
            :manner (u0 / use-01
                  :ARG1 (t1 / theorem
                        :poss (p1 / person
                              :name (n0 / name
                                    :op1 "Bayes" ))))))

# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
# ::tokens ["The", "basic", "idea", "is", "to", "represent", "each", "document", "as", "a", "vector", "of", "certain", "weighted", "word", "frequencies", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "VBZ", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "IN", "JJ", "JJ", "NN", "NNS", "."]
# ::lemmas ["the", "basic", "idea", "be", "to", "represent", "each", "document", "as", "a", "vector", "of", "certain", "weighted", "word", "frequency", "."]
(r0 / represent-01
      :ARG1 (d0 / document
            :mod (e0 / each))
      :ARG0 (i0 / idea
            :mod (b0 / basic))
      :ARG2 (v0 / vector
            :consist-of (f0 / frequency
                  :mod (c0 / certain)
                  :ARG1-of (w0 / word)
                  :ARG1-of (w1 / weight-01))))

# ::snt P(B) is the prior or marginal probability of B, and acts as a normalizing constant.
# ::tokens ["P(B", ")", "is", "the", "prior", "or", "marginal", "probability", "of", "B", ",", "and", "acts", "as", "a", "normalizing", "constant", "."]
# ::ner_tags ["ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "-RRB-", "VBZ", "DT", "JJ", "CC", "JJ", "NN", "IN", "NN", ",", "CC", "VBZ", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["P(B", ")", "be", "the", "prior", "or", "marginal", "probability", "of", "b", ",", "and", "act", "as", "a", "normalizing", "constant", "."]
(a0 / and
      :op1 (o0 / or
            :op1 (t0 / thing
                  :name (n0 / name
                        :op1 "P(B" )
                  :domain (p1 / prior))
            :op2 (p0 / probability
                  :domain (m0 / marginal-02)
                  :domain (p2 / person
                        :name (n2 / name
                              :op1 "B" ))))
      :op2 (a1 / act-01
            :ARG1 (c0 / constant
                  :ARG0-of (n1 / normalize-01))))

# ::snt This method is used in the Google Toolbar, which reports back actual site visits to Google.
# ::tokens ["This", "method", "is", "used", "in", "the", "Google", "Toolbar", ",", "which", "reports", "back", "actual", "site", "visits", "to", "Google", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "FAC", "FAC", "FAC", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "I", "I", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "VBN", "IN", "DT", "NNP", "NNP", ",", "WDT", "VBZ", "VBP", "JJ", "NN", "NNS", "IN", "NNP", "."]
# ::lemmas ["this", "method", "be", "use", "in", "the", "Google", "Toolbar", ",", "which", "report", "back", "actual", "site", "visit", "to", "Google", "."]
(u0 / use-01
      :ARG1 (m0 / method
            :mod (t0 / this))
      :ARG2 (c0 / company
            :ARG0-of (r0 / report-01
                  :ARG1 (v0 / visit-01
                        :ARG1 (s0 / site)
                        :ARG1-of (a0 / actual-02)
                        :ARG1 (c1 / company
                              :name (n1 / name
                                    :op1 "Google" )))
                  :mod (b0 / back))
            :name (n0 / name
                  :op1 "Google" 
                  :op2 "Toolbar" )))

# ::snt P(B) is the prior or marginal probability of B, and acts to normalise the probability.
# ::tokens ["P(B", ")", "is", "the", "prior", "or", "marginal", "probability", "of", "B", ",", "and", "acts", "to", "normalise", "the", "probability", "."]
# ::ner_tags ["ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "-RRB-", "VBZ", "DT", "JJ", "CC", "JJ", "NN", "IN", "NN", ",", "CC", "VBZ", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["P(B", ")", "be", "the", "prior", "or", "marginal", "probability", "of", "b", ",", "and", "act", "to", "normalise", "the", "probability", "."]
(a0 / and
      :op1 (p0 / probability
            :mod (p1 / prior)
            :domain (m0 / marginal-02)
            :domain (p2 / person
                  :mod (v0 / variable
                        :name (n1 / name
                              :op1 "B" ))))
      :op2 (a1 / act-01
            :ARG0 p2
            :ARG1 (n0 / normalize-01
                  :ARG0 p2
                  :ARG1 (p3 / probability))))

# ::snt The order in which terms appear in the document is lost in a vector space representation.
# ::tokens ["The", "order", "in", "which", "terms", "appear", "in", "the", "document", "is", "lost", "in", "a", "vector", "space", "representation", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "WDT", "NNS", "VBP", "IN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "NN", "NN", "."]
# ::lemmas ["the", "order", "in", "which", "term", "appear", "in", "the", "document", "be", "lose", "in", "a", "vector", "space", "representation", "."]
(l0 / lose-02
      :ARG1 (o0 / order
            :time-of (a0 / appear-01
                  :ARG1 (t0 / term)
                  :location (d0 / document)))
      :location (r0 / representation-02
            :ARG0 (s0 / space
                  :mod (v0 / vector))))

# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
# ::tokens ["The", "basic", "idea", "is", "to", "represent", "each", "document", "as", "a", "vector", "of", "certain", "weighted", "word", "frequencies", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "VBZ", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "IN", "JJ", "JJ", "NN", "NNS", "."]
# ::lemmas ["the", "basic", "idea", "be", "to", "represent", "each", "document", "as", "a", "vector", "of", "certain", "weighted", "word", "frequency", "."]
(r0 / represent-01
      :ARG1 (d0 / document
            :mod (e0 / each))
      :ARG0 (i0 / idea
            :mod (b0 / basic))
      :ARG2 (v0 / vector
            :consist-of (f0 / frequency
                  :mod (c0 / certain)
                  :ARG1-of (w0 / word)
                  :ARG1-of (w1 / weight-01))))

# ::snt Java allows object inheritance.
# ::tokens ["Java", "allows", "object", "inheritance", "."]
# ::ner_tags ["ORG", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "VBP", "NN", "."]
# ::lemmas ["Java", "allow", "object", "inheritance", "."]
(a0 / allow-01
      :ARG1 (i0 / inherit-01
            :ARG1 (o0 / object))
      :ARG0 (c0 / company
            :name (n0 / name
                  :op1 "Java" )))

# ::snt Virtual attributes and methods can be shadowed/overridden.
# ::tokens ["Virtual", "attributes", "and", "methods", "can", "be", "shadowed", "/", "overridden", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNS", "CC", "NNS", "MD", "VB", "VBN", "SYM", "JJ", "."]
# ::lemmas ["virtual", "attribute", "and", "method", "can", "be", "shadow", "/", "overridden", "."]
(p0 / possible-01
      :ARG1 (s0 / shadow
            :domain (a0 / and
                  :op1 (t0 / thing
                        :ARG1-of (a1 / attribute-01))
                  :op2 (m0 / method)
                  :poss (v0 / virtual))))

# ::snt In the vector space model a document is represented as a vector.
# ::tokens ["In", "the", "vector", "space", "model", "a", "document", "is", "represented", "as", "a", "vector", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "NN", "NN", "NN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["in", "the", "vector", "space", "model", "a", "document", "be", "represent", "as", "a", "vector", "."]
(r0 / represent-01
      :ARG1 (d0 / document)
      :ARG2 (v0 / vector)
      :location (m0 / model-01
            :ARG1 (s0 / space
                  :mod (v1 / vector))))

# ::snt The peropos of inheritance in object oriented programming is to minimize the reuse of existing code without modification.
# ::tokens ["The", "peropos", "of", "inheritance", "in", "object", "oriented", "programming", "is", "to", "minimize", "the", "reuse", "of", "existing", "code", "without", "modification", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNS", "IN", "NN", "IN", "NN", "VBN", "NN", "VBZ", "TO", "VB", "DT", "NN", "IN", "VBG", "NN", "IN", "NN", "."]
# ::lemmas ["the", "peropo", "of", "inheritance", "in", "object", "orient", "programming", "be", "to", "minimize", "the", "reuse", "of", "exist", "code", "without", "modification", "."]
(h0 / have-mod-91
      :ARG1 (m0 / minimize-01
            :ARG1 (r0 / rewrite-01
                  :ARG1 (c0 / code
                        :ARG1-of (e0 / exist-01))
                  :manner (m1 / modify-01
                        :polarity - )))
      :ARG1 (i0 / inherit-01
            :ARG1 (p0 / program-01
                  :ARG1-of (o0 / orient-01
                        :ARG2 (o1 / object)))))

# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
# ::tokens ["When", "a", "document", "is", "represented", "as", "a", "vector", ",", "each", "dimension", "corresponds", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", ",", "DT", "NN", "VBZ", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["when", "a", "document", "be", "represent", "as", "a", "vector", ",", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(c0 / correspond-02
      :ARG1 (t0 / term
            :ARG1-of (s0 / separate-02))
      :ARG1 (d0 / dimension
            :mod (e0 / each))
      :time (r0 / represent-01
            :ARG1 (d1 / document)
            :ARG2 (v0 / vector)))

# ::snt The vector space model is one of these methods, and it is an algebraic model.
# ::tokens ["The", "vector", "space", "model", "is", "one", "of", "these", "methods", ",", "and", "it", "is", "an", "algebraic", "model", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBZ", "CD", "IN", "DT", "NNS", ",", "CC", "PRP", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["the", "vector", "space", "model", "be", "one", "of", "these", "method", ",", "and", "it", "be", "an", "algebraic", "model", "."]
(a0 / and
      :op1 (i0 / include-91
            :ARG1 (m1 / method
                  :mod (t0 / this))
            :ARG1 (m2 / model
                  :mod (s0 / space
                        :mod (v0 / vector))))
      :op2 (m0 / model
            :mod (a1 / algebraic)))

# ::snt The vector space model has several disadvantages.
# ::tokens ["The", "vector", "space", "model", "has", "several", "disadvantages", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBZ", "JJ", "NNS", "."]
# ::lemmas ["the", "vector", "space", "model", "have", "several", "disadvantage", "."]
(a0 / advantage-01
      :ARG1 (m0 / model
            :mod (s1 / space
                  :mod (v0 / vector)))
      :polarity - 
      :ARG3 (s0 / several))

# ::snt The peropos of inheritance in object oriented programming is to minimize the reuse of existing code without modification.
# ::tokens ["The", "peropos", "of", "inheritance", "in", "object", "oriented", "programming", "is", "to", "minimize", "the", "reuse", "of", "existing", "code", "without", "modification", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNS", "IN", "NN", "IN", "NN", "VBN", "NN", "VBZ", "TO", "VB", "DT", "NN", "IN", "VBG", "NN", "IN", "NN", "."]
# ::lemmas ["the", "peropo", "of", "inheritance", "in", "object", "orient", "programming", "be", "to", "minimize", "the", "reuse", "of", "exist", "code", "without", "modification", "."]
(h0 / have-mod-91
      :ARG1 (m0 / minimize-01
            :ARG1 (r0 / rewrite-01
                  :ARG1 (c0 / code
                        :ARG1-of (e0 / exist-01))
                  :manner (m1 / modify-01
                        :polarity - )))
      :ARG1 (i0 / inherit-01
            :ARG1 (p0 / program-01
                  :ARG1-of (o0 / orient-01
                        :ARG2 (o1 / object)))))

# ::snt The order in which the terms appear in the document is lost in the vector space representation.
# ::tokens ["The", "order", "in", "which", "the", "terms", "appear", "in", "the", "document", "is", "lost", "in", "the", "vector", "space", "representation", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "WDT", "DT", "NNS", "VBP", "IN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "NN", "NN", "."]
# ::lemmas ["the", "order", "in", "which", "the", "term", "appear", "in", "the", "document", "be", "lose", "in", "the", "vector", "space", "representation", "."]
(l0 / lose-02
      :ARG1 (o0 / order
            :time-of (a0 / appear-01
                  :ARG1 (t0 / term)
                  :location (d0 / document)))
      :location (r0 / representation-02
            :ARG0 (s0 / space
                  :mod (v0 / vector))))

# ::snt The value of a vector is non-zero if a term occurs in the document.
# ::tokens ["The", "value", "of", "a", "vector", "is", "non", "-", "zero", "if", "a", "term", "occurs", "in", "the", "document", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "I", "I", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NN", "VBZ", "JJ", "JJ", "CD", "IN", "DT", "NN", "VBZ", "IN", "DT", "NN", "."]
# ::lemmas ["the", "value", "of", "a", "vector", "be", "non", "-", "zero", "if", "a", "term", "occur", "in", "the", "document", "."]
(h0 / have-condition-91
      :ARG1 (e0 / equal-01
            :ARG1 (t0 / thing
                  :ARG2-of (v0 / value-01
                        :ARG1 (v1 / vector)))
            :ARG2 (z0 / zero)
            :polarity - )
      :ARG2 (b0 / be-located-at-91
            :ARG1 (t1 / term)
            :ARG2 (d0 / document)))

# ::snt The similarity measures largely identify the retrieval efficiency of a particular information retrieval system.
# ::tokens ["The", "similarity", "measures", "largely", "identify", "the", "retrieval", "efficiency", "of", "a", "particular", "information", "retrieval", "system", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "NNS", "RB", "VBP", "DT", "NN", "NN", "IN", "DT", "JJ", "NN", "NN", "NN", "."]
# ::lemmas ["the", "similarity", "measure", "largely", "identify", "the", "retrieval", "efficiency", "of", "a", "particular", "information", "retrieval", "system", "."]
(i0 / identify-01
      :ARG1 (r0 / rely-01
            :ARG1 (e0 / efficient-01
                  :ARG1 (s0 / system
                        :mod (p0 / particular)
                        :ARG0-of (r2 / retrieve-01
                              :ARG1 (i1 / information)))))
      :ARG0 (m0 / measure-01
            :ARG1-of (r1 / resemble-01))
      :degree (l0 / large))

# ::snt The vector space model is one of these methods, and it is an algebraic model.
# ::tokens ["The", "vector", "space", "model", "is", "one", "of", "these", "methods", ",", "and", "it", "is", "an", "algebraic", "model", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBZ", "CD", "IN", "DT", "NNS", ",", "CC", "PRP", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["the", "vector", "space", "model", "be", "one", "of", "these", "method", ",", "and", "it", "be", "an", "algebraic", "model", "."]
(a0 / and
      :op1 (i0 / include-91
            :ARG1 (m1 / method
                  :mod (t0 / this))
            :ARG1 (m2 / model
                  :mod (s0 / space
                        :mod (v0 / vector))))
      :op2 (m0 / model
            :mod (a1 / algebraic)))

# ::snt Generalise the structure of an optimal solution 2.
# ::tokens ["Generalise", "the", "structure", "of", "an", "optimal", "solution", "2", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["VB", "DT", "NN", "IN", "DT", "JJ", "NN", "CD", "."]
# ::lemmas ["generalise", "the", "structure", "of", "an", "optimal", "solution", "2", "."]
(g0 / generalize-01
      :ARG1 (s0 / structure-01
            :ARG1 (t0 / thing
                  :mod (o0 / optimal)
                  :ARG2-of (s1 / solve-01)
                  :quant 2 ))
      :ARG0 (y0 / you))

# ::snt The vector space model is one of these methods, and it is an algebraic model.
# ::tokens ["The", "vector", "space", "model", "is", "one", "of", "these", "methods", ",", "and", "it", "is", "an", "algebraic", "model", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBZ", "CD", "IN", "DT", "NNS", ",", "CC", "PRP", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["the", "vector", "space", "model", "be", "one", "of", "these", "method", ",", "and", "it", "be", "an", "algebraic", "model", "."]
(a0 / and
      :op1 (i0 / include-91
            :ARG1 (m1 / method
                  :mod (t0 / this))
            :ARG1 (m2 / model
                  :mod (s0 / space
                        :mod (v0 / vector))))
      :op2 (m0 / model
            :mod (a1 / algebraic)))

# ::snt If the term doesn’t occur within the document, the value in the vector is zero.
# ::tokens ["If", "the", "term", "does", "n\u2019t", "occur", "within", "the", "document", ",", "the", "value", "in", "the", "vector", "is", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["IN", "DT", "NN", "VBZ", "RB", "VB", "IN", "DT", "NN", ",", "DT", "NN", "IN", "DT", "NN", "VBZ", "CD", "."]
# ::lemmas ["if", "the", "term", "do", "not", "occur", "within", "the", "document", ",", "the", "value", "in", "the", "vector", "be", "zero", "."]
(h0 / have-condition-91
      :ARG1 (v0 / value
            :quant (v1 / vector)
            :quant (z0 / zero))
      :ARG2 (b0 / be-located-at-91
            :ARG1 (t0 / term)
            :ARG2 - 
            :ARG2 (w0 / within
                  :op1 (d0 / document))))

# ::snt In probability theory, the prior and conditional probabilities of two random events are related by Bayes' theorem.
# ::tokens ["In", "probability", "theory", ",", "the", "prior", "and", "conditional", "probabilities", "of", "two", "random", "events", "are", "related", "by", "Bayes", "'", "theorem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "NN", ",", "DT", "JJ", "CC", "JJ", "NNS", "IN", "CD", "JJ", "NNS", "VBP", "VBN", "IN", "NNP", "POS", "NN", "."]
# ::lemmas ["in", "probability", "theory", ",", "the", "prior", "and", "conditional", "probability", "of", "two", "random", "event", "be", "relate", "by", "Bayes", "'", "theorem", "."]
(r0 / relate-01
      :ARG1 (t0 / theorem
            :poss (p0 / person
                  :name (n0 / name
                        :op1 "Bayes" )))
      :ARG1 (a0 / and
            :op1 (p1 / prior)
            :op2 (p2 / probability
                  :mod (c0 / condition-01)))
      :location (t1 / theory
            :mod (e0 / event
                  :mod (r1 / random)
                  :quant 2 )
            :mod (p3 / probability)
            :mod (p4 / probability)))

# ::snt The order in which terms appear in the document is lost in a vector space representation.
# ::tokens ["The", "order", "in", "which", "terms", "appear", "in", "the", "document", "is", "lost", "in", "a", "vector", "space", "representation", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "WDT", "NNS", "VBP", "IN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "NN", "NN", "."]
# ::lemmas ["the", "order", "in", "which", "term", "appear", "in", "the", "document", "be", "lose", "in", "a", "vector", "space", "representation", "."]
(l0 / lose-02
      :ARG1 (o0 / order
            :time-of (a0 / appear-01
                  :ARG1 (t0 / term)
                  :location (d0 / document)))
      :location (r0 / representation-02
            :ARG0 (s0 / space
                  :mod (v0 / vector))))

# ::snt Inheritance is one of the basic concepts of Object Oriented Programming.
# ::tokens ["Inheritance", "is", "one", "of", "the", "basic", "concepts", "of", "Object", "Oriented", "Programming", "."]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "CD", "IN", "DT", "JJ", "NNS", "IN", "NN", "NNP", "NNP", "."]
# ::lemmas ["Inheritance", "be", "one", "of", "the", "basic", "concept", "of", "object", "Oriented", "Programming", "."]
(c0 / concept
      :ARG1-of (i0 / include-91
            :ARG2 (c1 / concept
                  :mod (b0 / basic)
                  :part-of (p0 / program-01
                        :ARG1-of (i2 / integrate-01
                              :ARG2 (o0 / object)))))
      :domain (i1 / influence-01))

# ::snt This can be useful when the number of times a word appears is not considered important.
# ::tokens ["This", "can", "be", "useful", "when", "the", "number", "of", "times", "a", "word", "appears", "is", "not", "considered", "important", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "MD", "VB", "JJ", "WRB", "DT", "NN", "IN", "NNS", "DT", "NN", "VBZ", "VBZ", "RB", "VBN", "JJ", "."]
# ::lemmas ["this", "can", "be", "useful", "when", "the", "number", "of", "time", "a", "word", "appear", "be", "not", "consider", "important", "."]
(p0 / possible-01
      :ARG1 (u0 / useful-05
            :ARG1 (t0 / this))
      :condition (c0 / consider-01
            :ARG1 (i0 / important-01
                  :ARG1 (n0 / number
                        :quant-of (a0 / appear-01
                              :ARG1 (w0 / word))))
            :polarity - ))

# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
# ::tokens ["The", "easiest", "way", "to", "look", "at", "inheritance", "is", "as", "an", "\u201c", "\u2026", "is", "a", "kind", "of", "\u201d", "relationship", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJS", "NN", "TO", "VB", "IN", "NN", "VBZ", "IN", "DT", "``", "NFP", "VBZ", "DT", "NN", "IN", "''", "NN", "."]
# ::lemmas ["the", "easy", "way", "to", "look", "at", "inheritance", "be", "as", "an", "\"", "\u2026", "be", "a", "kind", "of", "\"", "relationship", "."]
(w0 / way
      :ARG1-of (s0 / simple-02)
      :ARG1-of (h0 / have-degree-91
            :ARG3 (m0 / more))
      :domain (l0 / look-01
            :ARG1 (i0 / inherit-01))
      :domain (r0 / relation-03
            :mod (k0 / kind)))

# ::snt Vector space representation results in the loss of the order which the terms are in the document.
# ::tokens ["Vector", "space", "representation", "results", "in", "the", "loss", "of", "the", "order", "which", "the", "terms", "are", "in", "the", "document", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "NN", "NN", "NNS", "IN", "DT", "NN", "IN", "DT", "NN", "WDT", "DT", "NNS", "VBP", "IN", "DT", "NN", "."]
# ::lemmas ["vector", "space", "representation", "result", "in", "the", "loss", "of", "the", "order", "which", "the", "term", "be", "in", "the", "document", "."]
(r0 / result-01
      :ARG1 (r1 / represent-01
            :ARG1 (s0 / space
                  :mod (v0 / vector)))
      :ARG2 (l0 / lose-02
            :ARG1 (o0 / order
                  :location-of (t0 / term
                        :location (d0 / document)))))

# ::snt "Thus, the ""program"" is the optimal plan for action that is produced."
# ::tokens ["\"", "Thus", ",", "the", "\"", "\"", "program", "\"", "\"", "is", "the", "optimal", "plan", "for", "action", "that", "is", "produced", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "RB", ",", "DT", "``", "``", "NN", "''", "''", "VBZ", "DT", "JJ", "NN", "IN", "NN", "WDT", "VBZ", "VBN", ".", "''"]
# ::lemmas ["\"", "thus", ",", "the", "\"", "\"", "program", "\"", "\"", "be", "the", "optimal", "plan", "for", "action", "that", "be", "produce", ".", "\""]
(c0 / cause-01
      :ARG1 (p0 / plan-01
            :ARG1 (a0 / act-02)
            :mod (p1 / program)
            :mod (o0 / optimal)
            :ARG1-of (p2 / produce-01
                  :ARG1 a0)))

# ::snt "It doesn't take into account any information about B, so it is ""prior""."
# ::tokens ["\"", "It", "does", "n't", "take", "into", "account", "any", "information", "about", "B", ",", "so", "it", "is", "\"", "\"", "prior", "\"", "\"", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "PRP", "VBZ", "RB", "VB", "IN", "NN", "DT", "NN", "IN", "NN", ",", "CC", "PRP", "VBZ", "``", "``", "JJ", "''", "''", ".", "''"]
# ::lemmas ["\"", "it", "do", "not", "take", "into", "account", "any", "information", "about", "b", ",", "so", "it", "be", "\"", "\"", "prior", "\"", "\"", ".", "\""]
(c0 / cause-01
      :ARG1 (p0 / prior
            :domain (i0 / it))
      :ARG0 (t0 / take-into-account-04
            :ARG1 (i1 / information
                  :topic (a0 / any)
                  :topic (p1 / person
                        :name (n0 / name
                              :op1 "B" )))
            :polarity - ))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tokens ["This", "means", "that", "inheritance", "is", "used", "when", "types", "have", "common", "factors", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "IN", "NN", "VBZ", "VBN", "WRB", "NNS", "VBP", "JJ", "NNS", "CC", "DT", "MD", "VB", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["this", "mean", "that", "inheritance", "be", "use", "when", "type", "have", "common", "factor", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
(m0 / mean-01
      :ARG1 (t0 / this)
      :ARG2 (u0 / use-01
            :ARG1 (i0 / inherit-01)
            :time (a0 / and
                  :op1 (h0 / have-03
                        :ARG1 (f0 / factor
                              :mod (c0 / common))
                        :ARG0 (t1 / type))
                  :op2 (p0 / put-01
                        :ARG1 t1
                        :ARG2 (s0 / superclass)))))

# ::snt Thus, the program is the best plan for action that is produced.
# ::tokens ["Thus", ",", "the", "program", "is", "the", "best", "plan", "for", "action", "that", "is", "produced", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", ",", "DT", "NN", "VBZ", "DT", "JJS", "NN", "IN", "NN", "WDT", "VBZ", "VBN", "."]
# ::lemmas ["thus", ",", "the", "program", "be", "the", "good", "plan", "for", "action", "that", "be", "produce", "."]
(c0 / cause-01
      :ARG1 (p0 / plan-01
            :ARG1 (a0 / act-02)
            :ARG1-of (p1 / program)
            :ARG1-of (h0 / have-degree-91
                  :ARG2 g0
                  :ARG3 (m0 / most))
            :ARG1-of (g0 / good-02)
            :ARG1-of (p2 / produce-01)))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tokens ["This", "means", "that", "inheritance", "is", "used", "when", "types", "have", "common", "factors", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "IN", "NN", "VBZ", "VBN", "WRB", "NNS", "VBP", "JJ", "NNS", "CC", "DT", "MD", "VB", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["this", "mean", "that", "inheritance", "be", "use", "when", "type", "have", "common", "factor", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
(m0 / mean-01
      :ARG1 (t0 / this)
      :ARG2 (u0 / use-01
            :ARG1 (i0 / inherit-01)
            :time (a0 / and
                  :op1 (h0 / have-03
                        :ARG1 (f0 / factor
                              :mod (c0 / common))
                        :ARG0 (t1 / type))
                  :op2 (p0 / put-01
                        :ARG1 t1
                        :ARG2 (s0 / superclass)))))

# ::snt Occasionally it is advantageous to differentiate between these uses, as it is not necessarily noticeable from context.
# ::tokens ["Occasionally", "it", "is", "advantageous", "to", "differentiate", "between", "these", "uses", ",", "as", "it", "is", "not", "necessarily", "noticeable", "from", "context", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "PRP", "VBZ", "JJ", "TO", "VB", "IN", "DT", "NNS", ",", "IN", "PRP", "VBZ", "RB", "RB", "JJ", "IN", "NN", "."]
# ::lemmas ["occasionally", "it", "be", "advantageous", "to", "differentiate", "between", "these", "use", ",", "as", "it", "be", "not", "necessarily", "noticeable", "from", "context", "."]
(a0 / advantage-01
      :ARG1 (d0 / differentiate-01
            :ARG1 (u0 / use-01
                  :mod (t0 / this)))
      :ARG1-of (c0 / cause-01
            :ARG0 (p0 / possible-01
                  :ARG1 (n0 / notice-01
                        :source (c1 / context))
                  :polarity - ))
      :frequency (o0 / occasional))

# ::snt Occasionally it is advantageous to differentiate between these uses, as it is not necessarily noticeable from context.
# ::tokens ["Occasionally", "it", "is", "advantageous", "to", "differentiate", "between", "these", "uses", ",", "as", "it", "is", "not", "necessarily", "noticeable", "from", "context", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "PRP", "VBZ", "JJ", "TO", "VB", "IN", "DT", "NNS", ",", "IN", "PRP", "VBZ", "RB", "RB", "JJ", "IN", "NN", "."]
# ::lemmas ["occasionally", "it", "be", "advantageous", "to", "differentiate", "between", "these", "use", ",", "as", "it", "be", "not", "necessarily", "noticeable", "from", "context", "."]
(a0 / advantage-01
      :ARG1 (d0 / differentiate-01
            :ARG1 (u0 / use-01
                  :mod (t0 / this)))
      :ARG1-of (c0 / cause-01
            :ARG0 (p0 / possible-01
                  :ARG1 (n0 / notice-01
                        :source (c1 / context))
                  :polarity - ))
      :frequency (o0 / occasional))

# ::snt Mathematicians use the word to describe a set of rules which anyone can follow to solve a problem.
# ::tokens ["Mathematicians", "use", "the", "word", "to", "describe", "a", "set", "of", "rules", "which", "anyone", "can", "follow", "to", "solve", "a", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "VBP", "DT", "NN", "TO", "VB", "DT", "NN", "IN", "NNS", "WDT", "NN", "MD", "VB", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["mathematician", "use", "the", "word", "to", "describe", "a", "set", "of", "rule", "which", "anyone", "can", "follow", "to", "solve", "a", "problem", "."]
(u0 / use-01
      :ARG1 (w0 / word)
      :ARG0 (m0 / mathematician)
      :ARG2 (d0 / describe-01
            :ARG0 m0
            :ARG1 (s0 / set
                  :consist-of (r0 / rule)
                  :ARG1-of (f0 / follow-02
                        :ARG0 (a0 / anyone)
                        :ARG1-of (p0 / possible-01)
                        :purpose (s1 / solve-01
                              :ARG0 a0
                              :ARG1 (p1 / problem))))))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tokens ["This", "means", "that", "inheritance", "is", "used", "when", "types", "have", "common", "factors", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "IN", "NN", "VBZ", "VBN", "WRB", "NNS", "VBP", "JJ", "NNS", "CC", "DT", "MD", "VB", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["this", "mean", "that", "inheritance", "be", "use", "when", "type", "have", "common", "factor", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
(m0 / mean-01
      :ARG1 (t0 / this)
      :ARG2 (u0 / use-01
            :ARG1 (i0 / inherit-01)
            :time (a0 / and
                  :op1 (h0 / have-03
                        :ARG1 (f0 / factor
                              :mod (c0 / common))
                        :ARG0 (t1 / type))
                  :op2 (p0 / put-01
                        :ARG1 t1
                        :ARG2 (s0 / superclass)))))

# ::snt Most of these languages provide an “extend” keyword, which is used to subclass another.
# ::tokens ["Most", "of", "these", "languages", "provide", "an", "\u201c", "extend", "\u201d", "keyword", ",", "which", "is", "used", "to", "subclass", "another", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJS", "IN", "DT", "NNS", "VBP", "DT", "``", "NN", "''", "NNP", ",", "WDT", "VBZ", "VBN", "TO", "VB", "DT", "."]
# ::lemmas ["most", "of", "these", "language", "provide", "an", "\"", "extend", "\"", "keyword", ",", "which", "be", "use", "to", "subclass", "another", "."]
(p0 / provide-01
      :ARG1 (k0 / keyword
            :ARG1-of (e0 / extend-01)
            :ARG1-of (u0 / use-01
                  :ARG2 s0
                  :ARG2 (a0 / another))
            :ARG1-of (s0 / subclass))
      :ARG0 (l0 / language
            :ARG1-of (i0 / include-91
                  :ARG2 (l1 / language
                        :mod (t0 / this)))
            :quant (m0 / most)))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tokens ["This", "means", "that", "inheritance", "is", "used", "when", "types", "have", "common", "factors", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "IN", "NN", "VBZ", "VBN", "WRB", "NNS", "VBP", "JJ", "NNS", "CC", "DT", "MD", "VB", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["this", "mean", "that", "inheritance", "be", "use", "when", "type", "have", "common", "factor", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
(m0 / mean-01
      :ARG1 (t0 / this)
      :ARG2 (u0 / use-01
            :ARG1 (i0 / inherit-01)
            :time (a0 / and
                  :op1 (h0 / have-03
                        :ARG1 (f0 / factor
                              :mod (c0 / common))
                        :ARG0 (t1 / type))
                  :op2 (p0 / put-01
                        :ARG1 t1
                        :ARG2 (s0 / superclass)))))

# ::snt This can be useful when the number of times a word appears is not considered important.
# ::tokens ["This", "can", "be", "useful", "when", "the", "number", "of", "times", "a", "word", "appears", "is", "not", "considered", "important", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "MD", "VB", "JJ", "WRB", "DT", "NN", "IN", "NNS", "DT", "NN", "VBZ", "VBZ", "RB", "VBN", "JJ", "."]
# ::lemmas ["this", "can", "be", "useful", "when", "the", "number", "of", "time", "a", "word", "appear", "be", "not", "consider", "important", "."]
(p0 / possible-01
      :ARG1 (u0 / useful-05
            :ARG1 (t0 / this))
      :condition (c0 / consider-01
            :ARG1 (i0 / important-01
                  :ARG1 (n0 / number
                        :quant-of (a0 / appear-01
                              :ARG1 (w0 / word))))
            :polarity - ))

# ::snt There is also Conditional Probability which is usually interested in the way variables relate to each other.
# ::tokens ["There", "is", "also", "Conditional", "Probability", "which", "is", "usually", "interested", "in", "the", "way", "variables", "relate", "to", "each", "other", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBZ", "RB", "NNP", "NNP", "WDT", "VBZ", "RB", "JJ", "IN", "DT", "NN", "NNS", "VBP", "IN", "DT", "JJ", "."]
# ::lemmas ["there", "be", "also", "Conditional", "Probability", "which", "be", "usually", "interested", "in", "the", "way", "variable", "relate", "to", "each", "other", "."]
(i0 / interest-01
      :mod (t0 / thing
            :name (n0 / name
                  :op1 "Conditional" 
                  :op2 "Probability" ))
      :mod (a0 / also)
      :mod (u0 / usual)
      :ARG2 (w0 / way
            :manner-of (r0 / relate-01
                  :ARG1 (v0 / variable)
                  :ARG2 (o0 / other
                        :mod (e0 / each)))))

# ::snt To achieve this, the programmer has to note generalisations and similarities about various aspects of the program.
# ::tokens ["To", "achieve", "this", ",", "the", "programmer", "has", "to", "note", "generalisations", "and", "similarities", "about", "various", "aspects", "of", "the", "program", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["TO", "VB", "DT", ",", "DT", "NN", "VBZ", "TO", "VB", "NNS", "CC", "NNS", "IN", "JJ", "NNS", "IN", "DT", "NN", "."]
# ::lemmas ["to", "achieve", "this", ",", "the", "programmer", "have", "to", "note", "generalisation", "and", "similarity", "about", "various", "aspect", "of", "the", "program", "."]
(o0 / obligate-01
      :ARG1 (p0 / person
            :ARG0-of (p1 / program-01))
      :ARG2 (n0 / note-01
            :ARG0 p0
            :ARG1 (a1 / and
                  :op1 (g0 / generalize-01)
                  :op2 (r0 / resemble-01
                        :ARG1 a2)
                  :topic (a2 / aspect
                        :mod (v0 / various)
                        :part-of (p2 / program))))
      :purpose (a0 / achieve-01
            :ARG0 p0
            :ARG1 (t0 / this)))

# ::snt The method can be abused when people deliberately link to sites in order to raise a site's PageRank.
# ::tokens ["The", "method", "can", "be", "abused", "when", "people", "deliberately", "link", "to", "sites", "in", "order", "to", "raise", "a", "site", "'s", "PageRank", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["DT", "NN", "MD", "VB", "VBN", "WRB", "NNS", "RB", "VBP", "IN", "NNS", "IN", "NN", "TO", "VB", "DT", "NN", "POS", "NNP", "."]
# ::lemmas ["the", "method", "can", "be", "abuse", "when", "people", "deliberately", "link", "to", "site", "in", "order", "to", "raise", "a", "site", "'s", "PageRank", "."]
(p0 / possible-01
      :ARG1 (a0 / abuse-02
            :ARG1 (l0 / link-01
                  :ARG1 (s0 / site)
                  :ARG0 (d0 / deliberate-01)
                  :purpose (r0 / raise-01
                        :ARG0 p1
                        :ARG1 (p2 / publication
                              :name (n0 / name
                                    :op1 "PageRank" )
                              :poss (s1 / site)))
                  :ARG0 (p1 / person))
            :ARG1 (m0 / method)))

# ::snt Google’s payoff is that it gets to track the behaviour of actual users.
# ::tokens ["Google", "\u2019s", "payoff", "is", "that", "it", "gets", "to", "track", "the", "behaviour", "of", "actual", "users", "."]
# ::ner_tags ["ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NN", "VBZ", "IN", "PRP", "VBZ", "TO", "VB", "DT", "NN", "IN", "JJ", "NNS", "."]
# ::lemmas ["Google", "\u2019s", "payoff", "be", "that", "it", "get", "to", "track", "the", "behaviour", "of", "actual", "user", "."]
(p0 / price-01
      :ARG1 (c0 / company
            :name (n0 / name
                  :op1 "Google" )
            :ARG0-of (t0 / track-01
                  :ARG1 (b0 / behave-01
                        :ARG0 (p1 / person
                              :ARG1-of (a0 / actual-02)
                              :ARG0-of (u0 / use-01)))))
      :ARG2 (g0 / get-22
            :ARG0 c0
            :ARG1 t0))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tokens ["This", "means", "that", "inheritance", "is", "used", "when", "types", "have", "common", "factors", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "IN", "NN", "VBZ", "VBN", "WRB", "NNS", "VBP", "JJ", "NNS", "CC", "DT", "MD", "VB", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["this", "mean", "that", "inheritance", "be", "use", "when", "type", "have", "common", "factor", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
(m0 / mean-01
      :ARG1 (t0 / this)
      :ARG2 (u0 / use-01
            :ARG1 (i0 / inherit-01)
            :time (a0 / and
                  :op1 (h0 / have-03
                        :ARG1 (f0 / factor
                              :mod (c0 / common))
                        :ARG0 (t1 / type))
                  :op2 (p0 / put-01
                        :ARG1 t1
                        :ARG2 (s0 / superclass)))))

# ::snt "Thus, the ""program"" is the optimal plan of action that is being produced."
# ::tokens ["\"", "Thus", ",", "the", "\"", "\"", "program", "\"", "\"", "is", "the", "optimal", "plan", "of", "action", "that", "is", "being", "produced", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "RB", ",", "DT", "``", "``", "NN", "''", "''", "VBZ", "DT", "JJ", "NN", "IN", "NN", "WDT", "VBZ", "VBG", "VBN", ".", "''"]
# ::lemmas ["\"", "thus", ",", "the", "\"", "\"", "program", "\"", "\"", "be", "the", "optimal", "plan", "of", "action", "that", "be", "be", "produce", ".", "\""]
(c0 / cause-01
      :ARG1 (p0 / plan-01
            :ARG1 (a0 / act-02)
            :mod (p1 / produce-01)
            :mod (o0 / optimal)
            :domain (p2 / program)))

# ::snt To achieve this, the programmer has to note generalisations and similarities about various aspects of the program.
# ::tokens ["To", "achieve", "this", ",", "the", "programmer", "has", "to", "note", "generalisations", "and", "similarities", "about", "various", "aspects", "of", "the", "program", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["TO", "VB", "DT", ",", "DT", "NN", "VBZ", "TO", "VB", "NNS", "CC", "NNS", "IN", "JJ", "NNS", "IN", "DT", "NN", "."]
# ::lemmas ["to", "achieve", "this", ",", "the", "programmer", "have", "to", "note", "generalisation", "and", "similarity", "about", "various", "aspect", "of", "the", "program", "."]
(o0 / obligate-01
      :ARG1 (p0 / person
            :ARG0-of (p1 / program-01))
      :ARG2 (n0 / note-01
            :ARG0 p0
            :ARG1 (a1 / and
                  :op1 (g0 / generalize-01)
                  :op2 (r0 / resemble-01
                        :ARG1 a2)
                  :topic (a2 / aspect
                        :mod (v0 / various)
                        :part-of (p2 / program))))
      :purpose (a0 / achieve-01
            :ARG0 p0
            :ARG1 (t0 / this)))

# ::snt This can be useful when the number of times a word appears is not considered important.
# ::tokens ["This", "can", "be", "useful", "when", "the", "number", "of", "times", "a", "word", "appears", "is", "not", "considered", "important", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "MD", "VB", "JJ", "WRB", "DT", "NN", "IN", "NNS", "DT", "NN", "VBZ", "VBZ", "RB", "VBN", "JJ", "."]
# ::lemmas ["this", "can", "be", "useful", "when", "the", "number", "of", "time", "a", "word", "appear", "be", "not", "consider", "important", "."]
(p0 / possible-01
      :ARG1 (u0 / useful-05
            :ARG1 (t0 / this))
      :condition (c0 / consider-01
            :ARG1 (i0 / important-01
                  :ARG1 (n0 / number
                        :quant-of (a0 / appear-01
                              :ARG1 (w0 / word))))
            :polarity - ))

# ::snt Mathematicians use the word to describe a set of rules which anyone can follow to solve a problem.
# ::tokens ["Mathematicians", "use", "the", "word", "to", "describe", "a", "set", "of", "rules", "which", "anyone", "can", "follow", "to", "solve", "a", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "VBP", "DT", "NN", "TO", "VB", "DT", "NN", "IN", "NNS", "WDT", "NN", "MD", "VB", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["mathematician", "use", "the", "word", "to", "describe", "a", "set", "of", "rule", "which", "anyone", "can", "follow", "to", "solve", "a", "problem", "."]
(u0 / use-01
      :ARG1 (w0 / word)
      :ARG0 (m0 / mathematician)
      :ARG2 (d0 / describe-01
            :ARG0 m0
            :ARG1 (s0 / set
                  :consist-of (r0 / rule)
                  :ARG1-of (f0 / follow-02
                        :ARG0 (a0 / anyone)
                        :ARG1-of (p0 / possible-01)
                        :purpose (s1 / solve-01
                              :ARG0 a0
                              :ARG1 (p1 / problem))))))

# ::snt The other method is the top down approach which is a method that combines memorization and recursion.
# ::tokens ["The", "other", "method", "is", "the", "top", "down", "approach", "which", "is", "a", "method", "that", "combines", "memorization", "and", "recursion", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "VBZ", "DT", "NN", "JJ", "NN", "WDT", "VBZ", "DT", "NN", "WDT", "VBZ", "NN", "CC", "NN", "."]
# ::lemmas ["the", "other", "method", "be", "the", "top", "down", "approach", "which", "be", "a", "method", "that", "combine", "memorization", "and", "recursion", "."]
(m0 / method
      :mod (o0 / other)
      :domain (a0 / approach-02
            :mod (d0 / down))
      :ARG0-of (c0 / combine-01
            :ARG1 (a1 / and
                  :op2 (r0 / recursion))
            :ARG1 (m1 / memorization)))

# ::snt P(A), or the probability that the student is a girl regardless of any other information.
# ::tokens ["P(A", ")", ",", "or", "the", "probability", "that", "the", "student", "is", "a", "girl", "regardless", "of", "any", "other", "information", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "-RRB-", ",", "CC", "DT", "NN", "IN", "DT", "NN", "VBZ", "DT", "NN", "RB", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["p(a", ")", ",", "or", "the", "probability", "that", "the", "student", "be", "a", "girl", "regardless", "of", "any", "other", "information", "."]
(o0 / or
      :op1 (e0 / exemplify-01)
      :op2 (p0 / probable
            :domain (g0 / girl
                  :domain (p1 / person
                        :ARG0-of (s0 / study-01)))
            :ARG1-of (r0 / regardless-91
                  :ARG2 (i0 / information
                        :mod (o1 / other)
                        :mod (a0 / any)))))

# ::snt To achieve this, the programmer has to note generalisations and similarities about various aspects of the program.
# ::tokens ["To", "achieve", "this", ",", "the", "programmer", "has", "to", "note", "generalisations", "and", "similarities", "about", "various", "aspects", "of", "the", "program", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["TO", "VB", "DT", ",", "DT", "NN", "VBZ", "TO", "VB", "NNS", "CC", "NNS", "IN", "JJ", "NNS", "IN", "DT", "NN", "."]
# ::lemmas ["to", "achieve", "this", ",", "the", "programmer", "have", "to", "note", "generalisation", "and", "similarity", "about", "various", "aspect", "of", "the", "program", "."]
(o0 / obligate-01
      :ARG1 (p0 / person
            :ARG0-of (p1 / program-01))
      :ARG2 (n0 / note-01
            :ARG0 p0
            :ARG1 (a1 / and
                  :op1 (g0 / generalize-01)
                  :op2 (r0 / resemble-01
                        :ARG1 a2)
                  :topic (a2 / aspect
                        :mod (v0 / various)
                        :part-of (p2 / program))))
      :purpose (a0 / achieve-01
            :ARG0 p0
            :ARG1 (t0 / this)))

# ::snt However an object cannot be cast to a class which is no relative of it.
# ::tokens ["However", "an", "object", "can", "not", "be", "cast", "to", "a", "class", "which", "is", "no", "relative", "of", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "DT", "NN", "MD", "RB", "VB", "VBN", "IN", "DT", "NN", "WDT", "VBZ", "DT", "NN", "IN", "PRP", "."]
# ::lemmas ["however", "an", "object", "can", "not", "be", "cast", "to", "a", "class", "which", "be", "no", "relative", "of", "it", "."]
(h0 / have-concession-91
      :ARG1 (p0 / possible-01
            :ARG1 (c0 / cast-01
                  :ARG1 (o0 / object
                        :ARG1-of (r0 / related-04
                              :ARG2 c1
                              :polarity - ))
                  :ARG2 (c1 / class))
            :polarity - ))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tokens ["This", "means", "that", "inheritance", "is", "used", "when", "types", "have", "common", "factors", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "IN", "NN", "VBZ", "VBN", "WRB", "NNS", "VBP", "JJ", "NNS", "CC", "DT", "MD", "VB", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["this", "mean", "that", "inheritance", "be", "use", "when", "type", "have", "common", "factor", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
(m0 / mean-01
      :ARG1 (t0 / this)
      :ARG2 (u0 / use-01
            :ARG1 (i0 / inherit-01)
            :time (a0 / and
                  :op1 (h0 / have-03
                        :ARG1 (f0 / factor
                              :mod (c0 / common))
                        :ARG0 (t1 / type))
                  :op2 (p0 / put-01
                        :ARG1 t1
                        :ARG2 (s0 / superclass)))))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tokens ["This", "means", "that", "inheritance", "is", "used", "when", "types", "have", "common", "factors", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "IN", "NN", "VBZ", "VBN", "WRB", "NNS", "VBP", "JJ", "NNS", "CC", "DT", "MD", "VB", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["this", "mean", "that", "inheritance", "be", "use", "when", "type", "have", "common", "factor", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
(m0 / mean-01
      :ARG1 (t0 / this)
      :ARG2 (u0 / use-01
            :ARG1 (i0 / inherit-01)
            :time (a0 / and
                  :op1 (h0 / have-03
                        :ARG1 (f0 / factor
                              :mod (c0 / common))
                        :ARG0 (t1 / type))
                  :op2 (p0 / put-01
                        :ARG1 t1
                        :ARG2 (s0 / superclass)))))

# ::snt The way that a 'term' is defined depends on the application.
# ::tokens ["The", "way", "that", "a", "'", "term", "'", "is", "defined", "depends", "on", "the", "application", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "WDT", "DT", "``", "NN", "''", "VBZ", "VBN", "VBZ", "IN", "DT", "NN", "."]
# ::lemmas ["the", "way", "that", "a", "'", "term", "'", "be", "define", "depend", "on", "the", "application", "."]
(d0 / depend-01
      :ARG1 (w0 / way
            :manner-of (d1 / define-01
                  :ARG1 (t0 / term)))
      :ARG1 (a0 / application))

# ::snt "Therefore, the ""program"" is the optimal plan for action that is produced."
# ::tokens ["\"", "Therefore", ",", "the", "\"", "\"", "program", "\"", "\"", "is", "the", "optimal", "plan", "for", "action", "that", "is", "produced", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "RB", ",", "DT", "``", "``", "NN", "''", "''", "VBZ", "DT", "JJ", "NN", "IN", "NN", "WDT", "VBZ", "VBN", ".", "''"]
# ::lemmas ["\"", "therefore", ",", "the", "\"", "\"", "program", "\"", "\"", "be", "the", "optimal", "plan", "for", "action", "that", "be", "produce", ".", "\""]
(c0 / cause-01
      :ARG1 (p0 / plan-01
            :ARG1 (a0 / act-02)
            :mod (p1 / program)
            :mod (o0 / optimal)
            :ARG1-of (p2 / produce-01
                  :ARG1 a0)))

# ::snt Without a proof of correctness, such an algorithm is likely to fail.
# ::tokens ["Without", "a", "proof", "of", "correctness", ",", "such", "an", "algorithm", "is", "likely", "to", "fail", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "NN", "IN", "NN", ",", "PDT", "DT", "NN", "VBZ", "JJ", "TO", "VB", "."]
# ::lemmas ["without", "a", "proof", "of", "correctness", ",", "such", "an", "algorithm", "be", "likely", "to", "fail", "."]
(l0 / likely-01
      :ARG1 (f0 / fail-01
            :ARG1 (a0 / algorithm
                  :mod (s0 / such)))
      :condition (p0 / prove-01
            :ARG1 (c0 / correct-02)
            :polarity - ))

# ::snt The other method is the top down approach which is a method that combines memorization and recursion.
# ::tokens ["The", "other", "method", "is", "the", "top", "down", "approach", "which", "is", "a", "method", "that", "combines", "memorization", "and", "recursion", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "VBZ", "DT", "NN", "JJ", "NN", "WDT", "VBZ", "DT", "NN", "WDT", "VBZ", "NN", "CC", "NN", "."]
# ::lemmas ["the", "other", "method", "be", "the", "top", "down", "approach", "which", "be", "a", "method", "that", "combine", "memorization", "and", "recursion", "."]
(m0 / method
      :mod (o0 / other)
      :domain (a0 / approach-02
            :mod (d0 / down))
      :ARG0-of (c0 / combine-01
            :ARG1 (a1 / and
                  :op2 (r0 / recursion))
            :ARG1 (m1 / memorization)))

# ::snt Thus, the program is the best plan for action that is produced.
# ::tokens ["Thus", ",", "the", "program", "is", "the", "best", "plan", "for", "action", "that", "is", "produced", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", ",", "DT", "NN", "VBZ", "DT", "JJS", "NN", "IN", "NN", "WDT", "VBZ", "VBN", "."]
# ::lemmas ["thus", ",", "the", "program", "be", "the", "good", "plan", "for", "action", "that", "be", "produce", "."]
(c0 / cause-01
      :ARG1 (p0 / plan-01
            :ARG1 (a0 / act-02)
            :ARG1-of (p1 / program)
            :ARG1-of (h0 / have-degree-91
                  :ARG2 g0
                  :ARG3 (m0 / most))
            :ARG1-of (g0 / good-02)
            :ARG1-of (p2 / produce-01)))

# ::snt This can be useful when the number of times a word appears is not considered important.
# ::tokens ["This", "can", "be", "useful", "when", "the", "number", "of", "times", "a", "word", "appears", "is", "not", "considered", "important", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "MD", "VB", "JJ", "WRB", "DT", "NN", "IN", "NNS", "DT", "NN", "VBZ", "VBZ", "RB", "VBN", "JJ", "."]
# ::lemmas ["this", "can", "be", "useful", "when", "the", "number", "of", "time", "a", "word", "appear", "be", "not", "consider", "important", "."]
(p0 / possible-01
      :ARG1 (u0 / useful-05
            :ARG1 (t0 / this))
      :condition (c0 / consider-01
            :ARG1 (i0 / important-01
                  :ARG1 (n0 / number
                        :quant-of (a0 / appear-01
                              :ARG1 (w0 / word))))
            :polarity - ))

# ::snt Then, using this, the best overall path can be found, thereby demonstrating the dynamic programming principle.
# ::tokens ["Then", ",", "using", "this", ",", "the", "best", "overall", "path", "can", "be", "found", ",", "thereby", "demonstrating", "the", "dynamic", "programming", "principle", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", ",", "VBG", "DT", ",", "DT", "JJS", "JJ", "NN", "MD", "VB", "VBN", ",", "RB", "VBG", "DT", "JJ", "NN", "NN", "."]
# ::lemmas ["then", ",", "use", "this", ",", "the", "good", "overall", "path", "can", "be", "find", ",", "thereby", "demonstrate", "the", "dynamic", "programming", "principle", "."]
(c0 / cause-01
      :ARG1 (p0 / possible-01
            :ARG1 (f0 / find-01
                  :ARG1 (p2 / path
                        :mod (o0 / overall)
                        :ARG1-of (g0 / good-02)
                        :ARG1-of (h0 / have-degree-91
                              :ARG2 g0
                              :ARG3 (m0 / most)))
                  :time (t0 / then)
                  :manner (u0 / use-01
                        :ARG1 (t1 / this))))
      :ARG0 (d0 / demonstrate-01
            :ARG1 (p1 / principle
                  :mod (p3 / program-01
                        :mod (d1 / dynamic)))))

# ::snt To achieve this, the programmer has to note generalisations and similarities about various aspects of the program.
# ::tokens ["To", "achieve", "this", ",", "the", "programmer", "has", "to", "note", "generalisations", "and", "similarities", "about", "various", "aspects", "of", "the", "program", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["TO", "VB", "DT", ",", "DT", "NN", "VBZ", "TO", "VB", "NNS", "CC", "NNS", "IN", "JJ", "NNS", "IN", "DT", "NN", "."]
# ::lemmas ["to", "achieve", "this", ",", "the", "programmer", "have", "to", "note", "generalisation", "and", "similarity", "about", "various", "aspect", "of", "the", "program", "."]
(o0 / obligate-01
      :ARG1 (p0 / person
            :ARG0-of (p1 / program-01))
      :ARG2 (n0 / note-01
            :ARG0 p0
            :ARG1 (a1 / and
                  :op1 (g0 / generalize-01)
                  :op2 (r0 / resemble-01
                        :ARG1 a2)
                  :topic (a2 / aspect
                        :mod (v0 / various)
                        :part-of (p2 / program))))
      :purpose (a0 / achieve-01
            :ARG0 p0
            :ARG1 (t0 / this)))

# ::snt The further down an inheritance tree you get, the more specific the classes become.
# ::tokens ["The", "further", "down", "an", "inheritance", "tree", "you", "get", ",", "the", "more", "specific", "the", "classes", "become", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "IN", "DT", "NN", "NN", "PRP", "VBP", ",", "DT", "RBR", "JJ", "DT", "NNS", "VBP", "."]
# ::lemmas ["the", "further", "down", "an", "inheritance", "tree", "you", "get", ",", "the", "more", "specific", "the", "class", "become", "."]
(c0 / correlate-91
      :ARG1 (m0 / more
            :ARG3-of (h0 / have-quant-91
                  :ARG1 (t0 / tree
                        :mod (g0 / get-05
                              :ARG0 (y0 / you)
                              :ARG2 (d0 / down))
                        :mod (i0 / inherit-01))))
      :ARG2 (m1 / more
            :ARG3-of (h1 / have-quant-91
                  :ARG1 (s0 / specific-02
                        :ARG1 (c1 / class))
                  :ARG1 (b0 / become-01))))

# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
# ::tokens ["The", "easiest", "way", "to", "look", "at", "inheritance", "is", "as", "an", "\u201c", "\u2026", "is", "a", "kind", "of", "\u201d", "relationship", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJS", "NN", "TO", "VB", "IN", "NN", "VBZ", "IN", "DT", "``", "NFP", "VBZ", "DT", "NN", "IN", "''", "NN", "."]
# ::lemmas ["the", "easy", "way", "to", "look", "at", "inheritance", "be", "as", "an", "\"", "\u2026", "be", "a", "kind", "of", "\"", "relationship", "."]
(w0 / way
      :ARG1-of (s0 / simple-02)
      :ARG1-of (h0 / have-degree-91
            :ARG3 (m0 / more))
      :domain (l0 / look-01
            :ARG1 (i0 / inherit-01))
      :domain (r0 / relation-03
            :mod (k0 / kind)))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tokens ["This", "means", "that", "inheritance", "is", "used", "when", "types", "have", "common", "factors", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "IN", "NN", "VBZ", "VBN", "WRB", "NNS", "VBP", "JJ", "NNS", "CC", "DT", "MD", "VB", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["this", "mean", "that", "inheritance", "be", "use", "when", "type", "have", "common", "factor", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
(m0 / mean-01
      :ARG1 (t0 / this)
      :ARG2 (u0 / use-01
            :ARG1 (i0 / inherit-01)
            :time (a0 / and
                  :op1 (h0 / have-03
                        :ARG1 (f0 / factor
                              :mod (c0 / common))
                        :ARG0 (t1 / type))
                  :op2 (p0 / put-01
                        :ARG1 t1
                        :ARG2 (s0 / superclass)))))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
# ::tokens ["This", "means", "that", "inheritance", "is", "used", "when", "types", "have", "common", "factors", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "IN", "NN", "VBZ", "VBN", "WRB", "NNS", "VBP", "JJ", "NNS", "CC", "DT", "MD", "VB", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["this", "mean", "that", "inheritance", "be", "use", "when", "type", "have", "common", "factor", "and", "these", "would", "be", "put", "into", "the", "superclass", "."]
(m0 / mean-01
      :ARG1 (t0 / this)
      :ARG2 (u0 / use-01
            :ARG1 (i0 / inherit-01)
            :time (a0 / and
                  :op1 (h0 / have-03
                        :ARG1 (f0 / factor
                              :mod (c0 / common))
                        :ARG0 (t1 / type))
                  :op2 (p0 / put-01
                        :ARG1 t1
                        :ARG2 (s0 / superclass)))))

# ::snt Spain Princess Testifies in Historic Fraud Probe
# ::tokens ["Spain", "Princess", "Testifies", "in", "Historic", "Fraud", "Probe"]
# ::ner_tags ["GPE", "O", "O", "O", "ORG", "ORG", "ORG"]
# ::ner_iob ["B", "O", "O", "O", "B", "I", "I"]
# ::pos_tags ["NNP", "NNP", "VBZ", "IN", "NNP", "NNP", "NNP"]
# ::lemmas ["Spain", "Princess", "testify", "in", "Historic", "Fraud", "Probe"]
(t0 / testify-01
      :ARG1 (t1 / thing
            :mod (n0 / name
                  :op1 "Historic" 
                  :op2 "Fraud" 
                  :op3 "Probe" ))
      :ARG0 (p0 / person
            :mod (c0 / country
                  :name (n1 / name
                        :op1 "Spain" ))
            :ARG0-of (h0 / have-org-role-91
                  :ARG2 (p1 / prince))))

# ::snt Senate confirms Obama nominee to key appeals court
# ::tokens ["Senate", "confirms", "Obama", "nominee", "to", "key", "appeals", "court"]
# ::ner_tags ["ORG", "O", "ORG", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "NNP", "NN", "IN", "JJ", "NNS", "NN"]
# ::lemmas ["Senate", "confirm", "Obama", "nominee", "to", "key", "appeal", "court"]
(c0 / confirm-01
      :ARG1 (n0 / nominate-01
            :ARG1 (p0 / person
                  :name (n2 / name
                        :op1 "Obama" ))
            :ARG2 (c1 / court
                  :mod (a0 / appeal-01)
                  :ARG1-of (k0 / key-02)))
      :ARG0 (g0 / government-organization
            :name (n1 / name
                  :op1 "Senate" )))

# ::snt U.N. rights chief presses Egypt on Mursi detention
# ::tokens ["U.N.", "rights", "chief", "presses", "Egypt", "on", "Mursi", "detention"]
# ::ner_tags ["ORG", "O", "O", "O", "GPE", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "O", "B", "O", "B", "O"]
# ::pos_tags ["NNP", "NNS", "NN", "VBZ", "NNP", "IN", "NNP", "NN"]
# ::lemmas ["U.N.", "right", "chief", "press", "Egypt", "on", "Mursi", "detention"]
(p0 / press-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "Egypt" ))
      :ARG0 (p1 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (o0 / organization
                        :name (n2 / name
                              :op1 "U.N." ))
                  :ARG2 (c1 / chief
                        :purpose (r0 / right-05))))
      :ARG2 (d0 / detain-01
            :ARG1 (p2 / person
                  :name (n1 / name
                        :op1 "Mursi" ))))

# ::snt US Senate confirms Janet Yellen as US Federal Reserve chief
# ::tokens ["US", "Senate", "confirms", "Janet", "Yellen", "as", "US", "Federal", "Reserve", "chief"]
# ::ner_tags ["ORG", "ORG", "O", "PERSON", "PERSON", "O", "ORG", "ORG", "ORG", "O"]
# ::ner_iob ["B", "I", "O", "B", "I", "O", "B", "I", "I", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "NNP", "NNP", "IN", "NNP", "NNP", "NNP", "NN"]
# ::lemmas ["US", "Senate", "confirm", "Janet", "Yellen", "as", "US", "Federal", "Reserve", "chief"]
(c0 / confirm-01
      :ARG1 (p0 / person
            :ARG0-of (n0 / name
                  :op1 "Janet" 
                  :op2 "Yellen" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG2 (g1 / government-organization
                        :name (n3 / name
                              :op1 "Federal" 
                              :op3 "Reserve" ))
                  :ARG2 (c2 / chief)))
      :ARG0 (g0 / government-organization
            :mod (c1 / country
                  :name (n2 / name
                        :op1 "US" ))
            :name (n1 / name
                  :op1 "Senate" )))

# ::snt Syrian Rebel Groups Battle Each Other in North
# ::tokens ["Syrian", "Rebel", "Groups", "Battle", "Each", "Other", "in", "North"]
# ::ner_tags ["NORP", "O", "PERSON", "PERSON", "PERSON", "PERSON", "O", "GPE"]
# ::ner_iob ["B", "O", "B", "I", "I", "I", "O", "B"]
# ::pos_tags ["JJ", "NNP", "NNPS", "NNP", "NNP", "JJ", "IN", "NNP"]
# ::lemmas ["Syrian", "Rebel", "Groups", "Battle", "Each", "Other", "in", "North"]
(b0 / battle-01
      :ARG1 (m0 / military
            :mod (n1 / name
                  :op1 "Each" 
                  :op2 "Groups" )
            :mod (c0 / country
                  :name (n2 / name
                        :op1 "Syria" )))
      :location (n0 / north))

# ::snt Rocks, Tear Gas Fly as Thai Protests Heat Up
# ::tokens ["Rocks", ",", "Tear", "Gas", "Fly", "as", "Thai", "Protests", "Heat", "Up"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "NORP", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNS", ",", "NNP", "NN", "NNP", "IN", "NNP", "NNP", "VBP", "RP"]
# ::lemmas ["rock", ",", "Tear", "gas", "Fly", "as", "Thai", "Protests", "heat", "up"]
(a0 / and
      :op1 (r0 / rock)
      :op2 (f0 / flame-01
            :ARG1 (r1 / rain-01
                  :mode imperative ))
      :op3 (h0 / heat-01
            :ARG1 (p0 / protest-01
                  :ARG1 (c0 / country
                        :name (n0 / name
                              :op1 "Thailand" )))
            :ARG0 (y0 / you)
            :mode imperative ))

# ::snt Boston bombing suspect buried in Virginia
# ::tokens ["Boston", "bombing", "suspect", "buried", "in", "Virginia"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "NN", "NN", "VBN", "IN", "NNP"]
# ::lemmas ["Boston", "bombing", "suspect", "bury", "in", "Virginia"]
(b0 / bury-01
      :ARG1 (p0 / person
            :ARG2-of (b1 / bomb-01
                  :location (c0 / city
                        :name (n1 / name
                              :op1 "Boston" )))
            :ARG2-of (s1 / suspect-01))
      :ARG2 (s0 / state
            :name (n0 / name
                  :op1 "Virginia" )))

# ::snt Six dead in Philippine restaurant blast
# ::tokens ["Six", "dead", "in", "Philippine", "restaurant", "blast"]
# ::ner_tags ["CARDINAL", "O", "O", "NORP", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O"]
# ::pos_tags ["CD", "JJ", "IN", "JJ", "NN", "NN"]
# ::lemmas ["Six", "dead", "in", "Philippine", "restaurant", "blast"]
(d0 / die-01
      :ARG1 (p0 / person
            :quant 6 )
      :location (r0 / restaurant
            :location (c0 / country
                  :name (n0 / name
                        :op1 "Philippines" ))))

# ::snt China army newspaper hits out at US's PRISM programme
# ::tokens ["China", "army", "newspaper", "hits", "out", "at", "US", "'s", "PRISM", "programme"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", "NN", "NN", "VBZ", "RP", "IN", "NNP", "POS", "NNP", "NN"]
# ::lemmas ["China", "army", "newspaper", "hit", "out", "at", "US", "'s", "PRISM", "programme"]
(g0 / go-out-17
      :ARG1 (n0 / newspaper
            :name (n1 / name
                  :op1 "Army" ))
      :ARG1 (p0 / program
            :poss (c0 / country
                  :name (n2 / name
                        :op1 "China" ))
            :poss (c1 / country
                  :name (n3 / name
                        :op1 "US" ))))

# ::snt Two killed in Bahrain car explosion
# ::tokens ["Two", "killed", "in", "Bahrain", "car", "explosion"]
# ::ner_tags ["CARDINAL", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O"]
# ::pos_tags ["CD", "VBN", "IN", "NNP", "NN", "NN"]
# ::lemmas ["Two", "kill", "in", "Bahrain", "car", "explosion"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant 2 )
      :ARG1-of (c0 / cause-01
            :ARG0 (e0 / explode-01
                  :ARG1 (c1 / car
                        :location (c2 / country
                              :name (n0 / name
                                    :op1 "Bahrain" ))))))

# ::snt Russia warns it will respond if interests attacked in Ukraine
# ::tokens ["Russia", "warns", "it", "will", "respond", "if", "interests", "attacked", "in", "Ukraine"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "VBZ", "PRP", "MD", "VB", "IN", "NNS", "VBN", "IN", "NNP"]
# ::lemmas ["Russia", "warn", "it", "will", "respond", "if", "interest", "attack", "in", "Ukraine"]
(w0 / warn-01
      :ARG1 (r0 / respond-01
            :ARG0 c0
            :condition (a0 / attack-01
                  :ARG1 (i0 / interest)
                  :location (c1 / country
                        :name (n1 / name
                              :op1 "Ukraine" ))))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Russia" )))

# ::snt Couple marry in the UK's first Scientology wedding
# ::tokens ["Couple", "marry", "in", "the", "UK", "'s", "first", "Scientology", "wedding"]
# ::ner_tags ["O", "O", "O", "O", "GPE", "O", "ORDINAL", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "B", "O", "O"]
# ::pos_tags ["NN", "NN", "IN", "DT", "NNP", "POS", "JJ", "NNP", "NN"]
# ::lemmas ["couple", "marry", "in", "the", "UK", "'s", "first", "Scientology", "wedding"]
(m0 / marry-01
      :ARG1 (c0 / couple)
      :ARG2 (w0 / wed-01
            :mod (o0 / ordinal-entity
                  :value 1 )
            :mod (c1 / city
                  :name (n0 / name
                        :op1 "Scientology" )
                  :location (c2 / country
                        :name (n1 / name
                              :op1 "UK" )))))

# ::snt Russian opposition leader under house arrest
# ::tokens ["Russian", "opposition", "leader", "under", "house", "arrest"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "NN", "IN", "NN", "NN"]
# ::lemmas ["Russian", "opposition", "leader", "under", "house", "arrest"]
(a0 / arrest-01
      :ARG1 (p0 / person
            :ARG0-of (c0 / country
                  :name (n0 / name
                        :op1 "Russia" ))
            :ARG0-of (l0 / lead-02
                  :ARG1 (o0 / oppose-01)))
      :location (h0 / house))

# ::snt Senate confirms Janet Yellen as chair of US Federal Reserve
# ::tokens ["Senate", "confirms", "Janet", "Yellen", "as", "chair", "of", "US", "Federal", "Reserve"]
# ::ner_tags ["ORG", "O", "PERSON", "PERSON", "O", "O", "O", "ORG", "ORG", "ORG"]
# ::ner_iob ["B", "O", "B", "I", "O", "O", "O", "B", "I", "I"]
# ::pos_tags ["NNP", "VBZ", "NNP", "NNP", "IN", "NN", "IN", "NNP", "NNP", "NNP"]
# ::lemmas ["Senate", "confirm", "Janet", "Yellen", "as", "chair", "of", "US", "Federal", "Reserve"]
(c0 / confirm-01
      :ARG1 (h0 / have-org-role-91
            :ARG0 p0
            :ARG2 (c1 / chairman)
            :ARG1 (g1 / government-organization
                  :name (n2 / name
                        :op1 "US" 
                        :op2 "Federal" 
                        :op3 "Reserve" )))
      :ARG0 (g0 / government-organization
            :name (n0 / name
                  :op1 "Senate" ))
      :ARG2 (p0 / person
            :name (n1 / name
                  :op1 "Janet" 
                  :op2 "Yellen" )))

# ::snt Venezuela lawmakers brawl amid election tensions
# ::tokens ["Venezuela", "lawmakers", "brawl", "amid", "election", "tensions"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNS", "VBP", "IN", "NN", "NNS"]
# ::lemmas ["Venezuela", "lawmaker", "brawl", "amid", "election", "tension"]
(d0 / duel-01
      :ARG0 (t0 / tension
            :mod (e0 / elect-01))
      :ARG0 (p0 / person
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Venezuela" ))
            :ARG0-of (l0 / legislate-01)))

# ::snt North Korea Warns Foreigners in South, Advising Evacuation
# ::tokens ["North", "Korea", "Warns", "Foreigners", "in", "South", ",", "Advising", "Evacuation"]
# ::ner_tags ["GPE", "GPE", "O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NNP", "NNPS", "IN", "NNP", ",", "NNP", "NNP"]
# ::lemmas ["North", "Korea", "Warns", "Foreigners", "in", "South", ",", "Advising", "Evacuation"]
(w0 / war-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "North" 
                  :op2 "Korea" ))
      :ARG1 (p0 / person
            :ARG0-of (c1 / country
                  :name (n1 / name
                        :op1 "South" 
                        :op2 "Korea" ))
            :ARG0-of (i0 / intervene-01
                  :ARG1 (e0 / evacuate-01
                        :ARG1 (p1 / person
                              :mod (f0 / foreign))))))

# ::snt Israel confirms strike on Syria targeted weapons
# ::tokens ["Israel", "confirms", "strike", "on", "Syria", "targeted", "weapons"]
# ::ner_tags ["GPE", "O", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "NN", "IN", "NNP", "VBD", "NNS"]
# ::lemmas ["Israel", "confirm", "strike", "on", "Syria", "target", "weapon"]
(c0 / confirm-01
      :ARG1 (s0 / strike-01
            :ARG0 c1
            :ARG1 (c2 / country
                  :name (n1 / name
                        :op1 "Syria" ))
            :ARG2 (t0 / target-01
                  :ARG1 (w0 / weapon)))
      :ARG0 (c1 / country
            :name (n0 / name
                  :op1 "Israel" )))

# ::snt Death toll in Syria now tops 100,000
# ::tokens ["Death", "toll", "in", "Syria", "now", "tops", "100,000"]
# ::ner_tags ["O", "O", "O", "GPE", "O", "O", "CARDINAL"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "B"]
# ::pos_tags ["NN", "NN", "IN", "NNP", "RB", "VBZ", "CD"]
# ::lemmas ["death", "toll", "in", "Syria", "now", "top", "100,000"]
(t0 / top-01
      :ARG1 (t1 / toll
            :mod (d0 / die-01)
            :location (c0 / country
                  :name (n1 / name
                        :op1 "Syria" )))
      :ARG2 100000 
      :time (n0 / now))

# ::snt Iran Nuclear Talks Enter Third Day
# ::tokens ["Iran", "Nuclear", "Talks", "Enter", "Third", "Day"]
# ::ner_tags ["GPE", "O", "O", "O", "DATE", "DATE"]
# ::ner_iob ["B", "O", "O", "O", "B", "I"]
# ::pos_tags ["NNP", "NNP", "NNS", "VBP", "JJ", "NN"]
# ::lemmas ["Iran", "Nuclear", "talk", "enter", "Third", "Day"]
(e0 / enter-01
      :ARG1 (d0 / day
            :ord (c0 / country
                  :name (n1 / name
                        :op1 "Iran" ))
            :ord (o0 / ordinal-entity
                  :value 3 ))
      :ARG0 (t0 / talk-01
            :mod (n0 / nucleus)))

# ::snt Jurors find Jodi Arias eligible for death penalty
# ::tokens ["Jurors", "find", "Jodi", "Arias", "eligible", "for", "death", "penalty"]
# ::ner_tags ["O", "O", "PERSON", "PERSON", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "I", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "VBP", "NNP", "NNP", "JJ", "IN", "NN", "NN"]
# ::lemmas ["juror", "find", "Jodi", "Arias", "eligible", "for", "death", "penalty"]
(f0 / find-02
      :ARG1 (q0 / qualify-02
            :ARG1 (p0 / person
                  :ARG1-of (n0 / name
                        :op1 "Jodi" 
                        :op2 "Arias" )
                  :ARG1-of (p1 / penalize-01
                        :manner (d0 / die-01)))
            :ARG2 (c0 / cause-01
                  :ARG1 p0
                  :ARG0 p1))
      :ARG0 (j0 / juror))

# ::snt Over 100 dead as typhoon slams central Philippines
# ::tokens ["Over", "100", "dead", "as", "typhoon", "slams", "central", "Philippines"]
# ::ner_tags ["O", "CARDINAL", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "B", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["IN", "CD", "JJ", "IN", "NN", "NNS", "JJ", "NNP"]
# ::lemmas ["over", "100", "dead", "as", "typhoon", "slam", "central", "Philippines"]
(s0 / slam-02
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "Philippines" )
            :part (c1 / center))
      :ARG0 (t0 / typhoon)
      :ARG1 (d0 / die-01
            :ARG1 (p0 / person
                  :quant (o0 / over
                        :op1 100 ))))

# ::snt US Supreme Court limits president's recess appointments power
# ::tokens ["US", "Supreme", "Court", "limits", "president", "'s", "recess", "appointments", "power"]
# ::ner_tags ["ORG", "ORG", "ORG", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "I", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NNP", "VBZ", "NNP", "POS", "NN", "NNS", "NN"]
# ::lemmas ["US", "Supreme", "Court", "limit", "president", "'s", "recess", "appointment", "power"]
(l0 / limit-01
      :ARG1 (p0 / power-01
            :ARG1 (p1 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG2 (p2 / president)))
            :ARG2 (r0 / recess))
      :ARG0 (g0 / government-organization
            :mod (c0 / country
                  :name (n1 / name
                        :op1 "US" ))
            :name (n0 / name
                  :op1 "Supreme" 
                  :op2 "Court" )))

# ::snt What makes India vote? Jaipur Lit Fest debates
# ::tokens ["What", "makes", "India", "vote", "?", "Jaipur", "Lit", "Fest", "debates"]
# ::ner_tags ["O", "O", "GPE", "O", "O", "PERSON", "PERSON", "PERSON", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["WP", "VBZ", "NNP", "VB", ".", "NNP", "NNP", "NNP", "NNS"]
# ::lemmas ["what", "make", "India", "vote", "?", "Jaipur", "Lit", "Fest", "debate"]
(d0 / debate-01
      :ARG0 (a0 / amr-unknown
            :ARG0-of (m0 / make-02
                  :ARG1 (v0 / vote-01
                        :ARG0 (c0 / country
                              :name (n1 / name
                                    :op1 "India" )))))
      :ARG0 (t0 / team
            :name (n0 / name
                  :op1 "Jaipur" 
                  :op2 "Fest" )))

# ::snt Hamas Urges Hizbullah to Pull Fighters Out of Syria
# ::tokens ["Hamas", "Urges", "Hizbullah", "to", "Pull", "Fighters", "Out", "of", "Syria"]
# ::ner_tags ["ORG", "O", "ORG", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "VBZ", "NNP", "TO", "VB", "NNS", "IN", "IN", "NNP"]
# ::lemmas ["Hamas", "urge", "Hizbullah", "to", "pull", "fighter", "out", "of", "Syria"]
(u0 / urge-01
      :ARG1 (o0 / organization
            :name (n0 / name
                  :op1 "Hamas" ))
      :ARG0 (p0 / person
            :ARG0-of (n1 / name
                  :op1 "Hizbullah" ))
      :ARG2 (p1 / pull-out-02
            :ARG0 p0
            :ARG1 (p2 / person
                  :ARG0-of (c0 / country
                        :name (n2 / name
                              :op1 "Syria" ))
                  :ARG0-of (f0 / fight-01))))

# ::snt Stocks edge lower following retail earnings
# ::tokens ["Stocks", "edge", "lower", "following", "retail", "earnings"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "VBP", "RBR", "VBG", "JJ", "NNS"]
# ::lemmas ["stock", "edge", "lower", "follow", "retail", "earning"]
(v0 / verge-01
      :ARG1 (l0 / low-04
            :ARG2-of (h0 / have-degree-91
                  :ARG1 s0
                  :ARG3 (m0 / more)))
      :ARG1 (s0 / stock)
      :ARG1-of (f0 / follow-01
            :ARG2 (e0 / earn-01
                  :mod (r0 / retail-01))))

# ::snt Mt Gox reveals 200,000 'forgotten' bitcoin haul
# ::tokens ["Mt", "Gox", "reveals", "200,000", "'", "forgotten", "'", "bitcoin", "haul"]
# ::ner_tags ["PERSON", "PERSON", "O", "CARDINAL", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "CD", "``", "VBN", "''", "NN", "NN"]
# ::lemmas ["Mt", "Gox", "reveal", "200,000", "'", "forget", "'", "bitcoin", "haul"]
(r0 / reveal-01
      :ARG1 (b0 / bitcoin
            :ARG1-of (f0 / forget-01)
            :quant 200000 )
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Mt" 
                  :op2 "Gox" )))

# ::snt Chinese lunar rover lands on moon
# ::tokens ["Chinese", "lunar", "rover", "lands", "on", "moon"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "JJ", "NN", "NNS", "IN", "NN"]
# ::lemmas ["Chinese", "lunar", "rover", "land", "on", "moon"]
(l0 / land-01
      :ARG1 (r0 / rover
            :mod (c0 / country)
            :mod (m1 / moon)
            :mod (n0 / name
                  :op1 "China" ))
      :location (m0 / moon))

# ::snt Spain approves new restrictive abortion law
# ::tokens ["Spain", "approves", "new", "restrictive", "abortion", "law"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "JJ", "JJ", "NN", "NN"]
# ::lemmas ["Spain", "approve", "new", "restrictive", "abortion", "law"]
(a0 / approve-01
      :ARG1 (l0 / law
            :mod (r0 / restrictive)
            :ARG1-of (n0 / new-01)
            :topic (a1 / abort-01))
      :ARG0 (c0 / country
            :name (n1 / name
                  :op1 "Spain" )))

# ::snt German ambassador's Athens residence shot at
# ::tokens ["German", "ambassador", "'s", "Athens", "residence", "shot", "at"]
# ::ner_tags ["NORP", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "POS", "NNP", "NN", "VBD", "IN"]
# ::lemmas ["German", "ambassador", "'s", "Athens", "residence", "shoot", "at"]
(s0 / shoot-02
      :ARG1 (r0 / reside-01
            :ARG0 (p0 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG1 (a0 / ambassador
                              :mod (c1 / country
                                    :name (n1 / name
                                          :op1 "Germany" )))))
            :location (c0 / city
                  :name (n0 / name
                        :op1 "Athens" ))))

# ::snt Napolitano elected for second term as Italy president
# ::tokens ["Napolitano", "elected", "for", "second", "term", "as", "Italy", "president"]
# ::ner_tags ["ORG", "O", "O", "ORDINAL", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "VBD", "IN", "JJ", "NN", "IN", "NNP", "NN"]
# ::lemmas ["Napolitano", "elect", "for", "second", "term", "as", "Italy", "president"]
(e0 / elect-01
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Napolitano" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c0 / country
                        :name (n1 / name
                              :op1 "Italy" ))
                  :ARG2 (p1 / president)))
      :ARG2 (t0 / term
            :ord (o0 / ordinal-entity
                  :value 2 )))

# ::snt North Korea says to put US citizen on trial
# ::tokens ["North", "Korea", "says", "to", "put", "US", "citizen", "on", "trial"]
# ::ner_tags ["GPE", "GPE", "O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "TO", "VB", "NNP", "NN", "IN", "NN"]
# ::lemmas ["North", "Korea", "say", "to", "put", "US", "citizen", "on", "trial"]
(s0 / say-01
      :ARG1 (p0 / put-01
            :ARG0 c0
            :ARG1 (t0 / try-02
                  :ARG1 c1)
            :ARG1 (c1 / citizen
                  :mod (c2 / country
                        :name (n1 / name
                              :op1 "US" ))))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "North" 
                  :op2 "Korea" )))

# ::snt Mandela spends third day in hospital
# ::tokens ["Mandela", "spends", "third", "day", "in", "hospital"]
# ::ner_tags ["O", "O", "DATE", "DATE", "O", "O"]
# ::ner_iob ["O", "O", "B", "I", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "JJ", "NN", "IN", "NN"]
# ::lemmas ["Mandela", "spend", "third", "day", "in", "hospital"]
(s0 / spend-02
      :ARG1 (d0 / day
            :ord (o0 / ordinal-entity
                  :value 3 ))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Mandela" ))
      :ARG2 (b0 / be-located-at-91
            :ARG1 p0
            :ARG2 (h0 / hospital)))

# ::snt Murray ends 77-year wait for British win
# ::tokens ["Murray", "ends", "77-year", "wait", "for", "British", "win"]
# ::ner_tags ["O", "O", "DATE", "O", "O", "NORP", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "VBZ", "CD", "NN", "IN", "JJ", "NN"]
# ::lemmas ["Murray", "end", "77-year", "wait", "for", "British", "win"]
(e0 / end-01
      :ARG1 (w0 / wait-01
            :ARG2 (w1 / win-01
                  :ARG0 (c0 / country
                        :name (n1 / name
                              :op1 "Britain" )))
            :duration (t0 / temporal-quantity
                  :quant (y0 / year)
                  :quant 15 ))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Murray" )))

# ::snt Pope calls for action on climate change in draft encyclical
# ::tokens ["Pope", "calls", "for", "action", "on", "climate", "change", "in", "draft", "encyclical"]
# ::ner_tags ["PERSON", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "IN", "NN", "IN", "NN", "NN", "IN", "NN", "NN"]
# ::lemmas ["Pope", "call", "for", "action", "on", "climate", "change", "in", "draft", "encyclical"]
(c0 / call-03
      :ARG1 (a0 / act-02
            :ARG1 (c1 / change-01
                  :ARG1 (c2 / climate)))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Pope" ))
      :location (e0 / encyclical
            :ARG1-of (d0 / draft-01)))

# ::snt Who Is Jihadi John?
# ::tokens ["Who", "Is", "Jihadi", "John", "?"]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "NNP", "NNP", "."]
# ::lemmas ["who", "be", "Jihadi", "John", "?"]
(p0 / person
      :name (n0 / name
            :op1 "Jihadi" 
            :op2 "John" )
      :domain (a0 / amr-unknown))

# ::snt Iran, IAEA Officials Meet Ahead of March Nuclear Deadline
# ::tokens ["Iran", ",", "IAEA", "Officials", "Meet", "Ahead", "of", "March", "Nuclear", "Deadline"]
# ::ner_tags ["GPE", "O", "ORG", "O", "O", "O", "O", "DATE", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", ",", "NNP", "NNS", "VBP", "RB", "IN", "NNP", "NNP", "NNP"]
# ::lemmas ["Iran", ",", "IAEA", "official", "meet", "ahead", "of", "March", "Nuclear", "Deadline"]
(m0 / meet-03
      :ARG1 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (o0 / organization
                        :name (n1 / name
                              :op1 "IAEA" ))
                  :ARG2 (o1 / official)))
      :time (a0 / ahead
            :op1 (d0 / date-entity
                  :month 3 ))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Iran" )))

# ::snt U.S., EU Widen Sanctions On Russia
# ::tokens ["U.S.", ",", "EU", "Widen", "Sanctions", "On", "Russia"]
# ::ner_tags ["GPE", "O", "ORG", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "B"]
# ::pos_tags ["NNP", ",", "NNP", "NNP", "NNPS", "IN", "NNP"]
# ::lemmas ["U.S.", ",", "EU", "Widen", "Sanctions", "on", "Russia"]
(s0 / sanction-02
      :ARG1 (c0 / country)
      :ARG0 (o0 / organization
            :name (n1 / name
                  :op1 "EU" ))
      :ARG1-of (c1 / country
            :name (n2 / name
                  :op1 "Russia" ))
      :ARG1-of (n0 / name
            :op1 "U.S." ))

# ::snt US Attorney General Holder resigns
# ::tokens ["US", "Attorney", "General", "Holder", "resigns"]
# ::ner_tags ["GPE", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NNP", "NNP", "VBZ"]
# ::lemmas ["US", "Attorney", "General", "Holder", "resign"]
(r0 / resign-01
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Holder" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c0 / country
                        :name (n1 / name
                              :op1 "US" ))
                  :ARG2 (a0 / attorney
                        :mod (g0 / general)))))

# ::snt AbbVie Sours on $55B Shire Deal After Tax Changes
# ::tokens ["AbbVie", "Sours", "on", "$", "55B", "Shire", "Deal", "After", "Tax", "Changes"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "IN", "$", "CD", "NNPS", "NN", "IN", "NNP", "NNPS"]
# ::lemmas ["AbbVie", "sour", "on", "$", "55b", "Shire", "deal", "after", "Tax", "Changes"]
(s0 / support-01
      :ARG1 (d0 / deal-01
            :time (a0 / after
                  :op1 (c0 / change-01
                        :ARG1 (t0 / tax-01)))
            :ARG2 (m0 / monetary-quantity
                  :quant (d1 / dollar)
                  :quant 500000000000 )
            :ARG2 (n0 / name
                  :op1 "AbbVie" ))
      :ARG0 (p0 / person))

# ::snt Hawaii preps for first hurricane in 22 years
# ::tokens ["Hawaii", "preps", "for", "first", "hurricane", "in", "22", "years"]
# ::ner_tags ["GPE", "O", "O", "ORDINAL", "O", "O", "DATE", "DATE"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "B", "I"]
# ::pos_tags ["NNP", "NNS", "IN", "JJ", "NN", "IN", "CD", "NNS"]
# ::lemmas ["Hawaii", "prep", "for", "first", "hurricane", "in", "22", "years"]
(r0 / report-01
      :ARG1 (h0 / hurricane
            :ord (o0 / ordinal-entity
                  :value 1 
                  :range (t0 / temporal-quantity
                        :quant 22 
                        :unit (y0 / year))))
      :ARG0 (s0 / state
            :name (n0 / name
                  :op1 "Hawaii" )))

# ::snt Oil falls in Asian trade
# ::tokens ["Oil", "falls", "in", "Asian", "trade"]
# ::ner_tags ["O", "O", "O", "NORP", "O"]
# ::ner_iob ["O", "O", "O", "B", "O"]
# ::pos_tags ["NN", "VBZ", "IN", "JJ", "NN"]
# ::lemmas ["oil", "fall", "in", "Asian", "trade"]
(f0 / fall-01
      :ARG1 (o0 / oil)
      :location (t0 / trade-01
            :location (c0 / continent
                  :name (n0 / name
                        :op1 "Asia" ))))

# ::snt Driver backs into stroller with child, drives off
# ::tokens ["Driver", "backs", "into", "stroller", "with", "child", ",", "drives", "off"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "VBZ", "IN", "NN", "IN", "NN", ",", "VBZ", "RP"]
# ::lemmas ["driver", "back", "into", "stroller", "with", "child", ",", "drive", "off"]
(a0 / and
      :op1 (b0 / back-off-11
            :ARG1 (p0 / person
                  :ARG0-of (h0 / have-rel-role-91
                        :ARG2 (c0 / child))))
      :op2 (d0 / drive-01
            :ARG0 p0
            :ARG1 (p1 / person
                  :ARG0-of (d1 / drive-01))
            :direction (o0 / off)))

# ::snt Uganda's president signs anti-gay bill
# ::tokens ["Uganda", "'s", "president", "signs", "anti", "-", "gay", "bill"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NN", "VBZ", "JJ", "JJ", "JJ", "NN"]
# ::lemmas ["Uganda", "'s", "president", "sign", "anti", "-", "gay", "bill"]
(s0 / sign-01
      :ARG1 (b0 / bill
            :ARG0-of (o0 / oppose-01
                  :ARG1 (g0 / gay-01)))
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c0 / country
                        :name (n0 / name
                              :op1 "Uganda" ))
                  :ARG2 (p1 / president))))

# ::snt Silvio Berlusconi expelled from Italy's parliament
# ::tokens ["Silvio", "Berlusconi", "expelled", "from", "Italy", "'s", "parliament"]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBD", "IN", "NNP", "POS", "NN"]
# ::lemmas ["Silvio", "Berlusconi", "expel", "from", "Italy", "'s", "parliament"]
(e0 / expel-01
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Silvio" 
                  :op2 "Berlusconi" ))
      :ARG2 (g0 / government-organization
            :poss (c0 / country
                  :name (n2 / name
                        :op1 "Italy" ))
            :name (n1 / name
                  :op1 "Parliament" )))

# ::snt Hosni Mubarak retrial adjourned until 8 June
# ::tokens ["Hosni", "Mubarak", "retrial", "adjourned", "until", "8", "June"]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "O", "DATE", "DATE"]
# ::ner_iob ["B", "I", "O", "O", "O", "B", "I"]
# ::pos_tags ["NNP", "NNP", "NN", "VBD", "IN", "CD", "NNP"]
# ::lemmas ["Hosni", "Mubarak", "retrial", "adjourn", "until", "8", "June"]
(u0 / uphold-01
      :ARG1 (m0 / marry-01
            :ARG1 (p0 / person
                  :name (n0 / name
                        :op1 "Hosni" 
                        :op2 "Mubarak" )))
      :time (u1 / until
            :op1 (d0 / date-entity
                  :month 6 
                  :day 8 )))

# ::snt Egypt protesters defy cabinet threat to end sit-ins
# ::tokens ["Egypt", "protesters", "defy", "cabinet", "threat", "to", "end", "sit", "-", "ins"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNS", "VBP", "NN", "NN", "TO", "VB", "NN", "HYPH", "NNS"]
# ::lemmas ["Egypt", "protester", "defy", "cabinet", "threat", "to", "end", "sit", "-", "in"]
(d0 / defy-01
      :ARG1 (t0 / threaten-01
            :ARG0 (e0 / end-01
                  :ARG1 (m0 / meet-up-04))
            :ARG0 (g0 / government-organization
                  :name (n0 / name
                        :op1 "Cabinet" )))
      :ARG0 (p0 / person
            :mod (p1 / protest-01)
            :location (c0 / country
                  :name (n1 / name
                        :op1 "Egypt" ))))

# ::snt Qatar's emir hands power to his son
# ::tokens ["Qatar", "'s", "emir", "hands", "power", "to", "his", "son"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NN", "VBZ", "NN", "IN", "PRP$", "NN"]
# ::lemmas ["Qatar", "'s", "emir", "hand", "power", "to", "his", "son"]
(h0 / hand-01
      :ARG1 (p0 / power)
      :ARG0 (p1 / person
            :ARG0-of (h1 / have-rel-role-91
                  :ARG1 (c0 / country
                        :name (n0 / name
                              :op1 "Qatar" ))
                  :ARG2 (s0 / son)))
      :ARG2 (p2 / person
            :ARG0-of (h2 / have-rel-role-91
                  :ARG2 (e0 / emir))))

# ::snt Egypt braces for 'Friday of anger' after carnage
# ::tokens ["Egypt", "braces", "for", "'", "Friday", "of", "anger", "'", "after", "carnage"]
# ::ner_tags ["GPE", "O", "O", "DATE", "DATE", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "I", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "IN", "''", "NNP", "IN", "NN", "''", "IN", "NN"]
# ::lemmas ["Egypt", "brace", "for", "'", "Friday", "of", "anger", "'", "after", "carnage"]
(a0 / accelerate-01
      :ARG1 (c0 / country
            :ARG1-of (a2 / anger-01)
            :name (n0 / name
                  :op1 "Egypt" ))
      :time (a1 / after
            :op1 (c1 / carnage))
      :time (d0 / date-entity
            :weekday (f0 / friday)))

# ::snt Red Sox Beat Tigers 5-2 to Advance to World Series
# ::tokens ["Red", "Sox", "Beat", "Tigers", "5", "-", "2", "to", "Advance", "to", "World", "Series"]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "O", "O", "O", "O", "O", "O", "EVENT", "EVENT"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I"]
# ::pos_tags ["NNP", "NNP", "NNP", "NNP", "CD", "SYM", "CD", "IN", "NN", "IN", "NNP", "NNP"]
# ::lemmas ["Red", "Sox", "Beat", "Tigers", "5", "-", "2", "to", "advance", "to", "World", "Series"]
(b0 / beat-03
      :ARG1 (t0 / team
            :name (n0 / name
                  :op1 "Red" 
                  :op2 "Sox" ))
      :ARG0 (t1 / team
            :name (n1 / name
                  :op1 "Tigers" ))
      :ARG2 (b1 / between
            :op1 5 
            :op2 2 )
      :ARG2 (a0 / advance-01
            :ARG4 (g0 / game
                  :name (n2 / name
                        :op1 "World" 
                        :op2 "Series" ))))

# ::snt China lands Jade Rabbit robot rover on Moon
# ::tokens ["China", "lands", "Jade", "Rabbit", "robot", "rover", "on", "Moon"]
# ::ner_tags ["GPE", "O", "PERSON", "PERSON", "O", "O", "O", "PERSON"]
# ::ner_iob ["B", "O", "B", "I", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "VBZ", "NNP", "NNP", "NN", "NN", "IN", "NNP"]
# ::lemmas ["China", "land", "Jade", "Rabbit", "robot", "rover", "on", "Moon"]
(l0 / land-01
      :ARG1 (r0 / rover
            :mod (r1 / robot)
            :name (n0 / name
                  :op1 "China" ))
      :ARG0 (c0 / country)
      :location (m0 / moon
            :name (n1 / name
                  :op1 "Jade" 
                  :op2 "Rabbit" )))

# ::snt Ukrainian parliament dismisses president
# ::tokens ["Ukrainian", "parliament", "dismisses", "president"]
# ::ner_tags ["NORP", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "VBZ", "NN"]
# ::lemmas ["Ukrainian", "parliament", "dismiss", "president"]
(d0 / dismiss-02
      :ARG1 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG2 (p1 / president)))
      :ARG0 (g0 / government-organization
            :mod (c0 / country
                  :name (n1 / name
                        :op1 "Ukraine" ))
            :name (n0 / name
                  :op1 "Parliament" )))

# ::snt Captain of sunken South Korean ferry arrested
# ::tokens ["Captain", "of", "sunken", "South", "Korean", "ferry", "arrested"]
# ::ner_tags ["O", "O", "O", "NORP", "NORP", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "I", "O", "O"]
# ::pos_tags ["NN", "IN", "VBN", "JJ", "JJ", "NN", "VBD"]
# ::lemmas ["captain", "of", "sink", "South", "Korean", "ferry", "arrest"]
(p0 / person
      :ARG0-of (a0 / arrest-01
            :ARG2 (f0 / ferry
                  :mod (c1 / country
                        :name (n0 / name
                              :op1 "South" 
                              :op2 "Korea" ))
                  :ARG1-of (s0 / sink-01)))
      :ARG0-of (h0 / have-org-role-91
            :ARG2 (c0 / captain)))

# ::snt Communist rebels ambush Philippine police, kill 7
# ::tokens ["Communist", "rebels", "ambush", "Philippine", "police", ",", "kill", "7"]
# ::ner_tags ["NORP", "O", "O", "NORP", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNS", "VBP", "JJ", "NNS", ",", "VB", "CD"]
# ::lemmas ["Communist", "rebel", "ambush", "Philippine", "police", ",", "kill", "7"]
(a0 / and
      :op1 (a1 / ambush-01
            :ARG1 (p0 / police
                  :mod (c0 / country
                        :name (n0 / name
                              :op1 "Philippines" )))
            :ARG0 (p1 / person
                  :mod (p3 / political-movement
                        :name (n1 / name
                              :op1 "communism" ))
                  :ARG0-of (r0 / rebel-01)))
      :op2 (k0 / kill-01
            :ARG0 p1
            :ARG1 (p2 / person
                  :quant 7 )))

# ::snt Woman dies while riding roller coaster in Texas
# ::tokens ["Woman", "dies", "while", "riding", "roller", "coaster", "in", "Texas"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NN", "VBZ", "IN", "VBG", "NN", "NN", "IN", "NNP"]
# ::lemmas ["woman", "die", "while", "ride", "roller", "coaster", "in", "Texas"]
(d0 / die-01
      :ARG1 (w0 / woman)
      :time (r0 / ride-01
            :ARG0 w0
            :ARG1 (c0 / coaster
                  :mod (r1 / roller))
            :location (s0 / state
                  :name (n0 / name
                        :op1 "Texas" ))))

# ::snt Nobel author Doris Lessing dies at 94
# ::tokens ["Nobel", "author", "Doris", "Lessing", "dies", "at", "94"]
# ::ner_tags ["WORK_OF_ART", "O", "PERSON", "PERSON", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "I", "O", "O", "O"]
# ::pos_tags ["NNP", "NN", "NNP", "NNP", "VBZ", "IN", "CD"]
# ::lemmas ["Nobel", "author", "Doris", "Lessing", "die", "at", "94"]
(d0 / die-01
      :ARG1 (p0 / person
            :ARG0-of (a1 / author-01
                  :ARG1-of (a2 / award
                        :name (n1 / name
                              :op1 "Nobel" )))
            :name (n0 / name
                  :op1 "Doris" 
                  :op2 "Lessing" ))
      :time (a0 / age-01
            :ARG2 (t0 / temporal-quantity
                  :quant (y0 / year)
                  :quant 94 )))

# ::snt Twitter reports blocking in Venezuela
# ::tokens ["Twitter", "reports", "blocking", "in", "Venezuela"]
# ::ner_tags ["ORG", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "B"]
# ::pos_tags ["NN", "NNS", "VBG", "IN", "NNP"]
# ::lemmas ["Twitter", "report", "block", "in", "Venezuela"]
(r0 / report-01
      :ARG1 (b0 / block-01
            :location (c0 / country
                  :name (n1 / name
                        :op1 "Venezuela" )))
      :ARG0 (p0 / publication
            :name (n0 / name
                  :op1 "Twitter" )))

# ::snt British stuntman fell to his death in wing suit mishap
# ::tokens ["British", "stuntman", "fell", "to", "his", "death", "in", "wing", "suit", "mishap"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "VBD", "IN", "PRP$", "NN", "IN", "NN", "NN", "NN"]
# ::lemmas ["British", "stuntman", "fall", "to", "his", "death", "in", "wing", "suit", "mishap"]
(f0 / fall-07
      :ARG1 (s0 / stuntman
            :mod (c1 / country
                  :name (n0 / name
                        :op1 "Great" 
                        :op2 "Britain" )))
      :ARG1-of (c0 / cause-01
            :ARG1 s0
            :ARG0 (m0 / mishap
                  :mod (s1 / suit)))
      :ARG2 (d0 / die-01
            :ARG1 s0))

# ::snt Euro crisis is over, says France's Francois Hollande
# ::tokens ["Euro", "crisis", "is", "over", ",", "says", "France", "'s", "Francois", "Hollande"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NN", "NN", "VBZ", "RB", ",", "VBZ", "NNP", "POS", "NNP", "NNP"]
# ::lemmas ["euro", "crisis", "be", "over", ",", "say", "France", "'s", "Francois", "Hollande"]
(s0 / say-01
      :ARG1 (o0 / over-01
            :ARG1 (c0 / crisis
                  :mod (e0 / euro)))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Francois" 
                  :op2 "Hollande" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c1 / country
                        :name (n1 / name
                              :op1 "France" )))))

# ::snt White diamond breaks record in Hong Kong auction
# ::tokens ["White", "diamond", "breaks", "record", "in", "Hong", "Kong", "auction"]
# ::ner_tags ["O", "O", "O", "O", "O", "GPE", "GPE", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "I", "O"]
# ::pos_tags ["JJ", "NN", "NNS", "NN", "IN", "NNP", "NNP", "NN"]
# ::lemmas ["white", "diamond", "break", "record", "in", "Hong", "Kong", "auction"]
(b0 / break-01
      :ARG1 (r0 / record)
      :ARG0 (d0 / diamond
            :ARG1-of (w0 / white-03))
      :location (c0 / city
            :name (n0 / name
                  :op1 "Hong" 
                  :op2 "Kong" )))

# ::snt Treasury proposal sees 1.5% increase in income tax
# ::tokens ["Treasury", "proposal", "sees", "1.5", "%", "increase", "in", "income", "tax"]
# ::ner_tags ["ORG", "O", "O", "PERCENT", "PERCENT", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "I", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NN", "VBZ", "CD", "NN", "NN", "IN", "NN", "NN"]
# ::lemmas ["Treasury", "proposal", "see", "1.5", "%", "increase", "in", "income", "tax"]
(s0 / see-01
      :ARG1 (i0 / increase-01
            :ARG1 (t1 / tax-01
                  :ARG3 (i1 / income))
            :ARG2 (p0 / percentage-entity
                  :value 1.5 ))
      :ARG0 (t0 / thing
            :ARG1-of (p1 / propose-01
                  :ARG0 (g0 / government-organization
                        :name (n0 / name
                              :op1 "Treasury" )))))

# ::snt PSNI failed RUC officers, tribunal told
# ::tokens ["PSNI", "failed", "RUC", "officers", ",", "tribunal", "told"]
# ::ner_tags ["ORG", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBD", "NNP", "NNS", ",", "NN", "VBD"]
# ::lemmas ["PSNI", "fail", "RUC", "officer", ",", "tribunal", "tell"]
(t0 / tell-01
      :ARG1 (f0 / fail-01
            :ARG1 (p0 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG1 (h1 / have-org-role-91
                              :ARG1 (o2 / organization
                                    :name (n1 / name
                                          :op1 "RUC" )))
                        :ARG1 (o0 / organization
                              :ARG1-of (o3 / officer)
                              :name (n0 / name
                                    :op1 "PSNI" ))
                        :ARG2 (o1 / officer))))
      :ARG0 (t1 / tribunal))

# ::snt Police helicopter crashes into Scottish pub
# ::tokens ["Police", "helicopter", "crashes", "into", "Scottish", "pub"]
# ::ner_tags ["O", "O", "O", "O", "NORP", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NN", "NN", "NNS", "IN", "JJ", "NN"]
# ::lemmas ["police", "helicopter", "crash", "into", "Scottish", "pub"]
(c0 / crash-01
      :ARG1 (h0 / helicopter
            :mod (p1 / police))
      :location (p0 / pub
            :mod (c1 / country
                  :name (n0 / name
                        :op1 "Scotland" ))))

# ::snt US ups pressure on Israel as UN demands Gaza truce
# ::tokens ["US", "ups", "pressure", "on", "Israel", "as", "UN", "demands", "Gaza", "truce"]
# ::ner_tags ["GPE", "O", "O", "O", "GPE", "O", "ORG", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "O", "B", "O", "B", "O", "B", "O"]
# ::pos_tags ["NNP", "VBZ", "NN", "IN", "NNP", "IN", "NNP", "VBZ", "NNP", "VB"]
# ::lemmas ["US", "up", "pressure", "on", "Israel", "as", "UN", "demand", "Gaza", "truce"]
(p0 / pressure-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "Israel" ))
      :ARG0 (c1 / country
            :name (n1 / name
                  :op1 "US" ))
      :ARG1-of (c2 / cause-01
            :ARG0 (d0 / demand-01
                  :ARG1 (t0 / truce
                        :mod (c3 / country-region
                              :name (n3 / name
                                    :op1 "Gaza" )))
                  :ARG0 (o0 / organization
                        :name (n2 / name
                              :op1 "UN" )))))

# ::snt Australian PM says 'Very confident' signals are from black box
# ::tokens ["Australian", "PM", "says", "'", "Very", "confident", "'", "signals", "are", "from", "black", "box"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNP", "VBZ", "``", "RB", "JJ", "''", "NNS", "VBP", "IN", "JJ", "NN"]
# ::lemmas ["Australian", "PM", "say", "'", "very", "confident", "'", "signal", "be", "from", "black", "box"]
(s0 / say-01
      :ARG1 (s1 / signal-07
            :ARG1 (c0 / confident-01
                  :degree (v0 / very))
            :source (b0 / box
                  :ARG1-of (b1 / black-04)))
      :ARG0 (p0 / person
            :mod (c1 / country
                  :name (n0 / name
                        :op1 "Australia" ))
            :ARG0-of (h0 / have-org-role-91
                  :ARG2 (m0 / minister
                        :mod (p1 / prime)))))

# ::snt Philippe becomes king of Belgium
# ::tokens ["Philippe", "becomes", "king", "of", "Belgium"]
# ::ner_tags ["O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "VBZ", "NN", "IN", "NNP"]
# ::lemmas ["Philippe", "become", "king", "of", "Belgium"]
(b0 / become-01
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Philippe" ))
      :ARG2 (p1 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c0 / country
                        :name (n1 / name
                              :op1 "Belgium" ))
                  :ARG2 (k0 / king))))

# ::snt India anti-graft party takes charge in New Delhi
# ::tokens ["India", "anti", "-", "graft", "party", "takes", "charge", "in", "New", "Delhi"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "GPE", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "B", "I"]
# ::pos_tags ["NNP", "JJ", "JJ", "JJ", "NN", "VBZ", "NN", "IN", "NNP", "NNP"]
# ::lemmas ["India", "anti", "-", "graft", "party", "take", "charge", "in", "New", "Delhi"]
(c0 / charge-05
      :ARG0 (p0 / political-party
            :name (n0 / name
                  :op1 "India" )
            :ARG0-of (o0 / oppose-01
                  :ARG1 (g0 / graft)))
      :location (c1 / city
            :name (n1 / name
                  :op1 "New" 
                  :op2 "Delhi" )))

# ::snt More than 100 injured in Texas plant blast
# ::tokens ["More", "than", "100", "injured", "in", "Texas", "plant", "blast"]
# ::ner_tags ["CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "I", "I", "O", "O", "B", "O", "O"]
# ::pos_tags ["JJR", "IN", "CD", "VBN", "IN", "NNP", "NN", "NN"]
# ::lemmas ["More", "than", "100", "injure", "in", "Texas", "plant", "blast"]
(i0 / injure-01
      :ARG1 (p0 / plant
            :location (s0 / state
                  :name (n0 / name
                        :op1 "Texas" )))
      :ARG1 (p1 / person
            :quant (m0 / more-than
                  :op1 100 )))

# ::snt UN court convicts 6 Bosnian Croats of atrocities
# ::tokens ["UN", "court", "convicts", "6", "Bosnian", "Croats", "of", "atrocities"]
# ::ner_tags ["ORG", "O", "O", "CARDINAL", "PERSON", "PERSON", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "B", "I", "O", "O"]
# ::pos_tags ["NNP", "NN", "VBZ", "CD", "JJ", "NNS", "IN", "NNS"]
# ::lemmas ["UN", "court", "convict", "6", "Bosnian", "Croats", "of", "atrocity"]
(c0 / convict-01
      :ARG1 (p0 / person
            :mod (c2 / country
                  :name (n0 / name
                        :op1 "Morocco" ))
            :quant 6 )
      :ARG0 (c1 / court
            :mod (o0 / organization
                  :name (n1 / name
                        :op1 "UN" )))
      :ARG2 (a0 / atrocity))

# ::snt Saudi man with pressure cooker arrested at Detroit airport
# ::tokens ["Saudi", "man", "with", "pressure", "cooker", "arrested", "at", "Detroit", "airport"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["JJ", "NN", "IN", "NN", "NN", "VBN", "IN", "NNP", "NN"]
# ::lemmas ["Saudi", "man", "with", "pressure", "cooker", "arrest", "at", "Detroit", "airport"]
(m0 / man
      :mod (c0 / country
            :name (n0 / name
                  :op1 "Saudi" 
                  :op2 "Arabia" ))
      :ARG1-of (a0 / arrest-01
            :location (c1 / city
                  :name (n1 / name
                        :op1 "Detroit" )))
      :ARG0-of (h0 / have-03
            :ARG1 (c2 / cooker
                  :mod (p0 / pressure))))

# ::snt Rallies demand 'Justice for Trayvon'
# ::tokens ["Rallies", "demand", "'", "Justice", "for", "Trayvon", "'"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "VBP", "''", "NNP", "IN", "NNP", "''"]
# ::lemmas ["rally", "demand", "'", "Justice", "for", "Trayvon", "'"]
(d0 / demand-01
      :ARG1 (r0 / rally-01)
      :ARG1 (j0 / justice
            :beneficiary (p0 / person
                  :name (n0 / name
                        :op1 "Trayvon" ))))

# ::snt Hagel, Dempsey face Congress over defense budget
# ::tokens ["Hagel", ",", "Dempsey", "face", "Congress", "over", "defense", "budget"]
# ::ner_tags ["ORG", "O", "O", "O", "ORG", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", ",", "NNP", "NN", "NNP", "IN", "NN", "NN"]
# ::lemmas ["Hagel", ",", "Dempsey", "face", "Congress", "over", "defense", "budget"]
(f0 / face-01
      :ARG1 (b0 / budget
            :ARG2-of (d0 / defend-01))
      :ARG0 (a0 / and
            :op1 (p0 / person
                  :name (n1 / name
                        :op1 "Hagel" ))
            :op2 (p1 / person
                  :name (n2 / name
                        :op1 "Dempsey" )))
      :ARG1 (g0 / government-organization
            :name (n0 / name
                  :op1 "Congress" )))

# ::snt Ukrainian presidency says deal reached at crisis talks
# ::tokens ["Ukrainian", "presidency", "says", "deal", "reached", "at", "crisis", "talks"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "VBZ", "NN", "VBN", "IN", "NN", "NNS"]
# ::lemmas ["Ukrainian", "presidency", "say", "deal", "reach", "at", "crisis", "talk"]
(s0 / say-01
      :ARG1 (r0 / reach-01
            :ARG1 (d0 / deal-01)
            :location (t0 / talk-01
                  :ARG0 (c0 / crisis)))
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c1 / country
                        :name (n0 / name
                              :op1 "Ukraine" ))
                  :ARG2 (p1 / presidency))))

# ::snt Syria's PM escapes assassination try, regime says
# ::tokens ["Syria", "'s", "PM", "escapes", "assassination", "try", ",", "regime", "says"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NNP", "VBZ", "NN", "NN", ",", "NN", "VBZ"]
# ::lemmas ["Syria", "'s", "PM", "escape", "assassination", "try", ",", "regime", "say"]
(s0 / say-01
      :ARG1 (e0 / escape-01
            :ARG1 (t0 / try-01
                  :ARG1 (a0 / assassinate-01
                        :ARG0 p0))
            :ARG0 (p0 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG1 (c0 / country
                              :name (n0 / name
                                    :op1 "Syria" ))
                        :ARG2 (m0 / minister
                              :mod (p1 / prime)))))
      :ARG0 (r0 / regime))

# ::snt South Korean soldier reportedly flees after killing 5 comrades at border with North Korea
# ::tokens ["South", "Korean", "soldier", "reportedly", "flees", "after", "killing", "5", "comrades", "at", "border", "with", "North", "Korea"]
# ::ner_tags ["NORP", "NORP", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O", "GPE", "GPE"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "B", "I"]
# ::pos_tags ["JJ", "JJ", "NN", "RB", "VBZ", "IN", "VBG", "CD", "NNS", "IN", "NN", "IN", "NNP", "NNP"]
# ::lemmas ["South", "Korean", "soldier", "reportedly", "flee", "after", "kill", "5", "comrade", "at", "border", "with", "North", "Korea"]
(f0 / flee-05
      :ARG0 (r0 / report-01)
      :ARG0 (a0 / after
            :op1 (k0 / kill-01
                  :ARG0 s0
                  :ARG1 (p0 / person
                        :ARG0-of (h0 / have-rel-role-91
                              :ARG1 c1
                              :ARG2 (c2 / comrade))
                        :quant 5 )
                  :location (b0 / border-01
                        :ARG2 (c1 / country
                              :name (n1 / name
                                    :op1 "North" 
                                    :op2 "Korea" )))))
      :ARG0 (s0 / soldier
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "South" 
                        :op2 "Korea" ))))

# ::snt US Attorney General Holder resigns
# ::tokens ["US", "Attorney", "General", "Holder", "resigns"]
# ::ner_tags ["GPE", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NNP", "NNP", "VBZ"]
# ::lemmas ["US", "Attorney", "General", "Holder", "resign"]
(r0 / resign-01
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Holder" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c0 / country
                        :name (n1 / name
                              :op1 "US" ))
                  :ARG2 (a0 / attorney
                        :mod (g0 / general)))))

# ::snt Hajj to go ahead despite crane collapse, officials vow
# ::tokens ["Hajj", "to", "go", "ahead", "despite", "crane", "collapse", ",", "officials", "vow"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "TO", "VB", "RB", "IN", "NN", "NN", ",", "NNS", "NNP"]
# ::lemmas ["hajj", "to", "go", "ahead", "despite", "crane", "collapse", ",", "official", "vow"]
(v0 / vow-01
      :ARG1 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG2 (o0 / official)))
      :ARG1 (g0 / go-01
            :ARG1 (h1 / hajj)
            :ARG2 (a0 / ahead)
            :concession (c0 / collapse-01
                  :ARG1 (c1 / crane))))

# ::snt China on high alert for typhoon Kalmaegi
# ::tokens ["China", "on", "high", "alert", "for", "typhoon", "Kalmaegi"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "IN", "JJ", "NN", "IN", "NN", "NNP"]
# ::lemmas ["China", "on", "high", "alert", "for", "typhoon", "Kalmaegi"]
(a0 / alert-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "China" ))
      :ARG1-of (h0 / high-02)
      :ARG2 (t0 / typhoon
            :name (n1 / name
                  :op1 "Kalmaegi" )))

# ::snt Tokyo shares open higher over buoyant U.S. market
# ::tokens ["Tokyo", "shares", "open", "higher", "over", "buoyant", "U.S.", "market"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "NNS", "VBP", "RBR", "IN", "JJ", "NNP", "NN"]
# ::lemmas ["Tokyo", "share", "open", "higher", "over", "buoyant", "U.S.", "market"]
(o0 / open-05
      :ARG1 (s0 / share
            :location (c0 / city
                  :name (n0 / name
                        :op1 "Tokyo" )))
      :ARG1-of (h0 / have-degree-91
            :ARG3 (m0 / market
                  :mod (b0 / buoyant)
                  :location (c1 / country
                        :name (n1 / name
                              :op1 "U.S." )))
            :ARG3 (m1 / more))
      :ARG1-of (h1 / high-02))

# ::snt Tokyo shares open higher on buoyant U.S. market
# ::tokens ["Tokyo", "shares", "open", "higher", "on", "buoyant", "U.S.", "market"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "NNS", "VBP", "RBR", "IN", "JJ", "NNP", "NN"]
# ::lemmas ["Tokyo", "share", "open", "higher", "on", "buoyant", "U.S.", "market"]
(o0 / open-01
      :ARG1 (s0 / share
            :location (c0 / city
                  :name (n0 / name
                        :op1 "Tokyo" )))
      :ARG1-of (h0 / have-degree-91
            :ARG2 h1
            :ARG3 (m0 / market
                  :mod (b0 / buoyant)
                  :location (c1 / country
                        :name (n1 / name
                              :op1 "U.S." )))
            :ARG3 (m1 / more))
      :ARG1-of (h1 / high-02))

# ::snt Lewis Hamilton Takes Pole for Russian GP
# ::tokens ["Lewis", "Hamilton", "Takes", "Pole", "for", "Russian", "GP"]
# ::ner_tags ["PERSON", "PERSON", "PERSON", "O", "O", "NORP", "O"]
# ::ner_iob ["B", "I", "I", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "NNP", "IN", "JJ", "NNP"]
# ::lemmas ["Lewis", "Hamilton", "Takes", "Pole", "for", "Russian", "GP"]
(p0 / person
      :name (n0 / name
            :op1 "Lewis" 
            :op2 "Hamilton" )
      :ARG0-of (w0 / win-01
            :ARG1 (g0 / game
                  :mod (c0 / country
                        :name (n2 / name
                              :op1 "Russia" ))
                  :name (n1 / name
                        :op1 "GP" ))))

# ::snt Suspected Boko Haram suicide bombers in Nigeria kill 24
# ::tokens ["Suspected", "Boko", "Haram", "suicide", "bombers", "in", "Nigeria", "kill", "24"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "GPE", "O", "CARDINAL"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O", "B"]
# ::pos_tags ["NNP", "NNP", "NNP", "NN", "NNS", "IN", "NNP", "VBP", "CD"]
# ::lemmas ["Suspected", "Boko", "Haram", "suicide", "bomber", "in", "Nigeria", "kill", "24"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant (c0 / country
                  :name (n0 / name
                        :op1 "Nigeria" ))
            :quant 24 )
      :ARG0 (p1 / person
            :ARG1-of (s0 / suspect-01)
            :ARG0-of (b0 / bomb-01
                  :mod (s1 / suicide)
                  :ARG1 (o0 / organization
                        :name (n1 / name
                              :op1 "Boko" 
                              :op2 "Haram" )))))

# ::snt Mayawati demands president's rule in Kashmir
# ::tokens ["Mayawati", "demands", "president", "'s", "rule", "in", "Kashmir"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "LOC"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "VBZ", "NN", "POS", "NN", "IN", "NNP"]
# ::lemmas ["Mayawati", "demand", "president", "'s", "rule", "in", "Kashmir"]
(d0 / demand-01
      :ARG1 (r0 / rule-03
            :ARG0 (w0 / world-region
                  :name (n1 / name
                        :op1 "Kashmir" ))
            :ARG0 (p1 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG2 (p2 / president))))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Mayawati" )))

# ::snt Philippines typhoon death toll feared to hit 7,000
# ::tokens ["Philippines", "typhoon", "death", "toll", "feared", "to", "hit", "7,000"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "CARDINAL"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "NN", "NN", "NN", "VBD", "TO", "VB", "CD"]
# ::lemmas ["Philippines", "typhoon", "death", "toll", "fear", "to", "hit", "7,000"]
(f0 / fear-01
      :ARG1 (h0 / hit-02
            :ARG0 t0
            :ARG1 (p0 / person
                  :quant 1500 ))
      :ARG0 (t0 / toll
            :mod (t1 / typhoon)
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Philippines" ))
            :mod (d0 / die-01)))

# ::snt Cars, drivers plunge into river after Wash. I-5 bridge collapse
# ::tokens ["Cars", ",", "drivers", "plunge", "into", "river", "after", "Wash.", "I-5", "bridge", "collapse"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNS", ",", "NNS", "VBP", "IN", "NN", "IN", "NNP", "NNP", "NN", "NN"]
# ::lemmas ["car", ",", "driver", "plunge", "into", "river", "after", "Wash.", "I-5", "bridge", "collapse"]
(p0 / plunge-01
      :ARG1 (a0 / and
            :op1 (c0 / car)
            :op2 (p1 / person
                  :ARG0-of (d0 / drive-01)))
      :ARG4 (a1 / after
            :op1 (c1 / collapse-01
                  :ARG1 (b0 / bridge
                        :name (n0 / name
                              :op1 "Wash." 
                              :op2 "I-5" ))))
      :ARG4 (r0 / river))

# ::snt Egypt's Morsi faces trial for prison break, murder, says prosecution
# ::tokens ["Egypt", "'s", "Morsi", "faces", "trial", "for", "prison", "break", ",", "murder", ",", "says", "prosecution"]
# ::ner_tags ["GPE", "O", "NORP", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NNP", "VBZ", "NN", "IN", "NN", "NN", ",", "NN", ",", "VBZ", "NN"]
# ::lemmas ["Egypt", "'s", "Morsi", "face", "trial", "for", "prison", "break", ",", "murder", ",", "say", "prosecution"]
(s0 / say-01
      :ARG1 (f0 / face-01
            :ARG1 (t0 / try-02
                  :ARG1 p1
                  :ARG3 (a0 / and
                        :op1 b0))
            :ARG0 (p1 / person
                  :name (n0 / name
                        :op1 "Morsi" )
                  :ARG0-of (b0 / break-01
                        :ARG1 (p3 / prison))
                  :ARG0-of (m0 / murder-01)
                  :poss (c0 / country
                        :name (n1 / name
                              :op1 "Egypt" ))))
      :ARG0 (p0 / person
            :ARG0-of (p2 / prosecute-01)))

# ::snt Thai army declares martial law
# ::tokens ["Thai", "army", "declares", "martial", "law"]
# ::ner_tags ["NORP", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "VBZ", "JJ", "NN"]
# ::lemmas ["Thai", "army", "declare", "martial", "law"]
(d0 / declare-02
      :ARG1 (l0 / law
            :mod (m0 / martial))
      :ARG0 (a0 / army
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Thailand" ))))

# ::snt Israel agrees to 12 hour ceasefire
# ::tokens ["Israel", "agrees", "to", "12", "hour", "ceasefire"]
# ::ner_tags ["GPE", "O", "O", "TIME", "TIME", "O"]
# ::ner_iob ["B", "O", "O", "B", "I", "O"]
# ::pos_tags ["NNP", "VBZ", "IN", "CD", "NN", "NN"]
# ::lemmas ["Israel", "agree", "to", "12", "hour", "ceasefire"]
(a0 / agree-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "Israel" ))
      :ARG1 (c1 / cease-01
            :ARG1 (f0 / fire-01)
            :duration (t0 / temporal-quantity
                  :quant 12 
                  :unit (h0 / hour))))

# ::snt Quake of 6.2 magnitude strikes off Indonesia's Sumatra - USGS
# ::tokens ["Quake", "of", "6.2", "magnitude", "strikes", "off", "Indonesia", "'s", "Sumatra", "-", "USGS"]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "O", "GPE", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["NN", "IN", "CD", "NN", "NNS", "IN", "NNP", "POS", "NNP", "HYPH", "NNP"]
# ::lemmas ["quake", "of", "6.2", "magnitude", "strike", "off", "Indonesia", "'s", "Sumatra", "-", "USGS"]
(s0 / strike-01
      :ARG0 (q0 / quake
            :quant (s2 / seismic-quantity
                  :quant 6.2 ))
      :ARG1-of (s1 / say-01
            :ARG0 (c0 / country
                  :name (n0 / name
                        :op1 "USGS" )))
      :ARG2 (o0 / off
            :op1 (i0 / island
                  :name (n1 / name
                        :op1 "Sumatra" )
                  :part-of (c1 / country
                        :name (n2 / name
                              :op1 "Indonesia" )))))

# ::snt Chinese satellite spots large object in search area
# ::tokens ["Chinese", "satellite", "spots", "large", "object", "in", "search", "area"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "NNS", "JJ", "NN", "IN", "NN", "NN"]
# ::lemmas ["Chinese", "satellite", "spot", "large", "object", "in", "search", "area"]
(s0 / spot-01
      :ARG1 (o0 / object
            :mod (l0 / large))
      :ARG0 (s1 / satellite
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "China" )))
      :location (a0 / area
            :location-of (s2 / search-01)))

# ::snt Goa building collapse death toll touches 15
# ::tokens ["Goa", "building", "collapse", "death", "toll", "touches", "15"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "CARDINAL"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "VBG", "NN", "NN", "NN", "VBZ", "CD"]
# ::lemmas ["Goa", "build", "collapse", "death", "toll", "touch", "15"]
(t0 / touch-01
      :ARG1 (p0 / person
            :quant 15 )
      :ARG0 (t1 / toll
            :mod (c0 / collapse-01
                  :ARG1 (c1 / city
                        :name (n0 / name
                              :op1 "Goa" ))
                  :ARG1 (b0 / build-01))
            :quant-of (d0 / die-01)))

# ::snt Pak religious body endorses underage marriage
# ::tokens ["Pak", "religious", "body", "endorses", "underage", "marriage"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "JJ", "NN", "VBZ", "JJ", "NN"]
# ::lemmas ["pak", "religious", "body", "endorse", "underage", "marriage"]
(e0 / endorse-01
      :ARG1 (m0 / marry-01
            :mod (u0 / underage))
      :ARG0 (b0 / body
            :mod (r0 / religion)))

# ::snt EU Ministers of Employment and Social policy will discuss how to boost employment, integrate social and economic policies
# ::tokens ["EU", "Ministers", "of", "Employment", "and", "Social", "policy", "will", "discuss", "how", "to", "boost", "employment", ",", "integrate", "social", "and", "economic", "policies"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "IN", "NNP", "CC", "NNP", "NN", "MD", "VB", "WRB", "TO", "VB", "NN", ",", "VB", "JJ", "CC", "JJ", "NNS"]
# ::lemmas ["EU", "Ministers", "of", "Employment", "and", "Social", "policy", "will", "discuss", "how", "to", "boost", "employment", ",", "integrate", "social", "and", "economic", "policy"]
(d0 / discuss-01
      :ARG1 (a0 / and
            :op1 (t0 / thing
                  :manner-of (b0 / boost-01
                        :ARG1 (e0 / employ-01)))
            :op2 (t1 / thing
                  :manner-of (i0 / integrate-01
                        :ARG1 (a1 / and
                              :op1 (p2 / policy-01)
                              :op2 (p3 / policy-01
                                    :ARG0 (e1 / economy)))
                        :ARG1 (n0 / name
                              :op1 "EU" 
                              :op2 "of" 
                              :op3 "Social" 
                              :op4 "and" 
                              :op5 "Social" 
                              :op6 (p4 / policy-01
                                    :ARG2 (s1 / society))))))
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (o0 / organization)
                  :ARG2 (m0 / minister
                        :topic (p1 / policy-01
                              :ARG2 (s0 / society))))))

# ::snt U.S. and Russia reach a deal on Syria's chemical weapons
# ::tokens ["U.S.", "and", "Russia", "reach", "a", "deal", "on", "Syria", "'s", "chemical", "weapons"]
# ::ner_tags ["GPE", "O", "GPE", "O", "O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", "CC", "NNP", "VB", "DT", "NN", "IN", "NNP", "POS", "NN", "NNS"]
# ::lemmas ["U.S.", "and", "Russia", "reach", "a", "deal", "on", "Syria", "'s", "chemical", "weapon"]
(r0 / reach-01
      :ARG1 (d0 / deal-01
            :ARG0 a0
            :ARG2 (w0 / weapon
                  :mod (c2 / chemical)
                  :poss (c3 / country
                        :name (n2 / name
                              :op1 "Syria" ))))
      :ARG0 (a0 / and
            :op1 (c0 / country
                  :name (n0 / name
                        :op1 "U.S." ))
            :op2 (c1 / country
                  :name (n1 / name
                        :op1 "Russia" ))))

# ::snt Oklahoma examines what went wrong in botched execution
# ::tokens ["Oklahoma", "examines", "what", "went", "wrong", "in", "botched", "execution"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "WP", "VBD", "JJ", "IN", "JJ", "NN"]
# ::lemmas ["Oklahoma", "examine", "what", "go", "wrong", "in", "botched", "execution"]
(e0 / examine-01
      :ARG1 (s0 / state
            :name (n0 / name
                  :op1 "Oklahoma" ))
      :ARG1 (t0 / thing
            :ARG1-of (w0 / wrong-02
                  :ARG2 (e1 / execute-01
                        :ARG1-of (b0 / breach-01)))))

# ::snt Thai protests escalate amid violence
# ::tokens ["Thai", "protests", "escalate", "amid", "violence"]
# ::ner_tags ["NORP", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNS", "VBP", "IN", "NN"]
# ::lemmas ["Thai", "protest", "escalate", "amid", "violence"]
(e0 / escalate-01
      :ARG1 (p0 / protest-01
            :ARG0 (c0 / country
                  :name (n0 / name
                        :op1 "Thailand" )))
      :ARG0 (v0 / violence))

# ::snt Egypt imposes state of emergency after 95 people killed
# ::tokens ["Egypt", "imposes", "state", "of", "emergency", "after", "95", "people", "killed"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "CARDINAL", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "NN", "IN", "NN", "IN", "CD", "NNS", "VBN"]
# ::lemmas ["Egypt", "impose", "state", "of", "emergency", "after", "95", "people", "kill"]
(i0 / impose-01
      :ARG1 (s0 / state
            :mod (e0 / emergency))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Egypt" ))
      :time (a0 / after
            :op1 (k0 / kill-01
                  :ARG1 (p0 / person
                        :quant 95 ))))

# ::snt UN warns of plight of women, children in Syria's Homs
# ::tokens ["UN", "warns", "of", "plight", "of", "women", ",", "children", "in", "Syria", "'s", "Homs"]
# ::ner_tags ["ORG", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "IN", "NN", "IN", "NNS", ",", "NNS", "IN", "NNP", "POS", "NNS"]
# ::lemmas ["UN", "warn", "of", "plight", "of", "woman", ",", "child", "in", "Syria", "'s", "hom"]
(w0 / warn-01
      :ARG1 (p0 / plight
            :domain (a0 / and
                  :op1 (w1 / woman)
                  :op2 (c0 / child)
                  :location (c1 / city
                        :name (n1 / name
                              :op1 "hom" )
                        :location (c2 / country
                              :name (n2 / name
                                    :op1 "Syria" )))))
      :ARG0 (o0 / organization
            :name (n0 / name
                  :op1 "UN" )))

# ::snt Sony to sell PC unit and cut jobs
# ::tokens ["Sony", "to", "sell", "PC", "unit", "and", "cut", "jobs"]
# ::ner_tags ["ORG", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "TO", "VB", "NN", "NN", "CC", "VB", "NNS"]
# ::lemmas ["Sony", "to", "sell", "pc", "unit", "and", "cut", "job"]
(a0 / and
      :op1 (s0 / sell-01
            :ARG1 (u0 / unit
                  :mod (c2 / correct-02
                        :mod (c3 / computer)))
            :ARG0 (c1 / company
                  :name (n0 / name
                        :op1 "Sony" )))
      :op2 (c0 / cut-02
            :ARG0 c1
            :ARG1 (j0 / job)))

# ::snt Protests after George Zimmerman acquitted in Trayvon Martin case
# ::tokens ["Protests", "after", "George", "Zimmerman", "acquitted", "in", "Trayvon", "Martin", "case"]
# ::ner_tags ["O", "O", "PERSON", "PERSON", "O", "O", "GPE", "GPE", "O"]
# ::ner_iob ["O", "O", "B", "I", "O", "O", "B", "I", "O"]
# ::pos_tags ["NNS", "IN", "NNP", "NNP", "VBD", "IN", "NNP", "NNP", "NN"]
# ::lemmas ["protest", "after", "George", "Zimmerman", "acquit", "in", "Trayvon", "Martin", "case"]
(p0 / protest-01
      :ARG0 (p1 / person
            :ARG1-of (n0 / name
                  :op1 "George" 
                  :op2 "Zimmerman" ))
      :time (a0 / after
            :op1 (a1 / acquit-01
                  :ARG1 (c0 / case-03
                        :ARG2 (p2 / person
                              :name (n1 / name
                                    :op1 "Trayvon" 
                                    :op2 "Martin" ))))))

# ::snt Jordan elected to take Saudi seat on UN Security Council
# ::tokens ["Jordan", "elected", "to", "take", "Saudi", "seat", "on", "UN", "Security", "Council"]
# ::ner_tags ["GPE", "O", "O", "O", "NORP", "O", "O", "ORG", "ORG", "ORG"]
# ::ner_iob ["B", "O", "O", "O", "B", "O", "O", "B", "I", "I"]
# ::pos_tags ["NNP", "VBD", "TO", "VB", "JJ", "NN", "IN", "NNP", "NNP", "NNP"]
# ::lemmas ["Jordan", "elect", "to", "take", "Saudi", "seat", "on", "UN", "Security", "Council"]
(e0 / elect-01
      :ARG1 (t0 / take-01
            :ARG0 c0
            :ARG1 (s0 / seat-01
                  :ARG2 (c1 / country
                        :name (n1 / name
                              :op1 "Saudi" 
                              :op2 "Arabia" ))
                  :ARG2 (o0 / organization
                        :name (n2 / name
                              :op1 "UN" 
                              :op2 "Security" 
                              :op3 "Council" ))))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Jordan" )))

# ::snt Maldives begins to vote in controversy-ridden presidential poll
# ::tokens ["Maldives", "begins", "to", "vote", "in", "controversy", "-", "ridden", "presidential", "poll"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "VBZ", "TO", "VB", "IN", "NN", "HYPH", "JJ", "JJ", "NN"]
# ::lemmas ["maldive", "begin", "to", "vote", "in", "controversy", "-", "ridden", "presidential", "poll"]
(b0 / begin-01
      :ARG1 (v0 / vote-01
            :ARG0 c0
            :manner (p0 / poll-01
                  :ARG0 (p1 / person
                        :ARG0-of (h0 / have-org-role-91
                              :ARG2 (p2 / president)))
                  :ARG1-of (r0 / ride-01
                        :ARG0 (c1 / controversy))))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "maldive" )))

# ::snt Police surround protesters in Belfast ahead of G8
# ::tokens ["Police", "surround", "protesters", "in", "Belfast", "ahead", "of", "G8"]
# ::ner_tags ["O", "O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNS", "VBP", "NNS", "IN", "NNP", "RB", "IN", "NNP"]
# ::lemmas ["police", "surround", "protester", "in", "Belfast", "ahead", "of", "G8"]
(s0 / surround-01
      :ARG1 (p0 / person
            :ARG0-of (p2 / protest-01))
      :ARG0 (p1 / police)
      :ARG2 (a0 / ahead
            :op1 (p3 / person
                  :name (n1 / name
                        :op1 "G8" )))
      :location (c0 / city
            :name (n0 / name
                  :op1 "Belfast" )))

# ::snt Ten rescued off Waterford, Dublin coasts
# ::tokens ["Ten", "rescued", "off", "Waterford", ",", "Dublin", "coasts"]
# ::ner_tags ["CARDINAL", "O", "O", "GPE", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "B", "O"]
# ::pos_tags ["CD", "VBD", "RP", "NNP", ",", "NNP", "NNS"]
# ::lemmas ["Ten", "rescue", "off", "Waterford", ",", "Dublin", "coast"]
(r0 / rescue-01
      :ARG1 (p0 / person
            :quant 10 )
      :location (o0 / off
            :op1 (c0 / city
                  :name (n0 / name
                        :op1 "Waterford" ))
            :op2 (c1 / coast
                  :part-of (c2 / city
                        :name (n1 / name
                              :op1 "Dublin" )))))

# ::snt World Cup hit by new stadium death
# ::tokens ["World", "Cup", "hit", "by", "new", "stadium", "death"]
# ::ner_tags ["EVENT", "EVENT", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBN", "IN", "JJ", "NN", "NN"]
# ::lemmas ["World", "Cup", "hit", "by", "new", "stadium", "death"]
(h0 / hit-01
      :ARG1 (d0 / die-01
            :ARG1 (s0 / stadium
                  :ARG1-of (n1 / new-01)))
      :ARG1 (g0 / game
            :name (n0 / name
                  :op1 "World" 
                  :op2 "Cup" )))

# ::snt Greece reaches agreement with troika, bailout tranche expected within days
# ::tokens ["Greece", "reaches", "agreement", "with", "troika", ",", "bailout", "tranche", "expected", "within", "days"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "NN", "IN", "NNP", ",", "NN", "NNP", "VBD", "IN", "NNS"]
# ::lemmas ["Greece", "reach", "agreement", "with", "troika", ",", "bailout", "tranche", "expect", "within", "day"]
(a0 / and
      :op1 (r0 / reach-01
            :ARG1 (a1 / agree-01
                  :ARG0 c0
                  :ARG2 (o0 / organization
                        :name (n1 / name
                              :op1 "troika" )))
            :ARG0 (c0 / country
                  :name (n0 / name
                        :op1 "Greece" )))
      :op2 (e0 / expect-01
            :ARG1 (t0 / tranche
                  :ARG2-of (b0 / bail-out-02))
            :time (a2 / after
                  :quant (u0 / up-to
                        :op1 (t1 / temporal-quantity
                              :quant (d0 / day)
                              :quant 1 )))))

# ::snt Senior CPC official meets top DPRK leader's special envoy
# ::tokens ["Senior", "CPC", "official", "meets", "top", "DPRK", "leader", "'s", "special", "envoy"]
# ::ner_tags ["O", "ORG", "O", "O", "O", "ORG", "O", "O", "O", "O"]
# ::ner_iob ["O", "B", "O", "O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNP", "NN", "VBZ", "JJ", "NNP", "NN", "POS", "JJ", "NN"]
# ::lemmas ["senior", "CPC", "official", "meet", "top", "DPRK", "leader", "'s", "special", "envoy"]
(m0 / meet-03
      :ARG1 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (p2 / political-party
                        :name (n0 / name
                              :op1 "DPRK" ))
                  :ARG2 (o0 / official
                        :mod (t0 / top))))
      :ARG1 (e0 / envoy
            :ARG1-of (s0 / special-02)
            :poss (p1 / person
                  :ARG0-of (l0 / lead-02
                        :ARG1 p2))))

# ::snt US House Republicans elect Paul Ryan as speaker
# ::tokens ["US", "House", "Republicans", "elect", "Paul", "Ryan", "as", "speaker"]
# ::ner_tags ["GPE", "ORG", "NORP", "O", "PERSON", "PERSON", "O", "O"]
# ::ner_iob ["B", "B", "B", "O", "B", "I", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NNPS", "VBP", "NNP", "NNP", "IN", "NN"]
# ::lemmas ["US", "House", "Republicans", "elect", "Paul", "Ryan", "as", "speaker"]
(e0 / elect-01
      :ARG1 (p0 / person
            :ARG0-of (n0 / name
                  :op2 "Ryan" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (g0 / government-organization
                        :name (n2 / name
                              :op1 "House" 
                              :op2 "Republican" ))
                  :ARG2 (s0 / speaker)))
      :ARG0 (p1 / person
            :ARG0-of (c0 / country
                  :name (n1 / name
                        :op1 "US" ))
            :mod "Paul" ))

# ::snt Top Asian News at 4:00 p.m. GMT
# ::tokens ["Top", "Asian", "News", "at", "4:00", "p.m.", "GMT"]
# ::ner_tags ["ORG", "ORG", "ORG", "O", "TIME", "TIME", "PERSON"]
# ::ner_iob ["B", "I", "I", "O", "B", "I", "B"]
# ::pos_tags ["JJ", "NNP", "NNP", "IN", "CD", "NN", "NNP"]
# ::lemmas ["Top", "Asian", "News", "at", "4:00", "p.m.", "GMT"]
(b0 / broadcast-program
      :mod (n0 / name
            :op1 "Top" 
            :op2 "Asian" 
            :op3 "News" )
      :medium (b1 / broadcast-program
            :name (n1 / name
                  :op1 "GMT" 
                  :op1 "GMT" 
                  :op1 "GMT" 
                  :op1 "GMT" 
                  :op1 "GMT" 
                  :op1 "GMT" ))
      :time (d0 / date-entity
            :time "4:00" ))

# ::snt Headlines in major Iranian newspapers on Sept 27
# ::tokens ["Headlines", "in", "major", "Iranian", "newspapers", "on", "Sept", "27"]
# ::ner_tags ["O", "O", "O", "NORP", "O", "O", "DATE", "DATE"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "B", "I"]
# ::pos_tags ["NNS", "IN", "JJ", "JJ", "NNS", "IN", "NNP", "CD"]
# ::lemmas ["headline", "in", "major", "Iranian", "newspaper", "on", "Sept", "27"]
(t0 / thing
      :ARG2-of (h0 / headline-01
            :time (n0 / newspaper
                  :mod (m0 / major-02)
                  :mod (c0 / country
                        :name (n1 / name
                              :op1 "Iran" )))
            :time (d0 / date-entity
                  :month 9 
                  :day 27 )))

# ::snt Saudi-led airstrikes hit Yemeni capital
# ::tokens ["Saudi", "-", "led", "airstrikes", "hit", "Yemeni", "capital"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "NORP", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "HYPH", "VBN", "NNS", "VBD", "JJ", "NN"]
# ::lemmas ["Saudi", "-", "lead", "airstrike", "hit", "Yemeni", "capital"]
(h0 / hit-01
      :ARG1 (c0 / city
            :ARG0-of (h1 / have-org-role-91
                  :ARG1 (c1 / country
                        :name (n0 / name
                              :op1 "Yemen" ))
                  :ARG2 (c2 / capital)))
      :ARG0 (s0 / strike-01
            :ARG0 (l0 / lead-02
                  :ARG0 (c3 / country
                        :name (n1 / name
                              :op1 "Saudi" 
                              :op2 "Arabia" )))
            :path (a0 / air)))

# ::snt Militant attack from Afghanistan kills four in Upper Dir
# ::tokens ["Militant", "attack", "from", "Afghanistan", "kills", "four", "in", "Upper", "Dir"]
# ::ner_tags ["O", "O", "O", "GPE", "O", "CARDINAL", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "O", "B", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "IN", "NNP", "VBZ", "CD", "IN", "NNP", "NNP"]
# ::lemmas ["militant", "attack", "from", "Afghanistan", "kill", "four", "in", "Upper", "Dir"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant 4 )
      :ARG0 (a0 / attack-01
            :ARG0 (m0 / militant)
            :source (c1 / country
                  :name (n1 / name
                        :op1 "Afghanistan" )))
      :location (c0 / city
            :name (n0 / name
                  :op1 "Upper" 
                  :op2 "Dir" )))

# ::snt Mali hunts jihadist nightclub killers
# ::tokens ["Mali", "hunts", "jihadist", "nightclub", "killers"]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "NNP", "NNP", "NNP"]
# ::lemmas ["Mali", "hunt", "jihadist", "nightclub", "killers"]
(h0 / hunt-01
      :ARG1 (p0 / person
            :mod (j0 / jihadist)
            :ARG0-of (k0 / kill-01
                  :ARG1 (n1 / nightclub)))
      :ARG1 (p1 / person
            :name (n0 / name
                  :op1 "Mali" )))

# ::snt Sierra Leone in Ebola lockdown
# ::tokens ["Sierra", "Leone", "in", "Ebola", "lockdown"]
# ::ner_tags ["ORG", "ORG", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "IN", "NNP", "NN"]
# ::lemmas ["Sierra", "Leone", "in", "Ebola", "lockdown"]
(f0 / flood-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "Sierra" 
                  :op2 "Leone" )))

# ::snt Israeli forces detain Palestinian MP in Hebron
# ::tokens ["Israeli", "forces", "detain", "Palestinian", "MP", "in", "Hebron"]
# ::ner_tags ["NORP", "O", "O", "NORP", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "B"]
# ::pos_tags ["JJ", "NNS", "VBP", "JJ", "NNP", "IN", "NNP"]
# ::lemmas ["Israeli", "force", "detain", "Palestinian", "MP", "in", "Hebron"]
(d0 / detain-01
      :ARG1 (p0 / person
            :mod (c1 / country
                  :name (n1 / name
                        :op1 "Palestine" ))
            :ARG0-of (r0 / reside-01))
      :ARG0 (f0 / force
            :mod (c2 / country
                  :name (n2 / name
                        :op1 "Israel" )))
      :location (c0 / city
            :name (n0 / name
                  :op1 "Hebron" )))

# ::snt More than 3,400 migrants rescued at sea in Mediterranean
# ::tokens ["More", "than", "3,400", "migrants", "rescued", "at", "sea", "in", "Mediterranean"]
# ::ner_tags ["CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "O", "O", "O", "LOC"]
# ::ner_iob ["B", "I", "I", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["JJR", "IN", "CD", "NNS", "VBN", "IN", "NN", "IN", "NNP"]
# ::lemmas ["More", "than", "3,400", "migrant", "rescue", "at", "sea", "in", "Mediterranean"]
(r0 / rescue-01
      :ARG1 (p0 / person
            :ARG0-of (m0 / migrate-01)
            :quant (m1 / more-than
                  :op1 3000 ))
      :location (s0 / sea
            :name (n0 / name
                  :op1 "Mediterranean" )))

# ::snt Israeli police clash with Palestinian protesters at sensitive Jerusalem holy site
# ::tokens ["Israeli", "police", "clash", "with", "Palestinian", "protesters", "at", "sensitive", "Jerusalem", "holy", "site"]
# ::ner_tags ["NORP", "O", "O", "O", "NORP", "O", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "B", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["JJ", "NN", "VBP", "IN", "JJ", "NNS", "IN", "JJ", "NNP", "JJ", "NN"]
# ::lemmas ["Israeli", "police", "clash", "with", "Palestinian", "protester", "at", "sensitive", "Jerusalem", "holy", "site"]
(c0 / clash-01
      :ARG1 (p0 / person
            :mod (c1 / country
                  :name (n0 / name
                        :op1 "Palestine" ))
            :ARG0-of (p2 / protest-01))
      :ARG0 (p1 / police
            :mod (c2 / country
                  :name (n1 / name
                        :op1 "Israel" )))
      :location (s0 / site
            :mod (h0 / holy)
            :ARG0-of (s1 / sensitive-03)
            :location (c3 / city
                  :name (n2 / name
                        :op1 "Jerusalem" ))))

# ::snt Islamic State issues video of beheading of US hostage
# ::tokens ["Islamic", "State", "issues", "video", "of", "beheading", "of", "US", "hostage"]
# ::ner_tags ["ORG", "ORG", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "NNP", "NNS", "NN", "IN", "NN", "IN", "NNP", "NN"]
# ::lemmas ["Islamic", "State", "issue", "video", "of", "beheading", "of", "US", "hostage"]
(i0 / issue-01
      :ARG1 (v0 / video
            :topic (b0 / behead-01
                  :ARG1 (h0 / hostage
                        :mod (c0 / country
                              :name (n1 / name
                                    :op1 "US" )))))
      :ARG0 (s0 / state
            :mod (r0 / religious-group
                  :name (n0 / name
                        :op1 "Islamic" ))))

# ::snt Greece bailout uncertainty weighs on global markets
# ::tokens ["Greece", "bailout", "uncertainty", "weighs", "on", "global", "markets"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NN", "NN", "VBZ", "IN", "JJ", "NNS"]
# ::lemmas ["Greece", "bailout", "uncertainty", "weigh", "on", "global", "market"]
(w0 / weight-01
      :ARG1 (c0 / certainty
            :domain (b0 / bail-out-02)
            :location (c1 / country
                  :name (n0 / name
                        :op1 "Greece" ))
            :polarity - )
      :ARG2 (m0 / market
            :mod (g0 / globe)))

# ::snt Nepal earthquake death toll surpasses 7,000
# ::tokens ["Nepal", "earthquake", "death", "toll", "surpasses", "7,000"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "CARDINAL"]
# ::ner_iob ["B", "O", "O", "O", "O", "B"]
# ::pos_tags ["JJ", "NN", "NN", "NN", "VBZ", "CD"]
# ::lemmas ["Nepal", "earthquake", "death", "toll", "surpass", "7,000"]
(s0 / surpass-01
      :ARG1 (p0 / person
            :quant 5000 )
      :ARG0 (t0 / toll
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Nepal" ))
            :quant-of (d0 / die-01)
            :mod (e0 / earthquake)))

# ::snt US drone strike kills eight in Waziristan
# ::tokens ["US", "drone", "strike", "kills", "eight", "in", "Waziristan"]
# ::ner_tags ["GPE", "O", "O", "O", "CARDINAL", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "B", "O", "B"]
# ::pos_tags ["NNP", "NN", "NN", "VBZ", "CD", "IN", "NNP"]
# ::lemmas ["US", "drone", "strike", "kill", "eight", "in", "Waziristan"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant 8 )
      :ARG0 (s0 / strike-01
            :ARG0 (c0 / country
                  :name (n1 / name
                        :op1 "US" ))
            :ARG2 (d0 / drone))
      :location (p1 / province
            :name (n0 / name
                  :op1 "Waziristan" )))

# ::snt Boy, 14, arrested for sex attacks around a university campus
# ::tokens ["Boy", ",", "14", ",", "arrested", "for", "sex", "attacks", "around", "a", "university", "campus"]
# ::ner_tags ["ORG", "O", "DATE", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "CD", ",", "VBN", "IN", "NN", "NNS", "IN", "DT", "NN", "NN"]
# ::lemmas ["Boy", ",", "14", ",", "arrest", "for", "sex", "attack", "around", "a", "university", "campus"]
(p0 / person
      :ARG1-of (a0 / arrest-01
            :ARG2 a1)
      :name (n0 / name
            :op1 "Boy" )
      :ARG0-of (a1 / attack-01
            :mod (a2 / around
                  :op1 (c0 / campus
                        :mod (u0 / university)))
            :mod (s0 / sex-01))
      :age (t0 / temporal-quantity
            :quant 14 
            :unit (y0 / year)))

# ::snt Obama orders Syria 'gas attack' inquiry
# ::tokens ["Obama", "orders", "Syria", "'", "gas", "attack", "'", "inquiry"]
# ::ner_tags ["O", "O", "GPE", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "NNP", "POS", "NN", "NN", "''", "NN"]
# ::lemmas ["Obama", "order", "Syria", "'", "gas", "attack", "'", "inquiry"]
(o0 / order-01
      :ARG1 (a0 / attack-01
            :ARG0 (c0 / country
                  :name (n1 / name
                        :op1 "Syria" ))
            :instrument (g0 / gas))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Obama" ))
      :ARG1 (i0 / inquire-01
            :ARG2 (c1 / country
                  :name (n2 / name
                        :op1 "Syria" ))))

# ::snt Ukraine's jailed opposition icon Tymoshenko walks free
# ::tokens ["Ukraine", "'s", "jailed", "opposition", "icon", "Tymoshenko", "walks", "free"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "VBN", "NN", "NN", "NNP", "VBZ", "JJ"]
# ::lemmas ["Ukraine", "'s", "jail", "opposition", "icon", "Tymoshenko", "walk", "free"]
(w0 / walk-01
      :ARG0 (f0 / free-04)
      :ARG0 (p0 / person
            :ARG1-of (h0 / have-org-role-91
                  :ARG1 (i0 / icon
                        :ARG0-of (o0 / oppose-01))
                  :ARG1 (c0 / country
                        :name (n1 / name
                              :op1 "Ukraine" ))
                  :ARG1-of (j0 / jail-01))
            :name (n0 / name
                  :op1 "Tymoshenko" )))

# ::snt Redford touts Alberta economy ahead of vote on leadership
# ::tokens ["Redford", "touts", "Alberta", "economy", "ahead", "of", "vote", "on", "leadership"]
# ::ner_tags ["O", "O", "GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "NNP", "NN", "RB", "IN", "NN", "IN", "NN"]
# ::lemmas ["Redford", "tout", "Alberta", "economy", "ahead", "of", "vote", "on", "leadership"]
(t0 / turn-14
      :ARG1 (e0 / economy
            :mod (s0 / state
                  :name (n1 / name
                        :op1 "Alberta" )))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Redford" ))
      :time (a0 / ahead
            :op1 (v0 / vote-01
                  :ARG1 (l0 / lead-02))))

# ::snt Man kills 4 in Calif. before police shoot him dead
# ::tokens ["Man", "kills", "4", "in", "Calif.", "before", "police", "shoot", "him", "dead"]
# ::ner_tags ["O", "O", "CARDINAL", "O", "GPE", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "CD", "IN", "NNP", "IN", "NNS", "VBP", "PRP", "JJ"]
# ::lemmas ["Man", "kill", "4", "in", "Calif.", "before", "police", "shoot", "him", "dead"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant 4 )
      :ARG0 (m0 / man
            :ARG1-of (d0 / die-01)
            :ARG1-of (s1 / shoot-02
                  :ARG0 (p1 / police)))
      :time (b0 / before
            :op1 d0
            :op1 s1)
      :location (s0 / state
            :name (n0 / name
                  :op1 "Calif." )))

# ::snt N. Korea Deports Elderly American
# ::tokens ["N.", "Korea", "Deports", "Elderly", "American"]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "JJ", "NNP"]
# ::lemmas ["N.", "Korea", "deport", "elderly", "American"]
(c0 / country
      :mod (n0 / name
            :op1 "N." 
            :op2 "Korea" )
      :mod (e0 / elderly))

# ::snt Obama mulls limited military action in Syria
# ::tokens ["Obama", "mulls", "limited", "military", "action", "in", "Syria"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "NNS", "JJ", "JJ", "NN", "IN", "NNP"]
# ::lemmas ["Obama", "mull", "limited", "military", "action", "in", "Syria"]
(m0 / mull
      :domain (a0 / act-02
            :ARG0 (m1 / military)
            :ARG1-of (l0 / limit-01)
            :location (c0 / country
                  :name (n1 / name
                        :op1 "Syria" )))
      :domain (p0 / person
            :name (n0 / name
                  :op1 "Obama" )))

# ::snt One killed in clashes at Muslim Brotherhood Cairo offices
# ::tokens ["One", "killed", "in", "clashes", "at", "Muslim", "Brotherhood", "Cairo", "offices"]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "ORG", "ORG", "ORG", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["CD", "VBN", "IN", "NNS", "IN", "NNP", "NNP", "NNP", "NNS"]
# ::lemmas ["One", "kill", "in", "clash", "at", "Muslim", "Brotherhood", "Cairo", "office"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant 1 )
      :ARG1-of (c0 / cause-01
            :ARG0 (c1 / clash-01
                  :location (o0 / office
                        :mod (o1 / organization
                              :name (n0 / name
                                    :op1 "Muslim" 
                                    :op2 "Brotherhood" ))
                        :location (c2 / city
                              :name (n1 / name
                                    :op1 "Cairo" ))))))

# ::snt Saudi Women To Protest Against Driving Ban
# ::tokens ["Saudi", "Women", "To", "Protest", "Against", "Driving", "Ban"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNS", "TO", "VB", "IN", "NNP", "NNP"]
# ::lemmas ["saudi", "woman", "to", "protest", "against", "Driving", "Ban"]
(p0 / protest-01
      :ARG1 (p1 / person
            :name (n0 / name
                  :op1 "Ban" ))
      :ARG0 (w0 / woman
            :mod (c0 / country
                  :name (n1 / name
                        :op1 "Saudi" 
                        :op2 "Arabia" ))))

# ::snt Nelson Mandela hospital release reports 'incorrect'
# ::tokens ["Nelson", "Mandela", "hospital", "release", "reports", "'", "incorrect", "'"]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NN", "NN", "NNS", "POS", "NN", "''"]
# ::lemmas ["Nelson", "Mandela", "hospital", "release", "report", "'", "incorrect", "'"]
(r0 / report-01
      :ARG1 (r1 / release-01
            :ARG1 (h0 / hospital)
            :ARG1 (p0 / person
                  :name (n0 / name
                        :op1 "Nelson" 
                        :op2 "Mandela" )))
      :ARG1 (c0 / correct-02
            :polarity - ))

# ::snt US to Determine Extent of Chemical Weapons Use by Syria
# ::tokens ["US", "to", "Determine", "Extent", "of", "Chemical", "Weapons", "Use", "by", "Syria"]
# ::ner_tags ["GPE", "O", "ORG", "ORG", "ORG", "ORG", "ORG", "ORG", "O", "GPE"]
# ::ner_iob ["B", "O", "B", "I", "I", "I", "I", "I", "O", "B"]
# ::pos_tags ["NNP", "IN", "NNP", "NN", "IN", "NNP", "NNPS", "NNP", "IN", "NNP"]
# ::lemmas ["US", "to", "Determine", "Extent", "of", "Chemical", "Weapons", "Use", "by", "Syria"]
(d0 / determine-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "US" ))
      :ARG1 (i0 / infringe-01
            :ARG1 (u0 / use-01
                  :ARG1 (w0 / weapon
                        :mod (s0 / small-molecule
                              :name (n2 / name
                                    :op1 "Chemical" 
                                    :op2 "Weapons" )))
                  :ARG0 (c1 / country
                        :name (n1 / name
                              :op1 "Syria" )))))

# ::snt Syria agrees to surrender chemical weapons
# ::tokens ["Syria", "agrees", "to", "surrender", "chemical", "weapons"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "TO", "VB", "NN", "NNS"]
# ::lemmas ["Syria", "agree", "to", "surrender", "chemical", "weapon"]
(a0 / agree-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "Syria" ))
      :ARG1 (s0 / surrender-01
            :ARG0 c0
            :ARG1 (w0 / weapon
                  :mod (c1 / chemical))))

# ::snt Russia's Putin claims authority to invade Ukraine
# ::tokens ["Russia", "'s", "Putin", "claims", "authority", "to", "invade", "Ukraine"]
# ::ner_tags ["GPE", "O", "PERSON", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "POS", "NNP", "VBZ", "NN", "TO", "VB", "NNP"]
# ::lemmas ["Russia", "'s", "Putin", "claim", "authority", "to", "invade", "Ukraine"]
(c0 / claim-01
      :ARG1 (a0 / authority
            :purpose (i0 / invade-01
                  :ARG0 p0))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Putin" )
            :poss (c1 / country
                  :name (n1 / name
                        :op1 "Ukraine" ))))

# ::snt Singapore shares open 0.28% lower on Thursday
# ::tokens ["Singapore", "shares", "open", "0.28", "%", "lower", "on", "Thursday"]
# ::ner_tags ["GPE", "O", "O", "PERCENT", "PERCENT", "O", "O", "DATE"]
# ::ner_iob ["B", "O", "O", "B", "I", "O", "O", "B"]
# ::pos_tags ["NNP", "NNS", "VBP", "CD", "NN", "JJR", "IN", "NNP"]
# ::lemmas ["Singapore", "share", "open", "0.28", "%", "low", "on", "Thursday"]
(o0 / open-01
      :ARG1 (s0 / share-01
            :ARG0 (c0 / country
                  :name (n0 / name
                        :op1 "Singapore" )))
      :time (p0 / percentage-entity
            :ARG1-of (l0 / low-04)
            :value (h0 / have-degree-91
                  :ARG2 l0
                  :ARG3 (m0 / more))
            :value 0.28 )
      :time (d0 / date-entity
            :weekday (t0 / thursday)))

# ::snt Headlines in major Iranian newspapers on Oct 4
# ::tokens ["Headlines", "in", "major", "Iranian", "newspapers", "on", "Oct", "4"]
# ::ner_tags ["O", "O", "O", "NORP", "O", "O", "DATE", "DATE"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "B", "I"]
# ::pos_tags ["NNS", "IN", "JJ", "JJ", "NNS", "IN", "NNP", "CD"]
# ::lemmas ["headline", "in", "major", "Iranian", "newspaper", "on", "Oct", "4"]
(t0 / thing
      :ARG2-of (h0 / headline-01
            :time (n0 / newspaper
                  :mod (m0 / major-02)
                  :mod (c0 / country
                        :name (n1 / name
                              :op1 "Iran" )))
            :time (d0 / date-entity
                  :month 10 
                  :day 4 )))

# ::snt Bombings kill 9 people in Iraqi capital
# ::tokens ["Bombings", "kill", "9", "people", "in", "Iraqi", "capital"]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "NORP", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "B", "O"]
# ::pos_tags ["NNS", "VBP", "CD", "NNS", "IN", "JJ", "NN"]
# ::lemmas ["bombing", "kill", "9", "people", "in", "Iraqi", "capital"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant 9 )
      :ARG0 (b0 / bomb-01)
      :location (c0 / city
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c1 / country
                        :name (n0 / name
                              :op1 "Iraq" ))
                  :ARG2 (c2 / capital))))

# ::snt 10 Things to Know for Wednesday
# ::tokens ["10", "Things", "to", "Know", "for", "Wednesday"]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "DATE"]
# ::ner_iob ["B", "O", "O", "O", "O", "B"]
# ::pos_tags ["CD", "NNS", "TO", "VB", "IN", "NNP"]
# ::lemmas ["10", "thing", "to", "know", "for", "Wednesday"]
(t0 / thing
      :quant 10 
      :ARG1-of (k0 / know-01
            :time (d0 / date-entity
                  :weekday (w0 / wednesday))))

# ::snt How the Dow Jones Industrial Average Did Wednesday
# ::tokens ["How", "the", "Dow", "Jones", "Industrial", "Average", "Did", "Wednesday"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "DATE"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["WRB", "DT", "NNP", "NNP", "NNP", "NNP", "VBD", "NNP"]
# ::lemmas ["how", "the", "Dow", "Jones", "Industrial", "Average", "do", "Wednesday"]
(d0 / do-02
      :ARG1 (g0 / government-organization
            :name (n0 / name
                  :op1 "Dow" 
                  :op2 "Jones" 
                  :op3 "Industrial" 
                  :op4 "Average" ))
      :ARG1 (a0 / amr-unknown)
      :time (d1 / date-entity
            :weekday (w0 / wednesday)))

# ::snt New UN peacekeeping chief named for Central African Republic
# ::tokens ["New", "UN", "peacekeeping", "chief", "named", "for", "Central", "African", "Republic"]
# ::ner_tags ["ORG", "ORG", "O", "O", "O", "O", "GPE", "GPE", "GPE"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "B", "I", "I"]
# ::pos_tags ["JJ", "NNP", "NN", "NN", "VBN", "IN", "NNP", "NNP", "NNP"]
# ::lemmas ["New", "UN", "peacekeeping", "chief", "name", "for", "Central", "African", "Republic"]
(n0 / name-01
      :ARG1 (c0 / country
            :name (n1 / name
                  :op1 "Central" 
                  :op2 "African" 
                  :op3 "Republic" ))
      :ARG1 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (o0 / organization
                        :name (n3 / name
                              :op1 "UN" ))
                  :ARG2 (c1 / chief
                        :purpose (k0 / keep-01
                              :ARG1 (p1 / peace))))
            :ARG1-of (n2 / new-01)))

# ::snt Iraq bombings kill at least 26
# ::tokens ["Iraq", "bombings", "kill", "at", "least", "26"]
# ::ner_tags ["GPE", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL"]
# ::ner_iob ["B", "O", "O", "B", "I", "I"]
# ::pos_tags ["NNP", "NNS", "VBP", "RB", "JJS", "CD"]
# ::lemmas ["Iraq", "bombing", "kill", "at", "least", "26"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant (a0 / at-least
                  :op1 26 ))
      :ARG0 (b0 / bomb-01
            :ARG0 (c0 / country
                  :name (n0 / name
                        :op1 "Iraq" ))))

# ::snt UN Security Council hears Yemen envoy's final ...
# ::tokens ["UN", "Security", "Council", "hears", "Yemen", "envoy", "'s", "final", "..."]
# ::ner_tags ["ORG", "ORG", "ORG", "O", "GPE", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "I", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NNP", "VBZ", "NNP", "NN", "POS", "NN", "."]
# ::lemmas ["UN", "Security", "Council", "hear", "Yemen", "envoy", "'s", "final", "..."]
(h0 / hear-01
      :ARG1 (p0 / person
            :ARG0-of (h1 / have-org-role-91
                  :ARG1 (c0 / country
                        :name (n1 / name
                              :op1 "Yemen" ))
                  :ARG2 (e0 / envoy)))
      :ARG0 (o0 / organization
            :name (n0 / name
                  :op1 "UN" 
                  :op2 "Security" 
                  :op3 "Council" ))
      :ARG1 (f0 / final))

# ::snt 13 killed in Afgan terror attack
# ::tokens ["13", "killed", "in", "Afgan", "terror", "attack"]
# ::ner_tags ["CARDINAL", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O"]
# ::pos_tags ["CD", "VBN", "IN", "NNP", "NN", "NN"]
# ::lemmas ["13", "kill", "in", "Afgan", "terror", "attack"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant 13 )
      :ARG1-of (c0 / cause-01
            :ARG0 (a0 / attack-01
                  :mod (t0 / terror)
                  :ARG1 (c1 / city
                        :name (n0 / name
                              :op1 "Afgan" )))))

# ::snt Rev's Early Reads: March 2
# ::tokens ["Rev", "'s", "Early", "Reads", ":", "March", "2"]
# ::ner_tags ["ORG", "O", "WORK_OF_ART", "WORK_OF_ART", "O", "DATE", "DATE"]
# ::ner_iob ["B", "O", "B", "I", "O", "B", "I"]
# ::pos_tags ["NNP", "POS", "JJ", "NNS", ":", "NNP", "CD"]
# ::lemmas ["Rev", "'s", "Early", "Reads", ":", "March", "2"]
(r0 / read-01
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (p1 / political-party
                        :name (n0 / name
                              :op1 "Rev" ))))
      :time (E0 / Early)
      :time (d0 / date-entity
            :month 3 
            :day 2 ))

# ::snt Markets Live: Waiting for China data
# ::tokens ["Markets", "Live", ":", "Waiting", "for", "China", "data"]
# ::ner_tags ["O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNS", "VBP", ":", "VBG", "IN", "NNP", "NNS"]
# ::lemmas ["market", "live", ":", "wait", "for", "China", "datum"]
(w0 / wait-01
      :ARG1 (l0 / live)
      :ARG2 (d0 / data
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "China" ))))

# ::snt Palestinians, Israeli police clash at Jerusalem's al-Aqsa
# ::tokens ["Palestinians", ",", "Israeli", "police", "clash", "at", "Jerusalem", "'s", "al", "-", "Aqsa"]
# ::ner_tags ["NORP", "O", "NORP", "O", "O", "O", "GPE", "O", "FAC", "FAC", "FAC"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "B", "O", "B", "I", "I"]
# ::pos_tags ["NNPS", ",", "JJ", "NN", "VBP", "IN", "NNP", "POS", "NNP", "HYPH", "NNP"]
# ::lemmas ["Palestinians", ",", "Israeli", "police", "clash", "at", "Jerusalem", "'s", "al", "-", "Aqsa"]
(a0 / and
      :op1 (c0 / country
            :name (n0 / name
                  :op1 "Palestine" ))
      :op2 (c1 / clash-01
            :ARG1 (p0 / police
                  :mod (c3 / country
                        :name (n2 / name
                              :op1 "Israel" )))
            :location (c2 / city
                  :name (n1 / name
                        :op1 "Jerusalem" ))))

# ::snt The end of the Hong Kong protests?
# ::tokens ["The", "end", "of", "the", "Hong", "Kong", "protests", "?"]
# ::ner_tags ["O", "O", "O", "O", "GPE", "GPE", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "I", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NNP", "NNP", "NNS", "."]
# ::lemmas ["the", "end", "of", "the", "Hong", "Kong", "protest", "?"]
(e0 / end-01
      :ARG1 (p0 / protest-01
            :location (c0 / city
                  :name (n0 / name
                        :op1 "Hong" 
                        :op2 "Kong" )))
      :ARG2 (a0 / amr-unknown))

# ::snt Russian warplanes strike inside Syria
# ::tokens ["Russian", "warplanes", "strike", "inside", "Syria"]
# ::ner_tags ["NORP", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "B"]
# ::pos_tags ["JJ", "NNS", "VBP", "IN", "NNP"]
# ::lemmas ["Russian", "warplane", "strike", "inside", "Syria"]
(s0 / strike-01
      :ARG0 (w0 / warplane
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Syria" )))
      :ARG2 (i0 / inside
            :op1 (c1 / country
                  :name (n1 / name
                        :op1 "Russia" ))))

# ::snt Nigeria Votes in Tight Presidential Election
# ::tokens ["Nigeria", "Votes", "in", "Tight", "Presidential", "Election"]
# ::ner_tags ["PERSON", "PERSON", "O", "WORK_OF_ART", "WORK_OF_ART", "WORK_OF_ART"]
# ::ner_iob ["B", "I", "O", "B", "I", "I"]
# ::pos_tags ["NNP", "VBZ", "IN", "JJ", "JJ", "NN"]
# ::lemmas ["Nigeria", "Votes", "in", "Tight", "Presidential", "Election"]
(v0 / vote-01
      :ARG1 (e0 / elect-01
            :ARG1 (p0 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG2 (p1 / president)))
            :mod (n0 / name
                  :op1 "Nigeria" ))
      :ARG0 (c0 / country))

# ::snt Prince William dons samurai gear on Japan tour
# ::tokens ["Prince", "William", "dons", "samurai", "gear", "on", "Japan", "tour"]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "NN", "NN", "IN", "NNP", "NN"]
# ::lemmas ["Prince", "William", "don", "samurai", "gear", "on", "Japan", "tour"]
(d0 / do-02
      :ARG1 (g0 / gear
            :mod (s0 / samurai))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "William" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG2 (p1 / prince)))
      :time (t0 / tour
            :mod (c0 / country
                  :name (n1 / name
                        :op1 "Japan" ))))

# ::snt Micronesia vice president to visit China
# ::tokens ["Micronesia", "vice", "president", "to", "visit", "China"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "NN", "NN", "TO", "VB", "NNP"]
# ::lemmas ["Micronesia", "vice", "president", "to", "visit", "China"]
(v0 / visit-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "China" ))
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c1 / country
                        :name (n1 / name
                              :op1 "Micronesia" ))
                  :ARG2 (p1 / president
                        :mod (v1 / vice)))))

# ::snt Iran ends cooperation agreement with Pakistan
# ::tokens ["Iran", "ends", "cooperation", "agreement", "with", "Pakistan"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "VBZ", "NN", "NN", "IN", "NNP"]
# ::lemmas ["Iran", "end", "cooperation", "agreement", "with", "Pakistan"]
(e0 / end-01
      :ARG1 (a0 / agree-01
            :ARG0 c0
            :ARG1 (c1 / cooperate-01)
            :ARG2 (c2 / country
                  :name (n1 / name
                        :op1 "Pakistan" )))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Iran" )))

# ::snt New US Sanctions Target Overseas Cyber Attackers
# ::tokens ["New", "US", "Sanctions", "Target", "Overseas", "Cyber", "Attackers"]
# ::ner_tags ["ORG", "ORG", "ORG", "ORG", "ORG", "ORG", "ORG"]
# ::ner_iob ["B", "I", "I", "I", "I", "I", "I"]
# ::pos_tags ["JJ", "NNP", "NNPS", "NNP", "NNP", "NNP", "NNPS"]
# ::lemmas ["New", "US", "Sanctions", "Target", "Overseas", "Cyber", "Attackers"]
(t0 / target-01
      :ARG1 (p0 / person
            :ARG0-of (a0 / attack-01
                  :mod (c0 / cyber))
            :ARG1-of (n0 / new-01))
      :ARG0 (s0 / state
            :name (n1 / name
                  :op1 "US" )))

# ::snt Deadly Blast Rocks Coal Mine in East Ukraine
# ::tokens ["Deadly", "Blast", "Rocks", "Coal", "Mine", "in", "East", "Ukraine"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "GPE", "GPE"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "I"]
# ::pos_tags ["NNP", "NNP", "NNPS", "NNP", "NNP", "IN", "NNP", "NNP"]
# ::lemmas ["Deadly", "Blast", "Rocks", "Coal", "Mine", "in", "East", "Ukraine"]
(m0 / mine-01
      :location (n0 / name
            :op1 "Rocks" 
            :op2 "Coal" 
            :op3 "Mine" )
      :location (s0 / southeast
            :part-of (c0 / country
                  :name (n1 / name
                        :op1 "Ukraine" )))
      :mod (B0 / Blast
            :ARG0-of (d0 / die-01)))

# ::snt Backstage Moves Intensify as Fight Against Islamic State Widens
# ::tokens ["Backstage", "Moves", "Intensify", "as", "Fight", "Against", "Islamic", "State", "Widens"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNS", "VBP", "IN", "NNP", "IN", "JJ", "NNP", "NNPS"]
# ::lemmas ["Backstage", "move", "intensify", "as", "Fight", "against", "islamic", "State", "Widens"]
(i0 / intensify-01
      :ARG1 (f0 / fight-01
            :ARG1 (d0 / deny-01
                  :ARG1 (s0 / state
                        :mod (r0 / religious-group
                              :name (n0 / name
                                    :op1 "Islam" )))))
      :ARG1 (m0 / move-02
            :ARG1 (b0 / back)))

# ::snt Taiwan coast guard launches new ships as South China Sea tensions rise
# ::tokens ["Taiwan", "coast", "guard", "launches", "new", "ships", "as", "South", "China", "Sea", "tensions", "rise"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "LOC", "LOC", "LOC", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NN", "VBZ", "JJ", "NNS", "IN", "NNP", "NNP", "NNP", "NNS", "VBP"]
# ::lemmas ["Taiwan", "coast", "guard", "launch", "new", "ship", "as", "South", "China", "Sea", "tension", "rise"]
(l0 / launch-01
      :ARG1 (s0 / ship
            :ARG1-of (n0 / new-01))
      :ARG0 (g0 / guard-01
            :ARG1 (c0 / coast
                  :mod (c1 / country
                        :name (n1 / name
                              :op1 "Taiwan" ))))
      :time (r0 / rise-01
            :ARG1 (t0 / tension
                  :location (s1 / sea
                        :name (n2 / name
                              :op1 "South" 
                              :op2 "China" 
                              :op3 "Sea" )))))

# ::snt Pro-Palestinian Activists March to UN Headquarters
# ::tokens ["Pro", "-", "Palestinian", "Activists", "March", "to", "UN", "Headquarters"]
# ::ner_tags ["NORP", "NORP", "NORP", "NORP", "O", "O", "ORG", "O"]
# ::ner_iob ["B", "I", "I", "I", "O", "O", "B", "O"]
# ::pos_tags ["JJ", "JJ", "JJ", "NNS", "NNP", "IN", "NNP", "NNP"]
# ::lemmas ["Pro", "-", "Palestinian", "Activists", "March", "to", "UN", "Headquarters"]
(b0 / byline-91
      :ARG1 (p0 / person
            :ARG0-of (f0 / favor-01
                  :ARG1 (c0 / country
                        :name (n1 / name
                              :op1 "Palestine" )))
            :ARG0-of (a0 / act-02))
      :ARG4 (h0 / headquarters
            :poss (o0 / organization
                  :name (n0 / name
                        :op1 "UN" ))))

# ::snt All 224 dead in Russian airliner mystery crash
# ::tokens ["All", "224", "dead", "in", "Russian", "airliner", "mystery", "crash"]
# ::ner_tags ["O", "CARDINAL", "O", "O", "NORP", "O", "O", "O"]
# ::ner_iob ["O", "B", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["DT", "CD", "JJ", "IN", "JJ", "NN", "NN", "NN"]
# ::lemmas ["all", "224", "dead", "in", "Russian", "airliner", "mystery", "crash"]
(d0 / die-01
      :ARG1 (c0 / cause-01
            :ARG0 (c1 / crash-01
                  :ARG1 (m0 / mystery
                        :mod (a1 / airliner
                              :mod (c2 / country
                                    :name (n0 / name
                                          :op1 "Russia" ))))))
      :ARG1 (p0 / person
            :mod (a0 / all)
            :quant 224 ))

# ::snt Scientists prove there is water on Mars
# ::tokens ["Scientists", "prove", "there", "is", "water", "on", "Mars"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "LOC"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNS", "VBP", "EX", "VBZ", "NN", "IN", "NNP"]
# ::lemmas ["scientist", "prove", "there", "be", "water", "on", "Mars"]
(p0 / prove-01
      :ARG1 (w0 / water
            :location (p1 / planet
                  :name (n0 / name
                        :op1 "Mars" )))
      :ARG0 (s0 / scientist))

# ::snt Editors from around the world urge Turkey to protect media
# ::tokens ["Editors", "from", "around", "the", "world", "urge", "Turkey", "to", "protect", "media"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNS", "IN", "IN", "DT", "NN", "NN", "NNP", "TO", "VB", "NNS"]
# ::lemmas ["editor", "from", "around", "the", "world", "urge", "Turkey", "to", "protect", "medium"]
(u0 / urge-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "Turkey" ))
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG2 (e0 / editor))
            :source (a0 / around
                  :op1 (w0 / world)))
      :ARG2 (p1 / protect-01
            :ARG0 c0
            :ARG1 (m0 / media)))

# ::snt North Korea to put US citizen on trial
# ::tokens ["North", "Korea", "to", "put", "US", "citizen", "on", "trial"]
# ::ner_tags ["GPE", "GPE", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "TO", "VB", "NNP", "NN", "IN", "NN"]
# ::lemmas ["North", "Korea", "to", "put", "US", "citizen", "on", "trial"]
(t0 / try-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "North" 
                  :op2 "Korea" ))
      :ARG1 (c1 / citizen
            :ARG0 c0
            :mod (c2 / country
                  :name (n1 / name
                        :op1 "US" ))))

# ::snt Hong Kong officials resume work as protests thin
# ::tokens ["Hong", "Kong", "officials", "resume", "work", "as", "protests", "thin"]
# ::ner_tags ["GPE", "GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NNS", "VBP", "NN", "IN", "NNS", "JJ"]
# ::lemmas ["Hong", "Kong", "official", "resume", "work", "as", "protest", "thin"]
(r0 / resume-01
      :ARG1 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c0 / city
                        :name (n0 / name
                              :op1 "Hong" 
                              :op2 "Kong" ))
                  :ARG2 (o0 / official)))
      :ARG1 (p1 / protest-01)
      :ARG1 (w0 / work-01
            :ARG0 p0))

# ::snt Volkswagen skids into red in wake of pollution scandal
# ::tokens ["Volkswagen", "skids", "into", "red", "in", "wake", "of", "pollution", "scandal"]
# ::ner_tags ["ORG", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNS", "IN", "NN", "IN", "NN", "IN", "NN", "NN"]
# ::lemmas ["Volkswagen", "skid", "into", "red", "in", "wake", "of", "pollution", "scandal"]
(s0 / switch-01
      :ARG1 (c0 / company
            :name (n0 / name
                  :op1 "Volkswagen" ))
      :ARG1-of (c1 / cause-01
            :ARG0 (s1 / scandal
                  :topic (p0 / pollute-01)))
      :ARG2 (r0 / red-02))

# ::snt France shuts mosque, arrests man in crackdown after attacks
# ::tokens ["France", "shuts", "mosque", ",", "arrests", "man", "in", "crackdown", "after", "attacks"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNS", "NN", ",", "NNS", "NN", "IN", "NN", "IN", "NNS"]
# ::lemmas ["France", "shut", "mosque", ",", "arrest", "man", "in", "crackdown", "after", "attack"]
(a0 / and
      :op1 (s0 / shut-down-05
            :ARG1 (m0 / mosque)
            :ARG0 (c0 / country
                  :name (n0 / name
                        :op1 "France" )))
      :op2 (a1 / arrest-01
            :ARG0 c0
            :ARG1 (a2 / attack-01
                  :time (a3 / after))
            :ARG1 (m1 / man)))

# ::snt Russian plane reportedly crashes in Egypt
# ::tokens ["Russian", "plane", "reportedly", "crashes", "in", "Egypt"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "B"]
# ::pos_tags ["JJ", "NN", "RB", "VBZ", "IN", "NNP"]
# ::lemmas ["Russian", "plane", "reportedly", "crash", "in", "Egypt"]
(c0 / crash-01
      :ARG1 (p0 / plane
            :mod (c2 / country
                  :name (n1 / name
                        :op1 "Russia" )))
      :ARG1-of (r0 / report-01)
      :location (c1 / country
            :name (n0 / name
                  :op1 "Egypt" )))

# ::snt Mandela's condition has 'improved'
# ::tokens ["Mandela", "'s", "condition", "has", "'", "improved", "'"]
# ::ner_tags ["PERSON", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NN", "VBZ", "``", "VBN", "''"]
# ::lemmas ["Mandela", "'s", "condition", "have", "'", "improve", "'"]
(i0 / improve-01
      :ARG1 (c0 / condition
            :poss (p0 / person
                  :name (n0 / name
                        :op1 "Mandela" ))))

# ::snt Search leader urges caution in findings related to missing Malaysian jetliner
# ::tokens ["Search", "leader", "urges", "caution", "in", "findings", "related", "to", "missing", "Malaysian", "jetliner"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "NORP", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NN", "NN", "VBZ", "VBP", "IN", "NNS", "VBN", "IN", "VBG", "JJ", "NN"]
# ::lemmas ["search", "leader", "urge", "caution", "in", "finding", "relate", "to", "miss", "Malaysian", "jetliner"]
(u0 / urge-01
      :ARG1 (c0 / cautious-02
            :ARG0 p0
            :ARG1 (f0 / find-01
                  :ARG1-of (r0 / relate-01
                        :ARG2 (m0 / miss-01
                              :ARG1 (j0 / jetliner
                                    :mod (c1 / country
                                          :name (n0 / name
                                                :op1 "Malaysia" )))))))
      :ARG0 (p0 / person
            :ARG0-of (l0 / lead-02
                  :ARG1 (s0 / search-01))))

# ::snt Mandela remembered by family, as stadium memorial service is planned
# ::tokens ["Mandela", "remembered", "by", "family", ",", "as", "stadium", "memorial", "service", "is", "planned"]
# ::ner_tags ["PERSON", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBD", "IN", "NN", ",", "IN", "NN", "JJ", "NN", "VBZ", "VBN"]
# ::lemmas ["Mandela", "remember", "by", "family", ",", "as", "stadium", "memorial", "service", "be", "plan"]
(r0 / remember-01
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Mandela" ))
      :ARG0 (f0 / family)
      :time (p1 / plan-01
            :ARG1 (s0 / serve-01
                  :ARG1 (m0 / memorial)
                  :mod (s1 / stadium))))

# ::snt Obama holds out over Syria strikes
# ::tokens ["Obama", "holds", "out", "over", "Syria", "strikes"]
# ::ner_tags ["O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "VBZ", "RB", "IN", "NNP", "NNS"]
# ::lemmas ["Obama", "hold", "out", "over", "Syria", "strike"]
(h0 / hold-up-11
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Obama" ))
      :ARG2 (s0 / strike-01
            :ARG1 (c0 / country
                  :name (n1 / name
                        :op1 "Syria" ))))

# ::snt George Zimmerman found not guilty of Trayvon Martin murder
# ::tokens ["George", "Zimmerman", "found", "not", "guilty", "of", "Trayvon", "Martin", "murder"]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "O", "O", "GPE", "GPE", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "B", "I", "O"]
# ::pos_tags ["NNP", "NNP", "VBD", "RB", "JJ", "IN", "NNP", "NNP", "NN"]
# ::lemmas ["George", "Zimmerman", "find", "not", "guilty", "of", "Trayvon", "Martin", "murder"]
(f0 / find-02
      :ARG1 (g0 / guilty-01
            :ARG1 (p0 / person
                  :name (n0 / name
                        :op1 "George" 
                        :op2 "Zimmerman" ))
            :ARG2 (m0 / murder-01
                  :ARG0 (p1 / person
                        :name (n1 / name
                              :op1 "Trayvon" 
                              :op2 "Martin" )))
            :polarity - ))

# ::snt Obama, Hollande Hail Transformed US-French Relationship
# ::tokens ["Obama", ",", "Hollande", "Hail", "Transformed", "US", "-", "French", "Relationship"]
# ::ner_tags ["O", "O", "PERSON", "PERSON", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "I", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", ",", "NNP", "NNP", "NNP", "NNP", "HYPH", "NNP", "NN"]
# ::lemmas ["Obama", ",", "Hollande", "Hail", "Transformed", "US", "-", "French", "relationship"]
(a0 / and
      :op1 (p0 / person
            :name (n0 / name
                  :op1 "Obama" ))
      :op2 (s0 / surrender-01
            :ARG1 (r0 / relation-03
                  :ARG0 (c0 / country
                        :name (n2 / name
                              :op1 "US" ))
                  :ARG0 (c1 / country
                        :name (n3 / name
                              :op1 "France" )))
            :ARG0 (p1 / person
                  :name (n1 / name
                        :op1 "Obama" ))))

# ::snt Russian parliament allows Putin to use military in Ukraine
# ::tokens ["Russian", "parliament", "allows", "Putin", "to", "use", "military", "in", "Ukraine"]
# ::ner_tags ["NORP", "O", "O", "PERSON", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "O", "O", "B"]
# ::pos_tags ["JJ", "NN", "VBZ", "NNP", "TO", "VB", "NN", "IN", "NNP"]
# ::lemmas ["Russian", "parliament", "allow", "Putin", "to", "use", "military", "in", "Ukraine"]
(a0 / allow-01
      :ARG1 (u0 / use-01
            :ARG1 (m0 / military)
            :ARG0 (p0 / person
                  :name (n1 / name
                        :op1 "Putin" ))
            :location (c0 / country
                  :name (n2 / name
                        :op1 "Ukraine" )))
      :ARG0 (g0 / government-organization
            :name (n0 / name
                  :op1 "Parliament" )))

# ::snt World stocks rise on hopes Fed to keep stimulus
# ::tokens ["World", "stocks", "rise", "on", "hopes", "Fed", "to", "keep", "stimulus"]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NN", "NNS", "VBP", "IN", "NNS", "NNP", "TO", "VB", "NN"]
# ::lemmas ["world", "stock", "rise", "on", "hope", "Fed", "to", "keep", "stimulus"]
(r0 / rise-01
      :ARG1 (s0 / stock
            :mod (w0 / world))
      :ARG2 (h0 / hope-01
            :ARG1 (k0 / keep-01
                  :ARG1 (s1 / stimulus)
                  :ARG0 (g0 / government-organization
                        :name (n0 / name
                              :op1 "Fed" )))))

# ::snt No winners in a war of sanctions
# ::tokens ["No", "winners", "in", "a", "war", "of", "sanctions"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNS", "IN", "DT", "NN", "IN", "NNS"]
# ::lemmas ["no", "winner", "in", "a", "war", "of", "sanction"]
(p0 / person
      :ARG0-of (w0 / win-01
            :location (w1 / war-01
                  :ARG1 (s0 / sanction-02)))
      :polarity - )

# ::snt Tata Nano and other Indian small cars fail crash tests
# ::tokens ["Tata", "Nano", "and", "other", "Indian", "small", "cars", "fail", "crash", "tests"]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "NORP", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "CC", "JJ", "JJ", "JJ", "NNS", "VBP", "NN", "NNS"]
# ::lemmas ["Tata", "Nano", "and", "other", "Indian", "small", "car", "fail", "crash", "test"]
(f0 / fail-01
      :ARG1 (a0 / and
            :op1 (p0 / person
                  :name (n0 / name
                        :op1 "Tata" 
                        :op2 "Nano" ))
            :op2 (c0 / car
                  :mod (s0 / small)
                  :mod (o0 / other)
                  :mod (c2 / country
                        :name (n1 / name
                              :op1 "India" ))))
      :ARG2 (t0 / test-01
            :ARG2 (c1 / crash-01)))

# ::snt Turkey unrest goes on despite end to park protest
# ::tokens ["Turkey", "unrest", "goes", "on", "despite", "end", "to", "park", "protest"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NN", "VBZ", "RP", "IN", "NN", "IN", "VB", "NN"]
# ::lemmas ["Turkey", "unrest", "go", "on", "despite", "end", "to", "park", "protest"]
(g0 / go-on-15
      :ARG1 (u0 / unrest
            :location (c0 / country
                  :name (n0 / name
                        :op1 "Turkey" )))
      :concession (e0 / end-01
            :ARG1 (p0 / protest-01
                  :ARG1 (p1 / park-01))))

# ::snt Top Asian News at 2:30 p.m. GMT
# ::tokens ["Top", "Asian", "News", "at", "2:30", "p.m.", "GMT"]
# ::ner_tags ["ORG", "ORG", "ORG", "O", "TIME", "TIME", "PERSON"]
# ::ner_iob ["B", "I", "I", "O", "B", "I", "B"]
# ::pos_tags ["JJ", "NNP", "NNP", "IN", "CD", "NN", "NNP"]
# ::lemmas ["Top", "Asian", "News", "at", "2:30", "p.m.", "GMT"]
(b0 / broadcast-program
      :mod (n0 / name
            :op1 "Top" 
            :op2 "Asian" 
            :op3 "News" )
      :time (b1 / broadcast-program
            :name (n1 / name
                  :op1 "GMT" 
                  :op1 "GMT" 
                  :op1 "GMT" 
                  :op1 "GMT" 
                  :op1 "GMT" 
                  :op1 "GMT" ))
      :time (d0 / date-entity
            :time "2:30" ))

# ::snt Singapore shares open 0.83% higher on Wednesday
# ::tokens ["Singapore", "shares", "open", "0.83", "%", "higher", "on", "Wednesday"]
# ::ner_tags ["GPE", "O", "O", "PERCENT", "PERCENT", "O", "O", "DATE"]
# ::ner_iob ["B", "O", "O", "B", "I", "O", "O", "B"]
# ::pos_tags ["NNP", "NNS", "VBP", "CD", "NN", "JJR", "IN", "NNP"]
# ::lemmas ["Singapore", "share", "open", "0.83", "%", "high", "on", "Wednesday"]
(o0 / open-01
      :ARG1 (s0 / share-01
            :ARG0 (c0 / country
                  :name (n0 / name
                        :op1 "Singapore" ))
            :quant (p0 / percentage-entity
                  :value 0.83 ))
      :time (h0 / high-02
            :ARG2-of (h1 / have-degree-91
                  :ARG3 (m0 / more)))
      :time (d0 / date-entity
            :weekday (w0 / wednesday)))

# ::snt China treasury bond futures open higher Tuesday
# ::tokens ["China", "treasury", "bond", "futures", "open", "higher", "Tuesday"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "DATE"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "NNP", "NN", "NNS", "VBP", "JJR", "NNP"]
# ::lemmas ["China", "treasury", "bond", "future", "open", "high", "Tuesday"]
(o0 / open-01
      :ARG1 (f0 / future
            :mod (b0 / bond
                  :mod (t1 / treasury)
                  :poss (c0 / country
                        :name (n0 / name
                              :op1 "China" ))))
      :ARG1-of (h0 / have-degree-91
            :ARG2 h1
            :ARG3 (t0 / tuesday)
            :ARG3 (m0 / more))
      :ARG1-of (h1 / high-02))

# ::snt 7.3 magnitude earthquake strikes Nepal
# ::tokens ["7.3", "magnitude", "earthquake", "strikes", "Nepal"]
# ::ner_tags ["CARDINAL", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "B"]
# ::pos_tags ["CD", "NN", "NN", "VBZ", "NNP"]
# ::lemmas ["7.3", "magnitude", "earthquake", "strike", "Nepal"]
(s0 / strike-01
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Nepal" ))
      :ARG0 (e0 / earthquake
            :quant (s1 / seismic-quantity
                  :quant 7.3 )))

# ::snt Iran's parliament backs nuclear deal
# ::tokens ["Iran", "'s", "parliament", "backs", "nuclear", "deal"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NN", "VBZ", "JJ", "NN"]
# ::lemmas ["Iran", "'s", "parliament", "back", "nuclear", "deal"]
(b0 / back-01
      :ARG1 (d0 / deal-01
            :ARG2 (n0 / nucleus))
      :ARG0 (g0 / government-organization
            :mod (c0 / country
                  :name (n2 / name
                        :op1 "Iran" ))
            :name (n1 / name
                  :op1 "Parliament" )))

# ::snt Israeli forces arrest 21 Palestinians overnight, clash with locals
# ::tokens ["Israeli", "forces", "arrest", "21", "Palestinians", "overnight", ",", "clash", "with", "locals"]
# ::ner_tags ["NORP", "O", "O", "CARDINAL", "NORP", "TIME", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "B", "B", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNS", "VBP", "CD", "NNPS", "RB", ",", "VB", "IN", "NNS"]
# ::lemmas ["Israeli", "force", "arrest", "21", "Palestinians", "overnight", ",", "clash", "with", "local"]
(a0 / and
      :op1 (a1 / arrest-01
            :ARG1 (p0 / person
                  :mod (c1 / country
                        :name (n0 / name
                              :op1 "Palestine" ))
                  :quant 21 )
            :ARG0 (f0 / force
                  :mod (c2 / country
                        :name (n1 / name
                              :op1 "Israel" )))
            :time (o0 / overnight))
      :op2 (c0 / clash-01
            :ARG1 (l0 / local-02)))

# ::snt CCTV of gunmen in Tunisia museum attack
# ::tokens ["CCTV", "of", "gunmen", "in", "Tunisia", "museum", "attack"]
# ::ner_tags ["ORG", "O", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "IN", "NNS", "IN", "NNP", "NN", "NN"]
# ::lemmas ["CCTV", "of", "gunman", "in", "Tunisia", "museum", "attack"]
(a0 / attack-01
      :ARG0 (g0 / gunman
            :location (c0 / country
                  :name (n0 / name
                        :op1 "Tunisia" )))
      :mod (t0 / television
            :mod (c1 / circuit
                  :ARG1-of (c2 / close-01)))
      :location (m0 / museum))

# ::snt Teenager tests negative for Ebola
# ::tokens ["Teenager", "tests", "negative", "for", "Ebola"]
# ::ner_tags ["PERSON", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O"]
# ::pos_tags ["NN", "NNS", "JJ", "IN", "NNP"]
# ::lemmas ["Teenager", "test", "negative", "for", "Ebola"]
(t0 / test-01
      :ARG2 (T0 / Teenager)
      :ARG2 (d0 / disease
            :name (n1 / name
                  :op1 "Ebola" ))
      :ARG2 (n0 / negative-03))

# ::snt Texas sues over Syrian refugees
# ::tokens ["Texas", "sues", "over", "Syrian", "refugees"]
# ::ner_tags ["GPE", "O", "O", "NORP", "O"]
# ::ner_iob ["B", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "VBZ", "IN", "JJ", "NNS"]
# ::lemmas ["Texas", "sue", "over", "Syrian", "refugee"]
(s0 / sue-02
      :ARG0 (s1 / state
            :name (n0 / name
                  :op1 "Texas" ))
      :ARG2 (r0 / refugee
            :mod (c0 / country
                  :name (n1 / name
                        :op1 "Syria" ))))

# ::snt Rooney helps Man United beat Everton 3-0 in Premier League
# ::tokens ["Rooney", "helps", "Man", "United", "beat", "Everton", "3", "-", "0", "in", "Premier", "League"]
# ::ner_tags ["O", "O", "PERSON", "PERSON", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "I", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "VBZ", "NNP", "NNP", "VBD", "NNP", "CD", "SYM", "NFP", "IN", "NNP", "NNP"]
# ::lemmas ["rooney", "help", "Man", "United", "beat", "Everton", "3", "-", "0", "in", "Premier", "League"]
(h0 / help-01
      :ARG1 (t0 / team
            :name (n0 / name
                  :op1 "Man" 
                  :op2 "United" ))
      :ARG0 (p0 / person
            :name (n1 / name
                  :op1 "rooney" 
                  :op1 "rooney" ))
      :ARG1 (b0 / beat-03
            :ARG0 t0
            :ARG1 0 
            :location (t1 / team
                  :name (n2 / name
                        :op1 "Everton" ))
            :location (l0 / league
                  :name (n3 / name
                        :op1 "Premier" 
                        :op3 "League" ))))

# ::snt Hard-line Jewish leader shot in Jerusalem
# ::tokens ["Hard", "-", "line", "Jewish", "leader", "shot", "in", "Jerusalem"]
# ::ner_tags ["O", "O", "O", "NORP", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "O", "B"]
# ::pos_tags ["JJ", "HYPH", "NN", "JJ", "NN", "VBD", "IN", "NNP"]
# ::lemmas ["hard", "-", "line", "Jewish", "leader", "shoot", "in", "Jerusalem"]
(s0 / shoot-02
      :ARG1 (p0 / person
            :mod (l0 / line
                  :ARG1-of (h0 / hard-04))
            :mod (r0 / religious-group
                  :name (n1 / name
                        :op1 "Jew" ))
            :ARG0-of (l1 / lead-02))
      :location (c0 / city
            :name (n0 / name
                  :op1 "Jerusalem" )))

# ::snt Waba emerges new NLC president
# ::tokens ["Waba", "emerges", "new", "NLC", "president"]
# ::ner_tags ["ORG", "O", "O", "ORG", "O"]
# ::ner_iob ["B", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "VBZ", "JJ", "JJ", "NN"]
# ::lemmas ["Waba", "emerge", "new", "NLC", "president"]
(e0 / emerge-01
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Waba" ))
      :ARG1 (p1 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (p2 / political-party
                        :name (n1 / name
                              :op1 "NLC" ))
                  :ARG2 (p3 / president
                        :ARG1-of (n2 / new-01)))))

# ::snt Egypt: IPI Urges Release of Al Jazeera Journalist Arrested in Berlin
# ::tokens ["Egypt", ":", "IPI", "Urges", "Release", "of", "Al", "Jazeera", "Journalist", "Arrested", "in", "Berlin"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "ORG", "ORG", "ORG", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "B", "I", "I", "O", "O", "B"]
# ::pos_tags ["NNP", ":", "NNP", "VBZ", "NNP", "IN", "NNP", "NNP", "NNP", "VBN", "IN", "NNP"]
# ::lemmas ["Egypt", ":", "IPI", "urge", "Release", "of", "Al", "Jazeera", "Journalist", "arrest", "in", "Berlin"]
(a0 / and
      :op1 (u0 / urge-01
            :ARG1 (c0 / country
                  :name (n0 / name
                        :op1 "Egypt" ))
            :ARG0 (r0 / release-01
                  :ARG1 (p1 / publication
                        :name (n3 / name
                              :op1 "IPI" )))
            :ARG0 (p0 / publication
                  :name (n1 / name
                        :op1 "Al" 
                        :op2 "Jazeera" )))
      :op2 (a1 / arrest-01
            :location (c1 / city
                  :name (n2 / name
                        :op1 "Berlin" ))))

# ::snt 5 US airstrikes target Islamic State fighters
# ::tokens ["5", "US", "airstrikes", "target", "Islamic", "State", "fighters"]
# ::ner_tags ["CARDINAL", "GPE", "O", "O", "NORP", "O", "O"]
# ::ner_iob ["B", "B", "O", "O", "B", "O", "O"]
# ::pos_tags ["CD", "NNP", "VBZ", "NN", "NNP", "NNP", "NNS"]
# ::lemmas ["5", "US", "airstrike", "target", "Islamic", "State", "fighter"]
(t0 / target-01
      :ARG1 (f0 / fight-01
            :ARG0 (s1 / state
                  :mod (r0 / religious-group
                        :name (n1 / name
                              :op1 "Islamic" ))))
      :ARG0 (s0 / strike-01
            :path 5 
            :path (a0 / air))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "US" )))

# ::snt Burundi police fire tear gas at protesters
# ::tokens ["Burundi", "police", "fire", "tear", "gas", "at", "protesters"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "VBP", "NN", "NN", "IN", "NNS"]
# ::lemmas ["Burundi", "police", "fire", "tear", "gas", "at", "protester"]
(f0 / fire-01
      :ARG1 (g0 / gas
            :mod (t0 / tear))
      :ARG0 (p0 / police
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Burundi" )))
      :destination (p1 / person
            :ARG0-of (p2 / protest-01)))

# ::snt Ashya's Parents Arrive For Extradition Hearing
# ::tokens ["Ashya", "'s", "Parents", "Arrive", "For", "Extradition", "Hearing"]
# ::ner_tags ["PERSON", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NNS", "VBP", "IN", "NN", "NN"]
# ::lemmas ["Ashya", "'s", "parent", "arrive", "for", "extradition", "hearing"]
(a0 / arrive-01
      :ARG1 (p0 / person
            :ARG0-of (h1 / have-rel-role-91
                  :ARG1 (p1 / person
                        :name (n0 / name
                              :op1 "Ashya" ))
                  :ARG2 (p2 / parent)))
      :purpose (h0 / hear-01
            :ARG2 (e0 / extradite-01)))

# ::snt Nigeria admits slow response in Ebola case
# ::tokens ["Nigeria", "admits", "slow", "response", "in", "Ebola", "case"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "JJ", "NN", "IN", "NNP", "NN"]
# ::lemmas ["Nigeria", "admit", "slow", "response", "in", "Ebola", "case"]
(a0 / admit-02
      :ARG1 (r0 / respond-01
            :ARG0 c0
            :ARG1 (c1 / case-04
                  :ARG1 (d0 / disease
                        :name (n1 / name
                              :op1 "Ebola" )))
            :ARG1-of (s0 / slow-05))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Nigeria" )))

# ::snt Thousands cross Austria-Hungary border
# ::tokens ["Thousands", "cross", "Austria", "-", "Hungary", "border"]
# ::ner_tags ["CARDINAL", "O", "GPE", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "B", "O", "B", "O"]
# ::pos_tags ["NNS", "VBP", "NNP", "HYPH", "NNP", "NN"]
# ::lemmas ["Thousands", "cross", "Austria", "-", "Hungary", "border"]
(c0 / cross-02
      :ARG1 (b0 / border-01
            :ARG2 (c1 / country
                  :name (n0 / name
                        :op1 "Austria" )))
      :ARG0 (p0 / person
            :quant (m0 / multiple
                  :op1 1000 )))

# ::snt Benzema faces possible charges in sex-tape case
# ::tokens ["Benzema", "faces", "possible", "charges", "in", "sex", "-", "tape", "case"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "JJ", "NNS", "IN", "NN", "HYPH", "NN", "NN"]
# ::lemmas ["Benzema", "face", "possible", "charge", "in", "sex", "-", "tape", "case"]
(f0 / face-01
      :ARG1 (c0 / charge-05
            :ARG1 p0
            :ARG1-of (p1 / possible-01)
            :ARG2 (t0 / tape-02
                  :ARG1 (s0 / sex-01)))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Benzema" )))

# ::snt US Senate votes to advance Iran nuclear review bill
# ::tokens ["US", "Senate", "votes", "to", "advance", "Iran", "nuclear", "review", "bill"]
# ::ner_tags ["ORG", "ORG", "O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "TO", "VB", "NNP", "JJ", "NN", "NN"]
# ::lemmas ["US", "Senate", "vote", "to", "advance", "Iran", "nuclear", "review", "bill"]
(v0 / vote-01
      :ARG1 (a0 / advance-01
            :ARG0 g0
            :ARG1 (b0 / bill
                  :mod (r0 / review-01
                        :mod (n2 / nucleus))
                  :mod (c1 / country
                        :name (n3 / name
                              :op1 "Iran" ))))
      :ARG0 (g0 / government-organization
            :mod (c0 / country
                  :name (n1 / name
                        :op1 "US" ))
            :name (n0 / name
                  :op1 "Senate" )))

# ::snt Gunners fire but fail to advance in Champions League
# ::tokens ["Gunners", "fire", "but", "fail", "to", "advance", "in", "Champions", "League"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "ORG", "ORG"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "I"]
# ::pos_tags ["NNS", "VBP", "CC", "VBP", "TO", "VB", "IN", "NNPS", "NNP"]
# ::lemmas ["gunner", "fire", "but", "fail", "to", "advance", "in", "Champions", "League"]
(c0 / contrast-01
      :ARG1 (f0 / fail-01
            :ARG1 (p0 / person
                  :ARG0-of (t0 / team
                        :name (n0 / name
                              :op2 "League" ))
                  :ARG0-of (f2 / fight-01))
            :ARG2 (a0 / advance-01
                  :ARG0 p0
                  :ARG1 (l0 / league
                        :mod "Champions" )))
      :ARG1 (f1 / fire-01
            :ARG0 p0))

# ::snt Iranian President praises nuclear deal
# ::tokens ["Iranian", "President", "praises", "nuclear", "deal"]
# ::ner_tags ["NORP", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNP", "VBZ", "JJ", "NN"]
# ::lemmas ["Iranian", "President", "praise", "nuclear", "deal"]
(p0 / praise-01
      :ARG1 (d0 / deal-01
            :ARG2 (n0 / nucleus))
      :ARG0 (p1 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c0 / country
                        :name (n1 / name
                              :op1 "Iran" ))
                  :ARG2 (p2 / president))))

# ::snt Boko Haram disrupts Nigerian elections
# ::tokens ["Boko", "Haram", "disrupts", "Nigerian", "elections"]
# ::ner_tags ["O", "O", "O", "NORP", "O"]
# ::ner_iob ["O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "JJ", "NNS"]
# ::lemmas ["Boko", "Haram", "disrupt", "Nigerian", "election"]
(d0 / disrupt-01
      :ARG1 (e0 / elect-01
            :ARG1 (d1 / disrupt-01)
            :location (c0 / country
                  :name (n1 / name
                        :op1 "Vietnam" )))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Boko" 
                  :op2 "Haram" )))

# ::snt South Korea regrets North's refusal of talks
# ::tokens ["South", "Korea", "regrets", "North", "'s", "refusal", "of", "talks"]
# ::ner_tags ["GPE", "GPE", "O", "LOC", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "NNP", "POS", "NN", "IN", "NNS"]
# ::lemmas ["South", "Korea", "regret", "North", "'s", "refusal", "of", "talk"]
(r0 / regret-01
      :ARG1 (r1 / refuse-01
            :ARG1 (t0 / talk-01
                  :ARG0 c1)
            :ARG0 (c1 / country
                  :name (n1 / name
                        :op1 "North" 
                        :op2 "Korea" )))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "South" 
                  :op2 "Korea" )))

# ::snt South Korea reports seven new MERS cases
# ::tokens ["South", "Korea", "reports", "seven", "new", "MERS", "cases"]
# ::ner_tags ["GPE", "GPE", "O", "CARDINAL", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "CD", "JJ", "NNP", "NNS"]
# ::lemmas ["South", "Korea", "report", "seven", "new", "MERS", "case"]
(r0 / report-01
      :ARG1 (c0 / case-04
            :ARG1-of (n0 / new-01)
            :quant 7 
            :ARG1 (p0 / product
                  :name (n2 / name
                        :op1 "MERS" )))
      :ARG0 (c1 / country
            :name (n1 / name
                  :op1 "South" 
                  :op2 "Korea" )))

# ::snt U.S. military says it conducts airstrikes against IS in Syria, Iraq
# ::tokens ["U.S.", "military", "says", "it", "conducts", "airstrikes", "against", "IS", "in", "Syria", ",", "Iraq"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "B"]
# ::pos_tags ["NNP", "NN", "VBZ", "PRP", "VBZ", "NNS", "IN", "NNP", "IN", "NNP", ",", "NNP"]
# ::lemmas ["U.S.", "military", "say", "it", "conduct", "airstrike", "against", "IS", "in", "Syria", ",", "Iraq"]
(s0 / say-01
      :ARG1 (c0 / conduct-01
            :ARG0 m0
            :ARG1 (s1 / strike-01
                  :ARG1 (c2 / country
                        :name (n1 / name
                              :op1 "U.S." ))
                  :ARG1 (c3 / counter-01
                        :ARG1 (m1 / military
                              :name (n2 / name
                                    :op1 "IS" )))
                  :path (a0 / air)))
      :ARG0 (m0 / military
            :mod (c1 / country
                  :name (n0 / name
                        :op1 "Syria" ))))

# ::snt UK Leader Signals Support for Airstrikes on IS in Syria
# ::tokens ["UK", "Leader", "Signals", "Support", "for", "Airstrikes", "on", "IS", "in", "Syria"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "NNP", "NNPS", "NNP", "IN", "NNS", "IN", "NNS", "IN", "NNP"]
# ::lemmas ["UK", "Leader", "Signals", "Support", "for", "airstrike", "on", "is", "in", "Syria"]
(s0 / support-01
      :ARG1 (s1 / strike-01
            :location (c0 / country
                  :name (n1 / name
                        :op1 "Syria" ))
            :location (a0 / air))
      :ARG0 (m0 / military
            :name (n0 / name
                  :op1 "UK" 
                  :op2 (g0 / gun))
            :ARG0-of (l0 / lead-02)))

# ::snt Israel bars Palestinians from Jerusalem's Old City
# ::tokens ["Israel", "bars", "Palestinians", "from", "Jerusalem", "'s", "Old", "City"]
# ::ner_tags ["GPE", "O", "NORP", "O", "GPE", "O", "GPE", "GPE"]
# ::ner_iob ["B", "O", "B", "O", "B", "O", "B", "I"]
# ::pos_tags ["NNP", "VBZ", "NNPS", "IN", "NNP", "POS", "NNP", "NNP"]
# ::lemmas ["Israel", "bar", "Palestinians", "from", "Jerusalem", "'s", "Old", "City"]
(b0 / bar-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "Israel" ))
      :ARG2 (c1 / city
            :name (n1 / name
                  :op1 "Old" 
                  :op2 "City" ))
      :ARG1 (p0 / person
            :mod (c2 / country
                  :name (n2 / name
                        :op1 "Palestine" ))))

# ::snt How much do you know about Secret Service?
# ::tokens ["How", "much", "do", "you", "know", "about", "Secret", "Service", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "JJ", "VBP", "PRP", "VB", "IN", "NNP", "NNP", "."]
# ::lemmas ["how", "much", "do", "you", "know", "about", "Secret", "Service", "?"]
(k0 / know-01
      :ARG1 (m0 / much
            :topic (a0 / amr-unknown)
            :topic (m1 / military
                  :name (n0 / name
                        :op1 "Secret" 
                        :op2 "Service" )))
      :ARG0 (y0 / you))

# ::snt UN chief welcomes peaceful presidential elections in Guinea
# ::tokens ["UN", "chief", "welcomes", "peaceful", "presidential", "elections", "in", "Guinea"]
# ::ner_tags ["ORG", "O", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "JJ", "VBZ", "JJ", "JJ", "NNS", "IN", "NNP"]
# ::lemmas ["UN", "chief", "welcome", "peaceful", "presidential", "election", "in", "Guinea"]
(w0 / welcome-01
      :ARG1 (e0 / elect-01
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Guinea" ))
            :mod (p1 / president)
            :mod (p2 / peaceful))
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (o0 / organization
                        :name (n1 / name
                              :op1 "UN" ))
                  :ARG2 (c1 / chief))))

# ::snt At least 18 killed in Iraq mosque bombing
# ::tokens ["At", "least", "18", "killed", "in", "Iraq", "mosque", "bombing"]
# ::ner_tags ["CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "I", "I", "O", "O", "B", "O", "O"]
# ::pos_tags ["IN", "JJS", "CD", "VBN", "IN", "NNP", "NN", "NN"]
# ::lemmas ["At", "least", "18", "kill", "in", "Iraq", "mosque", "bombing"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant (a0 / at-least
                  :op1 18 ))
      :ARG1-of (b0 / bomb-01
            :ARG1 (m0 / mosque
                  :location (c0 / country
                        :name (n0 / name
                              :op1 "Iraq" )))))

# ::snt Malaysia Airlines plane crashes on Ukraine-Russia border - live
# ::tokens ["Malaysia", "Airlines", "plane", "crashes", "on", "Ukraine", "-", "Russia", "border", "-", "live"]
# ::ner_tags ["ORG", "ORG", "O", "O", "O", "GPE", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "B", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NN", "NNS", "IN", "NNP", "HYPH", "NNP", "NN", "HYPH", "NN"]
# ::lemmas ["Malaysia", "Airlines", "plane", "crash", "on", "Ukraine", "-", "Russia", "border", "-", "live"]
(c0 / crash-01
      :ARG1 (c1 / cause-01
            :ARG0 (b0 / border-01
                  :ARG2 (c3 / country
                        :name (n1 / name
                              :op1 "Ukraine" ))
                  :ARG2 (c4 / country
                        :name (n2 / name
                              :op1 "Russia" ))
                  :ARG2 (l0 / live-01)))
      :ARG1 (p0 / plane
            :poss (c2 / company
                  :name (n0 / name
                        :op1 "Malaysia" 
                        :op2 "Airlines" ))))

# ::snt Tycoon claims win in Ukraine and promises to seek future in EU
# ::tokens ["Tycoon", "claims", "win", "in", "Ukraine", "and", "promises", "to", "seek", "future", "in", "EU"]
# ::ner_tags ["O", "O", "O", "O", "GPE", "O", "O", "O", "O", "O", "O", "ORG"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NN", "NNS", "VBP", "IN", "NNP", "CC", "NNS", "TO", "VB", "NN", "IN", "NNP"]
# ::lemmas ["tycoon", "claim", "win", "in", "Ukraine", "and", "promise", "to", "seek", "future", "in", "EU"]
(a0 / and
      :op1 (c0 / claim-01
            :ARG1 (w0 / win-01
                  :location (c2 / country
                        :name (n1 / name
                              :op1 "EU" )))
            :ARG0 (c1 / company
                  :name (n0 / name
                        :op1 "tycoon" )))
      :op2 (p0 / promise-01
            :ARG0 c1
            :ARG2 (s0 / seek-01
                  :ARG0 c1
                  :ARG1 (f0 / future))))

# ::snt The covert war in Pakistan
# ::tokens ["The", "covert", "war", "in", "Pakistan"]
# ::ner_tags ["O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "O", "B"]
# ::pos_tags ["DT", "JJ", "NN", "IN", "NNP"]
# ::lemmas ["the", "covert", "war", "in", "Pakistan"]
(w0 / war-01
      :mod (c0 / covert)
      :location (c1 / country
            :name (n0 / name
                  :op1 "Pakistan" )))

# ::snt 4 killed, several injured in SW China car accident
# ::tokens ["4", "killed", ",", "several", "injured", "in", "SW", "China", "car", "accident"]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["CD", "VBN", ",", "JJ", "VBN", "IN", "NNP", "NNP", "NN", "NN"]
# ::lemmas ["4", "kill", ",", "several", "injure", "in", "SW", "China", "car", "accident"]
(a0 / and
      :op1 (k0 / kill-01
            :ARG1 (p0 / person
                  :quant 4 ))
      :op2 (i0 / injure-01
            :ARG1 (p1 / person
                  :quant (s0 / several)))
      :location (a1 / accident
            :mod (c0 / car)
            :location (w0 / world-region
                  :name (n0 / name
                        :op1 "SW" 
                        :op2 "China" ))))

# ::snt 4 dead, 3 injured in east China road accident
# ::tokens ["4", "dead", ",", "3", "injured", "in", "east", "China", "road", "accident"]
# ::ner_tags ["CARDINAL", "O", "O", "CARDINAL", "O", "O", "LOC", "LOC", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "B", "I", "O", "O"]
# ::pos_tags ["CD", "JJ", ",", "CD", "VBN", "IN", "JJ", "NNP", "NN", "NN"]
# ::lemmas ["4", "dead", ",", "3", "injure", "in", "east", "China", "road", "accident"]
(a0 / and
      :op1 (d0 / die-01
            :ARG1 (p0 / person
                  :quant 4 ))
      :op2 (i0 / injure-01
            :ARG1 (p1 / person
                  :quant 3 ))
      :location (a1 / accident
            :mod (r0 / road)
            :location (e0 / east
                  :part-of (c0 / country
                        :name (n0 / name
                              :op1 "China" )))))

# ::snt Pope canonizes 2 Palestinians
# ::tokens ["Pope", "canonizes", "2", "Palestinians"]
# ::ner_tags ["ORG", "ORG", "CARDINAL", "NORP"]
# ::ner_iob ["B", "I", "B", "B"]
# ::pos_tags ["NNP", "VBZ", "CD", "NNPS"]
# ::lemmas ["Pope", "canonizes", "2", "Palestinians"]
(c0 / condemn-01
      :ARG1 (p0 / person
            :mod (r0 / religious-group
                  :name (n0 / name
                        :op1 "Pope" )))
      :ARG0 (p1 / person
            :quant 2 
            :mod (c1 / country
                  :name (n1 / name
                        :op1 "Palestine" ))))

# ::snt 3 killed, 4 injured in Los Angeles shootings
# ::tokens ["3", "killed", ",", "4", "injured", "in", "Los", "Angeles", "shootings"]
# ::ner_tags ["CARDINAL", "O", "O", "CARDINAL", "O", "O", "GPE", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "B", "I", "O"]
# ::pos_tags ["CD", "VBD", ",", "CD", "VBN", "IN", "NNP", "NNP", "NNS"]
# ::lemmas ["3", "kill", ",", "4", "injure", "in", "Los", "Angeles", "shooting"]
(a0 / and
      :op1 (k0 / kill-01
            :ARG1 (c0 / cause-01
                  :ARG0 (s0 / shoot-02
                        :location (c1 / city
                              :name (n0 / name
                                    :op1 "Los" 
                                    :op2 "Angeles" ))))
            :ARG1 (p0 / person
                  :quant 3 ))
      :op2 (i0 / injure-01
            :ARG1 (p1 / person
                  :quant 4 )))

# ::snt 5 killed in Israeli air strikes in Gaza
# ::tokens ["5", "killed", "in", "Israeli", "air", "strikes", "in", "Gaza"]
# ::ner_tags ["CARDINAL", "O", "O", "NORP", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "O", "B"]
# ::pos_tags ["CD", "VBN", "IN", "JJ", "NN", "NNS", "IN", "NNP"]
# ::lemmas ["5", "kill", "in", "Israeli", "air", "strike", "in", "Gaza"]
(k0 / kill-01
      :ARG1 (s0 / strike-01
            :ARG1 (c1 / country
                  :name (n0 / name
                        :op1 "Israel" ))
            :ARG0 (a0 / air)
            :location (c2 / country-region
                  :name (n1 / name
                        :op1 "Gaza" )))
      :ARG1-of (c0 / cause-01))

# ::snt Funeral of Ian Paisley to take place in Belfast
# ::tokens ["Funeral", "of", "Ian", "Paisley", "to", "take", "place", "in", "Belfast"]
# ::ner_tags ["O", "O", "PERSON", "PERSON", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "B", "I", "O", "O", "O", "O", "B"]
# ::pos_tags ["NN", "IN", "NNP", "NNP", "TO", "VB", "NN", "IN", "NNP"]
# ::lemmas ["funeral", "of", "Ian", "Paisley", "to", "take", "place", "in", "Belfast"]
(f0 / funeral
      :location (p0 / person
            :name (n0 / name
                  :op1 "Ian" 
                  :op2 "Paisley" ))
      :location (c0 / city
            :name (n1 / name
                  :op1 "Belfast" )))

# ::snt Libya: UN orders investigation into Libya rights abuses
# ::tokens ["Libya", ":", "UN", "orders", "investigation", "into", "Libya", "rights", "abuses"]
# ::ner_tags ["GPE", "O", "ORG", "O", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", ":", "NNP", "NNS", "NN", "IN", "NNP", "NNS", "NNS"]
# ::lemmas ["Libya", ":", "UN", "order", "investigation", "into", "Libya", "right", "abuse"]
(i0 / investigate-01
      :ARG1 (a0 / abuse-01
            :ARG1 (r0 / right-05))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Libya" ))
      :ARG1-of (o0 / order-01
            :ARG0 (o1 / organization
                  :name (n1 / name
                        :op1 "UN" ))))

# ::snt Oscar Pistorius sentenced to 5 years in prison
# ::tokens ["Oscar", "Pistorius", "sentenced", "to", "5", "years", "in", "prison"]
# ::ner_tags ["ORG", "ORG", "O", "O", "DATE", "DATE", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "B", "I", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBD", "IN", "CD", "NNS", "IN", "NN"]
# ::lemmas ["Oscar", "Pistorius", "sentence", "to", "5", "years", "in", "prison"]
(s0 / sentence-01
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Oscar" 
                  :op2 "Pistorius" ))
      :ARG2 (t0 / temporal-quantity
            :quant 5 
            :location (p1 / prison)
            :unit (y0 / year)))

# ::snt Govt. to hold talks with FTII students
# ::tokens ["Govt", ".", "to", "hold", "talks", "with", "FTII", "students"]
# ::ner_tags ["ORG", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", ".", "TO", "VB", "NNS", "IN", "NNP", "NNS"]
# ::lemmas ["Govt", ".", "to", "hold", "talk", "with", "FTII", "student"]
(h0 / hold-04
      :ARG1 (t0 / talk-01
            :ARG0 g0
            :ARG2 (p0 / person
                  :mod (s0 / study-01)
                  :mod (f0 / fuck
                        :mode expressive )))
      :ARG0 (g0 / government-organization
            :ARG0-of (g1 / govern-01)))

# ::snt Li Na to announce retirement
# ::tokens ["Li", "Na", "to", "announce", "retirement"]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "TO", "VB", "NN"]
# ::lemmas ["Li", "Na", "to", "announce", "retirement"]
(a0 / announce-01
      :ARG1 (r0 / retire-01
            :ARG0 p0)
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Li" 
                  :op2 "Na" )))

# ::snt Plane Crash Site Search Called off for the Night
# ::tokens ["Plane", "Crash", "Site", "Search", "Called", "off", "for", "the", "Night"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "NNP", "NNP", "NNP", "VBN", "RP", "IN", "DT", "NNP"]
# ::lemmas ["plane", "Crash", "Site", "Search", "call", "off", "for", "the", "Night"]
(s0 / search-01
      :ARG1 (f0 / fly-01
            :duration (d0 / date-entity
                  :dayperiod (n0 / night)))
      :ARG2 (c0 / crash-01
            :ARG1 (p0 / plane)))

# ::snt Obama queries Turnbull over China port deal
# ::tokens ["Obama", "queries", "Turnbull", "over", "China", "port", "deal"]
# ::ner_tags ["O", "O", "ORG", "O", "GPE", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "NNS", "VBP", "IN", "NNP", "NN", "NN"]
# ::lemmas ["Obama", "query", "Turnbull", "over", "China", "port", "deal"]
(q0 / query-01
      :ARG1 (d0 / deal-01
            :ARG2 (p2 / port)
            :ARG0 (c0 / country
                  :name (n2 / name
                        :op1 "China" )))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Obama" ))
      :ARG0 (p1 / person
            :name (n1 / name
                  :op1 "Turnbull" )))

# ::snt China's generous 1MDB bid seen reaping it big returns in Malaysia
# ::tokens ["China", "'s", "generous", "1MDB", "bid", "seen", "reaping", "it", "big", "returns", "in", "Malaysia"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "POS", "JJ", "NNS", "NN", "VBN", "VBG", "PRP", "JJ", "NNS", "IN", "NNP"]
# ::lemmas ["China", "'s", "generous", "1mdb", "bid", "see", "reap", "it", "big", "return", "in", "Malaysia"]
(s0 / see-01
      :ARG1 (r0 / reap-01
            :ARG0 b0
            :ARG1 (r1 / return-06
                  :mod (b1 / big))
            :ARG0 (c0 / country
                  :name (n0 / name
                        :op1 "Malaysia" )))
      :ARG0 (b0 / bid-01
            :ARG0 c0
            :ARG1 (c1 / country
                  :name (n1 / name
                        :op1 "China" ))
            :ARG1 (g0 / generous-01)
            :ARG1 (p0 / product
                  :name (n2 / name
                        :op1 "1mdb" ))))

# ::snt Hezbollah targets Qaeda gathering along border with Syria
# ::tokens ["Hezbollah", "targets", "Qaeda", "gathering", "along", "border", "with", "Syria"]
# ::ner_tags ["ORG", "O", "ORG", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "VBZ", "NNP", "VBG", "IN", "NN", "IN", "NNP"]
# ::lemmas ["Hezbollah", "target", "Qaeda", "gather", "along", "border", "with", "Syria"]
(t0 / target-01
      :ARG1 (c0 / criminal-organization
            :name (n0 / name
                  :op1 "Hezbollah" ))
      :ARG1 (g0 / gather-01
            :ARG1 (c1 / criminal-organization
                  :name (n1 / name
                        :op1 "Qaeda" ))
            :location (a0 / along
                  :op1 (b0 / border-01
                        :ARG2 (c2 / country
                              :name (n2 / name
                                    :op1 "Syria" ))))))

# ::snt Obama calls for international front against IS
# ::tokens ["Obama", "calls", "for", "international", "front", "against", "IS"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "IN", "JJ", "NN", "IN", "VBZ"]
# ::lemmas ["Obama", "call", "for", "international", "front", "against", "be"]
(c0 / call-03
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Obama" ))
      :ARG1 (f0 / front
            :mod (i0 / international)
            :prep-against (o0 / oppose-01)))

# ::snt Who abandoned 3 Boeing planes at the airport?
# ::tokens ["Who", "abandoned", "3", "Boeing", "planes", "at", "the", "airport", "?"]
# ::ner_tags ["O", "O", "CARDINAL", "ORG", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBD", "CD", "NNP", "NNS", "IN", "DT", "NN", "."]
# ::lemmas ["who", "abandon", "3", "Boeing", "plane", "at", "the", "airport", "?"]
(a0 / abandon-01
      :ARG1 (p0 / plane
            :quant (c0 / company
                  :name (n0 / name
                        :op1 "Boeing" ))
            :quant 3 )
      :ARG0 (a1 / amr-unknown)
      :location (a2 / airport))

# ::snt Ebola UK: NHS staff 'panicked' after suspected Ebola cases
# ::tokens ["Ebola", "UK", ":", "NHS", "staff", "'", "panicked", "'", "after", "suspected", "Ebola", "cases"]
# ::ner_tags ["O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", ":", "NNP", "NN", "``", "VBD", "''", "IN", "VBN", "NNP", "NNS"]
# ::lemmas ["Ebola", "UK", ":", "NHS", "staff", "'", "panic", "'", "after", "suspect", "Ebola", "case"]
(s0 / say-01
      :ARG1 (p0 / panic-01
            :ARG1 (p1 / person
                  :ARG2-of (s1 / staff-01
                        :ARG1 (g0 / government-organization
                              :name (n2 / name
                                    :op1 "NHS" ))))
            :time (a0 / after
                  :op1 (c1 / case-04
                        :ARG1 (d0 / disease
                              :name (n3 / name
                                    :op1 "Ebola" ))
                        :ARG1-of (s2 / suspect-01))))
      :ARG0 (o0 / organization
            :name (n0 / name
                  :op1 "Ebola" )
            :location (c0 / country
                  :name (n1 / name
                        :op1 "UK" ))))

# ::snt Philippines, Canada pledge to further boost relations
# ::tokens ["Philippines", ",", "Canada", "pledge", "to", "further", "boost", "relations"]
# ::ner_tags ["GPE", "O", "GPE", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", ",", "NNP", "NN", "TO", "RB", "VB", "NNS"]
# ::lemmas ["Philippines", ",", "Canada", "pledge", "to", "further", "boost", "relation"]
(p0 / pledge-01
      :ARG0 (b0 / boost-01
            :ARG0 c0
            :ARG1 (r0 / relation-03)
            :degree (f0 / further))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Philippines" ))
      :ARG0 (c1 / country
            :name (n1 / name
                  :op1 "Canada" )))

# ::snt N. Korea agrees to talks with South
# ::tokens ["N.", "Korea", "agrees", "to", "talks", "with", "South"]
# ::ner_tags ["GPE", "GPE", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "IN", "NNS", "IN", "NNP"]
# ::lemmas ["N.", "Korea", "agree", "to", "talk", "with", "South"]
(a0 / agree-01
      :ARG1 (t0 / talk-01
            :ARG0 c0
            :ARG2 (c1 / country
                  :name (n1 / name
                        :op1 "South" 
                        :op2 "Korea" )))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "N." 
                  :op2 "Korea" )))

# ::snt Iran, a large important partner for Russia: Novak
# ::tokens ["Iran", ",", "a", "large", "important", "partner", "for", "Russia", ":", "Novak"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", ",", "DT", "JJ", "JJ", "NN", "IN", "NNP", ":", "NNP"]
# ::lemmas ["Iran", ",", "a", "large", "important", "partner", "for", "Russia", ":", "Novak"]
(p0 / partner-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "Iran" ))
      :mod (l0 / large)
      :ARG1-of (i0 / important-01)
      :ARG1 (c1 / country
            :name (n1 / name
                  :op1 "Novak" )))

# ::snt Taiwan's president charters plane to pay respects to Lee
# ::tokens ["Taiwan", "'s", "president", "charters", "plane", "to", "pay", "respects", "to", "Lee"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "PERSON"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "POS", "NN", "VBZ", "NN", "TO", "VB", "NNS", "IN", "NNP"]
# ::lemmas ["Taiwan", "'s", "president", "charter", "plane", "to", "pay", "respect", "to", "Lee"]
(b0 / bark-01
      :ARG1 (p0 / plane)
      :ARG0 (p1 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c0 / country
                        :name (n0 / name
                              :op1 "Taiwan" ))
                  :ARG2 (p3 / president)))
      :purpose (p2 / pay-01
            :ARG0 p1
            :ARG1 (r0 / respect-01
                  :ARG1 (p4 / person
                        :name (n1 / name
                              :op1 "Lee" )))))

# ::snt Two Palestinians die in attacks on Israelis ahead of Kerry visit
# ::tokens ["Two", "Palestinians", "die", "in", "attacks", "on", "Israelis", "ahead", "of", "Kerry", "visit"]
# ::ner_tags ["CARDINAL", "NORP", "O", "O", "O", "O", "NORP", "O", "O", "PERSON", "O"]
# ::ner_iob ["B", "B", "O", "O", "O", "O", "B", "O", "O", "B", "O"]
# ::pos_tags ["CD", "NNPS", "VBP", "IN", "NNS", "IN", "NNPS", "RB", "IN", "NNP", "VB"]
# ::lemmas ["Two", "Palestinians", "die", "in", "attack", "on", "Israelis", "ahead", "of", "Kerry", "visit"]
(d0 / die-01
      :ARG1 (p0 / person
            :mod (c1 / country
                  :name (n0 / name
                        :op1 "Palestine" ))
            :quant 2 
            :ARG0-of (a1 / attack-01
                  :ARG1 (p1 / person
                        :mod (c2 / country
                              :name (n2 / name
                                    :op1 "Israel" )))))
      :ARG1-of (c0 / cause-01
            :ARG0 a1)
      :time (a0 / ahead
            :op1 (v0 / visit-01
                  :ARG0 (p2 / person
                        :name (n1 / name
                              :op1 "Kerry" )))))

# ::snt Thomas Cook accused of putting costs before customers
# ::tokens ["Thomas", "Cook", "accused", "of", "putting", "costs", "before", "customers"]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBN", "IN", "VBG", "NNS", "IN", "NNS"]
# ::lemmas ["Thomas", "Cook", "accuse", "of", "put", "cost", "before", "customer"]
(a0 / accuse-01
      :ARG1 (p0 / put-01
            :ARG0 p1
            :ARG1 (c0 / cost-01)
            :ARG2 (b0 / before
                  :op1 (c1 / customer)))
      :ARG1 (p1 / person
            :name (n0 / name
                  :op1 "Thomas" 
                  :op2 "Cook" )))

# ::snt Narendra Modi 'photoshopped' image of Chennai floods visit goes viral
# ::tokens ["Narendra", "Modi", "'", "photoshopped", "'", "image", "of", "Chennai", "floods", "visit", "goes", "viral"]
# ::ner_tags ["PERSON", "PERSON", "PERSON", "O", "O", "O", "O", "ORG", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "I", "O", "O", "O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "POS", "VBN", "''", "NN", "IN", "NNP", "NNS", "NN", "VBZ", "JJ"]
# ::lemmas ["Narendra", "Modi", "'", "photoshoppe", "'", "image", "of", "Chennai", "flood", "visit", "go", "viral"]
(g0 / go-08
      :ARG1 (i0 / image
            :mod (p0 / person
                  :name (n0 / name
                        :op1 "Narendra" 
                        :op2 "Modi" ))
            :topic (s0 / shop-01)
            :topic (v1 / visit-01
                  :ARG1 (f0 / flood-01)
                  :location (c0 / city
                        :name (n1 / name
                              :op1 "Chennai" ))))
      :ARG2 (v0 / viral))

# ::snt Obama Struggles to Soothe Saudi Fears As Iran Talks Resume
# ::tokens ["Obama", "Struggles", "to", "Soothe", "Saudi", "Fears", "As", "Iran", "Talks", "Resume"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNPS", "IN", "DT", "JJ", "NNS", "IN", "NNP", "NNPS", "NNP"]
# ::lemmas ["Obama", "Struggles", "to", "soothe", "saudi", "fear", "as", "Iran", "Talks", "Resume"]
(s0 / struggle-01
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Obama" ))
      :ARG2 (f0 / fuss-01
            :ARG0 p0
            :ARG1 (f1 / fear-01
                  :ARG0 (c0 / country
                        :name (n1 / name
                              :op1 "Iran" ))))
      :time (d0 / desire-01
            :ARG0 (t0 / talk-01)))

# ::snt Pakistan executions draw international ire
# ::tokens ["Pakistan", "executions", "draw", "international", "ire"]
# ::ner_tags ["GPE", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNS", "VBP", "JJ", "NN"]
# ::lemmas ["Pakistan", "execution", "draw", "international", "ire"]
(d0 / draw-02
      :ARG1 (i0 / ire
            :mod (i1 / international))
      :ARG0 (e0 / execute-01
            :ARG1 (c0 / country
                  :name (n0 / name
                        :op1 "Pakistan" ))))

# ::snt South Korea declares end to MERS outbreak
# ::tokens ["South", "Korea", "declares", "end", "to", "MERS", "outbreak"]
# ::ner_tags ["GPE", "GPE", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "NN", "IN", "NNP", "NN"]
# ::lemmas ["South", "Korea", "declare", "end", "to", "MERS", "outbreak"]
(d0 / declare-02
      :ARG1 (e0 / end-01
            :ARG0 c0
            :ARG1 (b0 / break-13
                  :ARG1 (s0 / sea
                        :name (n1 / name
                              :op1 "MERS" ))))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "South" 
                  :op2 "Korea" )))

# ::snt Pranab stresses need to strive for peace by nations
# ::tokens ["Pranab", "stresses", "need", "to", "strive", "for", "peace", "by", "nations"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "NNS", "VBP", "TO", "VB", "IN", "NN", "IN", "NNS"]
# ::lemmas ["pranab", "stress", "need", "to", "strive", "for", "peace", "by", "nation"]
(s0 / stress-01
      :ARG1 (n0 / need-01
            :ARG1 (s1 / strive-01
                  :ARG1 (p1 / peace)
                  :ARG0 (n2 / nation)))
      :ARG0 (p0 / person
            :name (n1 / name
                  :op1 "pranab" )))

# ::snt Two Australians killed in Kenya after bus crashed into river
# ::tokens ["Two", "Australians", "killed", "in", "Kenya", "after", "bus", "crashed", "into", "river"]
# ::ner_tags ["CARDINAL", "NORP", "O", "O", "GPE", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "B", "O", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["CD", "NNPS", "VBN", "IN", "NNP", "IN", "NN", "VBD", "IN", "NN"]
# ::lemmas ["Two", "Australians", "kill", "in", "Kenya", "after", "bus", "crash", "into", "river"]
(k0 / kill-01
      :ARG1 (p0 / person
            :mod (c1 / country
                  :name (n1 / name
                        :op1 "Australia" ))
            :quant 2 )
      :time (a0 / after
            :op1 (c2 / crash-01
                  :ARG1 (b0 / bus)
                  :ARG1 (r0 / river)))
      :location (c0 / country
            :name (n0 / name
                  :op1 "Kenya" )))

# ::snt Severe Gales As Storm Clodagh Hits Britain
# ::tokens ["Severe", "Gales", "As", "Storm", "Clodagh", "Hits", "Britain"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["JJ", "NNS", "IN", "NN", "NNP", "VBZ", "NNP"]
# ::lemmas ["severe", "gale", "as", "storm", "Clodagh", "hit", "Britain"]
(g0 / gas-03
      :time (s0 / severe)
      :time (h0 / hit-01
            :ARG1 (c0 / country
                  :name (n1 / name
                        :op1 "Britain" ))
            :ARG0 (s1 / storm-01))
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Clodagh" )))

# ::snt Dozens of Egyptians hostages taken by Libyan terrorists as revenge for airstrikes
# ::tokens ["Dozens", "of", "Egyptians", "hostages", "taken", "by", "Libyan", "terrorists", "as", "revenge", "for", "airstrikes"]
# ::ner_tags ["CARDINAL", "O", "NORP", "O", "O", "O", "NORP", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "IN", "NNPS", "NNS", "VBN", "IN", "JJ", "NNS", "IN", "NN", "IN", "NNS"]
# ::lemmas ["Dozens", "of", "Egyptians", "hostage", "take", "by", "Libyan", "terrorist", "as", "revenge", "for", "airstrike"]
(h0 / hostage
      :mod (c0 / country
            :name (n0 / name
                  :op1 "Egypt" ))
      :ARG1-of (t0 / take-01
            :ARG0 (r0 / revenge
                  :mod (s0 / strike-01
                        :ARG0 t1
                        :path (a0 / air)))
            :ARG0 (t1 / terrorist
                  :mod (c1 / country
                        :name (n1 / name
                              :op1 "Libya" ))))
      :quant (m0 / multiple
            :op1 12 ))

# ::snt President heading to Bahrain
# ::tokens ["President", "heading", "to", "Bahrain"]
# ::ner_tags ["O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "B"]
# ::pos_tags ["NNP", "VBG", "IN", "NNP"]
# ::lemmas ["President", "head", "to", "Bahrain"]
(h0 / head-02
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "Bahrain" ))
      :ARG0 (p0 / person
            :ARG0-of (h1 / have-org-role-91
                  :ARG2 (p1 / president))))

# ::snt China, India vow to further bilateral ties
# ::tokens ["China", ",", "India", "vow", "to", "further", "bilateral", "ties"]
# ::ner_tags ["GPE", "O", "GPE", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", ",", "NNP", "NN", "TO", "VB", "JJ", "NNS"]
# ::lemmas ["China", ",", "India", "vow", "to", "further", "bilateral", "tie"]
(v0 / vow-01
      :ARG1 (f0 / further-01
            :ARG0 a0
            :ARG1 (t0 / tie-01
                  :mod (b0 / bilateral)))
      :ARG0 (a0 / and
            :op1 (c0 / country
                  :name (n0 / name
                        :op1 "China" ))
            :op2 (c1 / country
                  :name (n1 / name
                        :op1 "India" ))))

# ::snt Obama is right: Africa deserves better leadership
# ::tokens ["Obama", "is", "right", ":", "Africa", "deserves", "better", "leadership"]
# ::ner_tags ["O", "O", "O", "O", "LOC", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "JJ", ":", "NNP", "VBZ", "JJR", "NN"]
# ::lemmas ["Obama", "be", "right", ":", "Africa", "deserve", "well", "leadership"]
(r0 / right-06
      :ARG1 (d0 / deserve-01
            :ARG1 (l0 / lead-02
                  :ARG0 c0
                  :ARG1-of (g0 / good-02)
                  :ARG1-of (h0 / have-degree-91
                        :ARG2 g0
                        :ARG3 (m0 / more)))
            :ARG0 (c0 / continent
                  :name (n1 / name
                        :op1 "Africa" )))
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Obama" )))

# ::snt Putin spokesman: Doping charges appear unfounded
# ::tokens ["Putin", "spokesman", ":", "Doping", "charges", "appear", "unfounded"]
# ::ner_tags ["PERSON", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NN", ":", "VBG", "NNS", "VBP", "JJ"]
# ::lemmas ["Putin", "spokesman", ":", "dope", "charge", "appear", "unfounded"]
(s0 / say-01
      :ARG1 (a0 / appear-02
            :ARG1 (f0 / found-01
                  :ARG1 (c0 / charge-05
                        :ARG2 (t0 / test-01))
                  :polarity - ))
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (p1 / person
                        :name (n0 / name
                              :op1 "Putin" ))
                  :ARG2 (s1 / spokesman))))

# ::snt New video shows US police officers beating mentally-ill man
# ::tokens ["New", "video", "shows", "US", "police", "officers", "beating", "mentally", "-", "ill", "man"]
# ::ner_tags ["O", "O", "O", "GPE", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "VBZ", "NNP", "NN", "NNS", "VBG", "RB", "HYPH", "JJ", "NN"]
# ::lemmas ["new", "video", "show", "US", "police", "officer", "beat", "mentally", "-", "ill", "man"]
(s0 / show-01
      :ARG1 (b0 / beat-01
            :ARG1 (m0 / man
                  :ARG1-of (i0 / ill-01
                        :mod (m1 / mental)))
            :ARG0 (p0 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG1 (p1 / police
                              :mod (c0 / country
                                    :name (n1 / name
                                          :op1 "US" )))
                        :ARG2 (o0 / officer))))
      :ARG0 (v0 / video
            :ARG1-of (n0 / new-01)))

# ::snt You do not need to worry.
# ::tokens ["You", "do", "not", "need", "to", "worry", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "."]
# ::lemmas ["you", "do", "not", "need", "to", "worry", "."]
(n0 / need-01
      :ARG1 (w0 / worry-01
            :ARG1 y0)
      :ARG0 (y0 / you)
      :polarity - )

# ::snt You can do it, too.
# ::tokens ["You", "can", "do", "it", ",", "too", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", ",", "RB", "."]
# ::lemmas ["you", "can", "do", "it", ",", "too", "."]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (i0 / it)
            :ARG0 (y0 / you)
            :mod (t0 / too)))

# ::snt The answer to both questions is: Yes.
# ::tokens ["The", "answer", "to", "both", "questions", "is", ":", "Yes", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NNS", "VBZ", ":", "UH", "."]
# ::lemmas ["the", "answer", "to", "both", "question", "be", ":", "yes", "."]
(a0 / answer-01
      :ARG2 (y0 / yes)
      :ARG2 (q0 / question-01
            :mod (b0 / both)))

# ::snt You guys are making this all WAAAAAY too complicated.
# ::tokens ["You", "guys", "are", "making", "this", "all", "WAAAAAY", "too", "complicated", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "ORG", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["PRP", "NNS", "VBP", "VBG", "DT", "DT", "NNP", "RB", "JJ", "."]
# ::lemmas ["you", "guy", "be", "make", "this", "all", "WAAAAAY", "too", "complicated", "."]
(m0 / make-02
      :ARG1 (c0 / complicate-01
            :ARG1 (t0 / this
                  :mod (a0 / all))
            :ARG2-of (h0 / have-degree-91
                  :ARG1 t0
                  :ARG3 (t1 / too
                        :mod (w0 / way))))
      :ARG0 (y0 / you
            :mod (g0 / guy)))

# ::snt It's not a good idea.
# ::tokens ["It", "'s", "not", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["it", "be", "not", "a", "good", "idea", "."]
(i0 / idea
      :ARG1-of (g0 / good-02
            :polarity - )
      :domain (i1 / it))

# ::snt Take a look at these:
# ::tokens ["Take", "a", "look", "at", "these", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "DT", "NN", "IN", "DT", ":"]
# ::lemmas ["take", "a", "look", "at", "these", ":"]
(l0 / look-01
      :ARG1 (t0 / this)
      :ARG0 (y0 / you)
      :mode imperative )

# ::snt This is not a good idea.
# ::tokens ["This", "is", "not", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["this", "be", "not", "a", "good", "idea", "."]
(i0 / idea
      :ARG1-of (g0 / good-02
            :polarity - )
      :domain (t0 / this))

# ::snt I was in a similar situation.
# ::tokens ["I", "was", "in", "a", "similar", "situation", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "be", "in", "a", "similar", "situation", "."]
(b0 / be-located-at-91
      :ARG1 (i0 / i)
      :ARG2 (s0 / situation
            :ARG1-of (r0 / resemble-01)))

# ::snt I've had this same problem.
# ::tokens ["I", "'ve", "had", "this", "same", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VB", "VBN", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "have", "this", "same", "problem", "."]
(h0 / have-03
      :ARG1 (p0 / problem
            :mod (t0 / this)
            :ARG1-of (s0 / same-01))
      :ARG0 (i0 / i))

# ::snt You answered your own question.
# ::tokens ["You", "answered", "your", "own", "question", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "PRP$", "JJ", "NN", "."]
# ::lemmas ["you", "answer", "your", "own", "question", "."]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 y0)
      :ARG0 (y0 / you))

# ::snt I don't see why there should be any problem with this whatsoever.
# ::tokens ["I", "do", "n't", "see", "why", "there", "should", "be", "any", "problem", "with", "this", "whatsoever", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "WRB", "EX", "MD", "VB", "DT", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["i", "do", "not", "see", "why", "there", "should", "be", "any", "problem", "with", "this", "whatsoever", "."]
(s0 / see-01
      :ARG1 (t0 / thing
            :ARG0-of (c0 / cause-01
                  :ARG1 (r0 / recommend-01
                        :ARG1 (p0 / problem
                              :mod (t1 / this)
                              :degree (w0 / whatsoever)))))
      :ARG0 (i0 / i)
      :polarity - )

# ::snt It makes absolutely NO difference.
# ::tokens ["It", "makes", "absolutely", "NO", "difference", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "DT", "NN", "."]
# ::lemmas ["it", "make", "absolutely", "no", "difference", "."]
(m0 / make-02
      :ARG1 (d0 / differ-02
            :degree (a0 / absolute))
      :ARG0 (i0 / it)
      :polarity - )

# ::snt I think it's fine to ask this question.
# ::tokens ["I", "think", "it", "'s", "fine", "to", "ask", "this", "question", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "PRP", "VBZ", "JJ", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["i", "think", "it", "be", "fine", "to", "ask", "this", "question", "."]
(t0 / think-01
      :ARG1 (f0 / fine-04
            :ARG1 (a0 / ask-01
                  :ARG1 (q0 / question-01
                        :mod (t1 / this))))
      :ARG0 (i0 / i))

# ::snt There's not a lot you can do about that.
# ::tokens ["There", "'s", "not", "a", "lot", "you", "can", "do", "about", "that", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBZ", "RB", "DT", "NN", "PRP", "MD", "VB", "IN", "DT", "."]
# ::lemmas ["there", "be", "not", "a", "lot", "you", "can", "do", "about", "that", "."]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (l0 / lot
                  :polarity - )
            :ARG0 (y0 / you)
            :ARG2 (t0 / that)))

# ::snt You answered your own question.
# ::tokens ["You", "answered", "your", "own", "question", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "PRP$", "JJ", "NN", "."]
# ::lemmas ["you", "answer", "your", "own", "question", "."]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 y0)
      :ARG0 (y0 / you))

# ::snt Can you do this?
# ::tokens ["Can", "you", "do", "this", "?"]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "DT", "."]
# ::lemmas ["can", "you", "do", "this", "?"]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (t0 / this)
            :ARG0 (y0 / you))
      :ARG1-of (a0 / amr-unknown))

# ::snt How do you do that?
# ::tokens ["How", "do", "you", "do", "that", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "."]
# ::lemmas ["how", "do", "you", "do", "that", "?"]
(d0 / do-02
      :ARG1 (t0 / that)
      :ARG0 (y0 / you)
      :manner (a0 / amr-unknown))

# ::snt It's also a matter of taste.
# ::tokens ["It", "'s", "also", "a", "matter", "of", "taste", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "DT", "NN", "IN", "NN", "."]
# ::lemmas ["it", "be", "also", "a", "matter", "of", "taste", "."]
(m0 / matter
      :mod (a0 / also)
      :domain (i0 / it)
      :topic (t0 / taste))

# ::snt I don't see why there should be any problem with this whatsoever.
# ::tokens ["I", "do", "n't", "see", "why", "there", "should", "be", "any", "problem", "with", "this", "whatsoever", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "WRB", "EX", "MD", "VB", "DT", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["i", "do", "not", "see", "why", "there", "should", "be", "any", "problem", "with", "this", "whatsoever", "."]
(s0 / see-01
      :ARG1 (t0 / thing
            :ARG0-of (c0 / cause-01
                  :ARG1 (r0 / recommend-01
                        :ARG1 (p0 / problem
                              :mod (t1 / this)
                              :degree (w0 / whatsoever)))))
      :ARG0 (i0 / i)
      :polarity - )

# ::snt There's not a lot you can do about that.
# ::tokens ["There", "'s", "not", "a", "lot", "you", "can", "do", "about", "that", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBZ", "RB", "DT", "NN", "PRP", "MD", "VB", "IN", "DT", "."]
# ::lemmas ["there", "be", "not", "a", "lot", "you", "can", "do", "about", "that", "."]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (l0 / lot
                  :polarity - )
            :ARG0 (y0 / you)
            :ARG2 (t0 / that)))

# ::snt You got it right.
# ::tokens ["You", "got", "it", "right", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "PRP", "JJ", "."]
# ::lemmas ["you", "get", "it", "right", "."]
(g0 / get-04
      :ARG1 (r0 / right-06
            :ARG2 (i0 / it))
      :ARG0 (y0 / you))

# ::snt There are two things to consider:
# ::tokens ["There", "are", "two", "things", "to", "consider", ":"]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "CD", "NNS", "TO", "VB", ":"]
# ::lemmas ["there", "be", "two", "thing", "to", "consider", ":"]
(t0 / thing
      :quant 2 
      :ARG1-of (c0 / consider-02))

# ::snt Can you do this?
# ::tokens ["Can", "you", "do", "this", "?"]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "DT", "."]
# ::lemmas ["can", "you", "do", "this", "?"]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (t0 / this)
            :ARG0 (y0 / you))
      :ARG1-of (a0 / amr-unknown))

# ::snt There are a few things you can do:
# ::tokens ["There", "are", "a", "few", "things", "you", "can", "do", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "JJ", "NNS", "PRP", "MD", "VB", ":"]
# ::lemmas ["there", "be", "a", "few", "thing", "you", "can", "do", ":"]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (t0 / thing
                  :quant (f0 / few))
            :ARG0 (y0 / you)))

# ::snt You got it right.
# ::tokens ["You", "got", "it", "right", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "PRP", "JJ", "."]
# ::lemmas ["you", "get", "it", "right", "."]
(g0 / get-04
      :ARG1 (r0 / right-06
            :ARG2 (i0 / it))
      :ARG0 (y0 / you))

# ::snt You answered your own question.
# ::tokens ["You", "answered", "your", "own", "question", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "PRP$", "JJ", "NN", "."]
# ::lemmas ["you", "answer", "your", "own", "question", "."]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 y0)
      :ARG0 (y0 / you))

# ::snt You are on the right path.
# ::tokens ["You", "are", "on", "the", "right", "path", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["you", "be", "on", "the", "right", "path", "."]
(b0 / be-located-at-91
      :ARG1 (y0 / you)
      :ARG2 (p0 / path
            :ARG1-of (r0 / right-06)))

# ::snt What are your goals?
# ::tokens ["What", "are", "your", "goals", "?"]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBP", "PRP$", "NNS", "."]
# ::lemmas ["what", "be", "your", "goal", "?"]
(g0 / goal
      :domain (a0 / amr-unknown)
      :poss (y0 / you))

# ::snt A few more point to think about:
# ::tokens ["A", "few", "more", "point", "to", "think", "about", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "JJR", "NN", "TO", "VB", "IN", ":"]
# ::lemmas ["a", "few", "more", "point", "to", "think", "about", ":"]
(p0 / point-03
      :quant (m0 / more)
      :quant (t0 / think-01)
      :quant (f0 / few))

# ::snt I'm afraid we are out of luck in this one.
# ::tokens ["I", "'m", "afraid", "we", "are", "out", "of", "luck", "in", "this", "one", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "JJ", "PRP", "VBP", "IN", "IN", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["i", "be", "afraid", "we", "be", "out", "of", "luck", "in", "this", "one", "."]
(f0 / fear-01
      :ARG1 (o0 / out-05
            :ARG1 (w0 / we)
            :ARG2 (l0 / luck)
            :ARG2 (o1 / one
                  :mod (t0 / this)))
      :ARG0 (i0 / i))

# ::snt It's also a matter of taste.
# ::tokens ["It", "'s", "also", "a", "matter", "of", "taste", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "DT", "NN", "IN", "NN", "."]
# ::lemmas ["it", "be", "also", "a", "matter", "of", "taste", "."]
(m0 / matter
      :mod (a0 / also)
      :domain (i0 / it)
      :topic (t0 / taste))

# ::snt I had the same problem as you.
# ::tokens ["I", "had", "the", "same", "problem", "as", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "DT", "JJ", "NN", "IN", "PRP", "."]
# ::lemmas ["i", "have", "the", "same", "problem", "as", "you", "."]
(h0 / have-03
      :ARG1 (p0 / problem
            :ARG1-of (s0 / same-01
                  :ARG2 (y0 / you)))
      :ARG0 (i0 / i))

# ::snt I'm thinking it's a bad idea.
# ::tokens ["I", "'m", "thinking", "it", "'s", "a", "bad", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "VBG", "PRP", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "be", "think", "it", "be", "a", "bad", "idea", "."]
(t0 / think-01
      :ARG1 (i0 / idea
            :ARG1-of (b0 / bad-07)
            :domain (i2 / it))
      :ARG0 (i1 / i))

# ::snt It's not a good idea.
# ::tokens ["It", "'s", "not", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["it", "be", "not", "a", "good", "idea", "."]
(i0 / idea
      :ARG1-of (g0 / good-02
            :polarity - )
      :domain (i1 / it))

# ::snt I had the same problem as you.
# ::tokens ["I", "had", "the", "same", "problem", "as", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "DT", "JJ", "NN", "IN", "PRP", "."]
# ::lemmas ["i", "have", "the", "same", "problem", "as", "you", "."]
(h0 / have-03
      :ARG1 (p0 / problem
            :ARG1-of (s0 / same-01
                  :ARG2 (y0 / you)))
      :ARG0 (i0 / i))

# ::snt There are two things to consider:
# ::tokens ["There", "are", "two", "things", "to", "consider", ":"]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "CD", "NNS", "TO", "VB", ":"]
# ::lemmas ["there", "be", "two", "thing", "to", "consider", ":"]
(t0 / thing
      :quant 2 
      :ARG1-of (c0 / consider-02))

# ::snt It's pretty much up to you.
# ::tokens ["It", "'s", "pretty", "much", "up", "to", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "RB", "IN", "IN", "PRP", "."]
# ::lemmas ["it", "be", "pretty", "much", "up", "to", "you", "."]
(d0 / depend-01
      :ARG1 (y0 / you)
      :ARG0 (i0 / it)
      :degree (p0 / pretty-much))

# ::snt There are three options:
# ::tokens ["There", "are", "three", "options", ":"]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O"]
# ::pos_tags ["EX", "VBP", "CD", "NNS", ":"]
# ::lemmas ["there", "be", "three", "option", ":"]
(o0 / option
      :quant 3 )

# ::snt So think it in this way.
# ::tokens ["So", "think", "it", "in", "this", "way", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "VB", "PRP", "IN", "DT", "NN", "."]
# ::lemmas ["so", "think", "it", "in", "this", "way", "."]
(t0 / think-01
      :ARG1 (i0 / it)
      :ARG0 (y0 / you)
      :manner (w0 / way
            :mod (t1 / this))
      :mode imperative )

# ::snt Maybe this could work for you.
# ::tokens ["Maybe", "this", "could", "work", "for", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "DT", "MD", "VB", "IN", "PRP", "."]
# ::lemmas ["maybe", "this", "could", "work", "for", "you", "."]
(p0 / possible-01
      :ARG1 (w0 / work-09
            :ARG1 (t0 / this)
            :ARG2 (y0 / you)))

# ::snt This is not a good idea.
# ::tokens ["This", "is", "not", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["this", "be", "not", "a", "good", "idea", "."]
(i0 / idea
      :ARG1-of (g0 / good-02
            :polarity - )
      :domain (t0 / this))

# ::snt I realized there is already an accepted answer but I figure I would add my 2 cents.
# ::tokens ["I", "realized", "there", "is", "already", "an", "accepted", "answer", "but", "I", "figure", "I", "would", "add", "my", "2", "cents", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "MONEY", "MONEY", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "O"]
# ::pos_tags ["PRP", "VBD", "EX", "VBZ", "RB", "DT", "JJ", "NN", "CC", "PRP", "VBP", "PRP", "MD", "VB", "PRP$", "CD", "NNS", "."]
# ::lemmas ["i", "realize", "there", "be", "already", "an", "accepted", "answer", "but", "i", "figure", "i", "would", "add", "my", "2", "cents", "."]
(c0 / contrast-01
      :ARG1 (f0 / figure-01
            :ARG1 (a0 / add-02
                  :ARG0 i0
                  :ARG1 (m0 / monetary-quantity
                        :quant 2 
                        :unit (c1 / cent)))
            :ARG0 (i0 / i))
      :ARG1 (r0 / realize-01
            :ARG0 i0
            :ARG1 (a1 / accept-01
                  :ARG1 (a2 / answer-01)
                  :time (a3 / already))))

# ::snt You may have to experiment and find what you like.
# ::tokens ["You", "may", "have", "to", "experiment", "and", "find", "what", "you", "like", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "TO", "VB", "CC", "VB", "WP", "PRP", "VBP", "."]
# ::lemmas ["you", "may", "have", "to", "experiment", "and", "find", "what", "you", "like", "."]
(p0 / possible-01
      :ARG1 (o0 / obligate-01
            :ARG1 (a0 / and
                  :op1 (e0 / experiment-01
                        :ARG0 y0)
                  :op2 (f0 / find-01
                        :ARG0 y0
                        :ARG1 (t0 / thing)))
            :ARG1 (y0 / you
                  :ARG0-of (l0 / like-02
                        :ARG1 t0))))

# ::snt I agree with the other comments.
# ::tokens ["I", "agree", "with", "the", "other", "comments", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "IN", "DT", "JJ", "NNS", "."]
# ::lemmas ["i", "agree", "with", "the", "other", "comment", "."]
(a0 / agree-01
      :ARG1 (i0 / i)
      :ARG1 (c0 / comment-01
            :mod (o0 / other)))

# ::snt It rather depends on which country you're in.
# ::tokens ["It", "rather", "depends", "on", "which", "country", "you", "'re", "in", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBZ", "IN", "WDT", "NN", "PRP", "VBP", "IN", "."]
# ::lemmas ["it", "rather", "depend", "on", "which", "country", "you", "be", "in", "."]
(d0 / depend-01
      :ARG1 (c0 / country
            :ARG2-of (y0 / you))
      :ARG0 (i0 / it)
      :mod (r0 / rather))

# ::snt This is a terrible idea.
# ::tokens ["This", "is", "a", "terrible", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["this", "be", "a", "terrible", "idea", "."]
(i0 / idea
      :ARG1-of (t0 / terrible-01)
      :domain (t1 / this))

# ::snt You have to decide what you want to get out of this.
# ::tokens ["You", "have", "to", "decide", "what", "you", "want", "to", "get", "out", "of", "this", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "WP", "PRP", "VBP", "TO", "VB", "IN", "IN", "DT", "."]
# ::lemmas ["you", "have", "to", "decide", "what", "you", "want", "to", "get", "out", "of", "this", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (w0 / want-01
                  :ARG1 g0)
            :ARG0-of (g0 / get-05
                  :ARG1 t0
                  :ARG2 (t1 / this)))
      :ARG2 (d0 / decide-01
            :ARG0 y0
            :ARG1 (t0 / thing)))

# ::snt I have few suggestions for you:
# ::tokens ["I", "have", "few", "suggestions", "for", "you", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "JJ", "NNS", "IN", "PRP", ":"]
# ::lemmas ["i", "have", "few", "suggestion", "for", "you", ":"]
(s0 / suggest-01
      :ARG1 (t0 / thing
            :quant (f0 / few))
      :ARG0 (i0 / i)
      :ARG2 (y0 / you))

# ::snt As soon as possible.
# ::tokens ["As", "soon", "as", "possible", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "RB", "IN", "JJ", "."]
# ::lemmas ["as", "soon", "as", "possible", "."]
(h0 / have-degree-91
      :ARG2 (p0 / possible-01)
      :ARG2 (s0 / soon)
      :ARG3 (e0 / equal))

# ::snt To give this an answer:
# ::tokens ["To", "give", "this", "an", "answer", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["TO", "VB", "DT", "DT", "NN", ":"]
# ::lemmas ["to", "give", "this", "an", "answer", ":"]
(g0 / give-01
      :ARG1 (t0 / thing
            :ARG2-of (t1 / this)
            :ARG2-of (a0 / answer-01))
      :ARG0 (y0 / you)
      :mode imperative )

# ::snt Unfortunately the answer to your question is we simply do not know.
# ::tokens ["Unfortunately", "the", "answer", "to", "your", "question", "is", "we", "simply", "do", "not", "know", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "DT", "NN", "IN", "PRP$", "NN", "VBZ", "PRP", "RB", "VBP", "RB", "VB", "."]
# ::lemmas ["unfortunately", "the", "answer", "to", "your", "question", "be", "we", "simply", "do", "not", "know", "."]
(f0 / fortunate-01
      :ARG2 (a0 / answer-01
            :ARG1 (q0 / question-01
                  :ARG0 (y0 / you))
            :ARG2 (w0 / we)
            :ARG2 (k0 / know-01
                  :ARG0 w0
                  :mod (s0 / simple)
                  :polarity - ))
      :polarity - )

# ::snt The rule - When in doubt throw it out!
# ::tokens ["The", "rule", "-", "When", "in", "doubt", "throw", "it", "out", "!"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", ":", "WRB", "IN", "NN", "VB", "PRP", "RP", "."]
# ::lemmas ["the", "rule", "-", "when", "in", "doubt", "throw", "it", "out", "!"]
(r0 / rule-01
      :ARG3 (t0 / throw-out-06
            :ARG1 (i0 / it)
            :ARG0 (y0 / you)
            :time (d0 / doubt-01)
            :mode imperative ))

# ::snt This is not a good idea.
# ::tokens ["This", "is", "not", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["this", "be", "not", "a", "good", "idea", "."]
(i0 / idea
      :ARG1-of (g0 / good-02
            :polarity - )
      :domain (t0 / this))

# ::snt It probably depends on the cut of meat.
# ::tokens ["It", "probably", "depends", "on", "the", "cut", "of", "meat", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBZ", "IN", "DT", "NN", "IN", "NN", "."]
# ::lemmas ["it", "probably", "depend", "on", "the", "cut", "of", "meat", "."]
(d0 / depend-01
      :ARG1 (c0 / cut-02
            :ARG1 (m0 / meat))
      :ARG0 (i0 / it)
      :mod (p0 / probable))

# ::snt Have you tried asking your employees?
# ::tokens ["Have", "you", "tried", "asking", "your", "employees", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBP", "PRP", "VBN", "VBG", "PRP$", "NNS", "."]
# ::lemmas ["have", "you", "try", "ask", "your", "employee", "?"]
(t0 / try-01
      :ARG1 (a0 / ask-01
            :ARG0 y0
            :ARG2 (p0 / person))
      :ARG0 (y0 / you
            :ARG1-of (e0 / employ-01
                  :ARG1 p0))
      :ARG1-of (a1 / amr-unknown))

# ::snt There are two things to consider:
# ::tokens ["There", "are", "two", "things", "to", "consider", ":"]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "CD", "NNS", "TO", "VB", ":"]
# ::lemmas ["there", "be", "two", "thing", "to", "consider", ":"]
(t0 / thing
      :quant 2 
      :ARG1-of (c0 / consider-02))

# ::snt It depends on what you want to do next, and where you want to do it.
# ::tokens ["It", "depends", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "TO", "VB", "RB", ",", "CC", "WRB", "PRP", "VBP", "TO", "VB", "PRP", "."]
# ::lemmas ["it", "depend", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (t0 / thing
                  :ARG1-of (d1 / do-02
                        :ARG0 (y0 / you)
                        :time (n0 / next)))
            :op2 (l0 / location
                  :location-of (w0 / want-01
                        :ARG1 d1
                        :ARG0 y0)))
      :ARG0 (i0 / it))

# ::snt I have the same thing.
# ::tokens ["I", "have", "the", "same", "thing", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "the", "same", "thing", "."]
(h0 / have-03
      :ARG1 (t0 / thing
            :ARG1-of (s0 / same-01))
      :ARG0 (i0 / i))

# ::snt "My answer to your question is ""Probably Not""."
# ::tokens ["\"", "My", "answer", "to", "your", "question", "is", "\"", "\"", "Probably", "Not", "\"", "\"", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "WORK_OF_ART", "WORK_OF_ART", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "O", "O", "O", "O"]
# ::pos_tags ["``", "PRP$", "NN", "IN", "PRP$", "NN", "VBZ", "``", "``", "RB", "RB", "''", "''", ".", "''"]
# ::lemmas ["\"", "my", "answer", "to", "your", "question", "be", "\"", "\"", "Probably", "Not", "\"", "\"", ".", "\""]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 (y0 / you))
      :ARG0 (i0 / i)
      :ARG2 (h0 / have-polarity-91
            :mod (p0 / probable)
            :ARG2 - ))

# ::snt I don't think it makes any tremendous difference.
# ::tokens ["I", "do", "n't", "think", "it", "makes", "any", "tremendous", "difference", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "PRP", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "do", "not", "think", "it", "make", "any", "tremendous", "difference", "."]
(t0 / think-01
      :ARG1 (m0 / make-02
            :ARG1 (d0 / differ-02
                  :degree (t1 / tremendous))
            :ARG0 (i1 / it))
      :ARG0 (i0 / i)
      :polarity - )

# ::snt It's not a good idea.
# ::tokens ["It", "'s", "not", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["it", "be", "not", "a", "good", "idea", "."]
(i0 / idea
      :ARG1-of (g0 / good-02
            :polarity - )
      :domain (i1 / it))

# ::snt You are on the right path.
# ::tokens ["You", "are", "on", "the", "right", "path", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["you", "be", "on", "the", "right", "path", "."]
(b0 / be-located-at-91
      :ARG1 (y0 / you)
      :ARG2 (p0 / path
            :ARG1-of (r0 / right-06)))

# ::snt How should I proceed about this?
# ::tokens ["How", "should", "I", "proceed", "about", "this", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "IN", "DT", "."]
# ::lemmas ["how", "should", "i", "proceed", "about", "this", "?"]
(r0 / recommend-01
      :ARG1 (p0 / proceed-01
            :ARG1 (t0 / this)
            :ARG0 (i0 / i)
            :manner (a0 / amr-unknown)))

# ::snt Does this page answer your question?
# ::tokens ["Does", "this", "page", "answer", "your", "question", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "DT", "NN", "VB", "PRP$", "NN", "."]
# ::lemmas ["do", "this", "page", "answer", "your", "question", "?"]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 (y0 / you))
      :ARG0 (p0 / page
            :mod (t0 / this))
      :ARG2 (a1 / amr-unknown))

# ::snt I'm going to be very direct here.
# ::tokens ["I", "'m", "going", "to", "be", "very", "direct", "here", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "VBG", "TO", "VB", "RB", "JJ", "RB", "."]
# ::lemmas ["i", "be", "go", "to", "be", "very", "direct", "here", "."]
(d0 / direct-01
      :ARG1 (i0 / i)
      :location (h0 / here)
      :degree (v0 / very))

# ::snt It depends entirely on your company and your contract.
# ::tokens ["It", "depends", "entirely", "on", "your", "company", "and", "your", "contract", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "IN", "PRP$", "NN", "CC", "PRP$", "NN", "."]
# ::lemmas ["it", "depend", "entirely", "on", "your", "company", "and", "your", "contract", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (c0 / company
                  :poss (y0 / you))
            :op2 (c1 / contract
                  :poss y0))
      :ARG0 (i0 / it)
      :degree (e0 / entire))

# ::snt There are a few things I think you should do.
# ::tokens ["There", "are", "a", "few", "things", "I", "think", "you", "should", "do", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "JJ", "NNS", "PRP", "VBP", "PRP", "MD", "VB", "."]
# ::lemmas ["there", "be", "a", "few", "thing", "i", "think", "you", "should", "do", "."]
(t0 / think-01
      :ARG1 (r0 / recommend-01
            :ARG1 (d0 / do-02
                  :ARG0 y0
                  :ARG1 (t1 / thing
                        :quant (f0 / few)))
            :ARG2 (y0 / you))
      :ARG0 (i0 / i))

# ::snt How do you do that?
# ::tokens ["How", "do", "you", "do", "that", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "."]
# ::lemmas ["how", "do", "you", "do", "that", "?"]
(d0 / do-02
      :ARG1 (t0 / that)
      :ARG0 (y0 / you)
      :manner (a0 / amr-unknown))

# ::snt I was in a similar situation.
# ::tokens ["I", "was", "in", "a", "similar", "situation", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "be", "in", "a", "similar", "situation", "."]
(b0 / be-located-at-91
      :ARG1 (i0 / i)
      :ARG2 (s0 / situation
            :ARG1-of (r0 / resemble-01)))

# ::snt It depends on what you want to do next, and where you want to do it.
# ::tokens ["It", "depends", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "TO", "VB", "RB", ",", "CC", "WRB", "PRP", "VBP", "TO", "VB", "PRP", "."]
# ::lemmas ["it", "depend", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (t0 / thing
                  :ARG1-of (d1 / do-02
                        :ARG0 (y0 / you)
                        :time (n0 / next)))
            :op2 (l0 / location
                  :location-of (w0 / want-01
                        :ARG1 d1
                        :ARG0 y0)))
      :ARG0 (i0 / it))

# ::snt Well, I wouldn't put it on my cv.
# ::tokens ["Well", ",", "I", "would", "n't", "put", "it", "on", "my", "cv", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "MD", "RB", "VB", "PRP", "IN", "PRP$", "NN", "."]
# ::lemmas ["well", ",", "i", "would", "not", "put", "it", "on", "my", "cv", "."]
(p0 / put-01
      :ARG1 (i0 / it)
      :ARG0 (i1 / i)
      :mod (w0 / well)
      :ARG2 (c0 / cv)
      :polarity - )

# ::snt I think there isn't a general answer.
# ::tokens ["I", "think", "there", "is", "n't", "a", "general", "answer", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "EX", "VBZ", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "think", "there", "be", "not", "a", "general", "answer", "."]
(t0 / think-01
      :ARG1 (a0 / answer-01
            :ARG1-of (g0 / general-02)
            :polarity - )
      :ARG0 (i0 / i))

# ::snt Work into it slowly.
# ::tokens ["Work", "into", "it", "slowly", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "IN", "PRP", "RB", "."]
# ::lemmas ["work", "into", "it", "slowly", "."]
(w0 / work-01
      :ARG1 (i0 / it)
      :ARG0 (y0 / you)
      :ARG1-of (s0 / slow-05)
      :mode imperative )

# ::snt It varies by the situation.
# ::tokens ["It", "varies", "by", "the", "situation", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "DT", "NN", "."]
# ::lemmas ["it", "vary", "by", "the", "situation", "."]
(v0 / vary-01
      :ARG1 (i0 / it)
      :ARG1-of (s0 / situation))

# ::snt I have the same thing.
# ::tokens ["I", "have", "the", "same", "thing", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "the", "same", "thing", "."]
(h0 / have-03
      :ARG1 (t0 / thing
            :ARG1-of (s0 / same-01))
      :ARG0 (i0 / i))

# ::snt I have the same thing.
# ::tokens ["I", "have", "the", "same", "thing", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "the", "same", "thing", "."]
(h0 / have-03
      :ARG1 (t0 / thing
            :ARG1-of (s0 / same-01))
      :ARG0 (i0 / i))

# ::snt You have to decide what you want to get out of this.
# ::tokens ["You", "have", "to", "decide", "what", "you", "want", "to", "get", "out", "of", "this", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "WP", "PRP", "VBP", "TO", "VB", "IN", "IN", "DT", "."]
# ::lemmas ["you", "have", "to", "decide", "what", "you", "want", "to", "get", "out", "of", "this", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (w0 / want-01
                  :ARG1 g0)
            :ARG0-of (g0 / get-05
                  :ARG1 t0
                  :ARG2 (t1 / this)))
      :ARG2 (d0 / decide-01
            :ARG0 y0
            :ARG1 (t0 / thing)))

# ::snt It's not a good idea.
# ::tokens ["It", "'s", "not", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["it", "be", "not", "a", "good", "idea", "."]
(i0 / idea
      :ARG1-of (g0 / good-02
            :polarity - )
      :domain (i1 / it))

# ::snt You have a problem.
# ::tokens ["You", "have", "a", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "NN", "."]
# ::lemmas ["you", "have", "a", "problem", "."]
(h0 / have-03
      :ARG1 (p0 / problem)
      :ARG0 (y0 / you))

# ::snt Unfortunately, this question cannot be answered in its full generality.
# ::tokens ["Unfortunately", ",", "this", "question", "can", "not", "be", "answered", "in", "its", "full", "generality", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", ",", "DT", "NN", "MD", "RB", "VB", "VBN", "IN", "PRP$", "JJ", "NN", "."]
# ::lemmas ["unfortunately", ",", "this", "question", "can", "not", "be", "answer", "in", "its", "full", "generality", "."]
(p0 / possible-01
      :ARG1 (a0 / answer-01
            :ARG1 (q0 / question-01
                  :mod (t0 / this))
            :ARG2 (g0 / generality
                  :poss q0
                  :degree (f1 / full)))
      :polarity - 
      :ARG2-of (f0 / fortunate-01
            :polarity - ))

# ::snt I think there isn't a general answer.
# ::tokens ["I", "think", "there", "is", "n't", "a", "general", "answer", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "EX", "VBZ", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "think", "there", "be", "not", "a", "general", "answer", "."]
(t0 / think-01
      :ARG1 (a0 / answer-01
            :ARG1-of (g0 / general-02)
            :polarity - )
      :ARG0 (i0 / i))

# ::snt "My answer to your question is ""Probably Not""."
# ::tokens ["\"", "My", "answer", "to", "your", "question", "is", "\"", "\"", "Probably", "Not", "\"", "\"", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "WORK_OF_ART", "WORK_OF_ART", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "O", "O", "O", "O"]
# ::pos_tags ["``", "PRP$", "NN", "IN", "PRP$", "NN", "VBZ", "``", "``", "RB", "RB", "''", "''", ".", "''"]
# ::lemmas ["\"", "my", "answer", "to", "your", "question", "be", "\"", "\"", "Probably", "Not", "\"", "\"", ".", "\""]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 (y0 / you))
      :ARG0 (i0 / i)
      :ARG2 (h0 / have-polarity-91
            :mod (p0 / probable)
            :ARG2 - ))

# ::snt I had the same problem as you.
# ::tokens ["I", "had", "the", "same", "problem", "as", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "DT", "JJ", "NN", "IN", "PRP", "."]
# ::lemmas ["i", "have", "the", "same", "problem", "as", "you", "."]
(h0 / have-03
      :ARG1 (p0 / problem
            :ARG1-of (s0 / same-01
                  :ARG2 (y0 / you)))
      :ARG0 (i0 / i))

# ::snt Hope this is what you are looking for.
# ::tokens ["Hope", "this", "is", "what", "you", "are", "looking", "for", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "DT", "VBZ", "WP", "PRP", "VBP", "VBG", "IN", "."]
# ::lemmas ["hope", "this", "be", "what", "you", "be", "look", "for", "."]
(h0 / hope-01
      :ARG1 (l0 / look-01
            :ARG1 (y0 / you)
            :ARG1 (t0 / this)))

# ::snt There are a few things you can do:
# ::tokens ["There", "are", "a", "few", "things", "you", "can", "do", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "JJ", "NNS", "PRP", "MD", "VB", ":"]
# ::lemmas ["there", "be", "a", "few", "thing", "you", "can", "do", ":"]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (t0 / thing
                  :quant (f0 / few))
            :ARG0 (y0 / you)))

# ::snt It depends on what you want to do next, and where you want to do it.
# ::tokens ["It", "depends", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "TO", "VB", "RB", ",", "CC", "WRB", "PRP", "VBP", "TO", "VB", "PRP", "."]
# ::lemmas ["it", "depend", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (t0 / thing
                  :ARG1-of (d1 / do-02
                        :ARG0 (y0 / you)
                        :time (n0 / next)))
            :op2 (l0 / location
                  :location-of (w0 / want-01
                        :ARG1 d1
                        :ARG0 y0)))
      :ARG0 (i0 / it))

# ::snt In the US, it will depend on the school.
# ::tokens ["In", "the", "US", ",", "it", "will", "depend", "on", "the", "school", "."]
# ::ner_tags ["O", "O", "GPE", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "NNP", ",", "PRP", "MD", "VB", "IN", "DT", "NN", "."]
# ::lemmas ["in", "the", "US", ",", "it", "will", "depend", "on", "the", "school", "."]
(d0 / depend-01
      :ARG1 (s0 / school)
      :ARG0 (i0 / it)
      :location (c0 / country
            :name (n0 / name
                  :op1 "US" )))

# ::snt There are a few things I think you should do.
# ::tokens ["There", "are", "a", "few", "things", "I", "think", "you", "should", "do", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "JJ", "NNS", "PRP", "VBP", "PRP", "MD", "VB", "."]
# ::lemmas ["there", "be", "a", "few", "thing", "i", "think", "you", "should", "do", "."]
(t0 / think-01
      :ARG1 (r0 / recommend-01
            :ARG1 (d0 / do-02
                  :ARG0 y0
                  :ARG1 (t1 / thing
                        :quant (f0 / few)))
            :ARG2 (y0 / you))
      :ARG0 (i0 / i))

# ::snt I've had this same problem.
# ::tokens ["I", "'ve", "had", "this", "same", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VB", "VBN", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "have", "this", "same", "problem", "."]
(h0 / have-03
      :ARG1 (p0 / problem
            :mod (t0 / this)
            :ARG1-of (s0 / same-01))
      :ARG0 (i0 / i))

# ::snt Not a direct answer to the question, but something to consider.
# ::tokens ["Not", "a", "direct", "answer", "to", "the", "question", ",", "but", "something", "to", "consider", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "DT", "JJ", "NN", "IN", "DT", "NN", ",", "CC", "NN", "TO", "VB", "."]
# ::lemmas ["not", "a", "direct", "answer", "to", "the", "question", ",", "but", "something", "to", "consider", "."]
(c0 / contrast-01
      :ARG1 (a0 / answer-01
            :ARG1-of (q0 / question-01)
            :ARG1-of (d0 / direct-02
                  :polarity - ))
      :ARG2 (s0 / something
            :ARG1-of (c1 / consider-02)))

# ::snt I remained under the banyan tree, exhausted by my daily ritual of dragooning the men every two hours.
# ::tokens ["I", "remained", "under", "the", "banyan", "tree", ",", "exhausted", "by", "my", "daily", "ritual", "of", "dragooning", "the", "men", "every", "two", "hours", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "DATE", "O", "O", "O", "O", "O", "TIME", "TIME", "TIME", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["PRP", "VBD", "IN", "DT", "NNP", "NN", ",", "VBN", "IN", "PRP$", "JJ", "NN", "IN", "VBG", "DT", "NNS", "DT", "CD", "NNS", "."]
# ::lemmas ["i", "remain", "under", "the", "banyan", "tree", ",", "exhaust", "by", "my", "daily", "ritual", "of", "dragoon", "the", "man", "every", "two", "hours", "."]
(a0 / and
      :op1 (r0 / remain-01
            :ARG1 (i0 / i
                  :ARG0-of (d0 / drag-01
                        :ARG1 (m0 / man)))
            :ARG3 (u0 / under
                  :op1 (t0 / tree
                        :mod (b0 / banyan))))
      :op2 (e0 / exhaust-01
            :ARG1 i0
            :ARG0 (r1 / ritual
                  :ARG0 i0
                  :purpose d0
                  :frequency (r2 / rate-entity-91
                        :ARG3 (t1 / temporal-quantity
                              :quant 2 
                              :unit (h0 / hour))))))

# ::snt In the US, it will depend on the school.
# ::tokens ["In", "the", "US", ",", "it", "will", "depend", "on", "the", "school", "."]
# ::ner_tags ["O", "O", "GPE", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "NNP", ",", "PRP", "MD", "VB", "IN", "DT", "NN", "."]
# ::lemmas ["in", "the", "US", ",", "it", "will", "depend", "on", "the", "school", "."]
(d0 / depend-01
      :ARG1 (s0 / school)
      :ARG0 (i0 / it)
      :location (c0 / country
            :name (n0 / name
                  :op1 "US" )))

# ::snt You should do it.
# ::tokens ["You", "should", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", "."]
# ::lemmas ["you", "should", "do", "it", "."]
(r0 / recommend-01
      :ARG1 (d0 / do-02
            :ARG0 (y0 / you)
            :ARG1 (i0 / it)))

# ::snt Yes, it's probably a good idea to renew your passport.
# ::tokens ["Yes", ",", "it", "'s", "probably", "a", "good", "idea", "to", "renew", "your", "passport", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "VBZ", "RB", "DT", "JJ", "NN", "TO", "VB", "PRP$", "NN", "."]
# ::lemmas ["yes", ",", "it", "be", "probably", "a", "good", "idea", "to", "renew", "your", "passport", "."]
(p0 / probable
      :domain (i0 / idea
            :ARG1-of (g0 / good-02)
            :domain (r0 / renew-01
                  :ARG1 (p1 / passport
                        :poss (y0 / you)))))

# ::snt Yes, you should mention your experience.
# ::tokens ["Yes", ",", "you", "should", "mention", "your", "experience", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "MD", "VB", "PRP$", "NN", "."]
# ::lemmas ["yes", ",", "you", "should", "mention", "your", "experience", "."]
(r0 / recommend-01
      :ARG1 (m0 / mention-01
            :ARG0 (t0 / thing
                  :ARG1-of (e0 / experience-01
                        :ARG0 y0))
            :ARG0 (y0 / you)))

# ::snt It depends on what you want to do next, and where you want to do it.
# ::tokens ["It", "depends", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "TO", "VB", "RB", ",", "CC", "WRB", "PRP", "VBP", "TO", "VB", "PRP", "."]
# ::lemmas ["it", "depend", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (t0 / thing
                  :ARG1-of (d1 / do-02
                        :ARG0 (y0 / you)
                        :time (n0 / next)))
            :op2 (l0 / location
                  :location-of (w0 / want-01
                        :ARG1 d1
                        :ARG0 y0)))
      :ARG0 (i0 / it))

# ::snt It depends on what you want to do next, and where you want to do it.
# ::tokens ["It", "depends", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "TO", "VB", "RB", ",", "CC", "WRB", "PRP", "VBP", "TO", "VB", "PRP", "."]
# ::lemmas ["it", "depend", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (t0 / thing
                  :ARG1-of (d1 / do-02
                        :ARG0 (y0 / you)
                        :time (n0 / next)))
            :op2 (l0 / location
                  :location-of (w0 / want-01
                        :ARG1 d1
                        :ARG0 y0)))
      :ARG0 (i0 / it))

# ::snt This is a very unusual request.
# ::tokens ["This", "is", "a", "very", "unusual", "request", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "DT", "RB", "JJ", "NN", "."]
# ::lemmas ["this", "be", "a", "very", "unusual", "request", "."]
(r0 / request-01
      :mod (t0 / this)
      :mod (u0 / usual
            :degree (v0 / very)
            :polarity - ))

# ::snt It depends on what you want to do next, and where you want to do it.
# ::tokens ["It", "depends", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "TO", "VB", "RB", ",", "CC", "WRB", "PRP", "VBP", "TO", "VB", "PRP", "."]
# ::lemmas ["it", "depend", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (t0 / thing
                  :ARG1-of (d1 / do-02
                        :ARG0 (y0 / you)
                        :time (n0 / next)))
            :op2 (l0 / location
                  :location-of (w0 / want-01
                        :ARG1 d1
                        :ARG0 y0)))
      :ARG0 (i0 / it))

# ::snt It really doesn't matter.
# ::tokens ["It", "really", "does", "n't", "matter", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBZ", "RB", "VB", "."]
# ::lemmas ["it", "really", "do", "not", "matter", "."]
(m0 / matter-01
      :ARG1 (i0 / it)
      :ARG1-of (r0 / real-04)
      :polarity - )

# ::snt You don't need to know everything.
# ::tokens ["You", "do", "n't", "need", "to", "know", "everything", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "NN", "."]
# ::lemmas ["you", "do", "not", "need", "to", "know", "everything", "."]
(n0 / need-01
      :ARG1 (k0 / know-01
            :ARG0 y0
            :ARG1 (e0 / everything))
      :ARG0 (y0 / you)
      :polarity - )

# ::snt I think you're looking for Mikey (1992).
# ::tokens ["I", "think", "you", "'re", "looking", "for", "Mikey", "(", "1992", ")", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "PERSON", "O", "DATE", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O", "B", "O", "O"]
# ::pos_tags ["PRP", "VBP", "PRP", "VBP", "VBG", "IN", "NNP", "-LRB-", "CD", "-RRB-", "."]
# ::lemmas ["i", "think", "you", "be", "look", "for", "Mikey", "(", "1992", ")", "."]
(t0 / think-01
      :ARG1 (l0 / look-01
            :ARG1 (p0 / person
                  :ARG1-of (n0 / name
                        :op1 "Mikey" )
                  :time (d0 / date-entity
                        :year 1992 ))
            :ARG0 (y0 / you))
      :ARG0 (i0 / i))

# ::snt I don't think that there's any.
# ::tokens ["I", "do", "n't", "think", "that", "there", "'s", "any", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "IN", "EX", "VBZ", "DT", "."]
# ::lemmas ["i", "do", "not", "think", "that", "there", "be", "any", "."]
(t0 / think-01
      :ARG1 (e0 / exist-01
            :ARG1 (a0 / any))
      :ARG0 (i0 / i)
      :polarity - )

# ::snt There are a few things you can do:
# ::tokens ["There", "are", "a", "few", "things", "you", "can", "do", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "JJ", "NNS", "PRP", "MD", "VB", ":"]
# ::lemmas ["there", "be", "a", "few", "thing", "you", "can", "do", ":"]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (t0 / thing
                  :quant (f0 / few))
            :ARG0 (y0 / you)))

# ::snt This is the tip I find most useful:
# ::tokens ["This", "is", "the", "tip", "I", "find", "most", "useful", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "DT", "NN", "PRP", "VBP", "RBS", "JJ", ":"]
# ::lemmas ["this", "be", "the", "tip", "i", "find", "most", "useful", ":"]
(t0 / thing
      :ARG1-of (u0 / useful-05
            :ARG1-of (f0 / find-01
                  :ARG0 (i0 / i)))
      :domain (h0 / have-degree-91
            :ARG3 (m0 / most))
      :domain (t1 / tip-05)
      :domain (t2 / this))

# ::snt Sure, I've  done this very trip.
# ::tokens ["Sure", ",", "I", "'ve", " ", "done", "this", "very", "trip", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "VB", "_SP", "VBN", "DT", "JJ", "NN", "."]
# ::lemmas ["sure", ",", "i", "have", " ", "do", "this", "very", "trip", "."]
(s0 / sure-02
      :ARG1 (t0 / trip-03
            :mod (t1 / this
                  :mod (v0 / very))
            :ARG0 (i0 / i)))

# ::snt You can use it, too.
# ::tokens ["You", "can", "use", "it", ",", "too", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", ",", "RB", "."]
# ::lemmas ["you", "can", "use", "it", ",", "too", "."]
(p0 / possible-01
      :ARG1 (u0 / use-01
            :ARG1 (i0 / it)
            :ARG0 (y0 / you)
            :mod (t0 / too)))

# ::snt I've located an article that might be of some help: http://www.dsattorney.com/qa-pseudonyms-in-contracts/
# ::tokens ["I", "'ve", "located", "an", "article", "that", "might", "be", "of", "some", "help", ":", "http://www.dsattorney.com/qa-pseudonyms-in-contracts/"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VB", "VBN", "DT", "NN", "WDT", "MD", "VB", "IN", "DT", "NN", ":", "NNP"]
# ::lemmas ["i", "have", "locate", "an", "article", "that", "may", "be", "of", "some", "help", ":", "http://www.dsattorney.com/qa-pseudonyms-in-contracts/"]
(l0 / locate-01
      :ARG1 (a0 / article
            :ARG0-of (h0 / help-01
                  :ARG1-of (p0 / possible-01)
                  :mod (s0 / some))
            :location (u0 / url-entity
                  :value "http://www.dsattorney.com/qa-pseudonyms-in-contracts/" ))
      :ARG0 (i0 / i))

# ::snt You don't have to worry.
# ::tokens ["You", "do", "n't", "have", "to", "worry", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "."]
# ::lemmas ["you", "do", "not", "have", "to", "worry", "."]
(o0 / obligate-01
      :ARG1 (y0 / you)
      :ARG2 (w0 / worry-02
            :ARG0 y0)
      :polarity - )

# ::snt It depends entirely on your company and your contract.
# ::tokens ["It", "depends", "entirely", "on", "your", "company", "and", "your", "contract", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "IN", "PRP$", "NN", "CC", "PRP$", "NN", "."]
# ::lemmas ["it", "depend", "entirely", "on", "your", "company", "and", "your", "contract", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (c0 / company
                  :poss (y0 / you))
            :op2 (c1 / contract
                  :poss y0))
      :ARG0 (i0 / it)
      :degree (e0 / entire))

# ::snt The wood probably isn't rotten, it's just worn out.
# ::tokens ["The", "wood", "probably", "is", "n't", "rotten", ",", "it", "'s", "just", "worn", "out", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "RB", "VBZ", "RB", "JJ", ",", "PRP", "VBZ", "RB", "VBN", "RP", "."]
# ::lemmas ["the", "wood", "probably", "be", "not", "rotten", ",", "it", "be", "just", "wear", "out", "."]
(h0 / have-concession-91
      :ARG1 (w0 / wear-01
            :ARG1 (j0 / just)
            :ARG1 (w1 / wood))
      :ARG2 (p0 / probable
            :domain (r0 / rot-01
                  :ARG1 w1
                  :polarity - )))

# ::snt I have the same thing.
# ::tokens ["I", "have", "the", "same", "thing", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "the", "same", "thing", "."]
(h0 / have-03
      :ARG1 (t0 / thing
            :ARG1-of (s0 / same-01))
      :ARG0 (i0 / i))

# ::snt Yes it is common!
# ::tokens ["Yes", "it", "is", "common", "!"]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["UH", "PRP", "VBZ", "JJ", "."]
# ::lemmas ["yes", "it", "be", "common", "!"]
(c0 / common
      :domain (i0 / it))

# ::snt I don't think that there's any.
# ::tokens ["I", "do", "n't", "think", "that", "there", "'s", "any", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "IN", "EX", "VBZ", "DT", "."]
# ::lemmas ["i", "do", "not", "think", "that", "there", "be", "any", "."]
(t0 / think-01
      :ARG1 (e0 / exist-01
            :ARG1 (a0 / any))
      :ARG0 (i0 / i)
      :polarity - )

# ::snt You can use it, too.
# ::tokens ["You", "can", "use", "it", ",", "too", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", ",", "RB", "."]
# ::lemmas ["you", "can", "use", "it", ",", "too", "."]
(p0 / possible-01
      :ARG1 (u0 / use-01
            :ARG1 (i0 / it)
            :ARG0 (y0 / you)
            :mod (t0 / too)))

# ::snt There are a few things you can do:
# ::tokens ["There", "are", "a", "few", "things", "you", "can", "do", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "JJ", "NNS", "PRP", "MD", "VB", ":"]
# ::lemmas ["there", "be", "a", "few", "thing", "you", "can", "do", ":"]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (t0 / thing
                  :quant (f0 / few))
            :ARG0 (y0 / you)))

# ::snt There are a few possible reasons.
# ::tokens ["There", "are", "a", "few", "possible", "reasons", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "JJ", "JJ", "NNS", "."]
# ::lemmas ["there", "be", "a", "few", "possible", "reason", "."]
(r0 / reason
      :quant (f0 / few)
      :ARG1-of (p0 / possible-01))

# ::snt I've had this same problem.
# ::tokens ["I", "'ve", "had", "this", "same", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VB", "VBN", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "have", "this", "same", "problem", "."]
(h0 / have-03
      :ARG1 (p0 / problem
            :mod (t0 / this)
            :ARG1-of (s0 / same-01))
      :ARG0 (i0 / i))

# ::snt The answer to both questions is: Yes.
# ::tokens ["The", "answer", "to", "both", "questions", "is", ":", "Yes", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NNS", "VBZ", ":", "UH", "."]
# ::lemmas ["the", "answer", "to", "both", "question", "be", ":", "yes", "."]
(a0 / answer-01
      :ARG2 (y0 / yes)
      :ARG2 (q0 / question-01
            :mod (b0 / both)))

# ::snt I did this one time as well.
# ::tokens ["I", "did", "this", "one", "time", "as", "well", "."]
# ::ner_tags ["O", "O", "O", "CARDINAL", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "DT", "CD", "NN", "RB", "RB", "."]
# ::lemmas ["i", "do", "this", "one", "time", "as", "well", "."]
(d0 / do-02
      :ARG1 (t0 / this)
      :ARG0 (i0 / i)
      :mod (a0 / as-well)
      :frequency 1 )

# ::snt You should just ask your boss what he wants you to do.
# ::tokens ["You", "should", "just", "ask", "your", "boss", "what", "he", "wants", "you", "to", "do", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "RB", "VB", "PRP$", "NN", "WP", "PRP", "VBZ", "PRP", "TO", "VB", "."]
# ::lemmas ["you", "should", "just", "ask", "your", "boss", "what", "he", "want", "you", "to", "do", "."]
(r0 / recommend-01
      :ARG1 (a0 / ask-01
            :ARG0 (t0 / thing
                  :ARG1-of (d0 / do-02
                        :ARG0 p0))
            :ARG0 (y0 / you
                  :ARG1-of (h0 / have-rel-role-91
                        :ARG0 p0
                        :ARG2 (b0 / boss)))
            :mod (j0 / just)
            :ARG2 (p0 / person
                  :ARG0-of (w0 / want-01
                        :ARG1 d0))))

# ::snt It depends on what you want to have in your tank.
# ::tokens ["It", "depends", "on", "what", "you", "want", "to", "have", "in", "your", "tank", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "TO", "VB", "IN", "PRP$", "NN", "."]
# ::lemmas ["it", "depend", "on", "what", "you", "want", "to", "have", "in", "your", "tank", "."]
(d0 / depend-01
      :ARG1 (t0 / thing
            :ARG1-of (h0 / have-03
                  :ARG0 (y0 / you)
                  :ARG1-of (w0 / want-01
                        :ARG0 y0)
                  :location (t1 / tank
                        :poss y0)))
      :ARG0 (i0 / it))

# ::snt You don't have to know.
# ::tokens ["You", "do", "n't", "have", "to", "know", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "."]
# ::lemmas ["you", "do", "not", "have", "to", "know", "."]
(o0 / obligate-01
      :ARG1 (y0 / you)
      :ARG2 (k0 / know-01
            :ARG0 y0)
      :polarity - )

# ::snt You can buy it on amazon for $5.
# ::tokens ["You", "can", "buy", "it", "on", "amazon", "for", "$", "5", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "O", "O", "MONEY", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "B", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", "IN", "NNP", "IN", "$", "CD", "."]
# ::lemmas ["you", "can", "buy", "it", "on", "amazon", "for", "$", "5", "."]
(p0 / possible-01
      :ARG1 (b0 / buy-01
            :ARG1 (i0 / it)
            :ARG0 (y0 / you)
            :ARG3 (c0 / company
                  :name (n0 / name
                        :op1 "amazon" ))
            :ARG3 (m0 / monetary-quantity
                  :quant 5 
                  :unit (d0 / dollar))))

# ::snt You might have to try a variety before you find one that clicks with him.
# ::tokens ["You", "might", "have", "to", "try", "a", "variety", "before", "you", "find", "one", "that", "clicks", "with", "him", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "TO", "VB", "DT", "NN", "IN", "PRP", "VBP", "CD", "WDT", "VBZ", "IN", "PRP", "."]
# ::lemmas ["you", "may", "have", "to", "try", "a", "variety", "before", "you", "find", "one", "that", "click", "with", "him", "."]
(p0 / possible-01
      :ARG1 (o0 / obligate-01
            :ARG1 (y0 / you
                  :ARG0-of (f0 / find-01
                        :ARG1 (t1 / thing
                              :ARG0-of (c0 / click-01
                                    :accompanier (h0 / he)))))
            :ARG2 (t0 / try-01
                  :ARG0 y0
                  :ARG1 (v0 / variety
                        :op1 f0)
                  :time (b0 / before
                        :op1 f0))))

# ::snt From what I understand this is what you can do :
# ::tokens ["From", "what", "I", "understand", "this", "is", "what", "you", "can", "do", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "WP", "PRP", "VBP", "DT", "VBZ", "WP", "PRP", "MD", "VB", ":"]
# ::lemmas ["from", "what", "i", "understand", "this", "be", "what", "you", "can", "do", ":"]
(u0 / understand-01
      :ARG1 (t0 / thing
            :ARG1-of (d0 / do-02
                  :ARG0 (y0 / you)
                  :ARG1-of (p0 / possible-01))
            :domain (t1 / this))
      :ARG0 (i0 / i))

# ::snt I'd say it primarily depends on two things:
# ::tokens ["I", "'d", "say", "it", "primarily", "depends", "on", "two", "things", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", "RB", "VBZ", "IN", "CD", "NNS", ":"]
# ::lemmas ["i", "'d", "say", "it", "primarily", "depend", "on", "two", "thing", ":"]
(s0 / say-01
      :ARG1 (d0 / depend-01
            :ARG1 (i1 / it)
            :mod (p0 / primary)
            :ARG1 (t0 / thing
                  :quant 2 ))
      :ARG0 (i0 / i))

# ::snt I am not sure this is the right site for the question.
# ::tokens ["I", "am", "not", "sure", "this", "is", "the", "right", "site", "for", "the", "question", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "JJ", "DT", "VBZ", "DT", "JJ", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["i", "be", "not", "sure", "this", "be", "the", "right", "site", "for", "the", "question", "."]
(s0 / sure-02
      :ARG1 (s1 / site
            :ARG1-of (r0 / right-02)
            :domain (t0 / this)
            :purpose (q0 / question-01))
      :ARG0 (i0 / i)
      :polarity - )

# ::snt You are not disclosing key info.
# ::tokens ["You", "are", "not", "disclosing", "key", "info", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VBG", "JJ", "NN", "."]
# ::lemmas ["you", "be", "not", "disclose", "key", "info", "."]
(d0 / disclose-01
      :ARG1 (i0 / information
            :ARG1-of (k0 / key-02))
      :ARG0 (y0 / you)
      :polarity - )

# ::snt It very much depends on the grant in question.
# ::tokens ["It", "very", "much", "depends", "on", "the", "grant", "in", "question", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "RB", "VBZ", "IN", "DT", "NN", "IN", "NN", "."]
# ::lemmas ["it", "very", "much", "depend", "on", "the", "grant", "in", "question", "."]
(d0 / depend-01
      :ARG1 (t0 / thing
            :ARG1-of (g0 / grant-01
                  :ARG1-of (q0 / question-01)))
      :ARG0 (i0 / it)
      :degree (m0 / much
            :degree (v0 / very)))

# ::snt It depends on what they are.
# ::tokens ["It", "depends", "on", "what", "they", "are", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "."]
# ::lemmas ["it", "depend", "on", "what", "they", "be", "."]
(d0 / depend-01
      :ARG1 (t0 / thing
            :domain (t1 / they))
      :ARG0 (i0 / it))

# ::snt There's not a lot you can do about that.
# ::tokens ["There", "'s", "not", "a", "lot", "you", "can", "do", "about", "that", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBZ", "RB", "DT", "NN", "PRP", "MD", "VB", "IN", "DT", "."]
# ::lemmas ["there", "be", "not", "a", "lot", "you", "can", "do", "about", "that", "."]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (l0 / lot
                  :polarity - )
            :ARG0 (y0 / you)
            :ARG2 (t0 / that)))

# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tokens ["You", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "is", "what", "you", "want", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBP", "TO", "VB", "PRP$", "NN", "IN", "WP", "PRP", "VBP", "VB", ",", "WDT", "VBZ", "WP", "PRP", "VBP", "."]
# ::lemmas ["you", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "be", "what", "you", "want", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (k0 / know-01
                  :ARG1 t0)
            :ARG0-of (w0 / want-01)
            :ARG0-of (a0 / answer-01))
      :mod (j0 / just)
      :ARG2 (b0 / base-02
            :ARG0 y0
            :ARG1 a0
            :ARG1 (t0 / thing)))

# ::snt This is not a good idea.
# ::tokens ["This", "is", "not", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["this", "be", "not", "a", "good", "idea", "."]
(i0 / idea
      :ARG1-of (g0 / good-02
            :polarity - )
      :domain (t0 / this))

# ::snt I'd say it primarily depends on two things:
# ::tokens ["I", "'d", "say", "it", "primarily", "depends", "on", "two", "things", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", "RB", "VBZ", "IN", "CD", "NNS", ":"]
# ::lemmas ["i", "'d", "say", "it", "primarily", "depend", "on", "two", "thing", ":"]
(s0 / say-01
      :ARG1 (d0 / depend-01
            :ARG1 (i1 / it)
            :mod (p0 / primary)
            :ARG1 (t0 / thing
                  :quant 2 ))
      :ARG0 (i0 / i))

# ::snt I have the same thing.
# ::tokens ["I", "have", "the", "same", "thing", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "the", "same", "thing", "."]
(h0 / have-03
      :ARG1 (t0 / thing
            :ARG1-of (s0 / same-01))
      :ARG0 (i0 / i))

# ::snt You can use it, too.
# ::tokens ["You", "can", "use", "it", ",", "too", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", ",", "RB", "."]
# ::lemmas ["you", "can", "use", "it", ",", "too", "."]
(p0 / possible-01
      :ARG1 (u0 / use-01
            :ARG1 (i0 / it)
            :ARG0 (y0 / you)
            :mod (t0 / too)))

# ::snt It really depends on how the employer documents it.
# ::tokens ["It", "really", "depends", "on", "how", "the", "employer", "documents", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBZ", "IN", "WRB", "DT", "NN", "VBZ", "PRP", "."]
# ::lemmas ["it", "really", "depend", "on", "how", "the", "employer", "document", "it", "."]
(d0 / depend-01
      :ARG1 (t0 / thing
            :manner-of (d1 / document-01
                  :ARG1 i0
                  :ARG0 (p0 / person
                        :ARG0-of (e0 / employ-01))))
      :ARG0 (i0 / it)
      :ARG1-of (r0 / real-04))

# ::snt I've had this same problem.
# ::tokens ["I", "'ve", "had", "this", "same", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VB", "VBN", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "have", "this", "same", "problem", "."]
(h0 / have-03
      :ARG1 (p0 / problem
            :mod (t0 / this)
            :ARG1-of (s0 / same-01))
      :ARG0 (i0 / i))

# ::snt It depends on the dish and how amenable it is at the stage you make the mistake.
# ::tokens ["It", "depends", "on", "the", "dish", "and", "how", "amenable", "it", "is", "at", "the", "stage", "you", "make", "the", "mistake", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "DT", "NN", "CC", "WRB", "JJ", "PRP", "VBZ", "IN", "DT", "NN", "PRP", "VBP", "DT", "NN", "."]
# ::lemmas ["it", "depend", "on", "the", "dish", "and", "how", "amenable", "it", "be", "at", "the", "stage", "you", "make", "the", "mistake", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (d1 / dish
                  :ARG1-of (s0 / stage))
            :op2 (t0 / thing
                  :degree-of (e0 / enable-01
                        :ARG0 (m0 / mistake-02
                              :ARG0 (y0 / you)))))
      :ARG0 (i0 / it))

# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tokens ["You", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "is", "what", "you", "want", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBP", "TO", "VB", "PRP$", "NN", "IN", "WP", "PRP", "VBP", "VB", ",", "WDT", "VBZ", "WP", "PRP", "VBP", "."]
# ::lemmas ["you", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "be", "what", "you", "want", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (k0 / know-01
                  :ARG1 t0)
            :ARG0-of (w0 / want-01)
            :ARG0-of (a0 / answer-01))
      :mod (j0 / just)
      :ARG2 (b0 / base-02
            :ARG0 y0
            :ARG1 a0
            :ARG1 (t0 / thing)))

# ::snt That's what I believe.
# ::tokens ["That", "'s", "what", "I", "believe", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "WP", "PRP", "VBP", "."]
# ::lemmas ["that", "be", "what", "i", "believe", "."]
(b0 / believe-01
      :ARG1 (t0 / that)
      :ARG0 (i0 / i))

# ::snt If you are not sure how to do it, don't do it at all.
# ::tokens ["If", "you", "are", "not", "sure", "how", "to", "do", "it", ",", "do", "n't", "do", "it", "at", "all", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "PRP", "VBP", "RB", "JJ", "WRB", "TO", "VB", "PRP", ",", "VB", "RB", "VB", "PRP", "RB", "RB", "."]
# ::lemmas ["if", "you", "be", "not", "sure", "how", "to", "do", "it", ",", "do", "not", "do", "it", "at", "all", "."]
(d0 / do-02
      :ARG1 (i0 / it
            :ARG1-of (d1 / do-02
                  :manner t0))
      :ARG0 (y0 / you)
      :mod (a0 / at-all)
      :polarity - 
      :mode imperative 
      :condition (s0 / sure-02
            :ARG0 y0
            :ARG1 - 
            :ARG1 (t0 / thing)))

# ::snt I would say you can do it, but it wouldn't be advised.
# ::tokens ["I", "would", "say", "you", "can", "do", "it", ",", "but", "it", "would", "n't", "be", "advised", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", "MD", "VB", "PRP", ",", "CC", "PRP", "MD", "RB", "VB", "VBN", "."]
# ::lemmas ["i", "would", "say", "you", "can", "do", "it", ",", "but", "it", "would", "not", "be", "advise", "."]
(c0 / contrast-01
      :ARG1 (s0 / say-01
            :ARG1 (p0 / possible-01
                  :ARG1 (d0 / do-02
                        :ARG1 i1
                        :ARG0 (y0 / you)))
            :ARG0 (i0 / i))
      :ARG2 (a0 / advise-01
            :ARG1 (i1 / it)
            :polarity - ))

# ::snt I would say you can do it, but it wouldn't be advised.
# ::tokens ["I", "would", "say", "you", "can", "do", "it", ",", "but", "it", "would", "n't", "be", "advised", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", "MD", "VB", "PRP", ",", "CC", "PRP", "MD", "RB", "VB", "VBN", "."]
# ::lemmas ["i", "would", "say", "you", "can", "do", "it", ",", "but", "it", "would", "not", "be", "advise", "."]
(c0 / contrast-01
      :ARG1 (s0 / say-01
            :ARG1 (p0 / possible-01
                  :ARG1 (d0 / do-02
                        :ARG1 i1
                        :ARG0 (y0 / you)))
            :ARG0 (i0 / i))
      :ARG2 (a0 / advise-01
            :ARG1 (i1 / it)
            :polarity - ))

# ::snt This answer is based on my experience teaching undergraduate math in the US.
# ::tokens ["This", "answer", "is", "based", "on", "my", "experience", "teaching", "undergraduate", "math", "in", "the", "US", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "VBN", "IN", "PRP$", "NN", "NN", "JJ", "NN", "IN", "DT", "NNP", "."]
# ::lemmas ["this", "answer", "be", "base", "on", "my", "experience", "teaching", "undergraduate", "math", "in", "the", "US", "."]
(b0 / base-02
      :ARG1 (t0 / thing
            :mod (t1 / this)
            :ARG2-of (a0 / answer-01))
      :ARG2 (e0 / experience-01
            :ARG1 (t2 / teach-01
                  :ARG0 i0
                  :ARG1 (m0 / mathematics
                        :mod (u0 / undergraduate))
                  :location (c0 / country
                        :name (n0 / name
                              :op1 "US" )))
            :ARG0 (i0 / i)))

# ::snt It depends on what you want to have in your tank.
# ::tokens ["It", "depends", "on", "what", "you", "want", "to", "have", "in", "your", "tank", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "TO", "VB", "IN", "PRP$", "NN", "."]
# ::lemmas ["it", "depend", "on", "what", "you", "want", "to", "have", "in", "your", "tank", "."]
(d0 / depend-01
      :ARG1 (t0 / thing
            :ARG1-of (h0 / have-03
                  :ARG0 (y0 / you)
                  :ARG1-of (w0 / want-01
                        :ARG0 y0)
                  :location (t1 / tank
                        :poss y0)))
      :ARG0 (i0 / it))

# ::snt That is your problem, not your supervisor's.
# ::tokens ["That", "is", "your", "problem", ",", "not", "your", "supervisor", "'s", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "PRP$", "NN", ",", "RB", "PRP$", "NN", "POS", "."]
# ::lemmas ["that", "be", "your", "problem", ",", "not", "your", "supervisor", "'s", "."]
(c0 / contrast-01
      :ARG1 (p0 / problem
            :domain (t0 / that)
            :poss (y0 / you
                  :ARG1-of (h0 / have-rel-role-91
                        :ARG0 p2
                        :ARG2 (s0 / supervisor))))
      :ARG2 (p1 / problem
            :domain t0
            :poss y0
            :poss (p2 / person)
            :polarity - ))

# ::snt Yes, there is a reason to not do what you propose.
# ::tokens ["Yes", ",", "there", "is", "a", "reason", "to", "not", "do", "what", "you", "propose", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "EX", "VBZ", "DT", "NN", "TO", "RB", "VB", "WP", "PRP", "VBP", "."]
# ::lemmas ["yes", ",", "there", "be", "a", "reason", "to", "not", "do", "what", "you", "propose", "."]
(r0 / reason
      :ARG0-of (c0 / cause-01
            :ARG1 (d0 / do-02
                  :ARG1 (t0 / thing
                        :ARG1-of (p0 / propose-01
                              :ARG0 (y0 / you)))
                  :polarity - )))

# ::snt I think it is depends on the program.
# ::tokens ["I", "think", "it", "is", "depends", "on", "the", "program", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "PRP", "VBZ", "VBZ", "IN", "DT", "NN", "."]
# ::lemmas ["i", "think", "it", "be", "depend", "on", "the", "program", "."]
(t0 / think-01
      :ARG1 (d0 / depend-01
            :ARG1 (p0 / program)
            :ARG0 (i1 / it))
      :ARG0 (i0 / i))

# ::snt I think you've pretty much done your review.
# ::tokens ["I", "think", "you", "'ve", "pretty", "much", "done", "your", "review", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "PRP", "VB", "RB", "RB", "VBN", "PRP$", "NN", "."]
# ::lemmas ["i", "think", "you", "have", "pretty", "much", "do", "your", "review", "."]
(t0 / think-01
      :ARG1 (d0 / do-02
            :ARG1 (r0 / review-01
                  :ARG0 y0)
            :ARG0 (y0 / you)
            :degree (p0 / pretty-much))
      :ARG0 (i0 / i))

# ::snt You burn more Calories digesting protein than you do carbohydrates and fat.
# ::tokens ["You", "burn", "more", "Calories", "digesting", "protein", "than", "you", "do", "carbohydrates", "and", "fat", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "JJR", "NNS", "VBG", "NN", "IN", "PRP", "VBP", "NNS", "CC", "NN", "."]
# ::lemmas ["you", "burn", "more", "calorie", "digest", "protein", "than", "you", "do", "carbohydrate", "and", "fat", "."]
(b0 / burn-01
      :ARG1 (p0 / product
            :name (n0 / name
                  :op1 "calorie" )
            :quant (h0 / have-quant-91
                  :ARG3 (m0 / more)
                  :ARG4 (a0 / and
                        :op1 (c0 / carbohydrate)
                        :op2 (f0 / fat))))
      :ARG0 (y0 / you
            :ARG0-of (d0 / digest-01
                  :ARG1 (p1 / protein))))

# ::snt I would look at this: U.S.
# ::tokens ["I", "would", "look", "at", "this", ":", "U.S."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["PRP", "MD", "VB", "IN", "DT", ":", "NNP"]
# ::lemmas ["i", "would", "look", "at", "this", ":", "U.S."]
(l0 / look-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "U.S." ))
      :ARG0 (i0 / i)
      :ARG1 (t0 / this))

# ::snt It looks to me that this is set up for what you want:
# ::tokens ["It", "looks", "to", "me", "that", "this", "is", "set", "up", "for", "what", "you", "want", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "PRP", "IN", "DT", "VBZ", "VBN", "RP", "IN", "WP", "PRP", "VBP", ":"]
# ::lemmas ["it", "look", "to", "me", "that", "this", "be", "set", "up", "for", "what", "you", "want", ":"]
(l0 / look-02
      :ARG1 (s0 / set-up-03
            :ARG1 (t0 / this)
            :purpose (t1 / thing
                  :ARG1-of (w0 / want-01
                        :ARG0 (y0 / you))))
      :ARG0 (i0 / i))

# ::snt It is impossible to answer this question without a form check.
# ::tokens ["It", "is", "impossible", "to", "answer", "this", "question", "without", "a", "form", "check", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "JJ", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["it", "be", "impossible", "to", "answer", "this", "question", "without", "a", "form", "check", "."]
(p0 / possible-01
      :ARG1 (a0 / answer-01
            :ARG1 (c0 / check-01
                  :ARG1 (f0 / form)
                  :polarity - )
            :ARG1 (q0 / question-01
                  :mod (t0 / this)))
      :polarity - )

# ::snt You need to add this to your resume because it is the only position you have had.
# ::tokens ["You", "need", "to", "add", "this", "to", "your", "resume", "because", "it", "is", "the", "only", "position", "you", "have", "had", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "DT", "IN", "PRP$", "NN", "IN", "PRP", "VBZ", "DT", "JJ", "NN", "PRP", "VBP", "VBN", "."]
# ::lemmas ["you", "need", "to", "add", "this", "to", "your", "resume", "because", "it", "be", "the", "only", "position", "you", "have", "have", "."]
(n0 / need-01
      :ARG1 (a0 / add-02
            :ARG0 y0
            :ARG1 (r0 / resume)
            :ARG1 (t0 / this))
      :ARG0 (y0 / you
            :ARG0-of (h0 / have-03
                  :ARG1 p0))
      :ARG1-of (c0 / cause-01
            :ARG0 (p0 / position-01
                  :mod (o0 / only))))

# ::snt Yes, you should mention your experience.
# ::tokens ["Yes", ",", "you", "should", "mention", "your", "experience", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "MD", "VB", "PRP$", "NN", "."]
# ::lemmas ["yes", ",", "you", "should", "mention", "your", "experience", "."]
(r0 / recommend-01
      :ARG1 (m0 / mention-01
            :ARG0 (t0 / thing
                  :ARG1-of (e0 / experience-01
                        :ARG0 y0))
            :ARG0 (y0 / you)))

# ::snt I think it is great that you had a test conducted.
# ::tokens ["I", "think", "it", "is", "great", "that", "you", "had", "a", "test", "conducted", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "PRP", "VBZ", "JJ", "IN", "PRP", "VBD", "DT", "NN", "VBN", "."]
# ::lemmas ["i", "think", "it", "be", "great", "that", "you", "have", "a", "test", "conduct", "."]
(t0 / think-01
      :ARG1 (g0 / great
            :domain (t1 / test-01
                  :ARG0 (y0 / you)
                  :ARG1-of (c0 / conduct-01)))
      :ARG0 (i0 / i))

# ::snt I'm going to go out on a limb here...
# ::tokens ["I", "'m", "going", "to", "go", "out", "on", "a", "limb", "here", "..."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "VBG", "TO", "VB", "RP", "IN", "DT", "NN", "RB", "."]
# ::lemmas ["i", "be", "go", "to", "go", "out", "on", "a", "limb", "here", "..."]
(g0 / go-out-17
      :ARG1 (i0 / i)
      :location (h0 / here)
      :manner (l0 / limb))

# ::snt If your long stay visa for Switzerland is valid, then you will not need a transit visa.
# ::tokens ["If", "your", "long", "stay", "visa", "for", "Switzerland", "is", "valid", ",", "then", "you", "will", "not", "need", "a", "transit", "visa", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "PRP$", "JJ", "NN", "NN", "IN", "NNP", "VBZ", "JJ", ",", "RB", "PRP", "MD", "RB", "VB", "DT", "NN", "NN", "."]
# ::lemmas ["if", "your", "long", "stay", "visa", "for", "Switzerland", "be", "valid", ",", "then", "you", "will", "not", "need", "a", "transit", "visa", "."]
(n0 / need-01
      :ARG1 (v0 / visa
            :poss y0
            :mod (t0 / transit))
      :ARG0 (y0 / you
            :poss-of (v2 / visa
                  :mod (s0 / stay-01
                        :ARG1-of (l0 / long-03))
                  :destination (c0 / country
                        :name (n1 / name
                              :op1 "Switzerland" ))))
      :polarity - 
      :condition (v1 / valid-02
            :ARG1 v2))

# ::snt Now you don't have to be perfect on every answer.
# ::tokens ["Now", "you", "do", "n't", "have", "to", "be", "perfect", "on", "every", "answer", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "PRP", "VBP", "RB", "VB", "TO", "VB", "JJ", "IN", "DT", "NN", "."]
# ::lemmas ["now", "you", "do", "not", "have", "to", "be", "perfect", "on", "every", "answer", "."]
(o0 / obligate-01
      :ARG1 (y0 / you)
      :ARG2 (p0 / perfect-02
            :ARG1 y0
            :ARG2 (t0 / thing
                  :mod (e0 / every)
                  :ARG2-of (a0 / answer-01)))
      :polarity - 
      :time (n0 / now))

# ::snt Primer/paint will not work.
# ::tokens ["Primer", "/", "paint", "will", "not", "work", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "SYM", "NN", "MD", "RB", "VB", "."]
# ::lemmas ["primer", "/", "paint", "will", "not", "work", "."]
(w0 / work-09
      :ARG1 (s0 / slash
            :op1 (p0 / primer)
            :op2 (p1 / paint))
      :polarity - )

# ::snt The best thing you can do is to know your stuff.
# ::tokens ["The", "best", "thing", "you", "can", "do", "is", "to", "know", "your", "stuff", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJS", "NN", "PRP", "MD", "VB", "VBZ", "TO", "VB", "PRP$", "NN", "."]
# ::lemmas ["the", "good", "thing", "you", "can", "do", "be", "to", "know", "your", "stuff", "."]
(t0 / thing
      :ARG1-of (g0 / good-02)
      :ARG1-of (d0 / do-02
            :ARG0 (y0 / you)
            :ARG1-of (p0 / possible-01))
      :ARG1-of (k0 / know-01
            :ARG2 g0
            :ARG0 y0
            :ARG1 (s0 / stuff
                  :poss y0))
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most)))

# ::snt I was in a similar situation.
# ::tokens ["I", "was", "in", "a", "similar", "situation", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "be", "in", "a", "similar", "situation", "."]
(b0 / be-located-at-91
      :ARG1 (i0 / i)
      :ARG2 (s0 / situation
            :ARG1-of (r0 / resemble-01)))

# ::snt Sometime if you really want it you might need to pay an agency to get the place for you.
# ::tokens ["Sometime", "if", "you", "really", "want", "it", "you", "might", "need", "to", "pay", "an", "agency", "to", "get", "the", "place", "for", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "IN", "PRP", "RB", "VBP", "PRP", "PRP", "MD", "VB", "TO", "VB", "DT", "NN", "TO", "VB", "DT", "NN", "IN", "PRP", "."]
# ::lemmas ["sometime", "if", "you", "really", "want", "it", "you", "may", "need", "to", "pay", "an", "agency", "to", "get", "the", "place", "for", "you", "."]
(h0 / have-condition-91
      :ARG1 (p0 / possible-01
            :ARG1 (n0 / need-01
                  :ARG0 y0
                  :ARG1 (p1 / pay-01
                        :ARG0 y0
                        :ARG3 g0
                        :ARG2 (a0 / agency))
                  :time (s0 / sometime)))
      :ARG2 (w0 / want-01
            :ARG1 (i0 / it)
            :ARG0 (y0 / you
                  :ARG0-of (g0 / get-01
                        :ARG0 a0
                        :ARG1 (p2 / place)))
            :ARG1-of (r0 / real-04)))

# ::snt Also it is useful to keep the consistency in your story.
# ::tokens ["Also", "it", "is", "useful", "to", "keep", "the", "consistency", "in", "your", "story", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "PRP", "VBZ", "JJ", "TO", "VB", "DT", "NN", "IN", "PRP$", "NN", "."]
# ::lemmas ["also", "it", "be", "useful", "to", "keep", "the", "consistency", "in", "your", "story", "."]
(u0 / useful-05
      :ARG1 (a0 / also)
      :ARG2 (k0 / keep-02
            :ARG1 (c0 / consistent-02
                  :location (s0 / story
                        :poss (y0 / you)))))

# ::snt Unfortunately the answer to your question is we simply do not know.
# ::tokens ["Unfortunately", "the", "answer", "to", "your", "question", "is", "we", "simply", "do", "not", "know", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "DT", "NN", "IN", "PRP$", "NN", "VBZ", "PRP", "RB", "VBP", "RB", "VB", "."]
# ::lemmas ["unfortunately", "the", "answer", "to", "your", "question", "be", "we", "simply", "do", "not", "know", "."]
(f0 / fortunate-01
      :ARG2 (a0 / answer-01
            :ARG1 (q0 / question-01
                  :ARG0 (y0 / you))
            :ARG2 (w0 / we)
            :ARG2 (k0 / know-01
                  :ARG0 w0
                  :mod (s0 / simple)
                  :polarity - ))
      :polarity - )

# ::snt I would personally beware of the Motley Fool.
# ::tokens ["I", "would", "personally", "beware", "of", "the", "Motley", "Fool", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "ORG", "ORG", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["PRP", "MD", "RB", "VB", "IN", "DT", "NNP", "NNP", "."]
# ::lemmas ["i", "would", "personally", "beware", "of", "the", "Motley", "Fool", "."]
(b0 / beware-01
      :ARG1 (p0 / personal-02)
      :ARG1 (b1 / broadcast-program
            :name (n0 / name
                  :op1 "Motley" 
                  :op2 "Fool" ))
      :ARG0 (i0 / i))

# ::snt You should do it.
# ::tokens ["You", "should", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", "."]
# ::lemmas ["you", "should", "do", "it", "."]
(r0 / recommend-01
      :ARG1 (d0 / do-02
            :ARG0 (y0 / you)
            :ARG1 (i0 / it)))

# ::snt You want to start in the room that is the largest to make sure you have the straightest start.
# ::tokens ["You", "want", "to", "start", "in", "the", "room", "that", "is", "the", "largest", "to", "make", "sure", "you", "have", "the", "straightest", "start", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "IN", "DT", "NN", "WDT", "VBZ", "DT", "JJS", "TO", "VB", "JJ", "PRP", "VBP", "DT", "JJS", "NN", "."]
# ::lemmas ["you", "want", "to", "start", "in", "the", "room", "that", "be", "the", "large", "to", "make", "sure", "you", "have", "the", "straight", "start", "."]
(w0 / want-01
      :ARG1 (s0 / start-01
            :ARG0 y0
            :ARG2 (r0 / room
                  :ARG0 y0
                  :ARG1-of (h1 / have-degree-91
                        :ARG2 (l0 / large)
                        :ARG3 (m0 / most)))
            :purpose (e0 / ensure-01
                  :ARG0 y0
                  :ARG1 h0))
      :ARG0 (y0 / you
            :ARG0-of (h0 / have-03
                  :ARG1 (s1 / start-01)
                  :ARG1 (s2 / start-01
                        :ARG1-of (s3 / straight-04)))))

# ::snt if you don't want to derail the meeting, but the key is to speak up.
# ::tokens ["if", "you", "do", "n't", "want", "to", "derail", "the", "meeting", ",", "but", "the", "key", "is", "to", "speak", "up", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "PRP", "VBP", "RB", "VB", "TO", "VB", "DT", "NN", ",", "CC", "DT", "NN", "VBZ", "TO", "VB", "RP", "."]
# ::lemmas ["if", "you", "do", "not", "want", "to", "derail", "the", "meeting", ",", "but", "the", "key", "be", "to", "speak", "up", "."]
(k0 / key-02
      :ARG1 (s0 / speak-out-03
            :ARG0 (y0 / you))
      :condition (w0 / want-01
            :ARG0 y0
            :ARG1 (d0 / derail-01
                  :ARG1 (m0 / meet-03))
            :polarity - ))

# ::snt Unfortunately the answer to your question is we simply do not know.
# ::tokens ["Unfortunately", "the", "answer", "to", "your", "question", "is", "we", "simply", "do", "not", "know", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "DT", "NN", "IN", "PRP$", "NN", "VBZ", "PRP", "RB", "VBP", "RB", "VB", "."]
# ::lemmas ["unfortunately", "the", "answer", "to", "your", "question", "be", "we", "simply", "do", "not", "know", "."]
(f0 / fortunate-01
      :ARG2 (a0 / answer-01
            :ARG1 (q0 / question-01
                  :ARG0 (y0 / you))
            :ARG2 (w0 / we)
            :ARG2 (k0 / know-01
                  :ARG0 w0
                  :mod (s0 / simple)
                  :polarity - ))
      :polarity - )

# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tokens ["You", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "is", "what", "you", "want", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBP", "TO", "VB", "PRP$", "NN", "IN", "WP", "PRP", "VBP", "VB", ",", "WDT", "VBZ", "WP", "PRP", "VBP", "."]
# ::lemmas ["you", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "be", "what", "you", "want", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (k0 / know-01
                  :ARG1 t0)
            :ARG0-of (w0 / want-01)
            :ARG0-of (a0 / answer-01))
      :mod (j0 / just)
      :ARG2 (b0 / base-02
            :ARG0 y0
            :ARG1 a0
            :ARG1 (t0 / thing)))

# ::snt Yes, there is a reason for it.
# ::tokens ["Yes", ",", "there", "is", "a", "reason", "for", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "EX", "VBZ", "DT", "NN", "IN", "PRP", "."]
# ::lemmas ["yes", ",", "there", "be", "a", "reason", "for", "it", "."]
(r0 / reason
      :purpose (i0 / it))

# ::snt The coffee simply picks up the aluminum from the pot, as the coffee is acidic.
# ::tokens ["The", "coffee", "simply", "picks", "up", "the", "aluminum", "from", "the", "pot", ",", "as", "the", "coffee", "is", "acidic", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "RB", "VBZ", "RP", "DT", "NN", "IN", "DT", "NN", ",", "IN", "DT", "NN", "VBZ", "JJ", "."]
# ::lemmas ["the", "coffee", "simply", "pick", "up", "the", "aluminum", "from", "the", "pot", ",", "as", "the", "coffee", "be", "acidic", "."]
(p0 / pick-up-04
      :ARG1 (a0 / aluminum)
      :ARG0 (c0 / coffee)
      :ARG1-of (s0 / simple-02)
      :ARG1-of (c1 / cause-01
            :ARG0 (a1 / addictive-02))
      :ARG2 (p1 / pot))

# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tokens ["You", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "is", "what", "you", "want", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBP", "TO", "VB", "PRP$", "NN", "IN", "WP", "PRP", "VBP", "VB", ",", "WDT", "VBZ", "WP", "PRP", "VBP", "."]
# ::lemmas ["you", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "be", "what", "you", "want", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (k0 / know-01
                  :ARG1 t0)
            :ARG0-of (w0 / want-01)
            :ARG0-of (a0 / answer-01))
      :mod (j0 / just)
      :ARG2 (b0 / base-02
            :ARG0 y0
            :ARG1 a0
            :ARG1 (t0 / thing)))

# ::snt Some of what you can do:
# ::tokens ["Some", "of", "what", "you", "can", "do", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "IN", "WP", "PRP", "MD", "VB", ":"]
# ::lemmas ["some", "of", "what", "you", "can", "do", ":"]
(t0 / thing
      :ARG1-of (i0 / include-91
            :ARG2 (s0 / some)
            :ARG2 (t1 / thing
                  :ARG1-of (d0 / do-02
                        :ARG0 (y0 / you)
                        :ARG1-of (p0 / possible-01)))))

# ::snt This is a problem that the professor has to deal with.
# ::tokens ["This", "is", "a", "problem", "that", "the", "professor", "has", "to", "deal", "with", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "DT", "NN", "IN", "DT", "NN", "VBZ", "TO", "VB", "IN", "."]
# ::lemmas ["this", "be", "a", "problem", "that", "the", "professor", "have", "to", "deal", "with", "."]
(p0 / problem
      :domain (d0 / deal-01
            :ARG0 (p1 / professor)
            :ARG2-of (o0 / obligate-01
                  :ARG1 p1))
      :domain (t0 / this))

# ::snt This doesn't answer your question, but:
# ::tokens ["This", "does", "n't", "answer", "your", "question", ",", "but", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "RB", "VB", "PRP$", "NN", ",", "CC", ":"]
# ::lemmas ["this", "do", "not", "answer", "your", "question", ",", "but", ":"]
(c0 / contrast-01
      :ARG2 (a0 / answer-01
            :ARG1 (q0 / question-01
                  :ARG0 (y0 / you))
            :ARG0 (t0 / this)
            :polarity - ))

# ::snt Yes, you have to file a tax return in Canada.
# ::tokens ["Yes", ",", "you", "have", "to", "file", "a", "tax", "return", "in", "Canada", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["UH", ",", "PRP", "VBP", "TO", "VB", "DT", "NN", "NN", "IN", "NNP", "."]
# ::lemmas ["yes", ",", "you", "have", "to", "file", "a", "tax", "return", "in", "Canada", "."]
(o0 / obligate-01
      :ARG1 (y0 / you)
      :ARG2 (f0 / file-01
            :ARG0 y0
            :ARG1 (r0 / return-06
                  :ARG0 (t0 / tax-01))
            :ARG4 (c0 / country
                  :name (n0 / name
                        :op1 "Canada" ))))

# ::snt Hope this is what you are looking for.
# ::tokens ["Hope", "this", "is", "what", "you", "are", "looking", "for", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "DT", "VBZ", "WP", "PRP", "VBP", "VBG", "IN", "."]
# ::lemmas ["hope", "this", "be", "what", "you", "be", "look", "for", "."]
(h0 / hope-01
      :ARG1 (l0 / look-01
            :ARG1 (y0 / you)
            :ARG1 (t0 / this)))

# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tokens ["You", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "is", "what", "you", "want", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBP", "TO", "VB", "PRP$", "NN", "IN", "WP", "PRP", "VBP", "VB", ",", "WDT", "VBZ", "WP", "PRP", "VBP", "."]
# ::lemmas ["you", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "be", "what", "you", "want", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (k0 / know-01
                  :ARG1 t0)
            :ARG0-of (w0 / want-01)
            :ARG0-of (a0 / answer-01))
      :mod (j0 / just)
      :ARG2 (b0 / base-02
            :ARG0 y0
            :ARG1 a0
            :ARG1 (t0 / thing)))

# ::snt If you are not sure how to do it, don't do it at all.
# ::tokens ["If", "you", "are", "not", "sure", "how", "to", "do", "it", ",", "do", "n't", "do", "it", "at", "all", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "PRP", "VBP", "RB", "JJ", "WRB", "TO", "VB", "PRP", ",", "VB", "RB", "VB", "PRP", "RB", "RB", "."]
# ::lemmas ["if", "you", "be", "not", "sure", "how", "to", "do", "it", ",", "do", "not", "do", "it", "at", "all", "."]
(d0 / do-02
      :ARG1 (i0 / it
            :ARG1-of (d1 / do-02
                  :manner t0))
      :ARG0 (y0 / you)
      :mod (a0 / at-all)
      :polarity - 
      :mode imperative 
      :condition (s0 / sure-02
            :ARG0 y0
            :ARG1 - 
            :ARG1 (t0 / thing)))

# ::snt Unfortunately the answer to your question is we simply do not know.
# ::tokens ["Unfortunately", "the", "answer", "to", "your", "question", "is", "we", "simply", "do", "not", "know", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "DT", "NN", "IN", "PRP$", "NN", "VBZ", "PRP", "RB", "VBP", "RB", "VB", "."]
# ::lemmas ["unfortunately", "the", "answer", "to", "your", "question", "be", "we", "simply", "do", "not", "know", "."]
(f0 / fortunate-01
      :ARG2 (a0 / answer-01
            :ARG1 (q0 / question-01
                  :ARG0 (y0 / you))
            :ARG2 (w0 / we)
            :ARG2 (k0 / know-01
                  :ARG0 w0
                  :mod (s0 / simple)
                  :polarity - ))
      :polarity - )

# ::snt If you are not sure how to do it, don't do it at all.
# ::tokens ["If", "you", "are", "not", "sure", "how", "to", "do", "it", ",", "do", "n't", "do", "it", "at", "all", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "PRP", "VBP", "RB", "JJ", "WRB", "TO", "VB", "PRP", ",", "VB", "RB", "VB", "PRP", "RB", "RB", "."]
# ::lemmas ["if", "you", "be", "not", "sure", "how", "to", "do", "it", ",", "do", "not", "do", "it", "at", "all", "."]
(d0 / do-02
      :ARG1 (i0 / it
            :ARG1-of (d1 / do-02
                  :manner t0))
      :ARG0 (y0 / you)
      :mod (a0 / at-all)
      :polarity - 
      :mode imperative 
      :condition (s0 / sure-02
            :ARG0 y0
            :ARG1 - 
            :ARG1 (t0 / thing)))

# ::snt It's not a good idea.
# ::tokens ["It", "'s", "not", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["it", "be", "not", "a", "good", "idea", "."]
(i0 / idea
      :ARG1-of (g0 / good-02
            :polarity - )
      :domain (i1 / it))

# ::snt There are a couple of options that you could consider:
# ::tokens ["There", "are", "a", "couple", "of", "options", "that", "you", "could", "consider", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "NN", "IN", "NNS", "IN", "PRP", "MD", "VB", ":"]
# ::lemmas ["there", "be", "a", "couple", "of", "option", "that", "you", "could", "consider", ":"]
(o0 / option
      :ARG1-of (c0 / consider-02
            :ARG0 (y0 / you)
            :ARG1-of (p0 / possible-01))
      :quant (c1 / couple))

# ::snt Vietnamese citizens need a visa to visit the USA.
# ::tokens ["Vietnamese", "citizens", "need", "a", "visa", "to", "visit", "the", "USA", "."]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["JJ", "NNS", "VBP", "DT", "NN", "TO", "VB", "DT", "NNP", "."]
# ::lemmas ["Vietnamese", "citizen", "need", "a", "visa", "to", "visit", "the", "USA", "."]
(n0 / need-01
      :ARG1 (v0 / visa)
      :ARG0 (c0 / citizen
            :mod (c1 / country
                  :name (n1 / name
                        :op1 "USA" )))
      :purpose (v1 / visit-01
            :ARG0 c0
            :ARG1 (c2 / country
                  :name (n2 / name
                        :op1 "Vietnam" ))))

# ::snt It depends on how it's used.
# ::tokens ["It", "depends", "on", "how", "it", "'s", "used", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WRB", "PRP", "VBZ", "VBN", "."]
# ::lemmas ["it", "depend", "on", "how", "it", "be", "use", "."]
(d0 / depend-01
      :ARG1 (t0 / thing
            :manner-of (u0 / use-01
                  :ARG1 i0))
      :ARG0 (i0 / it))

# ::snt This is a great one...
# ::tokens ["This", "is", "a", "great", "one", "..."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "DT", "JJ", "CD", "."]
# ::lemmas ["this", "be", "a", "great", "one", "..."]
(o0 / one
      :mod (g0 / great)
      :domain (t0 / this))

# ::snt The key is you have to find something that works for you, and your goals.
# ::tokens ["The", "key", "is", "you", "have", "to", "find", "something", "that", "works", "for", "you", ",", "and", "your", "goals", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "PRP", "VBP", "TO", "VB", "NN", "WDT", "VBZ", "IN", "PRP", ",", "CC", "PRP$", "NNS", "."]
# ::lemmas ["the", "key", "be", "you", "have", "to", "find", "something", "that", "work", "for", "you", ",", "and", "your", "goal", "."]
(k0 / key-02
      :ARG1 (o0 / obligate-01
            :ARG1 (f0 / find-01
                  :ARG0 y0
                  :ARG1 (s0 / something
                        :ARG0-of (w0 / work-09
                              :ARG2 a0)))
            :ARG1 (y0 / you
                  :poss-of (g0 / goal
                        :op2-of (a0 / and)))))

# ::snt It depends on what you want to do next, and where you want to do it.
# ::tokens ["It", "depends", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "TO", "VB", "RB", ",", "CC", "WRB", "PRP", "VBP", "TO", "VB", "PRP", "."]
# ::lemmas ["it", "depend", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (t0 / thing
                  :ARG1-of (d1 / do-02
                        :ARG0 (y0 / you)
                        :time (n0 / next)))
            :op2 (l0 / location
                  :location-of (w0 / want-01
                        :ARG1 d1
                        :ARG0 y0)))
      :ARG0 (i0 / it))

# ::snt If you haven't, you should.
# ::tokens ["If", "you", "have", "n't", ",", "you", "should", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "PRP", "VBP", "RB", ",", "PRP", "MD", "."]
# ::lemmas ["if", "you", "have", "not", ",", "you", "should", "."]
(r0 / recommend-01
      :ARG2 (h0 / have-03
            :ARG0 y0
            :polarity - )
      :ARG2 (y0 / you))

# ::snt Problem is, the system doesn't account for people who could care less about money, or title.
# ::tokens ["Problem", "is", ",", "the", "system", "does", "n't", "account", "for", "people", "who", "could", "care", "less", "about", "money", ",", "or", "title", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "VBZ", ",", "DT", "NN", "VBZ", "RB", "VB", "IN", "NNS", "WP", "MD", "VB", "RBR", "IN", "NN", ",", "CC", "NN", "."]
# ::lemmas ["problem", "be", ",", "the", "system", "do", "not", "account", "for", "people", "who", "could", "care", "less", "about", "money", ",", "or", "title", "."]
(p0 / problem
      :domain (a0 / account-01
            :ARG1 (p1 / person
                  :ARG0-of (c0 / care-01
                        :ARG1 (o0 / or
                              :op1 (m0 / money)
                              :op2 (t0 / title))
                        :ARG1-of (h0 / have-quant-91
                              :ARG3 (l0 / less))
                        :ARG1-of (p2 / possible-01)))
            :ARG0 (s0 / system)
            :polarity - ))

# ::snt In the first case, I think you don't need it.
# ::tokens ["In", "the", "first", "case", ",", "I", "think", "you", "do", "n't", "need", "it", "."]
# ::ner_tags ["O", "O", "ORDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "JJ", "NN", ",", "PRP", "VBP", "PRP", "VBP", "RB", "VB", "PRP", "."]
# ::lemmas ["in", "the", "first", "case", ",", "i", "think", "you", "do", "not", "need", "it", "."]
(t0 / think-01
      :ARG1 (n0 / need-01
            :ARG1 (i1 / it)
            :ARG0 (y0 / you)
            :polarity - )
      :ARG0 (i0 / i)
      :prep-in (c0 / case-04
            :ord (o0 / ordinal-entity
                  :value 1 )))

# ::snt Yes, it is possible to publish a paper on model analysis.
# ::tokens ["Yes", ",", "it", "is", "possible", "to", "publish", "a", "paper", "on", "model", "analysis", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "VBZ", "JJ", "TO", "VB", "DT", "NN", "IN", "NN", "NN", "."]
# ::lemmas ["yes", ",", "it", "be", "possible", "to", "publish", "a", "paper", "on", "model", "analysis", "."]
(p0 / possible-01
      :ARG1 (p1 / publish-01
            :ARG1 (p2 / paper
                  :topic (a0 / analyze-01
                        :ARG1 (m0 / model)))))

# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tokens ["You", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "is", "what", "you", "want", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBP", "TO", "VB", "PRP$", "NN", "IN", "WP", "PRP", "VBP", "VB", ",", "WDT", "VBZ", "WP", "PRP", "VBP", "."]
# ::lemmas ["you", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "be", "what", "you", "want", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (k0 / know-01
                  :ARG1 t0)
            :ARG0-of (w0 / want-01)
            :ARG0-of (a0 / answer-01))
      :mod (j0 / just)
      :ARG2 (b0 / base-02
            :ARG0 y0
            :ARG1 a0
            :ARG1 (t0 / thing)))

# ::snt Yes, there is a rule against this.
# ::tokens ["Yes", ",", "there", "is", "a", "rule", "against", "this", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "EX", "VBZ", "DT", "NN", "IN", "DT", "."]
# ::lemmas ["yes", ",", "there", "be", "a", "rule", "against", "this", "."]
(r0 / rule-01
      :ARG3 (t0 / this))

# ::snt It depends on what they are.
# ::tokens ["It", "depends", "on", "what", "they", "are", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "."]
# ::lemmas ["it", "depend", "on", "what", "they", "be", "."]
(d0 / depend-01
      :ARG1 (t0 / thing
            :domain (t1 / they))
      :ARG0 (i0 / it))

# ::snt You don't need to know everything.
# ::tokens ["You", "do", "n't", "need", "to", "know", "everything", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "NN", "."]
# ::lemmas ["you", "do", "not", "need", "to", "know", "everything", "."]
(n0 / need-01
      :ARG1 (k0 / know-01
            :ARG0 y0
            :ARG1 (e0 / everything))
      :ARG0 (y0 / you)
      :polarity - )

# ::snt I think it's just a habit.
# ::tokens ["I", "think", "it", "'s", "just", "a", "habit", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "PRP", "VBZ", "RB", "DT", "NN", "."]
# ::lemmas ["i", "think", "it", "be", "just", "a", "habit", "."]
(t0 / think-01
      :ARG1 (h0 / habit
            :mod (j0 / just)
            :domain (i1 / it))
      :ARG0 (i0 / i))

# ::snt It depends on what you want to do next, and where you want to do it.
# ::tokens ["It", "depends", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "TO", "VB", "RB", ",", "CC", "WRB", "PRP", "VBP", "TO", "VB", "PRP", "."]
# ::lemmas ["it", "depend", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (t0 / thing
                  :ARG1-of (d1 / do-02
                        :ARG0 (y0 / you)
                        :time (n0 / next)))
            :op2 (l0 / location
                  :location-of (w0 / want-01
                        :ARG1 d1
                        :ARG0 y0)))
      :ARG0 (i0 / it))

# ::snt You should do it.
# ::tokens ["You", "should", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", "."]
# ::lemmas ["you", "should", "do", "it", "."]
(r0 / recommend-01
      :ARG1 (d0 / do-02
            :ARG0 (y0 / you)
            :ARG1 (i0 / it)))

# ::snt The answer to this and all such similar questions is in two stages:
# ::tokens ["The", "answer", "to", "this", "and", "all", "such", "similar", "questions", "is", "in", "two", "stages", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "CC", "DT", "JJ", "JJ", "NNS", "VBZ", "IN", "CD", "NNS", ":"]
# ::lemmas ["the", "answer", "to", "this", "and", "all", "such", "similar", "question", "be", "in", "two", "stage", ":"]
(a0 / answer-01
      :ARG2 (a1 / and
            :op1 (t0 / this)
            :op2 (q0 / question-01
                  :mod (a2 / all)
                  :ARG1-of (r0 / resemble-01
                        :mod (s1 / such))))
      :ARG2 (s0 / stage
            :quant 2 ))

# ::snt It depends on what you want to do next, and where you want to do it.
# ::tokens ["It", "depends", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "TO", "VB", "RB", ",", "CC", "WRB", "PRP", "VBP", "TO", "VB", "PRP", "."]
# ::lemmas ["it", "depend", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (t0 / thing
                  :ARG1-of (d1 / do-02
                        :ARG0 (y0 / you)
                        :time (n0 / next)))
            :op2 (l0 / location
                  :location-of (w0 / want-01
                        :ARG1 d1
                        :ARG0 y0)))
      :ARG0 (i0 / it))

# ::snt It's not a good idea.
# ::tokens ["It", "'s", "not", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["it", "be", "not", "a", "good", "idea", "."]
(i0 / idea
      :ARG1-of (g0 / good-02
            :polarity - )
      :domain (i1 / it))

# ::snt Yes, there is at least one to my knowledge.
# ::tokens ["Yes", ",", "there", "is", "at", "least", "one", "to", "my", "knowledge", "."]
# ::ner_tags ["O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "I", "I", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "EX", "VBZ", "RB", "JJS", "CD", "IN", "PRP$", "NN", "."]
# ::lemmas ["yes", ",", "there", "be", "at", "least", "one", "to", "my", "knowledge", "."]
(k0 / know-01
      :ARG1 (a0 / at-least
            :op1 1 )
      :ARG0 (i0 / i))

# ::snt "My answer to your question is ""Probably Not""."
# ::tokens ["\"", "My", "answer", "to", "your", "question", "is", "\"", "\"", "Probably", "Not", "\"", "\"", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "WORK_OF_ART", "WORK_OF_ART", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "O", "O", "O", "O"]
# ::pos_tags ["``", "PRP$", "NN", "IN", "PRP$", "NN", "VBZ", "``", "``", "RB", "RB", "''", "''", ".", "''"]
# ::lemmas ["\"", "my", "answer", "to", "your", "question", "be", "\"", "\"", "Probably", "Not", "\"", "\"", ".", "\""]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 (y0 / you))
      :ARG0 (i0 / i)
      :ARG2 (h0 / have-polarity-91
            :mod (p0 / probable)
            :ARG2 - ))

# ::snt The key thing to realize here is that it's not your job to make people do their work.
# ::tokens ["The", "key", "thing", "to", "realize", "here", "is", "that", "it", "'s", "not", "your", "job", "to", "make", "people", "do", "their", "work", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "TO", "VB", "RB", "VBZ", "IN", "PRP", "VBZ", "RB", "PRP$", "NN", "TO", "VB", "NNS", "VB", "PRP$", "NN", "."]
# ::lemmas ["the", "key", "thing", "to", "realize", "here", "be", "that", "it", "be", "not", "your", "job", "to", "make", "people", "do", "their", "work", "."]
(k0 / key-02
      :ARG1 (r0 / realize-01
            :location (h0 / here))
      :ARG1 (j0 / job
            :domain (m0 / make-02
                  :ARG0 y0
                  :ARG1 (d0 / do-02
                        :ARG1 (w0 / work-01
                              :ARG0 p0)
                        :ARG0 (p0 / person)))
            :poss (y0 / you)
            :polarity - ))

# ::snt There are two possible causes for this:
# ::tokens ["There", "are", "two", "possible", "causes", "for", "this", ":"]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "CD", "JJ", "NNS", "IN", "DT", ":"]
# ::lemmas ["there", "be", "two", "possible", "cause", "for", "this", ":"]
(c0 / cause-01
      :ARG1 (t0 / this)
      :ARG0 (p0 / possible-01)
      :quant 2 )

# ::snt There's also what the string is made of.
# ::tokens ["There", "'s", "also", "what", "the", "string", "is", "made", "of", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBZ", "RB", "WP", "DT", "NN", "VBZ", "VBN", "IN", "."]
# ::lemmas ["there", "be", "also", "what", "the", "string", "be", "make", "of", "."]
(m0 / make-01
      :ARG1 (s0 / string)
      :mod (a0 / also))

# ::snt You also imply you may not be paid if they cannot place you with a client.
# ::tokens ["You", "also", "imply", "you", "may", "not", "be", "paid", "if", "they", "can", "not", "place", "you", "with", "a", "client", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBP", "PRP", "MD", "RB", "VB", "VBN", "IN", "PRP", "MD", "RB", "VB", "PRP", "IN", "DT", "NN", "."]
# ::lemmas ["you", "also", "imply", "you", "may", "not", "be", "pay", "if", "they", "can", "not", "place", "you", "with", "a", "client", "."]
(i0 / imply-01
      :ARG1 (p0 / possible-01
            :ARG1 (p1 / pay-01
                  :condition (p3 / possible-01
                        :ARG1 p2
                        :polarity - ))
            :polarity - 
            :condition (p2 / place-01
                  :ARG0 (t0 / they)
                  :ARG2 (p4 / person)))
      :ARG0 (y0 / you
            :ARG1-of (h0 / have-rel-role-91
                  :ARG0 t0
                  :ARG0 p4
                  :ARG2 (c0 / client)))
      :mod (a0 / also))

# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tokens ["You", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "is", "what", "you", "want", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBP", "TO", "VB", "PRP$", "NN", "IN", "WP", "PRP", "VBP", "VB", ",", "WDT", "VBZ", "WP", "PRP", "VBP", "."]
# ::lemmas ["you", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "be", "what", "you", "want", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (k0 / know-01
                  :ARG1 t0)
            :ARG0-of (w0 / want-01)
            :ARG0-of (a0 / answer-01))
      :mod (j0 / just)
      :ARG2 (b0 / base-02
            :ARG0 y0
            :ARG1 a0
            :ARG1 (t0 / thing)))

# ::snt You need to read a lot to know what you like and what you don't.
# ::tokens ["You", "need", "to", "read", "a", "lot", "to", "know", "what", "you", "like", "and", "what", "you", "do", "n't", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "DT", "NN", "TO", "VB", "WP", "PRP", "VBP", "CC", "WP", "PRP", "VBP", "RB", "."]
# ::lemmas ["you", "need", "to", "read", "a", "lot", "to", "know", "what", "you", "like", "and", "what", "you", "do", "not", "."]
(n0 / need-01
      :ARG1 (r0 / read-01
            :ARG0 y0
            :purpose (k0 / know-01
                  :ARG0 y0
                  :ARG1 (a0 / and
                        :op1 d0
                        :op2 t0
                        :op2 (t1 / thing)))
            :quant (l0 / lot))
      :ARG0 (y0 / you
            :ARG0-of (d0 / dislike-01)
            :ARG0-of (d1 / do-02
                  :ARG1 (t0 / thing)
                  :polarity - )))

# ::snt It's not a good idea.
# ::tokens ["It", "'s", "not", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["it", "be", "not", "a", "good", "idea", "."]
(i0 / idea
      :ARG1-of (g0 / good-02
            :polarity - )
      :domain (i1 / it))

# ::snt It's pretty much up to you.
# ::tokens ["It", "'s", "pretty", "much", "up", "to", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "RB", "IN", "IN", "PRP", "."]
# ::lemmas ["it", "be", "pretty", "much", "up", "to", "you", "."]
(d0 / depend-01
      :ARG1 (y0 / you)
      :ARG0 (i0 / it)
      :degree (p0 / pretty-much))

# ::snt Work into it slowly.
# ::tokens ["Work", "into", "it", "slowly", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "IN", "PRP", "RB", "."]
# ::lemmas ["work", "into", "it", "slowly", "."]
(w0 / work-01
      :ARG1 (i0 / it)
      :ARG0 (y0 / you)
      :ARG1-of (s0 / slow-05)
      :mode imperative )

# ::snt There are two ways to start with: plunging and dripping.
# ::tokens ["There", "are", "two", "ways", "to", "start", "with", ":", "plunging", "and", "dripping", "."]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "CD", "NNS", "TO", "VB", "IN", ":", "NN", "CC", "NN", "."]
# ::lemmas ["there", "be", "two", "way", "to", "start", "with", ":", "plunging", "and", "dripping", "."]
(w0 / way
      :quant (m0 / mean-01
            :ARG2 (a0 / and
                  :op1 (p0 / plunging)
                  :op2 (d0 / dripping)))
      :quant 2 
      :domain (s0 / start-01))

# ::snt The answers so far are already good, but I'd like to add a map for Switzerland:
# ::tokens ["The", "answers", "so", "far", "are", "already", "good", ",", "but", "I", "'d", "like", "to", "add", "a", "map", "for", "Switzerland", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["DT", "NNS", "RB", "RB", "VBP", "RB", "JJ", ",", "CC", "PRP", "MD", "VB", "TO", "VB", "DT", "NN", "IN", "NNP", ":"]
# ::lemmas ["the", "answer", "so", "far", "be", "already", "good", ",", "but", "i", "'d", "like", "to", "add", "a", "map", "for", "Switzerland", ":"]
(h0 / have-concession-91
      :ARG1 (g0 / good-02
            :ARG1 (a0 / answer-01
                  :time (s0 / so-far))
            :time (a1 / already))
      :ARG2 (l0 / like-02
            :ARG1 (a2 / add-02
                  :ARG0 i0
                  :ARG1 (m0 / map
                        :beneficiary (c0 / country
                              :name (n0 / name
                                    :op1 "Switzerland" ))))
            :ARG0 (i0 / i)))

# ::snt There is no maximum.
# ::tokens ["There", "is", "no", "maximum", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBZ", "DT", "NN", "."]
# ::lemmas ["there", "be", "no", "maximum", "."]
(m0 / maximum
      :polarity - )

# ::snt You need to read a lot to know what you like and what you don't.
# ::tokens ["You", "need", "to", "read", "a", "lot", "to", "know", "what", "you", "like", "and", "what", "you", "do", "n't", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "DT", "NN", "TO", "VB", "WP", "PRP", "VBP", "CC", "WP", "PRP", "VBP", "RB", "."]
# ::lemmas ["you", "need", "to", "read", "a", "lot", "to", "know", "what", "you", "like", "and", "what", "you", "do", "not", "."]
(n0 / need-01
      :ARG1 (r0 / read-01
            :ARG0 y0
            :purpose (k0 / know-01
                  :ARG0 y0
                  :ARG1 (a0 / and
                        :op1 d0
                        :op2 t0
                        :op2 (t1 / thing)))
            :quant (l0 / lot))
      :ARG0 (y0 / you
            :ARG0-of (d0 / dislike-01)
            :ARG0-of (d1 / do-02
                  :ARG1 (t0 / thing)
                  :polarity - )))

# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tokens ["You", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "is", "what", "you", "want", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBP", "TO", "VB", "PRP$", "NN", "IN", "WP", "PRP", "VBP", "VB", ",", "WDT", "VBZ", "WP", "PRP", "VBP", "."]
# ::lemmas ["you", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "be", "what", "you", "want", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (k0 / know-01
                  :ARG1 t0)
            :ARG0-of (w0 / want-01)
            :ARG0-of (a0 / answer-01))
      :mod (j0 / just)
      :ARG2 (b0 / base-02
            :ARG0 y0
            :ARG1 a0
            :ARG1 (t0 / thing)))

# ::snt No it does not affect your ratings.
# ::tokens ["No", "it", "does", "not", "affect", "your", "ratings", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", "PRP", "VBZ", "RB", "VB", "PRP$", "NNS", "."]
# ::lemmas ["no", "it", "do", "not", "affect", "your", "rating", "."]
(a0 / affect-01
      :ARG1 (r0 / rate-01
            :ARG1 (y0 / you))
      :ARG0 (i0 / it)
      :polarity - )

# ::snt The best thing you can do is to know your stuff.
# ::tokens ["The", "best", "thing", "you", "can", "do", "is", "to", "know", "your", "stuff", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJS", "NN", "PRP", "MD", "VB", "VBZ", "TO", "VB", "PRP$", "NN", "."]
# ::lemmas ["the", "good", "thing", "you", "can", "do", "be", "to", "know", "your", "stuff", "."]
(t0 / thing
      :ARG1-of (g0 / good-02)
      :ARG1-of (d0 / do-02
            :ARG0 (y0 / you)
            :ARG1-of (p0 / possible-01))
      :ARG1-of (k0 / know-01
            :ARG2 g0
            :ARG0 y0
            :ARG1 (s0 / stuff
                  :poss y0))
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most)))

# ::snt You don't have to know.
# ::tokens ["You", "do", "n't", "have", "to", "know", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "."]
# ::lemmas ["you", "do", "not", "have", "to", "know", "."]
(o0 / obligate-01
      :ARG1 (y0 / you)
      :ARG2 (k0 / know-01
            :ARG0 y0)
      :polarity - )

# ::snt You need to read a lot to know what you like and what you don't.
# ::tokens ["You", "need", "to", "read", "a", "lot", "to", "know", "what", "you", "like", "and", "what", "you", "do", "n't", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "DT", "NN", "TO", "VB", "WP", "PRP", "VBP", "CC", "WP", "PRP", "VBP", "RB", "."]
# ::lemmas ["you", "need", "to", "read", "a", "lot", "to", "know", "what", "you", "like", "and", "what", "you", "do", "not", "."]
(n0 / need-01
      :ARG1 (r0 / read-01
            :ARG0 y0
            :purpose (k0 / know-01
                  :ARG0 y0
                  :ARG1 (a0 / and
                        :op1 d0
                        :op2 t0
                        :op2 (t1 / thing)))
            :quant (l0 / lot))
      :ARG0 (y0 / you
            :ARG0-of (d0 / dislike-01)
            :ARG0-of (d1 / do-02
                  :ARG1 (t0 / thing)
                  :polarity - )))

# ::snt The best thing you can do is to know your stuff.
# ::tokens ["The", "best", "thing", "you", "can", "do", "is", "to", "know", "your", "stuff", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJS", "NN", "PRP", "MD", "VB", "VBZ", "TO", "VB", "PRP$", "NN", "."]
# ::lemmas ["the", "good", "thing", "you", "can", "do", "be", "to", "know", "your", "stuff", "."]
(t0 / thing
      :ARG1-of (g0 / good-02)
      :ARG1-of (d0 / do-02
            :ARG0 (y0 / you)
            :ARG1-of (p0 / possible-01))
      :ARG1-of (k0 / know-01
            :ARG2 g0
            :ARG0 y0
            :ARG1 (s0 / stuff
                  :poss y0))
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most)))

# ::snt You PROBABLY don't have any chance at the moment.
# ::tokens ["You", "PROBABLY", "do", "n't", "have", "any", "chance", "at", "the", "moment", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "NNP", "VBP", "RB", "VB", "DT", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["you", "PROBABLY", "do", "not", "have", "any", "chance", "at", "the", "moment", "."]
(h0 / have-03
      :ARG1 (c0 / chance-02
            :ARG0 y0
            :mod (a0 / any))
      :ARG0 (y0 / you)
      :mod - 
      :time (m0 / moment)
      :manner (p0 / probable))

# ::snt You should do it.
# ::tokens ["You", "should", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", "."]
# ::lemmas ["you", "should", "do", "it", "."]
(r0 / recommend-01
      :ARG1 (d0 / do-02
            :ARG0 (y0 / you)
            :ARG1 (i0 / it)))

# ::snt What kind of insulation is it?
# ::tokens ["What", "kind", "of", "insulation", "is", "it", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "IN", "NN", "VBZ", "PRP", "."]
# ::lemmas ["what", "kind", "of", "insulation", "be", "it", "?"]
(i0 / insulation
      :mod (k0 / kind
            :mod (a0 / amr-unknown)
            :mod (i1 / it)))

# ::snt It's all in her head.
# ::tokens ["It", "'s", "all", "in", "her", "head", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "DT", "IN", "PRP$", "NN", "."]
# ::lemmas ["it", "be", "all", "in", "her", "head", "."]
(b0 / be-located-at-91
      :ARG1 (i0 / it
            :mod (a0 / all))
      :ARG2 (h0 / head
            :part-of (s0 / she)))

# ::snt You need to read a lot to know what you like and what you don't.
# ::tokens ["You", "need", "to", "read", "a", "lot", "to", "know", "what", "you", "like", "and", "what", "you", "do", "n't", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "DT", "NN", "TO", "VB", "WP", "PRP", "VBP", "CC", "WP", "PRP", "VBP", "RB", "."]
# ::lemmas ["you", "need", "to", "read", "a", "lot", "to", "know", "what", "you", "like", "and", "what", "you", "do", "not", "."]
(n0 / need-01
      :ARG1 (r0 / read-01
            :ARG0 y0
            :purpose (k0 / know-01
                  :ARG0 y0
                  :ARG1 (a0 / and
                        :op1 d0
                        :op2 t0
                        :op2 (t1 / thing)))
            :quant (l0 / lot))
      :ARG0 (y0 / you
            :ARG0-of (d0 / dislike-01)
            :ARG0-of (d1 / do-02
                  :ARG1 (t0 / thing)
                  :polarity - )))

# ::snt You will want to clean the area first.
# ::tokens ["You", "will", "want", "to", "clean", "the", "area", "first", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "TO", "VB", "DT", "NN", "RB", "."]
# ::lemmas ["you", "will", "want", "to", "clean", "the", "area", "first", "."]
(w0 / want-01
      :ARG1 (c0 / clean-up-02
            :ARG0 y0
            :ARG1 (a0 / area)
            :ord (o0 / ordinal-entity
                  :value 1 ))
      :ARG0 (y0 / you))

# ::snt You just have to base your answer on what you do know, which is what you want.
# ::tokens ["You", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "is", "what", "you", "want", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBP", "TO", "VB", "PRP$", "NN", "IN", "WP", "PRP", "VBP", "VB", ",", "WDT", "VBZ", "WP", "PRP", "VBP", "."]
# ::lemmas ["you", "just", "have", "to", "base", "your", "answer", "on", "what", "you", "do", "know", ",", "which", "be", "what", "you", "want", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (k0 / know-01
                  :ARG1 t0)
            :ARG0-of (w0 / want-01)
            :ARG0-of (a0 / answer-01))
      :mod (j0 / just)
      :ARG2 (b0 / base-02
            :ARG0 y0
            :ARG1 a0
            :ARG1 (t0 / thing)))

# ::snt What is your lid made of?
# ::tokens ["What", "is", "your", "lid", "made", "of", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "PRP$", "NN", "VBN", "IN", "."]
# ::lemmas ["what", "be", "your", "lid", "make", "of", "?"]
(m0 / make-01
      :ARG1 (l0 / lid
            :poss (y0 / you))
      :ARG2 (a0 / amr-unknown))

# ::snt You don't need any visa.
# ::tokens ["You", "do", "n't", "need", "any", "visa", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "DT", "NN", "."]
# ::lemmas ["you", "do", "not", "need", "any", "visa", "."]
(n0 / need-01
      :ARG1 (v0 / visa
            :mod (a0 / any))
      :ARG0 (y0 / you)
      :polarity - )

# ::snt The answer to both questions is: Yes.
# ::tokens ["The", "answer", "to", "both", "questions", "is", ":", "Yes", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NNS", "VBZ", ":", "UH", "."]
# ::lemmas ["the", "answer", "to", "both", "question", "be", ":", "yes", "."]
(a0 / answer-01
      :ARG2 (y0 / yes)
      :ARG2 (q0 / question-01
            :mod (b0 / both)))

# ::snt You don't have to know.
# ::tokens ["You", "do", "n't", "have", "to", "know", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "."]
# ::lemmas ["you", "do", "not", "have", "to", "know", "."]
(o0 / obligate-01
      :ARG1 (y0 / you)
      :ARG2 (k0 / know-01
            :ARG0 y0)
      :polarity - )

# ::snt There are a few things I think you should do.
# ::tokens ["There", "are", "a", "few", "things", "I", "think", "you", "should", "do", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "JJ", "NNS", "PRP", "VBP", "PRP", "MD", "VB", "."]
# ::lemmas ["there", "be", "a", "few", "thing", "i", "think", "you", "should", "do", "."]
(t0 / think-01
      :ARG1 (r0 / recommend-01
            :ARG1 (d0 / do-02
                  :ARG0 y0
                  :ARG1 (t1 / thing
                        :quant (f0 / few)))
            :ARG2 (y0 / you))
      :ARG0 (i0 / i))

# ::snt Yes, there is a chemical difference.
# ::tokens ["Yes", ",", "there", "is", "a", "chemical", "difference", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "EX", "VBZ", "DT", "NN", "NN", "."]
# ::lemmas ["yes", ",", "there", "be", "a", "chemical", "difference", "."]
(d0 / differ-02
      :mod (c0 / chemical))

# ::snt They can be out of level by a bit, but flat is important.
# ::tokens ["They", "can", "be", "out", "of", "level", "by", "a", "bit", ",", "but", "flat", "is", "important", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "IN", "IN", "NN", "IN", "DT", "NN", ",", "CC", "JJ", "VBZ", "JJ", "."]
# ::lemmas ["they", "can", "be", "out", "of", "level", "by", "a", "bit", ",", "but", "flat", "be", "important", "."]
(h0 / have-concession-91
      :ARG1 (i0 / important-01
            :ARG1 (f0 / flat-06))
      :ARG2 (p0 / possible-01
            :ARG1 (o0 / out-06
                  :ARG1 f0
                  :ARG1 (t0 / they)
                  :ARG2 (l0 / level)
                  :degree (b0 / bit))))

# ::snt No, you do not NEED a bread machine.
# ::tokens ["No", ",", "you", "do", "not", "NEED", "a", "bread", "machine", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "VBP", "RB", "VB", "DT", "NN", "NN", "."]
# ::lemmas ["no", ",", "you", "do", "not", "need", "a", "bread", "machine", "."]
(n0 / need-01
      :ARG1 (m0 / machine
            :mod (b0 / bread))
      :ARG0 (y0 / you)
      :polarity - )

# ::snt You don't have to know.
# ::tokens ["You", "do", "n't", "have", "to", "know", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "."]
# ::lemmas ["you", "do", "not", "have", "to", "know", "."]
(o0 / obligate-01
      :ARG1 (y0 / you)
      :ARG2 (k0 / know-01
            :ARG0 y0)
      :polarity - )

# ::snt It is more deciding what you should do and what you should get others to do.
# ::tokens ["It", "is", "more", "deciding", "what", "you", "should", "do", "and", "what", "you", "should", "get", "others", "to", "do", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RBR", "VBG", "WP", "PRP", "MD", "VB", "CC", "WP", "PRP", "MD", "VB", "NNS", "TO", "VB", "."]
# ::lemmas ["it", "be", "more", "decide", "what", "you", "should", "do", "and", "what", "you", "should", "get", "other", "to", "do", "."]
(d0 / decide-01
      :ARG1 (a0 / and
            :op1 (t0 / thing)
            :op2 (t1 / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 (o0 / other))))
      :ARG0 (y0 / you
            :ARG0-of (d1 / do-02)
            :ARG0-of (r0 / recommend-01
                  :ARG1 t1))
      :mod (m0 / more))

# ::snt You are on the right path.
# ::tokens ["You", "are", "on", "the", "right", "path", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["you", "be", "on", "the", "right", "path", "."]
(b0 / be-located-at-91
      :ARG1 (y0 / you)
      :ARG2 (p0 / path
            :ARG1-of (r0 / right-06)))

# ::snt You don't need any visa.
# ::tokens ["You", "do", "n't", "need", "any", "visa", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "DT", "NN", "."]
# ::lemmas ["you", "do", "not", "need", "any", "visa", "."]
(n0 / need-01
      :ARG1 (v0 / visa
            :mod (a0 / any))
      :ARG0 (y0 / you)
      :polarity - )

# ::snt You have to decide what you want to get out of this.
# ::tokens ["You", "have", "to", "decide", "what", "you", "want", "to", "get", "out", "of", "this", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "WP", "PRP", "VBP", "TO", "VB", "IN", "IN", "DT", "."]
# ::lemmas ["you", "have", "to", "decide", "what", "you", "want", "to", "get", "out", "of", "this", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (w0 / want-01
                  :ARG1 g0)
            :ARG0-of (g0 / get-05
                  :ARG1 t0
                  :ARG2 (t1 / this)))
      :ARG2 (d0 / decide-01
            :ARG0 y0
            :ARG1 (t0 / thing)))

# ::snt It is impossible to answer this question without a form check.
# ::tokens ["It", "is", "impossible", "to", "answer", "this", "question", "without", "a", "form", "check", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "JJ", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["it", "be", "impossible", "to", "answer", "this", "question", "without", "a", "form", "check", "."]
(p0 / possible-01
      :ARG1 (a0 / answer-01
            :ARG1 (c0 / check-01
                  :ARG1 (f0 / form)
                  :polarity - )
            :ARG1 (q0 / question-01
                  :mod (t0 / this)))
      :polarity - )

# ::snt Microwave would be your best bet.
# ::tokens ["Microwave", "would", "be", "your", "best", "bet", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "MD", "VB", "PRP$", "JJS", "NN", "."]
# ::lemmas ["Microwave", "would", "be", "your", "good", "bet", "."]
(b0 / bet-01
      :ARG0 (M0 / Microwave)
      :ARG1-of (y0 / you)
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most)))

# ::snt Yes, there is a reason to not do what you propose.
# ::tokens ["Yes", ",", "there", "is", "a", "reason", "to", "not", "do", "what", "you", "propose", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "EX", "VBZ", "DT", "NN", "TO", "RB", "VB", "WP", "PRP", "VBP", "."]
# ::lemmas ["yes", ",", "there", "be", "a", "reason", "to", "not", "do", "what", "you", "propose", "."]
(r0 / reason
      :ARG0-of (c0 / cause-01
            :ARG1 (d0 / do-02
                  :ARG1 (t0 / thing
                        :ARG1-of (p0 / propose-01
                              :ARG0 (y0 / you)))
                  :polarity - )))

# ::snt You don't have to worry.
# ::tokens ["You", "do", "n't", "have", "to", "worry", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "."]
# ::lemmas ["you", "do", "not", "have", "to", "worry", "."]
(o0 / obligate-01
      :ARG1 (y0 / you)
      :ARG2 (w0 / worry-02
            :ARG0 y0)
      :polarity - )

# ::snt There is no test that can tell you if it is sealed or not.
# ::tokens ["There", "is", "no", "test", "that", "can", "tell", "you", "if", "it", "is", "sealed", "or", "not", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBZ", "DT", "NN", "WDT", "MD", "VB", "PRP", "IN", "PRP", "VBZ", "VBN", "CC", "RB", "."]
# ::lemmas ["there", "be", "no", "test", "that", "can", "tell", "you", "if", "it", "be", "seal", "or", "not", "."]
(t0 / test-01
      :polarity - 
      :ARG2 (p0 / possible-01
            :ARG1 (t1 / tell-01
                  :ARG1 (t2 / truth-value
                        :polarity-of (o0 / or
                              :op1 (s0 / seal-01
                                    :ARG1 (i0 / it))
                              :op2 (s1 / seal-01
                                    :ARG1 i0
                                    :polarity - )))
                  :ARG2 (y0 / you))))

# ::snt Yes, you should make a résumé.
# ::tokens ["Yes", ",", "you", "should", "make", "a", "r\u00e9sum\u00e9", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "MD", "VB", "DT", "NN", "."]
# ::lemmas ["yes", ",", "you", "should", "make", "a", "r\u00e9sum\u00e9", "."]
(r0 / recommend-01
      :ARG1 (m0 / make-01
            :ARG1 (r1 / résumé)
            :ARG0 (y0 / you)))

# ::snt You shouldn't feel any obligation at all.
# ::tokens ["You", "should", "n't", "feel", "any", "obligation", "at", "all", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "RB", "VB", "DT", "NN", "RB", "RB", "."]
# ::lemmas ["you", "should", "not", "feel", "any", "obligation", "at", "all", "."]
(r0 / recommend-01
      :ARG1 (f0 / feel-01
            :ARG1 (o0 / obligate-01
                  :ARG1 y0
                  :mod (a1 / any))
            :ARG0 (y0 / you)
            :mod (a0 / at-all)
            :polarity - ))

