# ::snt sent2
# ::tokens ["sent2"]
# ::ner_tags ["O"]
# ::ner_iob ["O"]
# ::pos_tags ["NNP"]
# ::lemmas ["sent2"]
(p0 / person
      :name (n0 / name
            :op1 "sent2" ))

# ::snt Should I cash out my IRA to pay my student loans?
# ::tokens ["Should", "I", "cash", "out", "my", "IRA", "to", "pay", "my", "student", "loans", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "RP", "PRP$", "NNP", "TO", "VB", "PRP$", "NN", "NNS", "."]
# ::lemmas ["should", "i", "cash", "out", "my", "IRA", "to", "pay", "my", "student", "loan", "?"]
(r0 / recommend-01
      :ARG1 (l0 / lose-out-06
            :ARG1 (p0 / product
                  :poss i0
                  :name (n0 / name
                        :op1 "IRA" ))
            :ARG0 (i0 / i
                  :ARG2-of (l1 / loan-01
                        :ARG2 (p2 / person
                              :ARG0-of (s0 / study-01))))
            :purpose (p1 / pay-01
                  :ARG0 i0
                  :ARG3 l1))
      :ARG2 (a0 / amr-unknown))

# ::snt How do I prevent an egg cracking while hard boiling it?
# ::tokens ["How", "do", "I", "prevent", "an", "egg", "cracking", "while", "hard", "boiling", "it", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "VBG", "IN", "RB", "VBG", "PRP", "."]
# ::lemmas ["how", "do", "i", "prevent", "an", "egg", "crack", "while", "hard", "boil", "it", "?"]
(p0 / prevent-01
      :ARG1 (c0 / crack-02
            :ARG1 (e0 / egg)
            :time (b0 / boil-01
                  :ARG1 e0
                  :ARG1-of (h0 / hard-02)))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt How do I remove mildew from a tent?
# ::tokens ["How", "do", "I", "remove", "mildew", "from", "a", "tent", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["how", "do", "i", "remove", "mildew", "from", "a", "tent", "?"]
(r0 / remove-01
      :ARG1 (m0 / mildew)
      :ARG0 (i0 / i)
      :ARG2 (t0 / tent)
      :manner (a0 / amr-unknown))

# ::snt What could be wrong with my A/C unit?
# ::tokens ["What", "could", "be", "wrong", "with", "my", "A", "/", "C", "unit", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "VB", "JJ", "IN", "PRP$", "NNP", "SYM", "NN", "NN", "."]
# ::lemmas ["what", "could", "be", "wrong", "with", "my", "A", "/", "c", "unit", "?"]
(p0 / possible-01
      :ARG1 (w0 / wrong-02
            :ARG1 (a0 / amr-unknown)
            :ARG2 (u0 / unit
                  :mod (i0 / i)
                  :mod (a1 / air-conditioning))))

# ::snt What is this language?
# ::tokens ["What", "is", "this", "language", "?"]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "."]
# ::lemmas ["what", "be", "this", "language", "?"]
(l0 / language
      :mod (t0 / this)
      :domain (a0 / amr-unknown))

# ::snt What can I realistically do to raise my credit score?
# ::tokens ["What", "can", "I", "realistically", "do", "to", "raise", "my", "credit", "score", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "PRP", "RB", "VB", "TO", "VB", "PRP$", "NN", "NN", "."]
# ::lemmas ["what", "can", "i", "realistically", "do", "to", "raise", "my", "credit", "score", "?"]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (a0 / amr-unknown)
            :ARG0 (i0 / i
                  :poss-of (s0 / score
                        :mod (c0 / credit)))
            :ARG2 (r0 / realistic-03)
            :ARG2 (r1 / raise-01
                  :ARG0 i0
                  :ARG1 s0)))

# ::snt How to remove a tick on a dog?
# ::tokens ["How", "to", "remove", "a", "tick", "on", "a", "dog", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["how", "to", "remove", "a", "tick", "on", "a", "dog", "?"]
(h0 / have-manner-91
      :ARG1 (r0 / remove-01
            :ARG1 (t0 / tick
                  :location (d0 / dog)))
      :ARG2 (a0 / amr-unknown))

# ::snt How can I improve the water pressure in my shower?
# ::tokens ["How", "can", "I", "improve", "the", "water", "pressure", "in", "my", "shower", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "NN", "NN", "IN", "PRP$", "NN", "."]
# ::lemmas ["how", "can", "i", "improve", "the", "water", "pressure", "in", "my", "shower", "?"]
(p0 / possible-01
      :ARG1 (i0 / improve-01
            :ARG1 (p1 / pressure
                  :mod (w0 / water)
                  :location (s0 / shower
                        :poss i1))
            :ARG0 (i1 / i)
            :manner (a0 / amr-unknown)))

# ::snt Can I get a Master's in Economics with a Bachelor's in Mathematics?
# ::tokens ["Can", "I", "get", "a", "Master", "'s", "in", "Economics", "with", "a", "Bachelor", "'s", "in", "Mathematics", "?"]
# ::ner_tags ["O", "O", "O", "WORK_OF_ART", "WORK_OF_ART", "WORK_OF_ART", "WORK_OF_ART", "WORK_OF_ART", "WORK_OF_ART", "WORK_OF_ART", "WORK_OF_ART", "WORK_OF_ART", "WORK_OF_ART", "WORK_OF_ART", "O"]
# ::ner_iob ["O", "O", "O", "B", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "O"]
# ::pos_tags ["MD", "PRP", "VB", "DT", "NNP", "POS", "IN", "NNP", "IN", "DT", "NNP", "POS", "IN", "NNS", "."]
# ::lemmas ["can", "i", "get", "a", "Master", "'s", "in", "Economics", "with", "a", "Bachelor", "'s", "in", "Mathematics", "?"]
(p0 / possible-01
      :ARG1 (g0 / get-01
            :ARG1 (t0 / thing
                  :mod (e0 / economics)
                  :mod (p1 / philosophy))
            :ARG0 (i0 / i)
            :accompanier (a1 / award
                  :name (n0 / name
                        :op1 "Bachelor" )))
      :ARG1 (a0 / amr-unknown))

# ::snt How do I help my dog adjust after moving?
# ::tokens ["How", "do", "I", "help", "my", "dog", "adjust", "after", "moving", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "PRP$", "NN", "VB", "IN", "VBG", "."]
# ::lemmas ["how", "do", "i", "help", "my", "dog", "adjust", "after", "move", "?"]
(h0 / help-01
      :ARG1 (a0 / adjust-01
            :ARG0 d0)
      :ARG0 (i0 / i
            :ARG0-of (m0 / move-01))
      :ARG2 (d0 / dog)
      :time (a1 / after
            :op1 m0)
      :manner (a2 / amr-unknown))

# ::snt How can I boost the water pressure in my shower?
# ::tokens ["How", "can", "I", "boost", "the", "water", "pressure", "in", "my", "shower", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "NN", "NN", "IN", "PRP$", "NN", "."]
# ::lemmas ["how", "can", "i", "boost", "the", "water", "pressure", "in", "my", "shower", "?"]
(p0 / possible-01
      :ARG1 (b0 / boost-01
            :ARG1 (p1 / pressure
                  :mod (w0 / water)
                  :location (s0 / shower
                        :poss i0))
            :ARG0 (i0 / i)
            :manner (a0 / amr-unknown)))

# ::snt How can I build a wall mounted adjustable height desk?
# ::tokens ["How", "can", "I", "build", "a", "wall", "mounted", "adjustable", "height", "desk", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "NN", "VBN", "JJ", "NN", "NN", "."]
# ::lemmas ["how", "can", "i", "build", "a", "wall", "mount", "adjustable", "height", "desk", "?"]
(p0 / possible-01
      :ARG1 (b0 / build-01
            :ARG1 (d0 / desk
                  :ARG1-of (h0 / high-02
                        :ARG1-of (i1 / inhabit-01
                              :ARG1-of (w0 / wall)
                              :ARG1-of (p1 / possible-01))))
            :ARG0 (i0 / i)
            :manner (a0 / amr-unknown)))

# ::snt How can I figure out why my washing machine is tripping the GFCI receptacle?
# ::tokens ["How", "can", "I", "figure", "out", "why", "my", "washing", "machine", "is", "tripping", "the", "GFCI", "receptacle", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "RP", "WRB", "PRP$", "NN", "NN", "VBZ", "VBG", "DT", "NNP", "NN", "."]
# ::lemmas ["how", "can", "i", "figure", "out", "why", "my", "washing", "machine", "be", "trip", "the", "GFCI", "receptacle", "?"]
(p0 / possible-01
      :ARG1 (f0 / figure-out-05
            :ARG1 (t0 / thing
                  :ARG0-of (c0 / cause-01
                        :ARG1 (t1 / trip-03
                              :ARG0 m0
                              :ARG1 (r0 / receptacle
                                    :mod (p1 / product
                                          :name (n0 / name
                                                :op1 "GFCI" ))))))
            :ARG0 (i0 / i
                  :poss-of (m0 / machine
                        :ARG0-of (w0 / wash-01)))
            :manner (a0 / amr-unknown)))

# ::snt Is there a bus from Tbilisi, Georgia to Thessaloniki, Greece?
# ::tokens ["Is", "there", "a", "bus", "from", "Tbilisi", ",", "Georgia", "to", "Thessaloniki", ",", "Greece", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "GPE", "O", "GPE", "O", "GPE", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "B", "O", "B", "O", "B", "O"]
# ::pos_tags ["VBZ", "EX", "DT", "NN", "IN", "NNP", ",", "NNP", "IN", "NNP", ",", "NNP", "."]
# ::lemmas ["be", "there", "a", "bus", "from", "Tbilisi", ",", "Georgia", "to", "Thessaloniki", ",", "Greece", "?"]
(b0 / bus
      :source (a0 / amr-unknown)
      :source (c0 / city
            :name (n0 / name
                  :op1 "Tbilisi" )
            :location (c2 / country
                  :name (n2 / name
                        :op1 "Georgia" )))
      :destination (c1 / city
            :name (n1 / name
                  :op1 "Thessaloniki" )
            :location (c3 / country
                  :name (n3 / name
                        :op1 "Greece" ))))

# ::snt How do I track 401k rollovers in Quicken?
# ::tokens ["How", "do", "I", "track", "401k", "rollovers", "in", "Quicken", "?"]
# ::ner_tags ["O", "O", "O", "O", "NORP", "O", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "B", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NNS", "NNS", "IN", "NNP", "."]
# ::lemmas ["how", "do", "i", "track", "401k", "rollover", "in", "Quicken", "?"]
(t0 / track-01
      :ARG1 (r0 / rollover
            :location (c0 / city
                  :name (n0 / name
                        :op1 "Quicken" ))
            :mod (m0 / monetary-quantity
                  :quant 1500 
                  :unit (p0 / pound)))
      :ARG0 (i0 / i)
      :ARG3 (a0 / amr-unknown))

# ::snt Do I need a UK airside transit visa, if I already have a UK visitor visa?
# ::tokens ["Do", "I", "need", "a", "UK", "airside", "transit", "visa", ",", "if", "I", "already", "have", "a", "UK", "visitor", "visa", "?"]
# ::ner_tags ["O", "O", "O", "O", "GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["VBP", "PRP", "VB", "DT", "NNP", "JJ", "NN", "NN", ",", "IN", "PRP", "RB", "VBP", "DT", "NNP", "NN", "NN", "."]
# ::lemmas ["do", "i", "need", "a", "UK", "airside", "transit", "visa", ",", "if", "i", "already", "have", "a", "UK", "visitor", "visa", "?"]
(h0 / have-condition-91
      :ARG1 (n0 / need-01
            :ARG1 (v0 / visa
                  :mod (c0 / country
                        :name (n1 / name
                              :op1 "UK" ))
                  :mod (t0 / transit))
            :ARG0 (i0 / i))
      :ARG2 (h1 / have-03
            :ARG0 i0
            :ARG1 (v1 / visa
                  :mod c0
                  :mod (p0 / person
                        :ARG0-of (v2 / visit-01)))
            :time (a1 / already))
      :ARG2 (a0 / amr-unknown))

# ::snt Layover at Narita, Japan. Do I need a transit visa?
# ::tokens ["Layover", "at", "Narita", ",", "Japan", ".", "Do", "I", "need", "a", "transit", "visa", "?"]
# ::ner_tags ["O", "O", "GPE", "O", "GPE", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "IN", "NNP", ",", "NNP", ".", "VBP", "PRP", "VB", "DT", "NN", "NN", "."]
# ::lemmas ["Layover", "at", "Narita", ",", "Japan", ".", "do", "i", "need", "a", "transit", "visa", "?"]
(m0 / multi-sentence
      :snt1 (L0 / Layover
            :location (c0 / city
                  :name (n1 / name
                        :op1 "Narita" )
                  :location (c1 / country
                        :name (n2 / name
                              :op1 "Japan" ))))
      :snt2 (n0 / need-01
            :ARG1 (v0 / visa
                  :mod (t0 / transit))
            :ARG0 (i0 / i)
            :ARG0 (a0 / amr-unknown)))

# ::snt Is it advisable to apply to more than one PhD program?
# ::tokens ["Is", "it", "advisable", "to", "apply", "to", "more", "than", "one", "PhD", "program", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "WORK_OF_ART", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "I", "I", "B", "O", "O"]
# ::pos_tags ["VBZ", "PRP", "JJ", "TO", "VB", "IN", "JJR", "IN", "CD", "NN", "NN", "."]
# ::lemmas ["be", "it", "advisable", "to", "apply", "to", "more", "than", "one", "PhD", "program", "?"]
(a0 / advise-01
      :ARG2 (a1 / apply-01
            :ARG1 (p0 / program
                  :mod (P0 / PhD)
                  :quant (m0 / more-than
                        :op1 1 )))
      :ARG0 (a2 / amr-unknown))

# ::snt How can I remove small paint specks from a wooden floor?
# ::tokens ["How", "can", "I", "remove", "small", "paint", "specks", "from", "a", "wooden", "floor", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "JJ", "NN", "NNS", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["how", "can", "i", "remove", "small", "paint", "speck", "from", "a", "wooden", "floor", "?"]
(p0 / possible-01
      :ARG1 (r0 / remove-01
            :ARG1 (s0 / speck
                  :mod (s1 / small)
                  :consist-of (p1 / paint))
            :ARG0 (i0 / i)
            :ARG2 (f0 / floor
                  :mod (w0 / wooden))
            :manner (a0 / amr-unknown)))

# ::snt Does my story beginning hook the reader? (dialogue + narration)?
# ::tokens ["Does", "my", "story", "beginning", "hook", "the", "reader", "?", "(", "dialogue", "+", "narration", ")", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "PRP$", "NN", "VBG", "NN", "DT", "NN", ".", "-LRB-", "NN", "CC", "NN", "-RRB-", "."]
# ::lemmas ["do", "my", "story", "begin", "hook", "the", "reader", "?", "(", "dialogue", "+", "narration", ")", "?"]
(m0 / multi-sentence
      :snt1 (h0 / hook-01
            :ARG1 (p0 / person
                  :ARG0-of (r0 / read-01))
            :ARG0 (s0 / story
                  :poss (i0 / i))
            :ARG2 (a0 / amr-unknown))
      :snt2 (b0 / begin-01
            :ARG1 (a1 / and
                  :op1 (d0 / dialogue-01)
                  :op2 (n0 / narrate-01))))

# ::snt How can I remove this screw?
# ::tokens ["How", "can", "I", "remove", "this", "screw", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "NN", "."]
# ::lemmas ["how", "can", "i", "remove", "this", "screw", "?"]
(p0 / possible-01
      :ARG1 (r0 / remove-01
            :ARG1 (s0 / screw
                  :mod (t0 / this))
            :ARG0 (i0 / i)
            :manner (a0 / amr-unknown)))

# ::snt What could be causing GFCI breakers and receptacles to trip?
# ::tokens ["What", "could", "be", "causing", "GFCI", "breakers", "and", "receptacles", "to", "trip", "?"]
# ::ner_tags ["O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "VB", "VBG", "NNP", "NNS", "CC", "NNS", "TO", "VB", "."]
# ::lemmas ["what", "could", "be", "cause", "GFCI", "breaker", "and", "receptacle", "to", "trip", "?"]
(p0 / possible-01
      :ARG1 (c0 / cause-01
            :ARG1 (a0 / amr-unknown)
            :ARG1 (t0 / trip-03
                  :ARG0 (a1 / and
                        :op1 (b0 / break-01
                              :ARG1 (p1 / product
                                    :name (n0 / name
                                          :op1 "GFCI" )))
                        :op2 (r0 / receptacle)))))

# ::snt How can I get my colleague to stop calling me over to his desk when he wants my help?
# ::tokens ["How", "can", "I", "get", "my", "colleague", "to", "stop", "calling", "me", "over", "to", "his", "desk", "when", "he", "wants", "my", "help", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "PRP$", "NN", "TO", "VB", "VBG", "PRP", "RP", "IN", "PRP$", "NN", "WRB", "PRP", "VBZ", "PRP$", "NN", "."]
# ::lemmas ["how", "can", "i", "get", "my", "colleague", "to", "stop", "call", "me", "over", "to", "his", "desk", "when", "he", "want", "my", "help", "?"]
(p0 / possible-01
      :ARG1 (g0 / get-04
            :ARG1 (s0 / stop-01
                  :ARG1 (c0 / call-02
                        :ARG0 p1
                        :ARG2 d0
                        :mod (o0 / over))
                  :time (w0 / want-01
                        :ARG0 i0
                        :ARG0 p1))
            :ARG0 (i0 / i
                  :ARG1-of (h0 / help-01
                        :ARG0 p1)
                  :ARG1-of (h1 / have-rel-role-91
                        :ARG0 p1
                        :ARG2 (c1 / colleague)))
            :time (p1 / person
                  :poss-of (d0 / desk)))
      :manner (a0 / amr-unknown))

# ::snt How can I thoroughly blackout a bedroom window on a budget?
# ::tokens ["How", "can", "I", "thoroughly", "blackout", "a", "bedroom", "window", "on", "a", "budget", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "RB", "VB", "DT", "NN", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["how", "can", "i", "thoroughly", "blackout", "a", "bedroom", "window", "on", "a", "budget", "?"]
(p0 / possible-01
      :ARG1 (b0 / block-01
            :ARG1 (w0 / window
                  :mod (b1 / bedroom))
            :ARG0 (i0 / i)
            :ARG1-of (c0 / cause-01
                  :ARG0 (b2 / budget-01))
            :manner (t0 / thorough))
      :manner (a0 / amr-unknown))

# ::snt What is good workout attire for weight lifting?
# ::tokens ["What", "is", "good", "workout", "attire", "for", "weight", "lifting", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "JJ", "NN", "NN", "IN", "NN", "NN", "."]
# ::lemmas ["what", "be", "good", "workout", "attire", "for", "weight", "lifting", "?"]
(a0 / attire
      :ARG1-of (g0 / good-02)
      :purpose (a1 / amr-unknown)
      :purpose (l0 / lift-01
            :ARG1 (w0 / weight)))

# ::snt "What are the differences between a ""traditional"" IRA and a Roth IRA?"
# ::tokens ["\"", "What", "are", "the", "differences", "between", "a", "\"", "\"", "traditional", "\"", "\"", "IRA", "and", "a", "Roth", "IRA", "?", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "PERSON", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["``", "WP", "VBP", "DT", "NNS", "IN", "DT", "``", "``", "JJ", "''", "``", "NNP", "CC", "DT", "NNP", "NNP", ".", "''"]
# ::lemmas ["\"", "what", "be", "the", "difference", "between", "a", "\"", "\"", "traditional", "\"", "\"", "IRA", "and", "a", "Roth", "IRA", "?", "\""]
(d0 / differ-02
      :ARG1 (a0 / amr-unknown)
      :ARG1 (m0 / military
            :mod (t0 / tradition)
            :name (n0 / name
                  :op1 "IRA" ))
      :ARG2 (m1 / military
            :name (n1 / name
                  :op1 "Roth" 
                  :op2 "IRA" )))

# ::snt How to deal with the toddler when me and my partner are not on the same page?
# ::tokens ["How", "to", "deal", "with", "the", "toddler", "when", "me", "and", "my", "partner", "are", "not", "on", "the", "same", "page", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "IN", "DT", "NN", "WRB", "PRP", "CC", "PRP$", "NN", "VBP", "RB", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["how", "to", "deal", "with", "the", "toddler", "when", "me", "and", "my", "partner", "be", "not", "on", "the", "same", "page", "?"]
(a0 / amr-unknown
      :manner-of (d0 / deal-01
            :ARG1 (t0 / toddler)
            :ARG0 (i0 / i
                  :ARG1-of (h0 / have-rel-role-91
                        :ARG0 (p1 / person)
                        :ARG2 (p2 / partner)))
            :time (b0 / be-located-at-91
                  :ARG1 (a1 / and
                        :op2 p1)
                  :ARG2 (p0 / page
                        :ARG1-of (s0 / same-01))
                  :polarity - )))

# ::snt How can I fix low water pressure in one shower?
# ::tokens ["How", "can", "I", "fix", "low", "water", "pressure", "in", "one", "shower", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "JJ", "NN", "NN", "IN", "CD", "NN", "."]
# ::lemmas ["how", "can", "i", "fix", "low", "water", "pressure", "in", "one", "shower", "?"]
(p0 / possible-01
      :ARG1 (f0 / fix-02
            :ARG1 (p1 / pressure
                  :ARG1-of (l0 / low-04)
                  :mod (w0 / water))
            :ARG0 (i0 / i)
            :location (s0 / shower
                  :quant 1 )
            :manner (a0 / amr-unknown)))

# ::snt Can I go to visit Schengen countries with visa type D-mult?
# ::tokens ["Can", "I", "go", "to", "visit", "Schengen", "countries", "with", "visa", "type", "D", "-", "mult", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "TO", "VB", "NNP", "NNS", "IN", "NN", "NN", "NNP", "HYPH", "NN", "."]
# ::lemmas ["can", "i", "go", "to", "visit", "Schengen", "country", "with", "visa", "type", "D", "-", "mult", "?"]
(p0 / possible-01
      :ARG1 (g0 / go-02
            :ARG0 (i0 / i)
            :ARG4 (v0 / visit-01
                  :ARG0 i0
                  :ARG1 (c0 / country
                        :mod (r0 / resemble-01))
                  :ARG1 (c1 / country
                        :mod (o0 / organization
                              :name (n0 / name
                                    :op1 "Schengen" ))
                        :mod (v1 / visa))))
      :ARG1 (a0 / amr-unknown))

# ::snt What can I do about a Rough opening that is REALLY out of square?
# ::tokens ["What", "can", "I", "do", "about", "a", "Rough", "opening", "that", "is", "REALLY", "out", "of", "square", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "PRP", "VB", "IN", "DT", "JJ", "NN", "WDT", "VBZ", "NNP", "IN", "IN", "NN", "."]
# ::lemmas ["what", "can", "i", "do", "about", "a", "rough", "opening", "that", "be", "REALLY", "out", "of", "square", "?"]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (a0 / amr-unknown)
            :ARG0 (i0 / i)
            :ARG2 (t0 / thing
                  :ARG1-of (o0 / open-01
                        :ARG1-of (r0 / rough-04))
                  :ARG1-of (o1 / out-06
                        :ARG2 (s0 / square)
                        :degree (r1 / really)))))

# ::snt How do I remove adhesive from outdoor concrete deck that is textured?
# ::tokens ["How", "do", "I", "remove", "adhesive", "from", "outdoor", "concrete", "deck", "that", "is", "textured", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "JJ", "IN", "JJ", "JJ", "NN", "WDT", "VBZ", "VBN", "."]
# ::lemmas ["how", "do", "i", "remove", "adhesive", "from", "outdoor", "concrete", "deck", "that", "be", "texture", "?"]
(r0 / remove-01
      :ARG1 (a0 / adhesive)
      :ARG0 (i0 / i)
      :ARG2 (d0 / deck
            :mod (o0 / outdoor)
            :ARG1-of (t0 / texture
                  :consist-of (c0 / concrete)))
      :manner (a1 / amr-unknown))

# ::snt If I have Schengen visa, can I enter Schengen area from different country?
# ::tokens ["If", "I", "have", "Schengen", "visa", ",", "can", "I", "enter", "Schengen", "area", "from", "different", "country", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "PRP", "VBP", "NNP", "NN", ",", "MD", "PRP", "VB", "NNP", "NN", "IN", "JJ", "NN", "."]
# ::lemmas ["if", "i", "have", "Schengen", "visa", ",", "can", "i", "enter", "Schengen", "area", "from", "different", "country", "?"]
(p0 / possible-01
      :ARG1 (e0 / enter-01
            :ARG1 (i0 / i)
            :ARG1 (a1 / area
                  :mod (c0 / country
                        :ARG1-of (d0 / differ-02))
                  :mod (c1 / city
                        :name (n0 / name
                              :op1 "Schengen" ))))
      :condition (a0 / amr-unknown)
      :condition (h0 / have-03
            :ARG1 (v0 / visa
                  :mod c1)))

# ::snt What could be causing my bathroom drains to back up?
# ::tokens ["What", "could", "be", "causing", "my", "bathroom", "drains", "to", "back", "up", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "VB", "VBG", "PRP$", "NN", "VBZ", "TO", "VB", "RP", "."]
# ::lemmas ["what", "could", "be", "cause", "my", "bathroom", "drain", "to", "back", "up", "?"]
(p0 / possible-01
      :ARG1 (a0 / amr-unknown
            :ARG0-of (c0 / cause-01
                  :ARG1 (c1 / catch-up-04
                        :ARG1 (d0 / drain-01
                              :ARG1 (b0 / bathroom
                                    :poss (i0 / i)))))))

# ::snt Why does it take my dryer 3 hours to dry a load of clothes?
# ::tokens ["Why", "does", "it", "take", "my", "dryer", "3", "hours", "to", "dry", "a", "load", "of", "clothes", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "TIME", "TIME", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "I", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBZ", "PRP", "VB", "PRP$", "NN", "CD", "NNS", "TO", "VB", "DT", "NN", "IN", "NNS", "."]
# ::lemmas ["why", "do", "it", "take", "my", "dryer", "3", "hours", "to", "dry", "a", "load", "of", "clothe", "?"]
(t0 / take-10
      :ARG1 (t1 / temporal-quantity
            :quant 3 
            :unit (h0 / hour))
      :ARG0 (c0 / cause-01
            :ARG0 (a0 / amr-unknown))
      :ARG0 (d0 / dry-08
            :ARG0 p0
            :ARG1 (l0 / load
                  :consist-of (c1 / clothes)))
      :ARG2 (p0 / person
            :ARG0-of (w0 / wash-01
                  :ARG1 (i0 / i))))

# ::snt What are some good strength training routines for runners?
# ::tokens ["What", "are", "some", "good", "strength", "training", "routines", "for", "runners", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBP", "DT", "JJ", "NN", "NN", "NNS", "IN", "NNS", "."]
# ::lemmas ["what", "be", "some", "good", "strength", "training", "routine", "for", "runner", "?"]
(r0 / routine
      :ARG1-of (g0 / good-02)
      :domain (t0 / train-01)
      :beneficiary (a0 / amr-unknown)
      :beneficiary (p0 / person
            :ARG0-of (r1 / run-02)))

# ::snt Which way does air flow into a furnace?
# ::tokens ["Which", "way", "does", "air", "flow", "into", "a", "furnace", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "VBZ", "NN", "VB", "IN", "DT", "NN", "."]
# ::lemmas ["which", "way", "do", "air", "flow", "into", "a", "furnace", "?"]
(f0 / flow-01
      :ARG1 (a0 / air)
      :ARG2 (a1 / amr-unknown)
      :destination (f1 / furnace))

# ::snt What is this sound from my washing machine?
# ::tokens ["What", "is", "this", "sound", "from", "my", "washing", "machine", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "PRP$", "NN", "NN", "."]
# ::lemmas ["what", "be", "this", "sound", "from", "my", "washing", "machine", "?"]
(s0 / sound-02
      :ARG1 (t0 / this)
      :source (m0 / machine
            :ARG0-of (w0 / wash-01)
            :poss (i0 / i))
      :ARG3 (a0 / amr-unknown))

# ::snt How can I add a new light fixture off of a ceiling fan wired to two switches?
# ::tokens ["How", "can", "I", "add", "a", "new", "light", "fixture", "off", "of", "a", "ceiling", "fan", "wired", "to", "two", "switches", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "JJ", "JJ", "NN", "IN", "IN", "DT", "NN", "NN", "VBD", "IN", "CD", "NNS", "."]
# ::lemmas ["how", "can", "i", "add", "a", "new", "light", "fixture", "off", "of", "a", "ceiling", "fan", "wire", "to", "two", "switch", "?"]
(p0 / possible-01
      :ARG1 (a0 / add-02
            :ARG1 (f0 / fixture
                  :ARG1-of (n0 / new-01)
                  :ARG0-of (l0 / light))
            :ARG0 (i0 / i)
            :ARG2 (f1 / fan
                  :mod (c0 / ceiling)
                  :ARG1-of (w0 / wire-01
                        :ARG2 (s0 / switch
                              :quant 2 )))
            :manner (a1 / amr-unknown)))

# ::snt How can I repair a towel rack that was ripped out of the wall?
# ::tokens ["How", "can", "I", "repair", "a", "towel", "rack", "that", "was", "ripped", "out", "of", "the", "wall", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "NN", "NN", "WDT", "VBD", "VBN", "IN", "IN", "DT", "NN", "."]
# ::lemmas ["how", "can", "i", "repair", "a", "towel", "rack", "that", "be", "rip", "out", "of", "the", "wall", "?"]
(p0 / possible-01
      :ARG1 (r0 / repair-01
            :ARG1 (r1 / rack
                  :mod (a0 / amr-unknown)
                  :ARG1-of (t0 / towel)
                  :ARG1-of (r2 / rip-01
                        :ARG2 (w0 / wall)))
            :ARG0 (i0 / i)))

# ::snt How can I remove a stuck screw that will still turn?
# ::tokens ["How", "can", "I", "remove", "a", "stuck", "screw", "that", "will", "still", "turn", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "JJ", "NN", "WDT", "MD", "RB", "VB", "."]
# ::lemmas ["how", "can", "i", "remove", "a", "stuck", "screw", "that", "will", "still", "turn", "?"]
(p0 / possible-01
      :ARG1 (r0 / remove-01
            :ARG1 (s0 / screw
                  :ARG1-of (s1 / stick-01)
                  :ARG0-of (t0 / turn-02
                        :mod (s2 / still)))
            :ARG0 (i0 / i)
            :manner (a0 / amr-unknown)))

# ::snt What are the differences between Peer Reviewed Journals and Refereed Journals?
# ::tokens ["What", "are", "the", "differences", "between", "Peer", "Reviewed", "Journals", "and", "Refereed", "Journals", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBP", "DT", "NNS", "IN", "NNP", "NNP", "NNP", "CC", "NNP", "NNP", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "Peer", "Reviewed", "Journals", "and", "Refereed", "Journals", "?"]
(d0 / differ-02
      :ARG1 (j0 / journal
            :ARG1-of (r0 / review-01
                  :ARG0 (P0 / Peer)))
      :ARG2 (j1 / journal
            :name (n0 / name
                  :op1 "Peer" 
                  :op2 "Reviewed" 
                  :op3 "Journals" ))
      :ARG3 (a0 / amr-unknown))

# ::snt How do I prepare this exterior concrete wall for paint?
# ::tokens ["How", "do", "I", "prepare", "this", "exterior", "concrete", "wall", "for", "paint", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "JJ", "JJ", "NN", "IN", "NN", "."]
# ::lemmas ["how", "do", "i", "prepare", "this", "exterior", "concrete", "wall", "for", "paint", "?"]
(p0 / prepare-02
      :ARG1 (w0 / wall
            :mod (e0 / exterior)
            :mod (t0 / this)
            :consist-of (c0 / concrete))
      :ARG0 (i0 / i)
      :ARG2 (p1 / paint)
      :manner (a0 / amr-unknown))

# ::snt How do I make mayonnaise split?
# ::tokens ["How", "do", "I", "make", "mayonnaise", "split", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NN", "VBN", "."]
# ::lemmas ["how", "do", "i", "make", "mayonnaise", "split", "?"]
(m0 / make-02
      :ARG1 (s0 / split-01
            :ARG1 (m1 / mayonnaise))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt I was offered the minimum salary I requested, should I ask for more?
# ::tokens ["I", "was", "offered", "the", "minimum", "salary", "I", "requested", ",", "should", "I", "ask", "for", "more", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "VBN", "DT", "JJ", "NN", "PRP", "VBD", ",", "MD", "PRP", "VB", "IN", "JJR", "."]
# ::lemmas ["i", "be", "offer", "the", "minimum", "salary", "i", "request", ",", "should", "i", "ask", "for", "more", "?"]
(a0 / and
      :op1 (o0 / offer-01
            :ARG1 (s0 / salary
                  :mod (m0 / minimum)
                  :ARG1-of (r1 / request-01
                        :ARG0 i0))
            :ARG2 (i0 / i))
      :op2 (r0 / recommend-01
            :ARG1 (a1 / ask-02
                  :ARG0 i0
                  :ARG1 (m1 / more))
            :ARG1-of (a2 / amr-unknown)))

# ::snt What does this notation mean?
# ::tokens ["What", "does", "this", "notation", "mean", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "VB", "."]
# ::lemmas ["what", "do", "this", "notation", "mean", "?"]
(m0 / mean-01
      :ARG1 (a0 / amr-unknown)
      :ARG1 (n0 / notation
            :mod (t0 / this)))

# ::snt Why does my ceiling fan turn off when I turn on the lights?
# ::tokens ["Why", "does", "my", "ceiling", "fan", "turn", "off", "when", "I", "turn", "on", "the", "lights", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBZ", "PRP$", "NN", "NN", "VB", "RP", "WRB", "PRP", "VBP", "RP", "DT", "NNS", "."]
# ::lemmas ["why", "do", "my", "ceiling", "fan", "turn", "off", "when", "i", "turn", "on", "the", "light", "?"]
(c0 / cause-01
      :ARG1 (t0 / turn-on-13
            :ARG1 (f0 / fan
                  :mod (c1 / ceiling)
                  :poss (i0 / i))
            :time (t1 / turn-on-13
                  :ARG0 i0
                  :ARG1 (l0 / light)))
      :ARG0 (a0 / amr-unknown))

# ::snt How to make more than one good cup of coffee with a moka pot?
# ::tokens ["How", "to", "make", "more", "than", "one", "good", "cup", "of", "coffee", "with", "a", "moka", "pot", "?"]
# ::ner_tags ["O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "I", "I", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "JJR", "IN", "CD", "JJ", "NN", "IN", "NN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["how", "to", "make", "more", "than", "one", "good", "cup", "of", "coffee", "with", "a", "moka", "pot", "?"]
(h0 / have-manner-91
      :ARG1 (m0 / make-01
            :ARG1 (c0 / coffee
                  :quant (m1 / more-than
                        :op1 1 
                        :op1 (c1 / cup)))
            :instrument (p0 / pot
                  :ARG1-of (g0 / good-02)
                  :consist-of (m2 / moka)))
      :ARG2 (a0 / amr-unknown))

# ::snt What could be causing my GFCI outlet to trip?
# ::tokens ["What", "could", "be", "causing", "my", "GFCI", "outlet", "to", "trip", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "VB", "VBG", "PRP$", "NNP", "NN", "TO", "VB", "."]
# ::lemmas ["what", "could", "be", "cause", "my", "GFCI", "outlet", "to", "trip", "?"]
(p0 / possible-01
      :ARG1 (c0 / cause-01
            :ARG1 (a0 / amr-unknown)
            :ARG1 (t0 / trip-03
                  :ARG0 (o0 / outlet
                        :mod (c1 / company
                              :name (n0 / name
                                    :op1 "GFCI" ))
                        :poss (i0 / i)))))

# ::snt What is wrong with my gas furnace?
# ::tokens ["What", "is", "wrong", "with", "my", "gas", "furnace", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "JJ", "IN", "PRP$", "NN", "NN", "."]
# ::lemmas ["what", "be", "wrong", "with", "my", "gas", "furnace", "?"]
(w0 / wrong-02
      :ARG1 (a0 / amr-unknown)
      :ARG2 (f0 / furnace
            :mod (g0 / gas)
            :poss (i0 / i)))

# ::snt How do I connect the wires to this USB receptacle?
# ::tokens ["How", "do", "I", "connect", "the", "wires", "to", "this", "USB", "receptacle", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NNS", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "connect", "the", "wire", "to", "this", "USB", "receptacle", "?"]
(c0 / connect-01
      :ARG1 (w0 / wire)
      :ARG0 (i0 / i)
      :ARG2 (r0 / receptacle
            :mod (t0 / this)
            :mod (p0 / product
                  :name (n0 / name
                        :op1 "USB" )))
      :manner (a0 / amr-unknown))

# ::snt How do I prepare this porous interior wall for paint?
# ::tokens ["How", "do", "I", "prepare", "this", "porous", "interior", "wall", "for", "paint", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "JJ", "JJ", "NN", "IN", "NN", "."]
# ::lemmas ["how", "do", "i", "prepare", "this", "porous", "interior", "wall", "for", "paint", "?"]
(p0 / prepare-02
      :ARG1 (w0 / wall
            :mod (p2 / porous)
            :mod (t0 / this)
            :mod (i1 / interior))
      :ARG0 (i0 / i)
      :ARG2 (p1 / paint)
      :manner (a0 / amr-unknown))

# ::snt Why is there no hot water in the kitchen?
# ::tokens ["Why", "is", "there", "no", "hot", "water", "in", "the", "kitchen", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBZ", "EX", "DT", "JJ", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["why", "be", "there", "no", "hot", "water", "in", "the", "kitchen", "?"]
(c0 / cause-01
      :ARG1 (b0 / be-located-at-91
            :ARG1 (w0 / water
                  :ARG1-of (h0 / hot-05))
            :ARG2 (k0 / kitchen)
            :polarity - )
      :ARG0 (a0 / amr-unknown))

# ::snt Can I pay a collection agency in a way that will improve my credit score?
# ::tokens ["Can", "I", "pay", "a", "collection", "agency", "in", "a", "way", "that", "will", "improve", "my", "credit", "score", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "DT", "NN", "NN", "IN", "DT", "NN", "WDT", "MD", "VB", "PRP$", "NN", "NN", "."]
# ::lemmas ["can", "i", "pay", "a", "collection", "agency", "in", "a", "way", "that", "will", "improve", "my", "credit", "score", "?"]
(p0 / possible-01
      :ARG1 (p1 / pay-01
            :ARG1 (a1 / agency
                  :ARG0-of (c0 / collect-01))
            :ARG0 (i0 / i
                  :poss-of (s0 / score
                        :mod (c1 / credit)))
            :manner (w0 / way
                  :ARG0-of (i1 / improve-01
                        :ARG1 s0)))
      :manner (a0 / amr-unknown))

# ::snt What kind of glass is this?
# ::tokens ["What", "kind", "of", "glass", "is", "this", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "IN", "NN", "VBZ", "DT", "."]
# ::lemmas ["what", "kind", "of", "glass", "be", "this", "?"]
(g0 / glass
      :mod (k0 / kind
            :mod (a0 / amr-unknown)
            :mod (t0 / this)))

# ::snt Do I need to install a sump pump?
# ::tokens ["Do", "I", "need", "to", "install", "a", "sump", "pump", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBP", "PRP", "VB", "TO", "VB", "DT", "NN", "NN", "."]
# ::lemmas ["do", "i", "need", "to", "install", "a", "sump", "pump", "?"]
(n0 / need-01
      :ARG1 (i0 / install-01
            :ARG0 i1
            :ARG1 (p0 / pump
                  :mod (s0 / sump)))
      :ARG0 (i1 / i)
      :ARG0 (a0 / amr-unknown))

# ::snt How can I convince my boss I am the right person to lead a future team?
# ::tokens ["How", "can", "I", "convince", "my", "boss", "I", "am", "the", "right", "person", "to", "lead", "a", "future", "team", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "PRP$", "NN", "PRP", "VBP", "DT", "JJ", "NN", "TO", "VB", "DT", "JJ", "NN", "."]
# ::lemmas ["how", "can", "i", "convince", "my", "boss", "i", "be", "the", "right", "person", "to", "lead", "a", "future", "team", "?"]
(p0 / possible-01
      :ARG1 (c0 / convince-01
            :ARG1 (a0 / amr-unknown)
            :ARG1 (i0 / i
                  :ARG1-of (h0 / have-rel-role-91
                        :ARG0 (p2 / person)
                        :ARG2 (b0 / boss)))
            :ARG2 (p1 / person
                  :ARG1-of (r0 / right-06)
                  :ARG0-of (l0 / lead-02
                        :ARG1 (t0 / team
                              :time (f0 / future))))))

# ::snt Flying from California to Texas: do I need ESTA?
# ::tokens ["Flying", "from", "California", "to", "Texas", ":", "do", "I", "need", "ESTA", "?"]
# ::ner_tags ["O", "O", "GPE", "O", "GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBG", "IN", "NNP", "IN", "NNP", ":", "VBP", "PRP", "VB", "NNP", "."]
# ::lemmas ["fly", "from", "California", "to", "Texas", ":", "do", "i", "need", "ESTA", "?"]
(n0 / need-01
      :ARG1 (e0 / entertain-01)
      :ARG0 (i0 / i)
      :ARG1-of (a0 / amr-unknown)
      :condition (f0 / fly-01
            :ARG1 i0
            :destination (s0 / state
                  :name (n1 / name
                        :op1 "California" ))
            :destination (s1 / state
                  :name (n2 / name
                        :op1 "Texas" ))))

# ::snt Should I tell my boss I have a full time job offer?
# ::tokens ["Should", "I", "tell", "my", "boss", "I", "have", "a", "full", "time", "job", "offer", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "PRP$", "NN", "PRP", "VBP", "DT", "JJ", "NN", "NN", "NN", "."]
# ::lemmas ["should", "i", "tell", "my", "boss", "i", "have", "a", "full", "time", "job", "offer", "?"]
(r0 / recommend-01
      :ARG1 (t0 / tell-01
            :ARG1 (o0 / offer-01
                  :ARG0 p0
                  :ARG1 (j0 / job)
                  :mod (f0 / full-time
                        :ARG1 i0
                        :ARG0 p0))
            :ARG0 (i0 / i
                  :ARG1-of (h0 / have-rel-role-91
                        :ARG0 p0
                        :ARG2 (b0 / boss)))
            :ARG2 (p0 / person))
      :ARG2 (a0 / amr-unknown))

# ::snt How can I repair my floors' finish?
# ::tokens ["How", "can", "I", "repair", "my", "floors", "'", "finish", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "PRP$", "NNS", "POS", "NN", "."]
# ::lemmas ["how", "can", "i", "repair", "my", "floor", "'", "finish", "?"]
(p0 / possible-01
      :ARG1 (r0 / repair-01
            :ARG1 (a0 / amr-unknown)
            :ARG1 (f0 / finish-01
                  :ARG1 (f1 / floor
                        :poss i0))
            :ARG0 (i0 / i)))

# ::snt How long should it take concrete to fully cure?
# ::tokens ["How", "long", "should", "it", "take", "concrete", "to", "fully", "cure", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "RB", "MD", "PRP", "VB", "NN", "TO", "RB", "VB", "."]
# ::lemmas ["how", "long", "should", "it", "take", "concrete", "to", "fully", "cure", "?"]
(r0 / recommend-01
      :ARG1 (t0 / take-10
            :ARG1 (t1 / temporal-quantity
                  :quant (a0 / amr-unknown))
            :ARG0 (c0 / cure-01
                  :ARG1-of (f0 / full)
                  :ARG2 (c1 / concrete))))

# ::snt Is it appropriate to ask a professor via e-mail for a letter of recommendation?
# ::tokens ["Is", "it", "appropriate", "to", "ask", "a", "professor", "via", "e", "-", "mail", "for", "a", "letter", "of", "recommendation", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "PRP", "JJ", "TO", "VB", "DT", "NN", "IN", "NN", "NN", "NN", "IN", "DT", "NN", "IN", "NN", "."]
# ::lemmas ["be", "it", "appropriate", "to", "ask", "a", "professor", "via", "e", "-", "mail", "for", "a", "letter", "of", "recommendation", "?"]
(a0 / appropriate-02
      :ARG1 (a1 / ask-02
            :ARG1 (l0 / letter
                  :mod (r0 / recommend-01))
            :ARG0 (p0 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG2 (p1 / professor)))
            :medium (e0 / email-01))
      :ARG2 (a2 / amr-unknown))

# ::snt Can I travel to the UK if my Schengen visa expired?
# ::tokens ["Can", "I", "travel", "to", "the", "UK", "if", "my", "Schengen", "visa", "expired", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "GPE", "O", "O", "ORG", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "IN", "DT", "NNP", "IN", "PRP$", "NNP", "NN", "VBD", "."]
# ::lemmas ["can", "i", "travel", "to", "the", "UK", "if", "my", "Schengen", "visa", "expire", "?"]
(p0 / possible-01
      :ARG1 (t0 / travel-01
            :ARG0 (i0 / i)
            :ARG4 (c0 / country
                  :name (n0 / name
                        :op1 "UK" )))
      :condition (a0 / amr-unknown)
      :condition (e0 / expire-01
            :ARG1 (v0 / visa
                  :poss i0
                  :mod (c1 / company
                        :name (n1 / name
                              :op1 "Schengen" )))))

# ::snt How can I remove paint from a deck?
# ::tokens ["How", "can", "I", "remove", "paint", "from", "a", "deck", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["how", "can", "i", "remove", "paint", "from", "a", "deck", "?"]
(p0 / possible-01
      :ARG1 (r0 / remove-01
            :ARG1 (p1 / paint)
            :ARG0 (i0 / i)
            :ARG2 (d0 / deck)
            :manner (a0 / amr-unknown)))

# ::snt How should I apply for a Schengen visa from the UK?
# ::tokens ["How", "should", "I", "apply", "for", "a", "Schengen", "visa", "from", "the", "UK", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "ORG", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "B", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "IN", "DT", "NNP", "NN", "IN", "DT", "NNP", "."]
# ::lemmas ["how", "should", "i", "apply", "for", "a", "Schengen", "visa", "from", "the", "UK", "?"]
(r0 / recommend-01
      :ARG1 (a0 / apply-01
            :ARG1 (v0 / visa
                  :source (c0 / country
                        :name (n0 / name
                              :op1 "UK" ))
                  :mod (o0 / organization
                        :name (n1 / name
                              :op1 "Schengen" )))
            :ARG0 (i0 / i)
            :ARG2 (a1 / amr-unknown)))

# ::snt Why is my furnace blowing hot air outside?
# ::tokens ["Why", "is", "my", "furnace", "blowing", "hot", "air", "outside", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBZ", "PRP$", "NN", "VBG", "JJ", "NN", "RB", "."]
# ::lemmas ["why", "be", "my", "furnace", "blow", "hot", "air", "outside", "?"]
(b0 / blow-01
      :ARG1 (a0 / air
            :ARG1-of (h0 / hot-05))
      :ARG0 (f0 / furnace
            :poss (i0 / i))
      :ARG1-of (c0 / cause-01
            :ARG0 (a1 / amr-unknown))
      :location (o0 / outside))

# ::snt Do I need to replace this water pressure valve?
# ::tokens ["Do", "I", "need", "to", "replace", "this", "water", "pressure", "valve", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBP", "PRP", "VB", "TO", "VB", "DT", "NN", "NN", "NN", "."]
# ::lemmas ["do", "i", "need", "to", "replace", "this", "water", "pressure", "valve", "?"]
(n0 / need-01
      :ARG1 (r0 / replace-01
            :ARG0 i0
            :ARG1 (v0 / valve
                  :mod (t0 / this)
                  :mod (p0 / pressure
                        :source (w0 / water))))
      :ARG0 (i0 / i)
      :ARG0 (a0 / amr-unknown))

# ::snt Is my cat's aggressive behavior playful or mean, and how do I stop it?
# ::tokens ["Is", "my", "cat", "'s", "aggressive", "behavior", "playful", "or", "mean", ",", "and", "how", "do", "I", "stop", "it", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "PRP$", "NN", "POS", "JJ", "NN", "JJ", "CC", "JJ", ",", "CC", "WRB", "VBP", "PRP", "VB", "PRP", "."]
# ::lemmas ["be", "my", "cat", "'s", "aggressive", "behavior", "playful", "or", "mean", ",", "and", "how", "do", "i", "stop", "it", "?"]
(a0 / and
      :op1 (o0 / or
            :op1 (p0 / playful)
            :op2 (m0 / mean-04)
            :domain (b0 / behave-01
                  :ARG0 (a2 / aggressive)
                  :ARG0 (c0 / cat)))
      :op2 (s0 / stop-01
            :ARG0 (i0 / i)
            :manner (a1 / amr-unknown)))

# ::snt Which reward/benefits card is the best value for money in Australia?
# ::tokens ["Which", "reward", "/", "benefits", "card", "is", "the", "best", "value", "for", "money", "in", "Australia", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["WDT", "VBP", "SYM", "NNS", "NN", "VBZ", "DT", "JJS", "NN", "IN", "NN", "IN", "NNP", "."]
# ::lemmas ["which", "reward", "/", "benefit", "card", "be", "the", "good", "value", "for", "money", "in", "Australia", "?"]
(v0 / value-01
      :ARG1 (s0 / slash
            :op1 (r0 / reward-01)
            :op2 (b0 / benefit))
      :ARG2 (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m1 / most)
            :ARG5 (c0 / country
                  :name (n0 / name
                        :op1 "Australia" )))
      :ARG2 (m0 / money)
      :ARG2 (a0 / amr-unknown))

# ::snt What is this technique called?
# ::tokens ["What", "is", "this", "technique", "called", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "VBN", "."]
# ::lemmas ["what", "be", "this", "technique", "call", "?"]
(c0 / call-01
      :ARG1 (t0 / technique
            :mod (t1 / this))
      :ARG2 (a0 / amr-unknown))

# ::snt What is the significance of the missing elevator car?
# ::tokens ["What", "is", "the", "significance", "of", "the", "missing", "elevator", "car", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "DT", "VBG", "NN", "NN", "."]
# ::lemmas ["what", "be", "the", "significance", "of", "the", "miss", "elevator", "car", "?"]
(s0 / significant-02
      :ARG1 (c0 / car
            :ARG1-of (m0 / miss-01)
            :mod (e0 / elevator))
      :ARG3 (a0 / amr-unknown))

# ::snt What is the optimal length of time for pulling a shot of espresso?
# ::tokens ["What", "is", "the", "optimal", "length", "of", "time", "for", "pulling", "a", "shot", "of", "espresso", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJ", "NN", "IN", "NN", "IN", "VBG", "DT", "NN", "IN", "NN", "."]
# ::lemmas ["what", "be", "the", "optimal", "length", "of", "time", "for", "pull", "a", "shot", "of", "espresso", "?"]
(t0 / time
      :mod (o0 / optimal)
      :domain (a0 / amr-unknown)
      :time-of (p0 / pull-01
            :ARG1 (s0 / shoot-01
                  :ARG1 (e0 / espresso))))

# ::snt How can I get rid of fleas in my crawlspace forever?
# ::tokens ["How", "can", "I", "get", "rid", "of", "fleas", "in", "my", "crawlspace", "forever", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "VBN", "IN", "NNS", "IN", "PRP$", "NN", "RB", "."]
# ::lemmas ["how", "can", "i", "get", "rid", "of", "flea", "in", "my", "crawlspace", "forever", "?"]
(p0 / possible-01
      :ARG1 (r0 / rid-01
            :ARG1 (f0 / flea)
            :ARG0 (i0 / i)
            :location (c0 / crawlspace)
            :duration (f1 / forever)
            :manner (a0 / amr-unknown)))

# ::snt Should I write my biography in the first or third person?
# ::tokens ["Should", "I", "write", "my", "biography", "in", "the", "first", "or", "third", "person", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "ORDINAL", "O", "ORDINAL", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "O", "B", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "PRP$", "NN", "IN", "DT", "JJ", "CC", "JJ", "NN", "."]
# ::lemmas ["should", "i", "write", "my", "biography", "in", "the", "first", "or", "third", "person", "?"]
(r0 / recommend-01
      :ARG1 (w0 / write-01
            :ARG1 (b0 / biography
                  :poss i0)
            :ARG0 (i0 / i)
            :manner (o0 / or
                  :op1 (p0 / person
                        :ord (o1 / ordinal-entity
                              :value 1 ))
                  :op2 (p1 / person
                        :ord (o2 / ordinal-entity
                              :value 3 ))))
      :ARG2 (a0 / amr-unknown))

# ::snt How can I tell if a journal is reputable?
# ::tokens ["How", "can", "I", "tell", "if", "a", "journal", "is", "reputable", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "IN", "DT", "NN", "VBZ", "JJ", "."]
# ::lemmas ["how", "can", "i", "tell", "if", "a", "journal", "be", "reputable", "?"]
(p0 / possible-01
      :ARG1 (t0 / tell-01
            :ARG1 (r0 / repute-01
                  :ARG1 (j0 / journal))
            :ARG0 (i0 / i)
            :manner (a0 / amr-unknown)))

# ::snt How can I safely re-heat a chicken pie without burning the crust?
# ::tokens ["How", "can", "I", "safely", "re", "-", "heat", "a", "chicken", "pie", "without", "burning", "the", "crust", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "RB", "VB", "NN", "VBP", "DT", "NN", "NN", "IN", "VBG", "DT", "NN", "."]
# ::lemmas ["how", "can", "i", "safely", "re", "-", "heat", "a", "chicken", "pie", "without", "burn", "the", "crust", "?"]
(p0 / possible-01
      :ARG1 (h0 / heat-01
            :ARG1 (p1 / pie
                  :mod (c0 / chicken))
            :ARG0 (i0 / i)
            :manner (s0 / safe-01)
            :manner (b0 / burn-01
                  :ARG0 i0
                  :ARG1 (c1 / crust)
                  :polarity - ))
      :manner (a0 / amr-unknown))

# ::snt How to replace recessed halogen light from an eyeball fixture?
# ::tokens ["How", "to", "replace", "recessed", "halogen", "light", "from", "an", "eyeball", "fixture", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "VBN", "NN", "NN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["how", "to", "replace", "recess", "halogen", "light", "from", "an", "eyeball", "fixture", "?"]
(a0 / amr-unknown
      :manner-of (r0 / replace-01
            :ARG1 (l0 / light
                  :mod (h0 / halogen)
                  :ARG1-of (s0 / separate-01))
            :ARG2 (f0 / fixture
                  :mod (e0 / eyeball))))

# ::snt Is it appropriate as a referee to contact an author after the editor rejected the manuscript?
# ::tokens ["Is", "it", "appropriate", "as", "a", "referee", "to", "contact", "an", "author", "after", "the", "editor", "rejected", "the", "manuscript", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "PRP", "JJ", "IN", "DT", "NN", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "VBD", "DT", "NN", "."]
# ::lemmas ["be", "it", "appropriate", "as", "a", "referee", "to", "contact", "an", "author", "after", "the", "editor", "reject", "the", "manuscript", "?"]
(a0 / appropriate-02
      :ARG1 (c0 / contact-01
            :ARG1 (p0 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG2 (r1 / referee)))
            :time (p1 / person
                  :ARG0-of (a3 / author-01))
            :time (a2 / after
                  :op1 (r0 / reject-01
                        :ARG1 (m0 / manuscript)
                        :ARG0 (e0 / editor))))
      :ARG2 (a1 / amr-unknown))

# ::snt What is a good guitar solo to learn in the minor scale?
# ::tokens ["What", "is", "a", "good", "guitar", "solo", "to", "learn", "in", "the", "minor", "scale", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJ", "NN", "NN", "TO", "VB", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["what", "be", "a", "good", "guitar", "solo", "to", "learn", "in", "the", "minor", "scale", "?"]
(l0 / learn-01
      :ARG1 (s0 / solo
            :mod (g0 / guitar)
            :ARG1-of (g1 / good-02)
            :location (s1 / scale
                  :ARG1-of (m0 / minor-01)))
      :location (a0 / amr-unknown))

# ::snt How do I get rid of fleas on my rabbit?
# ::tokens ["How", "do", "I", "get", "rid", "of", "fleas", "on", "my", "rabbit", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "VBN", "IN", "NNS", "IN", "PRP$", "NN", "."]
# ::lemmas ["how", "do", "i", "get", "rid", "of", "flea", "on", "my", "rabbit", "?"]
(r0 / rid-01
      :ARG1 (f0 / flea
            :location (r1 / rabbit
                  :poss i0))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt How can I add a GFCI breaker on two circuits with a shared neutral without rewiring?
# ::tokens ["How", "can", "I", "add", "a", "GFCI", "breaker", "on", "two", "circuits", "with", "a", "shared", "neutral", "without", "rewiring", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "O", "O", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "NN", "NN", "IN", "CD", "NNS", "IN", "DT", "VBN", "JJ", "IN", "VBG", "."]
# ::lemmas ["how", "can", "i", "add", "a", "GFCI", "breaker", "on", "two", "circuit", "with", "a", "share", "neutral", "without", "rewire", "?"]
(p0 / possible-01
      :ARG1 (a0 / add-02
            :ARG1 (b0 / break-01
                  :ARG1 (v0 / verify-01
                        :polarity - 
                        :ARG1 (n0 / neutral-02
                              :ARG1-of (s0 / share-01)))
                  :ARG1 (p1 / product
                        :name (n1 / name
                              :op1 "GFCI" )))
            :ARG0 (i0 / i)
            :ARG2 (c0 / circuit
                  :quant 2 ))
      :manner (a1 / amr-unknown))

# ::snt Will paying off a credit card early affect my credit score?
# ::tokens ["Will", "paying", "off", "a", "credit", "card", "early", "affect", "my", "credit", "score", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "VBG", "RP", "DT", "NN", "NN", "RB", "VBP", "PRP$", "NN", "NN", "."]
# ::lemmas ["will", "pay", "off", "a", "credit", "card", "early", "affect", "my", "credit", "score", "?"]
(a0 / affect-01
      :ARG1 (s0 / score
            :mod (c0 / credit-01))
      :ARG0 (p0 / pay-off-02
            :ARG0 (i0 / i)
            :time (e0 / early)
            :ARG1 (c1 / card
                  :mod (c2 / credit)))
      :ARG2 (a1 / amr-unknown))

# ::snt How should a PhD student approach a collaboration?
# ::tokens ["How", "should", "a", "PhD", "student", "approach", "a", "collaboration", "?"]
# ::ner_tags ["O", "O", "O", "WORK_OF_ART", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "DT", "NN", "NN", "VB", "DT", "NN", "."]
# ::lemmas ["how", "should", "a", "PhD", "student", "approach", "a", "collaboration", "?"]
(r0 / recommend-01
      :ARG1 (a0 / approach-02
            :ARG1 (p0 / person
                  :ARG0-of (s0 / study-01
                        :location (p1 / philosophy)))
            :ARG1 (c0 / collaborate-01)
            :manner (a1 / amr-unknown)))

# ::snt How can I replace my light fixture with a ceiling fan?
# ::tokens ["How", "can", "I", "replace", "my", "light", "fixture", "with", "a", "ceiling", "fan", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "PRP$", "JJ", "NN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["how", "can", "i", "replace", "my", "light", "fixture", "with", "a", "ceiling", "fan", "?"]
(p0 / possible-01
      :ARG1 (r0 / replace-01
            :ARG1 (f0 / fixture
                  :poss i0
                  :mod (l0 / light))
            :ARG0 (i0 / i)
            :ARG2 (f1 / fan
                  :mod (c0 / ceiling))
            :manner (a0 / amr-unknown)))

# ::snt How do I maintain a good relationship with an employer after resigning?
# ::tokens ["How", "do", "I", "maintain", "a", "good", "relationship", "with", "an", "employer", "after", "resigning", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "JJ", "NN", "IN", "DT", "NN", "IN", "VBG", "."]
# ::lemmas ["how", "do", "i", "maintain", "a", "good", "relationship", "with", "an", "employer", "after", "resign", "?"]
(m0 / maintain-01
      :ARG1 (r0 / relation-03
            :ARG0 i0
            :ARG1-of (p0 / person
                  :ARG0-of (e0 / employ-01))
            :ARG1-of (g0 / good-02))
      :ARG0 (i0 / i
            :ARG0-of (r1 / resign-01))
      :time (a0 / after
            :op1 r1)
      :manner (a1 / amr-unknown))

# ::snt What should I ask as an applicant in a job interview?
# ::tokens ["What", "should", "I", "ask", "as", "an", "applicant", "in", "a", "job", "interview", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "PRP", "VB", "IN", "DT", "NN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["what", "should", "i", "ask", "as", "an", "applicant", "in", "a", "job", "interview", "?"]
(r0 / recommend-01
      :ARG1 (a0 / ask-01
            :ARG1 (a1 / amr-unknown)
            :ARG0 (i0 / i)
            :ARG2 (p0 / person
                  :ARG1-of (i1 / interview-01
                        :ARG2 (j0 / job))
                  :ARG0-of (a2 / apply-01))))

# ::snt UK income tax & charitable donations: How much is income tax reduced by donations?
# ::tokens ["UK", "income", "tax", "&", "charitable", "donations", ":", "How", "much", "is", "income", "tax", "reduced", "by", "donations", "?"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NN", "NN", "CC", "JJ", "NNS", ":", "WRB", "JJ", "VBZ", "NN", "NN", "VBN", "IN", "NNS", "."]
# ::lemmas ["UK", "income", "tax", "&", "charitable", "donation", ":", "how", "much", "be", "income", "tax", "reduce", "by", "donation", "?"]
(m0 / multi-sentence
      :snt1 (a0 / and
            :op1 (t0 / tax-01
                  :ARG3 (i0 / income)
                  :ARG2 (c0 / country
                        :name (n0 / name
                              :op1 "UK" )))
            :op2 (d0 / donate-01
                  :mod (c1 / charitable)))
      :snt2 (r0 / reduce-01
            :ARG1 (a1 / amr-unknown)
            :ARG3 (t1 / tax-01
                  :ARG2 (i1 / income)
                  :ARG2 (d1 / donate-01))))

# ::snt How can I connect additional wires to a receptacle?
# ::tokens ["How", "can", "I", "connect", "additional", "wires", "to", "a", "receptacle", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "JJ", "NNS", "IN", "DT", "NN", "."]
# ::lemmas ["how", "can", "i", "connect", "additional", "wire", "to", "a", "receptacle", "?"]
(p0 / possible-01
      :ARG1 (c0 / connect-01
            :ARG1 (a0 / amr-unknown)
            :ARG1 (w0 / wire
                  :ARG1-of (a1 / additional))
            :ARG0 (i0 / i)
            :ARG2 (r0 / receptacle)))

# ::snt How can I replace the bulb in this ceiling fan?
# ::tokens ["How", "can", "I", "replace", "the", "bulb", "in", "this", "ceiling", "fan", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "NN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["how", "can", "i", "replace", "the", "bulb", "in", "this", "ceiling", "fan", "?"]
(p0 / possible-01
      :ARG1 (r0 / replace-01
            :ARG1 (b0 / bulb
                  :location (f0 / fan
                        :mod (t0 / this)
                        :mod (c0 / ceiling)))
            :ARG0 (i0 / i)
            :ARG2 (a0 / amr-unknown)))

# ::snt Should I replace or patch a plaster ceiling?
# ::tokens ["Should", "I", "replace", "or", "patch", "a", "plaster", "ceiling", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "CC", "VB", "DT", "NN", "NN", "."]
# ::lemmas ["should", "i", "replace", "or", "patch", "a", "plaster", "ceiling", "?"]
(r0 / recommend-01
      :ARG1 (o0 / or
            :op1 (r1 / replace-01
                  :ARG1 (c0 / ceiling
                        :mod (p0 / plaster))
                  :ARG0 (i0 / i))
            :op2 (t0 / tweak-01
                  :ARG1 c0
                  :ARG0 i0))
      :ARG2 (a0 / amr-unknown))

# ::snt What should I do if a professor says she doesn't understand my questions in office hours?
# ::tokens ["What", "should", "I", "do", "if", "a", "professor", "says", "she", "does", "n't", "understand", "my", "questions", "in", "office", "hours", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "TIME", "TIME", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "O"]
# ::pos_tags ["WP", "MD", "PRP", "VB", "IN", "DT", "NN", "VBZ", "PRP", "VBZ", "RB", "VB", "PRP$", "NNS", "IN", "NN", "NNS", "."]
# ::lemmas ["what", "should", "i", "do", "if", "a", "professor", "say", "she", "do", "not", "understand", "my", "question", "in", "office", "hours", "?"]
(r0 / recommend-01
      :ARG1 (d0 / do-02
            :ARG1 (a0 / amr-unknown)
            :ARG0 (i0 / i
                  :ARG0-of (q0 / question-01)))
      :ARG2 (s0 / say-01
            :ARG1 (u0 / understand-01
                  :ARG0 p0
                  :time (h0 / hour
                        :mod (o0 / office))
                  :polarity - )
            :ARG0 (p0 / professor)))

# ::snt How do I stop my dog from barking at people through the fence?
# ::tokens ["How", "do", "I", "stop", "my", "dog", "from", "barking", "at", "people", "through", "the", "fence", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "PRP$", "NN", "IN", "VBG", "IN", "NNS", "IN", "DT", "NN", "."]
# ::lemmas ["how", "do", "i", "stop", "my", "dog", "from", "bark", "at", "people", "through", "the", "fence", "?"]
(s0 / stop-03
      :ARG1 (d0 / dog
            :poss i0)
      :ARG0 (i0 / i)
      :ARG2 (b0 / bark-01
            :ARG0 d0
            :ARG2 (p0 / person)
            :location (t0 / through
                  :op1 (f0 / fence)))
      :manner (a0 / amr-unknown))

# ::snt Travelling to Romania on a short stay Schengen visa issued by France?
# ::tokens ["Travelling", "to", "Romania", "on", "a", "short", "stay", "Schengen", "visa", "issued", "by", "France", "?"]
# ::ner_tags ["O", "O", "GPE", "O", "O", "O", "O", "ORG", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "B", "O", "O", "O", "B", "O"]
# ::pos_tags ["VBG", "IN", "NNP", "IN", "DT", "JJ", "JJ", "NNP", "NN", "VBN", "IN", "NNP", "."]
# ::lemmas ["travel", "to", "Romania", "on", "a", "short", "stay", "Schengen", "visa", "issue", "by", "France", "?"]
(t0 / travel-01
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Romania" ))
      :ARG0 (v0 / visa
            :mod (i0 / issue-01
                  :ARG0 (c1 / country
                        :name (n1 / name
                              :op1 "France" ))
                  :ARG0 (o0 / organization
                        :name (n2 / name
                              :op1 "Schengen" )))
            :mod (s0 / stay-01
                  :ARG1-of (s1 / short-07)))
      :ARG0 (a0 / amr-unknown))

# ::snt What is the professional way to deal with my manager's boss?
# ::tokens ["What", "is", "the", "professional", "way", "to", "deal", "with", "my", "manager", "'s", "boss", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJ", "NN", "TO", "VB", "IN", "PRP$", "NN", "POS", "NN", "."]
# ::lemmas ["what", "be", "the", "professional", "way", "to", "deal", "with", "my", "manager", "'s", "boss", "?"]
(w0 / way
      :mod (p0 / professional)
      :domain (a0 / amr-unknown)
      :manner-of (d0 / deal-01
            :ARG1 (p1 / person
                  :ARG0-of (h0 / have-rel-role-91
                        :ARG1 (p2 / person
                              :ARG0-of (m0 / manage-01))
                        :ARG2 (b0 / boss)
                        :ARG1 (i0 / i)))))

# ::snt Why is interest on MMA lower in the US than in Europe?
# ::tokens ["Why", "is", "interest", "on", "MMA", "lower", "in", "the", "US", "than", "in", "Europe", "?"]
# ::ner_tags ["O", "O", "O", "O", "ORG", "O", "O", "O", "GPE", "O", "O", "LOC", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "B", "O", "O", "B", "O"]
# ::pos_tags ["WRB", "VBZ", "NN", "IN", "NNP", "JJR", "IN", "DT", "NNP", "IN", "IN", "NNP", "."]
# ::lemmas ["why", "be", "interest", "on", "MMA", "low", "in", "the", "US", "than", "in", "Europe", "?"]
(h0 / have-degree-91
      :ARG1 (i0 / interest-01
            :ARG2 (o0 / organization
                  :name (n0 / name
                        :op1 "MMA" )))
      :ARG2 (l0 / low-04)
      :ARG3 (c0 / cause-01
            :ARG0 (a0 / amr-unknown))
      :ARG3 (m0 / more)
      :ARG4 (i1 / interest-01
            :location (c1 / country
                  :name (n1 / name
                        :op1 "US" ))
            :location (c2 / continent
                  :name (n2 / name
                        :op1 "Europe" ))))

# ::snt What is the significance of the abstract painting?
# ::tokens ["What", "is", "the", "significance", "of", "the", "abstract", "painting", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["what", "be", "the", "significance", "of", "the", "abstract", "painting", "?"]
(s0 / significant-02
      :ARG1 (p0 / paint-02
            :mod (a1 / abstract))
      :ARG1 (a0 / amr-unknown))

# ::snt What could be causing water to back up into my bathroom basin?
# ::tokens ["What", "could", "be", "causing", "water", "to", "back", "up", "into", "my", "bathroom", "basin", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "VB", "VBG", "NN", "TO", "VB", "RP", "IN", "PRP$", "NN", "NN", "."]
# ::lemmas ["what", "could", "be", "cause", "water", "to", "back", "up", "into", "my", "bathroom", "basin", "?"]
(p0 / possible-01
      :ARG1 (a0 / amr-unknown
            :ARG0-of (c0 / cause-01
                  :ARG1 (c1 / catch-up-04
                        :ARG1 (w0 / water)
                        :ARG2 (b0 / basin
                              :poss (b1 / bathroom
                                    :poss (i0 / i)))))))

# ::snt How do I wire 2 switches to control a ceiling light?
# ::tokens ["How", "do", "I", "wire", "2", "switches", "to", "control", "a", "ceiling", "light", "?"]
# ::ner_tags ["O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "CD", "NNS", "TO", "VB", "DT", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "wire", "2", "switch", "to", "control", "a", "ceiling", "light", "?"]
(w0 / wire-02
      :ARG1 (s0 / switch
            :quant 2 )
      :ARG0 (i0 / i)
      :ARG2 (c0 / control-01
            :ARG1 (l0 / light
                  :mod (c1 / ceiling)))
      :manner (a0 / amr-unknown))

# ::snt When (if ever) in the interview process is it appropriate to recommend a colleague?
# ::tokens ["When", "(", "if", "ever", ")", "in", "the", "interview", "process", "is", "it", "appropriate", "to", "recommend", "a", "colleague", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "-LRB-", "IN", "RB", "-RRB-", "IN", "DT", "NN", "NN", "VBZ", "PRP", "JJ", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["when", "(", "if", "ever", ")", "in", "the", "interview", "process", "be", "it", "appropriate", "to", "recommend", "a", "colleague", "?"]
(a0 / appropriate-02
      :ARG1 (r0 / recommend-01)
      :time (a1 / amr-unknown
            :ARG1-of (p1 / process-02
                  :ARG1 (i0 / interview-01)))
      :time (e0 / ever)
      :condition (p0 / person
            :ARG0-of (h0 / have-rel-role-91
                  :ARG2 (c0 / colleague))))

# ::snt How do I remove paint from pipes?
# ::tokens ["How", "do", "I", "remove", "paint", "from", "pipes", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NN", "IN", "NNS", "."]
# ::lemmas ["how", "do", "i", "remove", "paint", "from", "pipe", "?"]
(r0 / remove-01
      :ARG1 (p0 / paint)
      :ARG0 (i0 / i)
      :ARG2 (p1 / pipe)
      :manner (a0 / amr-unknown))

# ::snt Is Greek driver's license valid in the US?
# ::tokens ["Is", "Greek", "driver", "'s", "license", "valid", "in", "the", "US", "?"]
# ::ner_tags ["O", "NORP", "O", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["O", "B", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["VBZ", "JJ", "NN", "POS", "NN", "JJ", "IN", "DT", "NNP", "."]
# ::lemmas ["be", "Greek", "driver", "'s", "license", "valid", "in", "the", "US", "?"]
(v0 / valid-02
      :ARG1 (l0 / license-01
            :ARG1 (p0 / person
                  :mod (d0 / drive-01)
                  :mod (c1 / country
                        :name (n1 / name
                              :op1 "Greek" ))))
      :ARG2 (c0 / country
            :name (n0 / name
                  :op1 "US" ))
      :ARG1 (a0 / amr-unknown))

# ::snt How do I know if food left at room temperature is still safe to eat?
# ::tokens ["How", "do", "I", "know", "if", "food", "left", "at", "room", "temperature", "is", "still", "safe", "to", "eat", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "IN", "NN", "VBD", "IN", "NN", "NN", "VBZ", "RB", "JJ", "TO", "VB", "."]
# ::lemmas ["how", "do", "i", "know", "if", "food", "leave", "at", "room", "temperature", "be", "still", "safe", "to", "eat", "?"]
(k0 / know-01
      :ARG1 (s0 / safe-01
            :ARG1 (e0 / eat-01
                  :ARG1 (f0 / food
                        :ARG1-of (l0 / leave-17
                              :location (t0 / temperature
                                    :mod (r0 / room)))))
            :mod (s1 / still))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt How do I remove a thick layer of paint from tiles?
# ::tokens ["How", "do", "I", "remove", "a", "thick", "layer", "of", "paint", "from", "tiles", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "JJ", "NN", "IN", "NN", "IN", "NNS", "."]
# ::lemmas ["how", "do", "i", "remove", "a", "thick", "layer", "of", "paint", "from", "tile", "?"]
(r0 / remove-01
      :ARG1 (l0 / layer
            :ARG1-of (t1 / thick-03)
            :consist-of (p0 / paint))
      :ARG0 (i0 / i)
      :ARG2 (t0 / tile)
      :manner (a0 / amr-unknown))

# ::snt What are these holes in my concrete wall and how can I mount things to them?
# ::tokens ["What", "are", "these", "holes", "in", "my", "concrete", "wall", "and", "how", "can", "I", "mount", "things", "to", "them", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBP", "DT", "NNS", "IN", "PRP$", "JJ", "NN", "CC", "WRB", "MD", "PRP", "VB", "NNS", "IN", "PRP", "."]
# ::lemmas ["what", "be", "these", "hole", "in", "my", "concrete", "wall", "and", "how", "can", "i", "mount", "thing", "to", "them", "?"]
(a0 / and
      :op1 (h0 / hole
            :mod (t0 / this)
            :location (w0 / wall
                  :mod (c0 / concrete))
            :location (a1 / amr-unknown))
      :op2 (p0 / possible-01
            :ARG1 (m0 / mount-02
                  :ARG1 (i0 / i)
                  :ARG1 (t1 / thing))))

# ::snt What could be causing water to back up into my bathroom basin?
# ::tokens ["What", "could", "be", "causing", "water", "to", "back", "up", "into", "my", "bathroom", "basin", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "VB", "VBG", "NN", "TO", "VB", "RP", "IN", "PRP$", "NN", "NN", "."]
# ::lemmas ["what", "could", "be", "cause", "water", "to", "back", "up", "into", "my", "bathroom", "basin", "?"]
(p0 / possible-01
      :ARG1 (a0 / amr-unknown
            :ARG0-of (c0 / cause-01
                  :ARG1 (c1 / catch-up-04
                        :ARG1 (w0 / water)
                        :ARG2 (b0 / basin
                              :poss (b1 / bathroom
                                    :poss (i0 / i)))))))

# ::snt How to truss a chicken?
# ::tokens ["How", "to", "truss", "a", "chicken", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["how", "to", "truss", "a", "chicken", "?"]
(s0 / structure-01
      :ARG1 (c0 / chicken)
      :ARG2 (a0 / amr-unknown))

# ::snt What are these bugs and how do I get rid of them?
# ::tokens ["What", "are", "these", "bugs", "and", "how", "do", "I", "get", "rid", "of", "them", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBP", "DT", "NNS", "CC", "WRB", "VBP", "PRP", "VB", "VBN", "IN", "PRP", "."]
# ::lemmas ["what", "be", "these", "bug", "and", "how", "do", "i", "get", "rid", "of", "them", "?"]
(a0 / and
      :op1 (r0 / rid-01
            :ARG1 (t0 / they)
            :ARG0 (i0 / i)
            :manner (a2 / amr-unknown))
      :op2 (a1 / amr-unknown))

# ::snt What is a good length for the statement of purpose in a U.S. PhD application?
# ::tokens ["What", "is", "a", "good", "length", "for", "the", "statement", "of", "purpose", "in", "a", "U.S.", "PhD", "application", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJ", "NN", "IN", "DT", "NN", "IN", "NN", "IN", "DT", "NNP", "NN", "NN", "."]
# ::lemmas ["what", "be", "a", "good", "length", "for", "the", "statement", "of", "purpose", "in", "a", "U.S.", "phd", "application", "?"]
(l0 / length
      :ARG1-of (g0 / good-02)
      :domain (s0 / state-01
            :ARG1 (p0 / purpose)
            :location (a1 / apply-01
                  :ARG0 (u0 / university
                        :name (n0 / name
                              :op1 "U.S." ))
                  :mod (p1 / phd)))
      :domain (a0 / amr-unknown))

# ::snt How to make chapattis round and of same thickness?
# ::tokens ["How", "to", "make", "chapattis", "round", "and", "of", "same", "thickness", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "NN", "NN", "CC", "IN", "JJ", "NN", "."]
# ::lemmas ["how", "to", "make", "chapattis", "round", "and", "of", "same", "thickness", "?"]
(m0 / make-01
      :ARG1 (c0 / chapattis
            :ARG1-of (t0 / thickness
                  :ARG1-of (s0 / same-01)))
      :manner (r0 / round)
      :manner (a0 / amr-unknown))

# ::snt How should you deal with a teacher who is difficult to understand?
# ::tokens ["How", "should", "you", "deal", "with", "a", "teacher", "who", "is", "difficult", "to", "understand", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "IN", "DT", "NN", "WP", "VBZ", "JJ", "TO", "VB", "."]
# ::lemmas ["how", "should", "you", "deal", "with", "a", "teacher", "who", "be", "difficult", "to", "understand", "?"]
(r0 / recommend-01
      :ARG1 (d0 / deal-01
            :ARG0 (y0 / you)
            :ARG2 (p0 / person
                  :ARG0-of (t0 / teach-01)
                  :ARG0-of (u0 / understand-01
                        :ARG1-of (d1 / difficult)))
            :manner (a0 / amr-unknown)))

# ::snt What should my credit limit be?
# ::tokens ["What", "should", "my", "credit", "limit", "be", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "PRP$", "NN", "NN", "VB", "."]
# ::lemmas ["what", "should", "my", "credit", "limit", "be", "?"]
(r0 / recommend-01
      :ARG1 (l0 / limit-01
            :ARG1 (a0 / amr-unknown)
            :ARG1 (c0 / credit)
            :ARG1 (i0 / i)))

# ::snt What's the best/easiest way to install and wire a wall light?
# ::tokens ["What", "'s", "the", "best", "/", "easiest", "way", "to", "install", "and", "wire", "a", "wall", "light", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "SYM", "JJS", "NN", "TO", "VB", "CC", "VB", "DT", "NN", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "/", "easy", "way", "to", "install", "and", "wire", "a", "wall", "light", "?"]
(h0 / have-manner-91
      :ARG1 (s0 / slash
            :op1 (i0 / install-01)
            :op2 (f0 / fine-03
                  :ARG2-of (h1 / have-degree-91
                        :ARG3 (m0 / most))
                  :ARG2-of (h2 / have-degree-91
                        :ARG3 (m1 / most)))
            :op3 (l0 / light
                  :mod (w0 / wall)))
      :ARG2 (a0 / amr-unknown))

# ::snt How do I stop my dog from barking when I bring him outside?
# ::tokens ["How", "do", "I", "stop", "my", "dog", "from", "barking", "when", "I", "bring", "him", "outside", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "PRP$", "NN", "IN", "VBG", "WRB", "PRP", "VBP", "PRP", "RB", "."]
# ::lemmas ["how", "do", "i", "stop", "my", "dog", "from", "bark", "when", "i", "bring", "him", "outside", "?"]
(s0 / stop-03
      :ARG1 (d0 / dog
            :poss i0)
      :ARG0 (i0 / i)
      :ARG2 (b0 / bark-01
            :ARG0 d0)
      :time (b1 / bring-01
            :ARG0 i0
            :ARG2 (o0 / outside))
      :manner (a0 / amr-unknown))

# ::snt How do I bring up that I got a better job offer to my new current employer?
# ::tokens ["How", "do", "I", "bring", "up", "that", "I", "got", "a", "better", "job", "offer", "to", "my", "new", "current", "employer", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "RP", "IN", "PRP", "VBD", "DT", "JJR", "NN", "NN", "IN", "PRP$", "JJ", "JJ", "NN", "."]
# ::lemmas ["how", "do", "i", "bring", "up", "that", "i", "get", "a", "well", "job", "offer", "to", "my", "new", "current", "employer", "?"]
(b0 / bring-up-02
      :ARG1 (g0 / get-01
            :ARG0 i0
            :ARG1 (o0 / offer-01
                  :ARG0 i0
                  :ARG1 (j0 / job)
                  :ARG1-of (h0 / have-degree-91
                        :ARG3 (m0 / more))
                  :ARG1-of (g1 / good-02)
                  :ARG3 (c0 / company
                        :ARG1-of (n0 / new-01))))
      :ARG0 (i0 / i
            :ARG1-of (e0 / employ-01
                  :ARG0 c0
                  :time (c1 / current)))
      :manner (a0 / amr-unknown))

# ::snt How can I assess the quality of a paper outside my field?
# ::tokens ["How", "can", "I", "assess", "the", "quality", "of", "a", "paper", "outside", "my", "field", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "NN", "IN", "DT", "NN", "IN", "PRP$", "NN", "."]
# ::lemmas ["how", "can", "i", "assess", "the", "quality", "of", "a", "paper", "outside", "my", "field", "?"]
(p0 / possible-01
      :ARG1 (a0 / assess-01
            :ARG1 (q0 / quality
                  :poss (p1 / paper
                        :location (o0 / outside
                              :op1 f0)))
            :ARG0 (i0 / i
                  :poss-of (f0 / field))
            :manner (a1 / amr-unknown)))

# ::snt Paper Title, Is it better to start with a verb?
# ::tokens ["Paper", "Title", ",", "Is", "it", "better", "to", "start", "with", "a", "verb", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", ",", "VBZ", "PRP", "JJR", "TO", "VB", "IN", "DT", "NN", "."]
# ::lemmas ["Paper", "Title", ",", "be", "it", "well", "to", "start", "with", "a", "verb", "?"]
(s0 / say-01
      :ARG1 (h0 / have-degree-91
            :ARG1 (s1 / start-01
                  :ARG1 (v0 / verb))
            :ARG2 (g0 / good-02
                  :ARG1 s1)
            :ARG3 (a0 / amr-unknown)
            :ARG3 (m0 / more))
      :ARG2 (p0 / person
            :name (n0 / name
                  :op1 "Paper" 
                  :op2 "Title" )))

# ::snt How to apply for a Schengen visa?
# ::tokens ["How", "to", "apply", "for", "a", "Schengen", "visa", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "IN", "DT", "NNP", "NN", "."]
# ::lemmas ["how", "to", "apply", "for", "a", "Schengen", "visa", "?"]
(h0 / have-manner-91
      :ARG1 (a0 / apply-01
            :ARG1 (v0 / visa
                  :mod (c0 / city
                        :name (n0 / name
                              :op1 "Schengen" ))))
      :ARG2 (a1 / amr-unknown))

# ::snt What could be wrong with my air conditioner?
# ::tokens ["What", "could", "be", "wrong", "with", "my", "air", "conditioner", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "VB", "JJ", "IN", "PRP$", "NN", "NN", "."]
# ::lemmas ["what", "could", "be", "wrong", "with", "my", "air", "conditioner", "?"]
(p0 / possible-01
      :ARG1 (w0 / wrong-02
            :ARG1 (a0 / amr-unknown)
            :ARG2 (c0 / conditioner
                  :mod (i0 / i)
                  :mod (a1 / air))))

# ::snt How do you teach a child religious views?
# ::tokens ["How", "do", "you", "teach", "a", "child", "religious", "views", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "JJ", "NNS", "."]
# ::lemmas ["how", "do", "you", "teach", "a", "child", "religious", "view", "?"]
(t0 / teach-01
      :ARG1 (v0 / view-02
            :ARG0 c0
            :ARG1 (r0 / religion))
      :ARG0 (y0 / you)
      :ARG2 (c0 / child)
      :manner (a0 / amr-unknown))

# ::snt What is the best way to learn to play a piece on the guitar?
# ::tokens ["What", "is", "the", "best", "way", "to", "learn", "to", "play", "a", "piece", "on", "the", "guitar", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "learn", "to", "play", "a", "piece", "on", "the", "guitar", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (l0 / learn-01
            :ARG1 (p0 / play-11
                  :ARG1 (p1 / piece)
                  :ARG2 (g1 / guitar))))

# ::snt How do I troubleshoot an electric furnace?
# ::tokens ["How", "do", "I", "troubleshoot", "an", "electric", "furnace", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "JJ", "NN", "."]
# ::lemmas ["how", "do", "i", "troubleshoot", "an", "electric", "furnace", "?"]
(t0 / trouble-01
      :ARG1 (f0 / furnace
            :mod (e0 / electric))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt Is it possible to get a Schengen visa for future date?
# ::tokens ["Is", "it", "possible", "to", "get", "a", "Schengen", "visa", "for", "future", "date", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "PRP", "JJ", "TO", "VB", "DT", "NNP", "NN", "IN", "JJ", "NN", "."]
# ::lemmas ["be", "it", "possible", "to", "get", "a", "Schengen", "visa", "for", "future", "date", "?"]
(p0 / possible-01
      :ARG1 (g0 / get-01
            :ARG1 (v0 / visa
                  :mod (o0 / organization
                        :name (n0 / name
                              :op1 "Schengen" )))
            :time (d0 / date
                  :mod (f0 / future)))
      :ARG1-of (a0 / amr-unknown))

# ::snt How can I determine what is in my water?
# ::tokens ["How", "can", "I", "determine", "what", "is", "in", "my", "water", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "WP", "VBZ", "IN", "PRP$", "NN", "."]
# ::lemmas ["how", "can", "i", "determine", "what", "be", "in", "my", "water", "?"]
(p0 / possible-01
      :ARG1 (d0 / determine-01
            :ARG1 (t0 / thing
                  :location (w0 / water
                        :poss i0))
            :ARG0 (i0 / i)
            :manner (a0 / amr-unknown)))

# ::snt How do I finish a ridge cap?
# ::tokens ["How", "do", "I", "finish", "a", "ridge", "cap", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "finish", "a", "ridge", "cap", "?"]
(f0 / finish-01
      :ARG1 (c0 / cap
            :mod (r0 / ridge))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt How do I stop my dog from barking at people through the fence?
# ::tokens ["How", "do", "I", "stop", "my", "dog", "from", "barking", "at", "people", "through", "the", "fence", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "PRP$", "NN", "IN", "VBG", "IN", "NNS", "IN", "DT", "NN", "."]
# ::lemmas ["how", "do", "i", "stop", "my", "dog", "from", "bark", "at", "people", "through", "the", "fence", "?"]
(s0 / stop-03
      :ARG1 (d0 / dog
            :poss i0)
      :ARG0 (i0 / i)
      :ARG2 (b0 / bark-01
            :ARG0 d0
            :ARG2 (p0 / person)
            :location (t0 / through
                  :op1 (f0 / fence)))
      :manner (a0 / amr-unknown))

# ::snt How to make a strong mug of instant Coffee?
# ::tokens ["How", "to", "make", "a", "strong", "mug", "of", "instant", "Coffee", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "DT", "JJ", "NN", "IN", "JJ", "NNP", "."]
# ::lemmas ["how", "to", "make", "a", "strong", "mug", "of", "instant", "Coffee", "?"]
(m0 / make-01
      :ARG1 (a0 / amr-unknown)
      :ARG1 (p0 / product
            :mod (s0 / strong-02)
            :name (n0 / name
                  :op1 "instant" 
                  :op2 "Coffee" )
            :quant (m1 / mug)))

# ::snt What are the advantages and disadvantages of various methods of supporting the classical guitar?
# ::tokens ["What", "are", "the", "advantages", "and", "disadvantages", "of", "various", "methods", "of", "supporting", "the", "classical", "guitar", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBP", "DT", "NNS", "CC", "NNS", "IN", "JJ", "NNS", "IN", "VBG", "DT", "JJ", "NN", "."]
# ::lemmas ["what", "be", "the", "advantage", "and", "disadvantage", "of", "various", "method", "of", "support", "the", "classical", "guitar", "?"]
(a0 / and
      :op1 (a1 / advantage-01
            :ARG2 (m0 / method
                  :mod (s0 / support-01
                        :ARG1 (g0 / guitar
                              :mod (c0 / classical)))
                  :mod (v0 / various)))
      :op2 (b0 / benefit-01
            :ARG0 m0
            :polarity - )
      :domain (a2 / amr-unknown))

# ::snt How do I patch a gap between my bathtub and wall?
# ::tokens ["How", "do", "I", "patch", "a", "gap", "between", "my", "bathtub", "and", "wall", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "IN", "PRP$", "NN", "CC", "NN", "."]
# ::lemmas ["how", "do", "i", "patch", "a", "gap", "between", "my", "bathtub", "and", "wall", "?"]
(a0 / achieve-01
      :ARG1 (g0 / gap
            :location (b0 / between
                  :op1 b1
                  :op2 w0))
      :ARG0 (i0 / i
            :poss-of (b1 / bathtub)
            :poss-of (w0 / wall))
      :manner (a1 / amr-unknown))

# ::snt What is a good solo to learn in the major scale?
# ::tokens ["What", "is", "a", "good", "solo", "to", "learn", "in", "the", "major", "scale", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJ", "NN", "TO", "VB", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["what", "be", "a", "good", "solo", "to", "learn", "in", "the", "major", "scale", "?"]
(s0 / solo
      :ARG1-of (g0 / good-02)
      :ARG1-of (l0 / learn-01
            :location (s1 / scale
                  :ARG1-of (m0 / major-02)))
      :domain (a0 / amr-unknown))

# ::snt How to remove milk smell from hardwood floor?
# ::tokens ["How", "to", "remove", "milk", "smell", "from", "hardwood", "floor", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "NN", "NN", "IN", "NN", "NN", "."]
# ::lemmas ["how", "to", "remove", "milk", "smell", "from", "hardwood", "floor", "?"]
(r0 / remove-01
      :ARG1 (t0 / thing)
      :ARG2 (f0 / floor
            :mod (a0 / amr-unknown)
            :mod (h0 / hardwood))
      :manner (s0 / smell-02
            :ARG1 (m0 / milk)))

# ::snt Will I Need a Transit visa or ESTA for the US as a Canadian?
# ::tokens ["Will", "I", "Need", "a", "Transit", "visa", "or", "ESTA", "for", "the", "US", "as", "a", "Canadian", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O", "O", "NORP", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "B", "O"]
# ::pos_tags ["MD", "PRP", "VB", "DT", "NNP", "NN", "CC", "NNP", "IN", "DT", "NNP", "IN", "DT", "NNP", "."]
# ::lemmas ["will", "i", "need", "a", "Transit", "visa", "or", "ESTA", "for", "the", "US", "as", "a", "Canadian", "?"]
(n0 / need-01
      :ARG1 (o0 / or
            :op1 (v0 / visa
                  :mod (T0 / Transit))
            :op2 (i1 / iodine))
      :ARG0 (i0 / i)
      :ARG1-of (r0 / resemble-01
            :ARG2 (c0 / country
                  :name (n1 / name
                        :op1 "US" ))
            :ARG2 (p0 / person
                  :mod (c1 / country
                        :name (n2 / name
                              :op1 "Canada" ))))
      :ARG1-of (a0 / amr-unknown))

# ::snt Is it safe to replace a switch with a dimmer on halogen spots?
# ::tokens ["Is", "it", "safe", "to", "replace", "a", "switch", "with", "a", "dimmer", "on", "halogen", "spots", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "PRP", "JJ", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "IN", "NN", "NNS", "."]
# ::lemmas ["be", "it", "safe", "to", "replace", "a", "switch", "with", "a", "dimmer", "on", "halogen", "spot", "?"]
(s0 / safe-01
      :ARG1 (r0 / replace-01
            :ARG1 (s1 / switch
                  :mod (d0 / dimmer))
            :ARG2 (s2 / spot
                  :mod (h0 / halogen)))
      :ARG0 (a0 / amr-unknown))

# ::snt What is the best way to store chopped vegetables?
# ::tokens ["What", "is", "the", "best", "way", "to", "store", "chopped", "vegetables", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "VBN", "NNS", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "chop", "vegetable", "?"]
(w0 / way
      :manner-of (g0 / good-02)
      :domain (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (v0 / vegetable
                  :ARG1-of (c0 / cook-01))))

# ::snt What is the best way to store carrots?
# ::tokens ["What", "is", "the", "best", "way", "to", "store", "carrots", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "NNS", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "carrot", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (c0 / carrot)))

# ::snt How long will uncooked chicken keep in the fridge?
# ::tokens ["How", "long", "will", "uncooked", "chicken", "keep", "in", "the", "fridge", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "RB", "MD", "JJ", "NN", "VB", "IN", "DT", "NN", "."]
# ::lemmas ["how", "long", "will", "uncooked", "chicken", "keep", "in", "the", "fridge", "?"]
(k0 / keep-01
      :ARG1 (c0 / chicken
            :ARG1-of (c1 / cook-01
                  :polarity - ))
      :location (f0 / fridge)
      :duration (a0 / amr-unknown))

# ::snt How do I remove paint from pipes?
# ::tokens ["How", "do", "I", "remove", "paint", "from", "pipes", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NN", "IN", "NNS", "."]
# ::lemmas ["how", "do", "i", "remove", "paint", "from", "pipe", "?"]
(r0 / remove-01
      :ARG1 (p0 / paint)
      :ARG0 (i0 / i)
      :ARG2 (p1 / pipe)
      :manner (a0 / amr-unknown))

# ::snt How can I remove paint from slotted screw heads?
# ::tokens ["How", "can", "I", "remove", "paint", "from", "slotted", "screw", "heads", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "NN", "IN", "JJ", "NN", "NNS", "."]
# ::lemmas ["how", "can", "i", "remove", "paint", "from", "slotted", "screw", "head", "?"]
(p0 / possible-01
      :ARG1 (r0 / remove-01
            :ARG1 (p1 / paint)
            :ARG0 (i0 / i)
            :ARG2 (h0 / head
                  :ARG1-of (s0 / slotted)
                  :part-of (s1 / screw))
            :manner (a0 / amr-unknown)))

# ::snt How do I wire a replacement ceiling fan?
# ::tokens ["How", "do", "I", "wire", "a", "replacement", "ceiling", "fan", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "wire", "a", "replacement", "ceiling", "fan", "?"]
(w0 / wire-02
      :ARG1 (f0 / fan
            :mod (r0 / replace-01)
            :mod (c0 / ceiling))
      :ARG0 (i0 / i)
      :ARG2 (a0 / amr-unknown))

# ::snt How long can I store cooked rice in the refrigerator?
# ::tokens ["How", "long", "can", "I", "store", "cooked", "rice", "in", "the", "refrigerator", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "RB", "MD", "PRP", "VB", "VBN", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["how", "long", "can", "i", "store", "cook", "rice", "in", "the", "refrigerator", "?"]
(p0 / possible-01
      :ARG1 (s0 / store-01
            :ARG1 (r0 / rice
                  :ARG1-of (a0 / amr-unknown)
                  :ARG1-of (c0 / cook-01))
            :ARG0 (i0 / i)
            :ARG2 (r1 / refrigerator)))

# ::snt What's the best way to store asparagus?
# ::tokens ["What", "'s", "the", "best", "way", "to", "store", "asparagus", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "asparagus", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (a1 / asparagus)))

# ::snt How do you teach a toddler not to share?
# ::tokens ["How", "do", "you", "teach", "a", "toddler", "not", "to", "share", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "RB", "TO", "VB", "."]
# ::lemmas ["how", "do", "you", "teach", "a", "toddler", "not", "to", "share", "?"]
(t0 / teach-01
      :ARG1 (s0 / share-01
            :ARG0 t1
            :polarity - )
      :ARG0 (y0 / you)
      :ARG2 (t1 / toddler)
      :manner (a0 / amr-unknown))

# ::snt How can I replace a ceiling fan with a regular light fixture?
# ::tokens ["How", "can", "I", "replace", "a", "ceiling", "fan", "with", "a", "regular", "light", "fixture", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "NN", "NN", "IN", "DT", "JJ", "JJ", "NN", "."]
# ::lemmas ["how", "can", "i", "replace", "a", "ceiling", "fan", "with", "a", "regular", "light", "fixture", "?"]
(p0 / possible-01
      :ARG1 (r0 / replace-01
            :ARG1 (f0 / fan
                  :mod (c0 / ceiling))
            :ARG0 (i0 / i)
            :ARG2 (f1 / fixture
                  :ARG1-of (r1 / regular-02)
                  :mod (l0 / light))
            :manner (a0 / amr-unknown)))

# ::snt How can I repair my floors' finish?
# ::tokens ["How", "can", "I", "repair", "my", "floors", "'", "finish", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "PRP$", "NNS", "POS", "NN", "."]
# ::lemmas ["how", "can", "i", "repair", "my", "floor", "'", "finish", "?"]
(p0 / possible-01
      :ARG1 (r0 / repair-01
            :ARG1 (a0 / amr-unknown)
            :ARG1 (f0 / finish-01
                  :ARG1 (f1 / floor
                        :poss i0))
            :ARG0 (i0 / i)))

# ::snt Where can I find a good online thesaurus?
# ::tokens ["Where", "can", "I", "find", "a", "good", "online", "thesaurus", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "JJ", "JJ", "NN", "."]
# ::lemmas ["where", "can", "i", "find", "a", "good", "online", "thesaurus", "?"]
(p0 / possible-01
      :ARG1 (f0 / find-01
            :ARG1 (t0 / thesaurus
                  :mod (o0 / online)
                  :ARG1-of (g0 / good-02))
            :ARG0 (i0 / i)
            :location (a0 / amr-unknown)))

# ::snt How can I repair a leaking shower?
# ::tokens ["How", "can", "I", "repair", "a", "leaking", "shower", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "VBG", "NN", "."]
# ::lemmas ["how", "can", "i", "repair", "a", "leak", "shower", "?"]
(p0 / possible-01
      :ARG1 (r0 / repair-01
            :ARG1 (s0 / shower
                  :ARG0-of (l0 / leak-01))
            :ARG0 (i0 / i))
      :manner (a0 / amr-unknown))

# ::snt How do I measure a standard sliding glass door?
# ::tokens ["How", "do", "I", "measure", "a", "standard", "sliding", "glass", "door", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "JJ", "VBG", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "measure", "a", "standard", "slide", "glass", "door", "?"]
(m0 / measure-01
      :ARG1 (d0 / door
            :ARG1-of (g0 / glass
                  :mod (s1 / slide-01))
            :ARG1-of (s0 / standard-02))
      :ARG0 (i0 / i)
      :ARG2 (a0 / amr-unknown))

# ::snt How do I remove this shower fixture?
# ::tokens ["How", "do", "I", "remove", "this", "shower", "fixture", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "remove", "this", "shower", "fixture", "?"]
(r0 / remove-01
      :ARG1 (f0 / fixture
            :mod (t0 / this)
            :mod (s0 / shower))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt How do I remove paint from a porous table top?
# ::tokens ["How", "do", "I", "remove", "paint", "from", "a", "porous", "table", "top", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "NN", "IN", "DT", "JJ", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "remove", "paint", "from", "a", "porous", "table", "top", "?"]
(r0 / remove-01
      :ARG1 (p0 / paint)
      :ARG0 (i0 / i)
      :ARG2 (t0 / top
            :mod (p1 / porous)
            :mod (t1 / table))
      :manner (a0 / amr-unknown))

# ::snt Why do admissions committees consider the Statement of Purpose to be important?
# ::tokens ["Why", "do", "admissions", "committees", "consider", "the", "Statement", "of", "Purpose", "to", "be", "important", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "NNS", "NNS", "VBP", "DT", "NNP", "IN", "NNP", "TO", "VB", "JJ", "."]
# ::lemmas ["why", "do", "admission", "committee", "consider", "the", "Statement", "of", "Purpose", "to", "be", "important", "?"]
(c0 / consider-01
      :ARG1 (i0 / important-01
            :ARG1 (s0 / state-01))
      :ARG0 (c1 / committee
            :ARG0-of (a0 / admit-02))
      :ARG1-of (c2 / cause-01
            :ARG0 (a1 / amr-unknown)))

# ::snt I have a Layover in Japan, Going to stayfor a month, Do I need a Transit Visa?
# ::tokens ["I", "have", "a", "Layover", "in", "Japan", ",", "Going", "to", "stayfor", "a", "month", ",", "Do", "I", "need", "a", "Transit", "Visa", "?"]
# ::ner_tags ["O", "O", "O", "GPE", "O", "GPE", "O", "O", "O", "O", "DATE", "DATE", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "O", "B", "O", "O", "O", "O", "B", "I", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "NNP", "IN", "NNP", ",", "VBG", "TO", "VB", "DT", "NN", ",", "VBP", "PRP", "VB", "DT", "NNP", "NNP", "."]
# ::lemmas ["i", "have", "a", "Layover", "in", "Japan", ",", "go", "to", "stayfor", "a", "month", ",", "do", "i", "need", "a", "Transit", "Visa", "?"]
(a0 / and
      :op1 (h0 / have-03
            :ARG1 (f0 / facility
                  :name (n1 / name
                        :op1 "Layover" )
                  :location (c0 / country
                        :name (n3 / name
                              :op1 "Japan" ))
                  :location (r0 / reside-01
                        :duration (t0 / temporal-quantity
                              :quant 1 
                              :unit (m0 / month))))
            :ARG0 (i0 / i))
      :op2 (n0 / need-01
            :ARG0 i0
            :ARG1 (a1 / amr-unknown)
            :ARG1 (p0 / product
                  :name (n2 / name
                        :op1 "Transit" 
                        :op2 "Visa" ))))

# ::snt How long does uncooked meat last when kept in the freezer?
# ::tokens ["How", "long", "does", "uncooked", "meat", "last", "when", "kept", "in", "the", "freezer", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "RB", "VBZ", "JJ", "NN", "JJ", "WRB", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["how", "long", "do", "uncooked", "meat", "last", "when", "keep", "in", "the", "freezer", "?"]
(l0 / last-01
      :ARG1 (m0 / meat
            :ARG1-of (c0 / cook-01
                  :polarity - ))
      :ARG2 (a0 / amr-unknown)
      :time (k0 / keep-01
            :ARG1 m0
            :location (f0 / freezer)))

# ::snt Is it appropriate to send a gift to a professor for an online course?
# ::tokens ["Is", "it", "appropriate", "to", "send", "a", "gift", "to", "a", "professor", "for", "an", "online", "course", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "PRP", "JJ", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["be", "it", "appropriate", "to", "send", "a", "gift", "to", "a", "professor", "for", "an", "online", "course", "?"]
(a0 / appropriate-02
      :ARG1 (s0 / send-01
            :ARG1 (g0 / gift)
            :ARG2 (p0 / professor
                  :topic (c0 / course
                        :mod (o0 / online))))
      :ARG2 (a1 / amr-unknown))

# ::snt How to tell my company that I am having issues with my boss?
# ::tokens ["How", "to", "tell", "my", "company", "that", "I", "am", "having", "issues", "with", "my", "boss", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "PRP$", "NN", "WDT", "PRP", "VBP", "VBG", "NNS", "IN", "PRP$", "NN", "."]
# ::lemmas ["how", "to", "tell", "my", "company", "that", "i", "be", "have", "issue", "with", "my", "boss", "?"]
(h0 / have-manner-91
      :ARG1 (t0 / tell-01
            :ARG1 (i0 / issue-02
                  :ARG1 (i1 / i
                        :ARG1-of (h1 / have-rel-role-91
                              :ARG0 p0
                              :ARG2 (b0 / boss)))
                  :ARG0 (p0 / person))
            :ARG0 (c0 / company))
      :ARG2 (a0 / amr-unknown))

# ::snt How to peel peaches?
# ::tokens ["How", "to", "peel", "peaches", "?"]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "NNS", "."]
# ::lemmas ["how", "to", "peel", "peach", "?"]
(p0 / peel
      :manner (p1 / peach)
      :manner (a0 / amr-unknown))

# ::snt How do I measure a standard sliding glass door?
# ::tokens ["How", "do", "I", "measure", "a", "standard", "sliding", "glass", "door", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "JJ", "VBG", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "measure", "a", "standard", "slide", "glass", "door", "?"]
(m0 / measure-01
      :ARG1 (d0 / door
            :ARG1-of (g0 / glass
                  :mod (s1 / slide-01))
            :ARG1-of (s0 / standard-02))
      :ARG0 (i0 / i)
      :ARG2 (a0 / amr-unknown))

# ::snt "What does ""university ranking"" mean for a graduate admissions committee?"
# ::tokens ["\"", "What", "does", "\"", "\"", "university", "ranking", "\"", "\"", "mean", "for", "a", "graduate", "admissions", "committee", "?", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "WP", "VBZ", "``", "``", "NN", "NN", "''", "``", "VB", "IN", "DT", "NN", "NNS", "NN", ".", "''"]
# ::lemmas ["\"", "what", "do", "\"", "\"", "university", "ranking", "\"", "\"", "mean", "for", "a", "graduate", "admission", "committee", "?", "\""]
(m0 / mean-01
      :ARG1 (a0 / amr-unknown)
      :ARG0 (r0 / rank-01
            :ARG2 (u0 / university))
      :ARG2 (c0 / committee
            :ARG0-of (a1 / admit-02
                  :ARG2 (p0 / person
                        :ARG1-of (g0 / graduate-01)))))

# ::snt How do I clean a Hammerite paint brush?
# ::tokens ["How", "do", "I", "clean", "a", "Hammerite", "paint", "brush", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NNP", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "clean", "a", "Hammerite", "paint", "brush", "?"]
(c0 / clean-01
      :ARG1 (b0 / brush
            :mod (H0 / Hammerite)
            :purpose (p0 / paint))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt How do I wire a combo with two supplies?
# ::tokens ["How", "do", "I", "wire", "a", "combo", "with", "two", "supplies", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "IN", "CD", "NNS", "."]
# ::lemmas ["how", "do", "i", "wire", "a", "combo", "with", "two", "supply", "?"]
(e0 / encrypt-01
      :ARG1 (c0 / combo
            :ARG1-of (s0 / supply-01
                  :quant 2 ))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt How should I cite StackOverflow questions in my term paper?
# ::tokens ["How", "should", "I", "cite", "StackOverflow", "questions", "in", "my", "term", "paper", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "NNP", "NNS", "IN", "PRP$", "NN", "NN", "."]
# ::lemmas ["how", "should", "i", "cite", "StackOverflow", "question", "in", "my", "term", "paper", "?"]
(r0 / recommend-01
      :ARG1 (c0 / cite-01
            :ARG1 (q0 / question-01
                  :ARG0 (c1 / company
                        :name (n0 / name
                              :op1 "StackOverflow" )))
            :ARG0 (i0 / i)
            :ARG2 (p0 / paper
                  :mod (t0 / term))
            :manner (a0 / amr-unknown)))

# ::snt How do you get a child to eat?
# ::tokens ["How", "do", "you", "get", "a", "child", "to", "eat", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "TO", "VB", "."]
# ::lemmas ["how", "do", "you", "get", "a", "child", "to", "eat", "?"]
(g0 / get-04
      :ARG1 (e0 / eat-01
            :ARG0 (c0 / child))
      :ARG0 (y0 / you)
      :manner (a0 / amr-unknown))

# ::snt Why doesn't my cat like being held?
# ::tokens ["Why", "does", "n't", "my", "cat", "like", "being", "held", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBZ", "RB", "PRP$", "NN", "IN", "VBG", "VBN", "."]
# ::lemmas ["why", "do", "not", "my", "cat", "like", "be", "hold", "?"]
(d0 / dislike-01
      :ARG1 (h0 / hold-01
            :ARG1 c0)
      :ARG0 (c0 / cat
            :poss (i0 / i))
      :ARG1-of (c1 / cause-01
            :ARG0 (a0 / amr-unknown)))

# ::snt How do I level a pipe with the ground?
# ::tokens ["How", "do", "I", "level", "a", "pipe", "with", "the", "ground", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["how", "do", "i", "level", "a", "pipe", "with", "the", "ground", "?"]
(l0 / level-01
      :ARG1 (p0 / pipe)
      :ARG0 (i0 / i)
      :ARG2 (g0 / ground)
      :manner (a0 / amr-unknown))

# ::snt What type of screws should I use?
# ::tokens ["What", "type", "of", "screws", "should", "I", "use", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "IN", "NNS", "MD", "PRP", "VB", "."]
# ::lemmas ["what", "type", "of", "screw", "should", "i", "use", "?"]
(r0 / recommend-01
      :ARG1 (u0 / use-01
            :ARG1 (s0 / screw
                  :mod (t0 / type
                        :mod (a0 / amr-unknown)))
            :ARG0 (i0 / i)))

# ::snt How do I make this paint match?
# ::tokens ["How", "do", "I", "make", "this", "paint", "match", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "VB", "."]
# ::lemmas ["how", "do", "i", "make", "this", "paint", "match", "?"]
(m0 / make-02
      :ARG1 (m1 / match-01
            :ARG1 (p0 / paint
                  :mod (t0 / this)))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt What is the best way to introduce cats to newborns?
# ::tokens ["What", "is", "the", "best", "way", "to", "introduce", "cats", "to", "newborns", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "NNS", "IN", "NNS", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "introduce", "cat", "to", "newborn", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (i0 / introduce-01
            :ARG1 (c0 / cat)
            :ARG2 (p0 / person
                  :ARG0-of (h1 / have-rel-role-91
                        :ARG2 (n0 / newborn)))))

# ::snt What is the best way to store ground coffee?
# ::tokens ["What", "is", "the", "best", "way", "to", "store", "ground", "coffee", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "NN", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "ground", "coffee", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (c0 / coffee
                  :mod (g1 / ground))))

# ::snt Is it possible to write a song without a key?
# ::tokens ["Is", "it", "possible", "to", "write", "a", "song", "without", "a", "key", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "PRP", "JJ", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["be", "it", "possible", "to", "write", "a", "song", "without", "a", "key", "?"]
(p0 / possible-01
      :ARG1 (w0 / write-01
            :ARG1 (s0 / song)
            :manner (k0 / key
                  :polarity - ))
      :manner (a0 / amr-unknown))

# ::snt How long should I wait for plaster to dry/cure between coats?
# ::tokens ["How", "long", "should", "I", "wait", "for", "plaster", "to", "dry", "/", "cure", "between", "coats", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "RB", "MD", "PRP", "VB", "IN", "NN", "TO", "VB", "SYM", "NN", "IN", "NNS", "."]
# ::lemmas ["how", "long", "should", "i", "wait", "for", "plaster", "to", "dry", "/", "cure", "between", "coat", "?"]
(r0 / recommend-01
      :ARG1 (w0 / wait-01
            :ARG1 (i0 / i)
            :ARG2 (s0 / slash
                  :op1 (d0 / dry-02
                        :ARG1 (p0 / plaster))
                  :op2 (c0 / cure-01
                        :ARG1 p0
                        :ARG2 (b0 / between
                              :op1 (c1 / coat))))
            :ARG2 (a0 / amr-unknown)))

# ::snt How long can I keep bread dough in the refrigerator?
# ::tokens ["How", "long", "can", "I", "keep", "bread", "dough", "in", "the", "refrigerator", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "RB", "MD", "PRP", "VB", "NN", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["how", "long", "can", "i", "keep", "bread", "dough", "in", "the", "refrigerator", "?"]
(p0 / possible-01
      :ARG1 (k0 / keep-01
            :ARG1 (d0 / dough
                  :mod (a0 / amr-unknown)
                  :consist-of (b0 / bread))
            :ARG0 (i0 / i)
            :location (r0 / refrigerator)))

# ::snt How do I install a new interior partition wall?
# ::tokens ["How", "do", "I", "install", "a", "new", "interior", "partition", "wall", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "JJ", "JJ", "NN", "NN", "."]
# ::lemmas ["how", "do", "i", "install", "a", "new", "interior", "partition", "wall", "?"]
(i0 / install-01
      :ARG1 (w0 / wall
            :mod (i2 / interior)
            :ARG1-of (n0 / new-01))
      :ARG0 (i1 / i)
      :ARG2 (a0 / amr-unknown))

# ::snt How do I make this paint match?
# ::tokens ["How", "do", "I", "make", "this", "paint", "match", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBP", "PRP", "VB", "DT", "NN", "VB", "."]
# ::lemmas ["how", "do", "i", "make", "this", "paint", "match", "?"]
(m0 / make-02
      :ARG1 (m1 / match-01
            :ARG1 (p0 / paint
                  :mod (t0 / this)))
      :ARG0 (i0 / i)
      :manner (a0 / amr-unknown))

# ::snt What is the best way to fix this garage floor?
# ::tokens ["What", "is", "the", "best", "way", "to", "fix", "this", "garage", "floor", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "DT", "NN", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "fix", "this", "garage", "floor", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :manner-of (f0 / fix-02
            :ARG1 (f1 / floor
                  :mod (t0 / this)
                  :mod (g1 / garage)))
      :domain (a0 / amr-unknown))

# ::snt What's the best way to store unused sushi rice?
# ::tokens ["What", "'s", "the", "best", "way", "to", "store", "unused", "sushi", "rice", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "JJ", "NNP", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "unused", "sushi", "rice", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :domain (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (r0 / rice
                  :ARG1-of (u0 / use-01
                        :polarity - )
                  :mod (p0 / product
                        :name (n0 / name
                              :op1 "sushi" )))))

# ::snt What type of faucet is this?
# ::tokens ["What", "type", "of", "faucet", "is", "this", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "IN", "NN", "VBZ", "DT", "."]
# ::lemmas ["what", "type", "of", "faucet", "be", "this", "?"]
(f0 / faucet
      :mod (t0 / type
            :mod (a0 / amr-unknown)
            :mod (t1 / this)))

# ::snt What is the difference between a mode and a scale?
# ::tokens ["What", "is", "the", "difference", "between", "a", "mode", "and", "a", "scale", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "DT", "NN", "CC", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "a", "mode", "and", "a", "scale", "?"]
(d0 / differ-02
      :ARG1 (m0 / mode)
      :ARG2 (s0 / scale)
      :ARG3 (a0 / amr-unknown))

# ::snt What is the best way to introduce cats to newborns?
# ::tokens ["What", "is", "the", "best", "way", "to", "introduce", "cats", "to", "newborns", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "NNS", "IN", "NNS", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "introduce", "cat", "to", "newborn", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (i0 / introduce-01
            :ARG1 (c0 / cat)
            :ARG2 (p0 / person
                  :ARG0-of (h1 / have-rel-role-91
                        :ARG2 (n0 / newborn)))))

# ::snt What is the best way to clean a grater?
# ::tokens ["What", "is", "the", "best", "way", "to", "clean", "a", "grater", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "clean", "a", "grater", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (c0 / clean-01
            :ARG1 (g1 / grater))
      :domain (a0 / amr-unknown))

# ::snt What is the best way to cite an anonymous writer?
# ::tokens ["What", "is", "the", "best", "way", "to", "cite", "an", "anonymous", "writer", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "DT", "JJ", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "cite", "an", "anonymous", "writer", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :domain (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (c0 / cite-01
            :ARG1 (p0 / person
                  :mod (a1 / anonymous)
                  :ARG0-of (w1 / write-01))))

# ::snt Where can I find a complete list of Freddie Green chords?
# ::tokens ["Where", "can", "I", "find", "a", "complete", "list", "of", "Freddie", "Green", "chords", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "ORG", "ORG", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "JJ", "NN", "IN", "NNP", "NNP", "NNS", "."]
# ::lemmas ["where", "can", "i", "find", "a", "complete", "list", "of", "Freddie", "Green", "chord", "?"]
(p0 / possible-01
      :ARG1 (f0 / find-01
            :ARG1 (t0 / thing
                  :ARG2-of (l0 / list-01
                        :ARG1 (c0 / chord
                              :mod (p1 / person
                                    :name (n0 / name
                                          :op1 "Freddie" 
                                          :op2 "Green" )))
                        :ARG1-of (c1 / complete-02)))
            :ARG0 (i0 / i)
            :location (a0 / amr-unknown)))

# ::snt What is the difference between portamento and glissando?
# ::tokens ["What", "is", "the", "difference", "between", "portamento", "and", "glissando", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "PERSON", "O", "PERSON", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "B", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "NNP", "CC", "NNP", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "portamento", "and", "glissando", "?"]
(d0 / differ-02
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "portamento" ))
      :ARG2 (e0 / event
            :name (n1 / name
                  :op1 "glissando" ))
      :ARG3 (a0 / amr-unknown))

# ::snt What should I do if I have an idea but can't work on it immediately?
# ::tokens ["What", "should", "I", "do", "if", "I", "have", "an", "idea", "but", "ca", "n't", "work", "on", "it", "immediately", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "MD", "PRP", "VB", "IN", "PRP", "VBP", "DT", "NN", "CC", "MD", "RB", "VB", "IN", "PRP", "RB", "."]
# ::lemmas ["what", "should", "i", "do", "if", "i", "have", "an", "idea", "but", "can", "not", "work", "on", "it", "immediately", "?"]
(r0 / recommend-01
      :ARG1 (d0 / do-02
            :ARG1 (a0 / amr-unknown)
            :ARG0 (i0 / i
                  :ARG0-of (w0 / work-01
                        :ARG1 i1
                        :time (i2 / immediate)))
            :condition (p0 / possible-01
                  :ARG1 w0
                  :polarity - )
            :condition (h0 / have-03
                  :ARG0 i0
                  :ARG1 (i1 / idea))))

# ::snt What is the best way to filter the Turkish coffee?
# ::tokens ["What", "is", "the", "best", "way", "to", "filter", "the", "Turkish", "coffee", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "NORP", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "DT", "JJ", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "filter", "the", "Turkish", "coffee", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (f0 / filter-02
            :ARG1 (c0 / coffee
                  :mod (c1 / country
                        :name (n0 / name
                              :op1 "Turkey" )))))

# ::snt What is the best way to clean a grater?
# ::tokens ["What", "is", "the", "best", "way", "to", "clean", "a", "grater", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "clean", "a", "grater", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (c0 / clean-01
            :ARG1 (g1 / grater))
      :domain (a0 / amr-unknown))

# ::snt What is the best way to clean a grater?
# ::tokens ["What", "is", "the", "best", "way", "to", "clean", "a", "grater", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "clean", "a", "grater", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (c0 / clean-01
            :ARG1 (g1 / grater))
      :domain (a0 / amr-unknown))

# ::snt What's the best way to store asparagus?
# ::tokens ["What", "'s", "the", "best", "way", "to", "store", "asparagus", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "asparagus", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (a1 / asparagus)))

# ::snt What is the difference between a riff and a lick?
# ::tokens ["What", "is", "the", "difference", "between", "a", "riff", "and", "a", "lick", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "DT", "NN", "CC", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "a", "riff", "and", "a", "lick", "?"]
(d0 / differ-02
      :ARG1 (r0 / riff)
      :ARG2 (k0 / kick-01)
      :ARG3 (a0 / amr-unknown))

# ::snt what is the difference between Erebor and Moria?
# ::tokens ["what", "is", "the", "difference", "between", "Erebor", "and", "Moria", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "LOC", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "B", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "NNP", "CC", "NNP", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "Erebor", "and", "Moria", "?"]
(d0 / differ-02
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Erebor" ))
      :ARG2 (p1 / person
            :name (n1 / name
                  :op1 "Moria" ))
      :ARG3 (a0 / amr-unknown))

# ::snt What is the best way to clean a grater?
# ::tokens ["What", "is", "the", "best", "way", "to", "clean", "a", "grater", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "clean", "a", "grater", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (c0 / clean-01
            :ARG1 (g1 / grater))
      :domain (a0 / amr-unknown))

# ::snt What's the best way to keep my garage from freezing?
# ::tokens ["What", "'s", "the", "best", "way", "to", "keep", "my", "garage", "from", "freezing", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "PRP$", "NN", "IN", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "keep", "my", "garage", "from", "freezing", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :manner-of (a0 / amr-unknown)
      :manner-of (k0 / keep-04
            :ARG1 (f0 / freeze-01)
            :ARG1 (g1 / garage
                  :poss (i0 / i))))

# ::snt What is the difference between a copula and a transitive verb?
# ::tokens ["What", "is", "the", "difference", "between", "a", "copula", "and", "a", "transitive", "verb", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "DT", "NN", "CC", "DT", "JJ", "NN", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "a", "copula", "and", "a", "transitive", "verb", "?"]
(d0 / differ-02
      :ARG1 (c0 / copula)
      :ARG2 (v0 / verb
            :ARG0-of (t0 / transitive))
      :ARG3 (a0 / amr-unknown))

# ::snt What is this stucco-like finish called?
# ::tokens ["What", "is", "this", "stucco", "-", "like", "finish", "called", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "HYPH", "JJ", "NN", "VBN", "."]
# ::lemmas ["what", "be", "this", "stucco", "-", "like", "finish", "call", "?"]
(c0 / call-01
      :ARG1 (a0 / amr-unknown)
      :ARG1 (f0 / finish
            :ARG1-of (t0 / this)
            :ARG1-of (r0 / resemble-01
                  :ARG2 (s0 / stucco))))

# ::snt What kind of bug is this?
# ::tokens ["What", "kind", "of", "bug", "is", "this", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "IN", "NN", "VBZ", "DT", "."]
# ::lemmas ["what", "kind", "of", "bug", "be", "this", "?"]
(b0 / bug
      :mod (k0 / kind
            :mod (t0 / this))
      :domain (a0 / amr-unknown))

# ::snt What is the best way to start learning a new course?
# ::tokens ["What", "is", "the", "best", "way", "to", "start", "learning", "a", "new", "course", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "VBG", "DT", "JJ", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "start", "learn", "a", "new", "course", "?"]
(w0 / way
      :ARG1-of (s0 / start-01
            :ARG1 (l0 / learn-01
                  :ARG1 (c0 / course
                        :ARG1-of (n0 / new-01))))
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown))

# ::snt What is the difference between portamento and glissando?
# ::tokens ["What", "is", "the", "difference", "between", "portamento", "and", "glissando", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "PERSON", "O", "PERSON", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "B", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "NNP", "CC", "NNP", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "portamento", "and", "glissando", "?"]
(d0 / differ-02
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "portamento" ))
      :ARG2 (e0 / event
            :name (n1 / name
                  :op1 "glissando" ))
      :ARG3 (a0 / amr-unknown))

# ::snt what is the difference between Erebor and Moria?
# ::tokens ["what", "is", "the", "difference", "between", "Erebor", "and", "Moria", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "LOC", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "B", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "NNP", "CC", "NNP", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "Erebor", "and", "Moria", "?"]
(d0 / differ-02
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Erebor" ))
      :ARG2 (p1 / person
            :name (n1 / name
                  :op1 "Moria" ))
      :ARG3 (a0 / amr-unknown))

# ::snt What is the best way to fix this garage floor?
# ::tokens ["What", "is", "the", "best", "way", "to", "fix", "this", "garage", "floor", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "DT", "NN", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "fix", "this", "garage", "floor", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :manner-of (f0 / fix-02
            :ARG1 (f1 / floor
                  :mod (t0 / this)
                  :mod (g1 / garage)))
      :domain (a0 / amr-unknown))

# ::snt What is the difference between chicken cubes and ground chicken?
# ::tokens ["What", "is", "the", "difference", "between", "chicken", "cubes", "and", "ground", "chicken", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "NN", "NNS", "CC", "NN", "NN", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "chicken", "cube", "and", "ground", "chicken", "?"]
(d0 / differ-02
      :ARG1 (c0 / cube
            :mod (g0 / ground))
      :ARG2 (a0 / amr-unknown)
      :ARG2 (c1 / chicken))

# ::snt What's the best way to store asparagus?
# ::tokens ["What", "'s", "the", "best", "way", "to", "store", "asparagus", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "asparagus", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (a1 / asparagus)))

# ::snt What type of asbestos is this?
# ::tokens ["What", "type", "of", "asbestos", "is", "this", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "IN", "NN", "VBZ", "DT", "."]
# ::lemmas ["what", "type", "of", "asbestos", "be", "this", "?"]
(a0 / asbestos
      :mod (t0 / type
            :mod (a1 / amr-unknown)
            :mod (t1 / this)))

# ::snt "What does the ""to"" mean in the General Welfare Clause?"
# ::tokens ["\"", "What", "does", "the", "\"", "\"", "to", "\"", "\"", "mean", "in", "the", "General", "Welfare", "Clause", "?", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "ORG", "ORG", "ORG", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "I", "O", "O"]
# ::pos_tags ["``", "WP", "VBZ", "DT", "``", "``", "TO", "''", "``", "VB", "IN", "DT", "NNP", "NNP", "NNP", ".", "''"]
# ::lemmas ["\"", "what", "do", "the", "\"", "\"", "to", "\"", "\"", "mean", "in", "the", "General", "Welfare", "Clause", "?", "\""]
(m0 / mean-01
      :ARG1 (l0 / law
            :name (n0 / name
                  :op1 "General" 
                  :op2 "Welfare" 
                  :op3 "Clause" ))
      :ARG2 (a0 / amr-unknown))

# ::snt "What is the meaning of ""$N industry""?"
# ::tokens ["\"", "What", "is", "the", "meaning", "of", "\"", "\"", "$", "N", "industry", "\"", "\"", "?", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "WORK_OF_ART", "WORK_OF_ART", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "WP", "VBZ", "DT", "NN", "IN", "``", "``", "$", "NN", "NN", "''", "''", ".", "''"]
# ::lemmas ["\"", "what", "be", "the", "meaning", "of", "\"", "\"", "$", "N", "industry", "\"", "\"", "?", "\""]
(a0 / amr-unknown
      :ARG1-of (m0 / mean-01
            :ARG1 (m1 / monetary-quantity
                  :quant (i0 / industry)
                  :quant (d0 / dollar)
                  :quant 1 )))

# ::snt What is the difference between portamento and glissando?
# ::tokens ["What", "is", "the", "difference", "between", "portamento", "and", "glissando", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "PERSON", "O", "PERSON", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "B", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "NNP", "CC", "NNP", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "portamento", "and", "glissando", "?"]
(d0 / differ-02
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "portamento" ))
      :ARG2 (e0 / event
            :name (n1 / name
                  :op1 "glissando" ))
      :ARG3 (a0 / amr-unknown))

# ::snt What is the significance of the artwork?
# ::tokens ["What", "is", "the", "significance", "of", "the", "artwork", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "significance", "of", "the", "artwork", "?"]
(s0 / significant-02
      :ARG1 (a0 / artwork)
      :ARG0 (a1 / amr-unknown))

# ::snt What kind of board is this, and where can I get some?
# ::tokens ["What", "kind", "of", "board", "is", "this", ",", "and", "where", "can", "I", "get", "some", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "IN", "NN", "VBZ", "DT", ",", "CC", "WRB", "MD", "PRP", "VB", "DT", "."]
# ::lemmas ["what", "kind", "of", "board", "be", "this", ",", "and", "where", "can", "i", "get", "some", "?"]
(a0 / and
      :op1 (b0 / board
            :mod (k0 / kind
                  :mod (t0 / this))
            :domain (a1 / amr-unknown))
      :op2 (p0 / possible-01
            :ARG1 (g0 / get-01
                  :ARG1 (i0 / i)
                  :ARG1 (a2 / amr-unknown)
                  :ARG1 (s0 / some))))

# ::snt What is the best way to store fresh berries?
# ::tokens ["What", "is", "the", "best", "way", "to", "store", "fresh", "berries", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "JJ", "NNS", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "fresh", "berry", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (b0 / berry
                  :ARG1-of (f0 / fresh-04))))

# ::snt What is the difference between a tortoise and a turtle?
# ::tokens ["What", "is", "the", "difference", "between", "a", "tortoise", "and", "a", "turtle", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "DT", "NN", "CC", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "a", "tortoise", "and", "a", "turtle", "?"]
(d0 / differ-02
      :ARG1 (t0 / tortoise)
      :ARG2 (a0 / amr-unknown)
      :ARG2 (t1 / turtle))

# ::snt What is the difference between balls in Test and ODI Cricket?
# ::tokens ["What", "is", "the", "difference", "between", "balls", "in", "Test", "and", "ODI", "Cricket", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "ORG", "O", "ORG", "ORG", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "O", "B", "I", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "IN", "NNS", "IN", "NNP", "CC", "NNP", "NNP", "."]
# ::lemmas ["what", "be", "the", "difference", "between", "ball", "in", "Test", "and", "ODI", "Cricket", "?"]
(d0 / differ-02
      :ARG1 (b0 / ball)
      :ARG2 (a0 / amr-unknown)
      :ARG2 (a1 / and
            :op1 (t0 / team
                  :name (n0 / name
                        :op1 "Test" 
                        :op2 "Cricket" ))
            :op2 (t1 / team
                  :name (n1 / name
                        :op1 "ODI" ))))

# ::snt What's the best way to store asparagus?
# ::tokens ["What", "'s", "the", "best", "way", "to", "store", "asparagus", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "JJS", "NN", "TO", "VB", "NN", "."]
# ::lemmas ["what", "be", "the", "good", "way", "to", "store", "asparagus", "?"]
(w0 / way
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (a0 / amr-unknown)
      :manner-of (s0 / store-01
            :ARG1 (a1 / asparagus)))

# ::snt A document is represented as a vector.
# ::tokens ["A", "document", "is", "represented", "as", "a", "vector", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["a", "document", "be", "represent", "as", "a", "vector", "."]
(r0 / represent-01
      :ARG1 (d0 / document)
      :ARG2 (v0 / vector))

# ::snt The way that a 'term' is defined depends on the application.
# ::tokens ["The", "way", "that", "a", "'", "term", "'", "is", "defined", "depends", "on", "the", "application", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "WDT", "DT", "``", "NN", "''", "VBZ", "VBN", "VBZ", "IN", "DT", "NN", "."]
# ::lemmas ["the", "way", "that", "a", "'", "term", "'", "be", "define", "depend", "on", "the", "application", "."]
(d0 / depend-01
      :ARG1 (w0 / way
            :manner-of (d1 / define-01
                  :ARG1 (t0 / term)))
      :ARG1 (a0 / application))

# ::snt "Thus, the ""program"" is the optimal plan for action that is produced."
# ::tokens ["\"", "Thus", ",", "the", "\"", "\"", "program", "\"", "\"", "is", "the", "optimal", "plan", "for", "action", "that", "is", "produced", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "RB", ",", "DT", "``", "``", "NN", "''", "''", "VBZ", "DT", "JJ", "NN", "IN", "NN", "WDT", "VBZ", "VBN", ".", "''"]
# ::lemmas ["\"", "thus", ",", "the", "\"", "\"", "program", "\"", "\"", "be", "the", "optimal", "plan", "for", "action", "that", "be", "produce", ".", "\""]
(c0 / cause-01
      :ARG1 (p0 / plan-01
            :ARG1 (a0 / act-02)
            :mod (p1 / program)
            :mod (o0 / optimal)
            :ARG1-of (p2 / produce-01
                  :ARG1 a0)))

# ::snt "Therefore, the ""program"" is the optimal plan for action that is produced."
# ::tokens ["\"", "Therefore", ",", "the", "\"", "\"", "program", "\"", "\"", "is", "the", "optimal", "plan", "for", "action", "that", "is", "produced", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "RB", ",", "DT", "``", "``", "NN", "''", "''", "VBZ", "DT", "JJ", "NN", "IN", "NN", "WDT", "VBZ", "VBN", ".", "''"]
# ::lemmas ["\"", "therefore", ",", "the", "\"", "\"", "program", "\"", "\"", "be", "the", "optimal", "plan", "for", "action", "that", "be", "produce", ".", "\""]
(c0 / cause-01
      :ARG1 (p0 / plan-01
            :ARG1 (a0 / act-02)
            :mod (p1 / program)
            :mod (o0 / optimal)
            :ARG1-of (p2 / produce-01
                  :ARG1 a0)))

# ::snt P(B) is the prior or marginal probability of B, and acts as a normalizing constant.
# ::tokens ["P(B", ")", "is", "the", "prior", "or", "marginal", "probability", "of", "B", ",", "and", "acts", "as", "a", "normalizing", "constant", "."]
# ::ner_tags ["ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "-RRB-", "VBZ", "DT", "JJ", "CC", "JJ", "NN", "IN", "NN", ",", "CC", "VBZ", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["P(B", ")", "be", "the", "prior", "or", "marginal", "probability", "of", "b", ",", "and", "act", "as", "a", "normalizing", "constant", "."]
(a0 / and
      :op1 (o0 / or
            :op1 (t0 / thing
                  :name (n0 / name
                        :op1 "P(B" )
                  :domain (p1 / prior))
            :op2 (p0 / probability
                  :domain (m0 / marginal-02)
                  :domain (p2 / person
                        :name (n2 / name
                              :op1 "B" ))))
      :op2 (a1 / act-01
            :ARG1 (c0 / constant
                  :ARG0-of (n1 / normalize-01))))

# ::snt In a word, we can solve a problem with optimal substructure using a three-step process.
# ::tokens ["In", "a", "word", ",", "we", "can", "solve", "a", "problem", "with", "optimal", "substructure", "using", "a", "three", "-", "step", "process", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "NN", ",", "PRP", "MD", "VB", "DT", "NN", "IN", "JJ", "NN", "VBG", "DT", "CD", "HYPH", "NN", "NN", "."]
# ::lemmas ["in", "a", "word", ",", "we", "can", "solve", "a", "problem", "with", "optimal", "substructure", "use", "a", "three", "-", "step", "process", "."]
(p0 / possible-01
      :ARG1 (s0 / solve-01
            :ARG1 (p1 / problem
                  :topic (s1 / substructure
                        :mod (o0 / optimal)))
            :ARG0 (w1 / we)
            :manner (u0 / use-01
                  :ARG0 w1
                  :ARG1 (p2 / process-02
                        :ARG1 (s2 / step-01
                              :quant 3 ))))
      :prep-in (w0 / word-01))

# ::snt It is usually used to calculate posterior probabilities given observations.
# ::tokens ["It", "is", "usually", "used", "to", "calculate", "posterior", "probabilities", "given", "observations", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VBN", "TO", "VB", "NN", "NNS", "VBN", "NNS", "."]
# ::lemmas ["it", "be", "usually", "use", "to", "calculate", "posterior", "probability", "give", "observation", "."]
(u0 / use-01
      :ARG1 (i0 / it)
      :mod (u1 / usual)
      :ARG2 (c0 / calculate-01
            :ARG0 i0
            :ARG1 (p0 / probability
                  :mod (d0 / differ-02))
            :ARG1 (o0 / observe-01
                  :ARG1-of (g0 / give-01))))

# ::snt The definition of term is dependent on the application.
# ::tokens ["The", "definition", "of", "term", "is", "dependent", "on", "the", "application", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "NN", "VBZ", "JJ", "IN", "DT", "NN", "."]
# ::lemmas ["the", "definition", "of", "term", "be", "dependent", "on", "the", "application", "."]
(d0 / depend-01
      :ARG1 (a0 / apply-02)
      :ARG0 (d1 / define-01
            :ARG1 (t0 / term)))

# ::snt It was used in the first time in the SMART Information Retrieval System.
# ::tokens ["It", "was", "used", "in", "the", "first", "time", "in", "the", "SMART", "Information", "Retrieval", "System", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "ORDINAL", "O", "O", "FAC", "FAC", "FAC", "FAC", "FAC", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "B", "I", "I", "I", "I", "O"]
# ::pos_tags ["PRP", "VBD", "VBN", "IN", "DT", "JJ", "NN", "IN", "DT", "NNP", "NNP", "NNP", "NNP", "."]
# ::lemmas ["it", "be", "use", "in", "the", "first", "time", "in", "the", "SMART", "Information", "Retrieval", "System", "."]
(u0 / use-01
      :ARG1 (i0 / it)
      :ARG2 (t0 / thing
            :name (n0 / name
                  :op1 "SMART" 
                  :op2 "Information" 
                  :op3 "Retrieval" 
                  :op4 "System" ))
      :ord (o0 / ordinal-entity
            :value 1 ))

# ::snt "Thus, the ""program"" is the optimal plan of action that is being produced."
# ::tokens ["\"", "Thus", ",", "the", "\"", "\"", "program", "\"", "\"", "is", "the", "optimal", "plan", "of", "action", "that", "is", "being", "produced", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "RB", ",", "DT", "``", "``", "NN", "''", "''", "VBZ", "DT", "JJ", "NN", "IN", "NN", "WDT", "VBZ", "VBG", "VBN", ".", "''"]
# ::lemmas ["\"", "thus", ",", "the", "\"", "\"", "program", "\"", "\"", "be", "the", "optimal", "plan", "of", "action", "that", "be", "be", "produce", ".", "\""]
(c0 / cause-01
      :ARG1 (p0 / plan-01
            :ARG1 (a0 / act-02)
            :mod (p1 / produce-01)
            :mod (o0 / optimal)
            :domain (p2 / program)))

# ::snt It is usually be used to compute posterior probabilities given observations.
# ::tokens ["It", "is", "usually", "be", "used", "to", "compute", "posterior", "probabilities", "given", "observations", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VB", "VBN", "TO", "VB", "NN", "NNS", "VBN", "NNS", "."]
# ::lemmas ["it", "be", "usually", "be", "use", "to", "compute", "posterior", "probability", "give", "observation", "."]
(u0 / use-01
      :ARG1 (i0 / it)
      :mod (u1 / usual)
      :ARG2 (c0 / compile-01
            :ARG0 i0
            :ARG1 (p0 / probability
                  :mod (d0 / differ-02))
            :ARG1-of (o0 / observe-01
                  :ARG1-of (g0 / give-01))))

# ::snt The method takes much less time than naive methods.
# ::tokens ["The", "method", "takes", "much", "less", "time", "than", "naive", "methods", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "RB", "JJR", "NN", "IN", "JJ", "NNS", "."]
# ::lemmas ["the", "method", "take", "much", "less", "time", "than", "naive", "method", "."]
(t0 / take-10
      :ARG1 (t1 / time
            :ARG1-of (h0 / have-quant-91
                  :ARG3 (l0 / less
                        :quant (m2 / much))
                  :ARG4 (m1 / method
                        :mod (n0 / naive))))
      :ARG0 (m0 / method))

# ::snt This is a much quicker method than other more naive methods.
# ::tokens ["This", "is", "a", "much", "quicker", "method", "than", "other", "more", "naive", "methods", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "DT", "RB", "JJR", "NN", "IN", "JJ", "RBR", "JJ", "NNS", "."]
# ::lemmas ["this", "be", "a", "much", "quick", "method", "than", "other", "more", "naive", "method", "."]
(h0 / have-degree-91
      :ARG1 (m0 / method
            :mod (t0 / this))
      :ARG2 (q0 / quick-02
            :ARG1 m0)
      :ARG3 (m1 / more
            :quant (m3 / much))
      :ARG4 (m2 / method
            :mod (o0 / other)
            :ARG1-of (h1 / have-degree-91
                  :ARG2 (n0 / naive)
                  :ARG3 (m4 / more
                        :quant (m5 / much)))))

# ::snt The definition of term depends on the application.
# ::tokens ["The", "definition", "of", "term", "depends", "on", "the", "application", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "NN", "VBZ", "IN", "DT", "NN", "."]
# ::lemmas ["the", "definition", "of", "term", "depend", "on", "the", "application", "."]
(d0 / depend-01
      :ARG1 (a0 / apply-02)
      :ARG0 (d1 / define-01
            :ARG1 (t0 / term)))

# ::snt At the same time, Bayesians describe probabilities in terms of beliefs and degrees of uncertainty.
# ::tokens ["At", "the", "same", "time", ",", "Bayesians", "describe", "probabilities", "in", "terms", "of", "beliefs", "and", "degrees", "of", "uncertainty", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "NORP", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "JJ", "NN", ",", "NNPS", "VBP", "NNS", "IN", "NNS", "IN", "NNS", "CC", "NNS", "IN", "NN", "."]
# ::lemmas ["at", "the", "same", "time", ",", "Bayesians", "describe", "probability", "in", "term", "of", "belief", "and", "degree", "of", "uncertainty", "."]
(d0 / describe-01
      :ARG1 (p0 / probability)
      :ARG0 (p1 / person
            :mod (n0 / name
                  :op1 "Bayesians" ))
      :ARG2 (t0 / time
            :ARG1-of (s0 / same-01))
      :ARG2 (a0 / and
            :op1 (t1 / thing
                  :ARG1-of (b0 / believe-01))
            :op2 (d1 / degree
                  :degree-of (k0 / know-01
                        :polarity - ))))

# ::snt It is used in information filtering, indexing, relevancy rankings and information retrieval.
# ::tokens ["It", "is", "used", "in", "information", "filtering", ",", "indexing", ",", "relevancy", "rankings", "and", "information", "retrieval", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "VBN", "IN", "NN", "NN", ",", "NN", ",", "NN", "NNS", "CC", "NN", "NN", "."]
# ::lemmas ["it", "be", "use", "in", "information", "filtering", ",", "indexing", ",", "relevancy", "ranking", "and", "information", "retrieval", "."]
(u0 / use-01
      :ARG1 (i0 / it)
      :ARG2 (a0 / and
            :op1 (f0 / filter-02
                  :ARG1 (i1 / information))
            :op2 (m0 / model-01)
            :op3 (t0 / track-01
                  :ARG1 (r1 / relevant-01))
            :op4 (r0 / retrieve-01
                  :ARG1 i1
                  :ARG1 (i2 / information))))

# ::snt Several different ways of computing these values, additionally known as (term) weights, have been developed.
# ::tokens ["Several", "different", "ways", "of", "computing", "these", "values", ",", "additionally", "known", "as", "(", "term", ")", "weights", ",", "have", "been", "developed", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "JJ", "NNS", "IN", "VBG", "DT", "NNS", ",", "RB", "VBN", "IN", "-LRB-", "NN", "-RRB-", "NNS", ",", "VBP", "VBN", "VBN", "."]
# ::lemmas ["several", "different", "way", "of", "compute", "these", "value", ",", "additionally", "know", "as", "(", "term", ")", "weight", ",", "have", "be", "develop", "."]
(d0 / develop-02
      :ARG1 (w0 / way
            :quant (s0 / several)
            :ARG1-of (d1 / differ-02)
            :manner-of (c0 / copy-01
                  :ARG1 (v0 / value
                        :mod (t0 / this)
                        :ARG1-of (k0 / know-02
                              :mod (w1 / weight)
                              :mod (a0 / additional))))))

# ::snt If a term appears in the document then its value in the vector is non-zero.
# ::tokens ["If", "a", "term", "appears", "in", "the", "document", "then", "its", "value", "in", "the", "vector", "is", "non", "-", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["IN", "DT", "NN", "VBZ", "IN", "DT", "NN", "RB", "PRP$", "NN", "IN", "DT", "NN", "VBZ", "JJ", "JJ", "CD", "."]
# ::lemmas ["if", "a", "term", "appear", "in", "the", "document", "then", "its", "value", "in", "the", "vector", "be", "non", "-", "zero", "."]
(h0 / have-condition-91
      :ARG1 (z0 / zero
            :polarity - 
            :domain (v0 / value
                  :poss t0
                  :location (v1 / vector)))
      :ARG2 (a0 / appear-01
            :ARG1 (t0 / term)
            :location (d0 / document)))

# ::snt A link to a page is seen as a vote of support.
# ::tokens ["A", "link", "to", "a", "page", "is", "seen", "as", "a", "vote", "of", "support", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "IN", "NN", "."]
# ::lemmas ["a", "link", "to", "a", "page", "be", "see", "as", "a", "vote", "of", "support", "."]
(s0 / see-01
      :ARG1 (t0 / thing
            :ARG3-of (l0 / link-01
                  :ARG1 (p0 / page)))
      :ARG2 (v0 / vote-01
            :ARG1 (s1 / support-01)))

# ::snt For example, a schedule of events at an exhibition is sometimes called a programme.
# ::tokens ["For", "example", ",", "a", "schedule", "of", "events", "at", "an", "exhibition", "is", "sometimes", "called", "a", "programme", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", ",", "DT", "NN", "IN", "NNS", "IN", "DT", "NN", "VBZ", "RB", "VBN", "DT", "NN", "."]
# ::lemmas ["for", "example", ",", "a", "schedule", "of", "event", "at", "an", "exhibition", "be", "sometimes", "call", "a", "programme", "."]
(e0 / exemplify-01
      :ARG0 (c0 / call-01
            :ARG1 (s0 / sometimes)
            :ARG2 (p0 / program)
            :ARG1 (s1 / schedule-01
                  :ARG1 (e1 / event
                        :location (e2 / exhibit-01)))))

# ::snt However, the patent is assigned to Stanford University and not to Google.
# ::tokens ["However", ",", "the", "patent", "is", "assigned", "to", "Stanford", "University", "and", "not", "to", "Google", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "ORG", "ORG", "O", "O", "O", "ORG", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "I", "O", "O", "O", "B", "O"]
# ::pos_tags ["RB", ",", "DT", "NN", "VBZ", "VBN", "IN", "NNP", "NNP", "CC", "RB", "IN", "NNP", "."]
# ::lemmas ["however", ",", "the", "patent", "be", "assign", "to", "Stanford", "University", "and", "not", "to", "Google", "."]
(c0 / contrast-01
      :ARG2 (a0 / and
            :op1 (a1 / assign-01
                  :ARG1 (p0 / patent-01)
                  :ARG2 (u0 / university
                        :name (n0 / name
                              :op1 "Stanford" 
                              :op2 "University" )))
            :op2 (a2 / assign-01
                  :ARG1 p0
                  :ARG2 u0
                  :ARG2 (c1 / company
                        :name (n1 / name
                              :op1 "Google" ))
                  :polarity - )))

# ::snt The definition of a term depends on the application.
# ::tokens ["The", "definition", "of", "a", "term", "depends", "on", "the", "application", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NN", "VBZ", "IN", "DT", "NN", "."]
# ::lemmas ["the", "definition", "of", "a", "term", "depend", "on", "the", "application", "."]
(d0 / depend-01
      :ARG1 (a0 / apply-02)
      :ARG0 (d1 / define-01
            :ARG1 (t0 / term)))

# ::snt Inheritance in object oriented programming is a way to form new classes using classes that have already been defined.
# ::tokens ["Inheritance", "in", "object", "oriented", "programming", "is", "a", "way", "to", "form", "new", "classes", "using", "classes", "that", "have", "already", "been", "defined", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "IN", "NN", "VBN", "NN", "VBZ", "DT", "NN", "TO", "VB", "JJ", "NNS", "VBG", "NNS", "WDT", "VBP", "RB", "VBN", "VBN", "."]
# ::lemmas ["inheritance", "in", "object", "orient", "programming", "be", "a", "way", "to", "form", "new", "class", "use", "class", "that", "have", "already", "be", "define", "."]
(w0 / way
      :domain (f0 / form-01
            :ARG1 (c0 / class
                  :ARG1-of (n0 / new-01))
            :manner (u0 / use-01
                  :ARG1 (c1 / class
                        :ARG1-of (d0 / define-01
                              :time (a0 / already)))))
      :domain (i0 / inherit-01
            :ARG1 (p0 / program-01
                  :ARG2 (o0 / orient-01
                        :ARG2 (o1 / object)))))

# ::snt "Thus, the ""program"" is the optimal plan for action that is produced."
# ::tokens ["\"", "Thus", ",", "the", "\"", "\"", "program", "\"", "\"", "is", "the", "optimal", "plan", "for", "action", "that", "is", "produced", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "RB", ",", "DT", "``", "``", "NN", "''", "''", "VBZ", "DT", "JJ", "NN", "IN", "NN", "WDT", "VBZ", "VBN", ".", "''"]
# ::lemmas ["\"", "thus", ",", "the", "\"", "\"", "program", "\"", "\"", "be", "the", "optimal", "plan", "for", "action", "that", "be", "produce", ".", "\""]
(c0 / cause-01
      :ARG1 (p0 / plan-01
            :ARG1 (a0 / act-02)
            :mod (p1 / program)
            :mod (o0 / optimal)
            :ARG1-of (p2 / produce-01
                  :ARG1 a0)))

# ::snt "The ""program"" is the optimal plan for action that is produced."
# ::tokens ["\"", "The", "\"", "\"", "program", "\"", "\"", "is", "the", "optimal", "plan", "for", "action", "that", "is", "produced", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "DT", "``", "``", "NN", "''", "''", "VBZ", "DT", "JJ", "NN", "IN", "NN", "WDT", "VBZ", "VBN", ".", "''"]
# ::lemmas ["\"", "the", "\"", "\"", "program", "\"", "\"", "be", "the", "optimal", "plan", "for", "action", "that", "be", "produce", ".", "\""]
(p0 / plan-01
      :ARG1 (a0 / act-02)
      :mod (p1 / program)
      :mod (o0 / optimal)
      :ARG1-of (p2 / produce-01
            :ARG1 a0))

# ::snt A term which occurs in the document has a value in the vector of non-zero.
# ::tokens ["A", "term", "which", "occurs", "in", "the", "document", "has", "a", "value", "in", "the", "vector", "of", "non", "-", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["DT", "NN", "WDT", "VBZ", "IN", "DT", "NN", "VBZ", "DT", "NN", "IN", "DT", "NN", "IN", "JJ", "JJ", "CD", "."]
# ::lemmas ["a", "term", "which", "occur", "in", "the", "document", "have", "a", "value", "in", "the", "vector", "of", "non", "-", "zero", "."]
(v0 / value-01
      :ARG1 (t0 / term
            :location (d0 / document))
      :location (v1 / vector
            :consist-of (z0 / zero
                  :polarity - )))

# ::snt LIMITATION: There is some limitation of vector space model.
# ::tokens ["LIMITATION", ":", "There", "is", "some", "limitation", "of", "vector", "space", "model", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", ":", "EX", "VBZ", "DT", "NN", "IN", "NN", "NN", "NN", "."]
# ::lemmas ["LIMITATION", ":", "there", "be", "some", "limitation", "of", "vector", "space", "model", "."]
(i0 / imply-01
      :ARG0 (l0 / limit-01
            :ARG1 (m0 / model
                  :mod (s1 / space
                        :mod (v0 / vector)))
            :mod (s0 / some)))

# ::snt The vector space model has some limitations: 1.
# ::tokens ["The", "vector", "space", "model", "has", "some", "limitations", ":", "1", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBZ", "DT", "NNS", ":", "CD", "."]
# ::lemmas ["the", "vector", "space", "model", "have", "some", "limitation", ":", "1", "."]
(l0 / limit-01
      :ARG1 (m0 / model
            :mod (s0 / space
                  :mod (v0 / vector)))
      :li 1 )

# ::snt Typically terms are keywords, single words or longer phrases.
# ::tokens ["Typically", "terms", "are", "keywords", ",", "single", "words", "or", "longer", "phrases", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "NNS", "VBP", "NNS", ",", "JJ", "NNS", "CC", "JJR", "NNS", "."]
# ::lemmas ["typically", "term", "be", "keyword", ",", "single", "word", "or", "long", "phrase", "."]
(o0 / or
      :op1 (k0 / keyword
            :domain (t1 / term))
      :op2 (w0 / word-01
            :ARG1-of (s0 / single-02))
      :op3 (p0 / phrase-01
            :ARG1-of (l0 / long-03)
            :ARG1-of (h0 / have-degree-91
                  :ARG2 l0
                  :ARG3 (m0 / more)))
      :domain (t0 / typical-02))

# ::snt "It doesn't take into account any information about B, so it is ""prior""."
# ::tokens ["\"", "It", "does", "n't", "take", "into", "account", "any", "information", "about", "B", ",", "so", "it", "is", "\"", "\"", "prior", "\"", "\"", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "PRP", "VBZ", "RB", "VB", "IN", "NN", "DT", "NN", "IN", "NN", ",", "CC", "PRP", "VBZ", "``", "``", "JJ", "''", "''", ".", "''"]
# ::lemmas ["\"", "it", "do", "not", "take", "into", "account", "any", "information", "about", "b", ",", "so", "it", "be", "\"", "\"", "prior", "\"", "\"", ".", "\""]
(c0 / cause-01
      :ARG1 (p0 / prior
            :domain (i0 / it))
      :ARG0 (t0 / take-into-account-04
            :ARG1 (i1 / information
                  :topic (a0 / any)
                  :topic (p1 / person
                        :name (n0 / name
                              :op1 "B" )))
            :polarity - ))

# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
# ::tokens ["When", "a", "document", "is", "represented", "as", "a", "vector", ",", "each", "dimension", "corresponds", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", ",", "DT", "NN", "VBZ", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["when", "a", "document", "be", "represent", "as", "a", "vector", ",", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(c0 / correspond-02
      :ARG1 (t0 / term
            :ARG1-of (s0 / separate-02))
      :ARG1 (d0 / dimension
            :mod (e0 / each))
      :time (r0 / represent-01
            :ARG1 (d1 / document)
            :ARG2 (v0 / vector)))

# ::snt As a formal theorem, Bayes' theorem is valid in all common interpretations of probability.
# ::tokens ["As", "a", "formal", "theorem", ",", "Bayes", "'", "theorem", "is", "valid", "in", "all", "common", "interpretations", "of", "probability", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "JJ", "NN", ",", "NNP", "POS", "NN", "VBZ", "JJ", "IN", "DT", "JJ", "NNS", "IN", "NN", "."]
# ::lemmas ["as", "a", "formal", "theorem", ",", "Bayes", "'", "theorem", "be", "valid", "in", "all", "common", "interpretation", "of", "probability", "."]
(v0 / valid-02
      :ARG1 (t0 / theorem
            :mod (f0 / formal)
            :poss (p0 / person
                  :name (n0 / name
                        :op1 "Bayes" )))
      :ARG2 (i0 / interpret-01
            :ARG1 (p1 / probability)
            :mod (a0 / all)
            :ARG1-of (s0 / share-01)))

# ::snt The method is more effiecent than naive methods.
# ::tokens ["The", "method", "is", "more", "effiecent", "than", "naive", "methods", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "RBR", "JJ", "IN", "JJ", "NNS", "."]
# ::lemmas ["the", "method", "be", "more", "effiecent", "than", "naive", "method", "."]
(h0 / have-degree-91
      :ARG1 (m0 / method)
      :ARG2 (e0 / efficient-01)
      :ARG3 (m1 / more)
      :ARG4 (m2 / method
            :mod (n0 / naive)))

# ::snt Single words, keywords and occasionally longer phrases are used for terms.
# ::tokens ["Single", "words", ",", "keywords", "and", "occasionally", "longer", "phrases", "are", "used", "for", "terms", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNS", ",", "NNS", "CC", "RB", "JJR", "NNS", "VBP", "VBN", "IN", "NNS", "."]
# ::lemmas ["single", "word", ",", "keyword", "and", "occasionally", "long", "phrase", "be", "use", "for", "term", "."]
(u0 / use-01
      :ARG1 (a0 / and
            :op1 (w0 / word
                  :ARG1-of (s0 / single-02))
            :op2 (k0 / keyword)
            :op3 (p0 / phrase
                  :ARG1-of (h0 / have-degree-91
                        :ARG3 (m0 / more))
                  :ARG1-of (l0 / long-03)
                  :frequency (o0 / occasional)))
      :ARG2 (t0 / term))

# ::snt Generate the optimal solution of these computed values
# ::tokens ["Generate", "the", "optimal", "solution", "of", "these", "computed", "values"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "DT", "JJ", "NN", "IN", "DT", "VBN", "NNS"]
# ::lemmas ["generate", "the", "optimal", "solution", "of", "these", "compute", "value"]
(e0 / engineer-01
      :ARG1 (s0 / solve-01
            :ARG1 (v0 / value
                  :mod (t0 / this)
                  :ARG1-of (c0 / compile-01))
            :mod (o0 / optimal)))

# ::snt Several different ways have been developed of calculating these values (also known as term weights).
# ::tokens ["Several", "different", "ways", "have", "been", "developed", "of", "calculating", "these", "values", "(", "also", "known", "as", "term", "weights", ")", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "JJ", "NNS", "VBP", "VBN", "VBN", "IN", "VBG", "DT", "NNS", "-LRB-", "RB", "VBN", "IN", "NN", "NNS", "-RRB-", "."]
# ::lemmas ["several", "different", "way", "have", "be", "develop", "of", "calculate", "these", "value", "(", "also", "know", "as", "term", "weight", ")", "."]
(d0 / develop-02
      :ARG1 (w0 / way
            :quant (d1 / differ-02)
            :quant (c0 / calculate-01
                  :ARG1 (v0 / value
                        :mod (t0 / this)
                        :ARG1-of (k0 / know-02
                              :mod (a0 / also)
                              :ARG2 (w1 / weight
                                    :mod (t1 / term)))))
            :quant (s0 / several)))

# ::snt However, the key in Dynamic Programming is to determine the structure of optimal solutions.
# ::tokens ["However", ",", "the", "key", "in", "Dynamic", "Programming", "is", "to", "determine", "the", "structure", "of", "optimal", "solutions", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", ",", "DT", "NN", "IN", "NNP", "NNP", "VBZ", "TO", "VB", "DT", "NN", "IN", "JJ", "NNS", "."]
# ::lemmas ["however", ",", "the", "key", "in", "Dynamic", "Programming", "be", "to", "determine", "the", "structure", "of", "optimal", "solution", "."]
(c0 / contrast-01
      :ARG2 (k0 / key-02
            :ARG1 (d0 / determine-01
                  :ARG1 (s0 / structure-01
                        :ARG1 (s1 / solution
                              :mod (o0 / optimal))))
            :ARG2 (p0 / program-01
                  :mod (p1 / philosophy))))

# ::snt One of the best known methods is called tf-idf weighting.
# ::tokens ["One", "of", "the", "best", "known", "methods", "is", "called", "tf", "-", "idf", "weighting", "."]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["CD", "IN", "DT", "RBS", "VBN", "NNS", "VBZ", "VBN", "NNP", "HYPH", "NNP", "NN", "."]
# ::lemmas ["One", "of", "the", "well", "know", "method", "be", "call", "tf", "-", "idf", "weighting", "."]
(h0 / have-degree-91
      :ARG1 (m0 / method
            :ARG1-of (k0 / know-02
                  :ARG1-of (g1 / good-02)
                  :ARG1-of (h1 / have-degree-91
                        :ARG3 (m2 / most)))
            :ARG1-of (c0 / call-01
                  :ARG2 (n0 / name
                        :op1 "tf" 
                        :op2 "weighting" )))
      :ARG2 (g0 / good-02
            :ARG1 m0)
      :ARG3 (m1 / most))

# ::snt For instance, a finalized schedule of events at an exhibition is sometimes called a program.
# ::tokens ["For", "instance", ",", "a", "finalized", "schedule", "of", "events", "at", "an", "exhibition", "is", "sometimes", "called", "a", "program", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", ",", "DT", "JJ", "NN", "IN", "NNS", "IN", "DT", "NN", "VBZ", "RB", "VBN", "DT", "NN", "."]
# ::lemmas ["for", "instance", ",", "a", "finalized", "schedule", "of", "event", "at", "an", "exhibition", "be", "sometimes", "call", "a", "program", "."]
(e0 / exemplify-01
      :ARG0 (c0 / call-01
            :ARG1 (p0 / program)
            :frequency (s0 / sometimes)
            :ARG1 (s1 / schedule-01
                  :ARG1 (e1 / event
                        :location (e2 / exhibit-01))
                  :ARG1-of (f0 / finalize-01))))

# ::snt Characterise structure of an optimal solution.
# ::tokens ["Characterise", "structure", "of", "an", "optimal", "solution", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["characterise", "structure", "of", "an", "optimal", "solution", "."]
(c0 / characteristic-02
      :ARG1 (s0 / structure
            :poss (s1 / solve-01
                  :mod (o0 / optimal))))

# ::snt It is used in information retrieval and was first used in the SMART Information Retrieval System.
# ::tokens ["It", "is", "used", "in", "information", "retrieval", "and", "was", "first", "used", "in", "the", "SMART", "Information", "Retrieval", "System", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "VBN", "IN", "NN", "NN", "CC", "VBD", "RB", "VBN", "IN", "DT", "NNP", "NNP", "NNP", "NNP", "."]
# ::lemmas ["it", "be", "use", "in", "information", "retrieval", "and", "be", "first", "use", "in", "the", "SMART", "Information", "Retrieval", "System", "."]
(a0 / and
      :op1 (u0 / use-01
            :ARG1 (i0 / it)
            :ARG2 (r0 / retrieve-01
                  :ARG1 (i1 / information)))
      :op2 (u1 / use-01
            :ARG1 i0
            :ARG2 (t0 / thing
                  :name (n0 / name
                        :op1 "SMART" 
                        :op2 "Information" 
                        :op3 "Retrieval" 
                        :op4 "System" ))
            :ord (o0 / ordinal-entity
                  :value 1 )))

# ::snt A term which occurs in the document has a value in the vector of non-zero.
# ::tokens ["A", "term", "which", "occurs", "in", "the", "document", "has", "a", "value", "in", "the", "vector", "of", "non", "-", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["DT", "NN", "WDT", "VBZ", "IN", "DT", "NN", "VBZ", "DT", "NN", "IN", "DT", "NN", "IN", "JJ", "JJ", "CD", "."]
# ::lemmas ["a", "term", "which", "occur", "in", "the", "document", "have", "a", "value", "in", "the", "vector", "of", "non", "-", "zero", "."]
(v0 / value-01
      :ARG1 (t0 / term
            :location (d0 / document))
      :location (v1 / vector
            :consist-of (z0 / zero
                  :polarity - )))

# ::snt Other ways of computing these values, or weights, have been developed.
# ::tokens ["Other", "ways", "of", "computing", "these", "values", ",", "or", "weights", ",", "have", "been", "developed", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNS", "IN", "VBG", "DT", "NNS", ",", "CC", "NNS", ",", "VBP", "VBN", "VBN", "."]
# ::lemmas ["other", "way", "of", "compute", "these", "value", ",", "or", "weight", ",", "have", "be", "develop", "."]
(d0 / develop-02
      :ARG1 (w0 / way
            :mod (o0 / other)
            :manner-of (c0 / comprise-01
                  :ARG1 (o1 / or
                        :op1 (v0 / value
                              :mod (t0 / this))
                        :op2 (w1 / weight)))))

# ::snt Many different ways of calculating these values, also known as (term) weights, have been developed.
# ::tokens ["Many", "different", "ways", "of", "calculating", "these", "values", ",", "also", "known", "as", "(", "term", ")", "weights", ",", "have", "been", "developed", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "JJ", "NNS", "IN", "VBG", "DT", "NNS", ",", "RB", "VBN", "IN", "-LRB-", "NN", "-RRB-", "NNS", ",", "VBP", "VBN", "VBN", "."]
# ::lemmas ["many", "different", "way", "of", "calculate", "these", "value", ",", "also", "know", "as", "(", "term", ")", "weight", ",", "have", "be", "develop", "."]
(d0 / develop-02
      :ARG1 (w0 / way
            :quant (m0 / many)
            :ARG1-of (d1 / differ-02)
            :manner-of (k0 / know-02
                  :mod (a0 / also)
                  :ARG2 (w1 / weight))
            :manner-of (c0 / calculate-01
                  :ARG1 (v0 / value
                        :mod (t0 / this)))))

# ::snt It is similar to divide and conquer, however is differentiated as its subproblems are not independent.
# ::tokens ["It", "is", "similar", "to", "divide", "and", "conquer", ",", "however", "is", "differentiated", "as", "its", "subproblems", "are", "not", "independent", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "JJ", "TO", "VB", "CC", "VB", ",", "RB", "VBZ", "VBN", "IN", "PRP$", "NNS", "VBP", "RB", "JJ", "."]
# ::lemmas ["it", "be", "similar", "to", "divide", "and", "conquer", ",", "however", "be", "differentiate", "as", "its", "subproblem", "be", "not", "independent", "."]
(c0 / contrast-01
      :ARG2 (d0 / differ-02
            :ARG1 (i0 / it
                  :domain-of (d1 / depend-01
                        :ARG0 (s0 / subproblem)
                        :polarity - ))
            :ARG1-of (c1 / cause-01
                  :ARG0 d1))
      :ARG1 (r0 / resemble-01
            :ARG2 (a0 / and
                  :op1 (d2 / divide-02)
                  :op2 (c2 / conquer-01))))

# ::snt In general, dynamic programming is used on optimisation problems, where the most efficient solution is needed.
# ::tokens ["In", "general", ",", "dynamic", "programming", "is", "used", "on", "optimisation", "problems", ",", "where", "the", "most", "efficient", "solution", "is", "needed", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "JJ", ",", "JJ", "NN", "VBZ", "VBN", "IN", "NN", "NNS", ",", "WRB", "DT", "RBS", "JJ", "NN", "VBZ", "VBN", "."]
# ::lemmas ["in", "general", ",", "dynamic", "programming", "be", "use", "on", "optimisation", "problem", ",", "where", "the", "most", "efficient", "solution", "be", "need", "."]
(u0 / use-01
      :ARG1 (p0 / program-01
            :mod (d0 / dynamic))
      :ARG1-of (g0 / general-02)
      :ARG2 (p1 / problem
            :topic (e0 / exist-01)
            :location-of (n0 / need-01
                  :ARG1 (t0 / thing
                        :ARG1-of (e1 / efficient-01)
                        :ARG1-of (h0 / have-degree-91
                              :ARG2 e1
                              :ARG3 (m0 / most))
                        :ARG2-of (s0 / solve-01)))))

# ::snt Bayes' theorem relates the conditional and marginal probabilities of two random events.
# ::tokens ["Bayes", "'", "theorem", "relates", "the", "conditional", "and", "marginal", "probabilities", "of", "two", "random", "events", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NN", "VBZ", "DT", "JJ", "CC", "JJ", "NNS", "IN", "CD", "JJ", "NNS", "."]
# ::lemmas ["Bayes", "'", "theorem", "relate", "the", "conditional", "and", "marginal", "probability", "of", "two", "random", "event", "."]
(r0 / relate-01
      :ARG1 (a0 / and
            :op1 (p0 / probability
                  :ARG1-of (c0 / condition-01))
            :op2 (p1 / probability
                  :ARG1-of (m0 / marginal-02))
            :poss (e0 / event
                  :mod (r1 / random)
                  :quant 2 ))
      :ARG0 (t0 / theorem
            :poss (p2 / person
                  :name (n0 / name
                        :op1 "Bayes" ))))

# ::snt Define value of optimal solution recursively.
# ::tokens ["Define", "value", "of", "optimal", "solution", "recursively", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "NN", "IN", "JJ", "NN", "RB", "."]
# ::lemmas ["define", "value", "of", "optimal", "solution", "recursively", "."]
(d0 / define-01
      :ARG1 (t0 / thing
            :ARG2-of (v0 / value-01
                  :ARG1 (s0 / solution
                        :mod (o0 / optimal))))
      :ARG0 (y0 / you)
      :manner (a0 / arbitrary-02)
      :mode imperative )

# ::snt It is often used to calculate posterior probabilities given observations.
# ::tokens ["It", "is", "often", "used", "to", "calculate", "posterior", "probabilities", "given", "observations", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VBN", "TO", "VB", "NN", "NNS", "VBN", "NNS", "."]
# ::lemmas ["it", "be", "often", "use", "to", "calculate", "posterior", "probability", "give", "observation", "."]
(u0 / use-01
      :ARG1 (i0 / it)
      :ARG2 (c0 / calculate-01
            :ARG0 i0
            :ARG1 (p0 / probability
                  :mod (d0 / differ-02))
            :ARG1 (o1 / observe-01
                  :ARG1-of (g0 / give-01)))
      :frequency (o0 / often))

# ::snt P(B) (a.k.a. the normalizing constant) is the prior or marginal probability of B.
# ::tokens ["P(B", ")", "(", "a.k.a", ".", "the", "normalizing", "constant", ")", "is", "the", "prior", "or", "marginal", "probability", "of", "B."]
# ::ner_tags ["ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "-RRB-", "-LRB-", "JJ", ".", "DT", "JJ", "NN", "-RRB-", "VBZ", "DT", "JJ", "CC", "JJ", "NN", "IN", "NNP"]
# ::lemmas ["P(B", ")", "(", "a.k.a", ".", "the", "normalizing", "constant", ")", "be", "the", "prior", "or", "marginal", "probability", "of", "B."]
(o0 / or
      :op1 (p0 / probability
            :mod (p2 / prior))
      :op2 (p1 / probability
            :ARG1-of (m0 / marginal-02))
      :domain (c0 / constant
            :domain (l0 / limit-01)))

# ::snt Bayes' theorem relates the conditional and marginal probabilities of two random events.
# ::tokens ["Bayes", "'", "theorem", "relates", "the", "conditional", "and", "marginal", "probabilities", "of", "two", "random", "events", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NN", "VBZ", "DT", "JJ", "CC", "JJ", "NNS", "IN", "CD", "JJ", "NNS", "."]
# ::lemmas ["Bayes", "'", "theorem", "relate", "the", "conditional", "and", "marginal", "probability", "of", "two", "random", "event", "."]
(r0 / relate-01
      :ARG1 (a0 / and
            :op1 (p0 / probability
                  :ARG1-of (c0 / condition-01))
            :op2 (p1 / probability
                  :ARG1-of (m0 / marginal-02))
            :poss (e0 / event
                  :mod (r1 / random)
                  :quant 2 ))
      :ARG0 (t0 / theorem
            :poss (p2 / person
                  :name (n0 / name
                        :op1 "Bayes" ))))

# ::snt Programming, in this sense, means finding an acceptable plan, an algorithm.
# ::tokens ["Programming", ",", "in", "this", "sense", ",", "means", "finding", "an", "acceptable", "plan", ",", "an", "algorithm", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", ",", "IN", "DT", "NN", ",", "VBZ", "VBG", "DT", "JJ", "NN", ",", "DT", "NN", "."]
# ::lemmas ["programming", ",", "in", "this", "sense", ",", "mean", "find", "an", "acceptable", "plan", ",", "an", "algorithm", "."]
(m0 / mean-01
      :ARG1 (d0 / design-01)
      :ARG2 (s0 / sense
            :mod (t0 / this))
      :ARG2 (f0 / find-01
            :ARG1 (t1 / thing
                  :ARG1-of (p0 / plan-01
                        :ARG1-of (a0 / accept-01
                              :ARG1-of (p1 / possible-01)))
                  :ARG1-of (m1 / mean-01
                        :ARG2 (a1 / algorithm)))))

# ::snt The vector space model has several disadvantages.
# ::tokens ["The", "vector", "space", "model", "has", "several", "disadvantages", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBZ", "JJ", "NNS", "."]
# ::lemmas ["the", "vector", "space", "model", "have", "several", "disadvantage", "."]
(a0 / advantage-01
      :ARG1 (m0 / model
            :mod (s1 / space
                  :mod (v0 / vector)))
      :polarity - 
      :ARG3 (s0 / several))

# ::snt A possible use for a vector space model is for retrieval and filtering of information.
# ::tokens ["A", "possible", "use", "for", "a", "vector", "space", "model", "is", "for", "retrieval", "and", "filtering", "of", "information", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "IN", "DT", "NN", "NN", "NN", "VBZ", "IN", "NN", "CC", "NN", "IN", "NN", "."]
# ::lemmas ["a", "possible", "use", "for", "a", "vector", "space", "model", "be", "for", "retrieval", "and", "filtering", "of", "information", "."]
(u0 / use-01
      :ARG1 (m0 / model
            :mod (s0 / space
                  :mod (v0 / vector)))
      :ARG1-of (p0 / possible-01)
      :ARG2 (a0 / and
            :op1 (r0 / retrieve-01
                  :ARG1 (i0 / information))
            :op2 (f0 / filter-02
                  :ARG1 i0)))

# ::snt One of the best known schemes is tf-idf (term frequency-inverse document frequency) weighting.
# ::tokens ["One", "of", "the", "best", "known", "schemes", "is", "tf", "-", "idf", "(", "term", "frequency", "-", "inverse", "document", "frequency", ")", "weighting", "."]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["CD", "IN", "DT", "RBS", "JJ", "NNS", "VBZ", "NNP", "HYPH", "NNP", "-LRB-", "NN", "NN", "HYPH", "NN", "NN", "NN", "-RRB-", "NN", "."]
# ::lemmas ["One", "of", "the", "well", "known", "scheme", "be", "tf", "-", "idf", "(", "term", "frequency", "-", "inverse", "document", "frequency", ")", "weighting", "."]
(h0 / have-degree-91
      :ARG1 (s0 / scheme
            :ARG1-of (m1 / mean-01
                  :ARG2 (s2 / scheme
                        :mod (k0 / know-02)
                        :name (n2 / name
                              :op1 "term" 
                              :op2 "frequency" )))
            :name (n0 / name
                  :op1 "tf" 
                  :op2 "frequency" ))
      :ARG2 (g0 / good-02
            :ARG1 s0)
      :ARG3 (m0 / most)
      :ARG5 (s1 / scheme
            :ARG1-of (n1 / name
                  :op1 "tf" 
                  :op2 "weighting" )))

# ::snt The order in which terms appear in the document is lost in a vector space representation.
# ::tokens ["The", "order", "in", "which", "terms", "appear", "in", "the", "document", "is", "lost", "in", "a", "vector", "space", "representation", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "WDT", "NNS", "VBP", "IN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "NN", "NN", "."]
# ::lemmas ["the", "order", "in", "which", "term", "appear", "in", "the", "document", "be", "lose", "in", "a", "vector", "space", "representation", "."]
(l0 / lose-02
      :ARG1 (o0 / order
            :time-of (a0 / appear-01
                  :ARG1 (t0 / term)
                  :location (d0 / document)))
      :location (r0 / representation-02
            :ARG0 (s0 / space
                  :mod (v0 / vector))))

# ::snt Many different methods of calculating these values, sometimes known as (term) weights, have been developed.
# ::tokens ["Many", "different", "methods", "of", "calculating", "these", "values", ",", "sometimes", "known", "as", "(", "term", ")", "weights", ",", "have", "been", "developed", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "JJ", "NNS", "IN", "VBG", "DT", "NNS", ",", "RB", "VBN", "IN", "-LRB-", "NN", "-RRB-", "NNS", ",", "VBP", "VBN", "VBN", "."]
# ::lemmas ["many", "different", "method", "of", "calculate", "these", "value", ",", "sometimes", "know", "as", "(", "term", ")", "weight", ",", "have", "be", "develop", "."]
(d0 / develop-02
      :ARG1 (m0 / method
            :quant (m1 / many)
            :ARG1-of (d1 / differ-02)
            :instrument-of (k0 / know-02
                  :ARG2 (s0 / sometimes)
                  :ARG2 (w0 / weight
                        :mod (t0 / this)))
            :instrument-of (c0 / calculate-01)))

# ::snt It is used to compute posterior probabilities given observations.
# ::tokens ["It", "is", "used", "to", "compute", "posterior", "probabilities", "given", "observations", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "VBN", "TO", "VB", "NN", "NNS", "VBN", "NNS", "."]
# ::lemmas ["it", "be", "use", "to", "compute", "posterior", "probability", "give", "observation", "."]
(u0 / use-01
      :ARG1 (i0 / it)
      :ARG2 (c0 / compile-01
            :ARG0 i0
            :ARG1 (p0 / probability
                  :ARG1-of (d0 / differ-02))
            :ARG1-of (o0 / observe-01)))

# ::snt Dynamic Programming is a very powerful mathematical technique, often utilised in programming, for solving optimization problems.
# ::tokens ["Dynamic", "Programming", "is", "a", "very", "powerful", "mathematical", "technique", ",", "often", "utilised", "in", "programming", ",", "for", "solving", "optimization", "problems", "."]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "DT", "RB", "JJ", "JJ", "NN", ",", "RB", "VBN", "IN", "NN", ",", "IN", "VBG", "NN", "NNS", "."]
# ::lemmas ["Dynamic", "Programming", "be", "a", "very", "powerful", "mathematical", "technique", ",", "often", "utilise", "in", "programming", ",", "for", "solve", "optimization", "problem", "."]
(t0 / technique
      :mod (m0 / mathematics)
      :ARG1-of (p0 / powerful-02
            :degree (v0 / very))
      :ARG1-of (u0 / utilize-01
            :location (o0 / often)
            :location (p2 / program-01))
      :domain (p1 / program-01
            :mod (m1 / mechanics)
            :mod (s0 / solve-01
                  :ARG1 (p3 / problem
                        :topic (o1 / optimization)))))

# ::snt One of the most famous schemes is tf-idf weighting.
# ::tokens ["One", "of", "the", "most", "famous", "schemes", "is", "tf", "-", "idf", "weighting", "."]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["CD", "IN", "DT", "RBS", "JJ", "NNS", "VBZ", "NNP", "HYPH", "NNP", "NN", "."]
# ::lemmas ["One", "of", "the", "most", "famous", "scheme", "be", "tf", "-", "idf", "weighting", "."]
(i0 / include-91
      :ARG1 (s0 / scheme
            :ARG1-of (h0 / have-degree-91
                  :ARG2 (f0 / fame-01)
                  :ARG3 (m0 / most)
                  :ARG5 "scheme" )
            :name (n0 / name
                  :op2 "weighting" ))
      :ARG2 (t0 / thing))

# ::snt The last point would be to construct an optimal solution from the computed values.
# ::tokens ["The", "last", "point", "would", "be", "to", "construct", "an", "optimal", "solution", "from", "the", "computed", "values", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "MD", "VB", "TO", "VB", "DT", "JJ", "NN", "IN", "DT", "VBN", "NNS", "."]
# ::lemmas ["the", "last", "point", "would", "be", "to", "construct", "an", "optimal", "solution", "from", "the", "compute", "value", "."]
(h0 / have-purpose-91
      :ARG2 (c0 / construct-01
            :ARG1 (t0 / thing
                  :mod (o0 / optimal)
                  :ARG2-of (s0 / solve-01))
            :ARG2 (v0 / value
                  :ARG1-of (c1 / compile-01)))
      :li (l0 / last))

# ::snt The method takes much less time than naive methods.
# ::tokens ["The", "method", "takes", "much", "less", "time", "than", "naive", "methods", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "RB", "JJR", "NN", "IN", "JJ", "NNS", "."]
# ::lemmas ["the", "method", "take", "much", "less", "time", "than", "naive", "method", "."]
(t0 / take-10
      :ARG1 (t1 / time
            :ARG1-of (h0 / have-quant-91
                  :ARG3 (l0 / less
                        :quant (m2 / much))
                  :ARG4 (m1 / method
                        :mod (n0 / naive))))
      :ARG0 (m0 / method))

# ::snt inheritance in object oriented programming is where a new class is formed using classes which have allready been defined.
# ::tokens ["inheritance", "in", "object", "oriented", "programming", "is", "where", "a", "new", "class", "is", "formed", "using", "classes", "which", "have", "allready", "been", "defined", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "IN", "NN", "VBN", "NN", "VBZ", "WRB", "DT", "JJ", "NN", "VBZ", "VBN", "VBG", "NNS", "WDT", "VBP", "RB", "VBN", "VBN", "."]
# ::lemmas ["inheritance", "in", "object", "orient", "programming", "be", "where", "a", "new", "class", "be", "form", "use", "class", "which", "have", "allready", "be", "define", "."]
(t0 / thing
      :domain (f0 / form-01
            :manner (c0 / class
                  :ARG1-of (n0 / new-01))
            :manner (u0 / use-01
                  :ARG1 (c1 / class
                        :ARG1-of (d0 / define-01
                              :degree (l0 / large)))))
      :domain (i0 / inherit-01
            :ARG1 (p0 / program-01
                  :ARG2 (o0 / orient-01
                        :ARG2 (o1 / object)))))

# ::snt The limitations of the vector space model are thus.
# ::tokens ["The", "limitations", "of", "the", "vector", "space", "model", "are", "thus", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNS", "IN", "DT", "NN", "NN", "NN", "VBP", "RB", "."]
# ::lemmas ["the", "limitation", "of", "the", "vector", "space", "model", "be", "thus", "."]
(c0 / cause-01
      :ARG1 (l0 / limit-01
            :ARG1 (m0 / model
                  :mod (s0 / space
                        :mod (v0 / vector)))))

# ::snt Programming means finding a plan of action.
# ::tokens ["Programming", "means", "finding", "a", "plan", "of", "action", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "VBZ", "VBG", "DT", "NN", "IN", "NN", "."]
# ::lemmas ["programming", "mean", "find", "a", "plan", "of", "action", "."]
(m0 / mean-01
      :ARG1 (w0 / write-01)
      :ARG2 (f0 / find-01
            :ARG1 (p0 / plan-01
                  :ARG1 (a0 / action))))

# ::snt The key to Dynamic Programming is to find the structure of optimal solutions.
# ::tokens ["The", "key", "to", "Dynamic", "Programming", "is", "to", "find", "the", "structure", "of", "optimal", "solutions", "."]
# ::ner_tags ["O", "O", "O", "PERSON", "PERSON", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "I", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "NNP", "NNP", "VBZ", "TO", "VB", "DT", "NN", "IN", "JJ", "NNS", "."]
# ::lemmas ["the", "key", "to", "Dynamic", "Programming", "be", "to", "find", "the", "structure", "of", "optimal", "solution", "."]
(k0 / key-02
      :ARG1 (f0 / figure-out-05
            :manner (p0 / product
                  :name (n0 / name
                        :op1 "Dynamic" 
                        :op2 "Programming" )))
      :ARG2 (f1 / find-01
            :ARG1 (s0 / structure-01
                  :ARG1 (t0 / thing
                        :mod (o0 / optimal)
                        :ARG2-of (s1 / solve-01)))))

# ::snt Subclasses are said to ‘extend’ superclasses.
# ::tokens ["Subclasses", "are", "said", "to", "\u2018", "extend", "\u2019", "superclasses", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "VBP", "VBN", "TO", "``", "VB", "''", "NNS", "."]
# ::lemmas ["subclass", "be", "say", "to", "'", "extend", "'", "superclass", "."]
(s0 / say-01
      :ARG1 (e0 / extend-01
            :ARG1 (s1 / subclass)
            :ARG4 (s2 / superclass)))

# ::snt The theorem is often used when we have observations and wish to compute posterior probabilities.
# ::tokens ["The", "theorem", "is", "often", "used", "when", "we", "have", "observations", "and", "wish", "to", "compute", "posterior", "probabilities", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "RB", "VBN", "WRB", "PRP", "VBP", "NNS", "CC", "VBP", "TO", "VB", "NN", "NNS", "."]
# ::lemmas ["the", "theorem", "be", "often", "use", "when", "we", "have", "observation", "and", "wish", "to", "compute", "posterior", "probability", "."]
(u0 / use-01
      :ARG1 (t0 / theorem)
      :time (a0 / and
            :op1 (h0 / have-03
                  :ARG1 (o1 / observe-01)
                  :ARG0 (w1 / we))
            :op2 (w0 / wish-01
                  :ARG0 w1
                  :ARG1 (c0 / comprehend-01
                        :ARG0 w1
                        :ARG1 (p0 / probability
                              :ARG1-of (d0 / differ-02)))))
      :frequency (o0 / often))

# ::snt Each and every dimension corresponds to a separate term.
# ::tokens ["Each", "and", "every", "dimension", "corresponds", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "CC", "DT", "NN", "VBZ", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["each", "and", "every", "dimension", "correspond", "to", "a", "separate", "term", "."]
(c0 / correspond-02
      :ARG1 (t0 / term
            :ARG1-of (s0 / separate-02))
      :ARG1 (d0 / dimension
            :mod (e0 / each)
            :mod (e1 / every)))

# ::snt Use these optimal solutions to construct an optimal solution for the original problem.
# ::tokens ["Use", "these", "optimal", "solutions", "to", "construct", "an", "optimal", "solution", "for", "the", "original", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "DT", "JJ", "NNS", "TO", "VB", "DT", "JJ", "NN", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["use", "these", "optimal", "solution", "to", "construct", "an", "optimal", "solution", "for", "the", "original", "problem", "."]
(u0 / use-01
      :ARG1 (t0 / thing
            :mod (o0 / optimal)
            :mod (t1 / this)
            :ARG2-of (s0 / solve-01))
      :ARG0 (y0 / you)
      :ARG2 (c0 / construct-01
            :ARG0 y0
            :ARG1 (t2 / thing
                  :mod (o1 / optimal)
                  :ARG2-of (s1 / solve-01
                        :ARG1 (p0 / problem
                              :mod (o2 / original))))))

# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
# ::tokens ["A", "document", "is", "represented", "as", "a", "vector", ",", "with", "each", "dimension", "corresponding", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", ",", "IN", "DT", "NN", "VBG", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["a", "document", "be", "represent", "as", "a", "vector", ",", "with", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(r0 / represent-01
      :ARG1 (d0 / document)
      :ARG2 (v0 / vector)
      :ARG0-of (a0 / accompany-01
            :ARG1 (c0 / correspond-02
                  :ARG1 (d1 / dimension
                        :mod (e0 / each))
                  :ARG2 (t0 / term
                        :ARG1-of (s0 / separate-02)))))

# ::snt One of the best known schemes is tf-idf (term frequency-inverse document frequency) weighting.
# ::tokens ["One", "of", "the", "best", "known", "schemes", "is", "tf", "-", "idf", "(", "term", "frequency", "-", "inverse", "document", "frequency", ")", "weighting", "."]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["CD", "IN", "DT", "RBS", "JJ", "NNS", "VBZ", "NNP", "HYPH", "NNP", "-LRB-", "NN", "NN", "HYPH", "NN", "NN", "NN", "-RRB-", "NN", "."]
# ::lemmas ["One", "of", "the", "well", "known", "scheme", "be", "tf", "-", "idf", "(", "term", "frequency", "-", "inverse", "document", "frequency", ")", "weighting", "."]
(h0 / have-degree-91
      :ARG1 (s0 / scheme
            :ARG1-of (m1 / mean-01
                  :ARG2 (s2 / scheme
                        :mod (k0 / know-02)
                        :name (n2 / name
                              :op1 "term" 
                              :op2 "frequency" )))
            :name (n0 / name
                  :op1 "tf" 
                  :op2 "frequency" ))
      :ARG2 (g0 / good-02
            :ARG1 s0)
      :ARG3 (m0 / most)
      :ARG5 (s1 / scheme
            :ARG1-of (n1 / name
                  :op1 "tf" 
                  :op2 "weighting" )))

# ::snt It is usually be used to compute posterior probabilities given observations.
# ::tokens ["It", "is", "usually", "be", "used", "to", "compute", "posterior", "probabilities", "given", "observations", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VB", "VBN", "TO", "VB", "NN", "NNS", "VBN", "NNS", "."]
# ::lemmas ["it", "be", "usually", "be", "use", "to", "compute", "posterior", "probability", "give", "observation", "."]
(u0 / use-01
      :ARG1 (i0 / it)
      :mod (u1 / usual)
      :ARG2 (c0 / compile-01
            :ARG0 i0
            :ARG1 (p0 / probability
                  :mod (d0 / differ-02))
            :ARG1-of (o0 / observe-01
                  :ARG1-of (g0 / give-01))))

# ::snt A problem with overlapping subproblems means that the same subproblems may be used to solve many different larger problems.
# ::tokens ["A", "problem", "with", "overlapping", "subproblems", "means", "that", "the", "same", "subproblems", "may", "be", "used", "to", "solve", "many", "different", "larger", "problems", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "VBG", "NNS", "VBZ", "IN", "DT", "JJ", "NNS", "MD", "VB", "VBN", "TO", "VB", "JJ", "JJ", "JJR", "NNS", "."]
# ::lemmas ["a", "problem", "with", "overlap", "subproblem", "mean", "that", "the", "same", "subproblem", "may", "be", "use", "to", "solve", "many", "different", "large", "problem", "."]
(m0 / mean-01
      :ARG1 (p0 / problem
            :topic (s0 / subproblem
                  :ARG1-of (c0 / coverage-06)))
      :ARG2 (p1 / possible-01
            :ARG1 (u0 / use-01
                  :ARG1 (s1 / subproblem
                        :ARG1-of (s3 / same-01))
                  :ARG2 (s2 / solve-01
                        :ARG0 s1
                        :ARG1 (p2 / problem
                              :ARG1-of (h0 / have-degree-91
                                    :ARG3 (l0 / large)
                                    :ARG3 (m2 / more))
                              :ARG1-of (d0 / differ-02)
                              :quant (m1 / many))))))

# ::snt The definition of term is dependent on the application.
# ::tokens ["The", "definition", "of", "term", "is", "dependent", "on", "the", "application", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "NN", "VBZ", "JJ", "IN", "DT", "NN", "."]
# ::lemmas ["the", "definition", "of", "term", "be", "dependent", "on", "the", "application", "."]
(d0 / depend-01
      :ARG1 (a0 / apply-02)
      :ARG0 (d1 / define-01
            :ARG1 (t0 / term)))

# ::snt And thus the method takes much less time than more naive methods.
# ::tokens ["And", "thus", "the", "method", "takes", "much", "less", "time", "than", "more", "naive", "methods", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["CC", "RB", "DT", "NN", "VBZ", "RB", "JJR", "NN", "IN", "RBR", "JJ", "NNS", "."]
# ::lemmas ["and", "thus", "the", "method", "take", "much", "less", "time", "than", "more", "naive", "method", "."]
(a0 / and
      :op2 (t0 / take-10
            :ARG1 (t1 / time
                  :ARG1-of (h0 / have-quant-91
                        :ARG3 (l0 / less
                              :quant (m2 / much))
                        :ARG4 (m1 / method
                              :ARG1-of (h1 / have-degree-91
                                    :ARG2 (n0 / naive)
                                    :ARG3 (m3 / more
                                          :quant (m5 / much))
                                    :ARG4 (m4 / method)))))
            :ARG0 (m0 / method)
            :ARG1-of (c0 / cause-01)))

# ::snt In probability theory, the prior and conditional probabilities of two random events are related by Bayes' theorem.
# ::tokens ["In", "probability", "theory", ",", "the", "prior", "and", "conditional", "probabilities", "of", "two", "random", "events", "are", "related", "by", "Bayes", "'", "theorem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "NN", ",", "DT", "JJ", "CC", "JJ", "NNS", "IN", "CD", "JJ", "NNS", "VBP", "VBN", "IN", "NNP", "POS", "NN", "."]
# ::lemmas ["in", "probability", "theory", ",", "the", "prior", "and", "conditional", "probability", "of", "two", "random", "event", "be", "relate", "by", "Bayes", "'", "theorem", "."]
(r0 / relate-01
      :ARG1 (t0 / theorem
            :poss (p0 / person
                  :name (n0 / name
                        :op1 "Bayes" )))
      :ARG1 (a0 / and
            :op1 (p1 / prior)
            :op2 (p2 / probability
                  :mod (c0 / condition-01)))
      :location (t1 / theory
            :mod (e0 / event
                  :mod (r1 / random)
                  :quant 2 )
            :mod (p3 / probability)
            :mod (p4 / probability)))

# ::snt As an official theorem, Bayes' theorem is valid in all universal interpretations of probability.
# ::tokens ["As", "an", "official", "theorem", ",", "Bayes", "'", "theorem", "is", "valid", "in", "all", "universal", "interpretations", "of", "probability", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "JJ", "NN", ",", "NNP", "POS", "NN", "VBZ", "JJ", "IN", "DT", "JJ", "NNS", "IN", "NN", "."]
# ::lemmas ["as", "an", "official", "theorem", ",", "Bayes", "'", "theorem", "be", "valid", "in", "all", "universal", "interpretation", "of", "probability", "."]
(v0 / valid-02
      :ARG1 (t0 / theorem
            :mod (t1 / theorem
                  :mod (o0 / official))
            :poss (p0 / person
                  :name (n0 / name
                        :op1 "Bayes" )))
      :ARG2 (i0 / interpret-01
            :ARG1 (p1 / probability)
            :mod (a0 / all)
            :mod (u0 / universal)))

# ::snt • P(B|A) is the conditional probability of B given A.
# ::tokens ["\u2022", "P(B|A", ")", "is", "the", "conditional", "probability", "of", "B", "given", "A."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "NN", "-RRB-", "VBZ", "DT", "JJ", "NN", "IN", "NN", "VBN", "NN"]
# ::lemmas ["\u2022", "p(b|a", ")", "be", "the", "conditional", "probability", "of", "b", "give", "a."]
(p0 / probability
      :mod (c0 / conditional)
      :domain (g0 / give-01
            :ARG2 (t1 / thing
                  :mod (v1 / variable
                        :name (n1 / name
                              :op1 "B" ))))
      :domain (t0 / thing
            :mod (v0 / variable
                  :name (n0 / name
                        :op1 "B" ))))

# ::snt It does not take into account any information about B and therefore is considered “prior”.
# ::tokens ["It", "does", "not", "take", "into", "account", "any", "information", "about", "B", "and", "therefore", "is", "considered", "\u201c", "prior", "\u201d", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VB", "IN", "NN", "DT", "NN", "IN", "NN", "CC", "RB", "VBZ", "VBN", "``", "RB", "''", "."]
# ::lemmas ["it", "do", "not", "take", "into", "account", "any", "information", "about", "b", "and", "therefore", "be", "consider", "\"", "prior", "\"", "."]
(c0 / cause-01
      :ARG1 (c1 / consider-02
            :ARG1 (i0 / it)
            :ARG2 (p0 / prior))
      :ARG0 (t0 / take-into-account-04
            :ARG1 (i1 / information
                  :topic (a0 / any)
                  :topic (p1 / person
                        :mod (v0 / variable
                              :name (n0 / name
                                    :op1 "B" ))))
            :polarity - ))

# ::snt Each dimensions corresponds to a separate terms.
# ::tokens ["Each", "dimensions", "corresponds", "to", "a", "separate", "terms", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNS", "VBZ", "IN", "DT", "JJ", "NNS", "."]
# ::lemmas ["each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(c0 / correspond-02
      :ARG1 (t0 / term
            :ARG1-of (s0 / separate-02))
      :ARG1 (d0 / dimension
            :mod (e0 / each)))

# ::snt It is usually used to calculate posterior probabilities given observations.
# ::tokens ["It", "is", "usually", "used", "to", "calculate", "posterior", "probabilities", "given", "observations", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VBN", "TO", "VB", "NN", "NNS", "VBN", "NNS", "."]
# ::lemmas ["it", "be", "usually", "use", "to", "calculate", "posterior", "probability", "give", "observation", "."]
(u0 / use-01
      :ARG1 (i0 / it)
      :mod (u1 / usual)
      :ARG2 (c0 / calculate-01
            :ARG0 i0
            :ARG1 (p0 / probability
                  :mod (d0 / differ-02))
            :ARG1 (o0 / observe-01
                  :ARG1-of (g0 / give-01))))

# ::snt Each dimension corresponds to a separate term.
# ::tokens ["Each", "dimension", "corresponds", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(c0 / correspond-02
      :ARG1 (t0 / term
            :ARG1-of (s0 / separate-02))
      :ARG1 (d0 / dimension
            :mod (e0 / each)))

# ::snt However, the key in Dynamic Programming is to determine the structure of optimal solutions.
# ::tokens ["However", ",", "the", "key", "in", "Dynamic", "Programming", "is", "to", "determine", "the", "structure", "of", "optimal", "solutions", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", ",", "DT", "NN", "IN", "NNP", "NNP", "VBZ", "TO", "VB", "DT", "NN", "IN", "JJ", "NNS", "."]
# ::lemmas ["however", ",", "the", "key", "in", "Dynamic", "Programming", "be", "to", "determine", "the", "structure", "of", "optimal", "solution", "."]
(c0 / contrast-01
      :ARG2 (k0 / key-02
            :ARG1 (d0 / determine-01
                  :ARG1 (s0 / structure-01
                        :ARG1 (s1 / solution
                              :mod (o0 / optimal))))
            :ARG2 (p0 / program-01
                  :mod (p1 / philosophy))))

# ::snt The typical example could be of a finalized schedule of events at an exhibition.
# ::tokens ["The", "typical", "example", "could", "be", "of", "a", "finalized", "schedule", "of", "events", "at", "an", "exhibition", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "MD", "VB", "IN", "DT", "JJ", "NN", "IN", "NNS", "IN", "DT", "NN", "."]
# ::lemmas ["the", "typical", "example", "could", "be", "of", "a", "finalized", "schedule", "of", "event", "at", "an", "exhibition", "."]
(p0 / possible-01
      :ARG1 (t0 / typical-02)
      :ARG1 (e0 / exemplify-01
            :ARG0 (s0 / schedule-01
                  :ARG1 (e1 / event
                        :location (e2 / exhibit-01))
                  :ARG1-of (f0 / finalize-01))))

# ::snt The PageRank is a recursive algorithm used by Google to determine which webpages are more important than others.
# ::tokens ["The", "PageRank", "is", "a", "recursive", "algorithm", "used", "by", "Google", "to", "determine", "which", "webpages", "are", "more", "important", "than", "others", "."]
# ::ner_tags ["O", "ORG", "O", "O", "O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "B", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNP", "VBZ", "DT", "JJ", "NN", "VBN", "IN", "NNP", "TO", "VB", "WDT", "NNS", "VBP", "RBR", "JJ", "IN", "NNS", "."]
# ::lemmas ["the", "PageRank", "be", "a", "recursive", "algorithm", "use", "by", "Google", "to", "determine", "which", "webpage", "be", "more", "important", "than", "other", "."]
(a0 / algorithm
      :ARG1-of (r0 / recursive)
      :ARG1-of (u0 / use-01)
      :domain (d0 / determine-01
            :ARG1 (h0 / have-degree-91
                  :ARG1 (w0 / webpage)
                  :ARG2 (i0 / important-01
                        :ARG1 w0)
                  :ARG3 (m0 / more)
                  :ARG4 (o0 / other)))
      :domain (p0 / publication
            :name (n0 / name
                  :op1 "Google" 
                  :op2 "PageRank" )))

# ::snt A document is represented as a vector, and each dimension corresponds to a separate term.
# ::tokens ["A", "document", "is", "represented", "as", "a", "vector", ",", "and", "each", "dimension", "corresponds", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", ",", "CC", "DT", "NN", "VBZ", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["a", "document", "be", "represent", "as", "a", "vector", ",", "and", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(a0 / and
      :op1 (r0 / represent-01
            :ARG1 (d0 / document)
            :ARG2 (v0 / vector))
      :op2 (c0 / correspond-02
            :ARG1 (d1 / dimension
                  :mod (e0 / each))
            :ARG2 (t0 / term
                  :ARG1-of (s0 / separate-02))))

# ::snt Single words, keywords and occasionally longer phrases are used for terms.
# ::tokens ["Single", "words", ",", "keywords", "and", "occasionally", "longer", "phrases", "are", "used", "for", "terms", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNS", ",", "NNS", "CC", "RB", "JJR", "NNS", "VBP", "VBN", "IN", "NNS", "."]
# ::lemmas ["single", "word", ",", "keyword", "and", "occasionally", "long", "phrase", "be", "use", "for", "term", "."]
(u0 / use-01
      :ARG1 (a0 / and
            :op1 (w0 / word
                  :ARG1-of (s0 / single-02))
            :op2 (k0 / keyword)
            :op3 (p0 / phrase
                  :ARG1-of (h0 / have-degree-91
                        :ARG3 (m0 / more))
                  :ARG1-of (l0 / long-03)
                  :frequency (o0 / occasional)))
      :ARG2 (t0 / term))

# ::snt Inheritance in object oriented programming is a way to form new classes using classes that have already been defined.
# ::tokens ["Inheritance", "in", "object", "oriented", "programming", "is", "a", "way", "to", "form", "new", "classes", "using", "classes", "that", "have", "already", "been", "defined", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "IN", "NN", "VBN", "NN", "VBZ", "DT", "NN", "TO", "VB", "JJ", "NNS", "VBG", "NNS", "WDT", "VBP", "RB", "VBN", "VBN", "."]
# ::lemmas ["inheritance", "in", "object", "orient", "programming", "be", "a", "way", "to", "form", "new", "class", "use", "class", "that", "have", "already", "be", "define", "."]
(w0 / way
      :domain (f0 / form-01
            :ARG1 (c0 / class
                  :ARG1-of (n0 / new-01))
            :manner (u0 / use-01
                  :ARG1 (c1 / class
                        :ARG1-of (d0 / define-01
                              :time (a0 / already)))))
      :domain (i0 / inherit-01
            :ARG1 (p0 / program-01
                  :ARG2 (o0 / orient-01
                        :ARG2 (o1 / object)))))

# ::snt A document has representation as a vector.
# ::tokens ["A", "document", "has", "representation", "as", "a", "vector", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["a", "document", "have", "representation", "as", "a", "vector", "."]
(h0 / have-03
      :ARG1 (r0 / representation-02
            :manner (v0 / vector))
      :ARG0 (d0 / document))

# ::snt Bayes Theorem is a mathematical formula used to calculate conditional probabilities.
# ::tokens ["Bayes", "Theorem", "is", "a", "mathematical", "formula", "used", "to", "calculate", "conditional", "probabilities", "."]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "DT", "JJ", "NN", "VBN", "TO", "VB", "JJ", "NNS", "."]
# ::lemmas ["Bayes", "Theorem", "be", "a", "mathematical", "formula", "use", "to", "calculate", "conditional", "probability", "."]
(f0 / formula
      :mod (u0 / use-01
            :ARG2 (c0 / calculate-01
                  :ARG0 t0
                  :ARG1 (p0 / probability
                        :mod (c1 / conditional))))
      :mod (m0 / mathematics)
      :domain (t0 / thing
            :name (n0 / name
                  :op1 "Bayes" 
                  :op2 "Theorem" )))

# ::snt A variation of the PageRank method bases the importance of a webpage on how many visits the page gets.
# ::tokens ["A", "variation", "of", "the", "PageRank", "method", "bases", "the", "importance", "of", "a", "webpage", "on", "how", "many", "visits", "the", "page", "gets", "."]
# ::ner_tags ["O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NNP", "NN", "VBZ", "DT", "NN", "IN", "DT", "NN", "IN", "WRB", "JJ", "NNS", "DT", "NN", "VBZ", "."]
# ::lemmas ["a", "variation", "of", "the", "PageRank", "method", "base", "the", "importance", "of", "a", "webpage", "on", "how", "many", "visit", "the", "page", "get", "."]
(b0 / base-02
      :ARG1 (i0 / important-01
            :ARG1 (n0 / number
                  :quant-of (v1 / visit-01
                        :ARG0 (p1 / page)))
            :ARG1 (w0 / webpage))
      :ARG0 (v0 / vary-01
            :ARG1 (m0 / method
                  :mod (p0 / publication
                        :name (n1 / name
                              :op1 "PageRank" )))))

# ::snt If a term appears in the document, the terms value in the vector is non-zero.
# ::tokens ["If", "a", "term", "appears", "in", "the", "document", ",", "the", "terms", "value", "in", "the", "vector", "is", "non", "-", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["IN", "DT", "NN", "VBZ", "IN", "DT", "NN", ",", "DT", "NNS", "NN", "IN", "DT", "NN", "VBZ", "JJ", "JJ", "CD", "."]
# ::lemmas ["if", "a", "term", "appear", "in", "the", "document", ",", "the", "term", "value", "in", "the", "vector", "be", "non", "-", "zero", "."]
(h0 / have-condition-91
      :ARG1 (z0 / zero
            :polarity - 
            :domain (v0 / value
                  :location (v1 / vector)))
      :ARG2 (a0 / appear-01
            :ARG1 (t0 / term)
            :location (d0 / document)))

# ::snt The new classes are called derived classes and they inherit the behaviours and attributes of the base classes.
# ::tokens ["The", "new", "classes", "are", "called", "derived", "classes", "and", "they", "inherit", "the", "behaviours", "and", "attributes", "of", "the", "base", "classes", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NNS", "VBP", "VBN", "VBN", "NNS", "CC", "PRP", "VBP", "DT", "NNS", "CC", "NNS", "IN", "DT", "NN", "NNS", "."]
# ::lemmas ["the", "new", "class", "be", "call", "derive", "class", "and", "they", "inherit", "the", "behaviour", "and", "attribute", "of", "the", "base", "class", "."]
(a0 / and
      :op1 (c0 / call-01
            :ARG1 (c1 / class
                  :ARG1-of (d0 / derive-01))
            :ARG2 (c2 / class
                  :ARG1-of (n0 / new-01)
                  :ARG0-of (t0 / thing
                        :ARG1-of (b0 / behave-01
                              :ARG0 (c3 / class
                                    :mod (b1 / base))))))
      :op2 (i0 / inherit-01
            :ARG0 c1
            :ARG1 (a1 / and
                  :op2 (t1 / thing
                        :ARG2-of (a2 / attribute-01
                              :ARG2 c3)))))

# ::snt As a formal theorem Bayes theorem is valid in all common interpretations of probability.
# ::tokens ["As", "a", "formal", "theorem", "Bayes", "theorem", "is", "valid", "in", "all", "common", "interpretations", "of", "probability", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "JJ", "NN", "NNP", "NN", "VBZ", "JJ", "IN", "DT", "JJ", "NNS", "IN", "NN", "."]
# ::lemmas ["as", "a", "formal", "theorem", "Bayes", "theorem", "be", "valid", "in", "all", "common", "interpretation", "of", "probability", "."]
(v0 / valid-02
      :ARG1 (i0 / interpret-01
            :ARG1 (p0 / probability)
            :ARG0 (c0 / common)
            :mod (a0 / all))
      :ARG1 (t0 / theorem
            :mod (t1 / theorem
                  :name (n0 / name
                        :op1 "Bayes" ))
            :mod (f0 / formal)))

# ::snt It is also called the subsequent probability because it is derived from or depends upon the specified value of B.
# ::tokens ["It", "is", "also", "called", "the", "subsequent", "probability", "because", "it", "is", "derived", "from", "or", "depends", "upon", "the", "specified", "value", "of", "B."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VBN", "DT", "JJ", "NN", "IN", "PRP", "VBZ", "VBN", "IN", "CC", "VBZ", "IN", "DT", "VBN", "NN", "IN", "NNP"]
# ::lemmas ["it", "be", "also", "call", "the", "subsequent", "probability", "because", "it", "be", "derive", "from", "or", "depend", "upon", "the", "specify", "value", "of", "B."]
(c0 / call-01
      :ARG1 (i0 / it
            :ARG1-of (d0 / derive-01
                  :ARG2 (v0 / value
                        :ARG1-of (s1 / specify-01)))
            :ARG0-of (d1 / depend-01
                  :ARG1 v0))
      :mod (a0 / also)
      :ARG1-of (c1 / cause-01
            :ARG0 (o0 / or
                  :op2 d1))
      :ARG2 (p0 / probability
            :time (s0 / subsequent)))

# ::snt tf-idf weighting is one of the most well known schemes.
# ::tokens ["tf", "-", "idf", "weighting", "is", "one", "of", "the", "most", "well", "known", "schemes", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "HYPH", "NNP", "NN", "VBZ", "CD", "IN", "DT", "RBS", "RB", "JJ", "NNS", "."]
# ::lemmas ["tf", "-", "idf", "weighting", "be", "one", "of", "the", "most", "well", "known", "scheme", "."]
(i0 / include-91
      :ARG1 (s0 / scheme
            :ARG1-of (k0 / know-02)
            :name (n0 / name
                  :op1 "tf" 
                  :op2 "weighting" ))
      :ARG1 (s1 / scheme
            :ARG1-of (h0 / have-degree-91
                  :ARG3 (m0 / most))))

# ::snt LIMITATION: There is some limitation of vector space model.
# ::tokens ["LIMITATION", ":", "There", "is", "some", "limitation", "of", "vector", "space", "model", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", ":", "EX", "VBZ", "DT", "NN", "IN", "NN", "NN", "NN", "."]
# ::lemmas ["LIMITATION", ":", "there", "be", "some", "limitation", "of", "vector", "space", "model", "."]
(i0 / imply-01
      :ARG0 (l0 / limit-01
            :ARG1 (m0 / model
                  :mod (s1 / space
                        :mod (v0 / vector)))
            :mod (s0 / some)))

# ::snt The idea of inheritance is to reuse the existing code with little or no modification at all.
# ::tokens ["The", "idea", "of", "inheritance", "is", "to", "reuse", "the", "existing", "code", "with", "little", "or", "no", "modification", "at", "all", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "NN", "VBZ", "TO", "VB", "DT", "VBG", "NN", "IN", "JJ", "CC", "DT", "NN", "RB", "RB", "."]
# ::lemmas ["the", "idea", "of", "inheritance", "be", "to", "reuse", "the", "exist", "code", "with", "little", "or", "no", "modification", "at", "all", "."]
(r0 / reuse
      :domain (c0 / code
            :ARG1-of (e0 / exist-01))
      :domain (i0 / idea
            :topic (i1 / inherit-01))
      :manner (o0 / or
            :op1 (m0 / modify-01
                  :mod (a0 / at-all)
                  :degree (l0 / little))
            :op2 (m1 / modify-01
                  :polarity - )))

# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
# ::tokens ["The", "basic", "idea", "is", "to", "represent", "each", "document", "as", "a", "vector", "of", "certain", "weighted", "word", "frequencies", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "VBZ", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "IN", "JJ", "JJ", "NN", "NNS", "."]
# ::lemmas ["the", "basic", "idea", "be", "to", "represent", "each", "document", "as", "a", "vector", "of", "certain", "weighted", "word", "frequency", "."]
(r0 / represent-01
      :ARG1 (d0 / document
            :mod (e0 / each))
      :ARG0 (i0 / idea
            :mod (b0 / basic))
      :ARG2 (v0 / vector
            :consist-of (f0 / frequency
                  :mod (c0 / certain)
                  :ARG1-of (w0 / word)
                  :ARG1-of (w1 / weight-01))))

# ::snt of a particular page is roughly based upon the quantity of inbound links as well as the PageRank?
# ::tokens ["of", "a", "particular", "page", "is", "roughly", "based", "upon", "the", "quantity", "of", "inbound", "links", "as", "well", "as", "the", "PageRank", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["IN", "DT", "JJ", "NN", "VBZ", "RB", "VBN", "IN", "DT", "NN", "IN", "JJ", "NNS", "RB", "RB", "IN", "DT", "NNP", "."]
# ::lemmas ["of", "a", "particular", "page", "be", "roughly", "base", "upon", "the", "quantity", "of", "inbound", "link", "as", "well", "as", "the", "PageRank", "?"]
(b0 / base-02
      :ARG1 (a0 / and
            :op1 (n0 / number
                  :quant-of (l0 / link
                        :mod (i0 / inbound)
                        :mod (p1 / particular)))
            :op2 (p0 / product
                  :name (n1 / name
                        :op1 "PageRank" )))
      :manner (r0 / rough-04)
      :ARG2 (a1 / amr-unknown))

# ::snt The number of unique words in the vocabulary denotes the dimensionality, if words are used for the terms.
# ::tokens ["The", "number", "of", "unique", "words", "in", "the", "vocabulary", "denotes", "the", "dimensionality", ",", "if", "words", "are", "used", "for", "the", "terms", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "JJ", "NNS", "IN", "DT", "NN", "VBZ", "DT", "NN", ",", "IN", "NNS", "VBP", "VBN", "IN", "DT", "NNS", "."]
# ::lemmas ["the", "number", "of", "unique", "word", "in", "the", "vocabulary", "denote", "the", "dimensionality", ",", "if", "word", "be", "use", "for", "the", "term", "."]
(d0 / dominate-01
      :ARG1 (d1 / dimensionality)
      :ARG0 (n0 / number
            :quant-of (w0 / word
                  :ARG1-of (u1 / unique-01)
                  :location (v0 / vocabulary)))
      :condition (u0 / use-01
            :ARG1 (t0 / term)))

# ::snt The idea of inheritance in OOP refers to the formation of new classes with the already existing classes.
# ::tokens ["The", "idea", "of", "inheritance", "in", "OOP", "refers", "to", "the", "formation", "of", "new", "classes", "with", "the", "already", "existing", "classes", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "NN", "IN", "NNP", "VBZ", "IN", "DT", "NN", "IN", "JJ", "NNS", "IN", "DT", "RB", "VBG", "NNS", "."]
# ::lemmas ["the", "idea", "of", "inheritance", "in", "OOP", "refer", "to", "the", "formation", "of", "new", "class", "with", "the", "already", "exist", "class", "."]
(r0 / refer-01
      :ARG1 (f0 / form-01
            :ARG1 (c0 / class
                  :ARG1-of (e0 / exist-01
                        :time (a0 / already)))
            :accompanier (c1 / class
                  :ARG1-of (n0 / new-01)))
      :ARG0 (i0 / idea
            :topic (t0 / thing
                  :name (n1 / name
                        :op1 "OOP" ))
            :topic (i1 / inherit-01)))

# ::snt As an official theorem, Bayes' theorem is valid in all universal interpretations of probability.
# ::tokens ["As", "an", "official", "theorem", ",", "Bayes", "'", "theorem", "is", "valid", "in", "all", "universal", "interpretations", "of", "probability", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "JJ", "NN", ",", "NNP", "POS", "NN", "VBZ", "JJ", "IN", "DT", "JJ", "NNS", "IN", "NN", "."]
# ::lemmas ["as", "an", "official", "theorem", ",", "Bayes", "'", "theorem", "be", "valid", "in", "all", "universal", "interpretation", "of", "probability", "."]
(v0 / valid-02
      :ARG1 (t0 / theorem
            :mod (t1 / theorem
                  :mod (o0 / official))
            :poss (p0 / person
                  :name (n0 / name
                        :op1 "Bayes" )))
      :ARG2 (i0 / interpret-01
            :ARG1 (p1 / probability)
            :mod (a0 / all)
            :mod (u0 / universal)))

# ::snt If the term doesn’t occur within the document, the value in the vector is zero.
# ::tokens ["If", "the", "term", "does", "n\u2019t", "occur", "within", "the", "document", ",", "the", "value", "in", "the", "vector", "is", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["IN", "DT", "NN", "VBZ", "RB", "VB", "IN", "DT", "NN", ",", "DT", "NN", "IN", "DT", "NN", "VBZ", "CD", "."]
# ::lemmas ["if", "the", "term", "do", "not", "occur", "within", "the", "document", ",", "the", "value", "in", "the", "vector", "be", "zero", "."]
(h0 / have-condition-91
      :ARG1 (v0 / value
            :quant (v1 / vector)
            :quant (z0 / zero))
      :ARG2 (b0 / be-located-at-91
            :ARG1 (t0 / term)
            :ARG2 - 
            :ARG2 (w0 / within
                  :op1 (d0 / document))))

# ::snt In the vector space model a document is represented as a vector.
# ::tokens ["In", "the", "vector", "space", "model", "a", "document", "is", "represented", "as", "a", "vector", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "NN", "NN", "NN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["in", "the", "vector", "space", "model", "a", "document", "be", "represent", "as", "a", "vector", "."]
(r0 / represent-01
      :ARG1 (d0 / document)
      :ARG2 (v0 / vector)
      :location (m0 / model-01
            :ARG1 (s0 / space
                  :mod (v1 / vector))))

# ::snt The peropos of inheritance in object oriented programming is to minimize the reuse of existing code without modification.
# ::tokens ["The", "peropos", "of", "inheritance", "in", "object", "oriented", "programming", "is", "to", "minimize", "the", "reuse", "of", "existing", "code", "without", "modification", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNS", "IN", "NN", "IN", "NN", "VBN", "NN", "VBZ", "TO", "VB", "DT", "NN", "IN", "VBG", "NN", "IN", "NN", "."]
# ::lemmas ["the", "peropo", "of", "inheritance", "in", "object", "orient", "programming", "be", "to", "minimize", "the", "reuse", "of", "exist", "code", "without", "modification", "."]
(h0 / have-mod-91
      :ARG1 (m0 / minimize-01
            :ARG1 (r0 / rewrite-01
                  :ARG1 (c0 / code
                        :ARG1-of (e0 / exist-01))
                  :manner (m1 / modify-01
                        :polarity - )))
      :ARG1 (i0 / inherit-01
            :ARG1 (p0 / program-01
                  :ARG1-of (o0 / orient-01
                        :ARG2 (o1 / object)))))

# ::snt It is essentially a popularity meter.
# ::tokens ["It", "is", "essentially", "a", "popularity", "meter", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "DT", "NN", "NN", "."]
# ::lemmas ["it", "be", "essentially", "a", "popularity", "meter", "."]
(m0 / meter
      :mod (p0 / popularity)
      :domain (i0 / it)
      :mod (e0 / essential))

# ::snt In the vector space model a document is represented as a vector.
# ::tokens ["In", "the", "vector", "space", "model", "a", "document", "is", "represented", "as", "a", "vector", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "NN", "NN", "NN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["in", "the", "vector", "space", "model", "a", "document", "be", "represent", "as", "a", "vector", "."]
(r0 / represent-01
      :ARG1 (d0 / document)
      :ARG2 (v0 / vector)
      :location (m0 / model-01
            :ARG1 (s0 / space
                  :mod (v1 / vector))))

# ::snt Inheritance is a basic concept in object oriented programming.
# ::tokens ["Inheritance", "is", "a", "basic", "concept", "in", "object", "oriented", "programming", "."]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "DT", "JJ", "NN", "IN", "NN", "VBN", "NN", "."]
# ::lemmas ["Inheritance", "be", "a", "basic", "concept", "in", "object", "orient", "programming", "."]
(c0 / concept
      :mod (b0 / basic)
      :domain (m0 / medical-condition
            :name (n0 / name
                  :op1 "Inheritance" ))
      :topic (p0 / program-01
            :ARG1-of (o0 / orient-01
                  :ARG2 (o1 / object))))

# ::snt The limitations of the vector space model are thus.
# ::tokens ["The", "limitations", "of", "the", "vector", "space", "model", "are", "thus", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNS", "IN", "DT", "NN", "NN", "NN", "VBP", "RB", "."]
# ::lemmas ["the", "limitation", "of", "the", "vector", "space", "model", "be", "thus", "."]
(c0 / cause-01
      :ARG1 (l0 / limit-01
            :ARG1 (m0 / model
                  :mod (s0 / space
                        :mod (v0 / vector)))))

# ::snt Bayes theorem can be used to compute the probability that a proposed diagnosis is correct.
# ::tokens ["Bayes", "theorem", "can", "be", "used", "to", "compute", "the", "probability", "that", "a", "proposed", "diagnosis", "is", "correct", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NN", "MD", "VB", "VBN", "TO", "VB", "DT", "NN", "WDT", "DT", "VBN", "NN", "VBZ", "JJ", "."]
# ::lemmas ["Bayes", "theorem", "can", "be", "use", "to", "compute", "the", "probability", "that", "a", "propose", "diagnosis", "be", "correct", "."]
(p0 / possible-01
      :ARG1 (u0 / use-01
            :ARG1 (t0 / theorem
                  :name (n0 / name
                        :op1 "Bayes" 
                        :op2 "theorem" ))
            :ARG2 (c0 / compile-01
                  :ARG0 t0
                  :ARG1 (p1 / probability
                        :domain (c1 / correct-02
                              :ARG1 (t1 / thing
                                    :ARG1-of (p2 / propose-01)
                                    :ARG2-of (d0 / diagnose-01)))))))

# ::snt One of the best known schemes is tf-idf weighting, proposed by Salton, Wong and Yang.
# ::tokens ["One", "of", "the", "best", "known", "schemes", "is", "tf", "-", "idf", "weighting", ",", "proposed", "by", "Salton", ",", "Wong", "and", "Yang", "."]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "PERSON", "O", "PERSON", "O", "PERSON", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "B", "O", "B", "O"]
# ::pos_tags ["CD", "IN", "DT", "RBS", "JJ", "NNS", "VBZ", "NNP", "HYPH", "NNP", "NN", ",", "VBN", "IN", "NNP", ",", "NNP", "CC", "NNP", "."]
# ::lemmas ["One", "of", "the", "well", "known", "scheme", "be", "tf", "-", "idf", "weighting", ",", "propose", "by", "Salton", ",", "Wong", "and", "Yang", "."]
(t0 / thing
      :ARG1-of (p0 / propose-01
            :ARG0 (a0 / and
                  :op1 (p1 / person
                        :name (n2 / name
                              :op1 "Salton" ))
                  :op2 (p2 / person
                        :name (n3 / name
                              :op1 "Wong" ))
                  :op3 (p3 / person)))
      :ARG1-of (i0 / include-91
            :ARG2 (s1 / scheme
                  :ARG1-of (g0 / good-02)
                  :ARG1-of (h0 / have-degree-91
                        :ARG2 g0
                        :ARG3 (m0 / most))
                  :name (n1 / name
                        :op1 "Salton" )))
      :domain (s0 / scheme
            :name (n0 / name
                  :op1 "tf" 
                  :op2 "weighting" )))

# ::snt "It also provides a way to generalize du to the ""is a"" relationship between classes."
# ::tokens ["\"", "It", "also", "provides", "a", "way", "to", "generalize", "du", "to", "the", "\"", "\"", "is", "a", "\"", "\"", "relationship", "between", "classes", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "PRP", "RB", "VBZ", "DT", "NN", "TO", "VB", "NNP", "IN", "DT", "``", "``", "VBZ", "DT", "``", "``", "NN", "IN", "NNS", ".", "''"]
# ::lemmas ["\"", "it", "also", "provide", "a", "way", "to", "generalize", "du", "to", "the", "\"", "\"", "be", "a", "\"", "\"", "relationship", "between", "class", ".", "\""]
(p0 / provide-01
      :ARG1 (w0 / way
            :manner-of (g0 / generalize-01
                  :ARG0 i0
                  :ARG1 (o0 / organization
                        :name (n0 / name
                              :op1 "du" 
                              :op2 "du" ))
                  :ARG2 (r0 / relation-03
                        :ARG1 (c0 / class))))
      :ARG0 (i0 / it)
      :mod (a0 / also))

# ::snt A document has representation as a vector.
# ::tokens ["A", "document", "has", "representation", "as", "a", "vector", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["a", "document", "have", "representation", "as", "a", "vector", "."]
(h0 / have-03
      :ARG1 (r0 / representation-02
            :manner (v0 / vector))
      :ARG0 (d0 / document))

# ::snt A document is represented as a vector and each dimension corresponds to a separate term.
# ::tokens ["A", "document", "is", "represented", "as", "a", "vector", "and", "each", "dimension", "corresponds", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "CC", "DT", "NN", "VBZ", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["a", "document", "be", "represent", "as", "a", "vector", "and", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(a0 / and
      :op1 (r0 / represent-01
            :ARG1 (d0 / document)
            :ARG2 (v0 / vector))
      :op2 (c0 / correspond-02
            :ARG1 (d1 / dimension
                  :mod (e0 / each))
            :ARG2 (t0 / term
                  :ARG1-of (s0 / separate-02))))

# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
# ::tokens ["A", "document", "is", "represented", "as", "a", "vector", ",", "with", "each", "dimension", "corresponding", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", ",", "IN", "DT", "NN", "VBG", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["a", "document", "be", "represent", "as", "a", "vector", ",", "with", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(r0 / represent-01
      :ARG1 (d0 / document)
      :ARG2 (v0 / vector)
      :ARG0-of (a0 / accompany-01
            :ARG1 (c0 / correspond-02
                  :ARG1 (d1 / dimension
                        :mod (e0 / each))
                  :ARG2 (t0 / term
                        :ARG1-of (s0 / separate-02)))))

# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
# ::tokens ["The", "basic", "idea", "is", "to", "represent", "each", "document", "as", "a", "vector", "of", "certain", "weighted", "word", "frequencies", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "VBZ", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "IN", "JJ", "JJ", "NN", "NNS", "."]
# ::lemmas ["the", "basic", "idea", "be", "to", "represent", "each", "document", "as", "a", "vector", "of", "certain", "weighted", "word", "frequency", "."]
(r0 / represent-01
      :ARG1 (d0 / document
            :mod (e0 / each))
      :ARG0 (i0 / idea
            :mod (b0 / basic))
      :ARG2 (v0 / vector
            :consist-of (f0 / frequency
                  :mod (c0 / certain)
                  :ARG1-of (w0 / word)
                  :ARG1-of (w1 / weight-01))))

# ::snt The vector space model are the documents which are represented as “bags of words”.
# ::tokens ["The", "vector", "space", "model", "are", "the", "documents", "which", "are", "represented", "as", "\u201c", "bags", "of", "words", "\u201d", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBP", "DT", "NNS", "WDT", "VBP", "VBN", "IN", "``", "NNS", "IN", "NNS", "''", "."]
# ::lemmas ["the", "vector", "space", "model", "be", "the", "document", "which", "be", "represent", "as", "\"", "bag", "of", "word", "\"", "."]
(d0 / document
      :ARG1-of (r0 / represent-01
            :ARG2 (b0 / bag
                  :consist-of (w0 / word)))
      :domain (m0 / model
            :mod (s0 / space
                  :mod (v0 / vector))))

# ::snt The value of a vector is non-zero if a term occurs in the document.
# ::tokens ["The", "value", "of", "a", "vector", "is", "non", "-", "zero", "if", "a", "term", "occurs", "in", "the", "document", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "I", "I", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NN", "VBZ", "JJ", "JJ", "CD", "IN", "DT", "NN", "VBZ", "IN", "DT", "NN", "."]
# ::lemmas ["the", "value", "of", "a", "vector", "be", "non", "-", "zero", "if", "a", "term", "occur", "in", "the", "document", "."]
(h0 / have-condition-91
      :ARG1 (e0 / equal-01
            :ARG1 (t0 / thing
                  :ARG2-of (v0 / value-01
                        :ARG1 (v1 / vector)))
            :ARG2 (z0 / zero)
            :polarity - )
      :ARG2 (b0 / be-located-at-91
            :ARG1 (t1 / term)
            :ARG2 (d0 / document)))

# ::snt In probability theory, the prior and conditional probabilities of two random events are related by Bayes' theorem.
# ::tokens ["In", "probability", "theory", ",", "the", "prior", "and", "conditional", "probabilities", "of", "two", "random", "events", "are", "related", "by", "Bayes", "'", "theorem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "NN", ",", "DT", "JJ", "CC", "JJ", "NNS", "IN", "CD", "JJ", "NNS", "VBP", "VBN", "IN", "NNP", "POS", "NN", "."]
# ::lemmas ["in", "probability", "theory", ",", "the", "prior", "and", "conditional", "probability", "of", "two", "random", "event", "be", "relate", "by", "Bayes", "'", "theorem", "."]
(r0 / relate-01
      :ARG1 (t0 / theorem
            :poss (p0 / person
                  :name (n0 / name
                        :op1 "Bayes" )))
      :ARG1 (a0 / and
            :op1 (p1 / prior)
            :op2 (p2 / probability
                  :mod (c0 / condition-01)))
      :location (t1 / theory
            :mod (e0 / event
                  :mod (r1 / random)
                  :quant 2 )
            :mod (p3 / probability)
            :mod (p4 / probability)))

# ::snt Use these optimal solutions to construct an optimal solution for the original problem.
# ::tokens ["Use", "these", "optimal", "solutions", "to", "construct", "an", "optimal", "solution", "for", "the", "original", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "DT", "JJ", "NNS", "TO", "VB", "DT", "JJ", "NN", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["use", "these", "optimal", "solution", "to", "construct", "an", "optimal", "solution", "for", "the", "original", "problem", "."]
(u0 / use-01
      :ARG1 (t0 / thing
            :mod (o0 / optimal)
            :mod (t1 / this)
            :ARG2-of (s0 / solve-01))
      :ARG0 (y0 / you)
      :ARG2 (c0 / construct-01
            :ARG0 y0
            :ARG1 (t2 / thing
                  :mod (o1 / optimal)
                  :ARG2-of (s1 / solve-01
                        :ARG1 (p0 / problem
                              :mod (o2 / original))))))

# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
# ::tokens ["The", "basic", "idea", "is", "to", "represent", "each", "document", "as", "a", "vector", "of", "certain", "weighted", "word", "frequencies", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "VBZ", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "IN", "JJ", "JJ", "NN", "NNS", "."]
# ::lemmas ["the", "basic", "idea", "be", "to", "represent", "each", "document", "as", "a", "vector", "of", "certain", "weighted", "word", "frequency", "."]
(r0 / represent-01
      :ARG1 (d0 / document
            :mod (e0 / each))
      :ARG0 (i0 / idea
            :mod (b0 / basic))
      :ARG2 (v0 / vector
            :consist-of (f0 / frequency
                  :mod (c0 / certain)
                  :ARG1-of (w0 / word)
                  :ARG1-of (w1 / weight-01))))

# ::snt A problem with overlapping subproblems means that the same subproblems may be used to solve many different larger problems.
# ::tokens ["A", "problem", "with", "overlapping", "subproblems", "means", "that", "the", "same", "subproblems", "may", "be", "used", "to", "solve", "many", "different", "larger", "problems", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "VBG", "NNS", "VBZ", "IN", "DT", "JJ", "NNS", "MD", "VB", "VBN", "TO", "VB", "JJ", "JJ", "JJR", "NNS", "."]
# ::lemmas ["a", "problem", "with", "overlap", "subproblem", "mean", "that", "the", "same", "subproblem", "may", "be", "use", "to", "solve", "many", "different", "large", "problem", "."]
(m0 / mean-01
      :ARG1 (p0 / problem
            :topic (s0 / subproblem
                  :ARG1-of (c0 / coverage-06)))
      :ARG2 (p1 / possible-01
            :ARG1 (u0 / use-01
                  :ARG1 (s1 / subproblem
                        :ARG1-of (s3 / same-01))
                  :ARG2 (s2 / solve-01
                        :ARG0 s1
                        :ARG1 (p2 / problem
                              :ARG1-of (h0 / have-degree-91
                                    :ARG3 (l0 / large)
                                    :ARG3 (m2 / more))
                              :ARG1-of (d0 / differ-02)
                              :quant (m1 / many))))))

# ::snt What is the probability this student is a girl?
# ::tokens ["What", "is", "the", "probability", "this", "student", "is", "a", "girl", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "DT", "NN", "VBZ", "DT", "NN", "."]
# ::lemmas ["what", "be", "the", "probability", "this", "student", "be", "a", "girl", "?"]
(p0 / probable
      :domain (g0 / girl
            :domain (p1 / person
                  :mod (t0 / this)
                  :ARG0-of (s0 / study-01)))
      :domain (a0 / amr-unknown))

# ::snt There are four steps in Dynamic Programming: 1.
# ::tokens ["There", "are", "four", "steps", "in", "Dynamic", "Programming", ":", "1", "."]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["EX", "VBP", "CD", "NNS", "IN", "NNP", "NNP", ":", "CD", "."]
# ::lemmas ["there", "be", "four", "step", "in", "Dynamic", "Programming", ":", "1", "."]
(t0 / thing
      :ARG4-of (s0 / step-01)
      :ord 4 
      :location (p0 / program
            :name (n0 / name
                  :op1 "Dynamic" 
                  :op2 "Programming" )))

# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
# ::tokens ["A", "document", "is", "represented", "as", "a", "vector", ",", "with", "each", "dimension", "corresponding", "to", "a", "separate", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", ",", "IN", "DT", "NN", "VBG", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["a", "document", "be", "represent", "as", "a", "vector", ",", "with", "each", "dimension", "correspond", "to", "a", "separate", "term", "."]
(r0 / represent-01
      :ARG1 (d0 / document)
      :ARG2 (v0 / vector)
      :ARG0-of (a0 / accompany-01
            :ARG1 (c0 / correspond-02
                  :ARG1 (d1 / dimension
                        :mod (e0 / each))
                  :ARG2 (t0 / term
                        :ARG1-of (s0 / separate-02)))))

# ::snt To explain further vector space models, basically a document is characterized by a vector.
# ::tokens ["To", "explain", "further", "vector", "space", "models", ",", "basically", "a", "document", "is", "characterized", "by", "a", "vector", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["TO", "VB", "JJ", "NN", "NN", "NNS", ",", "RB", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["to", "explain", "further", "vector", "space", "model", ",", "basically", "a", "document", "be", "characterize", "by", "a", "vector", "."]
(c0 / characterize-01
      :ARG1 (d0 / document)
      :ARG0 (v0 / vector)
      :mod (e0 / explain-01
            :ARG1 (m0 / model-01
                  :mod (s0 / space
                        :mod (v1 / vector))
                  :mod (f0 / further)))
      :mod (b0 / basic))

# ::snt In this classic model the term specific weights in the document vectors are products of local and global parameters.
# ::tokens ["In", "this", "classic", "model", "the", "term", "specific", "weights", "in", "the", "document", "vectors", "are", "products", "of", "local", "and", "global", "parameters", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "JJ", "NN", "DT", "NN", "JJ", "NNS", "IN", "DT", "NN", "NNS", "VBP", "NNS", "IN", "JJ", "CC", "JJ", "NNS", "."]
# ::lemmas ["in", "this", "classic", "model", "the", "term", "specific", "weight", "in", "the", "document", "vector", "be", "product", "of", "local", "and", "global", "parameter", "."]
(p0 / produce-01
      :ARG1 (t0 / term
            :ARG1-of (s0 / specific-02
                  :ARG2 (t2 / term))
            :location (v0 / vector
                  :mod (d0 / document)))
      :ARG2 (a0 / and
            :op1 (p1 / parameter
                  :ARG1-of (l0 / local-02))
            :op2 (p2 / parameter
                  :mod (g0 / globe)))
      :location (m0 / model
            :mod (t1 / this)
            :mod (c0 / classic)))

# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
# ::tokens ["In", "vector", "space", "model", ",", "the", "documents", "from", "which", "the", "information", "is", "to", "be", "retrieved", "are", "represented", "as", "vectors", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "NN", "NN", ",", "DT", "NNS", "IN", "WDT", "DT", "NN", "VBZ", "TO", "VB", "VBN", "VBP", "VBN", "IN", "NNS", "."]
# ::lemmas ["in", "vector", "space", "model", ",", "the", "document", "from", "which", "the", "information", "be", "to", "be", "retrieve", "be", "represent", "as", "vector", "."]
(r0 / represent-01
      :ARG1 (d0 / document
            :ARG1-of (r1 / retrieve-01
                  :ARG1 (i0 / information)))
      :ARG2 (v0 / vector)
      :location (m0 / model-01
            :ARG2 (s0 / space
                  :mod (v1 / vector))))

# ::snt It was intended to allow existing code to be used again with minimal or no alteration.
# ::tokens ["It", "was", "intended", "to", "allow", "existing", "code", "to", "be", "used", "again", "with", "minimal", "or", "no", "alteration", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "VBN", "TO", "VB", "VBG", "NN", "TO", "VB", "VBN", "RB", "IN", "JJ", "CC", "DT", "NN", "."]
# ::lemmas ["it", "be", "intend", "to", "allow", "exist", "code", "to", "be", "use", "again", "with", "minimal", "or", "no", "alteration", "."]
(i0 / intend-01
      :ARG1 (a0 / allow-01
            :ARG1 (u0 / use-01
                  :ARG1 (c0 / code
                        :ARG1-of (e0 / exist-01))
                  :mod (a1 / again)
                  :manner (o0 / or
                        :op1 (a2 / alter-01
                              :polarity - )
                        :op2 (a3 / alter-01
                              :ARG1-of (m0 / minimal-02))))))

# ::snt The limitations of the vector space model are thus.
# ::tokens ["The", "limitations", "of", "the", "vector", "space", "model", "are", "thus", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNS", "IN", "DT", "NN", "NN", "NN", "VBP", "RB", "."]
# ::lemmas ["the", "limitation", "of", "the", "vector", "space", "model", "be", "thus", "."]
(c0 / cause-01
      :ARG1 (l0 / limit-01
            :ARG1 (m0 / model
                  :mod (s0 / space
                        :mod (v0 / vector)))))

# ::snt The key to Dynamic Programming is to find the structure of optimal solutions.
# ::tokens ["The", "key", "to", "Dynamic", "Programming", "is", "to", "find", "the", "structure", "of", "optimal", "solutions", "."]
# ::ner_tags ["O", "O", "O", "PERSON", "PERSON", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "I", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "NNP", "NNP", "VBZ", "TO", "VB", "DT", "NN", "IN", "JJ", "NNS", "."]
# ::lemmas ["the", "key", "to", "Dynamic", "Programming", "be", "to", "find", "the", "structure", "of", "optimal", "solution", "."]
(k0 / key-02
      :ARG1 (f0 / figure-out-05
            :manner (p0 / product
                  :name (n0 / name
                        :op1 "Dynamic" 
                        :op2 "Programming" )))
      :ARG2 (f1 / find-01
            :ARG1 (s0 / structure-01
                  :ARG1 (t0 / thing
                        :mod (o0 / optimal)
                        :ARG2-of (s1 / solve-01)))))

# ::snt Terms are basically the words or any indexing unit used to identify the contents of a text.
# ::tokens ["Terms", "are", "basically", "the", "words", "or", "any", "indexing", "unit", "used", "to", "identify", "the", "contents", "of", "a", "text", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "VBP", "RB", "DT", "NNS", "CC", "DT", "NN", "NN", "VBN", "TO", "VB", "DT", "NNS", "IN", "DT", "NN", "."]
# ::lemmas ["term", "be", "basically", "the", "word", "or", "any", "indexing", "unit", "use", "to", "identify", "the", "content", "of", "a", "text", "."]
(o0 / or
      :op1 (w0 / word)
      :op2 (u0 / unit
            :mod (a0 / any)
            :ARG0-of (u1 / use-01
                  :ARG2 (i0 / identify-01
                        :ARG1 (t1 / thing
                              :ARG1-of (c0 / contain-01
                                    :ARG0 (t2 / text)))))
            :ARG0-of (d0 / define-01))
      :domain (b0 / basic)
      :domain (t0 / term))

# ::snt Bayes theorem can be used to compute the probability that a proposed diagnosis is correct.
# ::tokens ["Bayes", "theorem", "can", "be", "used", "to", "compute", "the", "probability", "that", "a", "proposed", "diagnosis", "is", "correct", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NN", "MD", "VB", "VBN", "TO", "VB", "DT", "NN", "WDT", "DT", "VBN", "NN", "VBZ", "JJ", "."]
# ::lemmas ["Bayes", "theorem", "can", "be", "use", "to", "compute", "the", "probability", "that", "a", "propose", "diagnosis", "be", "correct", "."]
(p0 / possible-01
      :ARG1 (u0 / use-01
            :ARG1 (t0 / theorem
                  :name (n0 / name
                        :op1 "Bayes" 
                        :op2 "theorem" ))
            :ARG2 (c0 / compile-01
                  :ARG0 t0
                  :ARG1 (p1 / probability
                        :domain (c1 / correct-02
                              :ARG1 (t1 / thing
                                    :ARG1-of (p2 / propose-01)
                                    :ARG2-of (d0 / diagnose-01)))))))

# ::snt It is also called the posterior probability because it is derived from or depends upon the specified value of B.
# ::tokens ["It", "is", "also", "called", "the", "posterior", "probability", "because", "it", "is", "derived", "from", "or", "depends", "upon", "the", "specified", "value", "of", "B."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VBN", "DT", "JJ", "NN", "IN", "PRP", "VBZ", "VBN", "IN", "CC", "VBZ", "IN", "DT", "VBN", "NN", "IN", "NNP"]
# ::lemmas ["it", "be", "also", "call", "the", "posterior", "probability", "because", "it", "be", "derive", "from", "or", "depend", "upon", "the", "specify", "value", "of", "B."]
(c0 / call-01
      :ARG1 (i0 / it
            :ARG1-of (d0 / derive-01
                  :ARG2 (v0 / value
                        :ARG1-of (s0 / specify-01)))
            :ARG0-of (d1 / depend-01
                  :ARG1 v0))
      :mod (a0 / also)
      :ARG1-of (c1 / cause-01
            :ARG0 (o0 / or
                  :op2 d1))
      :ARG2 (p0 / posterior))

# ::snt The limitations of the vector space model are thus.
# ::tokens ["The", "limitations", "of", "the", "vector", "space", "model", "are", "thus", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNS", "IN", "DT", "NN", "NN", "NN", "VBP", "RB", "."]
# ::lemmas ["the", "limitation", "of", "the", "vector", "space", "model", "be", "thus", "."]
(c0 / cause-01
      :ARG1 (l0 / limit-01
            :ARG1 (m0 / model
                  :mod (s0 / space
                        :mod (v0 / vector)))))

# ::snt A possible use for a vector space model is for retrieval and filtering of information.
# ::tokens ["A", "possible", "use", "for", "a", "vector", "space", "model", "is", "for", "retrieval", "and", "filtering", "of", "information", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "IN", "DT", "NN", "NN", "NN", "VBZ", "IN", "NN", "CC", "NN", "IN", "NN", "."]
# ::lemmas ["a", "possible", "use", "for", "a", "vector", "space", "model", "be", "for", "retrieval", "and", "filtering", "of", "information", "."]
(u0 / use-01
      :ARG1 (m0 / model
            :mod (s0 / space
                  :mod (v0 / vector)))
      :ARG1-of (p0 / possible-01)
      :ARG2 (a0 / and
            :op1 (r0 / retrieve-01
                  :ARG1 (i0 / information))
            :op2 (f0 / filter-02
                  :ARG1 i0)))

# ::snt If a term occurs in the document, the value will be non-zero in the vector.
# ::tokens ["If", "a", "term", "occurs", "in", "the", "document", ",", "the", "value", "will", "be", "non", "-", "zero", "in", "the", "vector", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "NN", "VBZ", "IN", "DT", "NN", ",", "DT", "NN", "MD", "VB", "JJ", "JJ", "JJ", "IN", "DT", "NN", "."]
# ::lemmas ["if", "a", "term", "occur", "in", "the", "document", ",", "the", "value", "will", "be", "non", "-", "zero", "in", "the", "vector", "."]
(h0 / have-condition-91
      :ARG1 (b0 / be-located-at-91
            :ARG1 (t0 / term)
            :ARG2 (d0 / document))
      :ARG1 (v0 / value
            :mod (z0 / zero
                  :polarity - )
            :location (v1 / vector)))

# ::snt The peropos of inheritance in object oriented programming is to minimize the reuse of existing code without modification.
# ::tokens ["The", "peropos", "of", "inheritance", "in", "object", "oriented", "programming", "is", "to", "minimize", "the", "reuse", "of", "existing", "code", "without", "modification", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNS", "IN", "NN", "IN", "NN", "VBN", "NN", "VBZ", "TO", "VB", "DT", "NN", "IN", "VBG", "NN", "IN", "NN", "."]
# ::lemmas ["the", "peropo", "of", "inheritance", "in", "object", "orient", "programming", "be", "to", "minimize", "the", "reuse", "of", "exist", "code", "without", "modification", "."]
(h0 / have-mod-91
      :ARG1 (m0 / minimize-01
            :ARG1 (r0 / rewrite-01
                  :ARG1 (c0 / code
                        :ARG1-of (e0 / exist-01))
                  :manner (m1 / modify-01
                        :polarity - )))
      :ARG1 (i0 / inherit-01
            :ARG1 (p0 / program-01
                  :ARG1-of (o0 / orient-01
                        :ARG2 (o1 / object)))))

# ::snt A possible use for a vector space model is for retrieval and filtering of information.
# ::tokens ["A", "possible", "use", "for", "a", "vector", "space", "model", "is", "for", "retrieval", "and", "filtering", "of", "information", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "IN", "DT", "NN", "NN", "NN", "VBZ", "IN", "NN", "CC", "NN", "IN", "NN", "."]
# ::lemmas ["a", "possible", "use", "for", "a", "vector", "space", "model", "be", "for", "retrieval", "and", "filtering", "of", "information", "."]
(u0 / use-01
      :ARG1 (m0 / model
            :mod (s0 / space
                  :mod (v0 / vector)))
      :ARG1-of (p0 / possible-01)
      :ARG2 (a0 / and
            :op1 (r0 / retrieve-01
                  :ARG1 (i0 / information))
            :op2 (f0 / filter-02
                  :ARG1 i0)))

# ::snt Generalise the structure of an optimal solution 2.
# ::tokens ["Generalise", "the", "structure", "of", "an", "optimal", "solution", "2", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["VB", "DT", "NN", "IN", "DT", "JJ", "NN", "CD", "."]
# ::lemmas ["generalise", "the", "structure", "of", "an", "optimal", "solution", "2", "."]
(g0 / generalize-01
      :ARG1 (s0 / structure-01
            :ARG1 (t0 / thing
                  :mod (o0 / optimal)
                  :ARG2-of (s1 / solve-01)
                  :quant 2 ))
      :ARG0 (y0 / you))

# ::snt There are four steps in Dynamic Programming: 1.
# ::tokens ["There", "are", "four", "steps", "in", "Dynamic", "Programming", ":", "1", "."]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["EX", "VBP", "CD", "NNS", "IN", "NNP", "NNP", ":", "CD", "."]
# ::lemmas ["there", "be", "four", "step", "in", "Dynamic", "Programming", ":", "1", "."]
(t0 / thing
      :ARG4-of (s0 / step-01)
      :ord 4 
      :location (p0 / program
            :name (n0 / name
                  :op1 "Dynamic" 
                  :op2 "Programming" )))

# ::snt It is mainly used to calculate the probability of one event’s outcome given that a previous event happened.
# ::tokens ["It", "is", "mainly", "used", "to", "calculate", "the", "probability", "of", "one", "event", "\u2019s", "outcome", "given", "that", "a", "previous", "event", "happened", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VBN", "TO", "VB", "DT", "NN", "IN", "CD", "NN", "POS", "NN", "VBN", "IN", "DT", "JJ", "NN", "VBD", "."]
# ::lemmas ["it", "be", "mainly", "use", "to", "calculate", "the", "probability", "of", "one", "event", "\u2019s", "outcome", "give", "that", "a", "previous", "event", "happen", "."]
(u0 / use-01
      :ARG1 (i0 / it)
      :mod (m0 / main)
      :ARG2 (c0 / calculate-01
            :ARG1 (p0 / probable
                  :domain (o0 / outcome
                        :poss (e1 / event
                              :quant 1 ))))
      :ARG1-of (g0 / give-01
            :ARG1 (e0 / event
                  :mod (p1 / previous))))

# ::snt The vector space model has several disadvantages.
# ::tokens ["The", "vector", "space", "model", "has", "several", "disadvantages", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBZ", "JJ", "NNS", "."]
# ::lemmas ["the", "vector", "space", "model", "have", "several", "disadvantage", "."]
(a0 / advantage-01
      :ARG1 (m0 / model
            :mod (s1 / space
                  :mod (v0 / vector)))
      :polarity - 
      :ARG3 (s0 / several))

# ::snt The order in which the terms appear in the document is lost in the vector space representation.
# ::tokens ["The", "order", "in", "which", "the", "terms", "appear", "in", "the", "document", "is", "lost", "in", "the", "vector", "space", "representation", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "WDT", "DT", "NNS", "VBP", "IN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "NN", "NN", "."]
# ::lemmas ["the", "order", "in", "which", "the", "term", "appear", "in", "the", "document", "be", "lose", "in", "the", "vector", "space", "representation", "."]
(l0 / lose-02
      :ARG1 (o0 / order
            :time-of (a0 / appear-01
                  :ARG1 (t0 / term)
                  :location (d0 / document)))
      :location (r0 / representation-02
            :ARG0 (s0 / space
                  :mod (v0 / vector))))

# ::snt In the vector space model a document is represented as a vector.
# ::tokens ["In", "the", "vector", "space", "model", "a", "document", "is", "represented", "as", "a", "vector", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "NN", "NN", "NN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "."]
# ::lemmas ["in", "the", "vector", "space", "model", "a", "document", "be", "represent", "as", "a", "vector", "."]
(r0 / represent-01
      :ARG1 (d0 / document)
      :ARG2 (v0 / vector)
      :location (m0 / model-01
            :ARG1 (s0 / space
                  :mod (v1 / vector))))

# ::snt A link to a page is seen as a vote of support.
# ::tokens ["A", "link", "to", "a", "page", "is", "seen", "as", "a", "vote", "of", "support", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "IN", "NN", "."]
# ::lemmas ["a", "link", "to", "a", "page", "be", "see", "as", "a", "vote", "of", "support", "."]
(s0 / see-01
      :ARG1 (t0 / thing
            :ARG3-of (l0 / link-01
                  :ARG1 (p0 / page)))
      :ARG2 (v0 / vote-01
            :ARG1 (s1 / support-01)))

# ::snt The PageRank depends on the PageRank rating and number of all pages that have links to it.
# ::tokens ["The", "PageRank", "depends", "on", "the", "PageRank", "rating", "and", "number", "of", "all", "pages", "that", "have", "links", "to", "it", "."]
# ::ner_tags ["O", "ORG", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "B", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNP", "VBZ", "IN", "DT", "NNP", "NN", "CC", "NN", "IN", "DT", "NNS", "WDT", "VBP", "NNS", "IN", "PRP", "."]
# ::lemmas ["the", "PageRank", "depend", "on", "the", "PageRank", "rating", "and", "number", "of", "all", "page", "that", "have", "link", "to", "it", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (r0 / rate-01)
            :op2 (n0 / number
                  :quant-of (p1 / page
                        :mod (a1 / all))))
      :ARG0 (p0 / publication
            :ARG1-of (l0 / link-01
                  :ARG1 p1)
            :name (n1 / name
                  :op1 "PageRank" )))

# ::snt A possible use for a vector space model is for retrieval and filtering of information.
# ::tokens ["A", "possible", "use", "for", "a", "vector", "space", "model", "is", "for", "retrieval", "and", "filtering", "of", "information", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "IN", "DT", "NN", "NN", "NN", "VBZ", "IN", "NN", "CC", "NN", "IN", "NN", "."]
# ::lemmas ["a", "possible", "use", "for", "a", "vector", "space", "model", "be", "for", "retrieval", "and", "filtering", "of", "information", "."]
(u0 / use-01
      :ARG1 (m0 / model
            :mod (s0 / space
                  :mod (v0 / vector)))
      :ARG1-of (p0 / possible-01)
      :ARG2 (a0 / and
            :op1 (r0 / retrieve-01
                  :ARG1 (i0 / information))
            :op2 (f0 / filter-02
                  :ARG1 i0)))

# ::snt Each item in the vector represents a different keyword.
# ::tokens ["Each", "item", "in", "the", "vector", "represents", "a", "different", "keyword", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NN", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["each", "item", "in", "the", "vector", "represent", "a", "different", "keyword", "."]
(r0 / represent-01
      :ARG1 (k0 / keyword
            :ARG1-of (d0 / differ-02))
      :ARG0 (i0 / item
            :mod (e0 / each)
            :location (v0 / vector)))

# ::snt A term which occurs in the document has a value in the vector of non-zero.
# ::tokens ["A", "term", "which", "occurs", "in", "the", "document", "has", "a", "value", "in", "the", "vector", "of", "non", "-", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["DT", "NN", "WDT", "VBZ", "IN", "DT", "NN", "VBZ", "DT", "NN", "IN", "DT", "NN", "IN", "JJ", "JJ", "CD", "."]
# ::lemmas ["a", "term", "which", "occur", "in", "the", "document", "have", "a", "value", "in", "the", "vector", "of", "non", "-", "zero", "."]
(v0 / value-01
      :ARG1 (t0 / term
            :location (d0 / document))
      :location (v1 / vector
            :consist-of (z0 / zero
                  :polarity - )))

# ::snt A variation of the PageRank method bases the importance of a webpage on how many visits the page gets.
# ::tokens ["A", "variation", "of", "the", "PageRank", "method", "bases", "the", "importance", "of", "a", "webpage", "on", "how", "many", "visits", "the", "page", "gets", "."]
# ::ner_tags ["O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NNP", "NN", "VBZ", "DT", "NN", "IN", "DT", "NN", "IN", "WRB", "JJ", "NNS", "DT", "NN", "VBZ", "."]
# ::lemmas ["a", "variation", "of", "the", "PageRank", "method", "base", "the", "importance", "of", "a", "webpage", "on", "how", "many", "visit", "the", "page", "get", "."]
(b0 / base-02
      :ARG1 (i0 / important-01
            :ARG1 (n0 / number
                  :quant-of (v1 / visit-01
                        :ARG0 (p1 / page)))
            :ARG1 (w0 / webpage))
      :ARG0 (v0 / vary-01
            :ARG1 (m0 / method
                  :mod (p0 / publication
                        :name (n1 / name
                              :op1 "PageRank" )))))

# ::snt Joe records all of his results and about 0.5% of the time he accidently records the wrong results.
# ::tokens ["Joe", "records", "all", "of", "his", "results", "and", "about", "0.5", "%", "of", "the", "time", "he", "accidently", "records", "the", "wrong", "results", "."]
# ::ner_tags ["PERSON", "O", "O", "O", "O", "O", "O", "PERCENT", "PERCENT", "PERCENT", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "DT", "IN", "PRP$", "NNS", "CC", "RB", "CD", "NN", "IN", "DT", "NN", "PRP", "RB", "VBZ", "DT", "JJ", "NNS", "."]
# ::lemmas ["Joe", "record", "all", "of", "his", "result", "and", "about", "0.5", "%", "of", "the", "time", "he", "accidently", "record", "the", "wrong", "result", "."]
(a0 / and
      :op1 (r0 / record-01
            :ARG1 (r2 / result-01
                  :ARG1 p0
                  :mod (a2 / all)
                  :ARG2 (i0 / include-91
                        :ARG2 (a3 / about
                              :op1 (p1 / percentage-entity
                                    :value 0.5 ))))
            :ARG0 (p0 / person
                  :name (n0 / name
                        :op1 "Joe" )))
      :op2 (r1 / record-01
            :ARG0 p0
            :ARG1 (t0 / thing
                  :ARG2-of (r3 / result-01)
                  :ARG2-of (w0 / wrong-04))
            :manner (a1 / accidental)))

# ::snt Bayes' theorem is useful in evaluating the result of drug tests.
# ::tokens ["Bayes", "'", "theorem", "is", "useful", "in", "evaluating", "the", "result", "of", "drug", "tests", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NN", "VBZ", "JJ", "IN", "VBG", "DT", "NN", "IN", "NN", "NNS", "."]
# ::lemmas ["Bayes", "'", "theorem", "be", "useful", "in", "evaluate", "the", "result", "of", "drug", "test", "."]
(u0 / useful-05
      :ARG1 (t0 / theorem
            :poss (p0 / person
                  :name (n0 / name
                        :op1 "Bayes" )))
      :ARG2 (e0 / evaluate-01
            :ARG0 t0
            :ARG1 (t1 / thing
                  :ARG2-of (r0 / result-01
                        :ARG1 (t2 / test-01
                              :ARG2 (d0 / drug))))))

# ::snt Dangling, links to a page which has no links to others.
# ::tokens ["Dangling", ",", "links", "to", "a", "page", "which", "has", "no", "links", "to", "others", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBG", ",", "NNS", "IN", "DT", "NN", "WDT", "VBZ", "DT", "NNS", "IN", "NNS", "."]
# ::lemmas ["dangle", ",", "link", "to", "a", "page", "which", "have", "no", "link", "to", "other", "."]
(s0 / say-01
      :ARG1 (l0 / link-01
            :ARG2 (p1 / page
                  :ARG0-of (l1 / link-01
                        :ARG2 (o0 / other)
                        :polarity - )))
      :ARG2 (p0 / person
            :name (n0 / name
                  :op1 "dangle" )))

# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
# ::tokens ["In", "vector", "space", "model", ",", "the", "documents", "from", "which", "the", "information", "is", "to", "be", "retrieved", "are", "represented", "as", "vectors", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "NN", "NN", ",", "DT", "NNS", "IN", "WDT", "DT", "NN", "VBZ", "TO", "VB", "VBN", "VBP", "VBN", "IN", "NNS", "."]
# ::lemmas ["in", "vector", "space", "model", ",", "the", "document", "from", "which", "the", "information", "be", "to", "be", "retrieve", "be", "represent", "as", "vector", "."]
(r0 / represent-01
      :ARG1 (d0 / document
            :ARG1-of (r1 / retrieve-01
                  :ARG1 (i0 / information)))
      :ARG2 (v0 / vector)
      :location (m0 / model-01
            :ARG2 (s0 / space
                  :mod (v1 / vector))))

# ::snt Vector space representation results in the loss of the order which the terms are in the document.
# ::tokens ["Vector", "space", "representation", "results", "in", "the", "loss", "of", "the", "order", "which", "the", "terms", "are", "in", "the", "document", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "NN", "NN", "NNS", "IN", "DT", "NN", "IN", "DT", "NN", "WDT", "DT", "NNS", "VBP", "IN", "DT", "NN", "."]
# ::lemmas ["vector", "space", "representation", "result", "in", "the", "loss", "of", "the", "order", "which", "the", "term", "be", "in", "the", "document", "."]
(r0 / result-01
      :ARG1 (r1 / represent-01
            :ARG1 (s0 / space
                  :mod (v0 / vector)))
      :ARG2 (l0 / lose-02
            :ARG1 (o0 / order
                  :location-of (t0 / term
                        :location (d0 / document)))))

# ::snt Finally, the order in which the terms appear in the document is lost in the vector space representation.
# ::tokens ["Finally", ",", "the", "order", "in", "which", "the", "terms", "appear", "in", "the", "document", "is", "lost", "in", "the", "vector", "space", "representation", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", ",", "DT", "NN", "IN", "WDT", "DT", "NNS", "VBP", "IN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "NN", "NN", "."]
# ::lemmas ["finally", ",", "the", "order", "in", "which", "the", "term", "appear", "in", "the", "document", "be", "lose", "in", "the", "vector", "space", "representation", "."]
(l0 / lose-02
      :ARG1 (o0 / order
            :time-of (a0 / appear-01
                  :ARG1 (t0 / term)
                  :location (d0 / document)))
      :mod (e0 / enter-02
            :ARG1 (s0 / space
                  :mod (v0 / vector)))
      :mod (f0 / final))

# ::snt Each document is a vector where each word is a dimension.
# ::tokens ["Each", "document", "is", "a", "vector", "where", "each", "word", "is", "a", "dimension", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "DT", "NN", "WRB", "DT", "NN", "VBZ", "DT", "NN", "."]
# ::lemmas ["each", "document", "be", "a", "vector", "where", "each", "word", "be", "a", "dimension", "."]
(v0 / vector
      :domain (d0 / document
            :mod (e0 / each))
      :location-of (d1 / dimension
            :domain (w0 / word
                  :mod (e1 / each))))

# ::snt In this classic model the term specific weights in the document vectors are products of local and global parameters.
# ::tokens ["In", "this", "classic", "model", "the", "term", "specific", "weights", "in", "the", "document", "vectors", "are", "products", "of", "local", "and", "global", "parameters", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "JJ", "NN", "DT", "NN", "JJ", "NNS", "IN", "DT", "NN", "NNS", "VBP", "NNS", "IN", "JJ", "CC", "JJ", "NNS", "."]
# ::lemmas ["in", "this", "classic", "model", "the", "term", "specific", "weight", "in", "the", "document", "vector", "be", "product", "of", "local", "and", "global", "parameter", "."]
(p0 / produce-01
      :ARG1 (t0 / term
            :ARG1-of (s0 / specific-02
                  :ARG2 (t2 / term))
            :location (v0 / vector
                  :mod (d0 / document)))
      :ARG2 (a0 / and
            :op1 (p1 / parameter
                  :ARG1-of (l0 / local-02))
            :op2 (p2 / parameter
                  :mod (g0 / globe)))
      :location (m0 / model
            :mod (t1 / this)
            :mod (c0 / classic)))

# ::snt Bayes' theorem is useful in evaluating the result of drug tests.
# ::tokens ["Bayes", "'", "theorem", "is", "useful", "in", "evaluating", "the", "result", "of", "drug", "tests", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NN", "VBZ", "JJ", "IN", "VBG", "DT", "NN", "IN", "NN", "NNS", "."]
# ::lemmas ["Bayes", "'", "theorem", "be", "useful", "in", "evaluate", "the", "result", "of", "drug", "test", "."]
(u0 / useful-05
      :ARG1 (t0 / theorem
            :poss (p0 / person
                  :name (n0 / name
                        :op1 "Bayes" )))
      :ARG2 (e0 / evaluate-01
            :ARG0 t0
            :ARG1 (t1 / thing
                  :ARG2-of (r0 / result-01
                        :ARG1 (t2 / test-01
                              :ARG2 (d0 / drug))))))

# ::snt If a term appears in the document, the terms value in the vector is non-zero.
# ::tokens ["If", "a", "term", "appears", "in", "the", "document", ",", "the", "terms", "value", "in", "the", "vector", "is", "non", "-", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["IN", "DT", "NN", "VBZ", "IN", "DT", "NN", ",", "DT", "NNS", "NN", "IN", "DT", "NN", "VBZ", "JJ", "JJ", "CD", "."]
# ::lemmas ["if", "a", "term", "appear", "in", "the", "document", ",", "the", "term", "value", "in", "the", "vector", "be", "non", "-", "zero", "."]
(h0 / have-condition-91
      :ARG1 (z0 / zero
            :polarity - 
            :domain (v0 / value
                  :location (v1 / vector)))
      :ARG2 (a0 / appear-01
            :ARG1 (t0 / term)
            :location (d0 / document)))

# ::snt In order to prevent spamming, Google releases little information on the way in which a PageRank is calculated.
# ::tokens ["In", "order", "to", "prevent", "spamming", ",", "Google", "releases", "little", "information", "on", "the", "way", "in", "which", "a", "PageRank", "is", "calculated", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "TO", "VB", "NN", ",", "NNP", "VBZ", "JJ", "NN", "IN", "DT", "NN", "IN", "WDT", "DT", "NNP", "VBZ", "VBN", "."]
# ::lemmas ["in", "order", "to", "prevent", "spamming", ",", "Google", "release", "little", "information", "on", "the", "way", "in", "which", "a", "PageRank", "be", "calculate", "."]
(r0 / release-01
      :ARG1 (i0 / information
            :quant (l0 / little)
            :topic (t0 / thing
                  :manner-of (c1 / calculate-01
                        :ARG1 (p1 / publication
                              :name (n1 / name
                                    :op1 "PageRank" )))))
      :ARG0 (c0 / company
            :name (n0 / name
                  :op1 "Google" ))
      :purpose (p0 / prevent-01
            :ARG0 c0
            :ARG1 (s0 / skim-01)))

# ::snt P(A), or the probability that the student is a girl regardless of any other information.
# ::tokens ["P(A", ")", ",", "or", "the", "probability", "that", "the", "student", "is", "a", "girl", "regardless", "of", "any", "other", "information", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "-RRB-", ",", "CC", "DT", "NN", "IN", "DT", "NN", "VBZ", "DT", "NN", "RB", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["p(a", ")", ",", "or", "the", "probability", "that", "the", "student", "be", "a", "girl", "regardless", "of", "any", "other", "information", "."]
(o0 / or
      :op1 (e0 / exemplify-01)
      :op2 (p0 / probable
            :domain (g0 / girl
                  :domain (p1 / person
                        :ARG0-of (s0 / study-01)))
            :ARG1-of (r0 / regardless-91
                  :ARG2 (i0 / information
                        :mod (o1 / other)
                        :mod (a0 / any)))))

# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
# ::tokens ["In", "vector", "space", "model", ",", "the", "documents", "from", "which", "the", "information", "is", "to", "be", "retrieved", "are", "represented", "as", "vectors", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "NN", "NN", ",", "DT", "NNS", "IN", "WDT", "DT", "NN", "VBZ", "TO", "VB", "VBN", "VBP", "VBN", "IN", "NNS", "."]
# ::lemmas ["in", "vector", "space", "model", ",", "the", "document", "from", "which", "the", "information", "be", "to", "be", "retrieve", "be", "represent", "as", "vector", "."]
(r0 / represent-01
      :ARG1 (d0 / document
            :ARG1-of (r1 / retrieve-01
                  :ARG1 (i0 / information)))
      :ARG2 (v0 / vector)
      :location (m0 / model-01
            :ARG2 (s0 / space
                  :mod (v1 / vector))))

# ::snt A term which occurs in the document has a value in the vector of non-zero.
# ::tokens ["A", "term", "which", "occurs", "in", "the", "document", "has", "a", "value", "in", "the", "vector", "of", "non", "-", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["DT", "NN", "WDT", "VBZ", "IN", "DT", "NN", "VBZ", "DT", "NN", "IN", "DT", "NN", "IN", "JJ", "JJ", "CD", "."]
# ::lemmas ["a", "term", "which", "occur", "in", "the", "document", "have", "a", "value", "in", "the", "vector", "of", "non", "-", "zero", "."]
(v0 / value-01
      :ARG1 (t0 / term
            :location (d0 / document))
      :location (v1 / vector
            :consist-of (z0 / zero
                  :polarity - )))

# ::snt Inheritance is one of the basic concepts of Object Oriented Programming.
# ::tokens ["Inheritance", "is", "one", "of", "the", "basic", "concepts", "of", "Object", "Oriented", "Programming", "."]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "CD", "IN", "DT", "JJ", "NNS", "IN", "NN", "NNP", "NNP", "."]
# ::lemmas ["Inheritance", "be", "one", "of", "the", "basic", "concept", "of", "object", "Oriented", "Programming", "."]
(c0 / concept
      :ARG1-of (i0 / include-91
            :ARG2 (c1 / concept
                  :mod (b0 / basic)
                  :part-of (p0 / program-01
                        :ARG1-of (i2 / integrate-01
                              :ARG2 (o0 / object)))))
      :domain (i1 / influence-01))

# ::snt In Java all attributes and methods are implicitly virtual.
# ::tokens ["In", "Java", "all", "attributes", "and", "methods", "are", "implicitly", "virtual", "."]
# ::ner_tags ["O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "B", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NNP", "DT", "NNS", "CC", "NNS", "VBP", "RB", "JJ", "."]
# ::lemmas ["in", "Java", "all", "attribute", "and", "method", "be", "implicitly", "virtual", "."]
(v0 / virtual
      :domain (i0 / implicitly)
      :domain (a0 / and
            :op1 (a1 / attribute-01)
            :op2 (a2 / all)
            :op2 (m0 / method))
      :location (p0 / product
            :name (n0 / name
                  :op1 "Java" )))

# ::snt The vector space model are the documents which are represented as “bags of words”.
# ::tokens ["The", "vector", "space", "model", "are", "the", "documents", "which", "are", "represented", "as", "\u201c", "bags", "of", "words", "\u201d", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBP", "DT", "NNS", "WDT", "VBP", "VBN", "IN", "``", "NNS", "IN", "NNS", "''", "."]
# ::lemmas ["the", "vector", "space", "model", "be", "the", "document", "which", "be", "represent", "as", "\"", "bag", "of", "word", "\"", "."]
(d0 / document
      :ARG1-of (r0 / represent-01
            :ARG2 (b0 / bag
                  :consist-of (w0 / word)))
      :domain (m0 / model
            :mod (s0 / space
                  :mod (v0 / vector))))

# ::snt In object oriented programming inheritance is also dependant on access level modifiers.
# ::tokens ["In", "object", "oriented", "programming", "inheritance", "is", "also", "dependant", "on", "access", "level", "modifiers", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "VBN", "NN", "NN", "VBZ", "RB", "JJ", "IN", "NN", "NN", "NNS", "."]
# ::lemmas ["in", "object", "orient", "programming", "inheritance", "be", "also", "dependant", "on", "access", "level", "modifier", "."]
(d0 / depend-01
      :ARG1 (m0 / modifier
            :mod (l0 / level
                  :mod (a1 / access-01)))
      :ARG0 (i0 / inherit-01)
      :mod (a0 / also)
      :location (p0 / program-01
            :ARG2 (o0 / orient-01
                  :ARG2 (o1 / object))))

# ::snt The value of a vector is non-zero if a term occurs in the document.
# ::tokens ["The", "value", "of", "a", "vector", "is", "non", "-", "zero", "if", "a", "term", "occurs", "in", "the", "document", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "I", "I", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NN", "VBZ", "JJ", "JJ", "CD", "IN", "DT", "NN", "VBZ", "IN", "DT", "NN", "."]
# ::lemmas ["the", "value", "of", "a", "vector", "be", "non", "-", "zero", "if", "a", "term", "occur", "in", "the", "document", "."]
(h0 / have-condition-91
      :ARG1 (e0 / equal-01
            :ARG1 (t0 / thing
                  :ARG2-of (v0 / value-01
                        :ARG1 (v1 / vector)))
            :ARG2 (z0 / zero)
            :polarity - )
      :ARG2 (b0 / be-located-at-91
            :ARG1 (t1 / term)
            :ARG2 (d0 / document)))

# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
# ::tokens ["In", "vector", "space", "model", ",", "the", "documents", "from", "which", "the", "information", "is", "to", "be", "retrieved", "are", "represented", "as", "vectors", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "NN", "NN", ",", "DT", "NNS", "IN", "WDT", "DT", "NN", "VBZ", "TO", "VB", "VBN", "VBP", "VBN", "IN", "NNS", "."]
# ::lemmas ["in", "vector", "space", "model", ",", "the", "document", "from", "which", "the", "information", "be", "to", "be", "retrieve", "be", "represent", "as", "vector", "."]
(r0 / represent-01
      :ARG1 (d0 / document
            :ARG1-of (r1 / retrieve-01
                  :ARG1 (i0 / information)))
      :ARG2 (v0 / vector)
      :location (m0 / model-01
            :ARG2 (s0 / space
                  :mod (v1 / vector))))

# ::snt A document has representation as a vector.
# ::tokens ["A", "document", "has", "representation", "as", "a", "vector", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["a", "document", "have", "representation", "as", "a", "vector", "."]
(h0 / have-03
      :ARG1 (r0 / representation-02
            :manner (v0 / vector))
      :ARG0 (d0 / document))

# ::snt However, the key in Dynamic Programming is to determine the structure of optimal solutions.
# ::tokens ["However", ",", "the", "key", "in", "Dynamic", "Programming", "is", "to", "determine", "the", "structure", "of", "optimal", "solutions", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", ",", "DT", "NN", "IN", "NNP", "NNP", "VBZ", "TO", "VB", "DT", "NN", "IN", "JJ", "NNS", "."]
# ::lemmas ["however", ",", "the", "key", "in", "Dynamic", "Programming", "be", "to", "determine", "the", "structure", "of", "optimal", "solution", "."]
(c0 / contrast-01
      :ARG2 (k0 / key-02
            :ARG1 (d0 / determine-01
                  :ARG1 (s0 / structure-01
                        :ARG1 (s1 / solution
                              :mod (o0 / optimal))))
            :ARG2 (p0 / program-01
                  :mod (p1 / philosophy))))

# ::snt If the term doesn’t occur within the document, the value in the vector is zero.
# ::tokens ["If", "the", "term", "does", "n\u2019t", "occur", "within", "the", "document", ",", "the", "value", "in", "the", "vector", "is", "zero", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["IN", "DT", "NN", "VBZ", "RB", "VB", "IN", "DT", "NN", ",", "DT", "NN", "IN", "DT", "NN", "VBZ", "CD", "."]
# ::lemmas ["if", "the", "term", "do", "not", "occur", "within", "the", "document", ",", "the", "value", "in", "the", "vector", "be", "zero", "."]
(h0 / have-condition-91
      :ARG1 (v0 / value
            :quant (v1 / vector)
            :quant (z0 / zero))
      :ARG2 (b0 / be-located-at-91
            :ARG1 (t0 / term)
            :ARG2 - 
            :ARG2 (w0 / within
                  :op1 (d0 / document))))

# ::snt The order in which the terms appear in the document is lost in the vector space representation.
# ::tokens ["The", "order", "in", "which", "the", "terms", "appear", "in", "the", "document", "is", "lost", "in", "the", "vector", "space", "representation", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "WDT", "DT", "NNS", "VBP", "IN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "NN", "NN", "."]
# ::lemmas ["the", "order", "in", "which", "the", "term", "appear", "in", "the", "document", "be", "lose", "in", "the", "vector", "space", "representation", "."]
(l0 / lose-02
      :ARG1 (o0 / order
            :time-of (a0 / appear-01
                  :ARG1 (t0 / term)
                  :location (d0 / document)))
      :location (r0 / representation-02
            :ARG0 (s0 / space
                  :mod (v0 / vector))))

# ::snt It is used in information retrieval and was first used in the SMART Information Retrieval System.
# ::tokens ["It", "is", "used", "in", "information", "retrieval", "and", "was", "first", "used", "in", "the", "SMART", "Information", "Retrieval", "System", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "VBN", "IN", "NN", "NN", "CC", "VBD", "RB", "VBN", "IN", "DT", "NNP", "NNP", "NNP", "NNP", "."]
# ::lemmas ["it", "be", "use", "in", "information", "retrieval", "and", "be", "first", "use", "in", "the", "SMART", "Information", "Retrieval", "System", "."]
(a0 / and
      :op1 (u0 / use-01
            :ARG1 (i0 / it)
            :ARG2 (r0 / retrieve-01
                  :ARG1 (i1 / information)))
      :op2 (u1 / use-01
            :ARG1 i0
            :ARG2 (t0 / thing
                  :name (n0 / name
                        :op1 "SMART" 
                        :op2 "Information" 
                        :op3 "Retrieval" 
                        :op4 "System" ))
            :ord (o0 / ordinal-entity
                  :value 1 )))

# ::snt The vector space model has the following limitations: 1.
# ::tokens ["The", "vector", "space", "model", "has", "the", "following", "limitations", ":", "1", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBZ", "DT", "VBG", "NNS", ":", "CD", "."]
# ::lemmas ["the", "vector", "space", "model", "have", "the", "follow", "limitation", ":", "1", "."]
(l0 / limit-01
      :ARG1 (m0 / model
            :mod (s0 / space
                  :mod (v0 / vector)))
      :ARG1-of (f0 / follow-01)
      :li 1 )

# ::snt Use these optimal solutions to construct an optimal solution for the original problem.
# ::tokens ["Use", "these", "optimal", "solutions", "to", "construct", "an", "optimal", "solution", "for", "the", "original", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "DT", "JJ", "NNS", "TO", "VB", "DT", "JJ", "NN", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["use", "these", "optimal", "solution", "to", "construct", "an", "optimal", "solution", "for", "the", "original", "problem", "."]
(u0 / use-01
      :ARG1 (t0 / thing
            :mod (o0 / optimal)
            :mod (t1 / this)
            :ARG2-of (s0 / solve-01))
      :ARG0 (y0 / you)
      :ARG2 (c0 / construct-01
            :ARG0 y0
            :ARG1 (t2 / thing
                  :mod (o1 / optimal)
                  :ARG2-of (s1 / solve-01
                        :ARG1 (p0 / problem
                              :mod (o2 / original))))))

# ::snt The vector space model has several disadvantages.
# ::tokens ["The", "vector", "space", "model", "has", "several", "disadvantages", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "NN", "NN", "VBZ", "JJ", "NNS", "."]
# ::lemmas ["the", "vector", "space", "model", "have", "several", "disadvantage", "."]
(a0 / advantage-01
      :ARG1 (m0 / model
            :mod (s1 / space
                  :mod (v0 / vector)))
      :polarity - 
      :ARG3 (s0 / several))

# ::snt Finally, the order in which the terms appear in the document is lost in the vector space representation.
# ::tokens ["Finally", ",", "the", "order", "in", "which", "the", "terms", "appear", "in", "the", "document", "is", "lost", "in", "the", "vector", "space", "representation", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", ",", "DT", "NN", "IN", "WDT", "DT", "NNS", "VBP", "IN", "DT", "NN", "VBZ", "VBN", "IN", "DT", "NN", "NN", "NN", "."]
# ::lemmas ["finally", ",", "the", "order", "in", "which", "the", "term", "appear", "in", "the", "document", "be", "lose", "in", "the", "vector", "space", "representation", "."]
(l0 / lose-02
      :ARG1 (o0 / order
            :time-of (a0 / appear-01
                  :ARG1 (t0 / term)
                  :location (d0 / document)))
      :mod (e0 / enter-02
            :ARG1 (s0 / space
                  :mod (v0 / vector)))
      :mod (f0 / final))

# ::snt Bayes' Theorem is a theorem of probability theory originally stated by the Reverend Thomas Bayes.
# ::tokens ["Bayes", "'", "Theorem", "is", "a", "theorem", "of", "probability", "theory", "originally", "stated", "by", "the", "Reverend", "Thomas", "Bayes", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "PERSON", "PERSON", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "O"]
# ::pos_tags ["NNP", "``", "NN", "VBZ", "DT", "NN", "IN", "NN", "NN", "RB", "VBN", "IN", "DT", "NNP", "NNP", "NNP", "."]
# ::lemmas ["Bayes", "'", "theorem", "be", "a", "theorem", "of", "probability", "theory", "originally", "state", "by", "the", "Reverend", "Thomas", "Bayes", "."]
(t0 / theorem
      :ARG1-of (t1 / theory
            :name (n0 / name
                  :op1 "Bayes" 
                  :op2 "theorem" ))
      :ARG1-of (s0 / state-01
            :ARG0 (p0 / person
                  :name (n1 / name
                        :op1 "Thomas" 
                        :op2 "Bayes" )
                  :ARG0-of (h0 / have-org-role-91
                        :ARG2 (r0 / reverend)))
            :mod (o0 / original))
      :topic (t2 / theory
            :mod (p1 / probability)))

# ::snt If a term occurs in the document, the value will be non-zero in the vector.
# ::tokens ["If", "a", "term", "occurs", "in", "the", "document", ",", "the", "value", "will", "be", "non", "-", "zero", "in", "the", "vector", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "I", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "NN", "VBZ", "IN", "DT", "NN", ",", "DT", "NN", "MD", "VB", "JJ", "JJ", "JJ", "IN", "DT", "NN", "."]
# ::lemmas ["if", "a", "term", "occur", "in", "the", "document", ",", "the", "value", "will", "be", "non", "-", "zero", "in", "the", "vector", "."]
(h0 / have-condition-91
      :ARG1 (b0 / be-located-at-91
            :ARG1 (t0 / term)
            :ARG2 (d0 / document))
      :ARG1 (v0 / value
            :mod (z0 / zero
                  :polarity - )
            :location (v1 / vector)))

# ::snt In object oriented programming inheritance is also dependant on access level modifiers.
# ::tokens ["In", "object", "oriented", "programming", "inheritance", "is", "also", "dependant", "on", "access", "level", "modifiers", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", "VBN", "NN", "NN", "VBZ", "RB", "JJ", "IN", "NN", "NN", "NNS", "."]
# ::lemmas ["in", "object", "orient", "programming", "inheritance", "be", "also", "dependant", "on", "access", "level", "modifier", "."]
(d0 / depend-01
      :ARG1 (m0 / modifier
            :mod (l0 / level
                  :mod (a1 / access-01)))
      :ARG0 (i0 / inherit-01)
      :mod (a0 / also)
      :location (p0 / program-01
            :ARG2 (o0 / orient-01
                  :ARG2 (o1 / object))))

# ::snt One of the most important uses of page rank is its meaning to advertising.
# ::tokens ["One", "of", "the", "most", "important", "uses", "of", "page", "rank", "is", "its", "meaning", "to", "advertising", "."]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["CD", "IN", "DT", "RBS", "JJ", "NNS", "IN", "NN", "NN", "VBZ", "PRP$", "NN", "IN", "NN", "."]
# ::lemmas ["One", "of", "the", "most", "important", "use", "of", "page", "rank", "be", "its", "meaning", "to", "advertising", "."]
(m0 / mean-01
      :ARG1 (t0 / thing
            :ARG1-of (u0 / use-01
                  :ARG1-of (r0 / rank-01
                        :ARG1 (p0 / page))
                  :ARG1-of (i1 / important-01)
                  :ARG1-of (h0 / have-degree-91
                        :ARG2 i1
                        :ARG3 (m1 / most)))
            :ARG1-of (i0 / include-91
                  :ARG2 (u1 / use-01)))
      :ARG2 (a0 / advertise-01))

# ::snt An example of this gain in efficiency is a path-finding problem.
# ::tokens ["An", "example", "of", "this", "gain", "in", "efficiency", "is", "a", "path", "-", "finding", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NN", "IN", "NN", "VBZ", "DT", "NN", "HYPH", "NN", "NN", "."]
# ::lemmas ["an", "example", "of", "this", "gain", "in", "efficiency", "be", "a", "path", "-", "finding", "problem", "."]
(e0 / exemplify-01
      :ARG1 (g0 / gain-02
            :ARG1 (e1 / efficient-01)
            :mod (t0 / this))
      :ARG0 (p0 / problem
            :topic (f0 / find-01
                  :ARG1 (p1 / path))))

# ::snt Since the PageRank is the most important algorithms which is used in the Google engine.
# ::tokens ["Since", "the", "PageRank", "is", "the", "most", "important", "algorithms", "which", "is", "used", "in", "the", "Google", "engine", "."]
# ::ner_tags ["O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["IN", "DT", "NNP", "VBZ", "DT", "RBS", "JJ", "NNS", "WDT", "VBZ", "VBN", "IN", "DT", "NNP", "NN", "."]
# ::lemmas ["since", "the", "PageRank", "be", "the", "most", "important", "algorithm", "which", "be", "use", "in", "the", "Google", "engine", "."]
(c0 / cause-01
      :ARG0 (a0 / algorithm
            :ARG1-of (u0 / use-01
                  :ARG2 (e0 / engine
                        :mod (c1 / company
                              :name (n1 / name
                                    :op1 "Google" ))))
            :ARG1-of (h0 / have-degree-91
                  :ARG2 i0
                  :ARG3 (m0 / most))
            :ARG1-of (i0 / important-01)
            :domain (p0 / publication
                  :name (n0 / name
                        :op1 "PageRank" ))))

# ::snt After this, it is using this to pick the best overall path.
# ::tokens ["After", "this", ",", "it", "is", "using", "this", "to", "pick", "the", "best", "overall", "path", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", ",", "PRP", "VBZ", "VBG", "DT", "TO", "VB", "DT", "JJS", "JJ", "NN", "."]
# ::lemmas ["after", "this", ",", "it", "be", "use", "this", "to", "pick", "the", "good", "overall", "path", "."]
(u0 / use-01
      :ARG1 (t0 / this)
      :ARG0 (i0 / it)
      :ARG2 (p0 / pick-01
            :ARG0 i0
            :ARG1 (p1 / path
                  :mod (o0 / overall)
                  :ARG1-of (g0 / good-02)
                  :ARG1-of (h0 / have-degree-91
                        :ARG2 g0
                        :ARG3 (m0 / most))))
      :time (a0 / after
            :op1 (t1 / this)))

# ::snt However an object cannot be cast to a class which is no relative of it.
# ::tokens ["However", "an", "object", "can", "not", "be", "cast", "to", "a", "class", "which", "is", "no", "relative", "of", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "DT", "NN", "MD", "RB", "VB", "VBN", "IN", "DT", "NN", "WDT", "VBZ", "DT", "NN", "IN", "PRP", "."]
# ::lemmas ["however", "an", "object", "can", "not", "be", "cast", "to", "a", "class", "which", "be", "no", "relative", "of", "it", "."]
(h0 / have-concession-91
      :ARG1 (p0 / possible-01
            :ARG1 (c0 / cast-01
                  :ARG1 (o0 / object
                        :ARG1-of (r0 / related-04
                              :ARG2 c1
                              :polarity - ))
                  :ARG2 (c1 / class))
            :polarity - ))

# ::snt They do not have to be written in a computer language.
# ::tokens ["They", "do", "not", "have", "to", "be", "written", "in", "a", "computer", "language", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "VBN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["they", "do", "not", "have", "to", "be", "write", "in", "a", "computer", "language", "."]
(o0 / obligate-01
      :ARG2 (t0 / they)
      :ARG2 (w0 / write-01
            :ARG1 t0
            :location (l0 / language
                  :mod (c0 / computer)))
      :polarity - )

# ::snt The other method is the top down approach which is a method that combines memorization and recursion.
# ::tokens ["The", "other", "method", "is", "the", "top", "down", "approach", "which", "is", "a", "method", "that", "combines", "memorization", "and", "recursion", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "VBZ", "DT", "NN", "JJ", "NN", "WDT", "VBZ", "DT", "NN", "WDT", "VBZ", "NN", "CC", "NN", "."]
# ::lemmas ["the", "other", "method", "be", "the", "top", "down", "approach", "which", "be", "a", "method", "that", "combine", "memorization", "and", "recursion", "."]
(m0 / method
      :mod (o0 / other)
      :domain (a0 / approach-02
            :mod (d0 / down))
      :ARG0-of (c0 / combine-01
            :ARG1 (a1 / and
                  :op2 (r0 / recursion))
            :ARG1 (m1 / memorization)))

# ::snt It is similar to divide and conquer, however is differentiated as its subproblems are not independent.
# ::tokens ["It", "is", "similar", "to", "divide", "and", "conquer", ",", "however", "is", "differentiated", "as", "its", "subproblems", "are", "not", "independent", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "JJ", "TO", "VB", "CC", "VB", ",", "RB", "VBZ", "VBN", "IN", "PRP$", "NNS", "VBP", "RB", "JJ", "."]
# ::lemmas ["it", "be", "similar", "to", "divide", "and", "conquer", ",", "however", "be", "differentiate", "as", "its", "subproblem", "be", "not", "independent", "."]
(c0 / contrast-01
      :ARG2 (d0 / differ-02
            :ARG1 (i0 / it
                  :domain-of (d1 / depend-01
                        :ARG0 (s0 / subproblem)
                        :polarity - ))
            :ARG1-of (c1 / cause-01
                  :ARG0 d1))
      :ARG1 (r0 / resemble-01
            :ARG2 (a0 / and
                  :op1 (d2 / divide-02)
                  :op2 (c2 / conquer-01))))

# ::snt "It also provides a way to generalize du to the ""is a"" relationship between classes."
# ::tokens ["\"", "It", "also", "provides", "a", "way", "to", "generalize", "du", "to", "the", "\"", "\"", "is", "a", "\"", "\"", "relationship", "between", "classes", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "PRP", "RB", "VBZ", "DT", "NN", "TO", "VB", "NNP", "IN", "DT", "``", "``", "VBZ", "DT", "``", "``", "NN", "IN", "NNS", ".", "''"]
# ::lemmas ["\"", "it", "also", "provide", "a", "way", "to", "generalize", "du", "to", "the", "\"", "\"", "be", "a", "\"", "\"", "relationship", "between", "class", ".", "\""]
(p0 / provide-01
      :ARG1 (w0 / way
            :manner-of (g0 / generalize-01
                  :ARG0 i0
                  :ARG1 (o0 / organization
                        :name (n0 / name
                              :op1 "du" 
                              :op2 "du" ))
                  :ARG2 (r0 / relation-03
                        :ARG1 (c0 / class))))
      :ARG0 (i0 / it)
      :mod (a0 / also))

# ::snt It is similar to divide and conquer, however is differentiated as its subproblems are not independent.
# ::tokens ["It", "is", "similar", "to", "divide", "and", "conquer", ",", "however", "is", "differentiated", "as", "its", "subproblems", "are", "not", "independent", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "JJ", "TO", "VB", "CC", "VB", ",", "RB", "VBZ", "VBN", "IN", "PRP$", "NNS", "VBP", "RB", "JJ", "."]
# ::lemmas ["it", "be", "similar", "to", "divide", "and", "conquer", ",", "however", "be", "differentiate", "as", "its", "subproblem", "be", "not", "independent", "."]
(c0 / contrast-01
      :ARG2 (d0 / differ-02
            :ARG1 (i0 / it
                  :domain-of (d1 / depend-01
                        :ARG0 (s0 / subproblem)
                        :polarity - ))
            :ARG1-of (c1 / cause-01
                  :ARG0 d1))
      :ARG1 (r0 / resemble-01
            :ARG2 (a0 / and
                  :op1 (d2 / divide-02)
                  :op2 (c2 / conquer-01))))

# ::snt However an object cannot be cast to a class which is no relative of it.
# ::tokens ["However", "an", "object", "can", "not", "be", "cast", "to", "a", "class", "which", "is", "no", "relative", "of", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "DT", "NN", "MD", "RB", "VB", "VBN", "IN", "DT", "NN", "WDT", "VBZ", "DT", "NN", "IN", "PRP", "."]
# ::lemmas ["however", "an", "object", "can", "not", "be", "cast", "to", "a", "class", "which", "be", "no", "relative", "of", "it", "."]
(h0 / have-concession-91
      :ARG1 (p0 / possible-01
            :ARG1 (c0 / cast-01
                  :ARG1 (o0 / object
                        :ARG1-of (r0 / related-04
                              :ARG2 c1
                              :polarity - ))
                  :ARG2 (c1 / class))
            :polarity - ))

# ::snt The main problem is divided into sub problems which are solved and stored for future use.
# ::tokens ["The", "main", "problem", "is", "divided", "into", "sub", "problems", "which", "are", "solved", "and", "stored", "for", "future", "use", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "VBZ", "VBN", "IN", "NN", "NNS", "WDT", "VBP", "VBN", "CC", "VBN", "IN", "JJ", "NN", "."]
# ::lemmas ["the", "main", "problem", "be", "divide", "into", "sub", "problem", "which", "be", "solve", "and", "store", "for", "future", "use", "."]
(d0 / divide-02
      :ARG1 (p0 / problem
            :mod (m0 / main)
            :ARG1-of (s0 / sub
                  :ARG1 p1))
      :ARG2 (p1 / problem
            :ARG1-of (s1 / solve-01
                  :ARG2 (u0 / use-01
                        :time (f0 / future)))
            :ARG1-of (s2 / store-01
                  :ARG2 u0)))

# ::snt For example, a program could exist to model different forms of transport.
# ::tokens ["For", "example", ",", "a", "program", "could", "exist", "to", "model", "different", "forms", "of", "transport", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NN", ",", "DT", "NN", "MD", "VB", "TO", "VB", "JJ", "NNS", "IN", "NN", "."]
# ::lemmas ["for", "example", ",", "a", "program", "could", "exist", "to", "model", "different", "form", "of", "transport", "."]
(e0 / exemplify-01
      :ARG0 (p0 / possible-01
            :ARG1 (e1 / exist-01
                  :ARG1 (p1 / program)
                  :purpose (m0 / model-01
                        :ARG0 p1
                        :ARG1 (f0 / form
                              :ARG1-of (d0 / differ-02)
                              :mod (t0 / transport-01))))))

# ::snt It is therefore used to create relationships between one object and another.
# ::tokens ["It", "is", "therefore", "used", "to", "create", "relationships", "between", "one", "object", "and", "another", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VBN", "TO", "VB", "NNS", "IN", "CD", "NN", "CC", "DT", "."]
# ::lemmas ["it", "be", "therefore", "use", "to", "create", "relationship", "between", "one", "object", "and", "another", "."]
(c0 / cause-01
      :ARG1 (u0 / use-01
            :ARG1 (i0 / it)
            :ARG2 (c1 / create-01
                  :ARG0 i0
                  :ARG1 (r0 / relation-03
                        :ARG1 (o0 / object
                              :mod (o2 / one))
                        :ARG2 (o1 / object
                              :mod (a0 / another))))))

# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
# ::tokens ["The", "easiest", "way", "to", "look", "at", "inheritance", "is", "as", "an", "\u201c", "\u2026", "is", "a", "kind", "of", "\u201d", "relationship", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJS", "NN", "TO", "VB", "IN", "NN", "VBZ", "IN", "DT", "``", "NFP", "VBZ", "DT", "NN", "IN", "''", "NN", "."]
# ::lemmas ["the", "easy", "way", "to", "look", "at", "inheritance", "be", "as", "an", "\"", "\u2026", "be", "a", "kind", "of", "\"", "relationship", "."]
(w0 / way
      :ARG1-of (s0 / simple-02)
      :ARG1-of (h0 / have-degree-91
            :ARG3 (m0 / more))
      :domain (l0 / look-01
            :ARG1 (i0 / inherit-01))
      :domain (r0 / relation-03
            :mod (k0 / kind)))

# ::snt The PageRank is a recursive algorithm used by Google to determine which webpages are more important than others.
# ::tokens ["The", "PageRank", "is", "a", "recursive", "algorithm", "used", "by", "Google", "to", "determine", "which", "webpages", "are", "more", "important", "than", "others", "."]
# ::ner_tags ["O", "ORG", "O", "O", "O", "O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "B", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNP", "VBZ", "DT", "JJ", "NN", "VBN", "IN", "NNP", "TO", "VB", "WDT", "NNS", "VBP", "RBR", "JJ", "IN", "NNS", "."]
# ::lemmas ["the", "PageRank", "be", "a", "recursive", "algorithm", "use", "by", "Google", "to", "determine", "which", "webpage", "be", "more", "important", "than", "other", "."]
(a0 / algorithm
      :ARG1-of (r0 / recursive)
      :ARG1-of (u0 / use-01)
      :domain (d0 / determine-01
            :ARG1 (h0 / have-degree-91
                  :ARG1 (w0 / webpage)
                  :ARG2 (i0 / important-01
                        :ARG1 w0)
                  :ARG3 (m0 / more)
                  :ARG4 (o0 / other)))
      :domain (p0 / publication
            :name (n0 / name
                  :op1 "Google" 
                  :op2 "PageRank" )))

# ::snt Mathematicians use the word to describe a set of rules which anyone can follow to solve a problem.
# ::tokens ["Mathematicians", "use", "the", "word", "to", "describe", "a", "set", "of", "rules", "which", "anyone", "can", "follow", "to", "solve", "a", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "VBP", "DT", "NN", "TO", "VB", "DT", "NN", "IN", "NNS", "WDT", "NN", "MD", "VB", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["mathematician", "use", "the", "word", "to", "describe", "a", "set", "of", "rule", "which", "anyone", "can", "follow", "to", "solve", "a", "problem", "."]
(u0 / use-01
      :ARG1 (w0 / word)
      :ARG0 (m0 / mathematician)
      :ARG2 (d0 / describe-01
            :ARG0 m0
            :ARG1 (s0 / set
                  :consist-of (r0 / rule)
                  :ARG1-of (f0 / follow-02
                        :ARG0 (a0 / anyone)
                        :ARG1-of (p0 / possible-01)
                        :purpose (s1 / solve-01
                              :ARG0 a0
                              :ARG1 (p1 / problem))))))

# ::snt Mathematicians use the word to describe a set of rules which anyone can follow to solve a problem.
# ::tokens ["Mathematicians", "use", "the", "word", "to", "describe", "a", "set", "of", "rules", "which", "anyone", "can", "follow", "to", "solve", "a", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "VBP", "DT", "NN", "TO", "VB", "DT", "NN", "IN", "NNS", "WDT", "NN", "MD", "VB", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["mathematician", "use", "the", "word", "to", "describe", "a", "set", "of", "rule", "which", "anyone", "can", "follow", "to", "solve", "a", "problem", "."]
(u0 / use-01
      :ARG1 (w0 / word)
      :ARG0 (m0 / mathematician)
      :ARG2 (d0 / describe-01
            :ARG0 m0
            :ARG1 (s0 / set
                  :consist-of (r0 / rule)
                  :ARG1-of (f0 / follow-02
                        :ARG0 (a0 / anyone)
                        :ARG1-of (p0 / possible-01)
                        :purpose (s1 / solve-01
                              :ARG0 a0
                              :ARG1 (p1 / problem))))))

# ::snt After this, it is using this to pick the best overall path.
# ::tokens ["After", "this", ",", "it", "is", "using", "this", "to", "pick", "the", "best", "overall", "path", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", ",", "PRP", "VBZ", "VBG", "DT", "TO", "VB", "DT", "JJS", "JJ", "NN", "."]
# ::lemmas ["after", "this", ",", "it", "be", "use", "this", "to", "pick", "the", "good", "overall", "path", "."]
(u0 / use-01
      :ARG1 (t0 / this)
      :ARG0 (i0 / it)
      :ARG2 (p0 / pick-01
            :ARG0 i0
            :ARG1 (p1 / path
                  :mod (o0 / overall)
                  :ARG1-of (g0 / good-02)
                  :ARG1-of (h0 / have-degree-91
                        :ARG2 g0
                        :ARG3 (m0 / most))))
      :time (a0 / after
            :op1 (t1 / this)))

# ::snt There is also Conditional Probability which is usually interested in the way variables relate to each other.
# ::tokens ["There", "is", "also", "Conditional", "Probability", "which", "is", "usually", "interested", "in", "the", "way", "variables", "relate", "to", "each", "other", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBZ", "RB", "NNP", "NNP", "WDT", "VBZ", "RB", "JJ", "IN", "DT", "NN", "NNS", "VBP", "IN", "DT", "JJ", "."]
# ::lemmas ["there", "be", "also", "Conditional", "Probability", "which", "be", "usually", "interested", "in", "the", "way", "variable", "relate", "to", "each", "other", "."]
(i0 / interest-01
      :mod (t0 / thing
            :name (n0 / name
                  :op1 "Conditional" 
                  :op2 "Probability" ))
      :mod (a0 / also)
      :mod (u0 / usual)
      :ARG2 (w0 / way
            :manner-of (r0 / relate-01
                  :ARG1 (v0 / variable)
                  :ARG2 (o0 / other
                        :mod (e0 / each)))))

# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
# ::tokens ["The", "easiest", "way", "to", "look", "at", "inheritance", "is", "as", "an", "\u201c", "\u2026", "is", "a", "kind", "of", "\u201d", "relationship", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJS", "NN", "TO", "VB", "IN", "NN", "VBZ", "IN", "DT", "``", "NFP", "VBZ", "DT", "NN", "IN", "''", "NN", "."]
# ::lemmas ["the", "easy", "way", "to", "look", "at", "inheritance", "be", "as", "an", "\"", "\u2026", "be", "a", "kind", "of", "\"", "relationship", "."]
(w0 / way
      :ARG1-of (s0 / simple-02)
      :ARG1-of (h0 / have-degree-91
            :ARG3 (m0 / more))
      :domain (l0 / look-01
            :ARG1 (i0 / inherit-01))
      :domain (r0 / relation-03
            :mod (k0 / kind)))

# ::snt The advantage being the less time consumption in comparison to other amateur methods.
# ::tokens ["The", "advantage", "being", "the", "less", "time", "consumption", "in", "comparison", "to", "other", "amateur", "methods", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBG", "DT", "JJR", "NN", "NN", "IN", "NN", "IN", "JJ", "JJ", "NNS", "."]
# ::lemmas ["the", "advantage", "be", "the", "less", "time", "consumption", "in", "comparison", "to", "other", "amateur", "method", "."]
(a0 / advantage-01
      :ARG1 (c0 / consume-01
            :ARG1 (t0 / time
                  :mod (l0 / less))
            :ARG1-of (c1 / compare-01
                  :ARG2 (m0 / method
                        :mod (o0 / other)
                        :mod (a1 / amateur)))))

# ::snt It is mainly used to calculate the probability of one event’s outcome given that a previous event happened.
# ::tokens ["It", "is", "mainly", "used", "to", "calculate", "the", "probability", "of", "one", "event", "\u2019s", "outcome", "given", "that", "a", "previous", "event", "happened", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VBN", "TO", "VB", "DT", "NN", "IN", "CD", "NN", "POS", "NN", "VBN", "IN", "DT", "JJ", "NN", "VBD", "."]
# ::lemmas ["it", "be", "mainly", "use", "to", "calculate", "the", "probability", "of", "one", "event", "\u2019s", "outcome", "give", "that", "a", "previous", "event", "happen", "."]
(u0 / use-01
      :ARG1 (i0 / it)
      :mod (m0 / main)
      :ARG2 (c0 / calculate-01
            :ARG1 (p0 / probable
                  :domain (o0 / outcome
                        :poss (e1 / event
                              :quant 1 ))))
      :ARG1-of (g0 / give-01
            :ARG1 (e0 / event
                  :mod (p1 / previous))))

# ::snt Instead, a new object is made to inherit properties of objects which already exist.
# ::tokens ["Instead", ",", "a", "new", "object", "is", "made", "to", "inherit", "properties", "of", "objects", "which", "already", "exist", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", ",", "DT", "JJ", "NN", "VBZ", "VBN", "TO", "VB", "NNS", "IN", "NNS", "WDT", "RB", "VBP", "."]
# ::lemmas ["instead", ",", "a", "new", "object", "be", "make", "to", "inherit", "property", "of", "object", "which", "already", "exist", "."]
(i0 / instead-of-91
      :ARG1 (m0 / make-01
            :ARG1 (i1 / inherit-01
                  :ARG0 o0
                  :ARG1 (p0 / property
                        :poss (o1 / object)))
            :ARG1 (o0 / object
                  :ARG1-of (e0 / exist-01
                        :ARG1 o1
                        :time (a0 / already))
                  :ARG1-of (n0 / new-01))))

# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
# ::tokens ["The", "easiest", "way", "to", "look", "at", "inheritance", "is", "as", "an", "\u201c", "\u2026", "is", "a", "kind", "of", "\u201d", "relationship", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJS", "NN", "TO", "VB", "IN", "NN", "VBZ", "IN", "DT", "``", "NFP", "VBZ", "DT", "NN", "IN", "''", "NN", "."]
# ::lemmas ["the", "easy", "way", "to", "look", "at", "inheritance", "be", "as", "an", "\"", "\u2026", "be", "a", "kind", "of", "\"", "relationship", "."]
(w0 / way
      :ARG1-of (s0 / simple-02)
      :ARG1-of (h0 / have-degree-91
            :ARG3 (m0 / more))
      :domain (l0 / look-01
            :ARG1 (i0 / inherit-01))
      :domain (r0 / relation-03
            :mod (k0 / kind)))

# ::snt Later versions of PageRank (see the below formulas) would assume a probability distribution between 0 and 1.
# ::tokens ["Later", "versions", "of", "PageRank", "(", "see", "the", "below", "formulas", ")", "would", "assume", "a", "probability", "distribution", "between", "0", "and", "1", "."]
# ::ner_tags ["O", "O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNS", "IN", "NNP", "-LRB-", "VB", "DT", "IN", "NNS", "-RRB-", "MD", "VB", "DT", "NN", "NN", "IN", "CD", "CC", "CD", "."]
# ::lemmas ["later", "version", "of", "PageRank", "(", "see", "the", "below", "formula", ")", "would", "assume", "a", "probability", "distribution", "between", "0", "and", "1", "."]
(a0 / assume-02
      :ARG1 (d0 / distribute-01
            :ARG1 (p0 / probability)
            :ARG2 (b0 / between
                  :op1 0 
                  :op2 1 ))
      :ARG0 (v0 / version
            :mod (a1 / after)
            :mod (s0 / see-01
                  :ARG1 (f0 / formula
                        :mod (b1 / below))
                  :ARG0 (y0 / you)
                  :mode imperative )
            :poss (c0 / company
                  :name (n0 / name
                        :op1 "PageRank" ))))

# ::snt Terms are basically the words or any indexing unit used to identify the contents of a text.
# ::tokens ["Terms", "are", "basically", "the", "words", "or", "any", "indexing", "unit", "used", "to", "identify", "the", "contents", "of", "a", "text", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "VBP", "RB", "DT", "NNS", "CC", "DT", "NN", "NN", "VBN", "TO", "VB", "DT", "NNS", "IN", "DT", "NN", "."]
# ::lemmas ["term", "be", "basically", "the", "word", "or", "any", "indexing", "unit", "use", "to", "identify", "the", "content", "of", "a", "text", "."]
(o0 / or
      :op1 (w0 / word)
      :op2 (u0 / unit
            :mod (a0 / any)
            :ARG0-of (u1 / use-01
                  :ARG2 (i0 / identify-01
                        :ARG1 (t1 / thing
                              :ARG1-of (c0 / contain-01
                                    :ARG0 (t2 / text)))))
            :ARG0-of (d0 / define-01))
      :domain (b0 / basic)
      :domain (t0 / term))

# ::snt Here by meaning that a program can be an optimal plan for the produced action.
# ::tokens ["Here", "by", "meaning", "that", "a", "program", "can", "be", "an", "optimal", "plan", "for", "the", "produced", "action", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "IN", "VBG", "IN", "DT", "NN", "MD", "VB", "DT", "JJ", "NN", "IN", "DT", "VBN", "NN", "."]
# ::lemmas ["here", "by", "mean", "that", "a", "program", "can", "be", "an", "optimal", "plan", "for", "the", "produce", "action", "."]
(m0 / mean-01
      :ARG2 (h0 / here)
      :ARG2 (p0 / possible-01
            :ARG1 (p1 / plan-01
                  :ARG1 (p2 / program)
                  :mod (o0 / optimal)
                  :purpose (a0 / act-02
                        :ARG1-of (p3 / produce-01)))))

# ::snt Occasionally it is advantageous to differentiate between these uses, as it is not necessarily noticeable from context.
# ::tokens ["Occasionally", "it", "is", "advantageous", "to", "differentiate", "between", "these", "uses", ",", "as", "it", "is", "not", "necessarily", "noticeable", "from", "context", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "PRP", "VBZ", "JJ", "TO", "VB", "IN", "DT", "NNS", ",", "IN", "PRP", "VBZ", "RB", "RB", "JJ", "IN", "NN", "."]
# ::lemmas ["occasionally", "it", "be", "advantageous", "to", "differentiate", "between", "these", "use", ",", "as", "it", "be", "not", "necessarily", "noticeable", "from", "context", "."]
(a0 / advantage-01
      :ARG1 (d0 / differentiate-01
            :ARG1 (u0 / use-01
                  :mod (t0 / this)))
      :ARG1-of (c0 / cause-01
            :ARG0 (p0 / possible-01
                  :ARG1 (n0 / notice-01
                        :source (c1 / context))
                  :polarity - ))
      :frequency (o0 / occasional))

# ::snt This can be useful when the number of times a word appears is not considered important.
# ::tokens ["This", "can", "be", "useful", "when", "the", "number", "of", "times", "a", "word", "appears", "is", "not", "considered", "important", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "MD", "VB", "JJ", "WRB", "DT", "NN", "IN", "NNS", "DT", "NN", "VBZ", "VBZ", "RB", "VBN", "JJ", "."]
# ::lemmas ["this", "can", "be", "useful", "when", "the", "number", "of", "time", "a", "word", "appear", "be", "not", "consider", "important", "."]
(p0 / possible-01
      :ARG1 (u0 / useful-05
            :ARG1 (t0 / this))
      :condition (c0 / consider-01
            :ARG1 (i0 / important-01
                  :ARG1 (n0 / number
                        :quant-of (a0 / appear-01
                              :ARG1 (w0 / word))))
            :polarity - ))

# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
# ::tokens ["The", "easiest", "way", "to", "look", "at", "inheritance", "is", "as", "an", "\u201c", "\u2026", "is", "a", "kind", "of", "\u201d", "relationship", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJS", "NN", "TO", "VB", "IN", "NN", "VBZ", "IN", "DT", "``", "NFP", "VBZ", "DT", "NN", "IN", "''", "NN", "."]
# ::lemmas ["the", "easy", "way", "to", "look", "at", "inheritance", "be", "as", "an", "\"", "\u2026", "be", "a", "kind", "of", "\"", "relationship", "."]
(w0 / way
      :ARG1-of (s0 / simple-02)
      :ARG1-of (h0 / have-degree-91
            :ARG3 (m0 / more))
      :domain (l0 / look-01
            :ARG1 (i0 / inherit-01))
      :domain (r0 / relation-03
            :mod (k0 / kind)))

# ::snt Since the PageRank is the most important algorithms which is used in the Google engine.
# ::tokens ["Since", "the", "PageRank", "is", "the", "most", "important", "algorithms", "which", "is", "used", "in", "the", "Google", "engine", "."]
# ::ner_tags ["O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["IN", "DT", "NNP", "VBZ", "DT", "RBS", "JJ", "NNS", "WDT", "VBZ", "VBN", "IN", "DT", "NNP", "NN", "."]
# ::lemmas ["since", "the", "PageRank", "be", "the", "most", "important", "algorithm", "which", "be", "use", "in", "the", "Google", "engine", "."]
(c0 / cause-01
      :ARG0 (a0 / algorithm
            :ARG1-of (u0 / use-01
                  :ARG2 (e0 / engine
                        :mod (c1 / company
                              :name (n1 / name
                                    :op1 "Google" ))))
            :ARG1-of (h0 / have-degree-91
                  :ARG2 i0
                  :ARG3 (m0 / most))
            :ARG1-of (i0 / important-01)
            :domain (p0 / publication
                  :name (n0 / name
                        :op1 "PageRank" ))))

# ::snt However an object cannot be cast to a class which is no relative of it.
# ::tokens ["However", "an", "object", "can", "not", "be", "cast", "to", "a", "class", "which", "is", "no", "relative", "of", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "DT", "NN", "MD", "RB", "VB", "VBN", "IN", "DT", "NN", "WDT", "VBZ", "DT", "NN", "IN", "PRP", "."]
# ::lemmas ["however", "an", "object", "can", "not", "be", "cast", "to", "a", "class", "which", "be", "no", "relative", "of", "it", "."]
(h0 / have-concession-91
      :ARG1 (p0 / possible-01
            :ARG1 (c0 / cast-01
                  :ARG1 (o0 / object
                        :ARG1-of (r0 / related-04
                              :ARG2 c1
                              :polarity - ))
                  :ARG2 (c1 / class))
            :polarity - ))

# ::snt Since the PageRank is the most important algorithms which is used in the Google engine.
# ::tokens ["Since", "the", "PageRank", "is", "the", "most", "important", "algorithms", "which", "is", "used", "in", "the", "Google", "engine", "."]
# ::ner_tags ["O", "O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["IN", "DT", "NNP", "VBZ", "DT", "RBS", "JJ", "NNS", "WDT", "VBZ", "VBN", "IN", "DT", "NNP", "NN", "."]
# ::lemmas ["since", "the", "PageRank", "be", "the", "most", "important", "algorithm", "which", "be", "use", "in", "the", "Google", "engine", "."]
(c0 / cause-01
      :ARG0 (a0 / algorithm
            :ARG1-of (u0 / use-01
                  :ARG2 (e0 / engine
                        :mod (c1 / company
                              :name (n1 / name
                                    :op1 "Google" ))))
            :ARG1-of (h0 / have-degree-91
                  :ARG2 i0
                  :ARG3 (m0 / most))
            :ARG1-of (i0 / important-01)
            :domain (p0 / publication
                  :name (n0 / name
                        :op1 "PageRank" ))))

# ::snt After this, it is using this to pick the best overall path.
# ::tokens ["After", "this", ",", "it", "is", "using", "this", "to", "pick", "the", "best", "overall", "path", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", ",", "PRP", "VBZ", "VBG", "DT", "TO", "VB", "DT", "JJS", "JJ", "NN", "."]
# ::lemmas ["after", "this", ",", "it", "be", "use", "this", "to", "pick", "the", "good", "overall", "path", "."]
(u0 / use-01
      :ARG1 (t0 / this)
      :ARG0 (i0 / it)
      :ARG2 (p0 / pick-01
            :ARG0 i0
            :ARG1 (p1 / path
                  :mod (o0 / overall)
                  :ARG1-of (g0 / good-02)
                  :ARG1-of (h0 / have-degree-91
                        :ARG2 g0
                        :ARG3 (m0 / most))))
      :time (a0 / after
            :op1 (t1 / this)))

# ::snt It has no relationship to computer programming; instead it is a process of finding a satisfactory algorithm.
# ::tokens ["It", "has", "no", "relationship", "to", "computer", "programming", ";", "instead", "it", "is", "a", "process", "of", "finding", "a", "satisfactory", "algorithm", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "DT", "NN", "IN", "NN", "NN", ":", "RB", "PRP", "VBZ", "DT", "NN", "IN", "VBG", "DT", "JJ", "NN", "."]
# ::lemmas ["it", "have", "no", "relationship", "to", "computer", "programming", ";", "instead", "it", "be", "a", "process", "of", "find", "a", "satisfactory", "algorithm", "."]
(c0 / contrast-01
      :ARG1 (r0 / relation-03
            :ARG1 (i0 / it)
            :ARG2 (p1 / program-01
                  :mod (c1 / computer))
            :polarity - )
      :ARG2 (p0 / process-02
            :ARG1 (f0 / find-01
                  :ARG0 i0
                  :ARG1 (a0 / algorithm
                        :ARG1-of (s0 / satisfactory-03)))))

# ::snt The further down an inheritance tree you get, the more specific the classes become.
# ::tokens ["The", "further", "down", "an", "inheritance", "tree", "you", "get", ",", "the", "more", "specific", "the", "classes", "become", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "IN", "DT", "NN", "NN", "PRP", "VBP", ",", "DT", "RBR", "JJ", "DT", "NNS", "VBP", "."]
# ::lemmas ["the", "further", "down", "an", "inheritance", "tree", "you", "get", ",", "the", "more", "specific", "the", "class", "become", "."]
(c0 / correlate-91
      :ARG1 (m0 / more
            :ARG3-of (h0 / have-quant-91
                  :ARG1 (t0 / tree
                        :mod (g0 / get-05
                              :ARG0 (y0 / you)
                              :ARG2 (d0 / down))
                        :mod (i0 / inherit-01))))
      :ARG2 (m1 / more
            :ARG3-of (h1 / have-quant-91
                  :ARG1 (s0 / specific-02
                        :ARG1 (c1 / class))
                  :ARG1 (b0 / become-01))))

# ::snt It is similar to divide and conquer, however is differentiated as its subproblems are not independent.
# ::tokens ["It", "is", "similar", "to", "divide", "and", "conquer", ",", "however", "is", "differentiated", "as", "its", "subproblems", "are", "not", "independent", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "JJ", "TO", "VB", "CC", "VB", ",", "RB", "VBZ", "VBN", "IN", "PRP$", "NNS", "VBP", "RB", "JJ", "."]
# ::lemmas ["it", "be", "similar", "to", "divide", "and", "conquer", ",", "however", "be", "differentiate", "as", "its", "subproblem", "be", "not", "independent", "."]
(c0 / contrast-01
      :ARG2 (d0 / differ-02
            :ARG1 (i0 / it
                  :domain-of (d1 / depend-01
                        :ARG0 (s0 / subproblem)
                        :polarity - ))
            :ARG1-of (c1 / cause-01
                  :ARG0 d1))
      :ARG1 (r0 / resemble-01
            :ARG2 (a0 / and
                  :op1 (d2 / divide-02)
                  :op2 (c2 / conquer-01))))

# ::snt The differing application has a direct influence on what the definition of the term means.
# ::tokens ["The", "differing", "application", "has", "a", "direct", "influence", "on", "what", "the", "definition", "of", "the", "term", "means", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBG", "NN", "VBZ", "DT", "JJ", "NN", "IN", "WP", "DT", "NN", "IN", "DT", "NN", "VBZ", "."]
# ::lemmas ["the", "differ", "application", "have", "a", "direct", "influence", "on", "what", "the", "definition", "of", "the", "term", "mean", "."]
(i0 / influence-01
      :ARG1 (t0 / thing
            :ARG2-of (m0 / mean-01
                  :ARG1 (d2 / define-01
                        :ARG1 (t1 / term))))
      :ARG0 (a0 / apply-02
            :ARG1-of (d1 / differ-01))
      :ARG1-of (d0 / direct-02))

# ::snt "It also provides a way to generalize du to the ""is a"" relationship between classes."
# ::tokens ["\"", "It", "also", "provides", "a", "way", "to", "generalize", "du", "to", "the", "\"", "\"", "is", "a", "\"", "\"", "relationship", "between", "classes", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "PRP", "RB", "VBZ", "DT", "NN", "TO", "VB", "NNP", "IN", "DT", "``", "``", "VBZ", "DT", "``", "``", "NN", "IN", "NNS", ".", "''"]
# ::lemmas ["\"", "it", "also", "provide", "a", "way", "to", "generalize", "du", "to", "the", "\"", "\"", "be", "a", "\"", "\"", "relationship", "between", "class", ".", "\""]
(p0 / provide-01
      :ARG1 (w0 / way
            :manner-of (g0 / generalize-01
                  :ARG0 i0
                  :ARG1 (o0 / organization
                        :name (n0 / name
                              :op1 "du" 
                              :op2 "du" ))
                  :ARG2 (r0 / relation-03
                        :ARG1 (c0 / class))))
      :ARG0 (i0 / it)
      :mod (a0 / also))

# ::snt "It is ""prior"" in the sense that it does not take into account any information about B."
# ::tokens ["\"", "It", "is", "\"", "\"", "prior", "\"", "\"", "in", "the", "sense", "that", "it", "does", "not", "take", "into", "account", "any", "information", "about", "B.", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "PRP", "VBZ", "``", "``", "JJ", "''", "''", "IN", "DT", "NN", "IN", "PRP", "VBZ", "RB", "VB", "IN", "NN", "DT", "NN", "IN", "NNP", "''"]
# ::lemmas ["\"", "it", "be", "\"", "\"", "prior", "\"", "\"", "in", "the", "sense", "that", "it", "do", "not", "take", "into", "account", "any", "information", "about", "B.", "\""]
(p0 / prior
      :domain (i0 / it)
      :manner (u0 / understand-01
            :ARG0 i0
            :ARG1 (i1 / information
                  :topic (a0 / any)
                  :topic (t0 / thing
                        :mod (v0 / variable
                              :name (n0 / name
                                    :op1 "B" ))))
            :polarity - ))

# ::snt The method can be abused when people deliberately link to sites in order to raise a site's PageRank.
# ::tokens ["The", "method", "can", "be", "abused", "when", "people", "deliberately", "link", "to", "sites", "in", "order", "to", "raise", "a", "site", "'s", "PageRank", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["DT", "NN", "MD", "VB", "VBN", "WRB", "NNS", "RB", "VBP", "IN", "NNS", "IN", "NN", "TO", "VB", "DT", "NN", "POS", "NNP", "."]
# ::lemmas ["the", "method", "can", "be", "abuse", "when", "people", "deliberately", "link", "to", "site", "in", "order", "to", "raise", "a", "site", "'s", "PageRank", "."]
(p0 / possible-01
      :ARG1 (a0 / abuse-02
            :ARG1 (l0 / link-01
                  :ARG1 (s0 / site)
                  :ARG0 (d0 / deliberate-01)
                  :purpose (r0 / raise-01
                        :ARG0 p1
                        :ARG1 (p2 / publication
                              :name (n0 / name
                                    :op1 "PageRank" )
                              :poss (s1 / site)))
                  :ARG0 (p1 / person))
            :ARG1 (m0 / method)))

# ::snt Spain princess testifies in historic fraud probe
# ::tokens ["Spain", "princess", "testifies", "in", "historic", "fraud", "probe"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NN", "VBZ", "IN", "JJ", "NN", "NN"]
# ::lemmas ["Spain", "princess", "testify", "in", "historic", "fraud", "probe"]
(t0 / testify-01
      :ARG1 (p0 / princess)
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "Spain" ))
      :ARG1 (p1 / probe-01
            :ARG1 (d0 / defraud-01
                  :mod (h0 / history))))

# ::snt Senate approves Obama nominee to key appeals court
# ::tokens ["Senate", "approves", "Obama", "nominee", "to", "key", "appeals", "court"]
# ::ner_tags ["ORG", "O", "ORG", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "NNP", "NN", "IN", "JJ", "NNS", "NN"]
# ::lemmas ["Senate", "approve", "Obama", "nominee", "to", "key", "appeal", "court"]
(a0 / approve-01
      :ARG1 (g0 / government-organization
            :name (n1 / name
                  :op1 "Senate" ))
      :ARG1 (n0 / nominate-01
            :ARG1 (p0 / person
                  :name (n2 / name
                        :op1 "Obama" ))
            :ARG2 (c0 / court
                  :mod (a1 / appeal-01)
                  :ARG1-of (k0 / key-02))))

# ::snt UN Rights Chief Presses Egypt on Morsi Detention
# ::tokens ["UN", "Rights", "Chief", "Presses", "Egypt", "on", "Morsi", "Detention"]
# ::ner_tags ["ORG", "O", "O", "PERSON", "PERSON", "O", "NORP", "O"]
# ::ner_iob ["B", "O", "O", "B", "I", "O", "B", "O"]
# ::pos_tags ["NNP", "NNPS", "NNP", "NNPS", "NNP", "IN", "NNP", "NNP"]
# ::lemmas ["UN", "Rights", "Chief", "Presses", "Egypt", "on", "Morsi", "Detention"]
(p0 / press-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "Egypt" ))
      :ARG0 (p1 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (o0 / organization)
                  :ARG2 (c1 / chief
                        :topic (r0 / right-05))))
      :ARG2 (d0 / detain-01
            :ARG1 (p2 / person
                  :name (n1 / name
                        :op1 "UN" ))))

# ::snt Senate confirms Janet Yellen as next Federal Reserve Chair
# ::tokens ["Senate", "confirms", "Janet", "Yellen", "as", "next", "Federal", "Reserve", "Chair"]
# ::ner_tags ["ORG", "O", "PERSON", "PERSON", "O", "O", "ORG", "ORG", "ORG"]
# ::ner_iob ["B", "O", "B", "I", "O", "O", "B", "I", "I"]
# ::pos_tags ["NNP", "VBZ", "NNP", "NNP", "IN", "JJ", "NNP", "NNP", "NNP"]
# ::lemmas ["Senate", "confirm", "Janet", "Yellen", "as", "next", "Federal", "Reserve", "Chair"]
(c0 / confirm-01
      :ARG1 (g0 / government-organization
            :name (n0 / name
                  :op1 "Senate" ))
      :ARG1 (p0 / person
            :name (n1 / name
                  :op1 "Janet" 
                  :op2 "Yellen" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG2 (c1 / chairman
                        :mod (n2 / next))
                  :ARG1 (g1 / government-organization
                        :name (n3 / name
                              :op1 "Federal" 
                              :op2 "Reserve" )))))

# ::snt Syrian rebel groups battle each other in north
# ::tokens ["Syrian", "rebel", "groups", "battle", "each", "other", "in", "north"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "JJ", "NNS", "VBP", "DT", "JJ", "IN", "NN"]
# ::lemmas ["Syrian", "rebel", "group", "battle", "each", "other", "in", "north"]
(b0 / battle-01
      :ARG1 (g0 / group
            :mod (c0 / country
                  :name (n1 / name
                        :op1 "Syria" ))
            :ARG0-of (r0 / rebel-01))
      :location (o0 / other
            :mod (e0 / each))
      :location (n0 / north))

# ::snt Rocks, tear gas fly as Thai protests heat up
# ::tokens ["Rocks", ",", "tear", "gas", "fly", "as", "Thai", "protests", "heat", "up"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "NORP", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNS", ",", "JJ", "NN", "NN", "IN", "NNP", "NNS", "VBP", "RP"]
# ::lemmas ["rock", ",", "tear", "gas", "fly", "as", "Thai", "protest", "heat", "up"]
(f0 / fly-01
      :ARG1 (a0 / and
            :op1 (r0 / rock)
            :op2 (g0 / gas
                  :mod (t0 / tear)))
      :time (h0 / heat-01
            :ARG1 (p0 / protest-01
                  :ARG0 (c0 / country
                        :name (n0 / name
                              :op1 "Thailand" )))))

# ::snt Boston bomb suspect buried in Virginia cemetery
# ::tokens ["Boston", "bomb", "suspect", "buried", "in", "Virginia", "cemetery"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "NN", "NN", "VBN", "IN", "NNP", "NN"]
# ::lemmas ["Boston", "bomb", "suspect", "bury", "in", "Virginia", "cemetery"]
(b0 / bury-01
      :ARG1 (p0 / person
            :ARG0-of (c1 / country
                  :name (n0 / name
                        :op1 "Boston" ))
            :ARG2-of (s0 / suspect-01
                  :ARG1 (b1 / bomb)))
      :ARG2 (c0 / cemetery
            :location (s1 / state
                  :name (n1 / name
                        :op1 "Virginia" ))))

# ::snt 6 killed in Philippines restaurant blast
# ::tokens ["6", "killed", "in", "Philippines", "restaurant", "blast"]
# ::ner_tags ["CARDINAL", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O"]
# ::pos_tags ["CD", "VBN", "IN", "NNP", "NN", "NN"]
# ::lemmas ["6", "kill", "in", "Philippines", "restaurant", "blast"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant 6 )
      :location (r0 / restaurant
            :location (c0 / country
                  :name (n0 / name
                        :op1 "Philippines" ))))

# ::snt China army newspaper slams US's PRISM program
# ::tokens ["China", "army", "newspaper", "slams", "US", "'s", "PRISM", "program"]
# ::ner_tags ["GPE", "O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", "NN", "NN", "VBZ", "NNP", "POS", "NN", "NN"]
# ::lemmas ["China", "army", "newspaper", "slam", "US", "'s", "prism", "program"]
(s0 / slam-02
      :ARG1 (p0 / program
            :mod (c0 / country
                  :name (n1 / name
                        :op1 "China" ))
            :mod (p1 / prism))
      :ARG0 (n0 / newspaper
            :mod (a0 / army
                  :poss (c1 / country
                        :name (n2 / name
                              :op1 "US" )))))

# ::snt Two killed in Bahrain car blast
# ::tokens ["Two", "killed", "in", "Bahrain", "car", "blast"]
# ::ner_tags ["CARDINAL", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O"]
# ::pos_tags ["CD", "VBN", "IN", "NNP", "NN", "NN"]
# ::lemmas ["Two", "kill", "in", "Bahrain", "car", "blast"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant 2 )
      :ARG1-of (c0 / cause-01
            :ARG0 (b0 / blast-05
                  :ARG1 (c1 / car
                        :location (c2 / country
                              :name (n0 / name
                                    :op1 "Bahrain" ))))))

# ::snt Russia warns it will 'respond' if interests in Ukraine attacked
# ::tokens ["Russia", "warns", "it", "will", "'", "respond", "'", "if", "interests", "in", "Ukraine", "attacked"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "VBZ", "PRP", "MD", "``", "VB", "''", "IN", "NNS", "IN", "NNP", "VBD"]
# ::lemmas ["Russia", "warn", "it", "will", "'", "respond", "'", "if", "interest", "in", "Ukraine", "attack"]
(w0 / warn-01
      :ARG1 (r0 / respond-01
            :ARG0 c0
            :condition (i0 / interest-01
                  :ARG2 (c1 / country
                        :name (n1 / name
                              :op1 "Ukraine" ))))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Russia" )))

# ::snt Couple get married in Britain's first Scientology wedding
# ::tokens ["Couple", "get", "married", "in", "Britain", "'s", "first", "Scientology", "wedding"]
# ::ner_tags ["O", "O", "O", "O", "GPE", "O", "ORDINAL", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "B", "O", "O"]
# ::pos_tags ["NN", "VBP", "VBN", "IN", "NNP", "POS", "JJ", "NNP", "NN"]
# ::lemmas ["couple", "get", "marry", "in", "Britain", "'s", "first", "Scientology", "wedding"]
(m0 / marry-01
      :ARG1 (c0 / couple)
      :time (w0 / wed-01
            :mod (o0 / ordinal-entity
                  :value 1 )
            :mod (c1 / city
                  :name (n0 / name
                        :op1 "Scientology" )
                  :location (c2 / country
                        :name (n1 / name
                              :op1 "Britain" )))))

# ::snt Russian Opposition Leader Placed Under House Arrest
# ::tokens ["Russian", "Opposition", "Leader", "Placed", "Under", "House", "Arrest"]
# ::ner_tags ["NORP", "O", "O", "PERSON", "O", "ORG", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "B", "O"]
# ::pos_tags ["NNP", "NNP", "NNP", "VBN", "IN", "NNP", "NNP"]
# ::lemmas ["Russian", "Opposition", "Leader", "Placed", "under", "House", "Arrest"]
(p0 / place-01
      :ARG1 (p1 / person
            :ARG0-of (c0 / country
                  :name (n0 / name
                        :op1 "Russia" ))
            :ARG0-of (l0 / lead-02
                  :ARG1 (o0 / oppose-01)))
      :ARG2 (u0 / under
            :op1 (s0 / strike-01
                  :ARG0 (g0 / government-organization
                        :name (n1 / name
                              :op1 "House" 
                              :op2 "House" )))))

# ::snt Senate confirms Janet Yellen as next Federal Reserve Chair
# ::tokens ["Senate", "confirms", "Janet", "Yellen", "as", "next", "Federal", "Reserve", "Chair"]
# ::ner_tags ["ORG", "O", "PERSON", "PERSON", "O", "O", "ORG", "ORG", "ORG"]
# ::ner_iob ["B", "O", "B", "I", "O", "O", "B", "I", "I"]
# ::pos_tags ["NNP", "VBZ", "NNP", "NNP", "IN", "JJ", "NNP", "NNP", "NNP"]
# ::lemmas ["Senate", "confirm", "Janet", "Yellen", "as", "next", "Federal", "Reserve", "Chair"]
(c0 / confirm-01
      :ARG1 (g0 / government-organization
            :name (n0 / name
                  :op1 "Senate" ))
      :ARG1 (p0 / person
            :name (n1 / name
                  :op1 "Janet" 
                  :op2 "Yellen" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG2 (c1 / chairman
                        :mod (n2 / next))
                  :ARG1 (g1 / government-organization
                        :name (n3 / name
                              :op1 "Federal" 
                              :op2 "Reserve" )))))

# ::snt Venezuela lawmakers brawl over election
# ::tokens ["Venezuela", "lawmakers", "brawl", "over", "election"]
# ::ner_tags ["GPE", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNS", "VBP", "IN", "NN"]
# ::lemmas ["Venezuela", "lawmaker", "brawl", "over", "election"]
(c0 / crawl-01
      :ARG1 (e0 / elect-01)
      :ARG0 (p0 / person
            :mod (l0 / legislate-01)
            :mod (c1 / country
                  :name (n0 / name
                        :op1 "Venezuela" ))))

# ::snt North Korea warns foreigners in South to evacuate
# ::tokens ["North", "Korea", "warns", "foreigners", "in", "South", "to", "evacuate"]
# ::ner_tags ["GPE", "GPE", "O", "O", "O", "LOC", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "NNS", "IN", "NNP", "TO", "VB"]
# ::lemmas ["North", "Korea", "warn", "foreigner", "in", "South", "to", "evacuate"]
(w0 / warn-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "North" 
                  :op2 "Korea" ))
      :ARG1 (p0 / person
            :mod (f0 / foreign)
            :location (c1 / country
                  :name (n1 / name
                        :op1 "South" 
                        :op2 "Korea" )))
      :ARG1 (e0 / evacuate-01
            :ARG2 p0))

# ::snt Israel officials: Strike on Syria targeted weapons
# ::tokens ["Israel", "officials", ":", "Strike", "on", "Syria", "targeted", "weapons"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "NNS", ":", "VB", "IN", "NNP", "VBD", "NNS"]
# ::lemmas ["Israel", "official", ":", "strike", "on", "Syria", "target", "weapon"]
(s0 / say-01
      :ARG1 (s1 / strike-01
            :ARG1 (w0 / weapon
                  :ARG2-of (t0 / target-01))
            :ARG0 (c0 / country
                  :name (n0 / name
                        :op1 "Syria" ))
            :mode imperative )
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c1 / country
                        :name (n1 / name
                              :op1 "Israel" ))
                  :ARG2 (o0 / official))))

# ::snt Death toll in Syria over 100,000 so far
# ::tokens ["Death", "toll", "in", "Syria", "over", "100,000", "so", "far"]
# ::ner_tags ["O", "O", "O", "GPE", "O", "CARDINAL", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "O", "B", "O", "O"]
# ::pos_tags ["NN", "NN", "IN", "NNP", "IN", "CD", "RB", "RB"]
# ::lemmas ["death", "toll", "in", "Syria", "over", "100,000", "so", "far"]
(t0 / toll
      :mod (d0 / die-01)
      :quant (o0 / over
            :op1 100000 )
      :time (s0 / so-far)
      :location (c0 / country
            :name (n0 / name
                  :op1 "Syria" )))

# ::snt Iran nuclear talks enter crucial third day
# ::tokens ["Iran", "nuclear", "talks", "enter", "crucial", "third", "day"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "DATE", "DATE"]
# ::ner_iob ["B", "O", "O", "O", "O", "B", "I"]
# ::pos_tags ["NNP", "JJ", "NNS", "VBP", "JJ", "JJ", "NN"]
# ::lemmas ["Iran", "nuclear", "talk", "enter", "crucial", "third", "day"]
(e0 / enter-01
      :ARG1 (d0 / day
            :ord (c0 / crucial)
            :ord (o0 / ordinal-entity
                  :value 3 ))
      :ARG0 (t0 / talk-01
            :mod (n0 / nucleus)
            :ARG0 (c1 / country
                  :name (n1 / name
                        :op1 "Iran" ))))

# ::snt Jodi Arias eligible for death penalty, jury says
# ::tokens ["Jodi", "Arias", "eligible", "for", "death", "penalty", ",", "jury", "says"]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "JJ", "IN", "NN", "NN", ",", "NN", "VBZ"]
# ::lemmas ["Jodi", "Arias", "eligible", "for", "death", "penalty", ",", "jury", "say"]
(s0 / say-01
      :ARG1 (q0 / qualify-02
            :ARG1 (p0 / person
                  :ARG1-of (n0 / name
                        :op1 "Jodi" 
                        :op2 "Arias" )
                  :ARG1-of (d0 / die-01))
            :ARG1-of (c0 / cause-01
                  :ARG0 d0))
      :ARG0 (j0 / jury))

# ::snt At least 100 dead as typhoon batters Philippines
# ::tokens ["At", "least", "100", "dead", "as", "typhoon", "batters", "Philippines"]
# ::ner_tags ["CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "I", "I", "O", "O", "O", "O", "B"]
# ::pos_tags ["RB", "RBS", "CD", "JJ", "IN", "NN", "NNS", "NNP"]
# ::lemmas ["At", "least", "100", "dead", "as", "typhoon", "batter", "Philippines"]
(d0 / die-01
      :ARG1 (p0 / person
            :quant (a0 / at-least
                  :op1 100 ))
      :time (c0 / cause-01
            :ARG0 (b0 / beat-01
                  :ARG0 (t0 / typhoon)
                  :ARG1 (c1 / country
                        :name (n0 / name
                              :op1 "Philippines" )))))

# ::snt High court checks President's recess appointment power
# ::tokens ["High", "court", "checks", "President", "'s", "recess", "appointment", "power"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "NNS", "NNP", "POS", "NN", "NN", "NN"]
# ::lemmas ["high", "court", "check", "President", "'s", "recess", "appointment", "power"]
(c0 / check-01
      :ARG1 (p0 / power
            :mod (p1 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG2 (p2 / president)))
            :mod (r0 / resign-01
                  :ARG0 p1))
      :ARG0 (g0 / government-organization
            :name (n0 / name
                  :op1 "high" 
                  :op2 "Court" )))

# ::snt What makes India vote? Debate at Jaipur Literature Festival
# ::tokens ["What", "makes", "India", "vote", "?", "Debate", "at", "Jaipur", "Literature", "Festival"]
# ::ner_tags ["O", "O", "GPE", "O", "O", "O", "O", "ORG", "ORG", "ORG"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "B", "I", "I"]
# ::pos_tags ["WP", "VBZ", "NNP", "VB", ".", "NN", "IN", "NNP", "NNP", "NNP"]
# ::lemmas ["what", "make", "India", "vote", "?", "debate", "at", "Jaipur", "Literature", "Festival"]
(d0 / debate-01
      :ARG1 (a0 / amr-unknown
            :ARG0-of (m0 / make-02
                  :ARG1 (v0 / vote-01
                        :ARG0 (c0 / country
                              :name (n1 / name
                                    :op1 "India" )))))
      :location (f0 / festival
            :name (n0 / name
                  :op1 "Jaipur" 
                  :op2 "Literature" 
                  :op3 "Festival" )))

# ::snt Hamas calls on Hezbollah to pull forces out of Syria
# ::tokens ["Hamas", "calls", "on", "Hezbollah", "to", "pull", "forces", "out", "of", "Syria"]
# ::ner_tags ["ORG", "O", "O", "ORG", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "VBZ", "IN", "NNP", "TO", "VB", "NNS", "IN", "IN", "NNP"]
# ::lemmas ["Hamas", "call", "on", "Hezbollah", "to", "pull", "force", "out", "of", "Syria"]
(c0 / call-03
      :ARG1 (p0 / pull-out-02
            :ARG1 p1
            :ARG1 (f0 / force)
            :ARG2 (c1 / country
                  :name (n2 / name
                        :op1 "Syria" )))
      :ARG0 (o0 / organization
            :name (n0 / name
                  :op1 "Hamas" ))
      :ARG2 (p1 / political-party
            :name (n1 / name
                  :op1 "Hezbollah" )))

# ::snt Stocks edge lower after earnings from retailers
# ::tokens ["Stocks", "edge", "lower", "after", "earnings", "from", "retailers"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "VBP", "JJR", "IN", "NNS", "IN", "NNS"]
# ::lemmas ["stock", "edge", "low", "after", "earning", "from", "retailer"]
(h0 / have-degree-91
      :ARG1 (s0 / stock)
      :ARG2 (l0 / low-04
            :ARG1 s0)
      :ARG3 (a0 / after
            :op1 (e0 / earn-01
                  :ARG0 (p0 / person
                        :ARG0-of (r0 / retail-01))))
      :ARG3 (m0 / more))

# ::snt Mt Gox finds 200,000 'forgotten' bitcoins
# ::tokens ["Mt", "Gox", "finds", "200,000", "'", "forgotten", "'", "bitcoins"]
# ::ner_tags ["PERSON", "PERSON", "O", "CARDINAL", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "CD", "``", "VBN", "''", "NNS"]
# ::lemmas ["Mt", "Gox", "find", "200,000", "'", "forget", "'", "bitcoin"]
(f0 / find-01
      :ARG1 (b0 / bitcoin
            :ARG1-of (f1 / forget-01)
            :quant 200000 )
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Mt" 
                  :op2 "Gox" )))

# ::snt China lands robot rover on moon
# ::tokens ["China", "lands", "robot", "rover", "on", "moon"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "NN", "NN", "IN", "NN"]
# ::lemmas ["China", "land", "robot", "rover", "on", "moon"]
(l0 / land-01
      :ARG1 (r0 / rover)
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "China" ))
      :location (m0 / moon))

# ::snt Spanish government approves tight restrictions on abortion
# ::tokens ["Spanish", "government", "approves", "tight", "restrictions", "on", "abortion"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "VBZ", "JJ", "NNS", "IN", "NN"]
# ::lemmas ["Spanish", "government", "approve", "tight", "restriction", "on", "abortion"]
(a0 / approve-01
      :ARG1 (r0 / restrict-01
            :ARG1 (a1 / abort-01)
            :ARG1-of (t0 / tight-05))
      :ARG0 (g0 / government-organization
            :ARG0-of (g1 / govern-01
                  :ARG1 (c0 / country
                        :name (n0 / name
                              :op1 "Spain" )))))

# ::snt Shots fired at German ambassador's residence in Athens
# ::tokens ["Shots", "fired", "at", "German", "ambassador", "'s", "residence", "in", "Athens"]
# ::ner_tags ["O", "O", "O", "NORP", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNS", "VBD", "IN", "JJ", "NN", "POS", "NN", "IN", "NNP"]
# ::lemmas ["shot", "fire", "at", "German", "ambassador", "'s", "residence", "in", "Athens"]
(f0 / fire-01
      :ARG1 (s0 / shoot-02)
      :destination (r0 / reside-01
            :ARG0 (p0 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG2 (a0 / ambassador
                              :mod (c1 / country
                                    :name (n1 / name
                                          :op1 "Germany" )))))
            :location (c0 / city
                  :name (n0 / name
                        :op1 "Athens" ))))

# ::snt Italian President Napolitano elected for second term
# ::tokens ["Italian", "President", "Napolitano", "elected", "for", "second", "term"]
# ::ner_tags ["NORP", "O", "PERSON", "O", "O", "ORDINAL", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "B", "O"]
# ::pos_tags ["JJ", "NNP", "NNP", "VBD", "IN", "JJ", "NN"]
# ::lemmas ["Italian", "President", "Napolitano", "elect", "for", "second", "term"]
(e0 / elect-01
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Napolitano" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c0 / country
                        :name (n1 / name
                              :op1 "Italy" ))
                  :ARG2 (p1 / president)))
      :ARG2 (t0 / term
            :ord (o0 / ordinal-entity
                  :value 2 )))

# ::snt North Korea says detained American tourist to face trial
# ::tokens ["North", "Korea", "says", "detained", "American", "tourist", "to", "face", "trial"]
# ::ner_tags ["GPE", "GPE", "O", "O", "NORP", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "VBN", "JJ", "NN", "TO", "VB", "NN"]
# ::lemmas ["North", "Korea", "say", "detain", "American", "tourist", "to", "face", "trial"]
(s0 / say-01
      :ARG1 (f0 / face-01
            :ARG1 (t0 / try-02
                  :ARG1 p0)
            :ARG0 (p0 / person
                  :mod (c1 / country
                        :name (n1 / name
                              :op1 "America" ))
                  :ARG0-of (t1 / tour-01)))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "North" 
                  :op2 "Korea" )))

# ::snt Mandela in Hospital for 3rd Day
# ::tokens ["Mandela", "in", "Hospital", "for", "3rd", "Day"]
# ::ner_tags ["PERSON", "O", "GPE", "O", "DATE", "DATE"]
# ::ner_iob ["B", "O", "B", "O", "B", "I"]
# ::pos_tags ["NNP", "IN", "NNP", "IN", "NNP", "NNP"]
# ::lemmas ["Mandela", "in", "Hospital", "for", "3rd", "Day"]
(b0 / be-located-at-91
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Mandela" ))
      :ARG2 (d0 / day
            :ord (o0 / ordinal-entity
                  :value 3 ))
      :ARG2 (h0 / hospital
            :name (n1 / name
                  :op1 "Hospital" )))

# ::snt Murray wins Wimbledon title ends Britains 77year agony
# ::tokens ["Murray", "wins", "Wimbledon", "title", "ends", "Britains", "77year", "agony"]
# ::ner_tags ["O", "O", "ORG", "O", "O", "NORP", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "NNP", "NN", "VBZ", "NNP", "JJ", "NN"]
# ::lemmas ["Murray", "win", "Wimbledon", "title", "end", "Britains", "77year", "agony"]
(w0 / win-01
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Murray" ))
      :ARG1 (a0 / agony
            :mod (b0 / between
                  :op1 (c0 / country
                        :name (n2 / name
                              :op1 "Britain" ))
                  :op2 (t1 / temporal-quantity
                        :quant (y0 / year)
                        :quant 1 )))
      :ARG1 (t0 / title
            :name (n1 / name
                  :op1 "Wimbledon" )))

# ::snt Pope urges action on climate change in draft encyclical
# ::tokens ["Pope", "urges", "action", "on", "climate", "change", "in", "draft", "encyclical"]
# ::ner_tags ["ORG", "ORG", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "NN", "IN", "NN", "NN", "IN", "NN", "NN"]
# ::lemmas ["Pope", "urges", "action", "on", "climate", "change", "in", "draft", "encyclical"]
(u0 / urge-01
      :ARG1 (a0 / act-02
            :ARG1 (c0 / change-01
                  :ARG1 (c1 / climate)))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Pope" ))
      :medium (e0 / encyclical
            :ARG1-of (d0 / draft-01)))

# ::snt Who was 'Jihadi John?'
# ::tokens ["Who", "was", "'", "Jihadi", "John", "?", "'"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBD", "''", "NNP", "NNP", ".", "''"]
# ::lemmas ["who", "be", "'", "Jihadi", "John", "?", "'"]
(p0 / person
      :mod (a0 / amr-unknown)
      :name (n0 / name
            :op1 "John" )
      :mod (r0 / religious-group
            :name (n1 / name
                  :op1 "Jihadi" )))

# ::snt Iran, IAEA officials meet ahead of March nuclear deadline: ISNA
# ::tokens ["Iran", ",", "IAEA", "officials", "meet", "ahead", "of", "March", "nuclear", "deadline", ":", "ISNA"]
# ::ner_tags ["GPE", "O", "ORG", "O", "O", "O", "O", "DATE", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["NNP", ",", "NNP", "NNS", "VBP", "RB", "IN", "NNP", "JJ", "NN", ":", "NNP"]
# ::lemmas ["Iran", ",", "IAEA", "official", "meet", "ahead", "of", "March", "nuclear", "deadline", ":", "ISNA"]
(m0 / meet-03
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (o0 / organization
                        :name (n2 / name
                              :op1 "IAEA" ))
                  :ARG2 (o1 / official)))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Iran" ))
      :time (a0 / ahead
            :op1 (d0 / deadline
                  :mod (n1 / nucleus)
                  :time (d1 / date-entity
                        :month 3 ))))

# ::snt U.S., EU Boost Sanctions On Russia
# ::tokens ["U.S.", ",", "EU", "Boost", "Sanctions", "On", "Russia"]
# ::ner_tags ["GPE", "O", "ORG", "O", "ORG", "ORG", "GPE"]
# ::ner_iob ["B", "O", "B", "O", "B", "I", "B"]
# ::pos_tags ["NNP", ",", "NNP", "NNP", "NNPS", "IN", "NNP"]
# ::lemmas ["U.S.", ",", "EU", "Boost", "Sanctions", "On", "Russia"]
(o0 / oppose-01
      :ARG1 (s0 / sanction-02
            :ARG0 (o1 / organization
                  :name (n1 / name
                        :op1 "EU" ))
            :ARG0 (c1 / country
                  :name (n2 / name
                        :op1 "Russia" )))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "U.S." )))

# ::snt Attorney General Eric Holder to Resign
# ::tokens ["Attorney", "General", "Eric", "Holder", "to", "Resign"]
# ::ner_tags ["O", "O", "PERSON", "PERSON", "O", "O"]
# ::ner_iob ["O", "O", "B", "I", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NNP", "NNP", "TO", "VB"]
# ::lemmas ["Attorney", "General", "Eric", "Holder", "to", "resign"]
(r0 / resign-01
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Eric" 
                  :op2 "Holder" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG2 (a0 / attorney
                        :mod (g0 / general)))))

# ::snt AbbVie cools on $55bn Shire deal after US tax changes
# ::tokens ["AbbVie", "cools", "on", "$", "55bn", "Shire", "deal", "after", "US", "tax", "changes"]
# ::ner_tags ["ORG", "O", "O", "O", "MONEY", "O", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "B", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NN", "VBZ", "IN", "$", "JJ", "NNP", "NN", "IN", "NNP", "NN", "NNS"]
# ::lemmas ["AbbVie", "cool", "on", "$", "55bn", "Shire", "deal", "after", "US", "tax", "change"]
(c0 / cool-01
      :ARG1 (d0 / deal
            :ARG1-of (m0 / monetary-quantity
                  :quant (d1 / dollar)
                  :quant 500000000000 )
            :ARG1-of (t0 / trade-01))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "AbbVie" ))
      :time (a0 / after
            :op1 (c1 / change-01
                  :ARG1 (t1 / tax-01
                        :ARG2 (c2 / country
                              :name (n1 / name
                                    :op1 "US" ))))))

# ::snt Hawaii bracing as first hurricane in 22 years approaches
# ::tokens ["Hawaii", "bracing", "as", "first", "hurricane", "in", "22", "years", "approaches"]
# ::ner_tags ["GPE", "O", "O", "ORDINAL", "O", "O", "DATE", "DATE", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "B", "I", "O"]
# ::pos_tags ["NNS", "VBG", "IN", "JJ", "NN", "IN", "CD", "NNS", "NNS"]
# ::lemmas ["Hawaii", "brace", "as", "first", "hurricane", "in", "22", "years", "approach"]
(t0 / track-01
      :ARG1 (a0 / approach-01
            :ARG2 (h0 / hurricane
                  :ord (b0 / before
                        :op1 (n1 / now)
                        :duration (t1 / temporal-quantity
                              :quant 22 
                              :unit (y0 / year)))
                  :ord (o0 / ordinal-entity
                        :value 1 )))
      :ARG0 (s0 / state
            :name (n0 / name
                  :op1 "Hawaii" )))

# ::snt Oil prices down in Asian trade
# ::tokens ["Oil", "prices", "down", "in", "Asian", "trade"]
# ::ner_tags ["O", "O", "O", "O", "NORP", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NN", "NNS", "RP", "IN", "JJ", "NN"]
# ::lemmas ["oil", "price", "down", "in", "Asian", "trade"]
(d0 / down-03
      :ARG1 (p0 / price-01
            :ARG1 (o0 / oil))
      :location (t0 / trade-01
            :location (c0 / continent
                  :name (n0 / name
                        :op1 "Asia" ))))

# ::snt Driver backs into mom, stroller with child then drives off
# ::tokens ["Driver", "backs", "into", "mom", ",", "stroller", "with", "child", "then", "drives", "off"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "VBZ", "IN", "NN", ",", "NN", "IN", "NN", "RB", "VBZ", "RP"]
# ::lemmas ["driver", "back", "into", "mom", ",", "stroller", "with", "child", "then", "drive", "off"]
(a0 / and
      :op1 (b0 / back-02
            :ARG1 (p0 / person
                  :ARG0-of (h0 / have-rel-role-91
                        :ARG2 (m0 / mom)))
            :destination (p1 / person
                  :ARG0-of (d1 / drive-01)))
      :op2 (d0 / drive-01
            :ARG0 p0
            :direction (o0 / off)
            :time (t0 / then)))

# ::snt Uganda's president signs harsh anti-gay law
# ::tokens ["Uganda", "'s", "president", "signs", "harsh", "anti", "-", "gay", "law"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NN", "NNS", "JJ", "JJ", "JJ", "JJ", "NN"]
# ::lemmas ["Uganda", "'s", "president", "sign", "harsh", "anti", "-", "gay", "law"]
(s0 / sign-01
      :ARG1 (l0 / law
            :ARG0-of (h0 / harsh-02)
            :ARG0-of (o0 / oppose-01
                  :ARG1 (g0 / gay-01)))
      :ARG0 (p0 / person
            :ARG0-of (h1 / have-org-role-91
                  :ARG1 (c0 / country
                        :name (n0 / name
                              :op1 "Uganda" ))
                  :ARG2 (p1 / president))))

# ::snt Silvio Berlusconi expelled from parliament
# ::tokens ["Silvio", "Berlusconi", "expelled", "from", "parliament"]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBD", "IN", "NN"]
# ::lemmas ["Silvio", "Berlusconi", "expel", "from", "parliament"]
(e0 / expel-01
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Silvio" 
                  :op2 "Berlusconi" ))
      :ARG2 (g0 / government-organization
            :name (n1 / name
                  :op1 "Parliament" )))

# ::snt Mubarak retrial adjourned to June
# ::tokens ["Mubarak", "retrial", "adjourned", "to", "June"]
# ::ner_tags ["PERSON", "O", "O", "O", "DATE"]
# ::ner_iob ["B", "O", "O", "O", "B"]
# ::pos_tags ["JJ", "NN", "VBD", "IN", "NNP"]
# ::lemmas ["Mubarak", "retrial", "adjourn", "to", "June"]
(u0 / uphold-01
      :ARG1 (t0 / try-02
            :ARG1 (p0 / person
                  :name (n0 / name
                        :op1 "Mubarak" )))
      :time (d0 / date-entity
            :month 6 ))

# ::snt Egypt protesters defy cabinet threat
# ::tokens ["Egypt", "protesters", "defy", "cabinet", "threat"]
# ::ner_tags ["GPE", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNS", "VBP", "NN", "NN"]
# ::lemmas ["Egypt", "protester", "defy", "cabinet", "threat"]
(d0 / defy-01
      :ARG1 (t0 / threaten-01
            :ARG0 (g0 / government-organization
                  :name (n0 / name
                        :op1 "Cabinet" )))
      :ARG0 (p0 / person
            :ARG0-of (c0 / country
                  :name (n1 / name
                        :op1 "Egypt" ))
            :ARG0-of (p1 / protest-01)))

# ::snt Qatari emir hands power to son Tamim
# ::tokens ["Qatari", "emir", "hands", "power", "to", "son", "Tamim"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "PERSON"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["JJ", "NN", "NNS", "NN", "TO", "VB", "NNP"]
# ::lemmas ["Qatari", "emir", "hand", "power", "to", "son", "Tamim"]
(h0 / hand-01
      :ARG1 (p0 / power)
      :ARG0 (p1 / person
            :ARG0-of (h1 / have-rel-role-91
                  :ARG2 (c0 / country
                        :name (n1 / name
                              :op1 "Syria" ))
                  :ARG2 (s0 / son)))
      :ARG2 (p2 / person
            :name (n0 / name
                  :op1 "Tamim" )
            :ARG0-of (h2 / have-org-role-91
                  :ARG2 (e0 / emir))))

# ::snt Egypt braces for Friday of anger after bloody crackdown
# ::tokens ["Egypt", "braces", "for", "Friday", "of", "anger", "after", "bloody", "crackdown"]
# ::ner_tags ["GPE", "O", "O", "DATE", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNS", "IN", "NNP", "IN", "NN", "IN", "JJ", "NN"]
# ::lemmas ["Egypt", "brace", "for", "Friday", "of", "anger", "after", "bloody", "crackdown"]
(a0 / accelerate-01
      :ARG1 (c0 / country
            :ARG1-of (a2 / anger-01)
            :name (n0 / name
                  :op1 "Egypt" ))
      :time (a1 / after
            :op1 (c1 / crack-down-06
                  :mod (b0 / bloody)))
      :time (d0 / date-entity
            :weekday (f0 / friday)))

# ::snt Red Sox beat Tigers to reach World Series
# ::tokens ["Red", "Sox", "beat", "Tigers", "to", "reach", "World", "Series"]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "O", "O", "EVENT", "EVENT"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "B", "I"]
# ::pos_tags ["NNP", "NNPS", "VBD", "NNS", "TO", "VB", "NNP", "NNP"]
# ::lemmas ["Red", "Sox", "beat", "tiger", "to", "reach", "World", "Series"]
(b0 / beat-03
      :ARG1 (t0 / team
            :name (n0 / name
                  :op1 "Red" 
                  :op2 "Sox" ))
      :ARG0 (t1 / team
            :name (n1 / name
                  :op1 "tiger" ))
      :purpose (r0 / reach-01
            :ARG0 t0
            :ARG1 (g0 / game
                  :name (n2 / name
                        :op1 "World" 
                        :op2 "Series" ))))

# ::snt China lands robot rover on moon
# ::tokens ["China", "lands", "robot", "rover", "on", "moon"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "NN", "NN", "IN", "NN"]
# ::lemmas ["China", "land", "robot", "rover", "on", "moon"]
(l0 / land-01
      :ARG1 (r0 / rover)
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "China" ))
      :location (m0 / moon))

# ::snt Ukraine's parliament votes to dismiss president
# ::tokens ["Ukraine", "'s", "parliament", "votes", "to", "dismiss", "president"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NN", "NNS", "TO", "VB", "NN"]
# ::lemmas ["Ukraine", "'s", "parliament", "vote", "to", "dismiss", "president"]
(v0 / vote-01
      :ARG1 (d0 / dismiss-01
            :ARG0 p0
            :ARG1 (p1 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG1 c0
                        :ARG2 (p2 / president))))
      :ARG0 (p0 / parliament
            :poss (c0 / country
                  :name (n0 / name
                        :op1 "Ukraine" ))))

# ::snt Captain of capsized S Korean Ferry Arrested
# ::tokens ["Captain", "of", "capsized", "S", "Korean", "Ferry", "Arrested"]
# ::ner_tags ["O", "O", "O", "O", "PERSON", "PERSON", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "I", "O"]
# ::pos_tags ["NN", "IN", "JJ", "NNP", "NNP", "NNP", "VBN"]
# ::lemmas ["captain", "of", "capsized", "S", "Korean", "Ferry", "arrest"]
(a0 / arrest-01
      :ARG1 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (s0 / ship
                        :ARG1-of (n0 / name
                              :op1 "S" 
                              :op2 "Korean" 
                              :op3 "Ferry" )
                        :ARG1-of (c1 / collapse-01))
                  :ARG2 (c0 / captain))))

# ::snt Communist rebels kill eight Philippine police
# ::tokens ["Communist", "rebels", "kill", "eight", "Philippine", "police"]
# ::ner_tags ["NORP", "O", "O", "CARDINAL", "NORP", "O"]
# ::ner_iob ["B", "O", "O", "B", "B", "O"]
# ::pos_tags ["JJ", "NNS", "VBP", "CD", "JJ", "NNS"]
# ::lemmas ["Communist", "rebel", "kill", "eight", "Philippine", "police"]
(k0 / kill-01
      :ARG1 (p0 / police
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Philippines" ))
            :quant 8 )
      :ARG0 (p1 / person
            :mod (p2 / political-movement
                  :name (n1 / name
                        :op1 "communism" ))
            :ARG0-of (r0 / rebel-01)))

# ::snt Woman dies riding roller coaster at Texas amusement park
# ::tokens ["Woman", "dies", "riding", "roller", "coaster", "at", "Texas", "amusement", "park"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NN", "VBZ", "VBG", "NN", "NN", "IN", "NNP", "NN", "NN"]
# ::lemmas ["woman", "die", "ride", "roller", "coaster", "at", "Texas", "amusement", "park"]
(d0 / die-01
      :ARG1 (w0 / woman)
      :location (r0 / ride-01
            :ARG0 w0
            :ARG1 (c0 / coaster
                  :mod (r1 / roller))
            :location (p0 / park
                  :location (s0 / state
                        :name (n0 / name
                              :op1 "Texas" ))
                  :mod (a0 / amusement))))

# ::snt Nobel Prize winning author Doris Lessing dies
# ::tokens ["Nobel", "Prize", "winning", "author", "Doris", "Lessing", "dies"]
# ::ner_tags ["WORK_OF_ART", "WORK_OF_ART", "O", "O", "PERSON", "PERSON", "O"]
# ::ner_iob ["B", "I", "O", "O", "B", "I", "O"]
# ::pos_tags ["NNP", "NNP", "VBG", "NN", "NNP", "NNP", "VBZ"]
# ::lemmas ["Nobel", "Prize", "win", "author", "Doris", "Lessing", "die"]
(d0 / die-01
      :ARG1 (a0 / author-01
            :ARG0-of (w0 / win-01
                  :ARG2 (a1 / award
                        :name (n1 / name
                              :op1 "Nobel" 
                              :op2 "Prize" ))))
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Doris" 
                  :op2 "Lessing" )))

# ::snt Twitter says images blocked in Venezuela
# ::tokens ["Twitter", "says", "images", "blocked", "in", "Venezuela"]
# ::ner_tags ["ORG", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "VBZ", "NNS", "VBN", "IN", "NNP"]
# ::lemmas ["Twitter", "say", "image", "block", "in", "Venezuela"]
(s0 / say-01
      :ARG1 (b0 / block-01
            :ARG1 (i0 / image)
            :location (c0 / country
                  :name (n1 / name
                        :op1 "Venezuela" )))
      :ARG0 (p0 / publication
            :name (n0 / name
                  :op1 "Twitter" )))

# ::snt British stuntman dies in wingsuit mishap in Alps
# ::tokens ["British", "stuntman", "dies", "in", "wingsuit", "mishap", "in", "Alps"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "O", "LOC"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["JJ", "NNP", "VBZ", "IN", "NN", "NN", "IN", "NNP"]
# ::lemmas ["British", "stuntman", "die", "in", "wingsuit", "mishap", "in", "Alps"]
(d0 / die-01
      :ARG1 (p0 / person
            :mod (c1 / country
                  :name (n0 / name
                        :op1 "Britain" ))
            :ARG0-of (h0 / have-org-role-91
                  :ARG2 (s1 / stuntman)))
      :ARG1-of (c0 / cause-01
            :ARG0 (s0 / show
                  :name (n1 / name
                        :op1 "wingsuit" ))))

# ::snt Eurozone debt crisis is over, says France's President
# ::tokens ["Eurozone", "debt", "crisis", "is", "over", ",", "says", "France", "'s", "President"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NN", "NN", "NN", "VBZ", "RB", ",", "VBZ", "NNP", "POS", "NNP"]
# ::lemmas ["eurozone", "debt", "crisis", "be", "over", ",", "say", "France", "'s", "President"]
(s0 / say-01
      :ARG1 (o0 / over-01
            :ARG1 (c0 / crisis
                  :mod (d0 / debt)
                  :poss (e0 / euro)))
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c1 / country
                        :name (n0 / name
                              :op1 "France" ))
                  :ARG2 (p1 / president))))

# ::snt White diamond fetches record $34m at HK auction
# ::tokens ["White", "diamond", "fetches", "record", "$", "34", "m", "at", "HK", "auction"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["JJ", "NN", "NNS", "VBP", "$", "CD", "NN", "IN", "NNP", "NN"]
# ::lemmas ["white", "diamond", "fetch", "record", "$", "34", "m", "at", "HK", "auction"]
(d0 / dive-01
      :ARG1 (r0 / record
            :quant (m0 / monetary-quantity
                  :quant 34 
                  :unit (d2 / dollar)))
      :ARG0 (d1 / diamond
            :ARG1-of (w0 / white-03))
      :location (a0 / auction
            :location (c0 / city
                  :name (n0 / name
                        :op1 "HK" ))))

# ::snt Treasury proposes 1.5% income tax raise in budget
# ::tokens ["Treasury", "proposes", "1.5", "%", "income", "tax", "raise", "in", "budget"]
# ::ner_tags ["ORG", "O", "PERCENT", "PERCENT", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "I", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "CD", "NN", "NN", "NN", "NN", "IN", "NN"]
# ::lemmas ["Treasury", "propose", "1.5", "%", "income", "tax", "raise", "in", "budget"]
(p0 / propose-01
      :ARG1 (r0 / raise-01
            :ARG1 (t0 / tax-01
                  :ARG3 (i0 / income))
            :ARG2 (p1 / percentage-entity
                  :value 1.5 )
            :subevent-of (b0 / budget))
      :ARG0 (g0 / government-organization
            :name (n0 / name
                  :op1 "Treasury" )))

# ::snt 13:23 PSNI 'failed RUC officer families'
# ::tokens ["13:23", "PSNI", "'", "failed", "RUC", "officer", "families", "'"]
# ::ner_tags ["CARDINAL", "ORG", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["CD", "NNP", "POS", "VBD", "NNP", "NN", "NNS", "''"]
# ::lemmas ["13:23", "PSNI", "'", "fail", "RUC", "officer", "family", "'"]
(s0 / say-01
      :ARG1 (f0 / fail-01)
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (m0 / military
                        :mod (m2 / member)
                        :name (n0 / name
                              :op1 "PSNI" ))
                  :ARG2 (o0 / officer)))
      :ARG0 (p1 / person
            :ARG0-of (h1 / have-org-role-91
                  :ARG1 (m1 / military
                        :name (n1 / name
                              :op1 "RUC" )))))

# ::snt Police helicopter crashes on top of bar in Glasgow
# ::tokens ["Police", "helicopter", "crashes", "on", "top", "of", "bar", "in", "Glasgow"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NN", "NN", "NNS", "IN", "NN", "IN", "NN", "IN", "NNP"]
# ::lemmas ["police", "helicopter", "crash", "on", "top", "of", "bar", "in", "Glasgow"]
(c0 / crash-01
      :ARG1 (h0 / helicopter
            :mod (p0 / police))
      :location (t0 / top
            :op1 (b0 / bar
                  :location (c1 / city
                        :name (n0 / name
                              :op1 "Glasgow" )))))

# ::snt US, UN up pressure on Israel over Gaza
# ::tokens ["US", ",", "UN", "up", "pressure", "on", "Israel", "over", "Gaza"]
# ::ner_tags ["GPE", "O", "ORG", "O", "O", "O", "GPE", "O", "GPE"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "B", "O", "B"]
# ::pos_tags ["NNP", ",", "NNP", "RP", "NN", "IN", "NNP", "IN", "NNP"]
# ::lemmas ["US", ",", "UN", "up", "pressure", "on", "Israel", "over", "Gaza"]
(p0 / pressure-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "Israel" ))
      :ARG0 (c1 / country
            :name (n1 / name
                  :op1 "US" ))
      :ARG0 (o0 / organization
            :name (n2 / name
                  :op1 "Gaza" )))

# ::snt Australian PM confident sounds are from Flight 370
# ::tokens ["Australian", "PM", "confident", "sounds", "are", "from", "Flight", "370"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "PRODUCT", "PRODUCT"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "B", "I"]
# ::pos_tags ["JJ", "NNP", "JJ", "NNS", "VBP", "IN", "NNP", "CD"]
# ::lemmas ["Australian", "PM", "confident", "sound", "be", "from", "Flight", "370"]
(t0 / thing
      :ARG1-of (s0 / sound-01
            :ARG2 (c0 / confident-01
                  :ARG2 (m0 / military
                        :name (n2 / name
                              :op1 "PM" ))))
      :source (a0 / aircraft-type
            :name (n0 / name
                  :op1 "Flight" 
                  :op2 370 )
            :mod (c1 / country
                  :name (n1 / name
                        :op1 "Australia" ))))

# ::snt Philippe ascends throne of divided Belgium
# ::tokens ["Philippe", "ascends", "throne", "of", "divided", "Belgium"]
# ::ner_tags ["O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "VBZ", "NN", "IN", "VBN", "NNP"]
# ::lemmas ["Philippe", "ascend", "throne", "of", "divide", "Belgium"]
(d0 / descend-01
      :ARG1 (t0 / throne
            :poss (d1 / divide-02
                  :ARG1 (c0 / country
                        :name (n1 / name
                              :op1 "Belgium" ))))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Philippe" )))

# ::snt India's Anti-Graft Party Forms Government in Delhi
# ::tokens ["India", "'s", "Anti", "-", "Graft", "Party", "Forms", "Government", "in", "Delhi"]
# ::ner_tags ["GPE", "O", "ORG", "ORG", "ORG", "ORG", "ORG", "ORG", "O", "GPE"]
# ::ner_iob ["B", "O", "B", "I", "I", "I", "I", "I", "O", "B"]
# ::pos_tags ["NNP", "POS", "NNP", "NNP", "NNP", "NNP", "NNPS", "NNP", "IN", "NNP"]
# ::lemmas ["India", "'s", "Anti", "-", "Graft", "Party", "Forms", "Government", "in", "Delhi"]
(f0 / form-01
      :ARG1 (g0 / government-organization
            :ARG0-of (g1 / govern-01)
            :location (c0 / city
                  :name (n1 / name
                        :op1 "Delhi" )))
      :ARG0 (p0 / political-party
            :name (n0 / name
                  :op1 "Anti" 
                  :op2 "Party" )
            :location (c1 / country
                  :name (n2 / name
                        :op1 "India" ))))

# ::snt Hundreds believed injured in Texas fertiliser plant blast
# ::tokens ["Hundreds", "believed", "injured", "in", "Texas", "fertiliser", "plant", "blast"]
# ::ner_tags ["CARDINAL", "O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNS", "VBD", "VBN", "IN", "NNP", "NN", "NN", "NN"]
# ::lemmas ["Hundreds", "believe", "injure", "in", "Texas", "fertiliser", "plant", "blast"]
(b0 / believe-01
      :ARG1 (i0 / injure-01
            :location (p1 / plant
                  :mod (f0 / fertiliser)
                  :location (s0 / state
                        :name (n0 / name
                              :op1 "Texas" ))))
      :ARG0 (p0 / person
            :quant (m0 / multiple
                  :op1 100 )))

# ::snt UN War Crimes Court Convicts Six Bosnians Croats
# ::tokens ["UN", "War", "Crimes", "Court", "Convicts", "Six", "Bosnians", "Croats"]
# ::ner_tags ["ORG", "ORG", "ORG", "ORG", "O", "CARDINAL", "O", "O"]
# ::ner_iob ["B", "I", "I", "I", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NNPS", "NNP", "VBZ", "CD", "NNPS", "NNS"]
# ::lemmas ["UN", "War", "Crimes", "Court", "convict", "Six", "Bosnians", "croat"]
(c0 / convict-01
      :ARG1 (p0 / person
            :mod (c1 / country
                  :name (n1 / name
                        :op1 "Morocco" ))
            :quant 6 )
      :ARG0 (o0 / organization
            :name (n0 / name
                  :op1 "UN" 
                  :op2 "War" 
                  :op3 "Crimes" 
                  :op4 "Court" )))

# ::snt Saudi Man Traveling With Pressure Cooker Arrested
# ::tokens ["Saudi", "Man", "Traveling", "With", "Pressure", "Cooker", "Arrested"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "VBG", "IN", "NN", "NN", "VBN"]
# ::lemmas ["saudi", "man", "travel", "with", "pressure", "cooker", "arrest"]
(t0 / travel-01
      :ARG0 (m0 / man)
      :accompanier (a0 / arrest-01
            :ARG2 (p0 / process-01
                  :ARG1 (p1 / pressure)))
      :accompanier (c0 / country
            :name (n0 / name
                  :op1 "Saudi" 
                  :op2 "Arabia" )))

# ::snt Across US, people rally for 'Justice for Trayvon'
# ::tokens ["Across", "US", ",", "people", "rally", "for", "'", "Justice", "for", "Trayvon", "'"]
# ::ner_tags ["O", "GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "NNP", ",", "NNS", "VBP", "IN", "''", "NNP", "IN", "NNP", "''"]
# ::lemmas ["across", "US", ",", "people", "rally", "for", "'", "Justice", "for", "Trayvon", "'"]
(r0 / rally-01
      :ARG0 (p0 / person)
      :ARG2 (a0 / across
            :op1 (c0 / country
                  :name (n0 / name
                        :op1 "US" )))
      :ARG2 (j0 / justice
            :beneficiary (p1 / person
                  :name (n1 / name
                        :op1 "Trayvon" 
                        :op2 "for" 
                        :op3 "Bush" ))))

# ::snt "Hagel laments ""political"" changes to US defence budget"
# ::tokens ["\"", "Hagel", "laments", "\"", "\"", "political", "\"", "\"", "changes", "to", "US", "defence", "budget", "\""]
# ::ner_tags ["O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["``", "NNP", "VBZ", "''", "``", "JJ", "''", "``", "NNS", "IN", "NNP", "NN", "NN", "''"]
# ::lemmas ["\"", "Hagel", "lament", "\"", "\"", "political", "\"", "\"", "change", "to", "US", "defence", "budget", "\""]
(c0 / call-03
      :ARG1 (c1 / change-01
            :ARG1 (b0 / budget-01
                  :ARG0 (c2 / country
                        :name (n1 / name
                              :op1 "US" ))
                  :ARG2 (d0 / defend-01))
            :mod (p1 / politics))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Hagel" )))

# ::snt Ukraine rivals sign deal to end crisis
# ::tokens ["Ukraine", "rivals", "sign", "deal", "to", "end", "crisis"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNS", "VBP", "NN", "TO", "VB", "NN"]
# ::lemmas ["Ukraine", "rival", "sign", "deal", "to", "end", "crisis"]
(s0 / sign-02
      :ARG1 (d0 / deal-01
            :ARG2 (e0 / end-01
                  :ARG0 c0
                  :ARG1 (c1 / crisis)))
      :ARG0 (c0 / country
            :ARG0-of (r0 / rival-01)
            :name (n0 / name
                  :op1 "Ukraine" )))

# ::snt Syrian prime minister survives assassination attempt
# ::tokens ["Syrian", "prime", "minister", "survives", "assassination", "attempt"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNP", "NNP", "VBZ", "NN", "NN"]
# ::lemmas ["Syrian", "prime", "minister", "survive", "assassination", "attempt"]
(s0 / survive-01
      :ARG1 (a0 / attempt-01
            :ARG1 (a1 / assassinate-01))
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c0 / country
                        :name (n0 / name
                              :op1 "Syria" ))
                  :ARG2 (m0 / minister
                        :mod (p1 / prime)))))

# ::snt South Korean Soldier Kills Comrades And Flees
# ::tokens ["South", "Korean", "Soldier", "Kills", "Comrades", "And", "Flees"]
# ::ner_tags ["NORP", "NORP", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "JJ", "NN", "VBZ", "NNPS", "CC", "NNPS"]
# ::lemmas ["South", "Korean", "soldier", "kill", "Comrades", "and", "Flees"]
(k0 / kill-01
      :ARG1 (a0 / and
            :op1 (c0 / comrade)
            :op2 (f0 / fly-01))
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c1 / country
                        :name (n0 / name
                              :op1 "South" 
                              :op2 "Korea" ))
                  :ARG2 (s0 / soldier))))

# ::snt US Attorney general Eric Holder to resign
# ::tokens ["US", "Attorney", "general", "Eric", "Holder", "to", "resign"]
# ::ner_tags ["GPE", "O", "O", "PERSON", "PERSON", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "I", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NN", "NNP", "NNP", "TO", "VB"]
# ::lemmas ["US", "Attorney", "general", "Eric", "Holder", "to", "resign"]
(r0 / resign-01
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Eric" 
                  :op2 "Holder" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c0 / country
                        :name (n1 / name
                              :op1 "US" ))
                  :ARG2 (a0 / attorney
                        :mod (g0 / general)))))

# ::snt Hajj to go ahead despite crane collapse
# ::tokens ["Hajj", "to", "go", "ahead", "despite", "crane", "collapse"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "TO", "VB", "RB", "IN", "NN", "NN"]
# ::lemmas ["hajj", "to", "go", "ahead", "despite", "crane", "collapse"]
(g0 / go-01
      :ARG1 (c0 / city
            :name (n0 / name
                  :op1 "hajj" ))
      :mod (a0 / ahead)
      :concession (c1 / collapse-01
            :ARG1 (c2 / crane)))

# ::snt China issues yellow alert for typhoon Kalmaegi
# ::tokens ["China", "issues", "yellow", "alert", "for", "typhoon", "Kalmaegi"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "NNS", "JJ", "NN", "IN", "NN", "NNP"]
# ::lemmas ["China", "issue", "yellow", "alert", "for", "typhoon", "Kalmaegi"]
(i0 / issue-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "China" ))
      :ARG1 (a0 / alert-01
            :ARG1 (t0 / typhoon
                  :name (n1 / name
                        :op1 "Kalmaegi" ))
            :mod (y0 / yellow)))

# ::snt Tokyo shares open higher tracing U.S. gains
# ::tokens ["Tokyo", "shares", "open", "higher", "tracing", "U.S.", "gains"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "NNS", "VBP", "JJR", "VBG", "NNP", "NNS"]
# ::lemmas ["Tokyo", "share", "open", "high", "trace", "U.S.", "gain"]
(s0 / share-01
      :ARG1 (g0 / gain-02
            :ARG1-of (t0 / trace
                  :poss (c1 / country
                        :name (n1 / name
                              :op1 "U.S." ))))
      :ARG0 (c0 / city
            :name (n0 / name
                  :op1 "Tokyo" ))
      :ARG2 (h0 / have-degree-91
            :ARG2 (h1 / high-02)
            :ARG3 (m0 / more)))

# ::snt Tokyo shares open higher following strong U.S. performance
# ::tokens ["Tokyo", "shares", "open", "higher", "following", "strong", "U.S.", "performance"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "NNS", "VBP", "JJR", "VBG", "JJ", "NNP", "NN"]
# ::lemmas ["Tokyo", "share", "open", "high", "follow", "strong", "U.S.", "performance"]
(f0 / follow-01
      :ARG1 (o0 / open-07
            :ARG1 (h0 / high-02
                  :ARG1 h1)
            :ARG1 (h1 / have-degree-91
                  :ARG1 s0
                  :ARG3 (m0 / more))
            :ARG1 (s0 / share-01
                  :ARG0 (c1 / city
                        :name (n1 / name
                              :op1 "Tokyo" ))))
      :ARG2 (p0 / perform-02
            :ARG0 (s1 / strong-02)
            :ARG0 (c0 / country
                  :name (n0 / name
                        :op1 "U.S." ))))

# ::snt Lewis Hamilton wins inaugural Russian GP
# ::tokens ["Lewis", "Hamilton", "wins", "inaugural", "Russian", "GP"]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "NORP", "O"]
# ::ner_iob ["B", "I", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "JJ", "JJ", "NNP"]
# ::lemmas ["Lewis", "Hamilton", "win", "inaugural", "Russian", "GP"]
(w0 / win-01
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Lewis" 
                  :op2 "Hamilton" ))
      :ARG2 (g0 / game
            :mod (i0 / inaugural)
            :mod (c0 / country
                  :name (n2 / name
                        :op1 "Russia" ))
            :name (n1 / name
                  :op1 "GP" )))

# ::snt Suspected Boko Haram attacks kill dozens in Nigeria
# ::tokens ["Suspected", "Boko", "Haram", "attacks", "kill", "dozens", "in", "Nigeria"]
# ::ner_tags ["O", "PERSON", "PERSON", "O", "O", "CARDINAL", "O", "GPE"]
# ::ner_iob ["O", "B", "I", "O", "O", "B", "O", "B"]
# ::pos_tags ["NNP", "NNP", "NNP", "NNS", "VBP", "NNS", "IN", "NNP"]
# ::lemmas ["Suspected", "Boko", "Haram", "attack", "kill", "dozens", "in", "Nigeria"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant (m0 / multiple
                  :op1 12 ))
      :ARG0 (a0 / attack-01
            :ARG0 (c1 / criminal-organization
                  :name (n1 / name
                        :op1 "Boko" 
                        :op2 "Haram" ))
            :ARG1-of (s0 / suspect-01))
      :location (c0 / country
            :name (n0 / name
                  :op1 "Nigeria" )))

# ::snt Mayawati demands Presidents rule in Jammu and Kashmir
# ::tokens ["Mayawati", "demands", "Presidents", "rule", "in", "Jammu", "and", "Kashmir"]
# ::ner_tags ["O", "O", "O", "O", "O", "GPE", "O", "LOC"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "B"]
# ::pos_tags ["NNP", "VBZ", "NNS", "VBP", "IN", "NNP", "CC", "NNP"]
# ::lemmas ["Mayawati", "demand", "president", "rule", "in", "Jammu", "and", "Kashmir"]
(d0 / demand-01
      :ARG1 (r0 / rule-03
            :ARG0 (p1 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG2 (p2 / president)))
            :location (a0 / and
                  :op1 (s0 / state
                        :name (n1 / name
                              :op1 "Jammu" ))
                  :op2 (w0 / world-region
                        :name (n2 / name
                              :op1 "Kashmir" ))))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Mayawati" )))

# ::snt Philippines typhoon death toll rises above 5,000
# ::tokens ["Philippines", "typhoon", "death", "toll", "rises", "above", "5,000"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "CARDINAL"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "NN", "NN", "NN", "VBZ", "IN", "CD"]
# ::lemmas ["Philippines", "typhoon", "death", "toll", "rise", "above", "5,000"]
(r0 / rise-01
      :ARG1 (t0 / toll
            :mod (t1 / typhoon
                  :mod (c0 / country
                        :name (n0 / name
                              :op1 "Philippines" )))
            :quant-of (d0 / die-01))
      :ARG4 (a0 / above
            :op1 5000 ))

# ::snt Cars plunge into river as US bridge collapses
# ::tokens ["Cars", "plunge", "into", "river", "as", "US", "bridge", "collapses"]
# ::ner_tags ["O", "O", "O", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNS", "VBP", "IN", "NN", "IN", "NNP", "NN", "VBZ"]
# ::lemmas ["car", "plunge", "into", "river", "as", "US", "bridge", "collapse"]
(p0 / plunge-01
      :ARG1 (c0 / car)
      :time (r0 / river)
      :time (c1 / collapse-01
            :ARG1 (b0 / bridge
                  :poss (c2 / country
                        :name (n0 / name
                              :op1 "US" )))))

# ::snt Egypt's Morsi faces trial for prison break
# ::tokens ["Egypt", "'s", "Morsi", "faces", "trial", "for", "prison", "break"]
# ::ner_tags ["GPE", "O", "NORP", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NNP", "VBZ", "NN", "IN", "NN", "NN"]
# ::lemmas ["Egypt", "'s", "Morsi", "face", "trial", "for", "prison", "break"]
(f0 / face-01
      :ARG1 (t0 / try-02
            :ARG1 p0
            :ARG3 (b0 / break-13
                  :ARG1 (p1 / prison)))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Morsi" )
            :ARG0-of (c0 / country
                  :name (n1 / name
                        :op1 "Egypt" ))))

# ::snt Thailand's army declares martial law, denies coup
# ::tokens ["Thailand", "'s", "army", "declares", "martial", "law", ",", "denies", "coup"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NN", "VBZ", "JJ", "NN", ",", "VBZ", "NN"]
# ::lemmas ["Thailand", "'s", "army", "declare", "martial", "law", ",", "deny", "coup"]
(d0 / declare-02
      :ARG1 (l0 / law
            :mod (m0 / martial))
      :ARG0 (a0 / army
            :poss (c0 / country
                  :name (n0 / name
                        :op1 "Thailand" )))
      :ARG2 (d1 / deny-01
            :ARG1 (c1 / coup-01)))

# ::snt Israel agrees to 24-hour Gaza truce
# ::tokens ["Israel", "agrees", "to", "24-hour", "Gaza", "truce"]
# ::ner_tags ["GPE", "O", "O", "TIME", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "B", "B", "O"]
# ::pos_tags ["NNP", "VBZ", "IN", "CD", "NNP", "NN"]
# ::lemmas ["Israel", "agree", "to", "24-hour", "Gaza", "truce"]
(a0 / agree-01
      :ARG1 (t0 / truce
            :mod (c1 / city
                  :name (n1 / name
                        :op1 "Gaza" ))
            :duration (t1 / temporal-quantity
                  :quant 4 
                  :unit (h0 / hour)))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Israel" )))

# ::snt Earthquake of 6.9 magnitude strikes off Indonesia island
# ::tokens ["Earthquake", "of", "6.9", "magnitude", "strikes", "off", "Indonesia", "island"]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "B", "O"]
# ::pos_tags ["NN", "IN", "CD", "NN", "NNS", "IN", "NNP", "NN"]
# ::lemmas ["earthquake", "of", "6.9", "magnitude", "strike", "off", "Indonesia", "island"]
(s0 / strike-01
      :ARG0 (e0 / earthquake
            :quant (s1 / seismic-quantity
                  :quant 6.9 ))
      :ARG2 (o0 / off
            :op1 (i0 / island
                  :location (c0 / country
                        :name (n0 / name
                              :op1 "Indonesia" )))))

# ::snt Malaysia: Chinese satellite found object in ocean
# ::tokens ["Malaysia", ":", "Chinese", "satellite", "found", "object", "in", "ocean"]
# ::ner_tags ["GPE", "O", "NORP", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", ":", "JJ", "NN", "VBD", "NN", "IN", "NN"]
# ::lemmas ["Malaysia", ":", "Chinese", "satellite", "find", "object", "in", "ocean"]
(f0 / find-01
      :ARG1 (o0 / object
            :location (o1 / ocean))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Malaysia" ))
      :location (s0 / satellite
            :poss (c1 / country
                  :name (n1 / name
                        :op1 "China" ))))

# ::snt Indian building collapse deaths rise to 14
# ::tokens ["Indian", "building", "collapse", "deaths", "rise", "to", "14"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "CARDINAL"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["JJ", "NN", "NN", "NNS", "VBP", "IN", "CD"]
# ::lemmas ["Indian", "building", "collapse", "death", "rise", "to", "14"]
(r0 / rise-01
      :ARG1 (p0 / person
            :quant 14 )
      :ARG1 (d0 / die-01
            :ARG1 (c0 / collapse-01
                  :ARG1 (c1 / country
                        :name (n0 / name
                              :op1 "India" ))
                  :ARG1 (b0 / building))))

# ::snt CII endorses underage marriage
# ::tokens ["CII", "endorses", "underage", "marriage"]
# ::ner_tags ["ORG", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "JJ", "NN"]
# ::lemmas ["CII", "endorse", "underage", "marriage"]
(e0 / endorse-01
      :ARG1 (m0 / marry-01
            :mod (u0 / underage))
      :ARG0 (t0 / treaty
            :name (n0 / name
                  :op1 "CII" )))

# ::snt EU Ministers of Employment and Social policy to discuss employment boosting strategies
# ::tokens ["EU", "Ministers", "of", "Employment", "and", "Social", "policy", "to", "discuss", "employment", "boosting", "strategies"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "IN", "NNP", "CC", "NNP", "NN", "TO", "VB", "NN", "VBG", "NNS"]
# ::lemmas ["EU", "Ministers", "of", "Employment", "and", "Social", "policy", "to", "discuss", "employment", "boost", "strategy"]
(d0 / discuss-01
      :ARG1 (s0 / strategy
            :ARG0-of (b0 / boost-01
                  :ARG1 (s1 / strategy
                        :topic (e0 / employ-01))))
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (o0 / organization
                        :name (n0 / name
                              :op1 "EU" ))
                  :ARG2 (m0 / minister
                        :topic (p1 / policy-01
                              :ARG2 (s2 / social))))))

# ::snt China welcomes US, Russia deal on Syria chemical weapons
# ::tokens ["China", "welcomes", "US", ",", "Russia", "deal", "on", "Syria", "chemical", "weapons"]
# ::ner_tags ["GPE", "O", "GPE", "O", "GPE", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "B", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "NNP", ",", "NNP", "NN", "IN", "NNP", "NN", "NNS"]
# ::lemmas ["China", "welcome", "US", ",", "Russia", "deal", "on", "Syria", "chemical", "weapon"]
(w0 / welcome-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "China" ))
      :ARG1 (d0 / deal-01
            :ARG1 (c1 / country
                  :name (n1 / name
                        :op1 "US" ))
            :ARG2 (c2 / country
                  :name (n2 / name
                        :op1 "Russia" ))
            :ARG2 (w1 / weapon
                  :mod (c3 / chemical))))

# ::snt Okla. inmate dies of heart attack after botched execution
# ::tokens ["Okla.", "inmate", "dies", "of", "heart", "attack", "after", "botched", "execution"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NN", "VBZ", "IN", "NN", "NN", "IN", "JJ", "NN"]
# ::lemmas ["Okla.", "inmate", "die", "of", "heart", "attack", "after", "botched", "execution"]
(d0 / die-01
      :ARG1 (i0 / inmate
            :ARG1-of (a1 / assault-01
                  :manner (h0 / heart))
            :mod (p0 / person
                  :name (n0 / name
                        :op1 "Okla." ))
            :ARG1-of (e0 / execute-02
                  :ARG1-of (b0 / botched)))
      :ARG1-of (c0 / cause-01)
      :time (a0 / after
            :op1 e0))

# ::snt Thai protesters call general strike
# ::tokens ["Thai", "protesters", "call", "general", "strike"]
# ::ner_tags ["NORP", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNS", "VBP", "JJ", "NN"]
# ::lemmas ["Thai", "protester", "call", "general", "strike"]
(c0 / call-01
      :ARG1 (s0 / strike-02
            :ARG1-of (g0 / general-02))
      :ARG0 (p0 / person
            :mod (c1 / country
                  :name (n0 / name
                        :op1 "Thailand" ))
            :ARG0-of (p1 / protest-01)))

# ::snt Egypt announces one-month state of emergency nationwide
# ::tokens ["Egypt", "announces", "one", "-", "month", "state", "of", "emergency", "nationwide"]
# ::ner_tags ["GPE", "O", "DATE", "DATE", "DATE", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "I", "I", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "CD", "HYPH", "NN", "NN", "IN", "NN", "RB"]
# ::lemmas ["Egypt", "announce", "one", "-", "month", "state", "of", "emergency", "nationwide"]
(a0 / announce-01
      :ARG1 (s0 / state
            :mod (n0 / nationwide)
            :duration (e0 / emergency)
            :duration (t0 / temporal-quantity
                  :quant 1 
                  :unit (m0 / month)))
      :ARG0 (c0 / country
            :name (n1 / name
                  :op1 "Egypt" )))

# ::snt UNICEF calls for immediate safe access to women, children in Homs
# ::tokens ["UNICEF", "calls", "for", "immediate", "safe", "access", "to", "women", ",", "children", "in", "Homs"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "VBZ", "IN", "JJ", "JJ", "NN", "IN", "NNS", ",", "NNS", "IN", "NNP"]
# ::lemmas ["unicef", "call", "for", "immediate", "safe", "access", "to", "woman", ",", "child", "in", "Homs"]
(c0 / call-03
      :ARG1 (a0 / access-01
            :ARG1 (i0 / immediate)
            :location (s0 / safe-01)
            :location (a1 / and
                  :op1 (w0 / woman)
                  :op2 (c2 / child))
            :location (c1 / city
                  :name (n1 / name
                        :op1 "Homs" )))
      :ARG0 (o0 / organization
            :name (n0 / name
                  :op1 "unicef" )))

# ::snt Sony to axe PC unit in major business overhaul
# ::tokens ["Sony", "to", "axe", "PC", "unit", "in", "major", "business", "overhaul"]
# ::ner_tags ["ORG", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "TO", "VB", "NN", "NN", "IN", "JJ", "NN", "NN"]
# ::lemmas ["Sony", "to", "axe", "pc", "unit", "in", "major", "business", "overhaul"]
(u0 / use-02
      :ARG1 (o0 / overhaul
            :ARG1-of (m0 / major-02))
      :ARG0 (c0 / company
            :name (n0 / name
                  :op1 "Sony" ))
      :ARG1 (u1 / unit
            :mod (c1 / computer)))

# ::snt Zimmerman acquitted in slaying
# ::tokens ["Zimmerman", "acquitted", "in", "slaying"]
# ::ner_tags ["O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBD", "IN", "VBG"]
# ::lemmas ["Zimmerman", "acquit", "in", "slay"]
(a0 / acquit-01
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Zimmerman" ))
      :ARG2 (s0 / slay-01
            :ARG0 p0))

# ::snt Jordan elected to UN security council seat that Saudi Arabia rejected
# ::tokens ["Jordan", "elected", "to", "UN", "security", "council", "seat", "that", "Saudi", "Arabia", "rejected"]
# ::ner_tags ["GPE", "O", "O", "ORG", "O", "O", "O", "O", "GPE", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "O", "O", "B", "I", "O"]
# ::pos_tags ["NNP", "VBD", "IN", "NNP", "NNP", "NN", "NN", "WDT", "NNP", "NNP", "VBD"]
# ::lemmas ["Jordan", "elect", "to", "UN", "security", "council", "seat", "that", "Saudi", "Arabia", "reject"]
(e0 / elect-01
      :ARG1 (s0 / seat
            :ARG1-of (i0 / include-91
                  :ARG2 (p0 / person
                        :ARG1-of (c1 / country
                              :name (n1 / name
                                    :op1 "Saudi" 
                                    :op2 "Arabia" ))
                        :ARG1-of (r0 / reject-01
                              :ARG0 (o0 / organization
                                    :name (n2 / name
                                          :op1 "UN" 
                                          :op2 "Security" 
                                          :op3 "Committee" ))))))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Jordan" )))

# ::snt Crisis-hit Maldives holds new presidential poll
# ::tokens ["Crisis", "-", "hit", "Maldives", "holds", "new", "presidential", "poll"]
# ::ner_tags ["O", "O", "O", "GPE", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["NN", "HYPH", "VBN", "NNP", "VBZ", "JJ", "JJ", "NN"]
# ::lemmas ["crisis", "-", "hit", "Maldives", "hold", "new", "presidential", "poll"]
(h0 / hold-01
      :ARG1 (p0 / poll-01
            :ARG1-of (n0 / new-01)
            :ARG2 (p1 / person
                  :ARG0-of (h2 / have-org-role-91
                        :ARG2 (p2 / president))))
      :ARG0 (c0 / country
            :ARG1-of (h1 / hit-01
                  :ARG2 (c1 / crisis))
            :name (n1 / name
                  :op1 "Maldives" )))

# ::snt Peaceful anti-G8 protest held in Belfast
# ::tokens ["Peaceful", "anti", "-", "G8", "protest", "held", "in", "Belfast"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["JJ", "JJ", "JJ", "JJ", "NN", "VBN", "IN", "NNP"]
# ::lemmas ["peaceful", "anti", "-", "g8", "protest", "hold", "in", "Belfast"]
(h0 / hold-04
      :ARG1 (p0 / protest-01
            :mod (p1 / peace)
            :ARG0-of (o0 / oppose-01
                  :ARG1 (o1 / organization
                        :name (n1 / name
                              :op1 "g8" ))))
      :location (c0 / city
            :name (n0 / name
                  :op1 "Belfast" )))

# ::snt Six rescued after boat capsizes in Dublin Bay
# ::tokens ["Six", "rescued", "after", "boat", "capsizes", "in", "Dublin", "Bay"]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "LOC", "LOC"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "B", "I"]
# ::pos_tags ["CD", "VBN", "IN", "NN", "VBZ", "IN", "NNP", "NNP"]
# ::lemmas ["Six", "rescue", "after", "boat", "capsize", "in", "Dublin", "Bay"]
(r0 / rescue-01
      :ARG0 (a0 / after
            :op1 (c0 / collapse-01
                  :ARG1 (b0 / boat)
                  :location (b1 / bay
                        :name (n0 / name
                              :op1 "Dublin" 
                              :op2 "Bay" ))))
      :ARG1 6 )

# ::snt Worker dies at World Cup stadium
# ::tokens ["Worker", "dies", "at", "World", "Cup", "stadium"]
# ::ner_tags ["O", "O", "O", "EVENT", "EVENT", "O"]
# ::ner_iob ["O", "O", "O", "B", "I", "O"]
# ::pos_tags ["NN", "VBZ", "IN", "NNP", "NNP", "NN"]
# ::lemmas ["worker", "die", "at", "World", "Cup", "stadium"]
(d0 / die-01
      :ARG1 (p0 / person
            :ARG0-of (w0 / work-01))
      :location (s0 / stadium
            :mod (g0 / game
                  :name (n0 / name
                        :op1 "World" 
                        :op2 "Cup" ))))

# ::snt Debt inspectors reach agreement with Greece
# ::tokens ["Debt", "inspectors", "reach", "agreement", "with", "Greece"]
# ::ner_tags ["O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NN", "NNS", "VBP", "NN", "IN", "NNP"]
# ::lemmas ["debt", "inspector", "reach", "agreement", "with", "Greece"]
(r0 / reach-01
      :ARG1 (a0 / agree-01
            :ARG0 p0
            :ARG2 (c0 / country
                  :name (n0 / name
                        :op1 "Greece" )))
      :ARG0 (p0 / person
            :ARG0-of (i0 / inspect-01
                  :ARG1 (d0 / debt))))

# ::snt North Korean leader sends 'special envoy' to China
# ::tokens ["North", "Korean", "leader", "sends", "'", "special", "envoy", "'", "to", "China"]
# ::ner_tags ["NORP", "NORP", "O", "O", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["JJ", "JJ", "NN", "VBZ", "``", "JJ", "NN", "''", "IN", "NNP"]
# ::lemmas ["North", "Korean", "leader", "send", "'", "special", "envoy", "'", "to", "China"]
(s0 / send-01
      :ARG1 (e0 / envoy
            :ARG1-of (s1 / special-02))
      :ARG0 (p0 / person
            :ARG0-of (l0 / lead-02
                  :ARG1 (c1 / country
                        :name (n1 / name
                              :op1 "North" 
                              :op2 "Korea" ))))
      :ARG2 (c0 / country
            :name (n0 / name
                  :op1 "China" )))

# ::snt US House Republicans eye reluctant Ryan for speaker
# ::tokens ["US", "House", "Republicans", "eye", "reluctant", "Ryan", "for", "speaker"]
# ::ner_tags ["GPE", "ORG", "NORP", "O", "O", "PERSON", "O", "O"]
# ::ner_iob ["B", "B", "B", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NNPS", "NN", "JJ", "NNP", "IN", "NN"]
# ::lemmas ["US", "House", "Republicans", "eye", "reluctant", "Ryan", "for", "speaker"]
(s0 / see-01
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Ryan" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (p3 / political-party
                        :name (n1 / name
                              :op1 "Republican" ))))
      :ARG0 (p1 / person)
      :ARG2 (p2 / person
            :ARG0-of (h1 / have-org-role-91
                  :ARG1 (g0 / government-organization
                        :mod (c0 / country
                              :name (n3 / name
                                    :op1 "US" ))
                        :name (n2 / name
                              :op1 "House" 
                              :op2 "Republican" ))
                  :ARG2 (s1 / speaker))
            :ARG0-of (r0 / reluctant-01)))

# ::snt Top Asian News 8:39 a.m. GMT
# ::tokens ["Top", "Asian", "News", "8:39", "a.m.", "GMT"]
# ::ner_tags ["O", "NORP", "O", "TIME", "TIME", "O"]
# ::ner_iob ["O", "B", "O", "B", "I", "O"]
# ::pos_tags ["NNP", "NNP", "NNP", "CD", "NN", "NNP"]
# ::lemmas ["Top", "Asian", "News", "8:39", "a.m.", "GMT"]
(b0 / broadcast-program
      :name (n0 / name
            :op1 "Top" 
            :op2 "Asian" 
            :op3 "News" )
      :time (d0 / date-entity
            :time "8:39" 
            :timezone "GMT" ))

# ::snt Headlines in several Iranian newspapers on Oct 19
# ::tokens ["Headlines", "in", "several", "Iranian", "newspapers", "on", "Oct", "19"]
# ::ner_tags ["O", "O", "O", "NORP", "O", "O", "DATE", "DATE"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "B", "I"]
# ::pos_tags ["NNS", "IN", "JJ", "JJ", "NNS", "IN", "NNP", "CD"]
# ::lemmas ["headline", "in", "several", "Iranian", "newspaper", "on", "Oct", "19"]
(t0 / thing
      :ARG2-of (h0 / headline-01
            :time (n0 / newspaper
                  :mod (s0 / several)
                  :mod (c0 / country
                        :name (n1 / name
                              :op1 "Iran" )))
            :time (d0 / date-entity
                  :month 10 
                  :day 19 )))

# ::snt Saudi airstrikes in Yemen's capital kill 29
# ::tokens ["Saudi", "airstrikes", "in", "Yemen", "'s", "capital", "kill", "29"]
# ::ner_tags ["NORP", "O", "O", "GPE", "O", "O", "O", "CARDINAL"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "O", "B"]
# ::pos_tags ["JJ", "NNS", "IN", "NNP", "POS", "NN", "NN", "CD"]
# ::lemmas ["Saudi", "airstrike", "in", "Yemen", "'s", "capital", "kill", "29"]
(k0 / kill-01
      :ARG1 29 
      :ARG0 (s0 / strike-01
            :ARG1 (c1 / city)
            :path (a0 / air))
      :ARG0 (c0 / country
            :ARG1-of (h0 / have-org-role-91
                  :ARG1 (c2 / country
                        :name (n1 / name
                              :op1 "Yemen" ))
                  :ARG2 (c3 / capital))
            :name (n0 / name
                  :op1 "Saudi" 
                  :op2 "Arabia" )))

# ::snt Militant attack from Afghanistan kills FC soldier in Balochistan
# ::tokens ["Militant", "attack", "from", "Afghanistan", "kills", "FC", "soldier", "in", "Balochistan"]
# ::ner_tags ["O", "O", "O", "GPE", "O", "GPE", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "B", "O", "B", "O", "O", "B"]
# ::pos_tags ["JJ", "NN", "IN", "NNP", "VBZ", "NN", "NN", "IN", "NNP"]
# ::lemmas ["militant", "attack", "from", "Afghanistan", "kill", "FC", "soldier", "in", "Balochistan"]
(k0 / kill-01
      :ARG1 (s0 / soldier
            :quant 2 )
      :ARG0 (a0 / attack-01
            :ARG0 (m0 / militant)
            :source (c0 / country
                  :name (n1 / name
                        :op1 "Afghanistan" )))
      :location (p0 / province
            :name (n0 / name
                  :op1 "Balochistan" )))

# ::snt Militants attack UN as Mali hunts jihadist nightclub killers
# ::tokens ["Militants", "attack", "UN", "as", "Mali", "hunts", "jihadist", "nightclub", "killers"]
# ::ner_tags ["O", "O", "ORG", "O", "ORG", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "VBP", "NNP", "IN", "NNP", "VBZ", "NNP", "NNP", "NNP"]
# ::lemmas ["militant", "attack", "UN", "as", "Mali", "hunt", "jihadist", "nightclub", "killers"]
(a0 / attack-01
      :ARG1 (o0 / organization
            :name (n0 / name
                  :op1 "UN" ))
      :ARG0 (p0 / person
            :ARG0-of (h1 / have-org-role-91
                  :ARG2 (m0 / militant)))
      :time (h0 / hunt-01
            :ARG1 (k0 / kill-01
                  :ARG1 (j0 / jihadist))
            :ARG0 (c0 / country
                  :name (n1 / name
                        :op1 "Mali" ))))

# ::snt Sierra Leone Reaches Final Day of Ebola Lockdown
# ::tokens ["Sierra", "Leone", "Reaches", "Final", "Day", "of", "Ebola", "Lockdown"]
# ::ner_tags ["PERSON", "PERSON", "PERSON", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "I", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "NNP", "NNP", "IN", "NNP", "NNP"]
# ::lemmas ["Sierra", "Leone", "Reaches", "Final", "Day", "of", "Ebola", "Lockdown"]
(r0 / race-02
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Sierra" 
                  :op2 "Leone" ))
      :ARG3 (e0 / event
            :name (n1 / name
                  :op1 "Ebola" 
                  :op2 "Day" )))

# ::snt Israeli forces detain 2 Palestinians in overnight arrest raids
# ::tokens ["Israeli", "forces", "detain", "2", "Palestinians", "in", "overnight", "arrest", "raids"]
# ::ner_tags ["NORP", "O", "O", "CARDINAL", "NORP", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "B", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNS", "VBP", "CD", "NNPS", "IN", "JJ", "NN", "NNS"]
# ::lemmas ["Israeli", "force", "detain", "2", "Palestinians", "in", "overnight", "arrest", "raid"]
(d0 / detain-01
      :ARG1 (p0 / person
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Palestine" ))
            :quant 2 )
      :ARG0 (f0 / force
            :mod (c1 / country
                  :name (n1 / name
                        :op1 "Israel" )))
      :ARG2 (r0 / raid-01
            :ARG1 (a0 / arrest-01)
            :time (o0 / overnight)))

# ::snt Over 2,000 migrants rescued from wooden boats in Mediterranean
# ::tokens ["Over", "2,000", "migrants", "rescued", "from", "wooden", "boats", "in", "Mediterranean"]
# ::ner_tags ["O", "QUANTITY", "QUANTITY", "O", "O", "O", "O", "O", "LOC"]
# ::ner_iob ["O", "B", "I", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["IN", "CD", "NNS", "VBN", "IN", "JJ", "NNS", "IN", "NNP"]
# ::lemmas ["over", "2,000", "migrants", "rescue", "from", "wooden", "boat", "in", "Mediterranean"]
(r0 / rescue-01
      :ARG1 (p0 / person
            :ARG0-of (m0 / migrate-01)
            :quant (o0 / over
                  :op1 2000 ))
      :ARG2 (b0 / boat
            :mod (w0 / wooden)
            :location (s0 / sea
                  :name (n0 / name
                        :op1 "Mediterranean" ))))

# ::snt Israel Police Clash With Palestinians in Jerusalem
# ::tokens ["Israel", "Police", "Clash", "With", "Palestinians", "in", "Jerusalem"]
# ::ner_tags ["GPE", "O", "O", "O", "NORP", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "B", "O", "B"]
# ::pos_tags ["NNP", "NNS", "VBP", "IN", "NNPS", "IN", "NNP"]
# ::lemmas ["Israel", "police", "clash", "with", "Palestinians", "in", "Jerusalem"]
(c0 / clash-01
      :ARG1 (p0 / person
            :mod (c2 / country
                  :name (n1 / name
                        :op1 "Palestine" )))
      :location (p1 / police
            :mod (c3 / country
                  :name (n2 / name
                        :op1 "Israel" )))
      :location (c1 / city
            :name (n0 / name
                  :op1 "Jerusalem" )))

# ::snt Islamic State posts second propaganda video of UK hostage
# ::tokens ["Islamic", "State", "posts", "second", "propaganda", "video", "of", "UK", "hostage"]
# ::ner_tags ["ORG", "ORG", "O", "ORDINAL", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "I", "O", "B", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "JJ", "NN", "NN", "IN", "NNP", "NN"]
# ::lemmas ["Islamic", "State", "post", "second", "propaganda", "video", "of", "UK", "hostage"]
(p0 / post-01
      :ARG1 (v0 / video
            :topic (p1 / propaganda)
            :topic (h0 / hostage
                  :mod (c0 / country
                        :name (n1 / name
                              :op1 "UK" )))
            :ord (o0 / ordinal-entity
                  :value 2 ))
      :ARG0 (s0 / state
            :mod (r0 / religious-group
                  :name (n0 / name
                        :op1 "Islamic" ))))

# ::snt Greece concerns drag on Asia markets
# ::tokens ["Greece", "concerns", "drag", "on", "Asia", "markets"]
# ::ner_tags ["GPE", "O", "O", "O", "LOC", "O"]
# ::ner_iob ["B", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "NNS", "VBP", "IN", "NNP", "NNS"]
# ::lemmas ["Greece", "concern", "drag", "on", "Asia", "market"]
(c0 / concern-01
      :ARG1 (c1 / country
            :name (n0 / name
                  :op1 "Greece" ))
      :ARG0 (d0 / drag-01
            :ARG1 (m0 / market
                  :location (c2 / continent
                        :name (n1 / name
                              :op1 "Asia" )))))

# ::snt Death toll in Nepal earthquake tops 8,000
# ::tokens ["Death", "toll", "in", "Nepal", "earthquake", "tops", "8,000"]
# ::ner_tags ["O", "O", "O", "GPE", "O", "O", "CARDINAL"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "B"]
# ::pos_tags ["NN", "NN", "IN", "NNP", "NN", "VBZ", "CD"]
# ::lemmas ["death", "toll", "in", "Nepal", "earthquake", "top", "8,000"]
(t0 / top-01
      :ARG1 (t1 / toll
            :quant-of (d0 / die-01))
      :ARG2 (c0 / cause-01
            :ARG0 (e0 / earthquake
                  :location (c1 / country
                        :name (n0 / name
                              :op1 "Nepal" ))))
      :ARG2 8000 )

# ::snt US drone strike kills 11 in Pakistan
# ::tokens ["US", "drone", "strike", "kills", "11", "in", "Pakistan"]
# ::ner_tags ["GPE", "O", "O", "O", "CARDINAL", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "B", "O", "B"]
# ::pos_tags ["NNP", "NN", "NN", "VBZ", "CD", "IN", "NNP"]
# ::lemmas ["US", "drone", "strike", "kill", "11", "in", "Pakistan"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant 11 )
      :ARG0 (s0 / strike-01
            :ARG0 (c1 / country
                  :name (n1 / name
                        :op1 "US" ))
            :ARG2 (d0 / drone))
      :location (c0 / country
            :name (n0 / name
                  :op1 "Pakistan" )))

# ::snt Two teenagers arrested after string of sex attacks on Manchester University campus
# ::tokens ["Two", "teenagers", "arrested", "after", "string", "of", "sex", "attacks", "on", "Manchester", "University", "campus"]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "ORG", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "O"]
# ::pos_tags ["CD", "NNS", "VBN", "IN", "NN", "IN", "NN", "NNS", "IN", "NNP", "NNP", "NN"]
# ::lemmas ["Two", "teenager", "arrest", "after", "string", "of", "sex", "attack", "on", "Manchester", "University", "campus"]
(a0 / arrest-01
      :ARG1 (t0 / teenager
            :quant 2 )
      :time (a1 / after
            :op1 (a2 / attack-01
                  :ARG1 (c0 / campus
                        :poss (u0 / university
                              :name (n0 / name
                                    :op1 "Manchester" 
                                    :op2 "University" )))
                  :quant (s0 / string)
                  :manner (s1 / sex-01))))

# ::snt UN urges Syria gas attack inspection
# ::tokens ["UN", "urges", "Syria", "gas", "attack", "inspection"]
# ::ner_tags ["ORG", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "NNP", "NN", "NN", "NN"]
# ::lemmas ["UN", "urge", "Syria", "gas", "attack", "inspection"]
(u0 / urge-01
      :ARG1 (a0 / attack-01
            :ARG1 (c0 / country
                  :name (n1 / name
                        :op1 "Syria" ))
            :ARG2 (i0 / inspection)
            :instrument (g0 / gas))
      :ARG0 (o0 / organization
            :name (n0 / name
                  :op1 "UN" )))

# ::snt Ukraine's opposition chief wants more protests
# ::tokens ["Ukraine", "'s", "opposition", "chief", "wants", "more", "protests"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NN", "NN", "VBZ", "JJR", "NNS"]
# ::lemmas ["Ukraine", "'s", "opposition", "chief", "want", "more", "protest"]
(w0 / want-01
      :ARG1 (p0 / protest-01
            :quant (m0 / more))
      :ARG0 (p1 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c0 / country
                        :name (n0 / name
                              :op1 "Ukraine" ))
                  :ARG2 (c1 / chief
                        :ARG0-of (o0 / oppose-01)))))

# ::snt Redford addresses PC convention ahead of leadership review
# ::tokens ["Redford", "addresses", "PC", "convention", "ahead", "of", "leadership", "review"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "VBZ", "NN", "NN", "RB", "IN", "NN", "NN"]
# ::lemmas ["Redford", "address", "pc", "convention", "ahead", "of", "leadership", "review"]
(a0 / address-03
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Redford" ))
      :time (a1 / ahead
            :op1 (r0 / review-01
                  :ARG1 (l0 / lead-02)))
      :ARG1 (c0 / convention
            :mod (p1 / politics)))

# ::snt Police: Gunman killed 6 in California shootings
# ::tokens ["Police", ":", "Gunman", "killed", "6", "in", "California", "shootings"]
# ::ner_tags ["O", "O", "PERSON", "O", "CARDINAL", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "B", "O", "B", "O", "B", "O"]
# ::pos_tags ["NNS", ":", "NNP", "VBD", "CD", "IN", "NNP", "NNS"]
# ::lemmas ["police", ":", "Gunman", "kill", "6", "in", "California", "shooting"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant 6 )
      :ARG0 (s0 / shoot-02
            :location (s1 / state
                  :name (n0 / name
                        :op1 "California" )))
      :ARG1-of (c0 / cause-01
            :ARG0 (g0 / gun))
      :ARG0 (p1 / police))

# ::snt North Korea deports detained US war veteran
# ::tokens ["North", "Korea", "deports", "detained", "US", "war", "veteran"]
# ::ner_tags ["GPE", "GPE", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NNS", "VBD", "NNP", "NN", "NN"]
# ::lemmas ["North", "Korea", "deport", "detain", "US", "war", "veteran"]
(d0 / deport-01
      :ARG1 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c1 / country
                        :name (n1 / name
                              :op1 "US" ))
                  :ARG2 (v0 / veteran
                        :mod (w0 / war)))
            :ARG0-of (d1 / detain-01))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "North" 
                  :op2 "Korea" )))

# ::snt Obama urges military action against Syria, but will seek Congress' OK
# ::tokens ["Obama", "urges", "military", "action", "against", "Syria", ",", "but", "will", "seek", "Congress", "'", "OK"]
# ::ner_tags ["O", "O", "O", "O", "O", "GPE", "O", "O", "O", "O", "ORG", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "JJ", "NN", "IN", "NNP", ",", "CC", "MD", "VB", "NNP", "POS", "UH"]
# ::lemmas ["Obama", "urge", "military", "action", "against", "Syria", ",", "but", "will", "seek", "Congress", "'", "ok"]
(c0 / contrast-01
      :ARG1 (s0 / seek-01
            :ARG1 (o0 / okay-04
                  :ARG1 (g0 / government-organization
                        :name (n1 / name
                              :op1 "Congress" )))
            :ARG0 (p0 / person
                  :name (n0 / name
                        :op1 "Obama" )))
      :ARG1 (u0 / urge-01
            :ARG0 p0
            :ARG2 (a0 / act-02
                  :ARG0 (c1 / country
                        :name (n2 / name
                              :op1 "Syria" ))
                  :mod (m0 / military))))

# ::snt Egypt: Protesters storm Muslim Brotherhood's HQ
# ::tokens ["Egypt", ":", "Protesters", "storm", "Muslim", "Brotherhood", "'s", "HQ"]
# ::ner_tags ["GPE", "O", "O", "O", "ORG", "ORG", "ORG", "O"]
# ::ner_iob ["B", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["NNP", ":", "NNS", "NN", "NNP", "NNP", "POS", "NNP"]
# ::lemmas ["Egypt", ":", "protester", "storm", "Muslim", "Brotherhood", "'s", "HQ"]
(s0 / storm-02
      :ARG1 (p0 / person
            :ARG0-of (p1 / protest-01))
      :ARG1 (g0 / government-organization
            :name (n0 / name
                  :op1 "Muslim" 
                  :op2 "Brotherhood" ))
      :location (c0 / country
            :name (n1 / name
                  :op1 "Egypt" )))

# ::snt Saudi women drive in protest with little problem
# ::tokens ["Saudi", "women", "drive", "in", "protest", "with", "little", "problem"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNS", "VBP", "IN", "NN", "IN", "JJ", "NN"]
# ::lemmas ["Saudi", "woman", "drive", "in", "protest", "with", "little", "problem"]
(d0 / drive-01
      :ARG1 (w0 / woman
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Saudi" 
                        :op2 "Arabia" )))
      :manner (p0 / protest-01)
      :manner (h0 / have-03
            :ARG1 (p1 / problem
                  :quant (l0 / little))))

# ::snt Nelson Mandela Goes Home After Hospital Stay
# ::tokens ["Nelson", "Mandela", "Goes", "Home", "After", "Hospital", "Stay"]
# ::ner_tags ["PERSON", "PERSON", "PERSON", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "I", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "RB", "IN", "NN", "NNP"]
# ::lemmas ["Nelson", "Mandela", "Goes", "home", "after", "hospital", "Stay"]
(g0 / go-02
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Nelson" 
                  :op2 "Mandela" ))
      :time (a0 / after
            :op1 (d0 / day
                  :time-of (h1 / hospital)))
      :ARG4 (h0 / home))

# ::snt What we know so far about chemical weapons in Syria's civil war
# ::tokens ["What", "we", "know", "so", "far", "about", "chemical", "weapons", "in", "Syria", "'s", "civil", "war"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["WP", "PRP", "VBP", "RB", "RB", "IN", "JJ", "NNS", "IN", "NNP", "POS", "JJ", "NN"]
# ::lemmas ["what", "we", "know", "so", "far", "about", "chemical", "weapon", "in", "Syria", "'s", "civil", "war"]
(k0 / know-01
      :ARG1 (t0 / thing
            :topic (w1 / weapon
                  :mod (c0 / chemical)
                  :location (w2 / war
                        :mod (c1 / country
                              :name (n0 / name
                                    :op1 "Syria" ))
                        :mod (c2 / civil))))
      :ARG0 (w0 / we)
      :time (s0 / so-far))

# ::snt UK's Cameron: Syria, Russia must show chemical arms proposal is genuine
# ::tokens ["UK", "'s", "Cameron", ":", "Syria", ",", "Russia", "must", "show", "chemical", "arms", "proposal", "is", "genuine"]
# ::ner_tags ["GPE", "O", "PERSON", "O", "GPE", "O", "GPE", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "B", "O", "B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NNP", ":", "NNP", ",", "NNP", "MD", "VB", "NN", "NNS", "NN", "VBZ", "JJ"]
# ::lemmas ["UK", "'s", "Cameron", ":", "Syria", ",", "Russia", "must", "show", "chemical", "arm", "proposal", "be", "genuine"]
(s0 / say-01
      :ARG1 (o0 / obligate-01
            :ARG1 (s1 / show-01
                  :ARG0 a0
                  :ARG1 (g0 / genuine
                        :domain (p1 / propose-01
                              :ARG1 (a1 / arm
                                    :mod (c3 / chemical)))))
            :ARG1 (a0 / and
                  :op1 (c0 / country
                        :name (n1 / name
                              :op1 "UK" ))
                  :op2 (c1 / country
                        :name (n2 / name
                              :op1 "Syria" ))))
      :ARG2 (p0 / person
            :name (n0 / name
                  :op1 (c2 / country
                        :name (n3 / name
                              :op1 "Russia" ))
                  :op1 "Cameron" )))

# ::snt Kremlin: Putin yet to decide on using Russian troops in Ukraine
# ::tokens ["Kremlin", ":", "Putin", "yet", "to", "decide", "on", "using", "Russian", "troops", "in", "Ukraine"]
# ::ner_tags ["ORG", "O", "PERSON", "O", "O", "O", "O", "O", "NORP", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "O", "O", "B", "O", "O", "B"]
# ::pos_tags ["NNP", ":", "NNP", "RB", "TO", "VB", "IN", "VBG", "JJ", "NNS", "IN", "NNP"]
# ::lemmas ["Kremlin", ":", "Putin", "yet", "to", "decide", "on", "use", "Russian", "troop", "in", "Ukraine"]
(s0 / say-01
      :ARG1 (d0 / decide-01
            :ARG1 (u0 / use-01
                  :ARG1 (t0 / troop)
                  :location (c0 / country
                        :name (n2 / name
                              :op1 "Ukraine" )))
            :ARG0 (p0 / person
                  :name (n1 / name
                        :op1 "Putin" ))
            :time (y0 / yet))
      :ARG0 (g0 / government-organization
            :name (n0 / name
                  :op1 "Kremlin" )))

# ::snt Singapore shares open 0.19% higher on Thursday
# ::tokens ["Singapore", "shares", "open", "0.19", "%", "higher", "on", "Thursday"]
# ::ner_tags ["GPE", "O", "O", "PERCENT", "PERCENT", "O", "O", "DATE"]
# ::ner_iob ["B", "O", "O", "B", "I", "O", "O", "B"]
# ::pos_tags ["NNP", "NNS", "VBP", "CD", "NN", "JJR", "IN", "NNP"]
# ::lemmas ["Singapore", "share", "open", "0.19", "%", "high", "on", "Thursday"]
(o0 / open-01
      :ARG1 (s0 / share-01
            :ARG0 (c0 / country
                  :name (n0 / name
                        :op1 "Singapore" ))
            :quant (p0 / percentage-entity
                  :value 0.19 ))
      :time (h0 / high-02
            :ARG2-of (h1 / have-degree-91
                  :ARG3 (m0 / more)))
      :time (d0 / date-entity
            :weekday (t0 / thursday)))

# ::snt Headlines in several Iranian newspapers on Oct 19
# ::tokens ["Headlines", "in", "several", "Iranian", "newspapers", "on", "Oct", "19"]
# ::ner_tags ["O", "O", "O", "NORP", "O", "O", "DATE", "DATE"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "B", "I"]
# ::pos_tags ["NNS", "IN", "JJ", "JJ", "NNS", "IN", "NNP", "CD"]
# ::lemmas ["headline", "in", "several", "Iranian", "newspaper", "on", "Oct", "19"]
(t0 / thing
      :ARG2-of (h0 / headline-01
            :time (n0 / newspaper
                  :mod (s0 / several)
                  :mod (c0 / country
                        :name (n1 / name
                              :op1 "Iran" )))
            :time (d0 / date-entity
                  :month 10 
                  :day 19 )))

# ::snt Bombings kill 19 people in Iraq
# ::tokens ["Bombings", "kill", "19", "people", "in", "Iraq"]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "B", "O", "O", "B"]
# ::pos_tags ["NNS", "VBP", "CD", "NNS", "IN", "NNP"]
# ::lemmas ["bombing", "kill", "19", "people", "in", "Iraq"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant 19 )
      :ARG0 (b0 / bomb-01)
      :location (c0 / country
            :name (n0 / name
                  :op1 "Iraq" )))

# ::snt 10 Things to Know for Thursday
# ::tokens ["10", "Things", "to", "Know", "for", "Thursday"]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "DATE"]
# ::ner_iob ["B", "O", "O", "O", "O", "B"]
# ::pos_tags ["CD", "NNS", "TO", "VB", "IN", "NNP"]
# ::lemmas ["10", "thing", "to", "know", "for", "Thursday"]
(t0 / thing
      :quant 10 
      :ARG1-of (k0 / know-01
            :time (d0 / date-entity
                  :weekday (t1 / thursday))))

# ::snt How the Dow Jones Industrial Average Fared on Monday
# ::tokens ["How", "the", "Dow", "Jones", "Industrial", "Average", "Fared", "on", "Monday"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "DATE"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["WRB", "DT", "NNP", "NNP", "NNP", "NNP", "NNP", "IN", "NNP"]
# ::lemmas ["how", "the", "Dow", "Jones", "Industrial", "Average", "Fared", "on", "Monday"]
(r0 / rate-01
      :ARG1 (d0 / date-entity
            :weekday (m0 / monday))
      :ARG1 (c0 / company
            :name (n0 / name
                  :op1 "Dow" 
                  :op2 "Jones" ))
      :ARG3 (i0 / industry))

# ::snt UN takes over peacekeeping in Central African Republic
# ::tokens ["UN", "takes", "over", "peacekeeping", "in", "Central", "African", "Republic"]
# ::ner_tags ["ORG", "O", "O", "O", "O", "GPE", "GPE", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "B", "I", "I"]
# ::pos_tags ["NNP", "VBZ", "RP", "NN", "IN", "NNP", "NNP", "NNP"]
# ::lemmas ["UN", "take", "over", "peacekeeping", "in", "Central", "African", "Republic"]
(t0 / take-over-12
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "Central" 
                  :op2 "African" 
                  :op3 "Republic" ))
      :ARG0 (o0 / organization
            :name (n1 / name
                  :op1 "UN" ))
      :ARG1 (k0 / keep-01
            :ARG1 (p0 / peace)))

# ::snt Iraq suicide bomber kills at least 12
# ::tokens ["Iraq", "suicide", "bomber", "kills", "at", "least", "12"]
# ::ner_tags ["GPE", "O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL"]
# ::ner_iob ["B", "O", "O", "O", "B", "I", "I"]
# ::pos_tags ["NNP", "NN", "NN", "VBZ", "IN", "RBS", "CD"]
# ::lemmas ["Iraq", "suicide", "bomber", "kill", "at", "least", "12"]
(k0 / kill-01
      :ARG1 (p0 / person
            :ARG0-of (b0 / bomb-01
                  :mod (s0 / suicide))
            :quant (a0 / at-least
                  :op1 12 ))
      :ARG1 (p1 / person
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Iraq" ))))

# ::snt UN Security Council urges Yemen's Houthis to end...
# ::tokens ["UN", "Security", "Council", "urges", "Yemen", "'s", "Houthis", "to", "end", "..."]
# ::ner_tags ["ORG", "ORG", "ORG", "O", "GPE", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "I", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NNP", "VBZ", "NNP", "POS", "NNP", "TO", "VB", "."]
# ::lemmas ["UN", "Security", "Council", "urge", "Yemen", "'s", "Houthis", "to", "end", "..."]
(u0 / urge-01
      :ARG1 (o0 / organization
            :name (n0 / name
                  :op1 "UN" 
                  :op2 "Security" 
                  :op3 "Council" ))
      :ARG2 (e0 / end-01
            :ARG1 (e1 / ethnic-group
                  :name (n1 / name
                        :op1 "Houthis" )
                  :poss (c0 / country
                        :name (n2 / name
                              :op1 "Yemen" )))))

# ::snt 6 killed in Afghan capital mosque attack
# ::tokens ["6", "killed", "in", "Afghan", "capital", "mosque", "attack"]
# ::ner_tags ["CARDINAL", "O", "O", "NORP", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["CD", "VBN", "IN", "JJ", "NN", "NN", "NN"]
# ::lemmas ["6", "kill", "in", "Afghan", "capital", "mosque", "attack"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant 6 )
      :ARG1-of (c0 / cause-01
            :ARG0 (a0 / attack-01
                  :ARG0 (m0 / mosque
                        :ARG0-of (h0 / have-org-role-91
                              :ARG1 (c1 / country
                                    :name (n0 / name
                                          :op1 "Afghanistan" ))
                              :ARG2 (c2 / capital))))))

# ::snt Rev.'s Early Reads: Sept. 3rd, 2015
# ::tokens ["Rev.", "'s", "Early", "Reads", ":", "Sept.", "3rd", ",", "2015"]
# ::ner_tags ["DATE", "O", "O", "O", "O", "DATE", "DATE", "DATE", "DATE"]
# ::ner_iob ["B", "O", "O", "O", "O", "B", "I", "I", "I"]
# ::pos_tags ["NNP", "POS", "JJ", "NNS", ":", "NNP", "NN", ",", "CD"]
# ::lemmas ["Rev.", "'s", "early", "read", ":", "Sept.", "3rd", ",", "2015"]
(r0 / read-01
      :ARG0 (p0 / person
            :ARG0-of (f0 / favor-01))
      :time (e0 / early)
      :time (d0 / date-entity
            :month 2015 
            :month 9 
            :day 3 ))

# ::snt Markets Live: China drags
# ::tokens ["Markets", "Live", ":", "China", "drags"]
# ::ner_tags ["O", "O", "O", "GPE", "O"]
# ::ner_iob ["O", "O", "O", "B", "O"]
# ::pos_tags ["NNS", "VBP", ":", "NNP", "VBZ"]
# ::lemmas ["market", "live", ":", "China", "drag"]
(d0 / drag-01
      :ARG0 (b0 / broadcast-program
            :name (n0 / name
                  :op1 "market" 
                  :op2 "live" ))
      :ARG1 (c0 / country
            :name (n1 / name
                  :op1 "China" )))

# ::snt Palestinian Shot by Israeli Police in East Jerusalem Dies
# ::tokens ["Palestinian", "Shot", "by", "Israeli", "Police", "in", "East", "Jerusalem", "Dies"]
# ::ner_tags ["NORP", "O", "O", "NORP", "O", "O", "GPE", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "B", "I", "O"]
# ::pos_tags ["JJ", "NNP", "IN", "JJ", "NNS", "IN", "NNP", "NNP", "VBZ"]
# ::lemmas ["Palestinian", "Shot", "by", "Israeli", "police", "in", "East", "Jerusalem", "die"]
(s0 / shoot-02
      :ARG1 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (p1 / police
                        :mod (c2 / country
                              :name (n2 / name
                                    :op1 "Israel" )))))
      :location (c0 / city
            :name (n0 / name
                  :op1 "East" 
                  :op2 "Jerusalem" ))
      :ARG3 (c1 / country
            :name (n1 / name
                  :op1 "Palestine" )))

# ::snt UK 'concern' over Hong Kong protests
# ::tokens ["UK", "'", "concern", "'", "over", "Hong", "Kong", "protests"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "GPE", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "B", "I", "O"]
# ::pos_tags ["NNP", "POS", "NN", "''", "IN", "NNP", "NNP", "NNS"]
# ::lemmas ["UK", "'", "concern", "'", "over", "Hong", "Kong", "protest"]
(c0 / concern-01
      :ARG1 (c1 / country
            :name (n0 / name
                  :op1 "UK" ))
      :ARG0 (p0 / protest-01
            :ARG0 (c2 / city
                  :name (n1 / name
                        :op1 "Hong" 
                        :op2 "Kong" ))))

# ::snt Russian roulette in Syria
# ::tokens ["Russian", "roulette", "in", "Syria"]
# ::ner_tags ["NORP", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "B"]
# ::pos_tags ["JJ", "NN", "IN", "NNP"]
# ::lemmas ["Russian", "roulette", "in", "Syria"]
(r0 / roulette
      :mod (c0 / country
            :name (n0 / name
                  :op1 "Syria" ))
      :mod (c1 / country
            :name (n1 / name
                  :op1 "Russia" )))

# ::snt Guineans Go to the Polls in Presidential Elections
# ::tokens ["Guineans", "Go", "to", "the", "Polls", "in", "Presidential", "Elections"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNPS", "VBP", "IN", "DT", "NNS", "IN", "NNP", "NNS"]
# ::lemmas ["Guineans", "go", "to", "the", "poll", "in", "Presidential", "election"]
(g0 / go-01
      :ARG1 (p0 / person
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Afghanistan" )))
      :ARG4 (e0 / elect-01
            :ARG2 (p2 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG2 (p3 / president))))
      :ARG4 (p1 / poll-01))

# ::snt Prince William of Britain arrives in Beijing
# ::tokens ["Prince", "William", "of", "Britain", "arrives", "in", "Beijing"]
# ::ner_tags ["PERSON", "PERSON", "O", "GPE", "O", "O", "GPE"]
# ::ner_iob ["B", "I", "O", "B", "O", "O", "B"]
# ::pos_tags ["NNP", "NNP", "IN", "NNP", "VBZ", "IN", "NNP"]
# ::lemmas ["Prince", "William", "of", "Britain", "arrive", "in", "Beijing"]
(a0 / arrive-01
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Prince" 
                  :op2 "William" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c1 / country
                        :name (n2 / name
                              :op1 "Britain" ))))
      :ARG4 (c0 / city
            :name (n1 / name
                  :op1 "Beijing" )))

# ::snt Vice President of Bolivia to visit China
# ::tokens ["Vice", "President", "of", "Bolivia", "to", "visit", "China"]
# ::ner_tags ["O", "O", "O", "GPE", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "B"]
# ::pos_tags ["NNP", "NNP", "IN", "NNP", "TO", "VB", "NNP"]
# ::lemmas ["Vice", "President", "of", "Bolivia", "to", "visit", "China"]
(v0 / visit-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "China" ))
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c1 / country
                        :name (n1 / name
                              :op1 "Bolivia" ))
                  :ARG2 (p1 / president
                        :mod (v1 / vice)))))

# ::snt Iran, Tajikistan sign cooperation agreement
# ::tokens ["Iran", ",", "Tajikistan", "sign", "cooperation", "agreement"]
# ::ner_tags ["GPE", "O", "NORP", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", ",", "NNP", "NN", "NN", "NN"]
# ::lemmas ["Iran", ",", "Tajikistan", "sign", "cooperation", "agreement"]
(s0 / sign-02
      :ARG1 (a0 / agree-01
            :ARG1 (c0 / cooperate-01))
      :ARG0 (a1 / and
            :op1 (c1 / country
                  :name (n0 / name
                        :op1 "Iran" ))
            :op2 (c2 / country
                  :name (n1 / name
                        :op1 "Tajikistan" ))))

# ::snt China disagrees with U.S. sanctions program on overseas cyber attackers
# ::tokens ["China", "disagrees", "with", "U.S.", "sanctions", "program", "on", "overseas", "cyber", "attackers"]
# ::ner_tags ["GPE", "O", "O", "GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "IN", "NNP", "NNS", "NN", "IN", "JJ", "NNP", "NNS"]
# ::lemmas ["China", "disagree", "with", "U.S.", "sanction", "program", "on", "overseas", "cyber", "attacker"]
(d0 / disagree-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "China" ))
      :ARG2 (p0 / program
            :mod (s0 / sanction-02
                  :ARG1 (c1 / country
                        :name (n1 / name
                              :op1 "U.S." ))
                  :ARG1 (a0 / attack-01
                        :mod (c2 / cyber)
                        :location (o0 / overseas)))))

# ::snt 12 Dead, Despite Cease-fire in East Ukraine
# ::tokens ["12", "Dead", ",", "Despite", "Cease", "-", "fire", "in", "East", "Ukraine"]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "O", "O", "GPE", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "B", "I"]
# ::pos_tags ["CD", "JJ", ",", "IN", "NNP", "HYPH", "NN", "IN", "NNP", "NNP"]
# ::lemmas ["12", "dead", ",", "despite", "Cease", "-", "fire", "in", "East", "Ukraine"]
(h0 / have-concession-91
      :ARG1 (d0 / die-01
            :ARG1 (p0 / person
                  :quant 12 ))
      :ARG2 (f0 / fire-01
            :location (c0 / cease-01)
            :location (c1 / country
                  :name (n0 / name
                        :op1 "Ukraine" )
                  :location (e0 / east))))

# ::snt Mixed Progress Reported in Fight Against Islamic State
# ::tokens ["Mixed", "Progress", "Reported", "in", "Fight", "Against", "Islamic", "State"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "NORP", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["JJ", "NNP", "VBN", "IN", "NNP", "IN", "JJ", "NNP"]
# ::lemmas ["mixed", "Progress", "report", "in", "Fight", "against", "Islamic", "State"]
(r0 / report-01
      :ARG1 (p0 / progress-01
            :ARG1-of (m0 / mix-01))
      :location (f0 / fight-01
            :ARG1 (o0 / oppose-01
                  :ARG1 (s0 / state
                        :mod (r1 / religious-group
                              :name (n0 / name
                                    :op1 "Islamic" ))))))

# ::snt Chinese military reaches out amid South China Sea tensions
# ::tokens ["Chinese", "military", "reaches", "out", "amid", "South", "China", "Sea", "tensions"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "LOC", "LOC", "LOC", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["JJ", "NN", "VBZ", "RP", "IN", "NNP", "NNP", "NNP", "NNS"]
# ::lemmas ["Chinese", "military", "reach", "out", "amid", "South", "China", "Sea", "tension"]
(r0 / reach-03
      :ARG0 (m0 / military
            :mod (c0 / country
                  :name (n1 / name
                        :op1 "China" )))
      :ARG2 (t0 / tension)
      :direction (s0 / sea
            :name (n0 / name
                  :op1 "South" 
                  :op2 "China" 
                  :op3 "Sea" )))

# ::snt Pro-Palestinian activists prepare flotilla to break Gaza blockade
# ::tokens ["Pro", "-", "Palestinian", "activists", "prepare", "flotilla", "to", "break", "Gaza", "blockade"]
# ::ner_tags ["NORP", "NORP", "NORP", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "I", "I", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["JJ", "JJ", "JJ", "NNS", "VBP", "NN", "TO", "VB", "NNP", "NN"]
# ::lemmas ["Pro", "-", "Palestinian", "activist", "prepare", "flotilla", "to", "break", "Gaza", "blockade"]
(p0 / prepare-02
      :ARG1 (f0 / flotilla)
      :ARG0 (a0 / activist
            :ARG0-of (f1 / favor-01
                  :ARG1 (c0 / country
                        :name (n0 / name
                              :op1 "Palestine" ))))
      :ARG2 (b0 / break-01
            :ARG0 a0
            :ARG1 (b1 / blockade-01
                  :ARG1 (c1 / country-region
                        :name (n1 / name
                              :op1 "Gaza" )))))

# ::snt Heat flash detected at time of Russian airliner crash
# ::tokens ["Heat", "flash", "detected", "at", "time", "of", "Russian", "airliner", "crash"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "NORP", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NN", "NN", "VBD", "IN", "NN", "IN", "JJ", "NN", "NN"]
# ::lemmas ["heat", "flash", "detect", "at", "time", "of", "Russian", "airliner", "crash"]
(d0 / detect-01
      :ARG1 (c0 / crash-01
            :ARG1 (a0 / airliner
                  :mod (c1 / country
                        :name (n0 / name
                              :op1 "Russia" ))))
      :ARG1 (f0 / flash-01
            :ARG1 (h0 / heat)))

# ::snt Has Nasa discovered water on Mars?
# ::tokens ["Has", "Nasa", "discovered", "water", "on", "Mars", "?"]
# ::ner_tags ["O", "ORG", "O", "O", "O", "LOC", "O"]
# ::ner_iob ["O", "B", "O", "O", "O", "B", "O"]
# ::pos_tags ["VBZ", "NNP", "VBD", "NN", "IN", "NNP", "."]
# ::lemmas ["have", "Nasa", "discover", "water", "on", "Mars", "?"]
(d0 / discover-01
      :ARG1 (w0 / water)
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Nasa" ))
      :location (a0 / amr-unknown)
      :location (p1 / planet
            :name (n1 / name
                  :op1 "Mars" )))

# ::snt Media freedom at stake as Turkey fights rebels
# ::tokens ["Media", "freedom", "at", "stake", "as", "Turkey", "fights", "rebels"]
# ::ner_tags ["O", "O", "O", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "NN", "IN", "NN", "IN", "NNP", "VBZ", "NNS"]
# ::lemmas ["Media", "freedom", "at", "stake", "as", "Turkey", "fight", "rebel"]
(s0 / stake-01
      :ARG2 (f0 / fight-01
            :ARG0 (p0 / person
                  :ARG0-of (r0 / rebel-01))
            :ARG0 (c0 / country
                  :name (n0 / name
                        :op1 "Turkey" )))
      :ARG1 (f1 / free-04
            :ARG1 (m0 / media)))

# ::snt N Korea hit with new US sanctions
# ::tokens ["N", "Korea", "hit", "with", "new", "US", "sanctions"]
# ::ner_tags ["GPE", "GPE", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "NNP", "VBD", "IN", "JJ", "NNP", "NNS"]
# ::lemmas ["N", "Korea", "hit", "with", "new", "US", "sanction"]
(h0 / hit-01
      :ARG1 (s0 / sanction-02
            :ARG0 c0
            :ARG0 (c1 / country
                  :name (n2 / name
                        :op1 "US" ))
            :ARG1-of (n0 / new-01))
      :ARG0 (c0 / country
            :name (n1 / name
                  :op1 "N" 
                  :op2 "Korea" )))

# ::snt Hong Kong student leaders mull protest retreat
# ::tokens ["Hong", "Kong", "student", "leaders", "mull", "protest", "retreat"]
# ::ner_tags ["GPE", "GPE", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NN", "NNS", "VBP", "NN", "NN"]
# ::lemmas ["Hong", "Kong", "student", "leader", "mull", "protest", "retreat"]
(m0 / mull
      :domain (r0 / retreat-01
            :ARG2 (p1 / protest-01))
      :domain (p0 / person
            :ARG0-of (c0 / city
                  :name (n0 / name
                        :op1 "Hong" 
                        :op2 "Kong" ))
            :ARG0-of (l0 / lead-02
                  :ARG1 c0
                  :ARG1 (s0 / study-01))))

# ::snt "Volkswagen's ""gesture of goodwill"" to diesel owners"
# ::tokens ["\"", "Volkswagen", "'s", "\"", "\"", "gesture", "of", "goodwill", "\"", "\"", "to", "diesel", "owners", "\""]
# ::ner_tags ["O", "ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "NNP", "POS", "``", "``", "NN", "IN", "NN", "''", "''", "TO", "NN", "NNS", "''"]
# ::lemmas ["\"", "Volkswagen", "'s", "\"", "\"", "gesture", "of", "goodwill", "\"", "\"", "to", "diesel", "owner", "\""]
(g0 / gesture-01
      :ARG1 (g1 / goodwill)
      :ARG0 (c0 / company
            :name (n0 / name
                  :op1 "Volkswagen" ))
      :ARG2 (p0 / person
            :ARG0-of (o0 / own-01
                  :ARG1 (d0 / diesel))))

# ::snt Security tightened at New Delhi churches after attacks
# ::tokens ["Security", "tightened", "at", "New", "Delhi", "churches", "after", "attacks"]
# ::ner_tags ["O", "O", "O", "GPE", "GPE", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "I", "O", "O", "O"]
# ::pos_tags ["NN", "VBD", "IN", "NNP", "NNP", "NNS", "IN", "NNS"]
# ::lemmas ["security", "tighten", "at", "New", "Delhi", "church", "after", "attack"]
(t0 / tighten-01
      :ARG1 (s0 / security)
      :time (a0 / after
            :op1 (a1 / attack-01))
      :location (c0 / church
            :location (c1 / city
                  :name (n0 / name
                        :op1 "New" 
                        :op2 "Delhi" ))))

# ::snt Pilot killed as US jet crashes in England
# ::tokens ["Pilot", "killed", "as", "US", "jet", "crashes", "in", "England"]
# ::ner_tags ["O", "O", "O", "GPE", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "O", "B"]
# ::pos_tags ["NN", "VBN", "IN", "NNP", "NN", "NNS", "IN", "NNP"]
# ::lemmas ["pilot", "kill", "as", "US", "jet", "crash", "in", "England"]
(k0 / kill-01
      :ARG1 (c0 / cause-01
            :ARG0 (c1 / crash-01
                  :ARG1 (j0 / jet
                        :poss (c3 / country
                              :name (n1 / name
                                    :op1 "US" )))
                  :location (c2 / country
                        :name (n0 / name
                              :op1 "England" ))))
      :ARG1 (p0 / person
            :ARG0-of (p1 / pilot-01)))

# ::snt Mandela's condition has 'worsened over past 48 hours'
# ::tokens ["Mandela", "'s", "condition", "has", "'", "worsened", "over", "past", "48", "hours", "'"]
# ::ner_tags ["PERSON", "O", "O", "O", "O", "O", "TIME", "TIME", "TIME", "TIME", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "B", "I", "I", "I", "O"]
# ::pos_tags ["NNP", "POS", "NN", "VBZ", "``", "VBN", "RP", "IN", "CD", "NNS", "''"]
# ::lemmas ["Mandela", "'s", "condition", "have", "'", "worsen", "over", "past", "48", "hours", "'"]
(w0 / worsen-01
      :ARG1 (c0 / condition
            :poss (p0 / person
                  :name (n1 / name
                        :op1 "Mandela" )))
      :time (b0 / before
            :op1 (n0 / now)
            :duration (t0 / temporal-quantity
                  :quant 48 
                  :unit (h0 / hour))))

# ::snt Searchers hoping pings come from lost Malaysian airliner
# ::tokens ["Searchers", "hoping", "pings", "come", "from", "lost", "Malaysian", "airliner"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "NORP", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNS", "VBG", "NNS", "VBP", "IN", "VBN", "JJ", "NN"]
# ::lemmas ["searcher", "hope", "ping", "come", "from", "lose", "Malaysian", "airliner"]
(c0 / come-01
      :ARG1 (t0 / thing
            :ARG1-of (h0 / hope-01
                  :ARG0 (p0 / person
                        :ARG0-of (s0 / search-01))))
      :ARG3 (a0 / airliner
            :ARG1-of (l0 / lose-02)
            :mod (c1 / country
                  :name (n0 / name
                        :op1 "Malaysia" ))))

# ::snt Mandela's family thanks nation and world for support
# ::tokens ["Mandela", "'s", "family", "thanks", "nation", "and", "world", "for", "support"]
# ::ner_tags ["PERSON", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "NN", "NNS", "NN", "CC", "NN", "IN", "NN"]
# ::lemmas ["Mandela", "'s", "family", "thank", "nation", "and", "world", "for", "support"]
(t0 / thank-01
      :ARG1 (a0 / and
            :op1 (n0 / nation)
            :op2 (w0 / world))
      :ARG0 (f0 / family
            :ARG1-of (h0 / have-org-role-91
                  :ARG0 (p0 / person
                        :name (n1 / name
                              :op1 "Mandela" ))
                  :ARG2 (m0 / member)))
      :ARG2 (s0 / support-01
            :ARG0 f0))

# ::snt UK urges countries over Syria aid
# ::tokens ["UK", "urges", "countries", "over", "Syria", "aid"]
# ::ner_tags ["GPE", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "VBZ", "NNS", "IN", "NNP", "NN"]
# ::lemmas ["UK", "urge", "country", "over", "Syria", "aid"]
(u0 / urge-01
      :ARG1 (a0 / aid-01
            :ARG0 (c2 / country
                  :name (n1 / name
                        :op1 "Syria" )))
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "UK" ))
      :ARG0 (c1 / country))

# ::snt George Zimmerman Verdict Propels Cable News Into Talkradio Mode
# ::tokens ["George", "Zimmerman", "Verdict", "Propels", "Cable", "News", "Into", "Talkradio", "Mode"]
# ::ner_tags ["PERSON", "PERSON", "O", "ORG", "ORG", "ORG", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "B", "I", "I", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NNP", "NNP", "NNP", "NNP", "NNP", "NNP", "NNP"]
# ::lemmas ["George", "Zimmerman", "Verdict", "Propels", "Cable", "News", "Into", "Talkradio", "Mode"]
(p0 / prevent-01
      :ARG1 (b0 / broadcast-program
            :name (n0 / name
                  :op1 "Cable" 
                  :op2 "News" ))
      :ARG0 (p1 / person
            :name (n1 / name
                  :op1 "George" 
                  :op2 "Zimmerman" ))
      :ARG3 (M0 / Mode
            :mod (T0 / Talkradio)))

# ::snt Hollande arrives for US state visit
# ::tokens ["Hollande", "arrives", "for", "US", "state", "visit"]
# ::ner_tags ["ORG", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "IN", "NNP", "NN", "NN"]
# ::lemmas ["Hollande", "arrive", "for", "US", "state", "visit"]
(a0 / arrive-01
      :ARG1 (v0 / visit-01
            :ARG0 p0
            :ARG1 (s0 / state
                  :location (c0 / country
                        :name (n1 / name
                              :op1 "US" ))))
      :ARG1 (p0 / person
            :name (n0 / name
                  :op1 "Hollande" )))

# ::snt President Obama warns Russia to stay out of Ukraine
# ::tokens ["President", "Obama", "warns", "Russia", "to", "stay", "out", "of", "Ukraine"]
# ::ner_tags ["O", "PERSON", "O", "GPE", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "B", "O", "B", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "NNP", "VBZ", "NNP", "TO", "VB", "IN", "IN", "NNP"]
# ::lemmas ["President", "Obama", "warn", "Russia", "to", "stay", "out", "of", "Ukraine"]
(w0 / warn-01
      :ARG1 (s0 / stay-01
            :ARG1 c0
            :ARG3 (o0 / out-06
                  :ARG1 c0
                  :ARG2 (c1 / country
                        :name (n2 / name
                              :op1 "Ukraine" ))))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Obama" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG2 (p1 / president)))
      :ARG2 (c0 / country
            :name (n1 / name
                  :op1 "Russia" )))

# ::snt Fed expected to maintain stimulus
# ::tokens ["Fed", "expected", "to", "maintain", "stimulus"]
# ::ner_tags ["ORG", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBD", "TO", "VB", "JJ"]
# ::lemmas ["Fed", "expect", "to", "maintain", "stimulus"]
(e0 / expect-01
      :ARG1 (m0 / maintain-01
            :ARG1 (s0 / stimulus)
            :ARG0 (g0 / government-organization
                  :name (n0 / name
                        :op1 "Fed" ))))

# ::snt The impact of sanctions on Russia
# ::tokens ["The", "impact", "of", "sanctions", "on", "Russia"]
# ::ner_tags ["O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "O", "O", "B"]
# ::pos_tags ["DT", "NN", "IN", "NNS", "IN", "NNP"]
# ::lemmas ["the", "impact", "of", "sanction", "on", "Russia"]
(i0 / impact-01
      :ARG1 (s0 / sanction-02
            :ARG1 (c0 / country
                  :name (n0 / name
                        :op1 "Russia" ))))

# ::snt How does world's cheapest car do in crash test?
# ::tokens ["How", "does", "world", "'s", "cheapest", "car", "do", "in", "crash", "test", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "VBZ", "NN", "POS", "JJS", "NN", "VB", "IN", "NN", "NN", "."]
# ::lemmas ["how", "do", "world", "'s", "cheap", "car", "do", "in", "crash", "test", "?"]
(d0 / do-02
      :ARG1 (c0 / car
            :ARG1-of (h0 / have-degree-91
                  :ARG2 c1
                  :ARG3 (m0 / most)
                  :ARG5 (c3 / car
                        :location (w0 / world)))
            :ARG1-of (c1 / cheap-02))
      :ARG0 (t0 / test-01
            :ARG1 (c2 / crash-01))
      :manner (a0 / amr-unknown))

# ::snt "Turkish PM Erdogan says ""duty"" to order crackdown on Istanbul park protest"
# ::tokens ["\"", "Turkish", "PM", "Erdogan", "says", "\"", "\"", "duty", "\"", "\"", "to", "order", "crackdown", "on", "Istanbul", "park", "protest", "\""]
# ::ner_tags ["O", "WORK_OF_ART", "WORK_OF_ART", "WORK_OF_ART", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["O", "B", "I", "I", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["``", "JJ", "NN", "NNP", "VBZ", "``", "``", "NN", "''", "''", "TO", "VB", "NN", "IN", "NNP", "NN", "NN", "''"]
# ::lemmas ["\"", "Turkish", "PM", "Erdogan", "say", "\"", "\"", "duty", "\"", "\"", "to", "order", "crackdown", "on", "Istanbul", "park", "protest", "\""]
(s0 / say-01
      :ARG1 (o0 / obligate-01
            :ARG2 (o1 / order-02
                  :ARG1 (c0 / crack-down-06
                        :ARG1 (p1 / protest-01
                              :ARG1 (c2 / city
                                    :name (n2 / name
                                          :op1 "Istanbul" ))))))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Erdogan" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c1 / country
                        :name (n1 / name
                              :op1 "Turkey" ))
                  :ARG2 (m0 / minister
                        :mod (p2 / prime)))))

# ::snt Top Asian News 1:25 p.m. GMT
# ::tokens ["Top", "Asian", "News", "1:25", "p.m.", "GMT"]
# ::ner_tags ["O", "NORP", "O", "TIME", "TIME", "O"]
# ::ner_iob ["O", "B", "O", "B", "I", "O"]
# ::pos_tags ["JJ", "NNP", "NNP", "CD", "NN", "NNP"]
# ::lemmas ["top", "Asian", "News", "1:25", "p.m.", "GMT"]
(b0 / broadcast-program
      :name (n0 / name
            :op1 "top" 
            :op2 "Asian" 
            :op3 "News" )
      :time (d0 / date-entity
            :time "1:25" 
            :timezone "GMT" ))

# ::snt Singapore shares open 0.06% lower on Tuesday
# ::tokens ["Singapore", "shares", "open", "0.06", "%", "lower", "on", "Tuesday"]
# ::ner_tags ["GPE", "O", "O", "PERCENT", "PERCENT", "O", "O", "DATE"]
# ::ner_iob ["B", "O", "O", "B", "I", "O", "O", "B"]
# ::pos_tags ["NNP", "NNS", "VBP", "CD", "NN", "JJR", "IN", "NNP"]
# ::lemmas ["Singapore", "share", "open", "0.06", "%", "low", "on", "Tuesday"]
(o0 / open-01
      :ARG1 (p0 / percentage-entity
            :value (l0 / low-04)
            :value (h0 / have-degree-91
                  :ARG2 l0
                  :ARG3 (m0 / more))
            :value 0.06 )
      :time (s0 / share
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Singapore" )))
      :time (d0 / date-entity
            :weekday (t0 / tuesday)))

# ::snt China treasury bond futures close mixed Wednesday
# ::tokens ["China", "treasury", "bond", "futures", "close", "mixed", "Wednesday"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "DATE"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "NNP", "NN", "NNS", "RB", "VBN", "NNP"]
# ::lemmas ["China", "treasury", "bond", "future", "close", "mix", "Wednesday"]
(c0 / close-10
      :ARG1 (f0 / future
            :mod (b0 / bond
                  :mod (t0 / treasury)
                  :poss (c1 / country
                        :name (n0 / name
                              :op1 "China" ))))
      :ARG2 (m0 / mix-01
            :ARG1 f0)
      :time (d0 / date-entity
            :weekday (w0 / wednesday)))

# ::snt 6.6-magnitude earthquake strikes off Indonesia
# ::tokens ["6.6-magnitude", "earthquake", "strikes", "off", "Indonesia"]
# ::ner_tags ["CARDINAL", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "B"]
# ::pos_tags ["CD", "NN", "VBZ", "RP", "NNP"]
# ::lemmas ["6.6-magnitude", "earthquake", "strike", "off", "Indonesia"]
(s0 / strike-01
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Indonesia" ))
      :ARG0 (e0 / earthquake
            :quant (s1 / seismic-quantity
                  :quant 8 )))

# ::snt Iran hardliners attack nuclear deal
# ::tokens ["Iran", "hardliners", "attack", "nuclear", "deal"]
# ::ner_tags ["GPE", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNS", "VBP", "JJ", "NN"]
# ::lemmas ["Iran", "hardliner", "attack", "nuclear", "deal"]
(a0 / attack-01
      :ARG1 (d0 / deal-01
            :ARG2 (n0 / nucleus))
      :ARG0 (p0 / person
            :mod (h0 / hardline)
            :mod (c0 / country
                  :name (n1 / name
                        :op1 "Iran" ))))

# ::snt Israeli security forces arrest 8 Palestinians in overnight West Bank sweeps
# ::tokens ["Israeli", "security", "forces", "arrest", "8", "Palestinians", "in", "overnight", "West", "Bank", "sweeps"]
# ::ner_tags ["NORP", "O", "O", "O", "CARDINAL", "NORP", "O", "O", "GPE", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "O", "B", "B", "O", "O", "B", "I", "O"]
# ::pos_tags ["JJ", "NN", "NNS", "VBP", "CD", "NNPS", "IN", "JJ", "NNP", "NNP", "VBZ"]
# ::lemmas ["Israeli", "security", "force", "arrest", "8", "Palestinians", "in", "overnight", "West", "Bank", "sweep"]
(a0 / arrest-01
      :ARG1 (p0 / person
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Palestine" ))
            :quant 8 )
      :ARG0 (f0 / force
            :mod (s1 / security)
            :mod (c1 / country
                  :name (n1 / name
                        :op1 "Israel" )))
      :time (s0 / sweep-01
            :ARG2 (c2 / country-region
                  :name (n2 / name
                        :op1 "West" 
                        :op2 "Bank" ))
            :time (o0 / overnight)))

# ::snt 19 killed in Tunis museum attack
# ::tokens ["19", "killed", "in", "Tunis", "museum", "attack"]
# ::ner_tags ["CARDINAL", "O", "O", "FAC", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O"]
# ::pos_tags ["CD", "VBN", "IN", "NNP", "NN", "NN"]
# ::lemmas ["19", "kill", "in", "Tunis", "museum", "attack"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant 19 )
      :location (c0 / city
            :name (n0 / name
                  :op1 "Tunis" ))
      :ARG2-of (a0 / attack-01
            :mod (m0 / museum)))

# ::snt Texas hospital worker tests positive for Ebola
# ::tokens ["Texas", "hospital", "worker", "tests", "positive", "for", "Ebola"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NN", "NN", "NNS", "JJ", "IN", "NNP"]
# ::lemmas ["Texas", "hospital", "worker", "test", "positive", "for", "Ebola"]
(t0 / test-01
      :ARG1 (p0 / person
            :ARG0-of (w0 / work-01
                  :ARG2 (h0 / hospital))
            :location (s0 / state
                  :name (n1 / name
                        :op1 "Texas" )))
      :ARG2 (p1 / positive)
      :ARG2 (d0 / disease
            :name (n0 / name
                  :op1 "Ebola" )))

# ::snt Turkey 'exploits' Syrian refugees
# ::tokens ["Turkey", "'", "exploits", "'", "Syrian", "refugees"]
# ::ner_tags ["GPE", "O", "O", "O", "NORP", "O"]
# ::ner_iob ["B", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "POS", "NNS", "''", "JJ", "NNS"]
# ::lemmas ["Turkey", "'", "exploit", "'", "Syrian", "refugee"]
(e0 / exploit-01
      :ARG1 (r0 / refugee
            :mod (c1 / country
                  :name (n1 / name
                        :op1 "Syria" )))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Turkey" )))

# ::snt West Ham beats Newcastle 2-0 in Premier League
# ::tokens ["West", "Ham", "beats", "Newcastle", "2", "-", "0", "in", "Premier", "League"]
# ::ner_tags ["GPE", "GPE", "O", "GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "NNP", "CD", "SYM", "CD", "IN", "NNP", "NNP"]
# ::lemmas ["West", "Ham", "beat", "Newcastle", "2", "-", "0", "in", "Premier", "League"]
(b0 / beat-03
      :ARG1 (t0 / team
            :name (n0 / name
                  :op1 "West" 
                  :op2 "Ham" ))
      :ARG0 (t1 / team
            :name (n1 / name
                  :op1 "Newcastle" ))
      :ARG2 (s0 / score-entity
            :op1 2 
            :op2 0 )
      :location (t2 / team
            :name (n2 / name
                  :op1 "Premier" 
                  :op2 "League" )))

# ::snt Israeli leader urges calm in Jerusalem
# ::tokens ["Israeli", "leader", "urges", "calm", "in", "Jerusalem"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "B"]
# ::pos_tags ["JJ", "NN", "VBZ", "JJ", "IN", "NNP"]
# ::lemmas ["Israeli", "leader", "urge", "calm", "in", "Jerusalem"]
(u0 / urge-01
      :ARG1 (p0 / person
            :ARG0-of (l0 / lead-02
                  :ARG1 (c2 / country
                        :name (n1 / name
                              :op1 "Israel" ))))
      :ARG2 (c0 / calm-03
            :location (c1 / city
                  :name (n0 / name
                        :op1 "Jerusalem" ))))

# ::snt Waiting for the next president
# ::tokens ["Waiting", "for", "the", "next", "president"]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["VBG", "IN", "DT", "JJ", "NN"]
# ::lemmas ["wait", "for", "the", "next", "president"]
(w0 / wait-01
      :ARG2 (p0 / person
            :mod (n0 / next)
            :ARG0-of (h0 / have-org-role-91
                  :ARG2 (p1 / president))))

# ::snt Egypt sentences Al Jazeera journalists to jail
# ::tokens ["Egypt", "sentences", "Al", "Jazeera", "journalists", "to", "jail"]
# ::ner_tags ["GPE", "O", "ORG", "ORG", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "I", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "NNP", "NNP", "NNS", "IN", "NN"]
# ::lemmas ["Egypt", "sentence", "Al", "Jazeera", "journalist", "to", "jail"]
(s0 / sentence-01
      :ARG1 (j0 / journalist
            :name (n0 / name
                  :op1 "Egypt" ))
      :ARG0 (c0 / country)
      :ARG2 (j1 / jail-01
            :ARG1 (n1 / name
                  :op1 "Al-Jazeera" )))

# ::snt Kurds see Turkey impeding Islamic State fight
# ::tokens ["Kurds", "see", "Turkey", "impeding", "Islamic", "State", "fight"]
# ::ner_tags ["NORP", "O", "GPE", "O", "NORP", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "B", "O", "O"]
# ::pos_tags ["NNPS", "VBP", "NNP", "VBG", "NNP", "NNP", "NN"]
# ::lemmas ["Kurds", "see", "Turkey", "impede", "Islamic", "State", "fight"]
(s0 / see-01
      :ARG1 (p0 / person
            :mod (e0 / ethnic-group
                  :name (n0 / name
                        :op1 "Kurd" )))
      :ARG1 (i0 / impede-01
            :ARG1 (f0 / fight-01
                  :ARG0 (s1 / state
                        :mod (r0 / religious-group
                              :name (n2 / name
                                    :op1 "Islamic" ))))
            :ARG0 (c0 / country
                  :name (n1 / name
                        :op1 "Turkey" ))))

# ::snt Montenegrin police fire teargas to disperse opposition
# ::tokens ["Montenegrin", "police", "fire", "teargas", "to", "disperse", "opposition"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "VBP", "NN", "TO", "VB", "NN"]
# ::lemmas ["Montenegrin", "police", "fire", "teargas", "to", "disperse", "opposition"]
(f0 / fire-01
      :ARG1 (t0 / teargas)
      :ARG0 (p0 / police
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Georgia" )))
      :purpose (d0 / disperse-01
            :ARG0 p0
            :ARG1 (o0 / oppose-01)))

# ::snt Ashya King's parents freed from jail in Spain
# ::tokens ["Ashya", "King", "'s", "parents", "freed", "from", "jail", "in", "Spain"]
# ::ner_tags ["PERSON", "PERSON", "PERSON", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "I", "I", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "NNP", "POS", "NNS", "VBD", "IN", "NN", "IN", "NNP"]
# ::lemmas ["Ashya", "King", "'s", "parent", "free", "from", "jail", "in", "Spain"]
(f0 / free-01
      :ARG1 (p0 / person
            :ARG0-of (h0 / have-rel-role-91
                  :ARG1 (p1 / person
                        :name (n1 / name
                              :op1 "Ashya" 
                              :op2 "King" ))
                  :ARG2 (p2 / parent)))
      :ARG2 (j0 / jail
            :location (c0 / country
                  :name (n0 / name
                        :op1 "Spain" ))))

# ::snt US ramps up response to Ebola crisis
# ::tokens ["US", "ramps", "up", "response", "to", "Ebola", "crisis"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "RP", "NN", "IN", "NNP", "NN"]
# ::lemmas ["US", "ramp", "up", "response", "to", "Ebola", "crisis"]
(u0 / upgrade-01
      :ARG1 (r0 / respond-01
            :ARG1 (c1 / crisis
                  :mod (d0 / disease
                        :name (n1 / name
                              :op1 "Ebola" ))))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "US" )))

# ::snt Thousands of Russians stranded abroad
# ::tokens ["Thousands", "of", "Russians", "stranded", "abroad"]
# ::ner_tags ["CARDINAL", "O", "NORP", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O"]
# ::pos_tags ["NNS", "IN", "NNPS", "VBN", "RB"]
# ::lemmas ["Thousands", "of", "Russians", "strand", "abroad"]
(s0 / strand-01
      :ARG1 (p0 / person
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Russia" ))
            :quant (m0 / multiple
                  :op1 1000 ))
      :location (a0 / abroad))

# ::snt Menendez faces possible corruption charges
# ::tokens ["Menendez", "faces", "possible", "corruption", "charges"]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "JJ", "NN", "NNS"]
# ::lemmas ["Menendez", "face", "possible", "corruption", "charge"]
(f0 / face-01
      :ARG1 (c0 / charge-05
            :ARG1 p0
            :ARG1-of (c1 / corrupt-01
                  :ARG1-of (p1 / possible-01)))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Menendez" )))

# ::snt US scientists praise Iran nuclear deal
# ::tokens ["US", "scientists", "praise", "Iran", "nuclear", "deal"]
# ::ner_tags ["GPE", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "NNS", "VBP", "NNP", "JJ", "NN"]
# ::lemmas ["US", "scientist", "praise", "Iran", "nuclear", "deal"]
(p0 / praise-01
      :ARG1 (d0 / deal-01
            :ARG0 (c0 / country
                  :name (n1 / name
                        :op1 "Iran" ))
            :ARG2 (n0 / nucleus))
      :ARG0 (s0 / scientist
            :mod (c1 / country
                  :name (n2 / name
                        :op1 "US" ))))

# ::snt EPL clubs out to avoid Champions League woes
# ::tokens ["EPL", "clubs", "out", "to", "avoid", "Champions", "League", "woes"]
# ::ner_tags ["ORG", "O", "O", "O", "O", "ORG", "ORG", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "B", "I", "O"]
# ::pos_tags ["NNP", "VBZ", "RP", "TO", "VB", "NNPS", "NNP", "NNS"]
# ::lemmas ["EPL", "club", "out", "to", "avoid", "Champions", "League", "woe"]
(g0 / go-out-17
      :purpose (a0 / avoid-01
            :ARG0 c0
            :ARG1 (w0 / woe
                  :poss (l0 / league
                        :name (n1 / name
                              :op1 "Champions" 
                              :op2 "League" ))))
      :ARG0 (c0 / company
            :name (n0 / name
                  :op1 "EPL" ))
      :degree (o0 / out))

# ::snt Iran arrests several spies near nuclear plant
# ::tokens ["Iran", "arrests", "several", "spies", "near", "nuclear", "plant"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "JJ", "NNS", "IN", "JJ", "NN"]
# ::lemmas ["Iran", "arrest", "several", "spy", "near", "nuclear", "plant"]
(a0 / arrest-01
      :ARG1 (p0 / person
            :quant (n0 / near-02
                  :ARG2 (p1 / plant
                        :mod (n2 / nucleus)))
            :ARG0-of (s0 / spy-01)
            :quant (s1 / several))
      :ARG0 (c0 / country
            :name (n1 / name
                  :op1 "Iran" )))

# ::snt Press awash with Nigeria's general elections
# ::tokens ["Press", "awash", "with", "Nigeria", "'s", "general", "elections"]
# ::ner_tags ["O", "O", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NN", "NN", "IN", "NNP", "POS", "JJ", "NNS"]
# ::lemmas ["press", "awash", "with", "Nigeria", "'s", "general", "election"]
(a0 / awash
      :mod (p0 / press)
      :prep-with (e0 / elect-01
            :ARG1-of (g0 / general-02)
            :location (c0 / country
                  :name (n0 / name
                        :op1 "Nigeria" ))))

# ::snt South Korea reports 14th Mers death, 12 new cases
# ::tokens ["South", "Korea", "reports", "14th", "Mers", "death", ",", "12", "new", "cases"]
# ::ner_tags ["GPE", "GPE", "O", "O", "WORK_OF_ART", "O", "O", "CARDINAL", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "B", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "NNP", "VBZ", "JJ", "NNP", "NN", ",", "CD", "JJ", "NNS"]
# ::lemmas ["South", "Korea", "report", "14th", "Mers", "death", ",", "12", "new", "case"]
(r0 / report-01
      :ARG1 (d0 / die-01
            :ARG1 (c1 / cause-01
                  :ARG1 (c2 / case-04
                        :ARG1-of (n1 / new-01)
                        :quant 12 ))
            :ARG1 (o0 / ordinal-entity
                  :value 14 ))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "South" 
                  :op2 "Korea" )))

# ::snt South Korean woman in contact with MERS patient dies
# ::tokens ["South", "Korean", "woman", "in", "contact", "with", "MERS", "patient", "dies"]
# ::ner_tags ["NORP", "NORP", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "JJ", "NN", "IN", "NN", "IN", "NNP", "NN", "NNS"]
# ::lemmas ["South", "Korean", "woman", "in", "contact", "with", "MERS", "patient", "die"]
(c0 / contact-01
      :ARG1 (w0 / woman
            :location (c1 / country
                  :name (n0 / name
                        :op1 "South" 
                        :op2 "Korea" )))
      :ARG1 (p0 / patient
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (m0 / member))))

# ::snt Observatory says Russian air strikes kill 45 in Syria
# ::tokens ["Observatory", "says", "Russian", "air", "strikes", "kill", "45", "in", "Syria"]
# ::ner_tags ["ORG", "O", "NORP", "O", "O", "O", "CARDINAL", "O", "GPE"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "B", "O", "B"]
# ::pos_tags ["NN", "VBZ", "JJ", "NN", "NNS", "VBP", "CD", "IN", "NNP"]
# ::lemmas ["Observatory", "say", "Russian", "air", "strike", "kill", "45", "in", "Syria"]
(s0 / say-01
      :ARG1 (k0 / kill-01
            :ARG1 (p0 / person
                  :quant 45 )
            :ARG0 (s1 / strike-01
                  :ARG0 (c1 / country
                        :name (n2 / name
                              :op1 "Russia" ))
                  :ARG2 (a0 / air))
            :location (c0 / country
                  :name (n1 / name
                        :op1 "Syria" )))
      :ARG0 (o0 / organization
            :name (n0 / name
                  :op1 "Observatory" )))

# ::snt Why Cyprus backs Cameron's push for UK air strikes in Syria
# ::tokens ["Why", "Cyprus", "backs", "Cameron", "'s", "push", "for", "UK", "air", "strikes", "in", "Syria"]
# ::ner_tags ["O", "PERSON", "O", "PERSON", "O", "O", "O", "GPE", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "B", "O", "B", "O", "O", "O", "B", "O", "O", "O", "B"]
# ::pos_tags ["WRB", "NNP", "VBZ", "NNP", "POS", "NN", "IN", "NNP", "NN", "NNS", "IN", "NNP"]
# ::lemmas ["why", "Cyprus", "back", "Cameron", "'s", "push", "for", "UK", "air", "strike", "in", "Syria"]
(b0 / back-01
      :ARG1 (p0 / push-02
            :ARG1 (s0 / strike-01
                  :ARG0 (c2 / country
                        :name (n2 / name
                              :op1 "UK" ))
                  :ARG2 (a1 / air))
            :ARG0 (p1 / person
                  :name (n1 / name
                        :op1 "Cameron" )))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Cyprus" ))
      :ARG1-of (c1 / cause-01
            :ARG0 (a0 / amr-unknown)))

# ::snt Two-state solution between Palestinians, Israel pie in sky
# ::tokens ["Two", "-", "state", "solution", "between", "Palestinians", ",", "Israel", "pie", "in", "sky"]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "NORP", "O", "GPE", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "B", "O", "B", "O", "O", "O"]
# ::pos_tags ["CD", "HYPH", "NN", "NN", "IN", "NNPS", ",", "NNP", "NN", "IN", "NN"]
# ::lemmas ["Two", "-", "state", "solution", "between", "Palestinians", ",", "Israel", "pie", "in", "sky"]
(s0 / solve-01
      :ARG0 (s1 / state
            :quant 2 )
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Israel" )
            :location (s2 / side-01))
      :ARG2 (p0 / person
            :mod (c1 / country
                  :name (n1 / name
                        :op1 "Palestine" ))))

# ::snt Lawmakers from both sides express outrage at Secret Service
# ::tokens ["Lawmakers", "from", "both", "sides", "express", "outrage", "at", "Secret", "Service"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "ORG", "ORG"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "I"]
# ::pos_tags ["NNS", "IN", "DT", "NNS", "VBP", "NN", "IN", "NNP", "NNP"]
# ::lemmas ["lawmaker", "from", "both", "side", "express", "outrage", "at", "Secret", "Service"]
(e0 / express-01
      :ARG1 (o0 / outrage-01
            :ARG1 p0
            :ARG0 (g0 / government-organization
                  :name (n0 / name
                        :op1 "Secret" 
                        :op2 "Service" )))
      :ARG0 (p0 / person
            :ARG0-of (l0 / legislate-01)
            :source (s0 / side
                  :mod (b0 / both))))

# ::snt UN chief condemns attack against peacekeepers in Mali
# ::tokens ["UN", "chief", "condemns", "attack", "against", "peacekeepers", "in", "Mali"]
# ::ner_tags ["ORG", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "JJ", "VBZ", "NN", "IN", "NNS", "IN", "NNP"]
# ::lemmas ["UN", "chief", "condemn", "attack", "against", "peacekeeper", "in", "Mali"]
(c0 / condemn-01
      :ARG1 (a0 / attack-01
            :ARG1 (p1 / peace)
            :location (c1 / country
                  :name (n0 / name
                        :op1 "Mali" )))
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (o0 / organization
                        :name (n1 / name
                              :op1 "UN" ))
                  :ARG2 (c2 / chief))))

# ::snt More than 60 killed at Iraq funeral
# ::tokens ["More", "than", "60", "killed", "at", "Iraq", "funeral"]
# ::ner_tags ["CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "I", "I", "O", "O", "B", "O"]
# ::pos_tags ["JJR", "IN", "CD", "VBN", "IN", "NNP", "NN"]
# ::lemmas ["More", "than", "60", "kill", "at", "Iraq", "funeral"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant (m0 / more-than
                  :op1 60 ))
      :location (f0 / funeral
            :location (c0 / country
                  :name (n0 / name
                        :op1 "Iraq" ))))

# ::snt US: Russia Massing Troops on Ukraine Border
# ::tokens ["US", ":", "Russia", "Massing", "Troops", "on", "Ukraine", "Border"]
# ::ner_tags ["GPE", "O", "GPE", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", ":", "NNP", "VBG", "NNS", "IN", "NNP", "NNP"]
# ::lemmas ["US", ":", "Russia", "mass", "troop", "on", "Ukraine", "Border"]
(a0 / and
      :op1 (c0 / country
            :name (n0 / name
                  :op1 "US" ))
      :op2 (c1 / country
            :name (n1 / name
                  :op1 "Russia" ))
      :op3 (c2 / country
            :name (n2 / name
                  :op1 "Ukraine" )))

# ::snt Polling stations open at Ukrainian presidential election
# ::tokens ["Polling", "stations", "open", "at", "Ukrainian", "presidential", "election"]
# ::ner_tags ["O", "O", "O", "O", "NORP", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["NN", "NNS", "JJ", "IN", "JJ", "JJ", "NN"]
# ::lemmas ["polling", "station", "open", "at", "Ukrainian", "presidential", "election"]
(o0 / open-01
      :ARG1 (s0 / station
            :mod (p0 / poll-01))
      :time (e0 / elect-01
            :ARG1 (c0 / country
                  :name (n0 / name
                        :op1 "Ukraine" ))
            :ARG2 (p1 / person
                  :ARG0-of (h0 / have-org-role-91
                        :ARG2 (p2 / president)))))

# ::snt New major earthquake rocks southwest Pakistan
# ::tokens ["New", "major", "earthquake", "rocks", "southwest", "Pakistan"]
# ::ner_tags ["O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "O", "O", "B"]
# ::pos_tags ["JJ", "JJ", "NN", "NNS", "VBP", "NNP"]
# ::lemmas ["new", "major", "earthquake", "rock", "southwest", "Pakistan"]
(r0 / rock
      :location (s0 / southwest
            :part-of (c0 / country
                  :name (n1 / name
                        :op1 "Pakistan" )))
      :ARG1-of (e0 / earthquake
            :ARG1-of (n0 / new-01)
            :ARG1-of (m0 / major-02)))

# ::snt Two killed, seventeen injured in Raiwind road accident
# ::tokens ["Two", "killed", ",", "seventeen", "injured", "in", "Raiwind", "road", "accident"]
# ::ner_tags ["CARDINAL", "O", "O", "CARDINAL", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "B", "O", "O"]
# ::pos_tags ["CD", "VBN", ",", "CD", "VBN", "IN", "NNP", "NN", "NN"]
# ::lemmas ["Two", "kill", ",", "seventeen", "injure", "in", "Raiwind", "road", "accident"]
(a0 / and
      :op1 (k0 / kill-01
            :ARG1 (p0 / person
                  :quant 2 ))
      :op2 (i0 / injure-01
            :ARG1 (p1 / person
                  :quant 7 ))
      :location (a1 / accident
            :mod (r0 / road
                  :name (n0 / name
                        :op1 "Raiwind" ))))

# ::snt 2 dead, 8 injured in central Israel traffic accident
# ::tokens ["2", "dead", ",", "8", "injured", "in", "central", "Israel", "traffic", "accident"]
# ::ner_tags ["CARDINAL", "O", "O", "CARDINAL", "O", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["CD", "JJ", ",", "CD", "VBN", "IN", "JJ", "NNP", "NN", "NN"]
# ::lemmas ["2", "dead", ",", "8", "injure", "in", "central", "Israel", "traffic", "accident"]
(a0 / and
      :op1 (d0 / die-01
            :ARG1 (p0 / person
                  :quant 2 ))
      :op2 (i0 / injure-01
            :ARG1 (p1 / person
                  :quant 8 ))
      :location (a1 / accident
            :mod (t0 / traffic)
            :location (c0 / center
                  :part-of (c1 / country
                        :name (n0 / name
                              :op1 "Israel" )))))

# ::snt Sweden recognizes Palestinian state
# ::tokens ["Sweden", "recognizes", "Palestinian", "state"]
# ::ner_tags ["GPE", "O", "NORP", "O"]
# ::ner_iob ["B", "O", "B", "O"]
# ::pos_tags ["NNP", "VBZ", "JJ", "NN"]
# ::lemmas ["Sweden", "recognize", "Palestinian", "state"]
(r0 / recognize-01
      :ARG1 (s0 / state
            :mod (c1 / country
                  :name (n1 / name
                        :op1 "Palestine" )))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Sweden" )))

# ::snt Five killed in Saudi Arabia shooting
# ::tokens ["Five", "killed", "in", "Saudi", "Arabia", "shooting"]
# ::ner_tags ["CARDINAL", "O", "O", "GPE", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "B", "I", "O"]
# ::pos_tags ["CD", "VBN", "IN", "NNP", "NNP", "VBG"]
# ::lemmas ["Five", "kill", "in", "Saudi", "Arabia", "shoot"]
(k0 / kill-01
      :ARG1 (p0 / person
            :ARG0-of (s0 / shoot-02)
            :quant 5 )
      :location (c0 / country
            :name (n0 / name
                  :op1 "Saudi" 
                  :op2 "Arabia" )))

# ::snt 38 IS militants killed in clashes, air strikes in Iraq
# ::tokens ["38", "IS", "militants", "killed", "in", "clashes", ",", "air", "strikes", "in", "Iraq"]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["CD", "NN", "NNS", "VBN", "IN", "NNS", ",", "NN", "NNS", "IN", "NNP"]
# ::lemmas ["38", "is", "militant", "kill", "in", "clash", ",", "air", "strike", "in", "Iraq"]
(k0 / kill-01
      :ARG1 (p0 / person
            :ARG0-of (s0 / strike-01
                  :location (c2 / country
                        :name (n0 / name
                              :op1 "Iraq" ))
                  :mod (a0 / air))
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c3 / criminal-organization
                        :name (n1 / name
                              :op1 "is" ))
                  :ARG2 (m0 / militant))
            :quant 38 )
      :ARG1-of (c0 / cause-01
            :ARG0 (c1 / clash-01)))

# ::snt Funeral of MH17 victim Liam Sweeney takes place in Newcastle
# ::tokens ["Funeral", "of", "MH17", "victim", "Liam", "Sweeney", "takes", "place", "in", "Newcastle"]
# ::ner_tags ["O", "O", "O", "O", "PERSON", "PERSON", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "O", "B", "I", "O", "O", "O", "B"]
# ::pos_tags ["NN", "IN", "NNP", "NN", "NNP", "NNP", "VBZ", "NN", "IN", "NNP"]
# ::lemmas ["funeral", "of", "MH17", "victim", "Liam", "Sweeney", "take", "place", "in", "Newcastle"]
(b0 / be-located-at-91
      :ARG1 (f0 / funeral
            :poss (p0 / person
                  :mod (v0 / victimize-01
                        :ARG0 (p1 / person
                              :name (n2 / name
                                    :op1 "MH17" )))
                  :name (n1 / name
                        :op1 "Liam" 
                        :op2 "Sweeney" )))
      :ARG2 (c0 / city
            :name (n0 / name
                  :op1 "Newcastle" )))

# ::snt India's top court orders investigation into job scam, deaths
# ::tokens ["India", "'s", "top", "court", "orders", "investigation", "into", "job", "scam", ",", "deaths"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "POS", "JJ", "NN", "NNS", "NN", "IN", "NN", "NN", ",", "NNS"]
# ::lemmas ["India", "'s", "top", "court", "order", "investigation", "into", "job", "scam", ",", "death"]
(o0 / order-01
      :ARG1 (c0 / court
            :mod (c1 / country
                  :name (n0 / name
                        :op1 "India" ))
            :mod (t0 / top))
      :ARG2 (i0 / investigate-01
            :ARG1 (d0 / die-01)
            :ARG1 (s0 / scam-01
                  :ARG1 (j0 / job))))

# ::snt 'Bookkeeper of Auschwitz' Sentenced to Four Years in Prison
# ::tokens ["'", "Bookkeeper", "of", "Auschwitz", "'", "Sentenced", "to", "Four", "Years", "in", "Prison"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "DATE", "DATE", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B", "I", "O", "O"]
# ::pos_tags ["``", "NNP", "IN", "NNP", "''", "VBN", "IN", "CD", "NNS", "IN", "NN"]
# ::lemmas ["'", "Bookkeeper", "of", "Auschwitz", "'", "sentence", "to", "Four", "Years", "in", "prison"]
(s0 / sentence-01
      :ARG1 (p0 / person
            :ARG0-of (k0 / keep-01
                  :ARG1 (p1 / park
                        :name (n0 / name
                              :op1 "Auschwitz" ))))
      :ARG2 (i0 / imprison-01
            :ARG2 (t0 / temporal-quantity
                  :quant 4 
                  :unit (y0 / year))))

# ::snt Cameron to hold talks with Sturgeon on UK future
# ::tokens ["Cameron", "to", "hold", "talks", "with", "Sturgeon", "on", "UK", "future"]
# ::ner_tags ["PERSON", "O", "O", "O", "O", "PERSON", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "B", "O", "B", "O"]
# ::pos_tags ["NNP", "TO", "VB", "NNS", "IN", "NNP", "IN", "NNP", "NN"]
# ::lemmas ["Cameron", "to", "hold", "talk", "with", "Sturgeon", "on", "UK", "future"]
(h0 / hold-04
      :ARG1 (t0 / talk-01
            :ARG0 p0
            :ARG1 (p1 / person
                  :name (n1 / name
                        :op1 "Sturgeon" ))
            :ARG1 (f0 / future
                  :mod (c0 / country
                        :name (n2 / name
                              :op1 "UK" ))))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Cameron" )))

# ::snt US Senator Ted Cruz to announce presidential bid
# ::tokens ["US", "Senator", "Ted", "Cruz", "to", "announce", "presidential", "bid"]
# ::ner_tags ["GPE", "O", "PERSON", "PERSON", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "I", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NNP", "NNP", "TO", "VB", "JJ", "NN"]
# ::lemmas ["US", "Senator", "Ted", "Cruz", "to", "announce", "presidential", "bid"]
(a0 / announce-01
      :ARG1 (b0 / bid-01
            :ARG1 (p1 / president))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Ted" 
                  :op2 "Cruz" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c0 / country
                        :name (n1 / name
                              :op1 "US" ))
                  :ARG2 (s0 / senator))))

# ::snt Tour De France Pack Sets off for Stage 15
# ::tokens ["Tour", "De", "France", "Pack", "Sets", "off", "for", "Stage", "15"]
# ::ner_tags ["PERSON", "PERSON", "O", "O", "O", "O", "O", "LAW", "LAW"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O", "B", "I"]
# ::pos_tags ["NNP", "NNP", "NNP", "NNP", "VBZ", "RP", "IN", "NN", "CD"]
# ::lemmas ["Tour", "De", "France", "Pack", "set", "off", "for", "Stage", "15"]
(s0 / set-08
      :ARG1 (S0 / Stage
            :mod 15 )
      :ARG1 (t0 / team
            :name (n0 / name
                  :op1 "Tour" 
                  :op2 "De" 
                  :op3 "France" )))

# ::snt Spanish bulls gore seven to death
# ::tokens ["Spanish", "bulls", "gore", "seven", "to", "death"]
# ::ner_tags ["NORP", "O", "O", "CARDINAL", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O"]
# ::pos_tags ["NNP", "NNS", "VBP", "CD", "IN", "NN"]
# ::lemmas ["Spanish", "bull", "gore", "seven", "to", "death"]
(g0 / go-02
      :ARG0 (p0 / person
            :quant 7 )
      :ARG0 (d0 / die-01)
      :ARG0 (b0 / bullshit
            :mod (c0 / country
                  :name (n0 / name
                        :op1 "Spain" ))))

# ::snt China keeps an eye on visiting tiger freed by Russian President
# ::tokens ["China", "keeps", "an", "eye", "on", "visiting", "tiger", "freed", "by", "Russian", "President"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "O", "O", "NORP", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "VBZ", "DT", "NN", "IN", "VBG", "NN", "VBN", "IN", "JJ", "NNP"]
# ::lemmas ["China", "keep", "an", "eye", "on", "visit", "tiger", "free", "by", "Russian", "President"]
(k0 / keep-02
      :ARG1 (h0 / have-eye-on-05
            :ARG0 c0
            :ARG1 (t0 / tiger
                  :ARG1-of (f0 / free-01
                        :ARG0 (p0 / person
                              :ARG0-of (h1 / have-org-role-91
                                    :ARG1 (c1 / country
                                          :name (n1 / name
                                                :op1 "Russia" ))
                                    :ARG2 (p1 / president))))
                  :ARG0-of (v0 / visit-01)))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "China" )))

# ::snt Belarus tightens security along the border with Ukraine
# ::tokens ["Belarus", "tightens", "security", "along", "the", "border", "with", "Ukraine"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "VBZ", "NN", "IN", "DT", "NN", "IN", "NNP"]
# ::lemmas ["Belarus", "tighten", "security", "along", "the", "border", "with", "Ukraine"]
(t0 / tighten-01
      :ARG1 (s0 / security)
      :ARG0 (c0 / country
            :ARG1-of (b0 / border-01
                  :ARG2 (c1 / country
                        :name (n1 / name
                              :op1 "Ukraine" )))
            :name (n0 / name
                  :op1 "Belarus" ))
      :location (a0 / along
            :op1 b0))

# ::snt Obama vows to save Iraqis stranded on mountain
# ::tokens ["Obama", "vows", "to", "save", "Iraqis", "stranded", "on", "mountain"]
# ::ner_tags ["O", "O", "O", "O", "NORP", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NN", "VBZ", "TO", "VB", "NNPS", "VBN", "IN", "NN"]
# ::lemmas ["obama", "vow", "to", "save", "Iraqis", "strand", "on", "mountain"]
(v0 / vow-01
      :ARG1 (s0 / save-02
            :ARG0 p0
            :ARG1 (p1 / person
                  :mod (c0 / country
                        :name (n1 / name
                              :op1 "Iraq" ))
                  :ARG1-of (s1 / strand-01
                        :location (m0 / mountain))))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Obama" )))

# ::snt Police abandon posts in Lesotho, fear for lives
# ::tokens ["Police", "abandon", "posts", "in", "Lesotho", ",", "fear", "for", "lives"]
# ::ner_tags ["O", "O", "O", "O", "GPE", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["NNS", "VBP", "NNS", "IN", "NNP", ",", "NN", "IN", "NNS"]
# ::lemmas ["police", "abandon", "post", "in", "Lesotho", ",", "fear", "for", "life"]
(a0 / and
      :op1 (a1 / abandon-01
            :ARG1 (p0 / post
                  :location (p2 / province
                        :name (n0 / name
                              :op1 "Lesotho" )))
            :ARG0 (p1 / police))
      :op2 (f0 / fear-01
            :ARG0 p1
            :ARG1 (l0 / life)))

# ::snt UK says investigating 2 suspected MERS cases
# ::tokens ["UK", "says", "investigating", "2", "suspected", "MERS", "cases"]
# ::ner_tags ["GPE", "O", "O", "CARDINAL", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "VBG", "CD", "VBN", "NNP", "NNS"]
# ::lemmas ["UK", "say", "investigate", "2", "suspect", "MERS", "case"]
(s0 / say-01
      :ARG1 (i0 / investigate-01
            :ARG0 c0
            :ARG1 (c1 / case-03
                  :ARG1-of (s1 / suspect-01)
                  :quant 2 
                  :ARG2 (o0 / organization
                        :name (n1 / name
                              :op1 "MERS" ))))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "UK" )))

# ::snt Philippines saves 100 after ferry sinks
# ::tokens ["Philippines", "saves", "100", "after", "ferry", "sinks"]
# ::ner_tags ["GPE", "O", "CARDINAL", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", "CD", "IN", "NN", "NNS"]
# ::lemmas ["Philippines", "save", "100", "after", "ferry", "sink"]
(s0 / save-01
      :ARG1 100 
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Philippines" ))
      :time (a0 / after
            :op1 (s1 / sink-01)))

# ::snt Johor crowns its fifth Sultan
# ::tokens ["Johor", "crowns", "its", "fifth", "Sultan"]
# ::ner_tags ["ORG", "O", "O", "ORDINAL", "O"]
# ::ner_iob ["B", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "VBZ", "PRP$", "JJ", "NNP"]
# ::lemmas ["Johor", "crown", "its", "fifth", "Sultan"]
(c0 / commemorate-01
      :ARG1 (p0 / person
            :ord (o0 / ordinal-entity
                  :value 5 )
            :ARG0-of (n0 / name
                  :ARG1 c1
                  :op1 "Johor" ))
      :ARG0 (c1 / city))

# ::snt Iran reiterates support for Iraq, Syria
# ::tokens ["Iran", "reiterates", "support", "for", "Iraq", ",", "Syria"]
# ::ner_tags ["GPE", "O", "O", "O", "GPE", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "B", "O", "B"]
# ::pos_tags ["NNP", "VBZ", "NN", "IN", "NNP", ",", "NNP"]
# ::lemmas ["Iran", "reiterate", "support", "for", "Iraq", ",", "Syria"]
(r0 / reiterate-01
      :ARG1 (s0 / support-01
            :ARG0 c0
            :ARG1 (a0 / and
                  :op1 (c1 / country
                        :name (n1 / name
                              :op1 "Iraq" ))
                  :op2 (c2 / country
                        :name (n2 / name
                              :op1 "Syria" ))))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Iran" )))

# ::snt Poland president loses to challenger
# ::tokens ["Poland", "president", "loses", "to", "challenger"]
# ::ner_tags ["GPE", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NN", "VBZ", "TO", "VB"]
# ::lemmas ["Poland", "president", "lose", "to", "challenger"]
(l0 / lose-03
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c1 / country
                        :name (n0 / name
                              :op1 "Poland" ))
                  :ARG2 (p2 / president)))
      :ARG0 (p1 / person
            :ARG0-of (c0 / challenge-01)))

# ::snt Palestinian official slams Israel's stone-throwing bill
# ::tokens ["Palestinian", "official", "slams", "Israel", "'s", "stone", "-", "throwing", "bill"]
# ::ner_tags ["NORP", "O", "O", "GPE", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NN", "VBZ", "NNP", "POS", "NN", "HYPH", "VBG", "NN"]
# ::lemmas ["Palestinian", "official", "slam", "Israel", "'s", "stone", "-", "throw", "bill"]
(s0 / slam-02
      :ARG1 (b0 / bill
            :mod (t0 / throw-01
                  :ARG1 (s1 / stone))
            :poss (c0 / country
                  :name (n0 / name
                        :op1 "Israel" )))
      :ARG0 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c1 / country
                        :name (n1 / name
                              :op1 "Palestine" ))
                  :ARG2 (o0 / official))))

# ::snt University of Florida frat accused of spitting on wounded war veterans
# ::tokens ["University", "of", "Florida", "frat", "accused", "of", "spitting", "on", "wounded", "war", "veterans"]
# ::ner_tags ["ORG", "ORG", "ORG", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "I", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "IN", "NNP", "NN", "VBN", "IN", "VBG", "IN", "VBN", "NN", "NNS"]
# ::lemmas ["University", "of", "Florida", "frat", "accuse", "of", "spit", "on", "wound", "war", "veteran"]
(a0 / accuse-01
      :ARG1 (f0 / frat
            :mod (u0 / university
                  :name (n0 / name
                        :op1 "University" 
                        :op2 "of" 
                        :op3 "Florida" )))
      :ARG2 (s0 / spit-01
            :ARG0 f0
            :ARG2 (v0 / veteran
                  :mod (w0 / war)
                  :ARG1-of (w1 / wound-01))))

# ::snt PM Narendra Modi speaks of non-discrimination and equality
# ::tokens ["PM", "Narendra", "Modi", "speaks", "of", "non", "-", "discrimination", "and", "equality"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NNP", "VBZ", "IN", "JJ", "JJ", "NN", "CC", "NN"]
# ::lemmas ["PM", "Narendra", "Modi", "speak", "of", "non", "-", "discrimination", "and", "equality"]
(s0 / speak-01
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Narendra" 
                  :op2 "Modi" )
            :ARG0-of (h0 / have-org-role-91
                  :ARG2 (m0 / minister
                        :mod (p1 / prime))))
      :ARG1 (a0 / and
            :op1 (d0 / discriminate-02
                  :polarity - )
            :op2 (e0 / equal-01)))

# ::snt Myanmar Struggles to Finalize Voter Lists for Sunday Polls
# ::tokens ["Myanmar", "Struggles", "to", "Finalize", "Voter", "Lists", "for", "Sunday", "Polls"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O", "DATE", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["NNP", "NNP", "TO", "VB", "NNP", "NNPS", "IN", "NNP", "NNP"]
# ::lemmas ["Myanmar", "Struggles", "to", "finalize", "Voter", "Lists", "for", "Sunday", "Polls"]
(s0 / struggle-01
      :ARG1 (c0 / country
            :name (n0 / name
                  :op1 "Myanmar" ))
      :ARG2 (f0 / finalize-01
            :ARG0 c0
            :ARG1 (l0 / list-01
                  :ARG1 (p0 / person
                        :ARG0-of (v0 / vote-01))
                  :purpose (p1 / poll-01
                        :time (d0 / date-entity
                              :weekday (s1 / sunday))))))

# ::snt Pakistan protests ceasefire violations by India
# ::tokens ["Pakistan", "protests", "ceasefire", "violations", "by", "India"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "O", "O", "O", "B"]
# ::pos_tags ["NNP", "NNS", "VBP", "NNS", "IN", "NNP"]
# ::lemmas ["Pakistan", "protest", "ceasefire", "violation", "by", "India"]
(p0 / protest-01
      :ARG1 (v0 / violate-01
            :ARG1 (f0 / fire-01))
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "Pakistan" ))
      :ARG1 (c1 / country
            :name (n1 / name
                  :op1 "India" )))

# ::snt North Korea Delegation Meets With South Korean Officials
# ::tokens ["North", "Korea", "Delegation", "Meets", "With", "South", "Korean", "Officials"]
# ::ner_tags ["GPE", "GPE", "O", "O", "O", "NORP", "NORP", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "B", "I", "O"]
# ::pos_tags ["NNP", "NNP", "NNP", "VBZ", "IN", "JJ", "JJ", "NNS"]
# ::lemmas ["North", "Korea", "Delegation", "meet", "with", "South", "Korean", "official"]
(m0 / meet-03
      :ARG1 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (c0 / country
                        :name (n1 / name
                              :op1 "South" 
                              :op2 "Korea" ))
                  :ARG2 (o1 / official)))
      :ARG0 (o0 / organization
            :name (n0 / name
                  :op1 "Delegation" )))

# ::snt WTO: India regrets action of developed nations
# ::tokens ["WTO", ":", "India", "regrets", "action", "of", "developed", "nations"]
# ::ner_tags ["ORG", "O", "GPE", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", ":", "NNP", "VBZ", "NN", "IN", "JJ", "NNS"]
# ::lemmas ["WTO", ":", "India", "regret", "action", "of", "developed", "nation"]
(s0 / say-01
      :ARG1 (r0 / regret-01
            :ARG1 (a0 / act-02
                  :ARG0 c0
                  :ARG0 (n1 / nation
                        :ARG1-of (d0 / develop-02)))
            :ARG0 (c0 / country
                  :name (n2 / name
                        :op1 "India" )))
      :ARG0 (o0 / organization
            :name (n0 / name
                  :op1 "WTO" )))

# ::snt Permalink to Two killed in Germany train accident
# ::tokens ["Permalink", "to", "Two", "killed", "in", "Germany", "train", "accident"]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "B", "O", "O"]
# ::pos_tags ["NN", "IN", "CD", "VBN", "IN", "NNP", "NN", "NN"]
# ::lemmas ["permalink", "to", "Two", "kill", "in", "Germany", "train", "accident"]
(k0 / kill-01
      :ARG1 (p0 / person
            :quant 2 
            :name (n0 / name
                  :op1 "permalink" ))
      :ARG1-of (c0 / cause-01
            :ARG0 (a0 / accident
                  :mod (t0 / train)
                  :location (c1 / country
                        :name (n1 / name
                              :op1 "Germany" )))))

# ::snt Merkel pledges NATO solidarity with Latvia
# ::tokens ["Merkel", "pledges", "NATO", "solidarity", "with", "Latvia"]
# ::ner_tags ["ORG", "O", "ORG", "O", "O", "GPE"]
# ::ner_iob ["B", "O", "B", "O", "O", "B"]
# ::pos_tags ["NNP", "NNS", "NNP", "NN", "IN", "NNP"]
# ::lemmas ["Merkel", "pledge", "NATO", "solidarity", "with", "Latvia"]
(p0 / pledge-01
      :ARG1 (s0 / solidarity
            :mod (m0 / military
                  :name (n1 / name
                        :op1 "NATO" ))
            :accompanier (c0 / country
                  :name (n2 / name
                        :op1 "Latvia" )))
      :ARG0 (p1 / person
            :name (n0 / name
                  :op1 "Merkel" )))

# ::snt Egyptian boat crash death toll rises as more bodies found in Nile
# ::tokens ["Egyptian", "boat", "crash", "death", "toll", "rises", "as", "more", "bodies", "found", "in", "Nile"]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "LOC"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B"]
# ::pos_tags ["JJ", "NN", "NN", "NN", "NN", "VBZ", "IN", "JJR", "NNS", "VBN", "IN", "NNP"]
# ::lemmas ["Egyptian", "boat", "crash", "death", "toll", "rise", "as", "more", "body", "find", "in", "Nile"]
(r0 / rise-01
      :ARG1 (t0 / toll
            :mod (c0 / crash-01
                  :ARG1 (b1 / boat
                        :mod (c2 / country
                              :name (n1 / name
                                    :op1 "Egypt" )))))
      :time (f0 / find-01
            :ARG1 (b0 / body
                  :mod (m0 / more))
            :location (c1 / city
                  :name (n0 / name
                        :op1 "Nile" ))))

# ::snt President Xi: China to continue help to fight Ebola
# ::tokens ["President", "Xi", ":", "China", "to", "continue", "help", "to", "fight", "Ebola"]
# ::ner_tags ["O", "PERSON", "O", "GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "B", "O", "B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", ":", "NNP", "TO", "VB", "NN", "TO", "VB", "NNP"]
# ::lemmas ["President", "Xi", ":", "China", "to", "continue", "help", "to", "fight", "Ebola"]
(s0 / say-01
      :ARG1 (c0 / continue-01
            :ARG1 (h0 / help-01
                  :ARG1 (f0 / fight-01
                        :ARG1 (d0 / disease
                              :name (n2 / name
                                    :op1 "Ebola" )))))
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Xi" )
            :ARG0-of (h1 / have-org-role-91
                  :ARG2 (p1 / president)))
      :ARG2 (c1 / country
            :name (n1 / name
                  :op1 "China" )))

# ::snt China Scrambles to Reassure Jittery Stock Traders
# ::tokens ["China", "Scrambles", "to", "Reassure", "Jittery", "Stock", "Traders"]
# ::ner_tags ["GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNPS", "IN", "NNP", "NNP", "NNP", "NNPS"]
# ::lemmas ["China", "Scrambles", "to", "Reassure", "Jittery", "Stock", "Traders"]
(s0 / scramble-01
      :ARG0 (c0 / country
            :name (n0 / name
                  :op1 "China" ))
      :purpose (r0 / reassure-01
            :ARG0 c0
            :ARG1 (p0 / person
                  :ARG0-of (r1 / retire-01)
                  :ARG0-of (t0 / trade-01
                        :ARG1 (c1 / company
                              :name (n1 / name
                                    :op1 "Stock" 
                                    :op2 "Traders" ))))))

# ::snt Obama waiting for midterm to name attorney general
# ::tokens ["Obama", "waiting", "for", "midterm", "to", "name", "attorney", "general"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "VBG", "IN", "NN", "TO", "VB", "NN", "NN"]
# ::lemmas ["obama", "wait", "for", "midterm", "to", "name", "attorney", "general"]
(w0 / wait-01
      :ARG1 (p0 / person
            :name (n1 / name
                  :op1 "Obama" ))
      :ARG2 (d0 / date-entity
            :ARG0 p0
            :season 2007 )
      :ARG2 (n0 / name-01
            :ARG0 p0
            :ARG1 (a0 / attorney
                  :mod (g0 / general))))

# ::snt The Latest on Severe Weather: 1 Dead in Texas After Tornado
# ::tokens ["The", "Latest", "on", "Severe", "Weather", ":", "1", "Dead", "in", "Texas", "After", "Tornado"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "CARDINAL", "O", "O", "GPE", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "B", "O", "O", "B", "O", "O"]
# ::pos_tags ["DT", "JJS", "IN", "NNP", "NN", ":", "CD", "NN", "IN", "NNP", "IN", "NNP"]
# ::lemmas ["the", "late", "on", "Severe", "weather", ":", "1", "dead", "in", "Texas", "after", "Tornado"]
(m0 / multi-sentence
      :snt1 (b0 / bad-02
            :ARG1 (h0 / have-degree-91
                  :ARG3 (m1 / most))
            :ARG2 (w0 / weather
                  :mod (s1 / severe)))
      :snt2 (d0 / die-01
            :time (p0 / person
                  :quant 1 )
            :time (a0 / after
                  :op1 (i0 / incident
                        :name (n1 / name
                              :op1 "Tornado" )))
            :location (s0 / state
                  :name (n0 / name
                        :op1 "Texas" ))))

# ::snt New York police officer critically wounded in hatchet attack
# ::tokens ["New", "York", "police", "officer", "critically", "wounded", "in", "hatchet", "attack"]
# ::ner_tags ["GPE", "GPE", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "I", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "NNP", "NN", "NN", "RB", "VBN", "IN", "NNP", "NN"]
# ::lemmas ["New", "York", "police", "officer", "critically", "wound", "in", "hatchet", "attack"]
(w0 / wound-01
      :ARG1 (p0 / person
            :ARG0-of (h0 / have-org-role-91
                  :ARG1 (p1 / police
                        :location (c1 / city
                              :name (n0 / name
                                    :op1 "New" 
                                    :op2 "York" )))
                  :ARG2 (o0 / officer)))
      :ARG0 (a0 / attack-01
            :instrument (h1 / hatchet))
      :degree (c0 / critical-03))

# ::snt You don't have to worry.
# ::tokens ["You", "do", "n't", "have", "to", "worry", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "."]
# ::lemmas ["you", "do", "not", "have", "to", "worry", "."]
(o0 / obligate-01
      :ARG1 (y0 / you)
      :ARG2 (w0 / worry-02
            :ARG0 y0)
      :polarity - )

# ::snt Yes, you can do it.
# ::tokens ["Yes", ",", "you", "can", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "MD", "VB", "PRP", "."]
# ::lemmas ["yes", ",", "you", "can", "do", "it", "."]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (i0 / it)
            :ARG0 (y0 / you)))

# ::snt The answer to both of your questions is yes.
# ::tokens ["The", "answer", "to", "both", "of", "your", "questions", "is", "yes", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "IN", "PRP$", "NNS", "VBZ", "UH", "."]
# ::lemmas ["the", "answer", "to", "both", "of", "your", "question", "be", "yes", "."]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 (y1 / you)
            :mod (b0 / both))
      :ARG2 (y0 / yes))

# ::snt You are making this too complicated.
# ::tokens ["You", "are", "making", "this", "too", "complicated", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "VBG", "DT", "RB", "JJ", "."]
# ::lemmas ["you", "be", "make", "this", "too", "complicated", "."]
(m0 / make-02
      :ARG1 (c0 / complicate-01
            :ARG1 (t0 / this)
            :ARG2-of (h0 / have-degree-91
                  :ARG1 t0
                  :ARG3 (t1 / too)))
      :ARG0 (y0 / you))

# ::snt It is not a good idea.
# ::tokens ["It", "is", "not", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["it", "be", "not", "a", "good", "idea", "."]
(i0 / idea
      :ARG1-of (g0 / good-02
            :polarity - )
      :domain (i1 / it))

# ::snt Take a look at this:
# ::tokens ["Take", "a", "look", "at", "this", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "DT", "NN", "IN", "DT", ":"]
# ::lemmas ["take", "a", "look", "at", "this", ":"]
(l0 / look-01
      :ARG1 (t0 / this)
      :ARG0 (y0 / you)
      :mode imperative )

# ::snt But it is not a good idea.
# ::tokens ["But", "it", "is", "not", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["CC", "PRP", "VBZ", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["but", "it", "be", "not", "a", "good", "idea", "."]
(c0 / contrast-01
      :ARG2 (i0 / idea
            :ARG1-of (g0 / good-02
                  :polarity - )
            :domain (i1 / it)))

# ::snt I had a similar situation.
# ::tokens ["I", "had", "a", "similar", "situation", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "a", "similar", "situation", "."]
(h0 / have-03
      :ARG1 (s0 / situation
            :ARG1-of (r0 / resemble-01))
      :ARG0 (i0 / i))

# ::snt I had this same problem.
# ::tokens ["I", "had", "this", "same", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "this", "same", "problem", "."]
(h0 / have-03
      :ARG1 (p0 / problem
            :ARG1-of (t0 / this)
            :ARG1-of (s0 / same-01))
      :ARG0 (i0 / i))

# ::snt You have answered your own question.
# ::tokens ["You", "have", "answered", "your", "own", "question", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "VBN", "PRP$", "JJ", "NN", "."]
# ::lemmas ["you", "have", "answer", "your", "own", "question", "."]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 y0)
      :ARG0 (y0 / you))

# ::snt I don't see why that should be a problem.
# ::tokens ["I", "do", "n't", "see", "why", "that", "should", "be", "a", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "WRB", "DT", "MD", "VB", "DT", "NN", "."]
# ::lemmas ["i", "do", "not", "see", "why", "that", "should", "be", "a", "problem", "."]
(s0 / see-01
      :ARG1 (t0 / thing
            :ARG0-of (c0 / cause-01
                  :ARG1 (r0 / recommend-01
                        :ARG1 (p0 / problem
                              :domain (t1 / that)))))
      :ARG0 (i0 / i)
      :polarity - )

# ::snt No, it makes no difference.
# ::tokens ["No", ",", "it", "makes", "no", "difference", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "VBZ", "DT", "NN", "."]
# ::lemmas ["no", ",", "it", "make", "no", "difference", "."]
(s0 / sense-02
      :ARG1 (i0 / it)
      :polarity - )

# ::snt I think it is okay to ask the question.
# ::tokens ["I", "think", "it", "is", "okay", "to", "ask", "the", "question", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "PRP", "VBZ", "JJ", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["i", "think", "it", "be", "okay", "to", "ask", "the", "question", "."]
(t0 / think-01
      :ARG1 (o0 / okay-04
            :ARG1 (a0 / ask-01
                  :ARG1 (q0 / question-01)))
      :ARG0 (i0 / i))

# ::snt I'm afraid there's not really a lot you can do.
# ::tokens ["I", "'m", "afraid", "there", "'s", "not", "really", "a", "lot", "you", "can", "do", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "JJ", "EX", "VBZ", "RB", "RB", "DT", "NN", "PRP", "MD", "VB", "."]
# ::lemmas ["i", "be", "afraid", "there", "be", "not", "really", "a", "lot", "you", "can", "do", "."]
(f0 / fear-01
      :ARG1 (p0 / possible-01
            :ARG1 (d0 / do-02
                  :ARG1 (y0 / you)
                  :ARG1 (l0 / lot
                        :polarity - ))
            :ARG1-of (r0 / real-04))
      :ARG0 (i0 / i))

# ::snt You've answered your own question already.
# ::tokens ["You", "'ve", "answered", "your", "own", "question", "already", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VB", "VBN", "PRP$", "JJ", "NN", "RB", "."]
# ::lemmas ["you", "have", "answer", "your", "own", "question", "already", "."]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 y0)
      :ARG0 (y0 / you)
      :time (a1 / already))

# ::snt Can you do it?
# ::tokens ["Can", "you", "do", "it", "?"]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "PRP", "."]
# ::lemmas ["can", "you", "do", "it", "?"]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (i0 / it)
            :ARG0 (y0 / you))
      :ARG1-of (a0 / amr-unknown))

# ::snt How to do that?
# ::tokens ["How", "to", "do", "that", "?"]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "TO", "VB", "DT", "."]
# ::lemmas ["how", "to", "do", "that", "?"]
(d0 / do-02
      :ARG1 (t0 / that)
      :manner (a0 / amr-unknown))

# ::snt It's definitely just a matter of preference.
# ::tokens ["It", "'s", "definitely", "just", "a", "matter", "of", "preference", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "RB", "DT", "NN", "IN", "NN", "."]
# ::lemmas ["it", "be", "definitely", "just", "a", "matter", "of", "preference", "."]
(m0 / matter
      :mod (p0 / prefer-01)
      :mod (j0 / just)
      :mod (i0 / it)
      :mod (d0 / definite))

# ::snt I don't see why this could be a problem.
# ::tokens ["I", "do", "n't", "see", "why", "this", "could", "be", "a", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "WRB", "DT", "MD", "VB", "DT", "NN", "."]
# ::lemmas ["i", "do", "not", "see", "why", "this", "could", "be", "a", "problem", "."]
(s0 / see-01
      :ARG1 (t0 / thing
            :ARG0-of (c0 / cause-01
                  :ARG1 (p0 / possible-01
                        :ARG1 (p1 / problem
                              :domain (t1 / this)))))
      :ARG0 (i0 / i)
      :polarity - )

# ::snt I really do not think there is much you can do about that.
# ::tokens ["I", "really", "do", "not", "think", "there", "is", "much", "you", "can", "do", "about", "that", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBP", "RB", "VB", "EX", "VBZ", "JJ", "PRP", "MD", "VB", "IN", "DT", "."]
# ::lemmas ["i", "really", "do", "not", "think", "there", "be", "much", "you", "can", "do", "about", "that", "."]
(t0 / think-01
      :ARG1 (p0 / possible-01
            :ARG1 (d0 / do-02
                  :ARG1 (t1 / that)
                  :ARG0 (y0 / you)
                  :ARG1 (m0 / much)))
      :ARG0 (i0 / i)
      :ARG1-of (r0 / real-04)
      :polarity - )

# ::snt Yes you got it.
# ::tokens ["Yes", "you", "got", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["UH", "PRP", "VBD", "PRP", "."]
# ::lemmas ["yes", "you", "get", "it", "."]
(g0 / get-01
      :ARG1 (i0 / it)
      :ARG0 (y0 / you))

# ::snt A couple things to consider:
# ::tokens ["A", "couple", "things", "to", "consider", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "NNS", "TO", "VB", ":"]
# ::lemmas ["a", "couple", "thing", "to", "consider", ":"]
(t0 / thing
      :quant (c0 / couple)
      :ARG1-of (c1 / consider-02))

# ::snt So, CAN you do this?
# ::tokens ["So", ",", "CAN", "you", "do", "this", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", ",", "MD", "PRP", "VB", "DT", "."]
# ::lemmas ["so", ",", "can", "you", "do", "this", "?"]
(c0 / cause-01
      :ARG1 (p0 / possible-01
            :ARG1 (d0 / do-02
                  :ARG1 (t0 / this)
                  :ARG0 (y0 / you))
            :ARG1-of (a0 / amr-unknown)))

# ::snt There are a couple things you can try.
# ::tokens ["There", "are", "a", "couple", "things", "you", "can", "try", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "NN", "NNS", "PRP", "MD", "VB", "."]
# ::lemmas ["there", "be", "a", "couple", "thing", "you", "can", "try", "."]
(t0 / thing
      :quant (c0 / couple)
      :ARG1-of (t1 / try-01
            :ARG0 (y0 / you)
            :ARG1-of (p0 / possible-01)))

# ::snt You've got it right.
# ::tokens ["You", "'ve", "got", "it", "right", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VB", "VBN", "PRP", "JJ", "."]
# ::lemmas ["you", "have", "get", "it", "right", "."]
(r0 / right-06
      :ARG1 (i0 / it)
      :ARG1 (y0 / you))

# ::snt You pretty much answered your own question.
# ::tokens ["You", "pretty", "much", "answered", "your", "own", "question", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "RB", "VBD", "PRP$", "JJ", "NN", "."]
# ::lemmas ["you", "pretty", "much", "answer", "your", "own", "question", "."]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 y0)
      :ARG0 (y0 / you)
      :degree (p0 / pretty-much))

# ::snt You're on the right path.
# ::tokens ["You", "'re", "on", "the", "right", "path", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["you", "be", "on", "the", "right", "path", "."]
(b0 / be-located-at-91
      :ARG1 (y0 / you)
      :ARG2 (p0 / path
            :ARG1-of (r0 / right-06)))

# ::snt What are you goals?
# ::tokens ["What", "are", "you", "goals", "?"]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBP", "PRP", "NNS", "."]
# ::lemmas ["what", "be", "you", "goal", "?"]
(g0 / goal
      :domain (a0 / amr-unknown)
      :domain (y0 / you))

# ::snt A few things to think about:
# ::tokens ["A", "few", "things", "to", "think", "about", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NNS", "TO", "VB", "IN", ":"]
# ::lemmas ["a", "few", "thing", "to", "think", "about", ":"]
(t0 / thing
      :quant (f0 / few)
      :ARG2-of (t1 / think-01))

# ::snt I think this is one of those things where you are just out of luck.
# ::tokens ["I", "think", "this", "is", "one", "of", "those", "things", "where", "you", "are", "just", "out", "of", "luck", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "VBZ", "CD", "IN", "DT", "NNS", "WRB", "PRP", "VBP", "RB", "IN", "IN", "NN", "."]
# ::lemmas ["i", "think", "this", "be", "one", "of", "those", "thing", "where", "you", "be", "just", "out", "of", "luck", "."]
(t0 / think-01
      :ARG1 (i0 / include-91
            :ARG1 (t1 / thing
                  :mod (l0 / luck
                        :mod (j0 / just)
                        :domain (y0 / you)
                        :polarity - ))
            :ARG1 (t2 / this))
      :ARG0 (i1 / i))

# ::snt It's mostly a matter of taste.
# ::tokens ["It", "'s", "mostly", "a", "matter", "of", "taste", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "DT", "NN", "IN", "NN", "."]
# ::lemmas ["it", "be", "mostly", "a", "matter", "of", "taste", "."]
(m0 / matter
      :mod (t0 / taste)
      :mod (m1 / most)
      :domain (i0 / it))

# ::snt I have just had the same problem.
# ::tokens ["I", "have", "just", "had", "the", "same", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VBN", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "just", "have", "the", "same", "problem", "."]
(h0 / have-03
      :ARG1 (p0 / problem
            :ARG1-of (s0 / same-01))
      :ARG0 (i0 / i)
      :mod (j0 / just))

# ::snt I think it's a bad idea.
# ::tokens ["I", "think", "it", "'s", "a", "bad", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "PRP", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "think", "it", "be", "a", "bad", "idea", "."]
(t0 / think-01
      :ARG1 (i0 / idea
            :ARG1-of (b0 / bad-07)
            :domain (i2 / it))
      :ARG0 (i1 / i))

# ::snt Not a good idea.
# ::tokens ["Not", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "DT", "JJ", "NN", "."]
# ::lemmas ["not", "a", "good", "idea", "."]
(i0 / idea
      :ARG1-of (g0 / good-02
            :polarity - ))

# ::snt I have exactly the same problem.
# ::tokens ["I", "have", "exactly", "the", "same", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "exactly", "the", "same", "problem", "."]
(h0 / have-03
      :ARG1 (p0 / problem
            :ARG1-of (s0 / same-01
                  :mod (e0 / exact)))
      :ARG0 (i0 / i))

# ::snt I think there are two important things to consider:
# ::tokens ["I", "think", "there", "are", "two", "important", "things", "to", "consider", ":"]
# ::ner_tags ["O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "EX", "VBP", "CD", "JJ", "NNS", "TO", "VB", ":"]
# ::lemmas ["i", "think", "there", "be", "two", "important", "thing", "to", "consider", ":"]
(t0 / think-01
      :ARG1 (t1 / thing
            :ARG1-of (i1 / important-01)
            :ARG1-of (c0 / consider-01)
            :quant 2 )
      :ARG0 (i0 / i))

# ::snt It is up to you.
# ::tokens ["It", "is", "up", "to", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "IN", "PRP", "."]
# ::lemmas ["it", "be", "up", "to", "you", "."]
(d0 / depend-01
      :ARG1 (y0 / you)
      :ARG0 (i0 / it))

# ::snt There are only three options:
# ::tokens ["There", "are", "only", "three", "options", ":"]
# ::ner_tags ["O", "O", "CARDINAL", "CARDINAL", "O", "O"]
# ::ner_iob ["O", "O", "B", "I", "O", "O"]
# ::pos_tags ["EX", "VBP", "RB", "CD", "NNS", ":"]
# ::lemmas ["there", "be", "only", "three", "option", ":"]
(o0 / option
      :mod (o1 / only)
      :quant 3 )

# ::snt Think of it this way.
# ::tokens ["Think", "of", "it", "this", "way", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "IN", "PRP", "DT", "NN", "."]
# ::lemmas ["think", "of", "it", "this", "way", "."]
(t0 / think-01
      :ARG1 (i0 / it)
      :ARG0 (y0 / you)
      :manner (w0 / way
            :mod (t1 / this))
      :mode imperative )

# ::snt Maybe this can work for you.
# ::tokens ["Maybe", "this", "can", "work", "for", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "DT", "MD", "VB", "IN", "PRP", "."]
# ::lemmas ["maybe", "this", "can", "work", "for", "you", "."]
(p0 / possible-01
      :ARG1 (w0 / work-09
            :ARG1 (t0 / this)
            :ARG2 (y0 / you)))

# ::snt Not a good idea.
# ::tokens ["Not", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "DT", "JJ", "NN", "."]
# ::lemmas ["not", "a", "good", "idea", "."]
(i0 / idea
      :ARG1-of (g0 / good-02
            :polarity - ))

# ::snt I know this is an old question but I feel I should add my 2 cents.
# ::tokens ["I", "know", "this", "is", "an", "old", "question", "but", "I", "feel", "I", "should", "add", "my", "2", "cents", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "MONEY", "MONEY", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "VBZ", "DT", "JJ", "NN", "CC", "PRP", "VBP", "PRP", "MD", "VB", "PRP$", "CD", "NNS", "."]
# ::lemmas ["i", "know", "this", "be", "an", "old", "question", "but", "i", "feel", "i", "should", "add", "my", "2", "cents", "."]
(k0 / know-01
      :ARG1 (q0 / question-01
            :mod (o0 / old)
            :domain (t0 / this))
      :ARG0 (i0 / i
            :ARG0-of (a0 / add-02
                  :ARG1 (m0 / monetary-quantity
                        :quant 2 
                        :unit (c0 / cent)))
            :ARG2-of (r0 / recommend-01
                  :ARG1 a0))
      :concession (f0 / feel-02
            :ARG0 i0
            :ARG1 r0))

# ::snt You have to find out what works for you.
# ::tokens ["You", "have", "to", "find", "out", "what", "works", "for", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "RP", "WP", "VBZ", "IN", "PRP", "."]
# ::lemmas ["you", "have", "to", "find", "out", "what", "work", "for", "you", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG2-of (w0 / work-01
                  :ARG1 t0))
      :ARG2 (f0 / find-out-03
            :ARG0 y0
            :ARG1 (t0 / thing)))

# ::snt I agree with the previous comments.
# ::tokens ["I", "agree", "with", "the", "previous", "comments", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "IN", "DT", "JJ", "NNS", "."]
# ::lemmas ["i", "agree", "with", "the", "previous", "comment", "."]
(a0 / agree-01
      :ARG1 (c0 / comment-01
            :time (p0 / previous))
      :ARG0 (i0 / i))

# ::snt That depends on which country you are in.
# ::tokens ["That", "depends", "on", "which", "country", "you", "are", "in", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "IN", "WDT", "NN", "PRP", "VBP", "IN", "."]
# ::lemmas ["that", "depend", "on", "which", "country", "you", "be", "in", "."]
(d0 / depend-01
      :ARG1 (c0 / country
            :ARG2-of (y0 / you))
      :ARG0 (t0 / that))

# ::snt This is a bad idea.
# ::tokens ["This", "is", "a", "bad", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["this", "be", "a", "bad", "idea", "."]
(i0 / idea
      :ARG1-of (b0 / bad-07)
      :domain (t0 / this))

# ::snt You have to know what you want to do.
# ::tokens ["You", "have", "to", "know", "what", "you", "want", "to", "do", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "WP", "PRP", "VBP", "TO", "VB", "."]
# ::lemmas ["you", "have", "to", "know", "what", "you", "want", "to", "do", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (d0 / do-02
                  :ARG1 t0)
            :ARG0-of (w0 / want-01
                  :ARG1 d0))
      :ARG2 (k0 / know-01
            :ARG0 y0
            :ARG1 (t0 / thing)))

# ::snt I have two suggestions for you:
# ::tokens ["I", "have", "two", "suggestions", "for", "you", ":"]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "CD", "NNS", "IN", "PRP", ":"]
# ::lemmas ["i", "have", "two", "suggestion", "for", "you", ":"]
(s0 / suggest-01
      :ARG1 (t0 / thing
            :quant 2 )
      :ARG0 (i0 / i)
      :ARG2 (y0 / you))

# ::snt Start them as early as possible.
# ::tokens ["Start", "them", "as", "early", "as", "possible", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "PRP", "RB", "RB", "IN", "JJ", "."]
# ::lemmas ["start", "them", "as", "early", "as", "possible", "."]
(s0 / start-01
      :ARG1 (t0 / they)
      :ARG0 (y0 / you)
      :ARG1-of (h0 / have-degree-91
            :ARG2 e0
            :ARG3 (p0 / possible-01)
            :ARG3 (e1 / equal))
      :time (e0 / early)
      :mode imperative )

# ::snt I'll answer this question:
# ::tokens ["I", "'ll", "answer", "this", "question", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "DT", "NN", ":"]
# ::lemmas ["i", "will", "answer", "this", "question", ":"]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :mod (t0 / this))
      :ARG0 (i0 / i))

# ::snt Sorry, I don't know the answer to your question.
# ::tokens ["Sorry", ",", "I", "do", "n't", "know", "the", "answer", "to", "your", "question", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "VBP", "RB", "VB", "DT", "NN", "IN", "PRP$", "NN", "."]
# ::lemmas ["sorry", ",", "i", "do", "not", "know", "the", "answer", "to", "your", "question", "."]
(s0 / sorry-01
      :ARG2 (i0 / i)
      :ARG2 (k0 / know-01
            :ARG0 i0
            :ARG1 (a0 / answer-01
                  :ARG1 (q0 / question-01
                        :ARG0 (y0 / you)))
            :polarity - ))

# ::snt "I always go by the rule ""When in doubt, throw it out!"
# ::tokens ["\"", "I", "always", "go", "by", "the", "rule", "\"", "\"", "When", "in", "doubt", ",", "throw", "it", "out", "!", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "PRP", "RB", "VBP", "IN", "DT", "NN", "''", "``", "WRB", "IN", "NN", ",", "VB", "PRP", "RP", ".", "''"]
# ::lemmas ["\"", "i", "always", "go", "by", "the", "rule", "\"", "\"", "when", "in", "doubt", ",", "throw", "it", "out", "!", "\""]
(m0 / multi-sentence
      :snt1 (g0 / go-06
            :ARG0 (i0 / i)
            :ARG2 (a0 / always)
            :ARG2 (r0 / rule))
      :snt2 (t0 / throw-out-06
            :ARG1 (i1 / it)
            :ARG0 (y0 / you)
            :time (d0 / doubt-01)
            :mode imperative ))

# ::snt This sound like a very bad idea.
# ::tokens ["This", "sound", "like", "a", "very", "bad", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "RB", "JJ", "NN", "."]
# ::lemmas ["this", "sound", "like", "a", "very", "bad", "idea", "."]
(s0 / sound-01
      :ARG1 (t0 / this)
      :ARG2 (i0 / idea
            :ARG1-of (b0 / bad-07
                  :degree (v0 / very))))

# ::snt It depends on the meat and how it's cut.
# ::tokens ["It", "depends", "on", "the", "meat", "and", "how", "it", "'s", "cut", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "DT", "NN", "CC", "WRB", "PRP", "VBZ", "VBN", "."]
# ::lemmas ["it", "depend", "on", "the", "meat", "and", "how", "it", "be", "cut", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (m0 / meat
                  :ARG1-of (c0 / cut-01))
            :op2 (t0 / thing))
      :ARG0 (i0 / it))

# ::snt Have you tried asking?
# ::tokens ["Have", "you", "tried", "asking", "?"]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["VBP", "PRP", "VBN", "VBG", "."]
# ::lemmas ["have", "you", "try", "ask", "?"]
(t0 / try-01
      :ARG1 (a0 / ask-01
            :ARG0 y0)
      :ARG0 (y0 / you)
      :ARG1 (a1 / amr-unknown))

# ::snt There are two possible causes for this:
# ::tokens ["There", "are", "two", "possible", "causes", "for", "this", ":"]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "CD", "JJ", "NNS", "IN", "DT", ":"]
# ::lemmas ["there", "be", "two", "possible", "cause", "for", "this", ":"]
(c0 / cause-01
      :ARG1 (t0 / this)
      :ARG0 (p0 / possible-01)
      :quant 2 )

# ::snt In other words, it depends on where you go, when you do there and how.
# ::tokens ["In", "other", "words", ",", "it", "depends", "on", "where", "you", "go", ",", "when", "you", "do", "there", "and", "how", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "JJ", "NNS", ",", "PRP", "VBZ", "IN", "WRB", "PRP", "VBP", ",", "WRB", "PRP", "VBP", "RB", "CC", "WRB", "."]
# ::lemmas ["in", "other", "word", ",", "it", "depend", "on", "where", "you", "go", ",", "when", "you", "do", "there", "and", "how", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (l0 / location
                  :ARG4-of (g0 / go-02
                        :ARG0 (y0 / you)))
            :op2 (t0 / thing
                  :manner-of (g1 / go-02
                        :ARG0 y0
                        :ARG4 (t1 / there))))
      :ARG0 (i0 / it)
      :ARG1-of (w0 / word
            :mod (o0 / other)))

# ::snt I have had the same problem.
# ::tokens ["I", "have", "had", "the", "same", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "VBN", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "have", "the", "same", "problem", "."]
(h0 / have-03
      :ARG1 (p0 / problem
            :ARG1-of (s0 / same-01))
      :ARG0 (i0 / i))

# ::snt I think that the short  answer to your question is: No.
# ::tokens ["I", "think", "that", "the", "short", " ", "answer", "to", "your", "question", "is", ":", "No", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "IN", "DT", "JJ", "_SP", "NN", "IN", "PRP$", "NN", "VBZ", ":", "UH", "."]
# ::lemmas ["i", "think", "that", "the", "short", " ", "answer", "to", "your", "question", "be", ":", "no", "."]
(t0 / think-01
      :ARG1 (a0 / answer-01
            :ARG1 (q0 / question-01
                  :ARG0 (y0 / you))
            :ARG1-of (s0 / short-07)
            :ARG2 (n0 / no))
      :ARG0 (i0 / i))

# ::snt I don't think it makes much difference.
# ::tokens ["I", "do", "n't", "think", "it", "makes", "much", "difference", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "PRP", "VBZ", "JJ", "NN", "."]
# ::lemmas ["i", "do", "not", "think", "it", "make", "much", "difference", "."]
(t0 / think-01
      :ARG1 (m0 / make-02
            :ARG1 (d0 / differ-02
                  :degree (m1 / much))
            :ARG0 (i1 / it))
      :ARG0 (i0 / i)
      :polarity - )

# ::snt I do not think it's a good idea.
# ::tokens ["I", "do", "not", "think", "it", "'s", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "PRP", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "do", "not", "think", "it", "be", "a", "good", "idea", "."]
(t0 / think-01
      :ARG1 (i0 / idea
            :ARG1-of (g0 / good-02)
            :domain (i2 / it))
      :ARG0 (i1 / i)
      :polarity - )

# ::snt You are right on the mark.
# ::tokens ["You", "are", "right", "on", "the", "mark", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "JJ", "IN", "DT", "NN", "."]
# ::lemmas ["you", "be", "right", "on", "the", "mark", "."]
(b0 / be-located-at-91
      :ARG1 (y0 / you)
      :mod (r0 / right)
      :ARG2 (m0 / mark))

# ::snt So how should I do this?
# ::tokens ["So", "how", "should", "I", "do", "this", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "WRB", "MD", "PRP", "VB", "DT", "."]
# ::lemmas ["so", "how", "should", "i", "do", "this", "?"]
(c0 / cause-01
      :ARG1 (r0 / recommend-01
            :ARG1 (d0 / do-02
                  :ARG1 (t0 / this)
                  :ARG0 (i0 / i)
                  :manner (a0 / amr-unknown))))

# ::snt Does this answer your questions?
# ::tokens ["Does", "this", "answer", "your", "questions", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "DT", "VB", "PRP$", "NNS", "."]
# ::lemmas ["do", "this", "answer", "your", "question", "?"]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 (y0 / you))
      :ARG0 (t0 / this)
      :ARG2 (a1 / amr-unknown))

# ::snt I'm going to be blunt, here: You don't.
# ::tokens ["I", "'m", "going", "to", "be", "blunt", ",", "here", ":", "You", "do", "n't", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "VBG", "TO", "VB", "JJ", ",", "RB", ":", "PRP", "VBP", "RB", "."]
# ::lemmas ["i", "be", "go", "to", "be", "blunt", ",", "here", ":", "you", "do", "not", "."]
(b0 / blunt-02
      :ARG0 (i0 / i)
      :location (y0 / you
            :ARG0-of (d0 / do-02
                  :polarity - ))
      :location (h0 / here))

# ::snt I guess it depends on the nature of your contract.
# ::tokens ["I", "guess", "it", "depends", "on", "the", "nature", "of", "your", "contract", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "PRP", "VBZ", "IN", "DT", "NN", "IN", "PRP$", "NN", "."]
# ::lemmas ["i", "guess", "it", "depend", "on", "the", "nature", "of", "your", "contract", "."]
(g0 / guess-01
      :ARG1 (d0 / depend-01
            :ARG1 (i1 / it)
            :ARG1 (n0 / nature
                  :poss (c0 / contract
                        :poss (y0 / you))))
      :ARG0 (i0 / i))

# ::snt There are quite a few things you would need to do;
# ::tokens ["There", "are", "quite", "a", "few", "things", "you", "would", "need", "to", "do", ";"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "PDT", "DT", "JJ", "NNS", "PRP", "MD", "VB", "TO", "VB", ":"]
# ::lemmas ["there", "be", "quite", "a", "few", "thing", "you", "would", "need", "to", "do", ";"]
(n0 / need-01
      :ARG1 (d0 / do-02
            :ARG0 y0
            :ARG1 (t0 / thing
                  :quant (f0 / few
                        :degree (q0 / quite))))
      :ARG0 (y0 / you))

# ::snt How should you do that?
# ::tokens ["How", "should", "you", "do", "that", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WRB", "MD", "PRP", "VB", "DT", "."]
# ::lemmas ["how", "should", "you", "do", "that", "?"]
(h0 / have-manner-91
      :ARG1 (r0 / recommend-01
            :ARG1 (d0 / do-02
                  :ARG1 (t0 / that)
                  :ARG0 (y0 / you)))
      :ARG2 (a0 / amr-unknown))

# ::snt I am in a similar situation.
# ::tokens ["I", "am", "in", "a", "similar", "situation", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "be", "in", "a", "similar", "situation", "."]
(b0 / be-located-at-91
      :ARG1 (i0 / i)
      :ARG2 (s0 / situation
            :ARG1-of (r0 / resemble-01)))

# ::snt It's up to you what you want to do next.
# ::tokens ["It", "'s", "up", "to", "you", "what", "you", "want", "to", "do", "next", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "IN", "PRP", "WP", "PRP", "VBP", "TO", "VB", "RB", "."]
# ::lemmas ["it", "be", "up", "to", "you", "what", "you", "want", "to", "do", "next", "."]
(d0 / depend-01
      :ARG1 (t0 / thing
            :ARG1-of (d1 / do-02
                  :ARG0 y0
                  :time (n0 / next)))
      :ARG1 (y0 / you
            :ARG0-of (w0 / want-01
                  :ARG1 d1)))

# ::snt I wouldn't put this job on my resume.
# ::tokens ["I", "would", "n't", "put", "this", "job", "on", "my", "resume", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "RB", "VB", "DT", "NN", "IN", "PRP$", "NN", "."]
# ::lemmas ["i", "would", "not", "put", "this", "job", "on", "my", "resume", "."]
(p0 / put-01
      :ARG1 (j0 / job
            :mod (t0 / this))
      :ARG0 (i0 / i)
      :ARG2 (r0 / resume)
      :polarity - )

# ::snt I don't think there is an answer for this.
# ::tokens ["I", "do", "n't", "think", "there", "is", "an", "answer", "for", "this", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "EX", "VBZ", "DT", "NN", "IN", "DT", "."]
# ::lemmas ["i", "do", "not", "think", "there", "be", "an", "answer", "for", "this", "."]
(t0 / think-01
      :ARG1 (a0 / answer-01
            :ARG1 (t1 / this))
      :ARG0 (i0 / i)
      :polarity - )

# ::snt You work on it slowly.
# ::tokens ["You", "work", "on", "it", "slowly", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "IN", "PRP", "RB", "."]
# ::lemmas ["you", "work", "on", "it", "slowly", "."]
(w0 / work-01
      :ARG1-of (i0 / it)
      :ARG0 (y0 / you)
      :ARG1-of (s0 / slow-05))

# ::snt This varies by institution.
# ::tokens ["This", "varies", "by", "institution", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "IN", "NN", "."]
# ::lemmas ["this", "vary", "by", "institution", "."]
(v0 / vary-01
      :ARG1 (t0 / this)
      :ARG3 (i0 / institution))

# ::snt I have the same problem.
# ::tokens ["I", "have", "the", "same", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "the", "same", "problem", "."]
(h0 / have-03
      :ARG1 (p0 / problem
            :ARG1-of (s0 / same-01))
      :ARG0 (i0 / i))

# ::snt I have the exact same problem.
# ::tokens ["I", "have", "the", "exact", "same", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "JJ", "JJ", "NN", "."]
# ::lemmas ["i", "have", "the", "exact", "same", "problem", "."]
(h0 / have-03
      :ARG1 (p0 / problem
            :ARG1-of (s0 / same-01
                  :degree (e0 / exact)))
      :ARG0 (i0 / i))

# ::snt You have to find out what works for you.
# ::tokens ["You", "have", "to", "find", "out", "what", "works", "for", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "RP", "WP", "VBZ", "IN", "PRP", "."]
# ::lemmas ["you", "have", "to", "find", "out", "what", "work", "for", "you", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG2-of (w0 / work-01
                  :ARG1 t0))
      :ARG2 (f0 / find-out-03
            :ARG0 y0
            :ARG1 (t0 / thing)))

# ::snt No, it's not a good thing.
# ::tokens ["No", ",", "it", "'s", "not", "a", "good", "thing", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "VBZ", "RB", "DT", "JJ", "NN", "."]
# ::lemmas ["no", ",", "it", "be", "not", "a", "good", "thing", "."]
(g0 / good-02
      :ARG1 (i0 / it)
      :polarity - )

# ::snt This is a big problem.
# ::tokens ["This", "is", "a", "big", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["this", "be", "a", "big", "problem", "."]
(p0 / problem
      :mod (b0 / big)
      :domain (t0 / this))

# ::snt This cannot be answered in general.
# ::tokens ["This", "can", "not", "be", "answered", "in", "general", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "MD", "RB", "VB", "VBN", "IN", "JJ", "."]
# ::lemmas ["this", "can", "not", "be", "answer", "in", "general", "."]
(p0 / possible-01
      :ARG1 (a0 / answer-01
            :ARG1 (t0 / this)
            :ARG1-of (g0 / general-02))
      :polarity - )

# ::snt I don't think there is a single definition.
# ::tokens ["I", "do", "n't", "think", "there", "is", "a", "single", "definition", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "EX", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "do", "not", "think", "there", "be", "a", "single", "definition", "."]
(t0 / think-01
      :ARG1 (d0 / define-01
            :ARG1-of (s0 / single-02))
      :ARG0 (i0 / i)
      :polarity - )

# ::snt The answer to your question is not really.
# ::tokens ["The", "answer", "to", "your", "question", "is", "not", "really", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "PRP$", "NN", "VBZ", "RB", "RB", "."]
# ::lemmas ["the", "answer", "to", "your", "question", "be", "not", "really", "."]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 (y0 / you))
      :ARG1-of (r0 / real-04
            :polarity - ))

# ::snt I had the same issue.
# ::tokens ["I", "had", "the", "same", "issue", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "the", "same", "issue", "."]
(i0 / issue-02
      :ARG1 (i1 / i)
      :ARG0 (s0 / same-01))

# ::snt Is this the kind of thing you're looking for ?
# ::tokens ["Is", "this", "the", "kind", "of", "thing", "you", "'re", "looking", "for", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "DT", "DT", "NN", "IN", "NN", "PRP", "VBP", "VBG", "IN", "."]
# ::lemmas ["be", "this", "the", "kind", "of", "thing", "you", "be", "look", "for", "?"]
(l0 / look-01
      :ARG1 (t0 / thing
            :mod (k0 / kind
                  :domain (t1 / this)))
      :ARG0 (y0 / you)
      :ARG2 (a0 / amr-unknown))

# ::snt There are a few things you need to consider:
# ::tokens ["There", "are", "a", "few", "things", "you", "need", "to", "consider", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "JJ", "NNS", "PRP", "VBP", "TO", "VB", ":"]
# ::lemmas ["there", "be", "a", "few", "thing", "you", "need", "to", "consider", ":"]
(o0 / obligate-01
      :ARG1 (y0 / you)
      :ARG2 (c0 / consider-02
            :ARG0 y0
            :ARG1 (t0 / thing
                  :quant (f0 / few))))

# ::snt It depends on what and where you are going to do.
# ::tokens ["It", "depends", "on", "what", "and", "where", "you", "are", "going", "to", "do", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "CC", "WRB", "PRP", "VBP", "VBG", "TO", "VB", "."]
# ::lemmas ["it", "depend", "on", "what", "and", "where", "you", "be", "go", "to", "do", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (t0 / thing
                  :ARG1-of (d1 / do-02
                        :ARG0 (y0 / you)))
            :op2 (l0 / location))
      :ARG0 (i0 / it))

# ::snt This will depend on the university.
# ::tokens ["This", "will", "depend", "on", "the", "university", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "MD", "VB", "IN", "DT", "NN", "."]
# ::lemmas ["this", "will", "depend", "on", "the", "university", "."]
(d0 / depend-01
      :ARG1 (u0 / university)
      :ARG0 (t0 / this))

# ::snt There are a few minimally-effective things you can do at the personal level.
# ::tokens ["There", "are", "a", "few", "minimally", "-", "effective", "things", "you", "can", "do", "at", "the", "personal", "level", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "JJ", "RB", "HYPH", "JJ", "NNS", "PRP", "MD", "VB", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["there", "be", "a", "few", "minimally", "-", "effective", "thing", "you", "can", "do", "at", "the", "personal", "level", "."]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (t0 / thing
                  :ARG0-of (e0 / effective-04
                        :mod (m0 / maximum))
                  :quant (f0 / few))
            :ARG0 (y0 / you)
            :ARG2 (l0 / level
                  :ARG1-of (p1 / personal-02))))

# ::snt I had this problem before.
# ::tokens ["I", "had", "this", "problem", "before", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "DT", "NN", "RB", "."]
# ::lemmas ["i", "have", "this", "problem", "before", "."]
(h0 / have-03
      :ARG1 (p0 / problem
            :mod (t0 / this))
      :ARG0 (i0 / i)
      :time (b0 / before))

# ::snt Not a real answer to your question, but maybe it helps.
# ::tokens ["Not", "a", "real", "answer", "to", "your", "question", ",", "but", "maybe", "it", "helps", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "DT", "JJ", "NN", "IN", "PRP$", "NN", ",", "CC", "RB", "PRP", "VBZ", "."]
# ::lemmas ["not", "a", "real", "answer", "to", "your", "question", ",", "but", "maybe", "it", "help", "."]
(p0 / possible-01
      :ARG1 (a0 / answer-01
            :ARG1-of (q0 / question-01
                  :ARG0 (y0 / you))
            :ARG1-of (r0 / real-04)
            :polarity - )
      :ARG1 (h0 / help-01
            :ARG0 a0
            :ARG0 (i0 / it)))

# ::snt I remained under the banyan tree, exhausted by my daily ritual of herding the cats every two hours.
# ::tokens ["I", "remained", "under", "the", "banyan", "tree", ",", "exhausted", "by", "my", "daily", "ritual", "of", "herding", "the", "cats", "every", "two", "hours", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "DATE", "O", "O", "O", "O", "O", "TIME", "TIME", "TIME", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["PRP", "VBD", "IN", "DT", "NNP", "NN", ",", "VBN", "IN", "PRP$", "JJ", "NN", "IN", "VBG", "DT", "NNS", "DT", "CD", "NNS", "."]
# ::lemmas ["i", "remain", "under", "the", "banyan", "tree", ",", "exhaust", "by", "my", "daily", "ritual", "of", "herd", "the", "cat", "every", "two", "hours", "."]
(r0 / remain-01
      :ARG1 (u0 / under
            :op1 (t0 / tree
                  :mod (b0 / banyan)))
      :ARG1 (c0 / cause-01
            :ARG0 (e0 / exhaust-01
                  :ARG1 i0
                  :ARG0 h0
                  :ARG0 (r1 / ritual
                        :frequency (r2 / rate-entity-91
                              :ARG3 (t1 / temporal-quantity
                                    :quant 2 
                                    :unit (h1 / hour))))))
      :ARG1 (i0 / i
            :ARG0-of (h0 / herd
                  :beneficiary r1
                  :ARG1 (c1 / cat))))

# ::snt It really depends on the school and the program.
# ::tokens ["It", "really", "depends", "on", "the", "school", "and", "the", "program", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBZ", "IN", "DT", "NN", "CC", "DT", "NN", "."]
# ::lemmas ["it", "really", "depend", "on", "the", "school", "and", "the", "program", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (s0 / school)
            :op2 (p0 / program))
      :ARG0 (i0 / it)
      :ARG1-of (r0 / real-04))

# ::snt You should do what it says.
# ::tokens ["You", "should", "do", "what", "it", "says", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "WP", "PRP", "VBZ", "."]
# ::lemmas ["you", "should", "do", "what", "it", "say", "."]
(r0 / recommend-01
      :ARG1 (d0 / do-02
            :ARG0 y0
            :ARG1 (t0 / thing
                  :ARG1-of (s0 / say-01
                        :ARG0 (i0 / it))))
      :ARG2 (y0 / you))

# ::snt It's a good idea.
# ::tokens ["It", "'s", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["it", "be", "a", "good", "idea", "."]
(i0 / idea
      :ARG1-of (g0 / good-02)
      :domain (i1 / it))

# ::snt Yes, you should mention it.
# ::tokens ["Yes", ",", "you", "should", "mention", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "MD", "VB", "PRP", "."]
# ::lemmas ["yes", ",", "you", "should", "mention", "it", "."]
(r0 / recommend-01
      :ARG1 (m0 / mention-01
            :ARG0 y0
            :ARG1 (i0 / it))
      :ARG2 (y0 / you))

# ::snt I guess it depends on what you're going to do.
# ::tokens ["I", "guess", "it", "depends", "on", "what", "you", "'re", "going", "to", "do", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "PRP", "VBZ", "IN", "WP", "PRP", "VBP", "VBG", "TO", "VB", "."]
# ::lemmas ["i", "guess", "it", "depend", "on", "what", "you", "be", "go", "to", "do", "."]
(g0 / guess-01
      :ARG1 (d0 / depend-01
            :ARG1 (t0 / thing
                  :ARG1-of (d1 / do-02
                        :ARG0 (y0 / you)))
            :ARG0 (i1 / it))
      :ARG0 (i0 / i))

# ::snt It depends on what you want to achieve.
# ::tokens ["It", "depends", "on", "what", "you", "want", "to", "achieve", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "TO", "VB", "."]
# ::lemmas ["it", "depend", "on", "what", "you", "want", "to", "achieve", "."]
(d0 / depend-01
      :ARG1 (t0 / thing
            :ARG1-of (a0 / achieve-01
                  :ARG0 (y0 / you)
                  :ARG1-of (w0 / want-01
                        :ARG0 y0)))
      :ARG0 (i0 / it))

# ::snt This sounds a bit unusual.
# ::tokens ["This", "sounds", "a", "bit", "unusual", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "DT", "NN", "JJ", "."]
# ::lemmas ["this", "sound", "a", "bit", "unusual", "."]
(s0 / sound-01
      :ARG1 (t0 / this)
      :ARG2 (u0 / usual
            :degree (b0 / bit)
            :polarity - ))

# ::snt It depends on what you want to be able to do.
# ::tokens ["It", "depends", "on", "what", "you", "want", "to", "be", "able", "to", "do", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "TO", "VB", "JJ", "TO", "VB", "."]
# ::lemmas ["it", "depend", "on", "what", "you", "want", "to", "be", "able", "to", "do", "."]
(d0 / depend-01
      :ARG1 (t0 / thing
            :ARG1-of (d1 / do-02
                  :ARG0 (y0 / you)
                  :ARG1-of (p0 / possible-01
                        :ARG0 y0)
                  :ARG1-of (w0 / want-01
                        :ARG0 y0
                        :ARG1 p0)))
      :ARG0 (i0 / it))

# ::snt It doesn't matter unless it is really far off.
# ::tokens ["It", "does", "n't", "matter", "unless", "it", "is", "really", "far", "off", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VB", "IN", "PRP", "VBZ", "RB", "RB", "RB", "."]
# ::lemmas ["it", "do", "not", "matter", "unless", "it", "be", "really", "far", "off", "."]
(m0 / matter-01
      :ARG1 (i0 / it)
      :polarity - 
      :condition (f0 / far
            :ARG1 i0
            :degree (r0 / really)))

# ::snt You don't have to know.
# ::tokens ["You", "do", "n't", "have", "to", "know", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "."]
# ::lemmas ["you", "do", "not", "have", "to", "know", "."]
(o0 / obligate-01
      :ARG1 (y0 / you)
      :ARG2 (k0 / know-01
            :ARG0 y0)
      :polarity - )

# ::snt I think you're looking for the movie
# ::tokens ["I", "think", "you", "'re", "looking", "for", "the", "movie"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "PRP", "VBP", "VBG", "IN", "DT", "NN"]
# ::lemmas ["i", "think", "you", "be", "look", "for", "the", "movie"]
(t0 / think-01
      :ARG1 (l0 / look-01
            :ARG1 (m0 / movie)
            :ARG0 (y0 / you))
      :ARG0 (i0 / i))

# ::snt I don't think there is any universal term.
# ::tokens ["I", "do", "n't", "think", "there", "is", "any", "universal", "term", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "EX", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "do", "not", "think", "there", "be", "any", "universal", "term", "."]
(t0 / think-01
      :ARG1 (t1 / term
            :mod (a0 / any)
            :mod (u0 / universal))
      :ARG0 (i0 / i)
      :polarity - )

# ::snt There are a few minimally-effective things you can do at the personal level.
# ::tokens ["There", "are", "a", "few", "minimally", "-", "effective", "things", "you", "can", "do", "at", "the", "personal", "level", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "JJ", "RB", "HYPH", "JJ", "NNS", "PRP", "MD", "VB", "IN", "DT", "JJ", "NN", "."]
# ::lemmas ["there", "be", "a", "few", "minimally", "-", "effective", "thing", "you", "can", "do", "at", "the", "personal", "level", "."]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (t0 / thing
                  :ARG0-of (e0 / effective-04
                        :mod (m0 / maximum))
                  :quant (f0 / few))
            :ARG0 (y0 / you)
            :ARG2 (l0 / level
                  :ARG1-of (p1 / personal-02))))

# ::snt Something like this is useful:
# ::tokens ["Something", "like", "this", "is", "useful", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NN", "IN", "DT", "VBZ", "JJ", ":"]
# ::lemmas ["something", "like", "this", "be", "useful", ":"]
(u0 / useful-05
      :ARG1 (s0 / something
            :ARG1-of (r0 / resemble-01
                  :ARG2 (t0 / this))))

# ::snt I've done this many dozens of times.
# ::tokens ["I", "'ve", "done", "this", "many", "dozens", "of", "times", "."]
# ::ner_tags ["O", "O", "O", "CARDINAL", "CARDINAL", "CARDINAL", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "I", "I", "O", "O", "O"]
# ::pos_tags ["PRP", "VB", "VBN", "DT", "JJ", "NNS", "IN", "NNS", "."]
# ::lemmas ["i", "have", "do", "this", "many", "dozens", "of", "time", "."]
(d0 / do-02
      :ARG1 (t0 / this)
      :ARG0 (i0 / i)
      :frequency (m0 / many
            :op1 (m1 / multiple
                  :op1 12 )))

# ::snt You can do it, too.
# ::tokens ["You", "can", "do", "it", ",", "too", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", ",", "RB", "."]
# ::lemmas ["you", "can", "do", "it", ",", "too", "."]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (i0 / it)
            :ARG0 (y0 / you)
            :mod (t0 / too)))

# ::snt I found some link that might be of help to you:
# ::tokens ["I", "found", "some", "link", "that", "might", "be", "of", "help", "to", "you", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "DT", "NN", "WDT", "MD", "VB", "IN", "NN", "IN", "PRP", ":"]
# ::lemmas ["i", "find", "some", "link", "that", "may", "be", "of", "help", "to", "you", ":"]
(f0 / find-01
      :ARG1 (t0 / thing
            :mod (s0 / some)
            :ARG0-of (l0 / link-01)
            :ARG0-of (h0 / help-01
                  :ARG2 (y0 / you)
                  :ARG1-of (p0 / possible-01)))
      :ARG0 (i0 / i))

# ::snt Since you have one ticket, you don't have to worry.
# ::tokens ["Since", "you", "have", "one", "ticket", ",", "you", "do", "n't", "have", "to", "worry", "."]
# ::ner_tags ["O", "O", "O", "CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "PRP", "VBP", "CD", "NN", ",", "PRP", "VBP", "RB", "VB", "TO", "VB", "."]
# ::lemmas ["since", "you", "have", "one", "ticket", ",", "you", "do", "not", "have", "to", "worry", "."]
(c0 / cause-01
      :ARG1 (o0 / obligate-01
            :ARG1 (y0 / you)
            :ARG2 (w0 / worry-02
                  :ARG0 y0)
            :polarity - )
      :ARG0 (h0 / have-03
            :ARG1 (t0 / ticket
                  :quant 1 )))

# ::snt It depends on your company.
# ::tokens ["It", "depends", "on", "your", "company", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "PRP$", "NN", "."]
# ::lemmas ["it", "depend", "on", "your", "company", "."]
(d0 / depend-01
      :ARG1 (c0 / company
            :poss (y0 / you))
      :ARG0 (i0 / it))

# ::snt It's just worn out and not safe.
# ::tokens ["It", "'s", "just", "worn", "out", "and", "not", "safe", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "VBN", "RP", "CC", "RB", "JJ", "."]
# ::lemmas ["it", "be", "just", "wear", "out", "and", "not", "safe", "."]
(a0 / and
      :op1 (w0 / wear-01
            :ARG1 (i0 / it)
            :mod (j0 / just))
      :op2 (s0 / safe-01
            :ARG1 i0
            :polarity - ))

# ::snt I had the same problem as you.
# ::tokens ["I", "had", "the", "same", "problem", "as", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "DT", "JJ", "NN", "IN", "PRP", "."]
# ::lemmas ["i", "have", "the", "same", "problem", "as", "you", "."]
(h0 / have-03
      :ARG1 (p0 / problem
            :ARG1-of (s0 / same-01
                  :ARG2 (y0 / you)))
      :ARG0 (i0 / i))

# ::snt The simple answer is yes!
# ::tokens ["The", "simple", "answer", "is", "yes", "!"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "VBZ", "UH", "."]
# ::lemmas ["the", "simple", "answer", "be", "yes", "!"]
(a0 / answer-01
      :ARG1-of (y0 / yes)
      :ARG1-of (s0 / simple-02))

# ::snt I don't think there are any benefits.
# ::tokens ["I", "do", "n't", "think", "there", "are", "any", "benefits", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "EX", "VBP", "DT", "NNS", "."]
# ::lemmas ["i", "do", "not", "think", "there", "be", "any", "benefit", "."]
(t0 / think-01
      :ARG1 (b0 / benefit-01
            :mod (a0 / any))
      :ARG0 (i0 / i)
      :polarity - )

# ::snt Yes, you can do it.
# ::tokens ["Yes", ",", "you", "can", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "MD", "VB", "PRP", "."]
# ::lemmas ["yes", ",", "you", "can", "do", "it", "."]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (i0 / it)
            :ARG0 (y0 / you)))

# ::snt There are a few things I think you should do.
# ::tokens ["There", "are", "a", "few", "things", "I", "think", "you", "should", "do", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "JJ", "NNS", "PRP", "VBP", "PRP", "MD", "VB", "."]
# ::lemmas ["there", "be", "a", "few", "thing", "i", "think", "you", "should", "do", "."]
(t0 / think-01
      :ARG1 (r0 / recommend-01
            :ARG1 (d0 / do-02
                  :ARG0 y0
                  :ARG1 (t1 / thing
                        :quant (f0 / few)))
            :ARG2 (y0 / you))
      :ARG0 (i0 / i))

# ::snt There are a few reasons that paint wrinkles.
# ::tokens ["There", "are", "a", "few", "reasons", "that", "paint", "wrinkles", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "JJ", "NNS", "WDT", "VBP", "NNS", "."]
# ::lemmas ["there", "be", "a", "few", "reason", "that", "paint", "wrinkle", "."]
(w0 / wrinkle
      :ARG0-of (r0 / reason
            :quant (f0 / few))
      :ARG0-of (p0 / paint-03))

# ::snt I had this same situation.
# ::tokens ["I", "had", "this", "same", "situation", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBD", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "have", "this", "same", "situation", "."]
(h0 / have-03
      :ARG1 (s0 / situation
            :mod (t0 / this)
            :ARG1-of (s1 / same-01))
      :ARG0 (i0 / i))

# ::snt If the answer to any of these questions is yes, a PhD may be worthwhile for you.
# ::tokens ["If", "the", "answer", "to", "any", "of", "these", "questions", "is", "yes", ",", "a", "PhD", "may", "be", "worthwhile", "for", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "WORK_OF_ART", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "NN", "IN", "DT", "IN", "DT", "NNS", "VBZ", "UH", ",", "DT", "NN", "MD", "VB", "JJ", "IN", "PRP", "."]
# ::lemmas ["if", "the", "answer", "to", "any", "of", "these", "question", "be", "yes", ",", "a", "PhD", "may", "be", "worthwhile", "for", "you", "."]
(h0 / have-condition-91
      :ARG1 (a0 / answer-01
            :ARG1 (q0 / question-01
                  :mod (t0 / this)
                  :mod (a1 / any))
            :ARG2 (y0 / yes))
      :ARG1 (p0 / possible-01
            :ARG1 (w0 / worthwhile
                  :domain (P0 / PhD)
                  :beneficiary (y1 / you))))

# ::snt I have this habit as well.
# ::tokens ["I", "have", "this", "habit", "as", "well", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "NN", "RB", "RB", "."]
# ::lemmas ["i", "have", "this", "habit", "as", "well", "."]
(h0 / have-03
      :ARG1 (h1 / habit
            :mod (t0 / this))
      :ARG0 (i0 / i)
      :mod (a0 / as-well))

# ::snt You should listen to your boss, because you're not paid to tell the boss what to do.
# ::tokens ["You", "should", "listen", "to", "your", "boss", ",", "because", "you", "'re", "not", "paid", "to", "tell", "the", "boss", "what", "to", "do", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "IN", "PRP$", "NN", ",", "IN", "PRP", "VBP", "RB", "VBN", "TO", "VB", "DT", "NN", "WP", "TO", "VB", "."]
# ::lemmas ["you", "should", "listen", "to", "your", "boss", ",", "because", "you", "be", "not", "pay", "to", "tell", "the", "boss", "what", "to", "do", "."]
(r0 / recommend-01
      :ARG1 (l0 / listen-01
            :ARG0 c0
            :ARG0 (y0 / you
                  :ARG1-of (h0 / have-rel-role-91
                        :ARG0 p0
                        :ARG2 (b0 / boss))
                  :ARG0-of (t0 / tell-01
                        :ARG1 (t1 / thing)))
            :ARG1 (p0 / person))
      :ARG1-of (c0 / cause-01
            :ARG0 (p1 / pay-01
                  :ARG0 y0
                  :ARG3 t0
                  :polarity - )))

# ::snt i think it depends what you want:
# ::tokens ["i", "think", "it", "depends", "what", "you", "want", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "PRP", "VBZ", "WP", "PRP", "VBP", ":"]
# ::lemmas ["i", "think", "it", "depend", "what", "you", "want", ":"]
(t0 / think-01
      :ARG1 (d0 / depend-01
            :ARG1 (t1 / thing
                  :ARG1-of (w0 / want-01
                        :ARG0 (y0 / you)))
            :ARG0 (i1 / it))
      :ARG0 (i0 / i))

# ::snt You have no need to do anything.
# ::tokens ["You", "have", "no", "need", "to", "do", "anything", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "NN", "TO", "VB", "NN", "."]
# ::lemmas ["you", "have", "no", "need", "to", "do", "anything", "."]
(n0 / need-01
      :ARG1 (d0 / do-02
            :ARG0 y0
            :ARG1 (a0 / anything))
      :ARG0 (y0 / you)
      :polarity - )

# ::snt You can buy it on ebay for $25 and up.
# ::tokens ["You", "can", "buy", "it", "on", "ebay", "for", "$", "25", "and", "up", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "MONEY", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", "IN", "NNP", "IN", "$", "CD", "CC", "RB", "."]
# ::lemmas ["you", "can", "buy", "it", "on", "ebay", "for", "$", "25", "and", "up", "."]
(p0 / possible-01
      :ARG1 (b0 / buy-01
            :ARG1 (i0 / it)
            :ARG0 (y0 / you)
            :ARG3 (a0 / and
                  :op1 (m0 / monetary-quantity
                        :quant 25 
                        :unit (d0 / dollar))
                  :op2 (u0 / up))
            :medium (c0 / company
                  :name (n0 / name
                        :op1 "eBay" ))))

# ::snt My advice would be to try a variety of coffees that you can afford and find one you like.
# ::tokens ["My", "advice", "would", "be", "to", "try", "a", "variety", "of", "coffees", "that", "you", "can", "afford", "and", "find", "one", "you", "like", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP$", "NN", "MD", "VB", "TO", "VB", "DT", "NN", "IN", "NNS", "IN", "PRP", "MD", "VB", "CC", "VB", "NN", "PRP", "VBP", "."]
# ::lemmas ["my", "advice", "would", "be", "to", "try", "a", "variety", "of", "coffee", "that", "you", "can", "afford", "and", "find", "one", "you", "like", "."]
(a0 / advise-01
      :ARG1 (i0 / i)
      :ARG2 (a1 / and
            :op1 (t0 / try-01
                  :ARG1 (c0 / coffee
                        :mod (v0 / variety)
                        :ARG1-of (a2 / afford-01
                              :ARG0 y0
                              :ARG1-of (p0 / possible-01)))
                  :ARG0 (y0 / you
                        :ARG0-of (l0 / like-01
                              :ARG1 o0)))
            :op2 (f0 / find-01
                  :ARG0 c0
                  :ARG0 y0
                  :ARG1 (o0 / one))))

# ::snt Can you do this?
# ::tokens ["Can", "you", "do", "this", "?"]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["MD", "PRP", "VB", "DT", "."]
# ::lemmas ["can", "you", "do", "this", "?"]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (t0 / this)
            :ARG0 (y0 / you))
      :ARG1-of (a0 / amr-unknown))

# ::snt I'd say it depends on the ultimate outcome you want?
# ::tokens ["I", "'d", "say", "it", "depends", "on", "the", "ultimate", "outcome", "you", "want", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", "VBZ", "IN", "DT", "JJ", "NN", "PRP", "VBP", "."]
# ::lemmas ["i", "'d", "say", "it", "depend", "on", "the", "ultimate", "outcome", "you", "want", "?"]
(s0 / say-01
      :ARG1 (d0 / depend-01
            :ARG1 (o0 / outcome
                  :mod (u0 / ultimate)
                  :ARG1-of (w0 / want-01
                        :ARG0 (y0 / you)))
            :ARG0 (i1 / it))
      :ARG0 (i0 / i)
      :ARG1-of (a0 / amr-unknown))

# ::snt I am not sure this question would have made much sense to the Romans themselves.
# ::tokens ["I", "am", "not", "sure", "this", "question", "would", "have", "made", "much", "sense", "to", "the", "Romans", "themselves", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "NORP", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "JJ", "DT", "NN", "MD", "VB", "VBN", "JJ", "NN", "IN", "DT", "NNPS", "PRP", "."]
# ::lemmas ["i", "be", "not", "sure", "this", "question", "would", "have", "make", "much", "sense", "to", "the", "Romans", "themselves", "."]
(s0 / sure-02
      :ARG1 (s1 / sense-02
            :ARG1 (t0 / thing
                  :mod (t1 / this)
                  :ARG1-of (q0 / question-01))
            :ARG2 (m0 / much)
            :ARG2 (p0 / person
                  :mod (c0 / country
                        :name (n0 / name
                              :op1 "Rome" ))))
      :ARG0 (i0 / i)
      :polarity - )

# ::snt No you are not.
# ::tokens ["No", "you", "are", "not", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["UH", "PRP", "VBP", "RB", "."]
# ::lemmas ["no", "you", "be", "not", "."]
(h0 / have-polarity-91
      :ARG1 (y0 / you)
      :ARG2 - )

# ::snt I think it depends very much on the area.
# ::tokens ["I", "think", "it", "depends", "very", "much", "on", "the", "area", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "PRP", "VBZ", "RB", "RB", "IN", "DT", "NN", "."]
# ::lemmas ["i", "think", "it", "depend", "very", "much", "on", "the", "area", "."]
(t0 / think-01
      :ARG1 (d0 / depend-01
            :ARG1 (a0 / area)
            :ARG0 (i1 / it)
            :degree (m0 / much
                  :degree (v0 / very)))
      :ARG0 (i0 / i))

# ::snt It depends on what they are evaluating, and how.
# ::tokens ["It", "depends", "on", "what", "they", "are", "evaluating", ",", "and", "how", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "VBG", ",", "CC", "WRB", "."]
# ::lemmas ["it", "depend", "on", "what", "they", "be", "evaluate", ",", "and", "how", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (t0 / thing
                  :ARG1-of (e0 / evaluate-01
                        :ARG0 (t2 / they)))
            :op2 (t1 / thing))
      :ARG0 (i0 / it))

# ::snt There's not that much that you can do with a sourdough starter.
# ::tokens ["There", "'s", "not", "that", "much", "that", "you", "can", "do", "with", "a", "sourdough", "starter", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBZ", "RB", "RB", "JJ", "IN", "PRP", "MD", "VB", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["there", "be", "not", "that", "much", "that", "you", "can", "do", "with", "a", "sourdough", "starter", "."]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (m0 / much
                  :polarity - 
                  :degree (t0 / that))
            :ARG0 (y0 / you)
            :ARG2 (p1 / person
                  :ARG0-of (s0 / start-01
                        :ARG1 (s1 / sourdough)))))

# ::snt Th answer to you problem is that you dont actually know what you're getting in .
# ::tokens ["Th", "answer", "to", "you", "problem", "is", "that", "you", "do", "nt", "actually", "know", "what", "you", "'re", "getting", "in", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VBZ", "NN", "IN", "PRP", "VBP", "VBZ", "IN", "PRP", "VBP", "RB", "RB", "VB", "WP", "PRP", "VBP", "VBG", "RB", "."]
# ::lemmas ["th", "answer", "to", "you", "problem", "be", "that", "you", "do", "not", "actually", "know", "what", "you", "be", "get", "in", "."]
(a0 / answer-01
      :ARG2 (p0 / problem
            :poss (y0 / you
                  :ARG0-of (g0 / get-05
                        :ARG2 t0)))
      :ARG2 (k0 / know-01
            :ARG0 y0
            :ARG1 (t0 / thing)
            :ARG1-of (a1 / actual-02)
            :polarity - ))

# ::snt This is probably not a good idea but I will suggest it anyhow.
# ::tokens ["This", "is", "probably", "not", "a", "good", "idea", "but", "I", "will", "suggest", "it", "anyhow", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "RB", "RB", "DT", "JJ", "NN", "CC", "PRP", "MD", "VB", "PRP", "RB", "."]
# ::lemmas ["this", "be", "probably", "not", "a", "good", "idea", "but", "i", "will", "suggest", "it", "anyhow", "."]
(h0 / have-concession-91
      :ARG1 (s0 / suggest-01
            :ARG1 (i0 / it)
            :ARG0 (i1 / i)
            :mod (a0 / anyhow))
      :ARG2 (p0 / probable
            :domain (i2 / idea
                  :ARG1-of (g0 / good-02
                        :polarity - )
                  :domain (t0 / this))))

# ::snt I'd say it depends what conditions you have.
# ::tokens ["I", "'d", "say", "it", "depends", "what", "conditions", "you", "have", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", "VBZ", "WP", "NNS", "PRP", "VBP", "."]
# ::lemmas ["i", "'d", "say", "it", "depend", "what", "condition", "you", "have", "."]
(s0 / say-01
      :ARG1 (d0 / depend-01
            :ARG1 (t0 / thing
                  :ARG2-of (c0 / condition-01
                        :ARG1-of (h0 / have-03
                              :ARG0 (y0 / you))))
            :ARG0 (i1 / it))
      :ARG0 (i0 / i))

# ::snt I have the same situation and have traveled extensively.
# ::tokens ["I", "have", "the", "same", "situation", "and", "have", "traveled", "extensively", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "JJ", "NN", "CC", "VBP", "VBN", "RB", "."]
# ::lemmas ["i", "have", "the", "same", "situation", "and", "have", "travel", "extensively", "."]
(a0 / and
      :op1 (h0 / have-03
            :ARG1 (s0 / situation
                  :ARG1-of (s1 / same-01))
            :ARG0 (i0 / i))
      :op2 (t0 / travel-01
            :ARG0 i0
            :ARG1-of (e0 / extensive-03)))

# ::snt You can still use it for practice.
# ::tokens ["You", "can", "still", "use", "it", "for", "practice", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "RB", "VB", "PRP", "IN", "NN", "."]
# ::lemmas ["you", "can", "still", "use", "it", "for", "practice", "."]
(p0 / possible-01
      :ARG1 (u0 / use-01
            :ARG1 (i0 / it)
            :ARG0 (y0 / you)
            :mod (s0 / still)
            :ARG2 (p1 / practice-01
                  :ARG0 y0)))

# ::snt It depends how you're stating it.
# ::tokens ["It", "depends", "how", "you", "'re", "stating", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "WRB", "PRP", "VBP", "VBG", "PRP", "."]
# ::lemmas ["it", "depend", "how", "you", "be", "state", "it", "."]
(d0 / depend-01
      :ARG1 (t0 / thing
            :manner-of (s0 / state-01
                  :ARG1 i0
                  :ARG0 (y0 / you)))
      :ARG0 (i0 / it))

# ::snt I've had this problem while working in a pubs.
# ::tokens ["I", "'ve", "had", "this", "problem", "while", "working", "in", "a", "pubs", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VB", "VBN", "DT", "NN", "IN", "VBG", "IN", "DT", "NNS", "."]
# ::lemmas ["i", "have", "have", "this", "problem", "while", "work", "in", "a", "pub", "."]
(h0 / have-03
      :ARG1 (p0 / problem
            :mod (t0 / this))
      :ARG0 (i0 / i)
      :time (w0 / work-01
            :ARG0 i0
            :ARG2 (p1 / pub)))

# ::snt It depends on the sauce and the result you want.
# ::tokens ["It", "depends", "on", "the", "sauce", "and", "the", "result", "you", "want", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "DT", "NN", "CC", "DT", "NN", "PRP", "VBP", "."]
# ::lemmas ["it", "depend", "on", "the", "sauce", "and", "the", "result", "you", "want", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (s0 / sauce)
            :op2 (t0 / thing
                  :ARG1-of (w0 / want-01
                        :ARG0 (y0 / you))
                  :ARG2-of (r0 / result-01)))
      :ARG0 (i0 / it))

# ::snt You have to do what is right for you.
# ::tokens ["You", "have", "to", "do", "what", "is", "right", "for", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "WP", "VBZ", "JJ", "IN", "PRP", "."]
# ::lemmas ["you", "have", "to", "do", "what", "be", "right", "for", "you", "."]
(o0 / obligate-01
      :ARG2 (y0 / you
            :ARG1-of (r0 / right-02
                  :ARG1 t0))
      :ARG2 (d0 / do-02
            :ARG0 y0
            :ARG1 r0
            :ARG1 (t0 / thing)))

# ::snt Yes, I believe it's a good idea.
# ::tokens ["Yes", ",", "I", "believe", "it", "'s", "a", "good", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "VBP", "PRP", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["yes", ",", "i", "believe", "it", "be", "a", "good", "idea", "."]
(b0 / believe-01
      :ARG1 (i0 / idea
            :ARG1-of (i2 / it)
            :ARG1-of (g0 / good-02))
      :ARG0 (i1 / i))

# ::snt If you do not have a very strong scientific reason to do it, don't.
# ::tokens ["If", "you", "do", "not", "have", "a", "very", "strong", "scientific", "reason", "to", "do", "it", ",", "do", "n't", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "PRP", "VBP", "RB", "VB", "DT", "RB", "JJ", "JJ", "NN", "TO", "VB", "PRP", ",", "VB", "RB", "."]
# ::lemmas ["if", "you", "do", "not", "have", "a", "very", "strong", "scientific", "reason", "to", "do", "it", ",", "do", "not", "."]
(d0 / do-02
      :ARG0 (y0 / you)
      :polarity - 
      :mode imperative 
      :condition (h0 / have-03
            :ARG0 y0
            :ARG1 (r0 / reason
                  :mod (s0 / science)
                  :ARG1-of (s1 / strong-02
                        :degree (v0 / very))
                  :purpose (c0 / cause-01
                        :ARG1 (d1 / do-02
                              :ARG1 (i0 / it))))
            :polarity - ))

# ::snt Personally, I would say not unless it suits you.
# ::tokens ["Personally", ",", "I", "would", "say", "not", "unless", "it", "suits", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", ",", "PRP", "MD", "VB", "RB", "IN", "PRP", "VBZ", "PRP", "."]
# ::lemmas ["personally", ",", "i", "would", "say", "not", "unless", "it", "suit", "you", "."]
(s0 / say-01
      :ARG1 (f0 / fair-01
            :ARG1 (i1 / it)
            :ARG2 (y0 / you)
            :polarity - )
      :ARG0 (i0 / i)
      :ARG1-of (p0 / personal-02)
      :polarity - )

# ::snt I would say it is impossible to know, so don't risk it.
# ::tokens ["I", "would", "say", "it", "is", "impossible", "to", "know", ",", "so", "do", "n't", "risk", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", "VBZ", "JJ", "TO", "VB", ",", "RB", "VB", "RB", "VB", "PRP", "."]
# ::lemmas ["i", "would", "say", "it", "be", "impossible", "to", "know", ",", "so", "do", "not", "risk", "it", "."]
(s0 / say-01
      :ARG1 (p0 / possible-01
            :ARG1 (k0 / know-01)
            :polarity - )
      :ARG0 (i0 / i)
      :ARG0-of (c0 / cause-01
            :ARG1 (r0 / risk-01
                  :ARG1 k0
                  :ARG0 (y0 / you)
                  :mode - 
                  :mode imperative )))

# ::snt This answer is based on experience I did not researched for references.
# ::tokens ["This", "answer", "is", "based", "on", "experience", "I", "did", "not", "researched", "for", "references", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "VBZ", "VBN", "IN", "NN", "PRP", "VBD", "RB", "VBN", "IN", "NNS", "."]
# ::lemmas ["this", "answer", "be", "base", "on", "experience", "i", "do", "not", "research", "for", "reference", "."]
(b0 / base-02
      :ARG1 (t0 / thing
            :mod (t1 / this)
            :ARG1-of (a0 / answer-01))
      :ARG2 (e0 / experience-01
            :ARG1-of (r0 / research-01
                  :ARG0 (i0 / i)
                  :polarity - 
                  :purpose (r1 / reference-04
                        :ARG0 i0))))

# ::snt It depends on what you want to achieve.
# ::tokens ["It", "depends", "on", "what", "you", "want", "to", "achieve", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "TO", "VB", "."]
# ::lemmas ["it", "depend", "on", "what", "you", "want", "to", "achieve", "."]
(d0 / depend-01
      :ARG1 (t0 / thing
            :ARG1-of (a0 / achieve-01
                  :ARG0 (y0 / you)
                  :ARG1-of (w0 / want-01
                        :ARG0 y0)))
      :ARG0 (i0 / it))

# ::snt Work with your supervisor and your team to solve the problem.
# ::tokens ["Work", "with", "your", "supervisor", "and", "your", "team", "to", "solve", "the", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "IN", "PRP$", "NN", "CC", "PRP$", "NN", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["work", "with", "your", "supervisor", "and", "your", "team", "to", "solve", "the", "problem", "."]
(w0 / work-01
      :ARG1 (s0 / solve-01
            :ARG1 (p0 / problem))
      :ARG0 (a0 / and
            :op1 (p1 / person)
            :op2 (t0 / team
                  :poss y0))
      :ARG0 (y0 / you
            :ARG1-of (h0 / have-rel-role-91
                  :ARG0 p1
                  :ARG2 (s1 / supervisor)))
      :mode imperative )

# ::snt Valid reasons to feel the way you do, but not a reason to resign.
# ::tokens ["Valid", "reasons", "to", "feel", "the", "way", "you", "do", ",", "but", "not", "a", "reason", "to", "resign", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "NNS", "TO", "VB", "DT", "NN", "PRP", "VBP", ",", "CC", "RB", "DT", "NN", "TO", "VB", "."]
# ::lemmas ["valid", "reason", "to", "feel", "the", "way", "you", "do", ",", "but", "not", "a", "reason", "to", "resign", "."]
(c0 / contrast-01
      :ARG1 (r0 / reason
            :ARG0-of (c1 / cause-01
                  :ARG1 (f0 / feel-01
                        :ARG1 (y0 / you
                              :ARG0-of (f1 / feel-01
                                    :manner w0))
                        :ARG1 (w0 / way))
                  :ARG1 (r2 / resign-01)))
      :ARG1 (v0 / valid-02
            :ARG1 - 
            :ARG1 (r1 / reason)))

# ::snt It depends on how the term is used I think.
# ::tokens ["It", "depends", "on", "how", "the", "term", "is", "used", "I", "think", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WRB", "DT", "NN", "VBZ", "VBN", "PRP", "VBP", "."]
# ::lemmas ["it", "depend", "on", "how", "the", "term", "be", "use", "i", "think", "."]
(t0 / think-01
      :ARG1 (d0 / depend-01
            :ARG1 (h0 / have-manner-91
                  :ARG1 (u0 / use-01
                        :ARG1 (t1 / term))))
      :ARG0 (i0 / i))

# ::snt You've pretty much answered your own question.
# ::tokens ["You", "'ve", "pretty", "much", "answered", "your", "own", "question", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VB", "RB", "RB", "VBN", "PRP$", "JJ", "NN", "."]
# ::lemmas ["you", "have", "pretty", "much", "answer", "your", "own", "question", "."]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 y0)
      :ARG0 (y0 / you)
      :degree (p0 / pretty-much))

# ::snt The more you sweat, the faster you will burn calories and fat.
# ::tokens ["The", "more", "you", "sweat", ",", "the", "faster", "you", "will", "burn", "calories", "and", "fat", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "RBR", "PRP", "VBP", ",", "DT", "RBR", "PRP", "MD", "VB", "NNS", "CC", "NN", "."]
# ::lemmas ["the", "more", "you", "sweat", ",", "the", "fast", "you", "will", "burn", "calorie", "and", "fat", "."]
(c0 / correlate-91
      :ARG1 (m0 / more
            :ARG3-of (h0 / have-quant-91
                  :ARG1 (d0 / dry-02
                        :ARG0 (y0 / you))))
      :ARG2 (m1 / more
            :ARG3-of (h1 / have-degree-91
                  :ARG1 (f0 / fast-02)
                  :ARG1 (b0 / burn-01
                        :ARG0 y0
                        :ARG1 (a0 / and
                              :op1 (c1 / calorie)
                              :op2 (f1 / fat))))))

# ::snt I would look at this way:
# ::tokens ["I", "would", "look", "at", "this", "way", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "IN", "DT", "NN", ":"]
# ::lemmas ["i", "would", "look", "at", "this", "way", ":"]
(l0 / look-01
      :ARG1 (t0 / this)
      :ARG0 (i0 / i)
      :manner (w0 / way))

# ::snt It is up to you whether you want to do that.
# ::tokens ["It", "is", "up", "to", "you", "whether", "you", "want", "to", "do", "that", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "IN", "PRP", "IN", "PRP", "VBP", "TO", "VB", "DT", "."]
# ::lemmas ["it", "be", "up", "to", "you", "whether", "you", "want", "to", "do", "that", "."]
(d0 / depend-01
      :ARG1 (t0 / truth-value
            :polarity-of (w0 / want-01
                  :ARG0 y0
                  :ARG1 d1))
      :ARG1 (y0 / you
            :ARG0-of (d1 / do-02
                  :ARG1 (t1 / that))))

# ::snt It is difficult, if not impossible, to give a complete answer to this question.
# ::tokens ["It", "is", "difficult", ",", "if", "not", "impossible", ",", "to", "give", "a", "complete", "answer", "to", "this", "question", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "JJ", ",", "IN", "RB", "JJ", ",", "TO", "VB", "DT", "JJ", "NN", "IN", "DT", "NN", "."]
# ::lemmas ["it", "be", "difficult", ",", "if", "not", "impossible", ",", "to", "give", "a", "complete", "answer", "to", "this", "question", "."]
(d0 / difficult
      :domain (p0 / possible-01
            :polarity - )
      :domain (g0 / give-01
            :ARG1 (a0 / answer-01
                  :ARG1 (q0 / question-01
                        :mod (t0 / this))
                  :ARG1-of (c0 / complete-02))))

# ::snt This gives you the opportunity to make your case that you really do have expertise in XXX.
# ::tokens ["This", "gives", "you", "the", "opportunity", "to", "make", "your", "case", "that", "you", "really", "do", "have", "expertise", "in", "XXX", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["DT", "VBZ", "PRP", "DT", "NN", "TO", "VB", "PRP$", "NN", "IN", "PRP", "RB", "VBP", "VB", "NN", "IN", "NNP", "."]
# ::lemmas ["this", "give", "you", "the", "opportunity", "to", "make", "your", "case", "that", "you", "really", "do", "have", "expertise", "in", "XXX", "."]
(g0 / give-01
      :ARG1 (o0 / opportunity
            :topic (c0 / case-03
                  :ARG0 y0
                  :ARG1 e0
                  :ARG1-of (h0 / have-03
                        :ARG1 e0
                        :ARG1-of (r0 / real-04))))
      :ARG0 (t0 / this)
      :ARG2 (y0 / you
            :ARG1-of (e0 / expert-01
                  :ARG2 (p0 / person
                        :name (n0 / name
                              :op1 "XXX" )))))

# ::snt Yes, you should make a résumé.
# ::tokens ["Yes", ",", "you", "should", "make", "a", "r\u00e9sum\u00e9", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "MD", "VB", "DT", "NN", "."]
# ::lemmas ["yes", ",", "you", "should", "make", "a", "r\u00e9sum\u00e9", "."]
(r0 / recommend-01
      :ARG1 (m0 / make-01
            :ARG1 (r1 / résumé)
            :ARG0 (y0 / you)))

# ::snt I think that's a great plan.
# ::tokens ["I", "think", "that", "'s", "a", "great", "plan", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "think", "that", "be", "a", "great", "plan", "."]
(t0 / think-01
      :ARG1 (p0 / plan-01
            :ARG1 (t1 / that)
            :mod (g0 / great))
      :ARG0 (i0 / i))

# ::snt I'm going to be very direct here.
# ::tokens ["I", "'m", "going", "to", "be", "very", "direct", "here", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "VBG", "TO", "VB", "RB", "JJ", "RB", "."]
# ::lemmas ["i", "be", "go", "to", "be", "very", "direct", "here", "."]
(d0 / direct-01
      :ARG1 (i0 / i)
      :location (h0 / here)
      :degree (v0 / very))

# ::snt You do not need a transit visa, but to enter Zurich you will need a visa.
# ::tokens ["You", "do", "not", "need", "a", "transit", "visa", ",", "but", "to", "enter", "Zurich", "you", "will", "need", "a", "visa", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "DT", "NN", "NN", ",", "CC", "TO", "VB", "NNP", "PRP", "MD", "VB", "DT", "NN", "."]
# ::lemmas ["you", "do", "not", "need", "a", "transit", "visa", ",", "but", "to", "enter", "Zurich", "you", "will", "need", "a", "visa", "."]
(c0 / contrast-01
      :ARG1 (n0 / need-01
            :ARG1 (v0 / visa
                  :mod (t0 / transit))
            :ARG0 (y0 / you)
            :polarity - )
      :ARG2 (n1 / need-01
            :ARG0 y0
            :ARG1 (v1 / visa
                  :ARG0 y0)
            :purpose (e0 / enter-01
                  :ARG0 y0
                  :ARG1 (c1 / city
                        :name (n2 / name
                              :op1 "Zurich" )))))

# ::snt You don't have to know.
# ::tokens ["You", "do", "n't", "have", "to", "know", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "."]
# ::lemmas ["you", "do", "not", "have", "to", "know", "."]
(o0 / obligate-01
      :ARG1 (y0 / you)
      :ARG2 (k0 / know-01
            :ARG0 y0)
      :polarity - )

# ::snt Nope that will not work.
# ::tokens ["Nope", "that", "will", "not", "work", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", "DT", "MD", "RB", "VB", "."]
# ::lemmas ["nope", "that", "will", "not", "work", "."]
(w0 / work-09
      :ARG1 (t0 / that)
      :polarity - )

# ::snt The best thing you can do is find something else interesting to do while you wait on hold.
# ::tokens ["The", "best", "thing", "you", "can", "do", "is", "find", "something", "else", "interesting", "to", "do", "while", "you", "wait", "on", "hold", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJS", "NN", "PRP", "MD", "VB", "VBZ", "VB", "NN", "RB", "JJ", "TO", "VB", "IN", "PRP", "VBP", "IN", "NN", "."]
# ::lemmas ["the", "good", "thing", "you", "can", "do", "be", "find", "something", "else", "interesting", "to", "do", "while", "you", "wait", "on", "hold", "."]
(t0 / thing
      :ARG1-of (h0 / have-degree-91
            :ARG3 (m0 / most))
      :ARG1-of (g0 / good-02)
      :domain (d0 / do-02
            :ARG0 (y0 / you)
            :ARG1-of (p0 / possible-01)
            :ARG2 (s0 / something
                  :mod (e0 / else)
                  :ARG2-of (i0 / interest-01))
            :time (w0 / wait-01
                  :ARG1 y0
                  :ARG2 (h1 / hold))))

# ::snt Personally when I was in a similar situation I sent the couple a card and a gift.
# ::tokens ["Personally", "when", "I", "was", "in", "a", "similar", "situation", "I", "sent", "the", "couple", "a", "card", "and", "a", "gift", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "WRB", "PRP", "VBD", "IN", "DT", "JJ", "NN", "PRP", "VBD", "DT", "NN", "DT", "NN", "CC", "DT", "NN", "."]
# ::lemmas ["personally", "when", "i", "be", "in", "a", "similar", "situation", "i", "send", "the", "couple", "a", "card", "and", "a", "gift", "."]
(s0 / send-01
      :ARG1 (a0 / and
            :op1 (c1 / card)
            :op2 (g0 / gift))
      :ARG0 (i0 / i)
      :ARG1-of (p0 / personal-02)
      :ARG2 (c0 / couple)
      :time (b0 / be-located-at-91
            :ARG1 i0
            :ARG2 (s1 / situation
                  :ARG1-of (r0 / resemble-01))))

# ::snt You could probably get a tour agency to do it for you but it would cost you.
# ::tokens ["You", "could", "probably", "get", "a", "tour", "agency", "to", "do", "it", "for", "you", "but", "it", "would", "cost", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "RB", "VB", "DT", "NN", "NN", "TO", "VB", "PRP", "IN", "PRP", "CC", "PRP", "MD", "VB", "PRP", "."]
# ::lemmas ["you", "could", "probably", "get", "a", "tour", "agency", "to", "do", "it", "for", "you", "but", "it", "would", "cost", "you", "."]
(c0 / contrast-01
      :ARG1 (c1 / cost-01
            :ARG1 (i0 / it)
            :ARG3 (y0 / you
                  :beneficiary-of (d0 / do-02)))
      :ARG1 (p0 / possible-01
            :ARG1 (g0 / get-01
                  :ARG0 y0
                  :ARG1 d0
                  :mod (a0 / agency
                        :mod (t0 / tour))
                  :mod (p1 / probable))))

# ::snt It is important to keep the story in the scope of your limit.
# ::tokens ["It", "is", "important", "to", "keep", "the", "story", "in", "the", "scope", "of", "your", "limit", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "JJ", "TO", "VB", "DT", "NN", "IN", "DT", "NN", "IN", "PRP$", "NN", "."]
# ::lemmas ["it", "be", "important", "to", "keep", "the", "story", "in", "the", "scope", "of", "your", "limit", "."]
(i0 / important-01
      :ARG1 (k0 / keep-02
            :ARG1 (s0 / story)
            :location (s1 / scope
                  :poss (l0 / limit
                        :poss (y0 / you)))))

# ::snt If the conversation is not about work, you know what the answer is to your own question.
# ::tokens ["If", "the", "conversation", "is", "not", "about", "work", ",", "you", "know", "what", "the", "answer", "is", "to", "your", "own", "question", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "DT", "NN", "VBZ", "RB", "IN", "NN", ",", "PRP", "VBP", "WP", "DT", "NN", "VBZ", "IN", "PRP$", "JJ", "NN", "."]
# ::lemmas ["if", "the", "conversation", "be", "not", "about", "work", ",", "you", "know", "what", "the", "answer", "be", "to", "your", "own", "question", "."]
(k0 / know-01
      :ARG1 (t0 / thing
            :ARG2-of (a0 / answer-01
                  :ARG1 q0))
      :ARG0 (y0 / you
            :ARG0-of (q0 / question-01))
      :condition (c0 / concern-02
            :ARG1 (w0 / work-01)
            :ARG0 (c1 / converse-01)
            :polarity - ))

# ::snt I would recommend looking at The Motley Fool.
# ::tokens ["I", "would", "recommend", "looking", "at", "The", "Motley", "Fool", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "FAC", "FAC", "FAC", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "B", "I", "I", "O"]
# ::pos_tags ["PRP", "MD", "VB", "VBG", "IN", "DT", "NNP", "NNP", "."]
# ::lemmas ["i", "would", "recommend", "look", "at", "The", "Motley", "Fool", "."]
(r0 / recommend-01
      :ARG1 (l0 / look-01
            :ARG1 (b0 / broadcast-program
                  :name (n0 / name
                        :op1 "The" 
                        :op2 "Motley" 
                        :op3 "Fool" )))
      :ARG0 (i0 / i))

# ::snt You can do it, too.
# ::tokens ["You", "can", "do", "it", ",", "too", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", ",", "RB", "."]
# ::lemmas ["you", "can", "do", "it", ",", "too", "."]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (i0 / it)
            :ARG0 (y0 / you)
            :mod (t0 / too)))

# ::snt You will have to start with the clinic., and maybe move on to the insurance company.
# ::tokens ["You", "will", "have", "to", "start", "with", "the", "clinic", ".", ",", "and", "maybe", "move", "on", "to", "the", "insurance", "company", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "TO", "VB", "IN", "DT", "NN", ".", ",", "CC", "RB", "VB", "IN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["you", "will", "have", "to", "start", "with", "the", "clinic", ".", ",", "and", "maybe", "move", "on", "to", "the", "insurance", "company", "."]
(o0 / obligate-01
      :ARG2 (a0 / and
            :op1 (s0 / start-01
                  :ARG0 y0
                  :ARG2 (c0 / clinic))
            :op2 (p0 / possible-01
                  :ARG0 y0
                  :ARG1 m0))
      :ARG1 (y0 / you
            :ARG0-of (m0 / move-01
                  :ARG2 (c1 / company
                        :ARG0-of (i0 / insure-02)))))

# ::snt The key thing you need to do in this meeting is listen.
# ::tokens ["The", "key", "thing", "you", "need", "to", "do", "in", "this", "meeting", "is", "listen", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJ", "NN", "PRP", "VBP", "TO", "VB", "IN", "DT", "NN", "VBZ", "VB", "."]
# ::lemmas ["the", "key", "thing", "you", "need", "to", "do", "in", "this", "meeting", "be", "listen", "."]
(t0 / thing
      :ARG1-of (k0 / key-02)
      :ARG1-of (l0 / listen-01
            :ARG0 (y0 / you)
            :ARG1-of (n0 / need-01
                  :ARG0 y0
                  :location (m0 / meet-03
                        :mod (t1 / this)))))

# ::snt "My answer to your question is ""Probably Not""."
# ::tokens ["\"", "My", "answer", "to", "your", "question", "is", "\"", "\"", "Probably", "Not", "\"", "\"", ".", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "WORK_OF_ART", "WORK_OF_ART", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "I", "O", "O", "O", "O"]
# ::pos_tags ["``", "PRP$", "NN", "IN", "PRP$", "NN", "VBZ", "``", "``", "RB", "RB", "''", "''", ".", "''"]
# ::lemmas ["\"", "my", "answer", "to", "your", "question", "be", "\"", "\"", "Probably", "Not", "\"", "\"", ".", "\""]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 (y0 / you))
      :ARG0 (i0 / i)
      :ARG2 (h0 / have-polarity-91
            :mod (p0 / probable)
            :ARG2 - ))

# ::snt It depends on what you want to do next, and where you want to do it.
# ::tokens ["It", "depends", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "TO", "VB", "RB", ",", "CC", "WRB", "PRP", "VBP", "TO", "VB", "PRP", "."]
# ::lemmas ["it", "depend", "on", "what", "you", "want", "to", "do", "next", ",", "and", "where", "you", "want", "to", "do", "it", "."]
(d0 / depend-01
      :ARG1 (a0 / and
            :op1 (t0 / thing
                  :ARG1-of (d1 / do-02
                        :ARG0 (y0 / you)
                        :time (n0 / next)))
            :op2 (l0 / location
                  :location-of (w0 / want-01
                        :ARG1 d1
                        :ARG0 y0)))
      :ARG0 (i0 / it))

# ::snt Yes, that is exactly what it means.
# ::tokens ["Yes", ",", "that", "is", "exactly", "what", "it", "means", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "DT", "VBZ", "RB", "WP", "PRP", "VBZ", "."]
# ::lemmas ["yes", ",", "that", "be", "exactly", "what", "it", "mean", "."]
(m0 / mean-01
      :ARG1 (t0 / that)
      :mod (e0 / exact))

# ::snt One idea is cleaning the coffee residue from the coffee pot.
# ::tokens ["One", "idea", "is", "cleaning", "the", "coffee", "residue", "from", "the", "coffee", "pot", "."]
# ::ner_tags ["CARDINAL", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["CD", "NN", "VBZ", "VBG", "DT", "NN", "NN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["One", "idea", "be", "clean", "the", "coffee", "residue", "from", "the", "coffee", "pot", "."]
(c0 / clean-01
      :ARG1 (r0 / residue
            :mod (c1 / coffee))
      :ARG0 (i0 / idea
            :quant 1 )
      :ARG2 (p0 / pot
            :mod (c2 / coffee)))

# ::snt They can, but the way to do it depends on what you have available.
# ::tokens ["They", "can", ",", "but", "the", "way", "to", "do", "it", "depends", "on", "what", "you", "have", "available", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", ",", "CC", "DT", "NN", "TO", "VB", "PRP", "VBZ", "IN", "WP", "PRP", "VBP", "JJ", "."]
# ::lemmas ["they", "can", ",", "but", "the", "way", "to", "do", "it", "depend", "on", "what", "you", "have", "available", "."]
(c0 / contrast-01
      :ARG1 (d0 / depend-01
            :ARG1 (t0 / thing
                  :ARG2-of (a0 / available-02
                        :ARG1 (h0 / have-03
                              :ARG0 (y0 / you))))
            :ARG0 (w0 / way))
      :ARG1 (p0 / possible-01
            :ARG1 (d1 / do-02
                  :ARG1 (i0 / it)
                  :ARG0 (t1 / they))))

# ::snt Not much you can do besides:
# ::tokens ["Not", "much", "you", "can", "do", "besides", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "RB", "PRP", "MD", "VB", "RB", "."]
# ::lemmas ["not", "much", "you", "can", "do", "besides", ":"]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (m0 / much
                  :polarity - )
            :ARG0 (y0 / you)
            :ARG2-of (e0 / except-01)))

# ::snt This is a big problem.
# ::tokens ["This", "is", "a", "big", "problem", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["this", "be", "a", "big", "problem", "."]
(p0 / problem
      :mod (b0 / big)
      :domain (t0 / this))

# ::snt This is a part answer to your question
# ::tokens ["This", "is", "a", "part", "answer", "to", "your", "question"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "DT", "NN", "NN", "IN", "PRP$", "NN"]
# ::lemmas ["this", "be", "a", "part", "answer", "to", "your", "question"]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 (y0 / you))
      :ARG0 (t0 / this)
      :degree (p0 / part))

# ::snt You are not required to file a tax return in Canada if you have no taxable income.
# ::tokens ["You", "are", "not", "required", "to", "file", "a", "tax", "return", "in", "Canada", "if", "you", "have", "no", "taxable", "income", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "GPE", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VBN", "TO", "VB", "DT", "NN", "NN", "IN", "NNP", "IN", "PRP", "VBP", "DT", "JJ", "NN", "."]
# ::lemmas ["you", "be", "not", "require", "to", "file", "a", "tax", "return", "in", "Canada", "if", "you", "have", "no", "taxable", "income", "."]
(r0 / require-01
      :ARG1 (f0 / file-01
            :ARG0 y0
            :ARG1 (r1 / return-02
                  :ARG1 (t0 / tax-01))
            :ARG4 (c0 / country
                  :name (n0 / name
                        :op1 "Canada" )))
      :ARG2 (y0 / you)
      :polarity - 
      :condition (h0 / have-03
            :ARG0 y0
            :ARG1 (i0 / income
                  :ARG1-of (t1 / tax-01))
            :polarity - ))

# ::snt If what you are looking for is much higher, they get the picture.
# ::tokens ["If", "what", "you", "are", "looking", "for", "is", "much", "higher", ",", "they", "get", "the", "picture", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "WP", "PRP", "VBP", "VBG", "IN", "VBZ", "RB", "JJR", ",", "PRP", "VBP", "DT", "NN", "."]
# ::lemmas ["if", "what", "you", "be", "look", "for", "be", "much", "high", ",", "they", "get", "the", "picture", "."]
(g0 / get-01
      :ARG1 (p0 / picture)
      :ARG0 (t0 / they)
      :condition (t1 / thing
            :ARG1-of (l0 / look-01
                  :ARG0 (y0 / you))
            :ARG1-of (h0 / have-degree-91
                  :ARG2 h1
                  :ARG3 (m0 / more
                        :quant (m1 / much)))
            :ARG1-of (h1 / high-02)))

# ::snt Yes, you can do exactly what you want to do.
# ::tokens ["Yes", ",", "you", "can", "do", "exactly", "what", "you", "want", "to", "do", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "MD", "VB", "RB", "WP", "PRP", "VBP", "TO", "VB", "."]
# ::lemmas ["yes", ",", "you", "can", "do", "exactly", "what", "you", "want", "to", "do", "."]
(p0 / possible-01
      :ARG1 (d0 / do-02
            :ARG1 (t0 / thing
                  :ARG1-of (e0 / exact)
                  :ARG1-of (d1 / do-02
                        :ARG0 y0))
            :ARG0 (y0 / you
                  :ARG0-of (w0 / want-01
                        :ARG1 d1))))

# ::snt If not, don't do that and spend that time with something you like to do.
# ::tokens ["If", "not", ",", "do", "n't", "do", "that", "and", "spend", "that", "time", "with", "something", "you", "like", "to", "do", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "RB", ",", "VB", "RB", "VB", "DT", "CC", "VB", "DT", "NN", "IN", "NN", "PRP", "VBP", "TO", "VB", "."]
# ::lemmas ["if", "not", ",", "do", "not", "do", "that", "and", "spend", "that", "time", "with", "something", "you", "like", "to", "do", "."]
(h0 / have-condition-91
      :ARG1 (a0 / and
            :op1 (d0 / do-02
                  :ARG0 (y0 / you
                        :ARG0-of (d1 / do-02)
                        :ARG0-of (l0 / like-02
                              :ARG1 d1))
                  :mode imperative 
                  :ARG1 (t0 / that))
            :op2 (s0 / spend-02
                  :ARG0 y0
                  :ARG1 - 
                  :ARG1 (t1 / time
                        :mod (t2 / that))
                  :ARG2 (s1 / something)))
      :ARG2 (h1 / have-polarity-91
            :ARG2 - ))

# ::snt The answer to your question is not really.
# ::tokens ["The", "answer", "to", "your", "question", "is", "not", "really", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "PRP$", "NN", "VBZ", "RB", "RB", "."]
# ::lemmas ["the", "answer", "to", "your", "question", "be", "not", "really", "."]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 (y0 / you))
      :ARG1-of (r0 / real-04
            :polarity - ))

# ::snt You don't, it will not work.
# ::tokens ["You", "do", "n't", ",", "it", "will", "not", "work", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", ",", "PRP", "MD", "RB", "VB", "."]
# ::lemmas ["you", "do", "not", ",", "it", "will", "not", "work", "."]
(a0 / and
      :op1 (d0 / do-02
            :ARG0 (y0 / you)
            :polarity - )
      :op2 (w0 / work-09
            :ARG1 (i0 / it)
            :polarity - ))

# ::snt It's a good idea to do both.
# ::tokens ["It", "'s", "a", "good", "idea", "to", "do", "both", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "DT", "JJ", "NN", "TO", "VB", "DT", "."]
# ::lemmas ["it", "be", "a", "good", "idea", "to", "do", "both", "."]
(i0 / idea
      :ARG1-of (g0 / good-02)
      :domain (d0 / do-02
            :ARG1 (b0 / both)))

# ::snt There are a lot of ways that could go poorly for you.
# ::tokens ["There", "are", "a", "lot", "of", "ways", "that", "could", "go", "poorly", "for", "you", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "NN", "IN", "NNS", "WDT", "MD", "VB", "RB", "IN", "PRP", "."]
# ::lemmas ["there", "be", "a", "lot", "of", "way", "that", "could", "go", "poorly", "for", "you", "."]
(w0 / way
      :quant (l0 / lot)
      :manner-of (g0 / go-06
            :ARG2 (y0 / you)
            :ARG1-of (p0 / poor)
            :ARG1-of (p1 / possible-01)))

# ::snt Nepalese citizens require a visa to visit the UK.
# ::tokens ["Nepalese", "citizens", "require", "a", "visa", "to", "visit", "the", "UK", "."]
# ::ner_tags ["NORP", "O", "O", "O", "O", "O", "O", "O", "GPE", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "B", "O"]
# ::pos_tags ["JJ", "NNS", "VBP", "DT", "NN", "TO", "VB", "DT", "NNP", "."]
# ::lemmas ["Nepalese", "citizen", "require", "a", "visa", "to", "visit", "the", "UK", "."]
(r0 / require-01
      :ARG1 (v0 / visa)
      :ARG0 (c0 / citizen
            :mod (c1 / country
                  :name (n0 / name
                        :op1 "UK" ))
            :mod (c2 / country
                  :name (n1 / name
                        :op1 "Jesus" )))
      :purpose (v1 / visit-01
            :ARG0 c0))

# ::snt It depends on how long it's been out.
# ::tokens ["It", "depends", "on", "how", "long", "it", "'s", "been", "out", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WRB", "JJ", "PRP", "VBZ", "VBN", "RB", "."]
# ::lemmas ["it", "depend", "on", "how", "long", "it", "be", "be", "out", "."]
(d0 / depend-01
      :ARG1 (t0 / temporal-quantity
            :duration-of (o0 / out))
      :ARG0 (i0 / it))

# ::snt This is a difficult one.
# ::tokens ["This", "is", "a", "difficult", "one", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["this", "be", "a", "difficult", "one", "."]
(d0 / difficult
      :domain (t0 / this))

# ::snt You may want it, but the process given to you is what you have to work within.
# ::tokens ["You", "may", "want", "it", ",", "but", "the", "process", "given", "to", "you", "is", "what", "you", "have", "to", "work", "within", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", ",", "CC", "DT", "NN", "VBN", "IN", "PRP", "VBZ", "WP", "PRP", "VBP", "TO", "VB", "IN", "."]
# ::lemmas ["you", "may", "want", "it", ",", "but", "the", "process", "give", "to", "you", "be", "what", "you", "have", "to", "work", "within", "."]
(c0 / contrast-01
      :ARG1 (p0 / possible-01
            :ARG1 (w0 / want-01
                  :ARG1 (i0 / it)
                  :ARG0 (y0 / you)))
      :ARG2 (t0 / thing
            :ARG1-of (w1 / work-01
                  :ARG0 y0
                  :ARG2-of (o0 / obligate-01
                        :ARG1 y0))
            :domain (p1 / process-02
                  :ARG1-of (g0 / give-14
                        :ARG2 y0))))

# ::snt It depends on what you want to say/imply.
# ::tokens ["It", "depends", "on", "what", "you", "want", "to", "say", "/", "imply", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WP", "PRP", "VBP", "TO", "VB", "SYM", "VB", "."]
# ::lemmas ["it", "depend", "on", "what", "you", "want", "to", "say", "/", "imply", "."]
(d0 / depend-01
      :ARG1 (s0 / slash
            :op1 (t0 / thing
                  :ARG1-of (s1 / say-01
                        :ARG0 (y0 / you)
                        :ARG1-of (w0 / want-01
                              :ARG0 y0)))
            :op2 (t1 / thing
                  :ARG1-of (i1 / imply-01
                        :ARG0 y0)))
      :ARG0 (i0 / it))

# ::snt You should, but you don't have to.
# ::tokens ["You", "should", ",", "but", "you", "do", "n't", "have", "to", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", ",", "CC", "PRP", "VBP", "RB", "VB", "TO", "."]
# ::lemmas ["you", "should", ",", "but", "you", "do", "not", "have", "to", "."]
(c0 / contrast-01
      :ARG1 (r0 / recommend-01
            :ARG2 (y0 / you))
      :ARG2 (o0 / obligate-01
            :ARG1 y0
            :polarity - ))

# ::snt The Joker doesn't care about money.
# ::tokens ["The", "Joker", "does", "n't", "care", "about", "money", "."]
# ::ner_tags ["O", "ORG", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NNP", "VBZ", "RB", "VB", "IN", "NN", "."]
# ::lemmas ["the", "Joker", "do", "not", "care", "about", "money", "."]
(c0 / care-01
      :ARG1 (m0 / money)
      :ARG0 (p0 / person
            :name (n0 / name
                  :op1 "Joker" ))
      :polarity - )

# ::snt So I don't think you need to put it on the cover.
# ::tokens ["So", "I", "do", "n't", "think", "you", "need", "to", "put", "it", "on", "the", "cover", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["RB", "PRP", "VBP", "RB", "VB", "PRP", "VBP", "TO", "VB", "PRP", "IN", "DT", "NN", "."]
# ::lemmas ["so", "i", "do", "not", "think", "you", "need", "to", "put", "it", "on", "the", "cover", "."]
(c0 / cause-01
      :ARG1 (t0 / think-01
            :ARG1 (n0 / need-01
                  :ARG1 (p0 / put-01
                        :ARG0 y0
                        :ARG1 (i1 / it)
                        :ARG2 (c1 / cover))
                  :ARG0 (y0 / you))
            :ARG0 (i0 / i)
            :polarity - ))

# ::snt Yes, it is hard to publish in a peer reviewed journal.
# ::tokens ["Yes", ",", "it", "is", "hard", "to", "publish", "in", "a", "peer", "reviewed", "journal", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "VBZ", "JJ", "TO", "VB", "IN", "DT", "NN", "VBN", "NNP", "."]
# ::lemmas ["yes", ",", "it", "be", "hard", "to", "publish", "in", "a", "peer", "review", "journal", "."]
(h0 / hard-02
      :ARG1 (p0 / publish-01
            :location (j0 / journal
                  :ARG1-of (r0 / review-01
                        :ARG0 (p1 / peer)))))

# ::snt So if that's what you need, you really do have to be explicit about it.
# ::tokens ["So", "if", "that", "'s", "what", "you", "need", ",", "you", "really", "do", "have", "to", "be", "explicit", "about", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["CC", "IN", "DT", "VBZ", "WP", "PRP", "VBP", ",", "PRP", "RB", "VBP", "VB", "TO", "VB", "JJ", "IN", "PRP", "."]
# ::lemmas ["so", "if", "that", "be", "what", "you", "need", ",", "you", "really", "do", "have", "to", "be", "explicit", "about", "it", "."]
(o0 / obligate-01
      :ARG1 (y0 / you)
      :ARG1-of (r0 / real-04)
      :ARG2 (e0 / explicit-03
            :ARG0 y0
            :ARG1 (i0 / it))
      :condition (n0 / need-01
            :ARG0 y0
            :ARG1 i0
            :ARG1 (t0 / that)))

# ::snt There's no rule against it.
# ::tokens ["There", "'s", "no", "rule", "against", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBZ", "DT", "NN", "IN", "PRP", "."]
# ::lemmas ["there", "be", "no", "rule", "against", "it", "."]
(r0 / rule-01
      :ARG3 (i0 / it)
      :polarity - )

# ::snt It depends on how it's used.
# ::tokens ["It", "depends", "on", "how", "it", "'s", "used", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "IN", "WRB", "PRP", "VBZ", "VBN", "."]
# ::lemmas ["it", "depend", "on", "how", "it", "be", "use", "."]
(d0 / depend-01
      :ARG1 (t0 / thing
            :manner-of (u0 / use-01
                  :ARG1 i0))
      :ARG0 (i0 / it))

# ::snt They just don't want you to know it.
# ::tokens ["They", "just", "do", "n't", "want", "you", "to", "know", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBP", "RB", "VB", "PRP", "TO", "VB", "PRP", "."]
# ::lemmas ["they", "just", "do", "not", "want", "you", "to", "know", "it", "."]
(w0 / want-01
      :ARG1 (k0 / know-01
            :ARG1 (i0 / it)
            :ARG0 (y0 / you))
      :ARG0 (t0 / they)
      :mod (j0 / just)
      :polarity - )

# ::snt I think it's a bad idea.
# ::tokens ["I", "think", "it", "'s", "a", "bad", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "PRP", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["i", "think", "it", "be", "a", "bad", "idea", "."]
(t0 / think-01
      :ARG1 (i0 / idea
            :ARG1-of (b0 / bad-07)
            :domain (i2 / it))
      :ARG0 (i1 / i))

# ::snt You need to pick how and where you want to place your foot and do it.
# ::tokens ["You", "need", "to", "pick", "how", "and", "where", "you", "want", "to", "place", "your", "foot", "and", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "WRB", "CC", "WRB", "PRP", "VBP", "TO", "VB", "PRP$", "NN", "CC", "VB", "PRP", "."]
# ::lemmas ["you", "need", "to", "pick", "how", "and", "where", "you", "want", "to", "place", "your", "foot", "and", "do", "it", "."]
(n0 / need-01
      :ARG1 (p0 / pick-01
            :ARG0 y0
            :ARG1 (a0 / and
                  :op1 (t0 / thing)
                  :op2 (l0 / location)))
      :ARG0 (y0 / you
            :ARG0-of (d0 / do-02
                  :ARG1 l0
                  :ARG1 (i0 / it))
            :ARG0-of (w0 / want-01)
            :ARG0-of (p1 / place-01
                  :ARG1 f0
                  :ARG1 i0)
            :part (f0 / foot)))

# ::snt You should never do it.
# ::tokens ["You", "should", "never", "do", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "RB", "VB", "PRP", "."]
# ::lemmas ["you", "should", "never", "do", "it", "."]
(r0 / recommend-01
      :ARG1 (d0 / do-02
            :ARG0 (y0 / you)
            :ARG1 (i0 / it)
            :polarity - 
            :time (e0 / ever)))

# ::snt The answer to both questions is: Yes.
# ::tokens ["The", "answer", "to", "both", "questions", "is", ":", "Yes", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "NN", "IN", "DT", "NNS", "VBZ", ":", "UH", "."]
# ::lemmas ["the", "answer", "to", "both", "question", "be", ":", "yes", "."]
(a0 / answer-01
      :ARG2 (y0 / yes)
      :ARG2 (q0 / question-01
            :mod (b0 / both)))

# ::snt They can, but the way to do it depends on what you have available.
# ::tokens ["They", "can", ",", "but", "the", "way", "to", "do", "it", "depends", "on", "what", "you", "have", "available", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", ",", "CC", "DT", "NN", "TO", "VB", "PRP", "VBZ", "IN", "WP", "PRP", "VBP", "JJ", "."]
# ::lemmas ["they", "can", ",", "but", "the", "way", "to", "do", "it", "depend", "on", "what", "you", "have", "available", "."]
(c0 / contrast-01
      :ARG1 (d0 / depend-01
            :ARG1 (t0 / thing
                  :ARG2-of (a0 / available-02
                        :ARG1 (h0 / have-03
                              :ARG0 (y0 / you))))
            :ARG0 (w0 / way))
      :ARG1 (p0 / possible-01
            :ARG1 (d1 / do-02
                  :ARG1 (i0 / it)
                  :ARG0 (t1 / they))))

# ::snt It's not just a good idea, it's an excellent idea.
# ::tokens ["It", "'s", "not", "just", "a", "good", "idea", ",", "it", "'s", "an", "excellent", "idea", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "RB", "DT", "JJ", "NN", ",", "PRP", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["it", "be", "not", "just", "a", "good", "idea", ",", "it", "be", "an", "excellent", "idea", "."]
(a0 / and
      :op1 (i0 / idea
            :mod (j0 / just
                  :polarity - )
            :ARG1-of (g0 / good-02)
            :domain (i2 / it))
      :op2 (i1 / idea
            :domain i2
            :ARG1-of (e0 / excellent-02)))

# ::snt To my knowledge, there's no time requirement.
# ::tokens ["To", "my", "knowledge", ",", "there", "'s", "no", "time", "requirement", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["IN", "PRP$", "NN", ",", "EX", "VBZ", "DT", "NN", "NN", "."]
# ::lemmas ["to", "my", "knowledge", ",", "there", "be", "no", "time", "requirement", "."]
(r0 / require-01
      :ARG1 (t0 / time)
      :ARG1-of (k0 / know-01
            :ARG0 (i0 / i))
      :polarity - )

# ::snt This is a part answer to your question
# ::tokens ["This", "is", "a", "part", "answer", "to", "your", "question"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "DT", "NN", "NN", "IN", "PRP$", "NN"]
# ::lemmas ["this", "be", "a", "part", "answer", "to", "your", "question"]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 (y0 / you))
      :ARG0 (t0 / this)
      :degree (p0 / part))

# ::snt It really isn't your problem how they are going to find a qualified person to do the job.
# ::tokens ["It", "really", "is", "n't", "your", "problem", "how", "they", "are", "going", "to", "find", "a", "qualified", "person", "to", "do", "the", "job", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "RB", "VBZ", "RB", "PRP$", "NN", "WRB", "PRP", "VBP", "VBG", "TO", "VB", "DT", "JJ", "NN", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["it", "really", "be", "not", "your", "problem", "how", "they", "be", "go", "to", "find", "a", "qualified", "person", "to", "do", "the", "job", "."]
(p0 / problem
      :ARG1-of (r0 / real-04)
      :polarity - 
      :domain (f0 / find-01
            :ARG1 (d0 / do-02
                  :ARG1 (j0 / job))
            :ARG0 (t0 / they)
            :ARG1 (p1 / person
                  :ARG1-of (q0 / qualify-02)))
      :poss (y0 / you))

# ::snt There are two options for you -
# ::tokens ["There", "are", "two", "options", "for", "you", "-"]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "CD", "NNS", "IN", "PRP", "."]
# ::lemmas ["there", "be", "two", "option", "for", "you", "-"]
(o0 / option
      :quant (y0 / you)
      :quant 2 )

# ::snt There is also a Youtube-Version of the film.
# ::tokens ["There", "is", "also", "a", "Youtube", "-", "Version", "of", "the", "film", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBZ", "RB", "DT", "NNP", "HYPH", "NNP", "IN", "DT", "NN", "."]
# ::lemmas ["there", "be", "also", "a", "Youtube", "-", "Version", "of", "the", "film", "."]
(v0 / video
      :mod (a0 / also)
      :mod (p0 / publication
            :name (n0 / name
                  :op1 "YouTube" ))
      :mod (f0 / film))

# ::snt You can do it, but you might not be a professor.
# ::tokens ["You", "can", "do", "it", ",", "but", "you", "might", "not", "be", "a", "professor", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", ",", "CC", "PRP", "MD", "RB", "VB", "DT", "NN", "."]
# ::lemmas ["you", "can", "do", "it", ",", "but", "you", "may", "not", "be", "a", "professor", "."]
(c0 / contrast-01
      :ARG1 (p0 / possible-01
            :ARG1 (d0 / do-02
                  :ARG1 (i0 / it)
                  :ARG0 (y0 / you)))
      :ARG2 (p1 / possible-01
            :ARG1 (p2 / professor
                  :domain i0
                  :domain y0
                  :polarity - )))

# ::snt You may want it, but the process given to you is what you have to work within.
# ::tokens ["You", "may", "want", "it", ",", "but", "the", "process", "given", "to", "you", "is", "what", "you", "have", "to", "work", "within", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", ",", "CC", "DT", "NN", "VBN", "IN", "PRP", "VBZ", "WP", "PRP", "VBP", "TO", "VB", "IN", "."]
# ::lemmas ["you", "may", "want", "it", ",", "but", "the", "process", "give", "to", "you", "be", "what", "you", "have", "to", "work", "within", "."]
(c0 / contrast-01
      :ARG1 (p0 / possible-01
            :ARG1 (w0 / want-01
                  :ARG1 (i0 / it)
                  :ARG0 (y0 / you)))
      :ARG2 (t0 / thing
            :ARG1-of (w1 / work-01
                  :ARG0 y0
                  :ARG2-of (o0 / obligate-01
                        :ARG1 y0))
            :domain (p1 / process-02
                  :ARG1-of (g0 / give-14
                        :ARG2 y0))))

# ::snt You have to decide how much you want to demand, and what unmet demands you can live with.
# ::tokens ["You", "have", "to", "decide", "how", "much", "you", "want", "to", "demand", ",", "and", "what", "unmet", "demands", "you", "can", "live", "with", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "WRB", "JJ", "PRP", "VBP", "TO", "VB", ",", "CC", "WP", "NNP", "VBZ", "PRP", "MD", "VB", "IN", "."]
# ::lemmas ["you", "have", "to", "decide", "how", "much", "you", "want", "to", "demand", ",", "and", "what", "unmet", "demand", "you", "can", "live", "with", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (d1 / demand-01)
            :ARG0-of (w0 / want-01)
            :ARG0-of (d2 / demand-01)
            :ARG0-of (l0 / live-01))
      :ARG2 (d0 / decide-01
            :ARG0 y0
            :ARG1 (a0 / and
                  :op2 (p0 / possible-01)
                  :op1 (d3 / demand-01
                        :mod - )
                  :op1 (t0 / thing))))

# ::snt It's a good question.
# ::tokens ["It", "'s", "a", "good", "question", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["it", "be", "a", "good", "question", "."]
(q0 / question-01
      :ARG1-of (i0 / it)
      :ARG1-of (g0 / good-02))

# ::snt It's much better to ask.
# ::tokens ["It", "'s", "much", "better", "to", "ask", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "RB", "JJR", "TO", "VB", "."]
# ::lemmas ["it", "be", "much", "well", "to", "ask", "."]
(h0 / have-degree-91
      :ARG1 (a0 / ask-01)
      :ARG2 (g0 / good-02
            :ARG1 a0)
      :ARG3 (m0 / more
            :quant (m1 / much)))

# ::snt It seems to work.
# ::tokens ["It", "seems", "to", "work", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "TO", "VB", "."]
# ::lemmas ["it", "seem", "to", "work", "."]
(s0 / seem-01
      :ARG1 (w0 / work-09
            :ARG1 (i0 / it)))

# ::snt There are two traditional ways to bend wood:
# ::tokens ["There", "are", "two", "traditional", "ways", "to", "bend", "wood", ":"]
# ::ner_tags ["O", "O", "CARDINAL", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "B", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "CD", "JJ", "NNS", "TO", "VB", "NN", ":"]
# ::lemmas ["there", "be", "two", "traditional", "way", "to", "bend", "wood", ":"]
(w0 / way
      :mod (t0 / tradition)
      :quant 2 
      :manner-of (b0 / bend-01
            :ARG1 (w1 / wood)))

# ::snt You have a lot of answers already, but I'd like to add Curries as another solutions.
# ::tokens ["You", "have", "a", "lot", "of", "answers", "already", ",", "but", "I", "'d", "like", "to", "add", "Curries", "as", "another", "solutions", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORG", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "DT", "NN", "IN", "NNS", "RB", ",", "CC", "PRP", "MD", "VB", "TO", "VB", "NNS", "IN", "DT", "NNS", "."]
# ::lemmas ["you", "have", "a", "lot", "of", "answer", "already", ",", "but", "i", "'d", "like", "to", "add", "Curries", "as", "another", "solution", "."]
(c0 / contrast-01
      :ARG1 (h0 / have-03
            :ARG1 (a0 / answer-01
                  :quant (l1 / lot))
            :ARG0 (y0 / you)
            :time (a1 / already))
      :ARG2 (l0 / like-02
            :ARG1 (a2 / add-02
                  :ARG0 i0
                  :ARG1 (t0 / thing
                        :mod (a3 / another)
                        :ARG2-of (s0 / solve-01))
                  :ARG1 (p0 / product
                        :name (n0 / name
                              :op1 "Curries" )))
            :ARG0 (i0 / i)))

# ::snt There is no quarantine period.
# ::tokens ["There", "is", "no", "quarantine", "period", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBZ", "DT", "JJ", "NN", "."]
# ::lemmas ["there", "be", "no", "quarantine", "period", "."]
(p0 / period
      :mod (q0 / quarantine)
      :polarity - )

# ::snt Yes, you should create a portfolio site to showcase what you can do and what you've done.
# ::tokens ["Yes", ",", "you", "should", "create", "a", "portfolio", "site", "to", "showcase", "what", "you", "can", "do", "and", "what", "you", "'ve", "done", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "MD", "VB", "DT", "NN", "NN", "TO", "VB", "WP", "PRP", "MD", "VB", "CC", "WP", "PRP", "VB", "VBN", "."]
# ::lemmas ["yes", ",", "you", "should", "create", "a", "portfolio", "site", "to", "showcase", "what", "you", "can", "do", "and", "what", "you", "have", "do", "."]
(r0 / recommend-01
      :ARG1 (c0 / create-01
            :ARG0 (y0 / you
                  :ARG0-of (d0 / do-02
                        :ARG1 (t0 / thing)
                        :ARG1 (t1 / thing))
                  :ARG0-of (d1 / do-02
                        :ARG1 a0
                        :ARG1-of (p1 / possible-01)))
            :ARG1 (s0 / site
                  :mod (p0 / portfolio))
            :purpose (s1 / show-01
                  :ARG0 y0
                  :ARG1 (a0 / and
                        :op2 t0
                        :op2 t1
                        :op2 p1))))

# ::snt It is his job to see that you have what you need to do your job.
# ::tokens ["It", "is", "his", "job", "to", "see", "that", "you", "have", "what", "you", "need", "to", "do", "your", "job", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "PRP$", "NN", "TO", "VB", "IN", "PRP", "VBP", "WP", "PRP", "VBP", "TO", "VB", "PRP$", "NN", "."]
# ::lemmas ["it", "be", "his", "job", "to", "see", "that", "you", "have", "what", "you", "need", "to", "do", "your", "job", "."]
(j0 / job
      :domain (s0 / see-01
            :ARG0 h0
            :ARG1 (h1 / have-03
                  :ARG1 (t0 / thing
                        :ARG1-of (d0 / do-02
                              :ARG0 y0
                              :ARG1 j1))
                  :ARG0 (y0 / you
                        :ARG0-of (n0 / need-01
                              :purpose d0)
                        :poss-of (j1 / job))))
      :poss (h0 / he))

# ::snt No it is not.
# ::tokens ["No", "it", "is", "not", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O"]
# ::pos_tags ["UH", "PRP", "VBZ", "RB", "."]
# ::lemmas ["no", "it", "be", "not", "."]
(n0 / no)

# ::snt My recommendation is not to say anything, and do the best you can.
# ::tokens ["My", "recommendation", "is", "not", "to", "say", "anything", ",", "and", "do", "the", "best", "you", "can", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP$", "NN", "VBZ", "RB", "TO", "VB", "NN", ",", "CC", "VB", "DT", "JJS", "PRP", "MD", "."]
# ::lemmas ["my", "recommendation", "be", "not", "to", "say", "anything", ",", "and", "do", "the", "good", "you", "can", "."]
(r0 / recommend-01
      :ARG1 (a0 / and
            :op1 (s0 / say-01
                  :ARG1 (a1 / anything)
                  :ARG0 (y0 / you
                        :ARG0-of (d1 / do-02
                              :ARG1-of (p0 / possible-01)))
                  :polarity - )
            :op2 (d0 / do-02
                  :ARG0 y0
                  :ARG1 (t0 / thing
                        :ARG1-of (g0 / good-02)
                        :ARG1-of (h0 / have-degree-91
                              :ARG2 g0
                              :ARG3 (m0 / most)))
                  :mode imperative ))
      :ARG0 (i0 / i))

# ::snt You don't have to do anything to season it.
# ::tokens ["You", "do", "n't", "have", "to", "do", "anything", "to", "season", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "NN", "TO", "VB", "PRP", "."]
# ::lemmas ["you", "do", "not", "have", "to", "do", "anything", "to", "season", "it", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (a0 / assess-01
                  :ARG1 (i0 / it)))
      :ARG2 (d0 / do-02
            :ARG0 y0
            :purpose a0
            :ARG1 (a1 / anything))
      :polarity - )

# ::snt You should tell a good story and sometimes you have to tweak reality/history to do so.
# ::tokens ["You", "should", "tell", "a", "good", "story", "and", "sometimes", "you", "have", "to", "tweak", "reality", "/", "history", "to", "do", "so", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "VB", "DT", "JJ", "NN", "CC", "RB", "PRP", "VBP", "TO", "VB", "NN", "SYM", "NN", "TO", "VB", "RB", "."]
# ::lemmas ["you", "should", "tell", "a", "good", "story", "and", "sometimes", "you", "have", "to", "tweak", "reality", "/", "history", "to", "do", "so", "."]
(a0 / and
      :op1 (r0 / recommend-01
            :ARG1 (t0 / tell-01
                  :ARG0 y0
                  :ARG1 (s1 / story
                        :ARG1-of (g0 / good-02))))
      :op2 (o0 / obligate-01
            :ARG1 (y0 / you)
            :ARG2 (t1 / tweak-01
                  :ARG0 y0
                  :ARG1 (s2 / slash
                        :op1 (r1 / reality)
                        :op2 (h0 / history)))
            :frequency (s0 / sometimes)))

# ::snt The best thing to do is to overcome the fussiness.
# ::tokens ["The", "best", "thing", "to", "do", "is", "to", "overcome", "the", "fussiness", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "JJS", "NN", "TO", "VB", "VBZ", "TO", "VB", "DT", "NN", "."]
# ::lemmas ["the", "good", "thing", "to", "do", "be", "to", "overcome", "the", "fussiness", "."]
(t0 / thing
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most))
      :domain (o0 / overcome-01
            :ARG1 (f0 / fuss-01)))

# ::snt "Saying ""thanks, I don't have any questions at the moment."""
# ::tokens ["\"", "Saying", "\"", "\"", "thanks", ",", "I", "do", "n't", "have", "any", "questions", "at", "the", "moment", ".", "\"", "\"", "\""]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["``", "VBG", "''", "``", "NNS", ",", "PRP", "VBP", "RB", "VB", "DT", "NNS", "IN", "DT", "NN", ".", "''", "''", "''"]
# ::lemmas ["\"", "say", "\"", "\"", "thank", ",", "i", "do", "not", "have", "any", "question", "at", "the", "moment", ".", "\"", "\"", "\""]
(a0 / and
      :op1 (s0 / say-01
            :ARG0 (t0 / thank-01
                  :ARG0 i0))
      :op2 (h0 / have-03
            :ARG1 (q0 / question-01
                  :quant (a1 / any))
            :ARG0 (i0 / i)
            :polarity - 
            :time (m0 / moment)))

# ::snt You should prime it first.
# ::tokens ["You", "should", "prime", "it", "first", "."]
# ::ner_tags ["O", "O", "O", "O", "ORDINAL", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O"]
# ::pos_tags ["PRP", "MD", "VB", "PRP", "RB", "."]
# ::lemmas ["you", "should", "prime", "it", "first", "."]
(r0 / recommend-01
      :ARG1 (p0 / prime
            :ARG0 y0
            :ord (i0 / it)
            :ord (o0 / ordinal-entity
                  :value 1 ))
      :ARG2 (y0 / you))

# ::snt What kind of floors are above?
# ::tokens ["What", "kind", "of", "floors", "are", "above", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WDT", "NN", "IN", "NNS", "VBP", "RB", "."]
# ::lemmas ["what", "kind", "of", "floor", "be", "above", "?"]
(f0 / floor
      :mod (k0 / kind
            :mod (a1 / amr-unknown))
      :location (a0 / above))

# ::snt It's all about adhesion.
# ::tokens ["It", "'s", "all", "about", "adhesion", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBZ", "DT", "IN", "NN", "."]
# ::lemmas ["it", "be", "all", "about", "adhesion", "."]
(c0 / concern-02
      :ARG1 (a0 / all)
      :ARG1 (a1 / adhesion))

# ::snt You have to know what you want to do.
# ::tokens ["You", "have", "to", "know", "what", "you", "want", "to", "do", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "WP", "PRP", "VBP", "TO", "VB", "."]
# ::lemmas ["you", "have", "to", "know", "what", "you", "want", "to", "do", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (d0 / do-02
                  :ARG1 t0)
            :ARG0-of (w0 / want-01
                  :ARG1 d0))
      :ARG2 (k0 / know-01
            :ARG0 y0
            :ARG1 (t0 / thing)))

# ::snt You will also want to remove the seeds.
# ::tokens ["You", "will", "also", "want", "to", "remove", "the", "seeds", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "MD", "RB", "VB", "TO", "VB", "DT", "NNS", "."]
# ::lemmas ["you", "will", "also", "want", "to", "remove", "the", "seed", "."]
(w0 / want-01
      :ARG1 (r0 / remove-01
            :ARG0 y0
            :ARG1 (s0 / seed))
      :ARG0 (y0 / you)
      :mod (a0 / also))

# ::snt Remember this is your degree we are talking about, its up to you what you want to do.
# ::tokens ["Remember", "this", "is", "your", "degree", "we", "are", "talking", "about", ",", "its", "up", "to", "you", "what", "you", "want", "to", "do", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["VB", "DT", "VBZ", "PRP$", "NN", "PRP", "VBP", "VBG", "IN", ",", "PRP$", "RP", "IN", "PRP", "WP", "PRP", "VBP", "TO", "VB", "."]
# ::lemmas ["remember", "this", "be", "your", "degree", "we", "be", "talk", "about", ",", "its", "up", "to", "you", "what", "you", "want", "to", "do", "."]
(r0 / remember-01
      :ARG1 (a0 / and
            :op1 (t0 / talk-01
                  :ARG1 d2
                  :ARG0 (w1 / we))
            :op2 (d0 / depend-01
                  :ARG1 y0
                  :ARG0 (t1 / thing)))
      :ARG0 (y0 / you
            :ARG0-of (w0 / want-01
                  :ARG1 d1)
            :ARG0-of (d1 / do-02
                  :ARG1 t1)
            :poss-of (d2 / degree
                  :mod (t2 / this)))
      :mode imperative )

# ::snt What is your paper for?
# ::tokens ["What", "is", "your", "paper", "for", "?"]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["WP", "VBZ", "PRP$", "NN", "IN", "."]
# ::lemmas ["what", "be", "your", "paper", "for", "?"]
(p0 / paper
      :poss (a0 / amr-unknown)
      :poss (y0 / you))

# ::snt You don't need sauce at all.
# ::tokens ["You", "do", "n't", "need", "sauce", "at", "all", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "NN", "RB", "RB", "."]
# ::lemmas ["you", "do", "not", "need", "sauce", "at", "all", "."]
(n0 / need-01
      :ARG1 (s0 / sauce)
      :ARG0 (y0 / you)
      :mod (a0 / at-all)
      :polarity - )

# ::snt To directly answer the two questions in your title.
# ::tokens ["To", "directly", "answer", "the", "two", "questions", "in", "your", "title", "."]
# ::ner_tags ["O", "O", "O", "O", "CARDINAL", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "B", "O", "O", "O", "O", "O"]
# ::pos_tags ["TO", "RB", "VB", "DT", "CD", "NNS", "IN", "PRP$", "NN", "."]
# ::lemmas ["to", "directly", "answer", "the", "two", "question", "in", "your", "title", "."]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :quant (t0 / thing
                  :ARG2-of (t1 / title-01
                        :ARG1 (y0 / you)))
            :quant 2 )
      :manner (d0 / direct-02))

# ::snt You don't have equipments/facilities to do research in B.
# ::tokens ["You", "do", "n't", "have", "equipments", "/", "facilities", "to", "do", "research", "in", "B."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "NNS", "SYM", "NNS", "TO", "VB", "NN", "IN", "NNP"]
# ::lemmas ["you", "do", "not", "have", "equipment", "/", "facility", "to", "do", "research", "in", "B."]
(h0 / have-03
      :ARG1 (s0 / slash
            :op1 (e0 / equipment)
            :op2 (f0 / facility))
      :ARG0 (y0 / you)
      :polarity - 
      :purpose (r0 / research-01
            :ARG0 y0
            :location (v0 / variable
                  :name (n0 / name
                        :op1 "B" ))))

# ::snt There are a few things I don't understand:
# ::tokens ["There", "are", "a", "few", "things", "I", "do", "n't", "understand", ":"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBP", "DT", "JJ", "NNS", "PRP", "VBP", "RB", "VB", ":"]
# ::lemmas ["there", "be", "a", "few", "thing", "i", "do", "not", "understand", ":"]
(t0 / thing
      :ARG1-of (f0 / few)
      :ARG1-of (u0 / understand-01
            :ARG0 (i0 / i)
            :polarity - ))

# ::snt Yes, there is a reason for it.
# ::tokens ["Yes", ",", "there", "is", "a", "reason", "for", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "EX", "VBZ", "DT", "NN", "IN", "PRP", "."]
# ::lemmas ["yes", ",", "there", "be", "a", "reason", "for", "it", "."]
(r0 / reason
      :purpose (i0 / it))

# ::snt Yes, although they can be a bit sour.
# ::tokens ["Yes", ",", "although", "they", "can", "be", "a", "bit", "sour", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "IN", "PRP", "MD", "VB", "DT", "NN", "JJ", "."]
# ::lemmas ["yes", ",", "although", "they", "can", "be", "a", "bit", "sour", "."]
(h0 / have-concession-91
      :ARG2 (p0 / possible-01
            :ARG1 (s0 / sour
                  :domain (t0 / they)
                  :degree (b0 / bit))))

# ::snt You do not need to worry.
# ::tokens ["You", "do", "not", "need", "to", "worry", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "."]
# ::lemmas ["you", "do", "not", "need", "to", "worry", "."]
(n0 / need-01
      :ARG1 (w0 / worry-01
            :ARG1 y0)
      :ARG0 (y0 / you)
      :polarity - )

# ::snt Other than that you don't have a tax issue.
# ::tokens ["Other", "than", "that", "you", "do", "n't", "have", "a", "tax", "issue", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["JJ", "IN", "IN", "PRP", "VBP", "RB", "VB", "DT", "NN", "NN", "."]
# ::lemmas ["other", "than", "that", "you", "do", "not", "have", "a", "tax", "issue", "."]
(h0 / have-03
      :ARG1 (i0 / issue-02
            :ARG0 (t0 / tax-01))
      :ARG0 (y0 / you)
      :polarity - 
      :ARG2-of (e0 / except-01
            :ARG1 (t1 / that)))

# ::snt Point is: know what you want and don't be afraid to ask for it.
# ::tokens ["Point", "is", ":", "know", "what", "you", "want", "and", "do", "n't", "be", "afraid", "to", "ask", "for", "it", "."]
# ::ner_tags ["ORG", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["B", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["NNP", "VBZ", ":", "VB", "WP", "PRP", "VBP", "CC", "VBP", "RB", "VB", "JJ", "TO", "VB", "IN", "PRP", "."]
# ::lemmas ["Point", "be", ":", "know", "what", "you", "want", "and", "do", "not", "be", "afraid", "to", "ask", "for", "it", "."]
(a0 / and
      :op1 (k0 / know-01
            :ARG1 (t0 / thing
                  :ARG1-of (w0 / want-01
                        :ARG0 y0))
            :ARG0 (y0 / you)
            :mode imperative )
      :op2 (f0 / fear-01
            :ARG1 (a1 / ask-02)
            :polarity - )
      :domain (h0 / have-talking-point-07
            :ARG3 t0
            :ARG0 y0))

# ::snt You're right on about the sample definition.
# ::tokens ["You", "'re", "right", "on", "about", "the", "sample", "definition", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "JJ", "IN", "IN", "DT", "NN", "NN", "."]
# ::lemmas ["you", "be", "right", "on", "about", "the", "sample", "definition", "."]
(g0 / go-on-25
      :ARG1 (t0 / thing
            :ARG2-of (d0 / define-01
                  :ARG1 (s0 / sample-01)))
      :ARG0 (y0 / you)
      :mod (r0 / right))

# ::snt You don't have to worry.
# ::tokens ["You", "do", "n't", "have", "to", "worry", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "."]
# ::lemmas ["you", "do", "not", "have", "to", "worry", "."]
(o0 / obligate-01
      :ARG1 (y0 / you)
      :ARG2 (w0 / worry-02
            :ARG0 y0)
      :polarity - )

# ::snt You're probably going to have to read various blogs to get all the information you want.
# ::tokens ["You", "'re", "probably", "going", "to", "have", "to", "read", "various", "blogs", "to", "get", "all", "the", "information", "you", "want", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VBG", "TO", "VB", "TO", "VB", "JJ", "NNS", "TO", "VB", "PDT", "DT", "NN", "PRP", "VBP", "."]
# ::lemmas ["you", "be", "probably", "go", "to", "have", "to", "read", "various", "blog", "to", "get", "all", "the", "information", "you", "want", "."]
(p0 / probable
      :domain (o0 / obligate-01
            :ARG2 (y0 / you
                  :ARG0-of (g0 / get-01
                        :ARG1 (i0 / information
                              :mod (a0 / all)))
                  :ARG0-of (w0 / want-01
                        :ARG1 i0))
            :ARG2 (r0 / read-01
                  :ARG0 y0
                  :ARG1 (b0 / blog
                        :mod (v0 / various)))))

# ::snt This is a part answer to your question
# ::tokens ["This", "is", "a", "part", "answer", "to", "your", "question"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["DT", "VBZ", "DT", "NN", "NN", "IN", "PRP$", "NN"]
# ::lemmas ["this", "be", "a", "part", "answer", "to", "your", "question"]
(a0 / answer-01
      :ARG1 (q0 / question-01
            :ARG0 (y0 / you))
      :ARG0 (t0 / this)
      :degree (p0 / part))

# ::snt Your best bet is research.
# ::tokens ["Your", "best", "bet", "is", "research", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP$", "JJS", "NN", "VBZ", "NN", "."]
# ::lemmas ["your", "good", "bet", "be", "research", "."]
(b0 / bet-01
      :ARG0 (r0 / research-01)
      :ARG0 (y0 / you)
      :ARG1-of (g0 / good-02)
      :ARG1-of (h0 / have-degree-91
            :ARG2 g0
            :ARG3 (m0 / most)))

# ::snt Yes, there is a chemical difference.
# ::tokens ["Yes", ",", "there", "is", "a", "chemical", "difference", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "EX", "VBZ", "DT", "NN", "NN", "."]
# ::lemmas ["yes", ",", "there", "be", "a", "chemical", "difference", "."]
(d0 / differ-02
      :mod (c0 / chemical))

# ::snt You don't have to do anything to season it.
# ::tokens ["You", "do", "n't", "have", "to", "do", "anything", "to", "season", "it", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "TO", "VB", "NN", "TO", "VB", "PRP", "."]
# ::lemmas ["you", "do", "not", "have", "to", "do", "anything", "to", "season", "it", "."]
(o0 / obligate-01
      :ARG1 (y0 / you
            :ARG0-of (a0 / assess-01
                  :ARG1 (i0 / it)))
      :ARG2 (d0 / do-02
            :ARG0 y0
            :purpose a0
            :ARG1 (a1 / anything))
      :polarity - )

# ::snt There is no code telling you that you cannot do this.
# ::tokens ["There", "is", "no", "code", "telling", "you", "that", "you", "can", "not", "do", "this", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["EX", "VBZ", "DT", "NN", "VBG", "PRP", "IN", "PRP", "MD", "RB", "VB", "DT", "."]
# ::lemmas ["there", "be", "no", "code", "tell", "you", "that", "you", "can", "not", "do", "this", "."]
(c0 / code
      :polarity - 
      :ARG0-of (t0 / tell-01
            :ARG1 (p0 / possible-01
                  :ARG1 (d0 / do-02
                        :ARG0 y0
                        :ARG1 (t1 / this))
                  :polarity - )
            :ARG2 (y0 / you)))

# ::snt Yes, you should talk to your professor.
# ::tokens ["Yes", ",", "you", "should", "talk", "to", "your", "professor", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["UH", ",", "PRP", "MD", "VB", "IN", "PRP$", "NN", "."]
# ::lemmas ["yes", ",", "you", "should", "talk", "to", "your", "professor", "."]
(r0 / recommend-01
      :ARG1 (t0 / talk-01
            :ARG0 y0
            :ARG2 (p0 / person))
      :ARG2 (y0 / you
            :ARG1-of (h0 / have-rel-role-91
                  :ARG0 p0
                  :ARG2 (p1 / professor))))

# ::snt You don't need sauce at all.
# ::tokens ["You", "do", "n't", "need", "sauce", "at", "all", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::ner_iob ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::pos_tags ["PRP", "VBP", "RB", "VB", "NN", "RB", "RB", "."]
# ::lemmas ["you", "do", "not", "need", "sauce", "at", "all", "."]
(n0 / need-01
      :ARG1 (s0 / sauce)
      :ARG0 (y0 / you)
      :mod (a0 / at-all)
      :polarity - )

